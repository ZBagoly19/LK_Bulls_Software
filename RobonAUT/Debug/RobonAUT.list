
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010124  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  080102e8  080102e8  000202e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105d0  080105d0  00030188  2**0
                  CONTENTS
  4 .ARM          00000008  080105d0  080105d0  000205d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105d8  080105d8  00030188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105d8  080105d8  000205d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105dc  080105dc  000205dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080105e0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  20000188  08010768  00030188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  08010768  000307a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032361  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eae  00000000  00000000  00062519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  000663c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a48  00000000  00000000  00067f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029216  00000000  00000000  000699c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026cf0  00000000  00000000  00092bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6362  00000000  00000000  000b98c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001afc28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007924  00000000  00000000  001afc7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000188 	.word	0x20000188
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080102d0 	.word	0x080102d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000018c 	.word	0x2000018c
 8000200:	080102d0 	.word	0x080102d0

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__gedf2>:
 80009a0:	f04f 3cff 	mov.w	ip, #4294967295
 80009a4:	e006      	b.n	80009b4 <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__ledf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	e002      	b.n	80009b4 <__cmpdf2+0x4>
 80009ae:	bf00      	nop

080009b0 <__cmpdf2>:
 80009b0:	f04f 0c01 	mov.w	ip, #1
 80009b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ca:	d01b      	beq.n	8000a04 <__cmpdf2+0x54>
 80009cc:	b001      	add	sp, #4
 80009ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d2:	bf0c      	ite	eq
 80009d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d8:	ea91 0f03 	teqne	r1, r3
 80009dc:	bf02      	ittt	eq
 80009de:	ea90 0f02 	teqeq	r0, r2
 80009e2:	2000      	moveq	r0, #0
 80009e4:	4770      	bxeq	lr
 80009e6:	f110 0f00 	cmn.w	r0, #0
 80009ea:	ea91 0f03 	teq	r1, r3
 80009ee:	bf58      	it	pl
 80009f0:	4299      	cmppl	r1, r3
 80009f2:	bf08      	it	eq
 80009f4:	4290      	cmpeq	r0, r2
 80009f6:	bf2c      	ite	cs
 80009f8:	17d8      	asrcs	r0, r3, #31
 80009fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fe:	f040 0001 	orr.w	r0, r0, #1
 8000a02:	4770      	bx	lr
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__cmpdf2+0x64>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d107      	bne.n	8000a24 <__cmpdf2+0x74>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d1d6      	bne.n	80009cc <__cmpdf2+0x1c>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d0d3      	beq.n	80009cc <__cmpdf2+0x1c>
 8000a24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdrcmple>:
 8000a2c:	4684      	mov	ip, r0
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4662      	mov	r2, ip
 8000a32:	468c      	mov	ip, r1
 8000a34:	4619      	mov	r1, r3
 8000a36:	4663      	mov	r3, ip
 8000a38:	e000      	b.n	8000a3c <__aeabi_cdcmpeq>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_cdcmpeq>:
 8000a3c:	b501      	push	{r0, lr}
 8000a3e:	f7ff ffb7 	bl	80009b0 <__cmpdf2>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	bf48      	it	mi
 8000a46:	f110 0f00 	cmnmi.w	r0, #0
 8000a4a:	bd01      	pop	{r0, pc}

08000a4c <__aeabi_dcmpeq>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff fff4 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a54:	bf0c      	ite	eq
 8000a56:	2001      	moveq	r0, #1
 8000a58:	2000      	movne	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmplt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffea 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmple>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffe0 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpge>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffce 	bl	8000a2c <__aeabi_cdrcmple>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpgt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffc4 	bl	8000a2c <__aeabi_cdrcmple>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b0a8      	sub	sp, #160	; 0xa0
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e42:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000e7a:	f00f f9ab 	bl	80101d4 <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	4aaa      	ldr	r2, [pc, #680]	; (800112c <SERVO_Init+0x2f4>)
 8000e82:	015b      	lsls	r3, r3, #5
 8000e84:	4413      	add	r3, r2
 8000e86:	3314      	adds	r3, #20
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fafc 	bl	8000488 <__aeabi_ui2d>
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	4ba6      	ldr	r3, [pc, #664]	; (8001130 <SERVO_Init+0x2f8>)
 8000e96:	f7ff fc9b 	bl	80007d0 <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fe2d 	bl	8000b00 <__aeabi_d2uiz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	4a9f      	ldr	r2, [pc, #636]	; (800112c <SERVO_Init+0x2f4>)
 8000eb0:	015b      	lsls	r3, r3, #5
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3314      	adds	r3, #20
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fae5 	bl	8000488 <__aeabi_ui2d>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	460d      	mov	r5, r1
 8000ec2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000ec6:	f7ff fadf 	bl	8000488 <__aeabi_ui2d>
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	4b99      	ldr	r3, [pc, #612]	; (8001134 <SERVO_Init+0x2fc>)
 8000ed0:	f7ff f99e 	bl	8000210 <__adddf3>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b95      	ldr	r3, [pc, #596]	; (8001138 <SERVO_Init+0x300>)
 8000ee2:	f7ff fb4b 	bl	800057c <__aeabi_dmul>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4620      	mov	r0, r4
 8000eec:	4629      	mov	r1, r5
 8000eee:	f7ff fc6f 	bl	80007d0 <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <SERVO_Init+0x2fc>)
 8000f00:	f7ff f984 	bl	800020c <__aeabi_dsub>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f7ff fdf8 	bl	8000b00 <__aeabi_d2uiz>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000f16:	2313      	movs	r3, #19
 8000f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000f1c:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	4a81      	ldr	r2, [pc, #516]	; (800112c <SERVO_Init+0x2f4>)
 8000f28:	015b      	lsls	r3, r3, #5
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3308      	adds	r3, #8
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a82      	ldr	r2, [pc, #520]	; (800113c <SERVO_Init+0x304>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10e      	bne.n	8000f54 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	4b81      	ldr	r3, [pc, #516]	; (8001140 <SERVO_Init+0x308>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a80      	ldr	r2, [pc, #512]	; (8001140 <SERVO_Init+0x308>)
 8000f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b7e      	ldr	r3, [pc, #504]	; (8001140 <SERVO_Init+0x308>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	e046      	b.n	8000fe2 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	4a75      	ldr	r2, [pc, #468]	; (800112c <SERVO_Init+0x2f4>)
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3308      	adds	r3, #8
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f64:	d10e      	bne.n	8000f84 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	4b75      	ldr	r3, [pc, #468]	; (8001140 <SERVO_Init+0x308>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a74      	ldr	r2, [pc, #464]	; (8001140 <SERVO_Init+0x308>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b72      	ldr	r3, [pc, #456]	; (8001140 <SERVO_Init+0x308>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	e02e      	b.n	8000fe2 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	4a69      	ldr	r2, [pc, #420]	; (800112c <SERVO_Init+0x2f4>)
 8000f88:	015b      	lsls	r3, r3, #5
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a6c      	ldr	r2, [pc, #432]	; (8001144 <SERVO_Init+0x30c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10e      	bne.n	8000fb4 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b69      	ldr	r3, [pc, #420]	; (8001140 <SERVO_Init+0x308>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a68      	ldr	r2, [pc, #416]	; (8001140 <SERVO_Init+0x308>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b66      	ldr	r3, [pc, #408]	; (8001140 <SERVO_Init+0x308>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	e016      	b.n	8000fe2 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	4a5d      	ldr	r2, [pc, #372]	; (800112c <SERVO_Init+0x2f4>)
 8000fb8:	015b      	lsls	r3, r3, #5
 8000fba:	4413      	add	r3, r2
 8000fbc:	3308      	adds	r3, #8
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a61      	ldr	r2, [pc, #388]	; (8001148 <SERVO_Init+0x310>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10d      	bne.n	8000fe2 <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b5d      	ldr	r3, [pc, #372]	; (8001140 <SERVO_Init+0x308>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a5c      	ldr	r2, [pc, #368]	; (8001140 <SERVO_Init+0x308>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b5a      	ldr	r3, [pc, #360]	; (8001140 <SERVO_Init+0x308>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4a51      	ldr	r2, [pc, #324]	; (800112c <SERVO_Init+0x2f4>)
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	4413      	add	r3, r2
 8000fea:	3308      	adds	r3, #8
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8000ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ff4:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 8000ffa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4618      	mov	r0, r3
 800100e:	f006 fb61 	bl	80076d4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800101a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f007 fc0b 	bl	8008840 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4618      	mov	r0, r3
 8001030:	f006 fd06 	bl	8007a40 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8001040:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f008 fb98 	bl	8009780 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001050:	2360      	movs	r3, #96	; 0x60
 8001052:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001058:	2300      	movs	r3, #0
 800105a:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	4a32      	ldr	r2, [pc, #200]	; (800112c <SERVO_Init+0x2f4>)
 8001064:	015b      	lsls	r3, r3, #5
 8001066:	4413      	add	r3, r2
 8001068:	3310      	adds	r3, #16
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4618      	mov	r0, r3
 8001076:	f007 fa0b 	bl	8008490 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 800107a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800107e:	f7ff fa03 	bl	8000488 <__aeabi_ui2d>
 8001082:	4604      	mov	r4, r0
 8001084:	460d      	mov	r5, r1
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	4a28      	ldr	r2, [pc, #160]	; (800112c <SERVO_Init+0x2f4>)
 800108a:	015b      	lsls	r3, r3, #5
 800108c:	4413      	add	r3, r2
 800108e:	3318      	adds	r3, #24
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa1a 	bl	80004cc <__aeabi_f2d>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <SERVO_Init+0x314>)
 800109e:	f7ff fb97 	bl	80007d0 <__aeabi_ddiv>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4620      	mov	r0, r4
 80010a8:	4629      	mov	r1, r5
 80010aa:	f7ff fa67 	bl	800057c <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	88fc      	ldrh	r4, [r7, #6]
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f7ff fd22 	bl	8000b00 <__aeabi_d2uiz>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <SERVO_Init+0x318>)
 80010c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 80010c6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80010ca:	f7ff f9dd 	bl	8000488 <__aeabi_ui2d>
 80010ce:	4604      	mov	r4, r0
 80010d0:	460d      	mov	r5, r1
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <SERVO_Init+0x31c>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f9f9 	bl	80004cc <__aeabi_f2d>
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <SERVO_Init+0x314>)
 80010e0:	f7ff fb76 	bl	80007d0 <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4620      	mov	r0, r4
 80010ea:	4629      	mov	r1, r5
 80010ec:	f7ff fa46 	bl	800057c <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	88fc      	ldrh	r4, [r7, #6]
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fd01 	bl	8000b00 <__aeabi_d2uiz>
 80010fe:	4603      	mov	r3, r0
 8001100:	b299      	uxth	r1, r3
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <SERVO_Init+0x318>)
 8001104:	00a3      	lsls	r3, r4, #2
 8001106:	4413      	add	r3, r2
 8001108:	460a      	mov	r2, r1
 800110a:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <SERVO_Init+0x2f4>)
 8001110:	015b      	lsls	r3, r3, #5
 8001112:	4413      	add	r3, r2
 8001114:	3310      	adds	r3, #16
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f006 fd7e 	bl	8007c20 <HAL_TIM_PWM_Start>

}
 8001124:	bf00      	nop
 8001126:	37a0      	adds	r7, #160	; 0xa0
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	08010568 	.word	0x08010568
 8001130:	41490000 	.word	0x41490000
 8001134:	3ff00000 	.word	0x3ff00000
 8001138:	40490000 	.word	0x40490000
 800113c:	40001800 	.word	0x40001800
 8001140:	40023800 	.word	0x40023800
 8001144:	40000400 	.word	0x40000400
 8001148:	40000800 	.word	0x40000800
 800114c:	40340000 	.word	0x40340000
 8001150:	200001a4 	.word	0x200001a4
 8001154:	40066666 	.word	0x40066666

08001158 <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	ed87 0a00 	vstr	s0, [r7]
 8001164:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <SERVO_MoveTo+0x94>)
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	885b      	ldrh	r3, [r3, #2]
 8001174:	4619      	mov	r1, r3
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <SERVO_MoveTo+0x94>)
 800117a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800117e:	1acb      	subs	r3, r1, r3
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	edd7 7a00 	vldr	s15, [r7]
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	ee17 0a90 	vmov	r0, s15
 8001194:	f7ff f99a 	bl	80004cc <__aeabi_f2d>
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <SERVO_MoveTo+0x98>)
 800119e:	f7ff fb17 	bl	80007d0 <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4614      	mov	r4, r2
 80011a8:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <SERVO_MoveTo+0x94>)
 80011ae:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f978 	bl	80004a8 <__aeabi_i2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff f826 	bl	8000210 <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fc98 	bl	8000b00 <__aeabi_d2uiz>
 80011d0:	4603      	mov	r3, r0
 80011d2:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <SERVO_MoveTo+0x9c>)
 80011d8:	015b      	lsls	r3, r3, #5
 80011da:	4413      	add	r3, r2
 80011dc:	330c      	adds	r3, #12
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	89fa      	ldrh	r2, [r7, #14]
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bdb0      	pop	{r4, r5, r7, pc}
 80011ec:	200001a4 	.word	0x200001a4
 80011f0:	40668000 	.word	0x40668000
 80011f4:	08010568 	.word	0x08010568

080011f8 <HAL_UART_RxCpltCallback>:
void Kovetendo_vonal_valaszto(int* elso, int* hatso);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
			bluetooth_flag = 1;
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
		bluetooth_a++;
	}
	HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);*/
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
				kanyarban_vagy_egyenes);
		bluetooth_i++;
		bluetooth_len = strlen(bluetooth_buffer);
		//HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);
	}*/
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8001226:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t tavolsag1_buff[50];
	VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_Dev_t vl53l1_c; // center module
	VL53L1_DEV Dev = &vl53l1_c;
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122e:	f002 f9fb 	bl	8003628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 faad 	bl	8001790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f000 feff 	bl	8002038 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800123a:	f000 feb3 	bl	8001fa4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800123e:	f000 fb19 	bl	8001874 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001242:	f000 fb45 	bl	80018d0 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001246:	f000 fbd5 	bl	80019f4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800124a:	f000 fc09 	bl	8001a60 <MX_SPI3_Init>
  MX_TIM3_Init();
 800124e:	f000 fc8b 	bl	8001b68 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001252:	f000 fce3 	bl	8001c1c <MX_TIM4_Init>
  MX_UART4_Init();
 8001256:	f000 fe51 	bl	8001efc <MX_UART4_Init>
  MX_TIM8_Init();
 800125a:	f000 fd33 	bl	8001cc4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800125e:	f000 fe77 	bl	8001f50 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001262:	f000 fb63 	bl	800192c <MX_I2C3_Init>
  MX_TIM12_Init();
 8001266:	f000 fdd9 	bl	8001e1c <MX_TIM12_Init>
  MX_DMA_Init();
 800126a:	f000 fec5 	bl	8001ff8 <MX_DMA_Init>
  MX_TIM2_Init();
 800126e:	f000 fc2d 	bl	8001acc <MX_TIM2_Init>
  MX_SPI1_Init();
 8001272:	f000 fb89 	bl	8001988 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init(SZERVO);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fdde 	bl	8000e38 <SERVO_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM1);
 800127c:	2000      	movs	r0, #0
 800127e:	f00e fe1b 	bl	800feb8 <DC_MOTOR_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM2);
 8001282:	2001      	movs	r0, #1
 8001284:	f00e fe18 	bl	800feb8 <DC_MOTOR_Init>
	DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 8001288:	2100      	movs	r1, #0
 800128a:	2000      	movs	r0, #0
 800128c:	f00e feea 	bl	8010064 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 8001290:	2100      	movs	r1, #0
 8001292:	2001      	movs	r0, #1
 8001294:	f00e fee6 	bl	8010064 <DC_MOTOR_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);		// motvez EN
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129e:	48ba      	ldr	r0, [pc, #744]	; (8001588 <main+0x368>)
 80012a0:	f003 fba6 	bl	80049f0 <HAL_GPIO_WritePin>

	//HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);
	HAL_TIM_Base_Start_IT(&htim2);
 80012a4:	48b9      	ldr	r0, [pc, #740]	; (800158c <main+0x36c>)
 80012a6:	f006 fb05 	bl	80078b4 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 80012aa:	2104      	movs	r1, #4
 80012ac:	48b8      	ldr	r0, [pc, #736]	; (8001590 <main+0x370>)
 80012ae:	f006 fcb7 	bl	8007c20 <HAL_TIM_PWM_Start>

	//Vonalszenzor init
	Vonalszenzor_Init();
 80012b2:	f000 ff8b 	bl	80021cc <Vonalszenzor_Init>


	// initialize vl53l1x communication parameters
	Dev->I2cHandle = &hi2c1;
 80012b6:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80012ba:	4ab6      	ldr	r2, [pc, #728]	; (8001594 <main+0x374>)
 80012bc:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev->I2cDevAddr = 0x52;
 80012c0:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80012c4:	2252      	movs	r2, #82	; 0x52
 80012c6:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	/*** Initialize GPIO expanders ***/
	// Unused GPIO should be configured as outputs to minimize the power consumption
	tavolsag1_buff[0] = 0x14; // GPDR (GPIO set direction register)
 80012ca:	2314      	movs	r3, #20
 80012cc:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	tavolsag1_buff[1] = 0xFF; // GPIO_0 - GPIO_7
 80012d0:	23ff      	movs	r3, #255	; 0xff
 80012d2:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[2] = 0xFF; // GPIO_8 - GPIO_15
 80012d6:	23ff      	movs	r3, #255	; 0xff
 80012d8:	f887 33c6 	strb.w	r3, [r7, #966]	; 0x3c6
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 3, 0xFFFF );
 80012dc:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80012e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2303      	movs	r3, #3
 80012e8:	2184      	movs	r1, #132	; 0x84
 80012ea:	48aa      	ldr	r0, [pc, #680]	; (8001594 <main+0x374>)
 80012ec:	f003 fd96 	bl	8004e1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_2_ADDR, tavolsag1_buff, 3, 0xFFFF );
 80012f0:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80012f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2303      	movs	r3, #3
 80012fc:	2186      	movs	r1, #134	; 0x86
 80012fe:	48a5      	ldr	r0, [pc, #660]	; (8001594 <main+0x374>)
 8001300:	f003 fd8c 	bl	8004e1c <HAL_I2C_Master_Transmit>

	// clear XSHUT (disable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001304:	2313      	movs	r3, #19
 8001306:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800130a:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800130e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	2184      	movs	r1, #132	; 0x84
 8001318:	489e      	ldr	r0, [pc, #632]	; (8001594 <main+0x374>)
 800131a:	f003 fd7f 	bl	8004e1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800131e:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8001322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	2184      	movs	r1, #132	; 0x84
 800132c:	4899      	ldr	r0, [pc, #612]	; (8001594 <main+0x374>)
 800132e:	f003 fe73 	bl	8005018 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 8001332:	f897 33c4 	ldrb.w	r3, [r7, #964]	; 0x3c4
 8001336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001340:	2313      	movs	r3, #19
 8001342:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 8001346:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800134a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2302      	movs	r3, #2
 8001352:	2184      	movs	r1, #132	; 0x84
 8001354:	488f      	ldr	r0, [pc, #572]	; (8001594 <main+0x374>)
 8001356:	f003 fd61 	bl	8004e1c <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 ); // 2ms reset time
 800135a:	2002      	movs	r0, #2
 800135c:	f002 f9d6 	bl	800370c <HAL_Delay>

	// set XSHUT (enable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state)
 8001360:	2313      	movs	r3, #19
 8001362:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 8001366:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800136a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	2184      	movs	r1, #132	; 0x84
 8001374:	4887      	ldr	r0, [pc, #540]	; (8001594 <main+0x374>)
 8001376:	f003 fd51 	bl	8004e1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800137a:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800137e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	2184      	movs	r1, #132	; 0x84
 8001388:	4882      	ldr	r0, [pc, #520]	; (8001594 <main+0x374>)
 800138a:	f003 fe45 	bl	8005018 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 800138e:	f897 33c4 	ldrb.w	r3, [r7, #964]	; 0x3c4
 8001392:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 800139c:	2313      	movs	r3, #19
 800139e:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 80013a2:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80013a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2302      	movs	r3, #2
 80013ae:	2184      	movs	r1, #132	; 0x84
 80013b0:	4878      	ldr	r0, [pc, #480]	; (8001594 <main+0x374>)
 80013b2:	f003 fd33 	bl	8004e1c <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 );
 80013b6:	2002      	movs	r0, #2
 80013b8:	f002 f9a8 	bl	800370c <HAL_Delay>

	/*** VL53L1X Initialization ***/
	VL53L1_WaitDeviceBooted( Dev );
 80013bc:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013c0:	f009 fb20 	bl	800aa04 <VL53L1_WaitDeviceBooted>
	VL53L1_DataInit( Dev );
 80013c4:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013c8:	f009 fac4 	bl	800a954 <VL53L1_DataInit>
	VL53L1_StaticInit( Dev );
 80013cc:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013d0:	f009 faf9 	bl	800a9c6 <VL53L1_StaticInit>
	VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 80013d4:	2103      	movs	r1, #3
 80013d6:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013da:	f009 fc45 	bl	800ac68 <VL53L1_SetDistanceMode>
	VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 80013de:	f24c 3150 	movw	r1, #50000	; 0xc350
 80013e2:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013e6:	f009 fcb5 	bl	800ad54 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 80013ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013ee:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013f2:	f009 fe3b 	bl	800b06c <VL53L1_SetInterMeasurementPeriodMilliSeconds>
	VL53L1_StartMeasurement( Dev );
 80013f6:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013fa:	f009 ff75 	bl	800b2e8 <VL53L1_StartMeasurement>
		kapu2 = kapuk[2];
		kapu3 = kapuk[3];
		kapu4 = kapuk[4];				ez a resz itt valahogy gebaszt okoz, akasztja a while-t
		kapu5 = kapuk[5];*/

		for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8001404:	e010      	b.n	8001428 <main+0x208>
			vonalak_h[i] = '-';
 8001406:	4a64      	ldr	r2, [pc, #400]	; (8001598 <main+0x378>)
 8001408:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800140c:	4413      	add	r3, r2
 800140e:	222d      	movs	r2, #45	; 0x2d
 8001410:	701a      	strb	r2, [r3, #0]
			vonalak_e[i] = '-';
 8001412:	4a62      	ldr	r2, [pc, #392]	; (800159c <main+0x37c>)
 8001414:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001418:	4413      	add	r3, r2
 800141a:	222d      	movs	r2, #45	; 0x2d
 800141c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 800141e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001422:	3301      	adds	r3, #1
 8001424:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8001428:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800142c:	2b04      	cmp	r3, #4
 800142e:	ddea      	ble.n	8001406 <main+0x1e6>
		}
		for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 8001430:	2301      	movs	r3, #1
 8001432:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8001436:	e010      	b.n	800145a <main+0x23a>
			vonal_eredmeny_h[i] = 0;
 8001438:	4a59      	ldr	r2, [pc, #356]	; (80015a0 <main+0x380>)
 800143a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800143e:	4413      	add	r3, r2
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
			vonal_eredmeny_e[i] = 0;
 8001444:	4a57      	ldr	r2, [pc, #348]	; (80015a4 <main+0x384>)
 8001446:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800144a:	4413      	add	r3, r2
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
		for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 8001450:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001454:	3301      	adds	r3, #1
 8001456:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800145a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800145e:	2b20      	cmp	r3, #32
 8001460:	ddea      	ble.n	8001438 <main+0x218>
		}

		Vonalszenzor_operal(vonal_eredmeny_h, vonal_eredmeny_e);
 8001462:	4950      	ldr	r1, [pc, #320]	; (80015a4 <main+0x384>)
 8001464:	484e      	ldr	r0, [pc, #312]	; (80015a0 <main+0x380>)
 8001466:	f000 fec3 	bl	80021f0 <Vonalszenzor_operal>
		for(int poz=1; poz < 33-1; poz++) {
 800146a:	2301      	movs	r3, #1
 800146c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001470:	e04d      	b.n	800150e <main+0x2ee>
		// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
			if(vonal_eredmeny_h[poz] > VONAL_THRESHOLD_H) {
 8001472:	4a4b      	ldr	r2, [pc, #300]	; (80015a0 <main+0x380>)
 8001474:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001478:	4413      	add	r3, r2
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f813 	bl	80004a8 <__aeabi_i2d>
 8001482:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <main+0x388>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7ff fb08 	bl	8000a9c <__aeabi_dcmpgt>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d038      	beq.n	8001504 <main+0x2e4>
				if(vonal_eredmeny_h[poz+1] > VONAL_THRESHOLD_H) {
 8001492:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001496:	3301      	adds	r3, #1
 8001498:	4a41      	ldr	r2, [pc, #260]	; (80015a0 <main+0x380>)
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f803 	bl	80004a8 <__aeabi_i2d>
 80014a2:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <main+0x388>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff faf8 	bl	8000a9c <__aeabi_dcmpgt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d028      	beq.n	8001504 <main+0x2e4>
					if(vonal_eredmeny_h[poz-1] < VONAL_THRESHOLD_H) {
 80014b2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80014b6:	3b01      	subs	r3, #1
 80014b8:	4a39      	ldr	r2, [pc, #228]	; (80015a0 <main+0x380>)
 80014ba:	5cd3      	ldrb	r3, [r2, r3]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe fff3 	bl	80004a8 <__aeabi_i2d>
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <main+0x388>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff faca 	bl	8000a60 <__aeabi_dcmplt>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d018      	beq.n	8001504 <main+0x2e4>
						int i = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
						while(vonalak_h[i] != '-') {
 80014d8:	e004      	b.n	80014e4 <main+0x2c4>
							i++;
 80014da:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80014de:	3301      	adds	r3, #1
 80014e0:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
						while(vonalak_h[i] != '-') {
 80014e4:	4a2c      	ldr	r2, [pc, #176]	; (8001598 <main+0x378>)
 80014e6:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b2d      	cmp	r3, #45	; 0x2d
 80014f0:	d1f3      	bne.n	80014da <main+0x2ba>
						}
						vonalak_h[i] = poz;
 80014f2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80014f6:	b2d9      	uxtb	r1, r3
 80014f8:	4a27      	ldr	r2, [pc, #156]	; (8001598 <main+0x378>)
 80014fa:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
		for(int poz=1; poz < 33-1; poz++) {
 8001504:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001508:	3301      	adds	r3, #1
 800150a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800150e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001512:	2b1f      	cmp	r3, #31
 8001514:	ddad      	ble.n	8001472 <main+0x252>
					}
				}
			}
		}
		for(int poz=1; poz < 33-1; poz++) {
 8001516:	2301      	movs	r3, #1
 8001518:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800151c:	e062      	b.n	80015e4 <main+0x3c4>
		// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
			if(vonal_eredmeny_e[poz] > VONAL_THRESHOLD_E) {
 800151e:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <main+0x384>)
 8001520:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe ffbd 	bl	80004a8 <__aeabi_i2d>
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <main+0x38c>)
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	f7ff fab2 	bl	8000a9c <__aeabi_dcmpgt>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d04d      	beq.n	80015da <main+0x3ba>
				if(vonal_eredmeny_e[poz+1] > VONAL_THRESHOLD_E) {
 800153e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001542:	3301      	adds	r3, #1
 8001544:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <main+0x384>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe ffad 	bl	80004a8 <__aeabi_i2d>
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <main+0x38c>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff faa2 	bl	8000a9c <__aeabi_dcmpgt>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d03d      	beq.n	80015da <main+0x3ba>
					if(vonal_eredmeny_e[poz-1] < VONAL_THRESHOLD_E) {
 800155e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001562:	3b01      	subs	r3, #1
 8001564:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <main+0x384>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff9d 	bl	80004a8 <__aeabi_i2d>
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <main+0x38c>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff fa74 	bl	8000a60 <__aeabi_dcmplt>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d02d      	beq.n	80015da <main+0x3ba>
						int i = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
						while(vonalak_e[i] != '-') {
 8001584:	e019      	b.n	80015ba <main+0x39a>
 8001586:	bf00      	nop
 8001588:	40020400 	.word	0x40020400
 800158c:	200005c8 	.word	0x200005c8
 8001590:	20000654 	.word	0x20000654
 8001594:	20000340 	.word	0x20000340
 8001598:	20000128 	.word	0x20000128
 800159c:	20000130 	.word	0x20000130
 80015a0:	200001ac 	.word	0x200001ac
 80015a4:	200001d0 	.word	0x200001d0
 80015a8:	20000118 	.word	0x20000118
 80015ac:	20000120 	.word	0x20000120
							i++;
 80015b0:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80015b4:	3301      	adds	r3, #1
 80015b6:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
						while(vonalak_e[i] != '-') {
 80015ba:	4a69      	ldr	r2, [pc, #420]	; (8001760 <main+0x540>)
 80015bc:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b2d      	cmp	r3, #45	; 0x2d
 80015c6:	d1f3      	bne.n	80015b0 <main+0x390>
						}
						vonalak_e[i] = poz;
 80015c8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80015cc:	b2d9      	uxtb	r1, r3
 80015ce:	4a64      	ldr	r2, [pc, #400]	; (8001760 <main+0x540>)
 80015d0:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80015d4:	4413      	add	r3, r2
 80015d6:	460a      	mov	r2, r1
 80015d8:	701a      	strb	r2, [r3, #0]
		for(int poz=1; poz < 33-1; poz++) {
 80015da:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80015de:	3301      	adds	r3, #1
 80015e0:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80015e4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80015e8:	2b1f      	cmp	r3, #31
 80015ea:	dd98      	ble.n	800151e <main+0x2fe>
					}
				}
			}
		}
		Kovetendo_vonal_valaszto(&vonal_kovetni_h, &vonal_kovetni_e);
 80015ec:	495d      	ldr	r1, [pc, #372]	; (8001764 <main+0x544>)
 80015ee:	485e      	ldr	r0, [pc, #376]	; (8001768 <main+0x548>)
 80015f0:	f001 fa82 	bl	8002af8 <Kovetendo_vonal_valaszto>
		//uint8_t Test[] = "Hello World\r\n"; //Data to send
		/*int size = sizeof(minta1);
		HAL_UART_Transmit(&huart2, minta1, size, 100);// Sending in normal mode
		HAL_Delay(1000);*/

		VL53L1_WaitMeasurementDataReady( Dev );
 80015f4:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80015f8:	f009 fef8 	bl	800b3ec <VL53L1_WaitMeasurementDataReady>
		VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 80015fc:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001600:	4619      	mov	r1, r3
 8001602:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001606:	f00a f8ad 	bl	800b764 <VL53L1_GetRangingMeasurementData>
		/*sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
				 ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
		HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );*/
		VL53L1_ClearInterruptAndStartMeasurement( Dev );
 800160a:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800160e:	f009 fed7 	bl	800b3c0 <VL53L1_ClearInterruptAndStartMeasurement>

		//Szervo
		if (btnEnable == 1) {
 8001612:	4b56      	ldr	r3, [pc, #344]	; (800176c <main+0x54c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b01      	cmp	r3, #1
 8001618:	f040 8081 	bne.w	800171e <main+0x4fe>
			if (szervoEnable == 1) {
 800161c:	4b54      	ldr	r3, [pc, #336]	; (8001770 <main+0x550>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d154      	bne.n	80016ce <main+0x4ae>
				cel = (vonal_kovetni_e) + 	(((vonal_kovetni_e) - (vonal_kovetni_h)) *kormanyzas_agresszivitas);
 8001624:	4b4f      	ldr	r3, [pc, #316]	; (8001764 <main+0x544>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff3d 	bl	80004a8 <__aeabi_i2d>
 800162e:	4604      	mov	r4, r0
 8001630:	460d      	mov	r5, r1
 8001632:	4b4c      	ldr	r3, [pc, #304]	; (8001764 <main+0x544>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <main+0x548>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff33 	bl	80004a8 <__aeabi_i2d>
 8001642:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <main+0x554>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe ff98 	bl	800057c <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4620      	mov	r0, r4
 8001652:	4629      	mov	r1, r5
 8001654:	f7fe fddc 	bl	8000210 <__adddf3>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff fa26 	bl	8000ab0 <__aeabi_d2iz>
 8001664:	4603      	mov	r3, r0
 8001666:	4a44      	ldr	r2, [pc, #272]	; (8001778 <main+0x558>)
 8001668:	6013      	str	r3, [r2, #0]
				//fel auto tavolsagra vetit ki. ezt novelni kell (?) hogy agresszivabban kanyarodjon
				if(cel < -30) {
 800166a:	4b43      	ldr	r3, [pc, #268]	; (8001778 <main+0x558>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f113 0f1e 	cmn.w	r3, #30
 8001672:	da06      	bge.n	8001682 <main+0x462>
					szervoSzog = 0;
 8001674:	4b41      	ldr	r3, [pc, #260]	; (800177c <main+0x55c>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
					szervoTeszt = 0;
 800167a:	4b41      	ldr	r3, [pc, #260]	; (8001780 <main+0x560>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e01a      	b.n	80016b8 <main+0x498>
				}
				else if(30 < cel) {
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <main+0x558>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b1e      	cmp	r3, #30
 8001688:	dd06      	ble.n	8001698 <main+0x478>
					szervoSzog = 180;
 800168a:	4b3c      	ldr	r3, [pc, #240]	; (800177c <main+0x55c>)
 800168c:	22b4      	movs	r2, #180	; 0xb4
 800168e:	601a      	str	r2, [r3, #0]
					szervoTeszt = 180;
 8001690:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <main+0x560>)
 8001692:	22b4      	movs	r2, #180	; 0xb4
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e00f      	b.n	80016b8 <main+0x498>
				} else {
					szervoSzog = 90 + cel *3;
 8001698:	4b37      	ldr	r3, [pc, #220]	; (8001778 <main+0x558>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	335a      	adds	r3, #90	; 0x5a
 80016a4:	4a35      	ldr	r2, [pc, #212]	; (800177c <main+0x55c>)
 80016a6:	6013      	str	r3, [r2, #0]
					szervoTeszt = 90 + cel *3;
 80016a8:	4b33      	ldr	r3, [pc, #204]	; (8001778 <main+0x558>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	335a      	adds	r3, #90	; 0x5a
 80016b4:	4a32      	ldr	r2, [pc, #200]	; (8001780 <main+0x560>)
 80016b6:	6013      	str	r3, [r2, #0]
				}

				SERVO_MoveTo(SZERVO, szervoSzog);
 80016b8:	4b30      	ldr	r3, [pc, #192]	; (800177c <main+0x55c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c4:	eeb0 0a67 	vmov.f32	s0, s15
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff fd45 	bl	8001158 <SERVO_MoveTo>
					SERVO_MoveTo(SZERVO, 180);
					//motornak nagyon lassu megadas
				}*/
			}

			if (motvezEnable == 1) {
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <main+0x564>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	f47f ae93 	bne.w	80013fe <main+0x1de>
				for(int k = 250; k < 500; k+=5) {
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, k); // ha pwm1 nagyobb, hatramenet
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - k);
					HAL_Delay(200);
				}*/
				int k = 420;		// 0 - 1023-ig 410 a minimum, az alatt karos a motornak
 80016d8:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80016dc:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
				if (k < motvez_d / 2) {						// motvez_d / 2 -nel nagyobb a hatramenet, pl. 900: gyors tolatás
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <main+0x568>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0fda      	lsrs	r2, r3, #31
 80016e6:	4413      	add	r3, r2
 80016e8:	105b      	asrs	r3, r3, #1
 80016ea:	461a      	mov	r2, r3
 80016ec:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f6bf ae84 	bge.w	80013fe <main+0x1de>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, k); 	// ha pwm1 nagyobb, hatramenet
 80016f6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4619      	mov	r1, r3
 80016fe:	2000      	movs	r0, #0
 8001700:	f00e fd0c 	bl	801011c <DC_MOTOR_Set_Speed>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - k);
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <main+0x568>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b29a      	uxth	r2, r3
 800170a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800170e:	b29b      	uxth	r3, r3
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	b29b      	uxth	r3, r3
 8001714:	4619      	mov	r1, r3
 8001716:	2001      	movs	r0, #1
 8001718:	f00e fd00 	bl	801011c <DC_MOTOR_Set_Speed>
 800171c:	e66f      	b.n	80013fe <main+0x1de>
				}
			}
		} else {
			SERVO_MoveTo(SZERVO, 90);
 800171e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800178c <main+0x56c>
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff fd18 	bl	8001158 <SERVO_MoveTo>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_d / 2);// elvileg ez a ketto a megallas
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <main+0x568>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0fda      	lsrs	r2, r3, #31
 800172e:	4413      	add	r3, r2
 8001730:	105b      	asrs	r3, r3, #1
 8001732:	b29b      	uxth	r3, r3
 8001734:	4619      	mov	r1, r3
 8001736:	2000      	movs	r0, #0
 8001738:	f00e fcf0 	bl	801011c <DC_MOTOR_Set_Speed>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - (motvez_d / 2));
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <main+0x568>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0fda      	lsrs	r2, r3, #31
 8001742:	4413      	add	r3, r2
 8001744:	105b      	asrs	r3, r3, #1
 8001746:	425b      	negs	r3, r3
 8001748:	b29a      	uxth	r2, r3
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <main+0x568>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	4413      	add	r3, r2
 8001752:	b29b      	uxth	r3, r3
 8001754:	4619      	mov	r1, r3
 8001756:	2001      	movs	r0, #1
 8001758:	f00e fce0 	bl	801011c <DC_MOTOR_Set_Speed>
		for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 800175c:	e64f      	b.n	80013fe <main+0x1de>
 800175e:	bf00      	nop
 8001760:	20000130 	.word	0x20000130
 8001764:	200001f8 	.word	0x200001f8
 8001768:	200001f4 	.word	0x200001f4
 800176c:	200001a8 	.word	0x200001a8
 8001770:	20000000 	.word	0x20000000
 8001774:	20000140 	.word	0x20000140
 8001778:	200001fc 	.word	0x200001fc
 800177c:	2000013c 	.word	0x2000013c
 8001780:	20000138 	.word	0x20000138
 8001784:	20000001 	.word	0x20000001
 8001788:	20000148 	.word	0x20000148
 800178c:	42b40000 	.word	0x42b40000

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	; 0x50
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	2234      	movs	r2, #52	; 0x34
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f00e fd7a 	bl	8010298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	4b2c      	ldr	r3, [pc, #176]	; (800186c <SystemClock_Config+0xdc>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a2b      	ldr	r2, [pc, #172]	; (800186c <SystemClock_Config+0xdc>)
 80017be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
 80017c4:	4b29      	ldr	r3, [pc, #164]	; (800186c <SystemClock_Config+0xdc>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d0:	2300      	movs	r3, #0
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	4b26      	ldr	r3, [pc, #152]	; (8001870 <SystemClock_Config+0xe0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a25      	ldr	r2, [pc, #148]	; (8001870 <SystemClock_Config+0xe0>)
 80017da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b23      	ldr	r3, [pc, #140]	; (8001870 <SystemClock_Config+0xe0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f6:	2302      	movs	r3, #2
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001800:	2304      	movs	r3, #4
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001804:	23b4      	movs	r3, #180	; 0xb4
 8001806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001808:	2302      	movs	r3, #2
 800180a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800180c:	2302      	movs	r3, #2
 800180e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001810:	2302      	movs	r3, #2
 8001812:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4618      	mov	r0, r3
 800181a:	f004 fd2d 	bl	8006278 <HAL_RCC_OscConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001824:	f001 f9a8 	bl	8002b78 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001828:	f004 f94a 	bl	8005ac0 <HAL_PWREx_EnableOverDrive>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001832:	f001 f9a1 	bl	8002b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001836:	230f      	movs	r3, #15
 8001838:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183a:	2302      	movs	r3, #2
 800183c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001842:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001848:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800184c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	2105      	movs	r1, #5
 8001854:	4618      	mov	r0, r3
 8001856:	f004 f983 	bl	8005b60 <HAL_RCC_ClockConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001860:	f001 f98a 	bl	8002b78 <Error_Handler>
  }
}
 8001864:	bf00      	nop
 8001866:	3750      	adds	r7, #80	; 0x50
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_I2C1_Init+0x50>)
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <MX_I2C1_Init+0x54>)
 800187c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_I2C1_Init+0x50>)
 8001880:	4a12      	ldr	r2, [pc, #72]	; (80018cc <MX_I2C1_Init+0x58>)
 8001882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_I2C1_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_I2C1_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_I2C1_Init+0x50>)
 8001892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001896:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_I2C1_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_I2C1_Init+0x50>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_I2C1_Init+0x50>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_I2C1_Init+0x50>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_I2C1_Init+0x50>)
 80018b2:	f003 f8e7 	bl	8004a84 <HAL_I2C_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018bc:	f001 f95c 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000340 	.word	0x20000340
 80018c8:	40005400 	.word	0x40005400
 80018cc:	000186a0 	.word	0x000186a0

080018d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_I2C2_Init+0x50>)
 80018d6:	4a13      	ldr	r2, [pc, #76]	; (8001924 <MX_I2C2_Init+0x54>)
 80018d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_I2C2_Init+0x50>)
 80018dc:	4a12      	ldr	r2, [pc, #72]	; (8001928 <MX_I2C2_Init+0x58>)
 80018de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_I2C2_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_I2C2_Init+0x50>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_I2C2_Init+0x50>)
 80018ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <MX_I2C2_Init+0x50>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_I2C2_Init+0x50>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <MX_I2C2_Init+0x50>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_I2C2_Init+0x50>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_I2C2_Init+0x50>)
 800190e:	f003 f8b9 	bl	8004a84 <HAL_I2C_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001918:	f001 f92e 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000394 	.word	0x20000394
 8001924:	40005800 	.word	0x40005800
 8001928:	000186a0 	.word	0x000186a0

0800192c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <MX_I2C3_Init+0x50>)
 8001932:	4a13      	ldr	r2, [pc, #76]	; (8001980 <MX_I2C3_Init+0x54>)
 8001934:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_I2C3_Init+0x50>)
 8001938:	4a12      	ldr	r2, [pc, #72]	; (8001984 <MX_I2C3_Init+0x58>)
 800193a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_I2C3_Init+0x50>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_I2C3_Init+0x50>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_I2C3_Init+0x50>)
 800194a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <MX_I2C3_Init+0x50>)
 8001952:	2200      	movs	r2, #0
 8001954:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_I2C3_Init+0x50>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <MX_I2C3_Init+0x50>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_I2C3_Init+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001968:	4804      	ldr	r0, [pc, #16]	; (800197c <MX_I2C3_Init+0x50>)
 800196a:	f003 f88b 	bl	8004a84 <HAL_I2C_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001974:	f001 f900 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000204 	.word	0x20000204
 8001980:	40005c00 	.word	0x40005c00
 8001984:	000186a0 	.word	0x000186a0

08001988 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800198c:	4b17      	ldr	r3, [pc, #92]	; (80019ec <MX_SPI1_Init+0x64>)
 800198e:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <MX_SPI1_Init+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <MX_SPI1_Init+0x64>)
 8001994:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001998:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_SPI1_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_SPI1_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_SPI1_Init+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_SPI1_Init+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_SPI1_Init+0x64>)
 80019b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_SPI1_Init+0x64>)
 80019bc:	2220      	movs	r2, #32
 80019be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <MX_SPI1_Init+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_SPI1_Init+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <MX_SPI1_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_SPI1_Init+0x64>)
 80019d4:	220a      	movs	r2, #10
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <MX_SPI1_Init+0x64>)
 80019da:	f004 ffab 	bl	8006934 <HAL_SPI_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019e4:	f001 f8c8 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000570 	.word	0x20000570
 80019f0:	40013000 	.word	0x40013000

080019f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_SPI2_Init+0x64>)
 80019fa:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <MX_SPI2_Init+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a28:	2218      	movs	r2, #24
 8001a2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a40:	220a      	movs	r2, #10
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a46:	f004 ff75 	bl	8006934 <HAL_SPI_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a50:	f001 f892 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000258 	.word	0x20000258
 8001a5c:	40003800 	.word	0x40003800

08001a60 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001a66:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <MX_SPI3_Init+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001a8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a90:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001aac:	220a      	movs	r2, #10
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <MX_SPI3_Init+0x64>)
 8001ab2:	f004 ff3f 	bl	8006934 <HAL_SPI_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001abc:	f001 f85c 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000430 	.word	0x20000430
 8001ac8:	40003c00 	.word	0x40003c00

08001acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <MX_TIM2_Init+0x98>)
 8001aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <MX_TIM2_Init+0x98>)
 8001af2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001af6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <MX_TIM2_Init+0x98>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <MX_TIM2_Init+0x98>)
 8001b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <MX_TIM2_Init+0x98>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <MX_TIM2_Init+0x98>)
 8001b0e:	2280      	movs	r2, #128	; 0x80
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b12:	4814      	ldr	r0, [pc, #80]	; (8001b64 <MX_TIM2_Init+0x98>)
 8001b14:	f005 fdde 	bl	80076d4 <HAL_TIM_Base_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b1e:	f001 f82b 	bl	8002b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480d      	ldr	r0, [pc, #52]	; (8001b64 <MX_TIM2_Init+0x98>)
 8001b30:	f006 fe86 	bl	8008840 <HAL_TIM_ConfigClockSource>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b3a:	f001 f81d 	bl	8002b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b46:	463b      	mov	r3, r7
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <MX_TIM2_Init+0x98>)
 8001b4c:	f007 fe18 	bl	8009780 <HAL_TIMEx_MasterConfigSynchronization>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b56:	f001 f80f 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200005c8 	.word	0x200005c8

08001b68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	f107 0320 	add.w	r3, r7, #32
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b8a:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <MX_TIM3_Init+0xac>)
 8001b8c:	4a22      	ldr	r2, [pc, #136]	; (8001c18 <MX_TIM3_Init+0xb0>)
 8001b8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b90:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <MX_TIM3_Init+0xac>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b96:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <MX_TIM3_Init+0xac>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <MX_TIM3_Init+0xac>)
 8001b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <MX_TIM3_Init+0xac>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <MX_TIM3_Init+0xac>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bb0:	4818      	ldr	r0, [pc, #96]	; (8001c14 <MX_TIM3_Init+0xac>)
 8001bb2:	f005 ff45 	bl	8007a40 <HAL_TIM_PWM_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001bbc:	f000 ffdc 	bl	8002b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4811      	ldr	r0, [pc, #68]	; (8001c14 <MX_TIM3_Init+0xac>)
 8001bd0:	f007 fdd6 	bl	8009780 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001bda:	f000 ffcd 	bl	8002b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bde:	2360      	movs	r3, #96	; 0x60
 8001be0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4807      	ldr	r0, [pc, #28]	; (8001c14 <MX_TIM3_Init+0xac>)
 8001bf6:	f006 fc4b 	bl	8008490 <HAL_TIM_PWM_ConfigChannel>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c00:	f000 ffba 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c04:	4803      	ldr	r0, [pc, #12]	; (8001c14 <MX_TIM3_Init+0xac>)
 8001c06:	f001 fb07 	bl	8003218 <HAL_TIM_MspPostInit>

}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	; 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200003e8 	.word	0x200003e8
 8001c18:	40000400 	.word	0x40000400

08001c1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	2224      	movs	r2, #36	; 0x24
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f00e fb34 	bl	8010298 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c38:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <MX_TIM4_Init+0xa0>)
 8001c3a:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <MX_TIM4_Init+0xa4>)
 8001c3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <MX_TIM4_Init+0xa0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <MX_TIM4_Init+0xa0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <MX_TIM4_Init+0xa0>)
 8001c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_TIM4_Init+0xa0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_TIM4_Init+0xa0>)
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c66:	2301      	movs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c76:	2301      	movs	r3, #1
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4619      	mov	r1, r3
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <MX_TIM4_Init+0xa0>)
 8001c8a:	f006 f951 	bl	8007f30 <HAL_TIM_Encoder_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c94:	f000 ff70 	bl	8002b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_TIM4_Init+0xa0>)
 8001ca6:	f007 fd6b 	bl	8009780 <HAL_TIMEx_MasterConfigSynchronization>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001cb0:	f000 ff62 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	3730      	adds	r7, #48	; 0x30
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200002f8 	.word	0x200002f8
 8001cc0:	40000800 	.word	0x40000800

08001cc4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b096      	sub	sp, #88	; 0x58
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]
 8001cf2:	615a      	str	r2, [r3, #20]
 8001cf4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f00e facb 	bl	8010298 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d02:	4b44      	ldr	r3, [pc, #272]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001d04:	4a44      	ldr	r2, [pc, #272]	; (8001e18 <MX_TIM8_Init+0x154>)
 8001d06:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d08:	4b42      	ldr	r3, [pc, #264]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001d0e:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001d10:	2260      	movs	r2, #96	; 0x60
 8001d12:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d14:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d1a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001d22:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d28:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d2e:	4839      	ldr	r0, [pc, #228]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001d30:	f005 fcd0 	bl	80076d4 <HAL_TIM_Base_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001d3a:	f000 ff1d 	bl	8002b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4832      	ldr	r0, [pc, #200]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001d4c:	f006 fd78 	bl	8008840 <HAL_TIM_ConfigClockSource>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001d56:	f000 ff0f 	bl	8002b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d5a:	482e      	ldr	r0, [pc, #184]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001d5c:	f005 fe70 	bl	8007a40 <HAL_TIM_PWM_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001d66:	f000 ff07 	bl	8002b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d76:	4619      	mov	r1, r3
 8001d78:	4826      	ldr	r0, [pc, #152]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001d7a:	f007 fd01 	bl	8009780 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001d84:	f000 fef8 	bl	8002b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d88:	2360      	movs	r3, #96	; 0x60
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d94:	2300      	movs	r3, #0
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	2204      	movs	r2, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4819      	ldr	r0, [pc, #100]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001dae:	f006 fb6f 	bl	8008490 <HAL_TIM_PWM_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001db8:	f000 fede 	bl	8002b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4813      	ldr	r0, [pc, #76]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001dc6:	f006 fb63 	bl	8008490 <HAL_TIM_PWM_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001dd0:	f000 fed2 	bl	8002b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4807      	ldr	r0, [pc, #28]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001df8:	f007 fda0 	bl	800993c <HAL_TIMEx_ConfigBreakDeadTime>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001e02:	f000 feb9 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

	//Itt kell megivni a DC_MOTOR_Init() -et
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e06:	4803      	ldr	r0, [pc, #12]	; (8001e14 <MX_TIM8_Init+0x150>)
 8001e08:	f001 fa06 	bl	8003218 <HAL_TIM_MspPostInit>

}
 8001e0c:	bf00      	nop
 8001e0e:	3758      	adds	r7, #88	; 0x58
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200002b0 	.word	0x200002b0
 8001e18:	40010400 	.word	0x40010400

08001e1c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08c      	sub	sp, #48	; 0x30
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0320 	add.w	r3, r7, #32
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]
 8001e3e:	615a      	str	r2, [r3, #20]
 8001e40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001e44:	4a2c      	ldr	r2, [pc, #176]	; (8001ef8 <MX_TIM12_Init+0xdc>)
 8001e46:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001e4a:	2213      	movs	r2, #19
 8001e4c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4e:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001e56:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001e5a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001e68:	4822      	ldr	r0, [pc, #136]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001e6a:	f005 fc33 	bl	80076d4 <HAL_TIM_Base_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001e74:	f000 fe80 	bl	8002b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	4619      	mov	r1, r3
 8001e84:	481b      	ldr	r0, [pc, #108]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001e86:	f006 fcdb 	bl	8008840 <HAL_TIM_ConfigClockSource>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001e90:	f000 fe72 	bl	8002b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e94:	4817      	ldr	r0, [pc, #92]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001e96:	f005 fdd3 	bl	8007a40 <HAL_TIM_PWM_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001ea0:	f000 fe6a 	bl	8002b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea4:	2360      	movs	r3, #96	; 0x60
 8001ea6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480e      	ldr	r0, [pc, #56]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001ebc:	f006 fae8 	bl	8008490 <HAL_TIM_PWM_ConfigChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001ec6:	f000 fe57 	bl	8002b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2204      	movs	r2, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4808      	ldr	r0, [pc, #32]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001ed2:	f006 fadd 	bl	8008490 <HAL_TIM_PWM_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001edc:	f000 fe4c 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	HAL_TIM_Base_Start_IT(&htim12);
 8001ee0:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001ee2:	f005 fce7 	bl	80078b4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001ee6:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <MX_TIM12_Init+0xd8>)
 8001ee8:	f001 f996 	bl	8003218 <HAL_TIM_MspPostInit>

}
 8001eec:	bf00      	nop
 8001eee:	3730      	adds	r7, #48	; 0x30
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000654 	.word	0x20000654
 8001ef8:	40001800 	.word	0x40001800

08001efc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_UART4_Init+0x4c>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <MX_UART4_Init+0x50>)
 8001f04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <MX_UART4_Init+0x4c>)
 8001f08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_UART4_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_UART4_Init+0x4c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <MX_UART4_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_UART4_Init+0x4c>)
 8001f22:	220c      	movs	r2, #12
 8001f24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <MX_UART4_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_UART4_Init+0x4c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_UART4_Init+0x4c>)
 8001f34:	f007 fde2 	bl	8009afc <HAL_UART_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001f3e:	f000 fe1b 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	2000052c 	.word	0x2000052c
 8001f4c:	40004c00 	.word	0x40004c00

08001f50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_USART1_UART_Init+0x4c>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <MX_USART1_UART_Init+0x50>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <MX_USART1_UART_Init+0x4c>)
 8001f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_USART1_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_USART1_UART_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <MX_USART1_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_USART1_UART_Init+0x4c>)
 8001f76:	2204      	movs	r2, #4
 8001f78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <MX_USART1_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_USART1_UART_Init+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_USART1_UART_Init+0x4c>)
 8001f88:	f007 fdb8 	bl	8009afc <HAL_UART_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f92:	f000 fdf1 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200004e8 	.word	0x200004e8
 8001fa0:	40011000 	.word	0x40011000

08001fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <MX_USART2_UART_Init+0x50>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fdc:	f007 fd8e 	bl	8009afc <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fe6:	f000 fdc7 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000610 	.word	0x20000610
 8001ff4:	40004400 	.word	0x40004400

08001ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_DMA_Init+0x3c>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <MX_DMA_Init+0x3c>)
 8002008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_DMA_Init+0x3c>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	2010      	movs	r0, #16
 8002020:	f001 fc88 	bl	8003934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002024:	2010      	movs	r0, #16
 8002026:	f001 fcb1 	bl	800398c <HAL_NVIC_EnableIRQ>

}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800

08002038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
 800204c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <MX_GPIO_Init+0x180>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a58      	ldr	r2, [pc, #352]	; (80021b8 <MX_GPIO_Init+0x180>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <MX_GPIO_Init+0x180>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b52      	ldr	r3, [pc, #328]	; (80021b8 <MX_GPIO_Init+0x180>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a51      	ldr	r2, [pc, #324]	; (80021b8 <MX_GPIO_Init+0x180>)
 8002074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b4f      	ldr	r3, [pc, #316]	; (80021b8 <MX_GPIO_Init+0x180>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <MX_GPIO_Init+0x180>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a4a      	ldr	r2, [pc, #296]	; (80021b8 <MX_GPIO_Init+0x180>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b48      	ldr	r3, [pc, #288]	; (80021b8 <MX_GPIO_Init+0x180>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	4b44      	ldr	r3, [pc, #272]	; (80021b8 <MX_GPIO_Init+0x180>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a43      	ldr	r2, [pc, #268]	; (80021b8 <MX_GPIO_Init+0x180>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <MX_GPIO_Init+0x180>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <MX_GPIO_Init+0x180>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a3c      	ldr	r2, [pc, #240]	; (80021b8 <MX_GPIO_Init+0x180>)
 80020c8:	f043 0308 	orr.w	r3, r3, #8
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b3a      	ldr	r3, [pc, #232]	; (80021b8 <MX_GPIO_Init+0x180>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80020da:	2200      	movs	r2, #0
 80020dc:	213d      	movs	r1, #61	; 0x3d
 80020de:	4837      	ldr	r0, [pc, #220]	; (80021bc <MX_GPIO_Init+0x184>)
 80020e0:	f002 fc86 	bl	80049f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80020e4:	2200      	movs	r2, #0
 80020e6:	f641 0102 	movw	r1, #6146	; 0x1802
 80020ea:	4835      	ldr	r0, [pc, #212]	; (80021c0 <MX_GPIO_Init+0x188>)
 80020ec:	f002 fc80 	bl	80049f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	f241 0126 	movw	r1, #4134	; 0x1026
 80020f6:	4833      	ldr	r0, [pc, #204]	; (80021c4 <MX_GPIO_Init+0x18c>)
 80020f8:	f002 fc7a 	bl	80049f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002102:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4619      	mov	r1, r3
 8002112:	482a      	ldr	r0, [pc, #168]	; (80021bc <MX_GPIO_Init+0x184>)
 8002114:	f002 f948 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002118:	233d      	movs	r3, #61	; 0x3d
 800211a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211c:	2301      	movs	r3, #1
 800211e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	4823      	ldr	r0, [pc, #140]	; (80021bc <MX_GPIO_Init+0x184>)
 8002130:	f002 f93a 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002134:	f641 0302 	movw	r3, #6146	; 0x1802
 8002138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	481c      	ldr	r0, [pc, #112]	; (80021c0 <MX_GPIO_Init+0x188>)
 800214e:	f002 f92b 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002152:	2310      	movs	r3, #16
 8002154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	4816      	ldr	r0, [pc, #88]	; (80021c0 <MX_GPIO_Init+0x188>)
 8002166:	f002 f91f 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 800216a:	f241 0326 	movw	r3, #4134	; 0x1026
 800216e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	4810      	ldr	r0, [pc, #64]	; (80021c4 <MX_GPIO_Init+0x18c>)
 8002184:	f002 f910 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002188:	2304      	movs	r3, #4
 800218a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4619      	mov	r1, r3
 800219a:	480b      	ldr	r0, [pc, #44]	; (80021c8 <MX_GPIO_Init+0x190>)
 800219c:	f002 f904 	bl	80043a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 80021a0:	2201      	movs	r2, #1
 80021a2:	2100      	movs	r1, #0
 80021a4:	2028      	movs	r0, #40	; 0x28
 80021a6:	f001 fbc5 	bl	8003934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021aa:	2028      	movs	r0, #40	; 0x28
 80021ac:	f001 fbee 	bl	800398c <HAL_NVIC_EnableIRQ>

}
 80021b0:	bf00      	nop
 80021b2:	3728      	adds	r7, #40	; 0x28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020800 	.word	0x40020800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40020c00 	.word	0x40020c00

080021cc <Vonalszenzor_Init>:

/* USER CODE BEGIN 4 */
static void Vonalszenzor_Init(void) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);	// PCB2: Von_OE1  0
 80021d0:	2200      	movs	r2, #0
 80021d2:	2104      	movs	r1, #4
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <Vonalszenzor_Init+0x1c>)
 80021d6:	f002 fc0b 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	// PCB2: Von_OE2  0
 80021da:	2200      	movs	r2, #0
 80021dc:	2120      	movs	r1, #32
 80021de:	4803      	ldr	r0, [pc, #12]	; (80021ec <Vonalszenzor_Init+0x20>)
 80021e0:	f002 fc06 	bl	80049f0 <HAL_GPIO_WritePin>
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40020400 	.word	0x40020400
 80021ec:	40020800 	.word	0x40020800

080021f0 <Vonalszenzor_operal>:

static void Vonalszenzor_operal(uint8_t* teljes_kiolvasott_h, uint8_t* teljes_kiolvasott_e) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80021fa:	48be      	ldr	r0, [pc, #760]	; (80024f4 <Vonalszenzor_operal+0x304>)
 80021fc:	f000 fc36 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	uint8_t eredmeny_16bit_temp[2] = {0b1110000, 0b00000000};
 8002200:	2370      	movs	r3, #112	; 0x70
 8002202:	81bb      	strh	r3, [r7, #12]
	//hatso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1h);
 8002204:	48bc      	ldr	r0, [pc, #752]	; (80024f8 <Vonalszenzor_operal+0x308>)
 8002206:	f000 fc31 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800220a:	4bbc      	ldr	r3, [pc, #752]	; (80024fc <Vonalszenzor_operal+0x30c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	f107 020c 	add.w	r2, r7, #12
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fc51 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[32] = (uint8_t) eredmeny_16bit_temp[0];
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3320      	adds	r3, #32
 800221e:	7b3a      	ldrb	r2, [r7, #12]
 8002220:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002222:	4bb7      	ldr	r3, [pc, #732]	; (8002500 <Vonalszenzor_operal+0x310>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f107 020c 	add.w	r2, r7, #12
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fc45 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[28] = (uint8_t) eredmeny_16bit_temp[0];
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	331c      	adds	r3, #28
 8002236:	7b3a      	ldrb	r2, [r7, #12]
 8002238:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800223a:	48ae      	ldr	r0, [pc, #696]	; (80024f4 <Vonalszenzor_operal+0x304>)
 800223c:	f000 fc16 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2h);
 8002240:	48b0      	ldr	r0, [pc, #704]	; (8002504 <Vonalszenzor_operal+0x314>)
 8002242:	f000 fc13 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002246:	4bad      	ldr	r3, [pc, #692]	; (80024fc <Vonalszenzor_operal+0x30c>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	f107 020c 	add.w	r2, r7, #12
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fc33 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[24] = (uint8_t) eredmeny_16bit_temp[0];
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3318      	adds	r3, #24
 800225a:	7b3a      	ldrb	r2, [r7, #12]
 800225c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800225e:	4ba8      	ldr	r3, [pc, #672]	; (8002500 <Vonalszenzor_operal+0x310>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f107 020c 	add.w	r2, r7, #12
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fc27 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[20] = (uint8_t) eredmeny_16bit_temp[0];
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3314      	adds	r3, #20
 8002272:	7b3a      	ldrb	r2, [r7, #12]
 8002274:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002276:	489f      	ldr	r0, [pc, #636]	; (80024f4 <Vonalszenzor_operal+0x304>)
 8002278:	f000 fbf8 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3h);
 800227c:	48a2      	ldr	r0, [pc, #648]	; (8002508 <Vonalszenzor_operal+0x318>)
 800227e:	f000 fbf5 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002282:	4b9e      	ldr	r3, [pc, #632]	; (80024fc <Vonalszenzor_operal+0x30c>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f107 020c 	add.w	r2, r7, #12
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f000 fc15 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[16] = (uint8_t) eredmeny_16bit_temp[0];
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3310      	adds	r3, #16
 8002296:	7b3a      	ldrb	r2, [r7, #12]
 8002298:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800229a:	4b99      	ldr	r3, [pc, #612]	; (8002500 <Vonalszenzor_operal+0x310>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	f107 020c 	add.w	r2, r7, #12
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fc09 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[12] = (uint8_t) eredmeny_16bit_temp[0];
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	330c      	adds	r3, #12
 80022ae:	7b3a      	ldrb	r2, [r7, #12]
 80022b0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80022b2:	4890      	ldr	r0, [pc, #576]	; (80024f4 <Vonalszenzor_operal+0x304>)
 80022b4:	f000 fbda 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4h);
 80022b8:	4894      	ldr	r0, [pc, #592]	; (800250c <Vonalszenzor_operal+0x31c>)
 80022ba:	f000 fbd7 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80022be:	4b8f      	ldr	r3, [pc, #572]	; (80024fc <Vonalszenzor_operal+0x30c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	f107 020c 	add.w	r2, r7, #12
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fbf7 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[8] = (uint8_t) eredmeny_16bit_temp[0];
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3308      	adds	r3, #8
 80022d2:	7b3a      	ldrb	r2, [r7, #12]
 80022d4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80022d6:	4b8a      	ldr	r3, [pc, #552]	; (8002500 <Vonalszenzor_operal+0x310>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	f107 020c 	add.w	r2, r7, #12
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fbeb 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[4] = (uint8_t) eredmeny_16bit_temp[0];
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	7b3a      	ldrb	r2, [r7, #12]
 80022ec:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80022ee:	4881      	ldr	r0, [pc, #516]	; (80024f4 <Vonalszenzor_operal+0x304>)
 80022f0:	f000 fbbc 	bl	8002a6c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1h);
 80022f4:	4886      	ldr	r0, [pc, #536]	; (8002510 <Vonalszenzor_operal+0x320>)
 80022f6:	f000 fbb9 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80022fa:	4b86      	ldr	r3, [pc, #536]	; (8002514 <Vonalszenzor_operal+0x324>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f107 020c 	add.w	r2, r7, #12
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fbd9 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[31] = (uint8_t) eredmeny_16bit_temp[0];
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	331f      	adds	r3, #31
 800230e:	7b3a      	ldrb	r2, [r7, #12]
 8002310:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002312:	4b81      	ldr	r3, [pc, #516]	; (8002518 <Vonalszenzor_operal+0x328>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f107 020c 	add.w	r2, r7, #12
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fbcd 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[27] = (uint8_t) eredmeny_16bit_temp[0];
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	331b      	adds	r3, #27
 8002326:	7b3a      	ldrb	r2, [r7, #12]
 8002328:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800232a:	4872      	ldr	r0, [pc, #456]	; (80024f4 <Vonalszenzor_operal+0x304>)
 800232c:	f000 fb9e 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2h);
 8002330:	487a      	ldr	r0, [pc, #488]	; (800251c <Vonalszenzor_operal+0x32c>)
 8002332:	f000 fb9b 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002336:	4b77      	ldr	r3, [pc, #476]	; (8002514 <Vonalszenzor_operal+0x324>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f107 020c 	add.w	r2, r7, #12
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fbbb 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[23] = (uint8_t) eredmeny_16bit_temp[0];
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3317      	adds	r3, #23
 800234a:	7b3a      	ldrb	r2, [r7, #12]
 800234c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800234e:	4b72      	ldr	r3, [pc, #456]	; (8002518 <Vonalszenzor_operal+0x328>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	f107 020c 	add.w	r2, r7, #12
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fbaf 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[19] = (uint8_t) eredmeny_16bit_temp[0];
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3313      	adds	r3, #19
 8002362:	7b3a      	ldrb	r2, [r7, #12]
 8002364:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002366:	4863      	ldr	r0, [pc, #396]	; (80024f4 <Vonalszenzor_operal+0x304>)
 8002368:	f000 fb80 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3h);
 800236c:	486c      	ldr	r0, [pc, #432]	; (8002520 <Vonalszenzor_operal+0x330>)
 800236e:	f000 fb7d 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002372:	4b68      	ldr	r3, [pc, #416]	; (8002514 <Vonalszenzor_operal+0x324>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	f107 020c 	add.w	r2, r7, #12
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fb9d 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[15] = (uint8_t) eredmeny_16bit_temp[0];
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	330f      	adds	r3, #15
 8002386:	7b3a      	ldrb	r2, [r7, #12]
 8002388:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <Vonalszenzor_operal+0x328>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f107 020c 	add.w	r2, r7, #12
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fb91 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[11] = (uint8_t) eredmeny_16bit_temp[0];
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	330b      	adds	r3, #11
 800239e:	7b3a      	ldrb	r2, [r7, #12]
 80023a0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023a2:	4854      	ldr	r0, [pc, #336]	; (80024f4 <Vonalszenzor_operal+0x304>)
 80023a4:	f000 fb62 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4h);
 80023a8:	485e      	ldr	r0, [pc, #376]	; (8002524 <Vonalszenzor_operal+0x334>)
 80023aa:	f000 fb5f 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80023ae:	4b59      	ldr	r3, [pc, #356]	; (8002514 <Vonalszenzor_operal+0x324>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	f107 020c 	add.w	r2, r7, #12
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fb7f 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[7] = (uint8_t) eredmeny_16bit_temp[0];
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3307      	adds	r3, #7
 80023c2:	7b3a      	ldrb	r2, [r7, #12]
 80023c4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80023c6:	4b54      	ldr	r3, [pc, #336]	; (8002518 <Vonalszenzor_operal+0x328>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	f107 020c 	add.w	r2, r7, #12
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fb73 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[3] = (uint8_t) eredmeny_16bit_temp[0];
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3303      	adds	r3, #3
 80023da:	7b3a      	ldrb	r2, [r7, #12]
 80023dc:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80023de:	4845      	ldr	r0, [pc, #276]	; (80024f4 <Vonalszenzor_operal+0x304>)
 80023e0:	f000 fb44 	bl	8002a6c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1h);
 80023e4:	4850      	ldr	r0, [pc, #320]	; (8002528 <Vonalszenzor_operal+0x338>)
 80023e6:	f000 fb41 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80023ea:	4b50      	ldr	r3, [pc, #320]	; (800252c <Vonalszenzor_operal+0x33c>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	f107 020c 	add.w	r2, r7, #12
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fb61 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[30] = (uint8_t) eredmeny_16bit_temp[0];
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	331e      	adds	r3, #30
 80023fe:	7b3a      	ldrb	r2, [r7, #12]
 8002400:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002402:	4b4b      	ldr	r3, [pc, #300]	; (8002530 <Vonalszenzor_operal+0x340>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	f107 020c 	add.w	r2, r7, #12
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fb55 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[26] = (uint8_t) eredmeny_16bit_temp[0];
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	331a      	adds	r3, #26
 8002416:	7b3a      	ldrb	r2, [r7, #12]
 8002418:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800241a:	4836      	ldr	r0, [pc, #216]	; (80024f4 <Vonalszenzor_operal+0x304>)
 800241c:	f000 fb26 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2h);
 8002420:	4844      	ldr	r0, [pc, #272]	; (8002534 <Vonalszenzor_operal+0x344>)
 8002422:	f000 fb23 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <Vonalszenzor_operal+0x33c>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f107 020c 	add.w	r2, r7, #12
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fb43 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[22] = (uint8_t) eredmeny_16bit_temp[0];
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3316      	adds	r3, #22
 800243a:	7b3a      	ldrb	r2, [r7, #12]
 800243c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800243e:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <Vonalszenzor_operal+0x340>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	f107 020c 	add.w	r2, r7, #12
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fb37 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[18] = (uint8_t) eredmeny_16bit_temp[0];
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3312      	adds	r3, #18
 8002452:	7b3a      	ldrb	r2, [r7, #12]
 8002454:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002456:	4827      	ldr	r0, [pc, #156]	; (80024f4 <Vonalszenzor_operal+0x304>)
 8002458:	f000 fb08 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3h);
 800245c:	4836      	ldr	r0, [pc, #216]	; (8002538 <Vonalszenzor_operal+0x348>)
 800245e:	f000 fb05 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002462:	4b32      	ldr	r3, [pc, #200]	; (800252c <Vonalszenzor_operal+0x33c>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	f107 020c 	add.w	r2, r7, #12
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fb25 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[14] = (uint8_t) eredmeny_16bit_temp[0];
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	330e      	adds	r3, #14
 8002476:	7b3a      	ldrb	r2, [r7, #12]
 8002478:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <Vonalszenzor_operal+0x340>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	f107 020c 	add.w	r2, r7, #12
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fb19 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[10] = (uint8_t) eredmeny_16bit_temp[0];
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	330a      	adds	r3, #10
 800248e:	7b3a      	ldrb	r2, [r7, #12]
 8002490:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002492:	4818      	ldr	r0, [pc, #96]	; (80024f4 <Vonalszenzor_operal+0x304>)
 8002494:	f000 faea 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4h);
 8002498:	4828      	ldr	r0, [pc, #160]	; (800253c <Vonalszenzor_operal+0x34c>)
 800249a:	f000 fae7 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <Vonalszenzor_operal+0x33c>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f107 020c 	add.w	r2, r7, #12
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fb07 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[6] = (uint8_t) eredmeny_16bit_temp[0];
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3306      	adds	r3, #6
 80024b2:	7b3a      	ldrb	r2, [r7, #12]
 80024b4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <Vonalszenzor_operal+0x340>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	f107 020c 	add.w	r2, r7, #12
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fafb 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[2] = (uint8_t) eredmeny_16bit_temp[0];
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3302      	adds	r3, #2
 80024ca:	7b3a      	ldrb	r2, [r7, #12]
 80024cc:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80024ce:	4809      	ldr	r0, [pc, #36]	; (80024f4 <Vonalszenzor_operal+0x304>)
 80024d0:	f000 facc 	bl	8002a6c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1h);
 80024d4:	481a      	ldr	r0, [pc, #104]	; (8002540 <Vonalszenzor_operal+0x350>)
 80024d6:	f000 fac9 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <Vonalszenzor_operal+0x354>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	f107 020c 	add.w	r2, r7, #12
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fae9 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[29] = (uint8_t) eredmeny_16bit_temp[0];
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	331d      	adds	r3, #29
 80024ee:	7b3a      	ldrb	r2, [r7, #12]
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e029      	b.n	8002548 <Vonalszenzor_operal+0x358>
 80024f4:	20000004 	.word	0x20000004
 80024f8:	20000084 	.word	0x20000084
 80024fc:	200001a9 	.word	0x200001a9
 8002500:	2000010d 	.word	0x2000010d
 8002504:	2000007c 	.word	0x2000007c
 8002508:	20000074 	.word	0x20000074
 800250c:	2000006c 	.word	0x2000006c
 8002510:	20000064 	.word	0x20000064
 8002514:	2000010a 	.word	0x2000010a
 8002518:	2000010e 	.word	0x2000010e
 800251c:	2000005c 	.word	0x2000005c
 8002520:	20000054 	.word	0x20000054
 8002524:	2000004c 	.word	0x2000004c
 8002528:	20000044 	.word	0x20000044
 800252c:	2000010b 	.word	0x2000010b
 8002530:	2000010f 	.word	0x2000010f
 8002534:	2000003c 	.word	0x2000003c
 8002538:	20000034 	.word	0x20000034
 800253c:	2000002c 	.word	0x2000002c
 8002540:	20000024 	.word	0x20000024
 8002544:	2000010c 	.word	0x2000010c
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002548:	4bbe      	ldr	r3, [pc, #760]	; (8002844 <Vonalszenzor_operal+0x654>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	f107 020c 	add.w	r2, r7, #12
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fab2 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[25] = (uint8_t) eredmeny_16bit_temp[0];
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3319      	adds	r3, #25
 800255c:	7b3a      	ldrb	r2, [r7, #12]
 800255e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002560:	48b9      	ldr	r0, [pc, #740]	; (8002848 <Vonalszenzor_operal+0x658>)
 8002562:	f000 fa83 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2h);
 8002566:	48b9      	ldr	r0, [pc, #740]	; (800284c <Vonalszenzor_operal+0x65c>)
 8002568:	f000 fa80 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800256c:	4bb8      	ldr	r3, [pc, #736]	; (8002850 <Vonalszenzor_operal+0x660>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f000 faa0 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[21] = (uint8_t) eredmeny_16bit_temp[0];
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3315      	adds	r3, #21
 8002580:	7b3a      	ldrb	r2, [r7, #12]
 8002582:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002584:	4baf      	ldr	r3, [pc, #700]	; (8002844 <Vonalszenzor_operal+0x654>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	f107 020c 	add.w	r2, r7, #12
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fa94 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[17] = (uint8_t) eredmeny_16bit_temp[0];
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3311      	adds	r3, #17
 8002598:	7b3a      	ldrb	r2, [r7, #12]
 800259a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800259c:	48aa      	ldr	r0, [pc, #680]	; (8002848 <Vonalszenzor_operal+0x658>)
 800259e:	f000 fa65 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3h);
 80025a2:	48ac      	ldr	r0, [pc, #688]	; (8002854 <Vonalszenzor_operal+0x664>)
 80025a4:	f000 fa62 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80025a8:	4ba9      	ldr	r3, [pc, #676]	; (8002850 <Vonalszenzor_operal+0x660>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f107 020c 	add.w	r2, r7, #12
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fa82 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[13] = (uint8_t) eredmeny_16bit_temp[0];
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	330d      	adds	r3, #13
 80025bc:	7b3a      	ldrb	r2, [r7, #12]
 80025be:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80025c0:	4ba0      	ldr	r3, [pc, #640]	; (8002844 <Vonalszenzor_operal+0x654>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	f107 020c 	add.w	r2, r7, #12
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fa76 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[9] = (uint8_t) eredmeny_16bit_temp[0];
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3309      	adds	r3, #9
 80025d4:	7b3a      	ldrb	r2, [r7, #12]
 80025d6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80025d8:	489b      	ldr	r0, [pc, #620]	; (8002848 <Vonalszenzor_operal+0x658>)
 80025da:	f000 fa47 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4h);
 80025de:	489e      	ldr	r0, [pc, #632]	; (8002858 <Vonalszenzor_operal+0x668>)
 80025e0:	f000 fa44 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80025e4:	4b9a      	ldr	r3, [pc, #616]	; (8002850 <Vonalszenzor_operal+0x660>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	f107 020c 	add.w	r2, r7, #12
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fa64 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[5] = (uint8_t) eredmeny_16bit_temp[0];
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3305      	adds	r3, #5
 80025f8:	7b3a      	ldrb	r2, [r7, #12]
 80025fa:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80025fc:	4b91      	ldr	r3, [pc, #580]	; (8002844 <Vonalszenzor_operal+0x654>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	f107 020c 	add.w	r2, r7, #12
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fa58 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[1] = (uint8_t) eredmeny_16bit_temp[0];
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3301      	adds	r3, #1
 8002610:	7b3a      	ldrb	r2, [r7, #12]
 8002612:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002614:	488c      	ldr	r0, [pc, #560]	; (8002848 <Vonalszenzor_operal+0x658>)
 8002616:	f000 fa29 	bl	8002a6c <Vonalszenzor_minta_kuldes>

	//elso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1e);
 800261a:	4890      	ldr	r0, [pc, #576]	; (800285c <Vonalszenzor_operal+0x66c>)
 800261c:	f000 fa26 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002620:	4b8f      	ldr	r3, [pc, #572]	; (8002860 <Vonalszenzor_operal+0x670>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	f107 020c 	add.w	r2, r7, #12
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fa46 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[1] = (uint8_t) eredmeny_16bit_temp[0];
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	3301      	adds	r3, #1
 8002634:	7b3a      	ldrb	r2, [r7, #12]
 8002636:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002638:	4b8a      	ldr	r3, [pc, #552]	; (8002864 <Vonalszenzor_operal+0x674>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	f107 020c 	add.w	r2, r7, #12
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fa3a 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	3305      	adds	r3, #5
 800264c:	7b3a      	ldrb	r2, [r7, #12]
 800264e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002650:	487d      	ldr	r0, [pc, #500]	; (8002848 <Vonalszenzor_operal+0x658>)
 8002652:	f000 fa0b 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2e);
 8002656:	4884      	ldr	r0, [pc, #528]	; (8002868 <Vonalszenzor_operal+0x678>)
 8002658:	f000 fa08 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800265c:	4b80      	ldr	r3, [pc, #512]	; (8002860 <Vonalszenzor_operal+0x670>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	f107 020c 	add.w	r2, r7, #12
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fa28 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[9] = (uint8_t) eredmeny_16bit_temp[0];
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	3309      	adds	r3, #9
 8002670:	7b3a      	ldrb	r2, [r7, #12]
 8002672:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002674:	4b7b      	ldr	r3, [pc, #492]	; (8002864 <Vonalszenzor_operal+0x674>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	f107 020c 	add.w	r2, r7, #12
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fa1c 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[13] = (uint8_t) eredmeny_16bit_temp[0];
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	330d      	adds	r3, #13
 8002688:	7b3a      	ldrb	r2, [r7, #12]
 800268a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800268c:	486e      	ldr	r0, [pc, #440]	; (8002848 <Vonalszenzor_operal+0x658>)
 800268e:	f000 f9ed 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3e);
 8002692:	4876      	ldr	r0, [pc, #472]	; (800286c <Vonalszenzor_operal+0x67c>)
 8002694:	f000 f9ea 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002698:	4b71      	ldr	r3, [pc, #452]	; (8002860 <Vonalszenzor_operal+0x670>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f107 020c 	add.w	r2, r7, #12
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fa0a 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[17] = (uint8_t) eredmeny_16bit_temp[0];
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	3311      	adds	r3, #17
 80026ac:	7b3a      	ldrb	r2, [r7, #12]
 80026ae:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80026b0:	4b6c      	ldr	r3, [pc, #432]	; (8002864 <Vonalszenzor_operal+0x674>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f107 020c 	add.w	r2, r7, #12
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f9fe 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[21] = (uint8_t) eredmeny_16bit_temp[0];
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	3315      	adds	r3, #21
 80026c4:	7b3a      	ldrb	r2, [r7, #12]
 80026c6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80026c8:	485f      	ldr	r0, [pc, #380]	; (8002848 <Vonalszenzor_operal+0x658>)
 80026ca:	f000 f9cf 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4e);
 80026ce:	4868      	ldr	r0, [pc, #416]	; (8002870 <Vonalszenzor_operal+0x680>)
 80026d0:	f000 f9cc 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80026d4:	4b62      	ldr	r3, [pc, #392]	; (8002860 <Vonalszenzor_operal+0x670>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	f107 020c 	add.w	r2, r7, #12
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f9ec 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[25] = (uint8_t) eredmeny_16bit_temp[0];
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	3319      	adds	r3, #25
 80026e8:	7b3a      	ldrb	r2, [r7, #12]
 80026ea:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80026ec:	4b5d      	ldr	r3, [pc, #372]	; (8002864 <Vonalszenzor_operal+0x674>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	f107 020c 	add.w	r2, r7, #12
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f9e0 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[29] = (uint8_t) eredmeny_16bit_temp[0];
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	331d      	adds	r3, #29
 8002700:	7b3a      	ldrb	r2, [r7, #12]
 8002702:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002704:	4850      	ldr	r0, [pc, #320]	; (8002848 <Vonalszenzor_operal+0x658>)
 8002706:	f000 f9b1 	bl	8002a6c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1e);
 800270a:	485a      	ldr	r0, [pc, #360]	; (8002874 <Vonalszenzor_operal+0x684>)
 800270c:	f000 f9ae 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002710:	4b59      	ldr	r3, [pc, #356]	; (8002878 <Vonalszenzor_operal+0x688>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	f107 020c 	add.w	r2, r7, #12
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f9ce 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[2] = (uint8_t) eredmeny_16bit_temp[0];
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	3302      	adds	r3, #2
 8002724:	7b3a      	ldrb	r2, [r7, #12]
 8002726:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002728:	4b54      	ldr	r3, [pc, #336]	; (800287c <Vonalszenzor_operal+0x68c>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	f107 020c 	add.w	r2, r7, #12
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f9c2 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[6] = (uint8_t) eredmeny_16bit_temp[0];
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	3306      	adds	r3, #6
 800273c:	7b3a      	ldrb	r2, [r7, #12]
 800273e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002740:	4841      	ldr	r0, [pc, #260]	; (8002848 <Vonalszenzor_operal+0x658>)
 8002742:	f000 f993 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2e);
 8002746:	484e      	ldr	r0, [pc, #312]	; (8002880 <Vonalszenzor_operal+0x690>)
 8002748:	f000 f990 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800274c:	4b4a      	ldr	r3, [pc, #296]	; (8002878 <Vonalszenzor_operal+0x688>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	f107 020c 	add.w	r2, r7, #12
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f9b0 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[10] = (uint8_t) eredmeny_16bit_temp[0];
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	330a      	adds	r3, #10
 8002760:	7b3a      	ldrb	r2, [r7, #12]
 8002762:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002764:	4b45      	ldr	r3, [pc, #276]	; (800287c <Vonalszenzor_operal+0x68c>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	f107 020c 	add.w	r2, r7, #12
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f9a4 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[14] = (uint8_t) eredmeny_16bit_temp[0];
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	330e      	adds	r3, #14
 8002778:	7b3a      	ldrb	r2, [r7, #12]
 800277a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800277c:	4832      	ldr	r0, [pc, #200]	; (8002848 <Vonalszenzor_operal+0x658>)
 800277e:	f000 f975 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3e);
 8002782:	4840      	ldr	r0, [pc, #256]	; (8002884 <Vonalszenzor_operal+0x694>)
 8002784:	f000 f972 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002788:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <Vonalszenzor_operal+0x688>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f107 020c 	add.w	r2, r7, #12
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f992 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[18] = (uint8_t) eredmeny_16bit_temp[0];
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	3312      	adds	r3, #18
 800279c:	7b3a      	ldrb	r2, [r7, #12]
 800279e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <Vonalszenzor_operal+0x68c>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	f107 020c 	add.w	r2, r7, #12
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f986 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[22] = (uint8_t) eredmeny_16bit_temp[0];
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	3316      	adds	r3, #22
 80027b4:	7b3a      	ldrb	r2, [r7, #12]
 80027b6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027b8:	4823      	ldr	r0, [pc, #140]	; (8002848 <Vonalszenzor_operal+0x658>)
 80027ba:	f000 f957 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4e);
 80027be:	4832      	ldr	r0, [pc, #200]	; (8002888 <Vonalszenzor_operal+0x698>)
 80027c0:	f000 f954 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80027c4:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <Vonalszenzor_operal+0x688>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f107 020c 	add.w	r2, r7, #12
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f974 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[26] = (uint8_t) eredmeny_16bit_temp[0];
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	331a      	adds	r3, #26
 80027d8:	7b3a      	ldrb	r2, [r7, #12]
 80027da:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <Vonalszenzor_operal+0x68c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	f107 020c 	add.w	r2, r7, #12
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f968 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[30] = (uint8_t) eredmeny_16bit_temp[0];
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	331e      	adds	r3, #30
 80027f0:	7b3a      	ldrb	r2, [r7, #12]
 80027f2:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80027f4:	4814      	ldr	r0, [pc, #80]	; (8002848 <Vonalszenzor_operal+0x658>)
 80027f6:	f000 f939 	bl	8002a6c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1e);
 80027fa:	4824      	ldr	r0, [pc, #144]	; (800288c <Vonalszenzor_operal+0x69c>)
 80027fc:	f000 f936 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002800:	4b23      	ldr	r3, [pc, #140]	; (8002890 <Vonalszenzor_operal+0x6a0>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	f107 020c 	add.w	r2, r7, #12
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f956 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[3] = (uint8_t) eredmeny_16bit_temp[0];
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	3303      	adds	r3, #3
 8002814:	7b3a      	ldrb	r2, [r7, #12]
 8002816:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <Vonalszenzor_operal+0x6a4>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	f107 020c 	add.w	r2, r7, #12
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f94a 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[7] = (uint8_t) eredmeny_16bit_temp[0];
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	3307      	adds	r3, #7
 800282c:	7b3a      	ldrb	r2, [r7, #12]
 800282e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002830:	4805      	ldr	r0, [pc, #20]	; (8002848 <Vonalszenzor_operal+0x658>)
 8002832:	f000 f91b 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2e);
 8002836:	4818      	ldr	r0, [pc, #96]	; (8002898 <Vonalszenzor_operal+0x6a8>)
 8002838:	f000 f918 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <Vonalszenzor_operal+0x6a0>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	e02c      	b.n	800289c <Vonalszenzor_operal+0x6ac>
 8002842:	bf00      	nop
 8002844:	20000110 	.word	0x20000110
 8002848:	20000004 	.word	0x20000004
 800284c:	2000001c 	.word	0x2000001c
 8002850:	2000010c 	.word	0x2000010c
 8002854:	20000014 	.word	0x20000014
 8002858:	2000000c 	.word	0x2000000c
 800285c:	20000104 	.word	0x20000104
 8002860:	200001a9 	.word	0x200001a9
 8002864:	2000010d 	.word	0x2000010d
 8002868:	200000fc 	.word	0x200000fc
 800286c:	200000f4 	.word	0x200000f4
 8002870:	200000ec 	.word	0x200000ec
 8002874:	200000e4 	.word	0x200000e4
 8002878:	2000010a 	.word	0x2000010a
 800287c:	2000010e 	.word	0x2000010e
 8002880:	200000dc 	.word	0x200000dc
 8002884:	200000d4 	.word	0x200000d4
 8002888:	200000cc 	.word	0x200000cc
 800288c:	200000c4 	.word	0x200000c4
 8002890:	2000010b 	.word	0x2000010b
 8002894:	2000010f 	.word	0x2000010f
 8002898:	200000bc 	.word	0x200000bc
 800289c:	f107 020c 	add.w	r2, r7, #12
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f90a 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[11] = (uint8_t) eredmeny_16bit_temp[0];
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	330b      	adds	r3, #11
 80028ac:	7b3a      	ldrb	r2, [r7, #12]
 80028ae:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80028b0:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <Vonalszenzor_operal+0x850>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	f107 020c 	add.w	r2, r7, #12
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f8fe 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[15] = (uint8_t) eredmeny_16bit_temp[0];
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	330f      	adds	r3, #15
 80028c4:	7b3a      	ldrb	r2, [r7, #12]
 80028c6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80028c8:	485e      	ldr	r0, [pc, #376]	; (8002a44 <Vonalszenzor_operal+0x854>)
 80028ca:	f000 f8cf 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3e);
 80028ce:	485e      	ldr	r0, [pc, #376]	; (8002a48 <Vonalszenzor_operal+0x858>)
 80028d0:	f000 f8cc 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80028d4:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <Vonalszenzor_operal+0x85c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	f107 020c 	add.w	r2, r7, #12
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f8ec 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[19] = (uint8_t) eredmeny_16bit_temp[0];
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	3313      	adds	r3, #19
 80028e8:	7b3a      	ldrb	r2, [r7, #12]
 80028ea:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80028ec:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <Vonalszenzor_operal+0x850>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	f107 020c 	add.w	r2, r7, #12
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f8e0 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[23] = (uint8_t) eredmeny_16bit_temp[0];
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	3317      	adds	r3, #23
 8002900:	7b3a      	ldrb	r2, [r7, #12]
 8002902:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002904:	484f      	ldr	r0, [pc, #316]	; (8002a44 <Vonalszenzor_operal+0x854>)
 8002906:	f000 f8b1 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4e);
 800290a:	4851      	ldr	r0, [pc, #324]	; (8002a50 <Vonalszenzor_operal+0x860>)
 800290c:	f000 f8ae 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002910:	4b4e      	ldr	r3, [pc, #312]	; (8002a4c <Vonalszenzor_operal+0x85c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	f107 020c 	add.w	r2, r7, #12
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f8ce 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[27] = (uint8_t) eredmeny_16bit_temp[0];
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	331b      	adds	r3, #27
 8002924:	7b3a      	ldrb	r2, [r7, #12]
 8002926:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002928:	4b45      	ldr	r3, [pc, #276]	; (8002a40 <Vonalszenzor_operal+0x850>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	f107 020c 	add.w	r2, r7, #12
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f8c2 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[31] = (uint8_t) eredmeny_16bit_temp[0];
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	331f      	adds	r3, #31
 800293c:	7b3a      	ldrb	r2, [r7, #12]
 800293e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002940:	4840      	ldr	r0, [pc, #256]	; (8002a44 <Vonalszenzor_operal+0x854>)
 8002942:	f000 f893 	bl	8002a6c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1e);
 8002946:	4843      	ldr	r0, [pc, #268]	; (8002a54 <Vonalszenzor_operal+0x864>)
 8002948:	f000 f890 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800294c:	4b42      	ldr	r3, [pc, #264]	; (8002a58 <Vonalszenzor_operal+0x868>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	f107 020c 	add.w	r2, r7, #12
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f8b0 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[4] = (uint8_t) eredmeny_16bit_temp[0];
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	3304      	adds	r3, #4
 8002960:	7b3a      	ldrb	r2, [r7, #12]
 8002962:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002964:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <Vonalszenzor_operal+0x86c>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	f107 020c 	add.w	r2, r7, #12
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f8a4 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[8] = (uint8_t) eredmeny_16bit_temp[0];
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	3308      	adds	r3, #8
 8002978:	7b3a      	ldrb	r2, [r7, #12]
 800297a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800297c:	4831      	ldr	r0, [pc, #196]	; (8002a44 <Vonalszenzor_operal+0x854>)
 800297e:	f000 f875 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2e);
 8002982:	4837      	ldr	r0, [pc, #220]	; (8002a60 <Vonalszenzor_operal+0x870>)
 8002984:	f000 f872 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002988:	4b33      	ldr	r3, [pc, #204]	; (8002a58 <Vonalszenzor_operal+0x868>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	f107 020c 	add.w	r2, r7, #12
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f892 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[12] = (uint8_t) eredmeny_16bit_temp[0];
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	330c      	adds	r3, #12
 800299c:	7b3a      	ldrb	r2, [r7, #12]
 800299e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <Vonalszenzor_operal+0x86c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	f107 020c 	add.w	r2, r7, #12
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f886 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[16] = (uint8_t) eredmeny_16bit_temp[0];
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	3310      	adds	r3, #16
 80029b4:	7b3a      	ldrb	r2, [r7, #12]
 80029b6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80029b8:	4822      	ldr	r0, [pc, #136]	; (8002a44 <Vonalszenzor_operal+0x854>)
 80029ba:	f000 f857 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3e);
 80029be:	4829      	ldr	r0, [pc, #164]	; (8002a64 <Vonalszenzor_operal+0x874>)
 80029c0:	f000 f854 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <Vonalszenzor_operal+0x868>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	f107 020c 	add.w	r2, r7, #12
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f874 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[20] = (uint8_t) eredmeny_16bit_temp[0];
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	3314      	adds	r3, #20
 80029d8:	7b3a      	ldrb	r2, [r7, #12]
 80029da:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80029dc:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <Vonalszenzor_operal+0x86c>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f107 020c 	add.w	r2, r7, #12
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f868 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[24] = (uint8_t) eredmeny_16bit_temp[0];
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	3318      	adds	r3, #24
 80029f0:	7b3a      	ldrb	r2, [r7, #12]
 80029f2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80029f4:	4813      	ldr	r0, [pc, #76]	; (8002a44 <Vonalszenzor_operal+0x854>)
 80029f6:	f000 f839 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4e);
 80029fa:	481b      	ldr	r0, [pc, #108]	; (8002a68 <Vonalszenzor_operal+0x878>)
 80029fc:	f000 f836 	bl	8002a6c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002a00:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <Vonalszenzor_operal+0x868>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	f107 020c 	add.w	r2, r7, #12
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f856 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[28] = (uint8_t) eredmeny_16bit_temp[0];
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	331c      	adds	r3, #28
 8002a14:	7b3a      	ldrb	r2, [r7, #12]
 8002a16:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <Vonalszenzor_operal+0x86c>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	f107 020c 	add.w	r2, r7, #12
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f84a 	bl	8002abc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[32] = (uint8_t) eredmeny_16bit_temp[0];
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	3320      	adds	r3, #32
 8002a2c:	7b3a      	ldrb	r2, [r7, #12]
 8002a2e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002a30:	4804      	ldr	r0, [pc, #16]	; (8002a44 <Vonalszenzor_operal+0x854>)
 8002a32:	f000 f81b 	bl	8002a6c <Vonalszenzor_minta_kuldes>
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000010f 	.word	0x2000010f
 8002a44:	20000004 	.word	0x20000004
 8002a48:	200000b4 	.word	0x200000b4
 8002a4c:	2000010b 	.word	0x2000010b
 8002a50:	200000ac 	.word	0x200000ac
 8002a54:	200000a4 	.word	0x200000a4
 8002a58:	2000010c 	.word	0x2000010c
 8002a5c:	20000110 	.word	0x20000110
 8002a60:	2000009c 	.word	0x2000009c
 8002a64:	20000094 	.word	0x20000094
 8002a68:	2000008c 	.word	0x2000008c

08002a6c <Vonalszenzor_minta_kuldes>:

void Vonalszenzor_minta_kuldes(uint8_t* minta) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	// PC4: Von_latch1  0
 8002a74:	2200      	movs	r2, #0
 8002a76:	2110      	movs	r1, #16
 8002a78:	480d      	ldr	r0, [pc, #52]	; (8002ab0 <Vonalszenzor_minta_kuldes+0x44>)
 8002a7a:	f001 ffb9 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// PB1: Von_latch2  0
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2102      	movs	r1, #2
 8002a82:	480c      	ldr	r0, [pc, #48]	; (8002ab4 <Vonalszenzor_minta_kuldes+0x48>)
 8002a84:	f001 ffb4 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, minta, 6, 100);				// minta kikuldes
 8002a88:	2364      	movs	r3, #100	; 0x64
 8002a8a:	2206      	movs	r2, #6
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	480a      	ldr	r0, [pc, #40]	; (8002ab8 <Vonalszenzor_minta_kuldes+0x4c>)
 8002a90:	f004 f8e4 	bl	8006c5c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		// PC4: Von_latch1  1
 8002a94:	2201      	movs	r2, #1
 8002a96:	2110      	movs	r1, #16
 8002a98:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <Vonalszenzor_minta_kuldes+0x44>)
 8002a9a:	f001 ffa9 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// PB1: Von_latch2  1
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	4804      	ldr	r0, [pc, #16]	; (8002ab4 <Vonalszenzor_minta_kuldes+0x48>)
 8002aa4:	f001 ffa4 	bl	80049f0 <HAL_GPIO_WritePin>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	20000258 	.word	0x20000258

08002abc <Vonalszenzor_meres_kiolvasas>:

void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6039      	str	r1, [r7, #0]
 8002ac6:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[2]= {chanel,0};
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	733b      	strb	r3, [r7, #12]
 8002acc:	2300      	movs	r3, #0
 8002ace:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, temp1, 2, 100);
 8002ad0:	f107 010c 	add.w	r1, r7, #12
 8002ad4:	2364      	movs	r3, #100	; 0x64
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4806      	ldr	r0, [pc, #24]	; (8002af4 <Vonalszenzor_meres_kiolvasas+0x38>)
 8002ada:	f004 f8bf 	bl	8006c5c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, eredmeny, 2, 100);
 8002ade:	2364      	movs	r3, #100	; 0x64
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	6839      	ldr	r1, [r7, #0]
 8002ae4:	4803      	ldr	r0, [pc, #12]	; (8002af4 <Vonalszenzor_meres_kiolvasas+0x38>)
 8002ae6:	f004 fa05 	bl	8006ef4 <HAL_SPI_Receive>
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000570 	.word	0x20000570

08002af8 <Kovetendo_vonal_valaszto>:

void Kovetendo_vonal_valaszto(int* elso, int* hatso) {
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
	if(vonalak_h[0] < 33)				//kulonben '-' van benne, ami 45
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <Kovetendo_vonal_valaszto+0x40>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d805      	bhi.n	8002b16 <Kovetendo_vonal_valaszto+0x1e>
		*elso = vonalak_h[0] - 16;		//ez elvileg jo 1 - 1 erzekelt vonalra
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <Kovetendo_vonal_valaszto+0x40>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	f1a3 0210 	sub.w	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
	if(vonalak_e[0] < 33)
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <Kovetendo_vonal_valaszto+0x44>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d805      	bhi.n	8002b2a <Kovetendo_vonal_valaszto+0x32>
		*hatso = vonalak_e[0] - 16;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <Kovetendo_vonal_valaszto+0x44>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f1a3 0210 	sub.w	r2, r3, #16
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	601a      	str	r2, [r3, #0]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000128 	.word	0x20000128
 8002b3c:	20000130 	.word	0x20000130

08002b40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b50:	d109      	bne.n	8002b66 <HAL_GPIO_EXTI_Callback+0x26>
		btnEnable = !btnEnable;
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_GPIO_EXTI_Callback+0x34>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf0c      	ite	eq
 8002b5a:	2301      	moveq	r3, #1
 8002b5c:	2300      	movne	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <HAL_GPIO_EXTI_Callback+0x34>)
 8002b64:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	//LED felvilagitasa
	}
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	200001a8 	.word	0x200001a8

08002b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7c:	b672      	cpsid	i
}
 8002b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b80:	e7fe      	b.n	8002b80 <Error_Handler+0x8>

08002b82 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_MspInit+0x4c>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	4a0f      	ldr	r2, [pc, #60]	; (8002be4 <HAL_MspInit+0x4c>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bac:	6453      	str	r3, [r2, #68]	; 0x44
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_MspInit+0x4c>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_MspInit+0x4c>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_MspInit+0x4c>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_MspInit+0x4c>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bd6:	2007      	movs	r0, #7
 8002bd8:	f000 fe8c 	bl	80038f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800

08002be8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b090      	sub	sp, #64	; 0x40
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a6b      	ldr	r2, [pc, #428]	; (8002db4 <HAL_I2C_MspInit+0x1cc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d12d      	bne.n	8002c66 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c0e:	4b6a      	ldr	r3, [pc, #424]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	4a69      	ldr	r2, [pc, #420]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1a:	4b67      	ldr	r3, [pc, #412]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c2c:	2312      	movs	r3, #18
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c34:	2303      	movs	r3, #3
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c38:	2304      	movs	r3, #4
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c40:	4619      	mov	r1, r3
 8002c42:	485e      	ldr	r0, [pc, #376]	; (8002dbc <HAL_I2C_MspInit+0x1d4>)
 8002c44:	f001 fbb0 	bl	80043a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4c:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	4a59      	ldr	r2, [pc, #356]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002c52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c56:	6413      	str	r3, [r2, #64]	; 0x40
 8002c58:	4b57      	ldr	r3, [pc, #348]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c64:	e0a2      	b.n	8002dac <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a55      	ldr	r2, [pc, #340]	; (8002dc0 <HAL_I2C_MspInit+0x1d8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d14c      	bne.n	8002d0a <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c70:	2300      	movs	r3, #0
 8002c72:	623b      	str	r3, [r7, #32]
 8002c74:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	4a4f      	ldr	r2, [pc, #316]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
 8002c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c80:	4b4d      	ldr	r3, [pc, #308]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	623b      	str	r3, [r7, #32]
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	4a48      	ldr	r2, [pc, #288]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9c:	4b46      	ldr	r3, [pc, #280]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cae:	2312      	movs	r3, #18
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002cba:	2304      	movs	r3, #4
 8002cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	483d      	ldr	r0, [pc, #244]	; (8002dbc <HAL_I2C_MspInit+0x1d4>)
 8002cc6:	f001 fb6f 	bl	80043a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cd0:	2312      	movs	r3, #18
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002cdc:	2304      	movs	r3, #4
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4837      	ldr	r0, [pc, #220]	; (8002dc4 <HAL_I2C_MspInit+0x1dc>)
 8002ce8:	f001 fb5e 	bl	80043a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	4a30      	ldr	r2, [pc, #192]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002cf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfc:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	69bb      	ldr	r3, [r7, #24]
}
 8002d08:	e050      	b.n	8002dac <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <HAL_I2C_MspInit+0x1e0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d14b      	bne.n	8002dac <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	4a26      	ldr	r2, [pc, #152]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	6313      	str	r3, [r2, #48]	; 0x30
 8002d24:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d40:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d52:	2312      	movs	r3, #18
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d5e:	2304      	movs	r3, #4
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d66:	4619      	mov	r1, r3
 8002d68:	4816      	ldr	r0, [pc, #88]	; (8002dc4 <HAL_I2C_MspInit+0x1dc>)
 8002d6a:	f001 fb1d 	bl	80043a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	2312      	movs	r3, #18
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d80:	2304      	movs	r3, #4
 8002d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4810      	ldr	r0, [pc, #64]	; (8002dcc <HAL_I2C_MspInit+0x1e4>)
 8002d8c:	f001 fb0c 	bl	80043a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002d9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_I2C_MspInit+0x1d0>)
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3740      	adds	r7, #64	; 0x40
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40005400 	.word	0x40005400
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40020400 	.word	0x40020400
 8002dc0:	40005800 	.word	0x40005800
 8002dc4:	40020800 	.word	0x40020800
 8002dc8:	40005c00 	.word	0x40005c00
 8002dcc:	40020000 	.word	0x40020000

08002dd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b090      	sub	sp, #64	; 0x40
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a98      	ldr	r2, [pc, #608]	; (8003050 <HAL_SPI_MspInit+0x280>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d12c      	bne.n	8002e4c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df6:	4b97      	ldr	r3, [pc, #604]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	4a96      	ldr	r2, [pc, #600]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002dfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e00:	6453      	str	r3, [r2, #68]	; 0x44
 8002e02:	4b94      	ldr	r3, [pc, #592]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
 8002e12:	4b90      	ldr	r3, [pc, #576]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a8f      	ldr	r2, [pc, #572]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b8d      	ldr	r3, [pc, #564]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e2a:	23e0      	movs	r3, #224	; 0xe0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e36:	2303      	movs	r3, #3
 8002e38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e3a:	2305      	movs	r3, #5
 8002e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e42:	4619      	mov	r1, r3
 8002e44:	4884      	ldr	r0, [pc, #528]	; (8003058 <HAL_SPI_MspInit+0x288>)
 8002e46:	f001 faaf 	bl	80043a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e4a:	e0fd      	b.n	8003048 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a82      	ldr	r2, [pc, #520]	; (800305c <HAL_SPI_MspInit+0x28c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d14b      	bne.n	8002eee <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
 8002e5a:	4b7e      	ldr	r3, [pc, #504]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a7d      	ldr	r2, [pc, #500]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
 8002e66:	4b7b      	ldr	r3, [pc, #492]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6e:	623b      	str	r3, [r7, #32]
 8002e70:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	4b77      	ldr	r3, [pc, #476]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a76      	ldr	r2, [pc, #472]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002e7c:	f043 0304 	orr.w	r3, r3, #4
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b74      	ldr	r3, [pc, #464]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	4b70      	ldr	r3, [pc, #448]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a6f      	ldr	r2, [pc, #444]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b6d      	ldr	r3, [pc, #436]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002eba:	2307      	movs	r3, #7
 8002ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4866      	ldr	r0, [pc, #408]	; (8003060 <HAL_SPI_MspInit+0x290>)
 8002ec6:	f001 fa6f 	bl	80043a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002edc:	2305      	movs	r3, #5
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	485f      	ldr	r0, [pc, #380]	; (8003064 <HAL_SPI_MspInit+0x294>)
 8002ee8:	f001 fa5e 	bl	80043a8 <HAL_GPIO_Init>
}
 8002eec:	e0ac      	b.n	8003048 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI3)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a5d      	ldr	r2, [pc, #372]	; (8003068 <HAL_SPI_MspInit+0x298>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	f040 80a7 	bne.w	8003048 <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	4b55      	ldr	r3, [pc, #340]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	4a54      	ldr	r2, [pc, #336]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f08:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0a:	4b52      	ldr	r3, [pc, #328]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	4b4e      	ldr	r3, [pc, #312]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a4d      	ldr	r2, [pc, #308]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b4b      	ldr	r3, [pc, #300]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a46      	ldr	r2, [pc, #280]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b44      	ldr	r3, [pc, #272]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	4b40      	ldr	r3, [pc, #256]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a3f      	ldr	r2, [pc, #252]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <HAL_SPI_MspInit+0x284>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f76:	2303      	movs	r3, #3
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002f7a:	2307      	movs	r3, #7
 8002f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f82:	4619      	mov	r1, r3
 8002f84:	4837      	ldr	r0, [pc, #220]	; (8003064 <HAL_SPI_MspInit+0x294>)
 8002f86:	f001 fa0f 	bl	80043a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f9c:	2306      	movs	r3, #6
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	482c      	ldr	r0, [pc, #176]	; (8003058 <HAL_SPI_MspInit+0x288>)
 8002fa8:	f001 f9fe 	bl	80043a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fbe:	2306      	movs	r3, #6
 8002fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4825      	ldr	r0, [pc, #148]	; (8003060 <HAL_SPI_MspInit+0x290>)
 8002fca:	f001 f9ed 	bl	80043a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fce:	2310      	movs	r3, #16
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fde:	2306      	movs	r3, #6
 8002fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	481e      	ldr	r0, [pc, #120]	; (8003064 <HAL_SPI_MspInit+0x294>)
 8002fea:	f001 f9dd 	bl	80043a8 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002fee:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_SPI_MspInit+0x29c>)
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_SPI_MspInit+0x2a0>)
 8002ff2:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_SPI_MspInit+0x29c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_SPI_MspInit+0x29c>)
 8002ffc:	2240      	movs	r2, #64	; 0x40
 8002ffe:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003000:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_SPI_MspInit+0x29c>)
 8003002:	2200      	movs	r2, #0
 8003004:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_SPI_MspInit+0x29c>)
 8003008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800300c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <HAL_SPI_MspInit+0x29c>)
 8003010:	2200      	movs	r2, #0
 8003012:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_SPI_MspInit+0x29c>)
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <HAL_SPI_MspInit+0x29c>)
 800301c:	2200      	movs	r2, #0
 800301e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003020:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_SPI_MspInit+0x29c>)
 8003022:	2200      	movs	r2, #0
 8003024:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <HAL_SPI_MspInit+0x29c>)
 8003028:	2200      	movs	r2, #0
 800302a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800302c:	480f      	ldr	r0, [pc, #60]	; (800306c <HAL_SPI_MspInit+0x29c>)
 800302e:	f000 fcd1 	bl	80039d4 <HAL_DMA_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 8003038:	f7ff fd9e 	bl	8002b78 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a0b      	ldr	r2, [pc, #44]	; (800306c <HAL_SPI_MspInit+0x29c>)
 8003040:	649a      	str	r2, [r3, #72]	; 0x48
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <HAL_SPI_MspInit+0x29c>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003048:	bf00      	nop
 800304a:	3740      	adds	r7, #64	; 0x40
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40013000 	.word	0x40013000
 8003054:	40023800 	.word	0x40023800
 8003058:	40020000 	.word	0x40020000
 800305c:	40003800 	.word	0x40003800
 8003060:	40020800 	.word	0x40020800
 8003064:	40020400 	.word	0x40020400
 8003068:	40003c00 	.word	0x40003c00
 800306c:	20000488 	.word	0x20000488
 8003070:	40026088 	.word	0x40026088

08003074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d116      	bne.n	80030b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_TIM_Base_MspInit+0xb8>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	4a27      	ldr	r2, [pc, #156]	; (800312c <HAL_TIM_Base_MspInit+0xb8>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6413      	str	r3, [r2, #64]	; 0x40
 8003096:	4b25      	ldr	r3, [pc, #148]	; (800312c <HAL_TIM_Base_MspInit+0xb8>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	201c      	movs	r0, #28
 80030a8:	f000 fc44 	bl	8003934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030ac:	201c      	movs	r0, #28
 80030ae:	f000 fc6d 	bl	800398c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80030b2:	e036      	b.n	8003122 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <HAL_TIM_Base_MspInit+0xbc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d116      	bne.n	80030ec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_TIM_Base_MspInit+0xb8>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	4a19      	ldr	r2, [pc, #100]	; (800312c <HAL_TIM_Base_MspInit+0xb8>)
 80030c8:	f043 0302 	orr.w	r3, r3, #2
 80030cc:	6453      	str	r3, [r2, #68]	; 0x44
 80030ce:	4b17      	ldr	r3, [pc, #92]	; (800312c <HAL_TIM_Base_MspInit+0xb8>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 80030da:	2201      	movs	r2, #1
 80030dc:	2100      	movs	r1, #0
 80030de:	202b      	movs	r0, #43	; 0x2b
 80030e0:	f000 fc28 	bl	8003934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80030e4:	202b      	movs	r0, #43	; 0x2b
 80030e6:	f000 fc51 	bl	800398c <HAL_NVIC_EnableIRQ>
}
 80030ea:	e01a      	b.n	8003122 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM12)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a10      	ldr	r2, [pc, #64]	; (8003134 <HAL_TIM_Base_MspInit+0xc0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d115      	bne.n	8003122 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_TIM_Base_MspInit+0xb8>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a0b      	ldr	r2, [pc, #44]	; (800312c <HAL_TIM_Base_MspInit+0xb8>)
 8003100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_TIM_Base_MspInit+0xb8>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8003112:	2201      	movs	r2, #1
 8003114:	2100      	movs	r1, #0
 8003116:	202b      	movs	r0, #43	; 0x2b
 8003118:	f000 fc0c 	bl	8003934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800311c:	202b      	movs	r0, #43	; 0x2b
 800311e:	f000 fc35 	bl	800398c <HAL_NVIC_EnableIRQ>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	40010400 	.word	0x40010400
 8003134:	40001800 	.word	0x40001800

08003138 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0e      	ldr	r2, [pc, #56]	; (8003180 <HAL_TIM_PWM_MspInit+0x48>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d115      	bne.n	8003176 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <HAL_TIM_PWM_MspInit+0x4c>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <HAL_TIM_PWM_MspInit+0x4c>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_TIM_PWM_MspInit+0x4c>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	201d      	movs	r0, #29
 800316c:	f000 fbe2 	bl	8003934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003170:	201d      	movs	r0, #29
 8003172:	f000 fc0b 	bl	800398c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40000400 	.word	0x40000400
 8003184:	40023800 	.word	0x40023800

08003188 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	; 0x28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_TIM_Encoder_MspInit+0x84>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d12b      	bne.n	8003202 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <HAL_TIM_Encoder_MspInit+0x88>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a17      	ldr	r2, [pc, #92]	; (8003210 <HAL_TIM_Encoder_MspInit+0x88>)
 80031b4:	f043 0304 	orr.w	r3, r3, #4
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_TIM_Encoder_MspInit+0x88>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_TIM_Encoder_MspInit+0x88>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a10      	ldr	r2, [pc, #64]	; (8003210 <HAL_TIM_Encoder_MspInit+0x88>)
 80031d0:	f043 0302 	orr.w	r3, r3, #2
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <HAL_TIM_Encoder_MspInit+0x88>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031e2:	23c0      	movs	r3, #192	; 0xc0
 80031e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031f2:	2302      	movs	r3, #2
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f6:	f107 0314 	add.w	r3, r7, #20
 80031fa:	4619      	mov	r1, r3
 80031fc:	4805      	ldr	r0, [pc, #20]	; (8003214 <HAL_TIM_Encoder_MspInit+0x8c>)
 80031fe:	f001 f8d3 	bl	80043a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003202:	bf00      	nop
 8003204:	3728      	adds	r7, #40	; 0x28
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40000800 	.word	0x40000800
 8003210:	40023800 	.word	0x40023800
 8003214:	40020400 	.word	0x40020400

08003218 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a37      	ldr	r2, [pc, #220]	; (8003314 <HAL_TIM_MspPostInit+0xfc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d11e      	bne.n	8003278 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	4b36      	ldr	r3, [pc, #216]	; (8003318 <HAL_TIM_MspPostInit+0x100>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a35      	ldr	r2, [pc, #212]	; (8003318 <HAL_TIM_MspPostInit+0x100>)
 8003244:	f043 0304 	orr.w	r3, r3, #4
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b33      	ldr	r3, [pc, #204]	; (8003318 <HAL_TIM_MspPostInit+0x100>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003256:	2340      	movs	r3, #64	; 0x40
 8003258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003262:	2300      	movs	r3, #0
 8003264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003266:	2302      	movs	r3, #2
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	4619      	mov	r1, r3
 8003270:	482a      	ldr	r0, [pc, #168]	; (800331c <HAL_TIM_MspPostInit+0x104>)
 8003272:	f001 f899 	bl	80043a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003276:	e048      	b.n	800330a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a28      	ldr	r2, [pc, #160]	; (8003320 <HAL_TIM_MspPostInit+0x108>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d11f      	bne.n	80032c2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_TIM_MspPostInit+0x100>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a23      	ldr	r2, [pc, #140]	; (8003318 <HAL_TIM_MspPostInit+0x100>)
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b21      	ldr	r3, [pc, #132]	; (8003318 <HAL_TIM_MspPostInit+0x100>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800329e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80032a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	2300      	movs	r3, #0
 80032ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032b0:	2303      	movs	r3, #3
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4619      	mov	r1, r3
 80032ba:	4818      	ldr	r0, [pc, #96]	; (800331c <HAL_TIM_MspPostInit+0x104>)
 80032bc:	f001 f874 	bl	80043a8 <HAL_GPIO_Init>
}
 80032c0:	e023      	b.n	800330a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a17      	ldr	r2, [pc, #92]	; (8003324 <HAL_TIM_MspPostInit+0x10c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d11e      	bne.n	800330a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_TIM_MspPostInit+0x100>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	4a10      	ldr	r2, [pc, #64]	; (8003318 <HAL_TIM_MspPostInit+0x100>)
 80032d6:	f043 0302 	orr.w	r3, r3, #2
 80032da:	6313      	str	r3, [r2, #48]	; 0x30
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <HAL_TIM_MspPostInit+0x100>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80032e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80032ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	2302      	movs	r3, #2
 80032f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80032fa:	2309      	movs	r3, #9
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	4619      	mov	r1, r3
 8003304:	4808      	ldr	r0, [pc, #32]	; (8003328 <HAL_TIM_MspPostInit+0x110>)
 8003306:	f001 f84f 	bl	80043a8 <HAL_GPIO_Init>
}
 800330a:	bf00      	nop
 800330c:	3728      	adds	r7, #40	; 0x28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40000400 	.word	0x40000400
 8003318:	40023800 	.word	0x40023800
 800331c:	40020800 	.word	0x40020800
 8003320:	40010400 	.word	0x40010400
 8003324:	40001800 	.word	0x40001800
 8003328:	40020400 	.word	0x40020400

0800332c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08e      	sub	sp, #56	; 0x38
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a5f      	ldr	r2, [pc, #380]	; (80034c8 <HAL_UART_MspInit+0x19c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d153      	bne.n	80033f6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	623b      	str	r3, [r7, #32]
 8003352:	4b5e      	ldr	r3, [pc, #376]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	4a5d      	ldr	r2, [pc, #372]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800335c:	6413      	str	r3, [r2, #64]	; 0x40
 800335e:	4b5b      	ldr	r3, [pc, #364]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003366:	623b      	str	r3, [r7, #32]
 8003368:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	4b57      	ldr	r3, [pc, #348]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	4a56      	ldr	r2, [pc, #344]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	6313      	str	r3, [r2, #48]	; 0x30
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	4b50      	ldr	r3, [pc, #320]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	4a4f      	ldr	r2, [pc, #316]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	6313      	str	r3, [r2, #48]	; 0x30
 8003396:	4b4d      	ldr	r3, [pc, #308]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033a2:	2301      	movs	r3, #1
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ae:	2303      	movs	r3, #3
 80033b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80033b2:	2308      	movs	r3, #8
 80033b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ba:	4619      	mov	r1, r3
 80033bc:	4844      	ldr	r0, [pc, #272]	; (80034d0 <HAL_UART_MspInit+0x1a4>)
 80033be:	f000 fff3 	bl	80043a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80033c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033cc:	2301      	movs	r3, #1
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d0:	2303      	movs	r3, #3
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80033d4:	2308      	movs	r3, #8
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033dc:	4619      	mov	r1, r3
 80033de:	483d      	ldr	r0, [pc, #244]	; (80034d4 <HAL_UART_MspInit+0x1a8>)
 80033e0:	f000 ffe2 	bl	80043a8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80033e4:	2200      	movs	r2, #0
 80033e6:	2100      	movs	r1, #0
 80033e8:	2034      	movs	r0, #52	; 0x34
 80033ea:	f000 faa3 	bl	8003934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80033ee:	2034      	movs	r0, #52	; 0x34
 80033f0:	f000 facc 	bl	800398c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033f4:	e063      	b.n	80034be <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a37      	ldr	r2, [pc, #220]	; (80034d8 <HAL_UART_MspInit+0x1ac>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d12d      	bne.n	800345c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	4b31      	ldr	r3, [pc, #196]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	4a30      	ldr	r2, [pc, #192]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 800340a:	f043 0310 	orr.w	r3, r3, #16
 800340e:	6453      	str	r3, [r2, #68]	; 0x44
 8003410:	4b2e      	ldr	r3, [pc, #184]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341c:	2300      	movs	r3, #0
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	4a29      	ldr	r2, [pc, #164]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6313      	str	r3, [r2, #48]	; 0x30
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003438:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003446:	2303      	movs	r3, #3
 8003448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800344a:	2307      	movs	r3, #7
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003452:	4619      	mov	r1, r3
 8003454:	481e      	ldr	r0, [pc, #120]	; (80034d0 <HAL_UART_MspInit+0x1a4>)
 8003456:	f000 ffa7 	bl	80043a8 <HAL_GPIO_Init>
}
 800345a:	e030      	b.n	80034be <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_UART_MspInit+0x1b0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d12b      	bne.n	80034be <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003474:	6413      	str	r3, [r2, #64]	; 0x40
 8003476:	4b15      	ldr	r3, [pc, #84]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a10      	ldr	r2, [pc, #64]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <HAL_UART_MspInit+0x1a0>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800349e:	230c      	movs	r3, #12
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034aa:	2303      	movs	r3, #3
 80034ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034ae:	2307      	movs	r3, #7
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b6:	4619      	mov	r1, r3
 80034b8:	4805      	ldr	r0, [pc, #20]	; (80034d0 <HAL_UART_MspInit+0x1a4>)
 80034ba:	f000 ff75 	bl	80043a8 <HAL_GPIO_Init>
}
 80034be:	bf00      	nop
 80034c0:	3738      	adds	r7, #56	; 0x38
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40004c00 	.word	0x40004c00
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40020000 	.word	0x40020000
 80034d4:	40020800 	.word	0x40020800
 80034d8:	40011000 	.word	0x40011000
 80034dc:	40004400 	.word	0x40004400

080034e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034e4:	e7fe      	b.n	80034e4 <NMI_Handler+0x4>

080034e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ea:	e7fe      	b.n	80034ea <HardFault_Handler+0x4>

080034ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034f0:	e7fe      	b.n	80034f0 <MemManage_Handler+0x4>

080034f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034f6:	e7fe      	b.n	80034f6 <BusFault_Handler+0x4>

080034f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034fc:	e7fe      	b.n	80034fc <UsageFault_Handler+0x4>

080034fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800351a:	b480      	push	{r7}
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800352c:	f000 f8ce 	bl	80036cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003530:	bf00      	nop
 8003532:	bd80      	pop	{r7, pc}

08003534 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <DMA1_Stream5_IRQHandler+0x10>)
 800353a:	f000 fcf9 	bl	8003f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000488 	.word	0x20000488

08003548 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800354c:	4802      	ldr	r0, [pc, #8]	; (8003558 <TIM2_IRQHandler+0x10>)
 800354e:	f004 fe97 	bl	8008280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	200005c8 	.word	0x200005c8

0800355c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <TIM3_IRQHandler+0x10>)
 8003562:	f004 fe8d 	bl	8008280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	200003e8 	.word	0x200003e8

08003570 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003574:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003578:	f001 fa6c 	bl	8004a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}

08003580 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003584:	4803      	ldr	r0, [pc, #12]	; (8003594 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8003586:	f004 fe7b 	bl	8008280 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800358a:	4803      	ldr	r0, [pc, #12]	; (8003598 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800358c:	f004 fe78 	bl	8008280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003590:	bf00      	nop
 8003592:	bd80      	pop	{r7, pc}
 8003594:	200002b0 	.word	0x200002b0
 8003598:	20000654 	.word	0x20000654

0800359c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <UART4_IRQHandler+0x10>)
 80035a2:	f006 fb85 	bl	8009cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	2000052c 	.word	0x2000052c

080035b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <SystemInit+0x20>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <SystemInit+0x20>)
 80035bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800360c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035d8:	480d      	ldr	r0, [pc, #52]	; (8003610 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035da:	490e      	ldr	r1, [pc, #56]	; (8003614 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035dc:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035e0:	e002      	b.n	80035e8 <LoopCopyDataInit>

080035e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035e6:	3304      	adds	r3, #4

080035e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035ec:	d3f9      	bcc.n	80035e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ee:	4a0b      	ldr	r2, [pc, #44]	; (800361c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035f0:	4c0b      	ldr	r4, [pc, #44]	; (8003620 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035f4:	e001      	b.n	80035fa <LoopFillZerobss>

080035f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035f8:	3204      	adds	r2, #4

080035fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035fc:	d3fb      	bcc.n	80035f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035fe:	f7ff ffd7 	bl	80035b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003602:	f00c fe17 	bl	8010234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003606:	f7fd fe0b 	bl	8001220 <main>
  bx  lr    
 800360a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800360c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003614:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8003618:	080105e0 	.word	0x080105e0
  ldr r2, =_sbss
 800361c:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8003620:	200007a0 	.word	0x200007a0

08003624 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003624:	e7fe      	b.n	8003624 <ADC_IRQHandler>
	...

08003628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <HAL_Init+0x40>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0d      	ldr	r2, [pc, #52]	; (8003668 <HAL_Init+0x40>)
 8003632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003636:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_Init+0x40>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <HAL_Init+0x40>)
 800363e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003642:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_Init+0x40>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a07      	ldr	r2, [pc, #28]	; (8003668 <HAL_Init+0x40>)
 800364a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003650:	2003      	movs	r0, #3
 8003652:	f000 f94f 	bl	80038f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003656:	2000      	movs	r0, #0
 8003658:	f000 f808 	bl	800366c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800365c:	f7ff fa9c 	bl	8002b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023c00 	.word	0x40023c00

0800366c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003674:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <HAL_InitTick+0x54>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_InitTick+0x58>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	4619      	mov	r1, r3
 800367e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003682:	fbb3 f3f1 	udiv	r3, r3, r1
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f996 	bl	80039bc <HAL_SYSTICK_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e00e      	b.n	80036b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b0f      	cmp	r3, #15
 800369e:	d80a      	bhi.n	80036b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a0:	2200      	movs	r2, #0
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f000 f944 	bl	8003934 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036ac:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <HAL_InitTick+0x5c>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e000      	b.n	80036b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	2000014c 	.word	0x2000014c
 80036c4:	20000154 	.word	0x20000154
 80036c8:	20000150 	.word	0x20000150

080036cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_IncTick+0x20>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_IncTick+0x24>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_IncTick+0x24>)
 80036de:	6013      	str	r3, [r2, #0]
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000154 	.word	0x20000154
 80036f0:	2000069c 	.word	0x2000069c

080036f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return uwTick;
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <HAL_GetTick+0x14>)
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	2000069c 	.word	0x2000069c

0800370c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7ff ffee 	bl	80036f4 <HAL_GetTick>
 8003718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d005      	beq.n	8003732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <HAL_Delay+0x44>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003732:	bf00      	nop
 8003734:	f7ff ffde 	bl	80036f4 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	429a      	cmp	r2, r3
 8003742:	d8f7      	bhi.n	8003734 <HAL_Delay+0x28>
  {
  }
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000154 	.word	0x20000154

08003754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800377c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db0b      	blt.n	80037e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	4907      	ldr	r1, [pc, #28]	; (80037f0 <__NVIC_EnableIRQ+0x38>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2001      	movs	r0, #1
 80037da:	fa00 f202 	lsl.w	r2, r0, r2
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e100 	.word	0xe000e100

080037f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003804:	2b00      	cmp	r3, #0
 8003806:	db0a      	blt.n	800381e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	490c      	ldr	r1, [pc, #48]	; (8003840 <__NVIC_SetPriority+0x4c>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	0112      	lsls	r2, r2, #4
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	440b      	add	r3, r1
 8003818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800381c:	e00a      	b.n	8003834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4908      	ldr	r1, [pc, #32]	; (8003844 <__NVIC_SetPriority+0x50>)
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	3b04      	subs	r3, #4
 800382c:	0112      	lsls	r2, r2, #4
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	440b      	add	r3, r1
 8003832:	761a      	strb	r2, [r3, #24]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000e100 	.word	0xe000e100
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003848:	b480      	push	{r7}
 800384a:	b089      	sub	sp, #36	; 0x24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f1c3 0307 	rsb	r3, r3, #7
 8003862:	2b04      	cmp	r3, #4
 8003864:	bf28      	it	cs
 8003866:	2304      	movcs	r3, #4
 8003868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3304      	adds	r3, #4
 800386e:	2b06      	cmp	r3, #6
 8003870:	d902      	bls.n	8003878 <NVIC_EncodePriority+0x30>
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3b03      	subs	r3, #3
 8003876:	e000      	b.n	800387a <NVIC_EncodePriority+0x32>
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	f04f 32ff 	mov.w	r2, #4294967295
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	401a      	ands	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003890:	f04f 31ff 	mov.w	r1, #4294967295
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	43d9      	mvns	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	4313      	orrs	r3, r2
         );
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c0:	d301      	bcc.n	80038c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c2:	2301      	movs	r3, #1
 80038c4:	e00f      	b.n	80038e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c6:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <SysTick_Config+0x40>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ce:	210f      	movs	r1, #15
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	f7ff ff8e 	bl	80037f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <SysTick_Config+0x40>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038de:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <SysTick_Config+0x40>)
 80038e0:	2207      	movs	r2, #7
 80038e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	e000e010 	.word	0xe000e010

080038f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b07      	cmp	r3, #7
 8003900:	d00f      	beq.n	8003922 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b06      	cmp	r3, #6
 8003906:	d00c      	beq.n	8003922 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b05      	cmp	r3, #5
 800390c:	d009      	beq.n	8003922 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d006      	beq.n	8003922 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d003      	beq.n	8003922 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800391a:	2192      	movs	r1, #146	; 0x92
 800391c:	4804      	ldr	r0, [pc, #16]	; (8003930 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800391e:	f7ff f930 	bl	8002b82 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ff16 	bl	8003754 <__NVIC_SetPriorityGrouping>
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	080102e8 	.word	0x080102e8

08003934 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b0f      	cmp	r3, #15
 800394a:	d903      	bls.n	8003954 <HAL_NVIC_SetPriority+0x20>
 800394c:	21aa      	movs	r1, #170	; 0xaa
 800394e:	480e      	ldr	r0, [pc, #56]	; (8003988 <HAL_NVIC_SetPriority+0x54>)
 8003950:	f7ff f917 	bl	8002b82 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b0f      	cmp	r3, #15
 8003958:	d903      	bls.n	8003962 <HAL_NVIC_SetPriority+0x2e>
 800395a:	21ab      	movs	r1, #171	; 0xab
 800395c:	480a      	ldr	r0, [pc, #40]	; (8003988 <HAL_NVIC_SetPriority+0x54>)
 800395e:	f7ff f910 	bl	8002b82 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003962:	f7ff ff1b 	bl	800379c <__NVIC_GetPriorityGrouping>
 8003966:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	6978      	ldr	r0, [r7, #20]
 800396e:	f7ff ff6b 	bl	8003848 <NVIC_EncodePriority>
 8003972:	4602      	mov	r2, r0
 8003974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff ff3a 	bl	80037f4 <__NVIC_SetPriority>
}
 8003980:	bf00      	nop
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	080102e8 	.word	0x080102e8

0800398c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	2b00      	cmp	r3, #0
 800399c:	da03      	bge.n	80039a6 <HAL_NVIC_EnableIRQ+0x1a>
 800399e:	21be      	movs	r1, #190	; 0xbe
 80039a0:	4805      	ldr	r0, [pc, #20]	; (80039b8 <HAL_NVIC_EnableIRQ+0x2c>)
 80039a2:	f7ff f8ee 	bl	8002b82 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff ff04 	bl	80037b8 <__NVIC_EnableIRQ>
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	080102e8 	.word	0x080102e8

080039bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ff73 	bl	80038b0 <SysTick_Config>
 80039ca:	4603      	mov	r3, r0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7ff fe88 	bl	80036f4 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e204      	b.n	8003dfa <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a97      	ldr	r2, [pc, #604]	; (8003c54 <HAL_DMA_Init+0x280>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d04e      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a96      	ldr	r2, [pc, #600]	; (8003c58 <HAL_DMA_Init+0x284>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d049      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a94      	ldr	r2, [pc, #592]	; (8003c5c <HAL_DMA_Init+0x288>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d044      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a93      	ldr	r2, [pc, #588]	; (8003c60 <HAL_DMA_Init+0x28c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d03f      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a91      	ldr	r2, [pc, #580]	; (8003c64 <HAL_DMA_Init+0x290>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d03a      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a90      	ldr	r2, [pc, #576]	; (8003c68 <HAL_DMA_Init+0x294>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d035      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a8e      	ldr	r2, [pc, #568]	; (8003c6c <HAL_DMA_Init+0x298>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d030      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a8d      	ldr	r2, [pc, #564]	; (8003c70 <HAL_DMA_Init+0x29c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d02b      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a8b      	ldr	r2, [pc, #556]	; (8003c74 <HAL_DMA_Init+0x2a0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d026      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a8a      	ldr	r2, [pc, #552]	; (8003c78 <HAL_DMA_Init+0x2a4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d021      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a88      	ldr	r2, [pc, #544]	; (8003c7c <HAL_DMA_Init+0x2a8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01c      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a87      	ldr	r2, [pc, #540]	; (8003c80 <HAL_DMA_Init+0x2ac>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d017      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a85      	ldr	r2, [pc, #532]	; (8003c84 <HAL_DMA_Init+0x2b0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d012      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a84      	ldr	r2, [pc, #528]	; (8003c88 <HAL_DMA_Init+0x2b4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00d      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a82      	ldr	r2, [pc, #520]	; (8003c8c <HAL_DMA_Init+0x2b8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d008      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a81      	ldr	r2, [pc, #516]	; (8003c90 <HAL_DMA_Init+0x2bc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <HAL_DMA_Init+0xc4>
 8003a90:	21b8      	movs	r1, #184	; 0xb8
 8003a92:	4880      	ldr	r0, [pc, #512]	; (8003c94 <HAL_DMA_Init+0x2c0>)
 8003a94:	f7ff f875 	bl	8002b82 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d026      	beq.n	8003aee <HAL_DMA_Init+0x11a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aa8:	d021      	beq.n	8003aee <HAL_DMA_Init+0x11a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ab2:	d01c      	beq.n	8003aee <HAL_DMA_Init+0x11a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003abc:	d017      	beq.n	8003aee <HAL_DMA_Init+0x11a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ac6:	d012      	beq.n	8003aee <HAL_DMA_Init+0x11a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003ad0:	d00d      	beq.n	8003aee <HAL_DMA_Init+0x11a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ada:	d008      	beq.n	8003aee <HAL_DMA_Init+0x11a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003ae4:	d003      	beq.n	8003aee <HAL_DMA_Init+0x11a>
 8003ae6:	21b9      	movs	r1, #185	; 0xb9
 8003ae8:	486a      	ldr	r0, [pc, #424]	; (8003c94 <HAL_DMA_Init+0x2c0>)
 8003aea:	f7ff f84a 	bl	8002b82 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_DMA_Init+0x13a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	d007      	beq.n	8003b0e <HAL_DMA_Init+0x13a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d003      	beq.n	8003b0e <HAL_DMA_Init+0x13a>
 8003b06:	21ba      	movs	r1, #186	; 0xba
 8003b08:	4862      	ldr	r0, [pc, #392]	; (8003c94 <HAL_DMA_Init+0x2c0>)
 8003b0a:	f7ff f83a 	bl	8002b82 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b16:	d007      	beq.n	8003b28 <HAL_DMA_Init+0x154>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_DMA_Init+0x154>
 8003b20:	21bb      	movs	r1, #187	; 0xbb
 8003b22:	485c      	ldr	r0, [pc, #368]	; (8003c94 <HAL_DMA_Init+0x2c0>)
 8003b24:	f7ff f82d 	bl	8002b82 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b30:	d007      	beq.n	8003b42 <HAL_DMA_Init+0x16e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_DMA_Init+0x16e>
 8003b3a:	21bc      	movs	r1, #188	; 0xbc
 8003b3c:	4855      	ldr	r0, [pc, #340]	; (8003c94 <HAL_DMA_Init+0x2c0>)
 8003b3e:	f7ff f820 	bl	8002b82 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <HAL_DMA_Init+0x192>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b52:	d008      	beq.n	8003b66 <HAL_DMA_Init+0x192>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5c:	d003      	beq.n	8003b66 <HAL_DMA_Init+0x192>
 8003b5e:	21bd      	movs	r1, #189	; 0xbd
 8003b60:	484c      	ldr	r0, [pc, #304]	; (8003c94 <HAL_DMA_Init+0x2c0>)
 8003b62:	f7ff f80e 	bl	8002b82 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00d      	beq.n	8003b8a <HAL_DMA_Init+0x1b6>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b76:	d008      	beq.n	8003b8a <HAL_DMA_Init+0x1b6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b80:	d003      	beq.n	8003b8a <HAL_DMA_Init+0x1b6>
 8003b82:	21be      	movs	r1, #190	; 0xbe
 8003b84:	4843      	ldr	r0, [pc, #268]	; (8003c94 <HAL_DMA_Init+0x2c0>)
 8003b86:	f7fe fffc 	bl	8002b82 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00c      	beq.n	8003bac <HAL_DMA_Init+0x1d8>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9a:	d007      	beq.n	8003bac <HAL_DMA_Init+0x1d8>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d003      	beq.n	8003bac <HAL_DMA_Init+0x1d8>
 8003ba4:	21bf      	movs	r1, #191	; 0xbf
 8003ba6:	483b      	ldr	r0, [pc, #236]	; (8003c94 <HAL_DMA_Init+0x2c0>)
 8003ba8:	f7fe ffeb 	bl	8002b82 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d012      	beq.n	8003bda <HAL_DMA_Init+0x206>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbc:	d00d      	beq.n	8003bda <HAL_DMA_Init+0x206>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc6:	d008      	beq.n	8003bda <HAL_DMA_Init+0x206>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bd0:	d003      	beq.n	8003bda <HAL_DMA_Init+0x206>
 8003bd2:	21c0      	movs	r1, #192	; 0xc0
 8003bd4:	482f      	ldr	r0, [pc, #188]	; (8003c94 <HAL_DMA_Init+0x2c0>)
 8003bd6:	f7fe ffd4 	bl	8002b82 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <HAL_DMA_Init+0x21e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d003      	beq.n	8003bf2 <HAL_DMA_Init+0x21e>
 8003bea:	21c1      	movs	r1, #193	; 0xc1
 8003bec:	4829      	ldr	r0, [pc, #164]	; (8003c94 <HAL_DMA_Init+0x2c0>)
 8003bee:	f7fe ffc8 	bl	8002b82 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d065      	beq.n	8003cc6 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00f      	beq.n	8003c22 <HAL_DMA_Init+0x24e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d00b      	beq.n	8003c22 <HAL_DMA_Init+0x24e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d007      	beq.n	8003c22 <HAL_DMA_Init+0x24e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d003      	beq.n	8003c22 <HAL_DMA_Init+0x24e>
 8003c1a:	21c6      	movs	r1, #198	; 0xc6
 8003c1c:	481d      	ldr	r0, [pc, #116]	; (8003c94 <HAL_DMA_Init+0x2c0>)
 8003c1e:	f7fe ffb0 	bl	8002b82 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d036      	beq.n	8003c98 <HAL_DMA_Init+0x2c4>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c32:	d031      	beq.n	8003c98 <HAL_DMA_Init+0x2c4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c3c:	d02c      	beq.n	8003c98 <HAL_DMA_Init+0x2c4>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c46:	d027      	beq.n	8003c98 <HAL_DMA_Init+0x2c4>
 8003c48:	21c7      	movs	r1, #199	; 0xc7
 8003c4a:	4812      	ldr	r0, [pc, #72]	; (8003c94 <HAL_DMA_Init+0x2c0>)
 8003c4c:	f7fe ff99 	bl	8002b82 <assert_failed>
 8003c50:	e022      	b.n	8003c98 <HAL_DMA_Init+0x2c4>
 8003c52:	bf00      	nop
 8003c54:	40026010 	.word	0x40026010
 8003c58:	40026028 	.word	0x40026028
 8003c5c:	40026040 	.word	0x40026040
 8003c60:	40026058 	.word	0x40026058
 8003c64:	40026070 	.word	0x40026070
 8003c68:	40026088 	.word	0x40026088
 8003c6c:	400260a0 	.word	0x400260a0
 8003c70:	400260b8 	.word	0x400260b8
 8003c74:	40026410 	.word	0x40026410
 8003c78:	40026428 	.word	0x40026428
 8003c7c:	40026440 	.word	0x40026440
 8003c80:	40026458 	.word	0x40026458
 8003c84:	40026470 	.word	0x40026470
 8003c88:	40026488 	.word	0x40026488
 8003c8c:	400264a0 	.word	0x400264a0
 8003c90:	400264b8 	.word	0x400264b8
 8003c94:	08010324 	.word	0x08010324
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d012      	beq.n	8003cc6 <HAL_DMA_Init+0x2f2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ca8:	d00d      	beq.n	8003cc6 <HAL_DMA_Init+0x2f2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb2:	d008      	beq.n	8003cc6 <HAL_DMA_Init+0x2f2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003cbc:	d003      	beq.n	8003cc6 <HAL_DMA_Init+0x2f2>
 8003cbe:	21c8      	movs	r1, #200	; 0xc8
 8003cc0:	4850      	ldr	r0, [pc, #320]	; (8003e04 <HAL_DMA_Init+0x430>)
 8003cc2:	f7fe ff5e 	bl	8002b82 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0201 	bic.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ce6:	e00f      	b.n	8003d08 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ce8:	f7ff fd04 	bl	80036f4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b05      	cmp	r3, #5
 8003cf4:	d908      	bls.n	8003d08 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2203      	movs	r2, #3
 8003d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e078      	b.n	8003dfa <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e8      	bne.n	8003ce8 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4b39      	ldr	r3, [pc, #228]	; (8003e08 <HAL_DMA_Init+0x434>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d107      	bne.n	8003d72 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f023 0307 	bic.w	r3, r3, #7
 8003d88:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d117      	bne.n	8003dcc <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00e      	beq.n	8003dcc <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa7e 	bl	80042b0 <DMA_CheckFifoParam>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2240      	movs	r2, #64	; 0x40
 8003dbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e016      	b.n	8003dfa <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fa35 	bl	8004244 <DMA_CalcBaseAndBitshift>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de2:	223f      	movs	r2, #63	; 0x3f
 8003de4:	409a      	lsls	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	08010324 	.word	0x08010324
 8003e08:	f010803f 	.word	0xf010803f

08003e0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e1a:	f7ff fc6b 	bl	80036f4 <HAL_GetTick>
 8003e1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d008      	beq.n	8003e3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e052      	b.n	8003ee4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0216 	bic.w	r2, r2, #22
 8003e4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <HAL_DMA_Abort+0x62>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0208 	bic.w	r2, r2, #8
 8003e7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0201 	bic.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e8e:	e013      	b.n	8003eb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e90:	f7ff fc30 	bl	80036f4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b05      	cmp	r3, #5
 8003e9c:	d90c      	bls.n	8003eb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e015      	b.n	8003ee4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e4      	bne.n	8003e90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	223f      	movs	r2, #63	; 0x3f
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d004      	beq.n	8003f0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2280      	movs	r2, #128	; 0x80
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e00c      	b.n	8003f24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2205      	movs	r2, #5
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f3c:	4b92      	ldr	r3, [pc, #584]	; (8004188 <HAL_DMA_IRQHandler+0x258>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a92      	ldr	r2, [pc, #584]	; (800418c <HAL_DMA_IRQHandler+0x25c>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	0a9b      	lsrs	r3, r3, #10
 8003f48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01a      	beq.n	8003f9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d013      	beq.n	8003f9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0204 	bic.w	r2, r2, #4
 8003f82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f88:	2208      	movs	r2, #8
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	f043 0201 	orr.w	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d012      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	f043 0202 	orr.w	r2, r3, #2
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d012      	beq.n	8004008 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00b      	beq.n	8004008 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	f043 0204 	orr.w	r2, r3, #4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	2210      	movs	r2, #16
 800400e:	409a      	lsls	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d043      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d03c      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402a:	2210      	movs	r2, #16
 800402c:	409a      	lsls	r2, r3
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d018      	beq.n	8004072 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d108      	bne.n	8004060 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d024      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	4798      	blx	r3
 800405e:	e01f      	b.n	80040a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01b      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	4798      	blx	r3
 8004070:	e016      	b.n	80040a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d107      	bne.n	8004090 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0208 	bic.w	r2, r2, #8
 800408e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	2220      	movs	r2, #32
 80040a6:	409a      	lsls	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 808e 	beq.w	80041ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8086 	beq.w	80041ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c6:	2220      	movs	r2, #32
 80040c8:	409a      	lsls	r2, r3
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d136      	bne.n	8004148 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0216 	bic.w	r2, r2, #22
 80040e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d103      	bne.n	800410a <HAL_DMA_IRQHandler+0x1da>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0208 	bic.w	r2, r2, #8
 8004118:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	223f      	movs	r2, #63	; 0x3f
 8004120:	409a      	lsls	r2, r3
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413a:	2b00      	cmp	r3, #0
 800413c:	d07d      	beq.n	800423a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	4798      	blx	r3
        }
        return;
 8004146:	e078      	b.n	800423a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01c      	beq.n	8004190 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d108      	bne.n	8004176 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004168:	2b00      	cmp	r3, #0
 800416a:	d030      	beq.n	80041ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
 8004174:	e02b      	b.n	80041ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d027      	beq.n	80041ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
 8004186:	e022      	b.n	80041ce <HAL_DMA_IRQHandler+0x29e>
 8004188:	2000014c 	.word	0x2000014c
 800418c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0210 	bic.w	r2, r2, #16
 80041ac:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d032      	beq.n	800423c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d022      	beq.n	8004228 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2205      	movs	r2, #5
 80041e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	429a      	cmp	r2, r3
 8004204:	d307      	bcc.n	8004216 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f2      	bne.n	80041fa <HAL_DMA_IRQHandler+0x2ca>
 8004214:	e000      	b.n	8004218 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004216:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4798      	blx	r3
 8004238:	e000      	b.n	800423c <HAL_DMA_IRQHandler+0x30c>
        return;
 800423a:	bf00      	nop
    }
  }
}
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop

08004244 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	3b10      	subs	r3, #16
 8004254:	4a14      	ldr	r2, [pc, #80]	; (80042a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800425e:	4a13      	ldr	r2, [pc, #76]	; (80042ac <DMA_CalcBaseAndBitshift+0x68>)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b03      	cmp	r3, #3
 8004270:	d909      	bls.n	8004286 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	1d1a      	adds	r2, r3, #4
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	659a      	str	r2, [r3, #88]	; 0x58
 8004284:	e007      	b.n	8004296 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800428e:	f023 0303 	bic.w	r3, r3, #3
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	aaaaaaab 	.word	0xaaaaaaab
 80042ac:	080105a0 	.word	0x080105a0

080042b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d11f      	bne.n	800430a <DMA_CheckFifoParam+0x5a>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d856      	bhi.n	800437e <DMA_CheckFifoParam+0xce>
 80042d0:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <DMA_CheckFifoParam+0x28>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	080042e9 	.word	0x080042e9
 80042dc:	080042fb 	.word	0x080042fb
 80042e0:	080042e9 	.word	0x080042e9
 80042e4:	0800437f 	.word	0x0800437f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d046      	beq.n	8004382 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042f8:	e043      	b.n	8004382 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004302:	d140      	bne.n	8004386 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004308:	e03d      	b.n	8004386 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004312:	d121      	bne.n	8004358 <DMA_CheckFifoParam+0xa8>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b03      	cmp	r3, #3
 8004318:	d837      	bhi.n	800438a <DMA_CheckFifoParam+0xda>
 800431a:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <DMA_CheckFifoParam+0x70>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004331 	.word	0x08004331
 8004324:	08004337 	.word	0x08004337
 8004328:	08004331 	.word	0x08004331
 800432c:	08004349 	.word	0x08004349
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
      break;
 8004334:	e030      	b.n	8004398 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d025      	beq.n	800438e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004346:	e022      	b.n	800438e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004350:	d11f      	bne.n	8004392 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004356:	e01c      	b.n	8004392 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d903      	bls.n	8004366 <DMA_CheckFifoParam+0xb6>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b03      	cmp	r3, #3
 8004362:	d003      	beq.n	800436c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004364:	e018      	b.n	8004398 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
      break;
 800436a:	e015      	b.n	8004398 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00e      	beq.n	8004396 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      break;
 800437c:	e00b      	b.n	8004396 <DMA_CheckFifoParam+0xe6>
      break;
 800437e:	bf00      	nop
 8004380:	e00a      	b.n	8004398 <DMA_CheckFifoParam+0xe8>
      break;
 8004382:	bf00      	nop
 8004384:	e008      	b.n	8004398 <DMA_CheckFifoParam+0xe8>
      break;
 8004386:	bf00      	nop
 8004388:	e006      	b.n	8004398 <DMA_CheckFifoParam+0xe8>
      break;
 800438a:	bf00      	nop
 800438c:	e004      	b.n	8004398 <DMA_CheckFifoParam+0xe8>
      break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <DMA_CheckFifoParam+0xe8>
      break;   
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <DMA_CheckFifoParam+0xe8>
      break;
 8004396:	bf00      	nop
    }
  } 
  
  return status; 
 8004398:	7bfb      	ldrb	r3, [r7, #15]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop

080043a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a37      	ldr	r2, [pc, #220]	; (80044a0 <HAL_GPIO_Init+0xf8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01f      	beq.n	8004406 <HAL_GPIO_Init+0x5e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a36      	ldr	r2, [pc, #216]	; (80044a4 <HAL_GPIO_Init+0xfc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01b      	beq.n	8004406 <HAL_GPIO_Init+0x5e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a35      	ldr	r2, [pc, #212]	; (80044a8 <HAL_GPIO_Init+0x100>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d017      	beq.n	8004406 <HAL_GPIO_Init+0x5e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a34      	ldr	r2, [pc, #208]	; (80044ac <HAL_GPIO_Init+0x104>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <HAL_GPIO_Init+0x5e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a33      	ldr	r2, [pc, #204]	; (80044b0 <HAL_GPIO_Init+0x108>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00f      	beq.n	8004406 <HAL_GPIO_Init+0x5e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a32      	ldr	r2, [pc, #200]	; (80044b4 <HAL_GPIO_Init+0x10c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00b      	beq.n	8004406 <HAL_GPIO_Init+0x5e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a31      	ldr	r2, [pc, #196]	; (80044b8 <HAL_GPIO_Init+0x110>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d007      	beq.n	8004406 <HAL_GPIO_Init+0x5e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a30      	ldr	r2, [pc, #192]	; (80044bc <HAL_GPIO_Init+0x114>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d003      	beq.n	8004406 <HAL_GPIO_Init+0x5e>
 80043fe:	21ac      	movs	r1, #172	; 0xac
 8004400:	482f      	ldr	r0, [pc, #188]	; (80044c0 <HAL_GPIO_Init+0x118>)
 8004402:	f7fe fbbe 	bl	8002b82 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <HAL_GPIO_Init+0x74>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_GPIO_Init+0x7c>
 800441c:	21ad      	movs	r1, #173	; 0xad
 800441e:	4828      	ldr	r0, [pc, #160]	; (80044c0 <HAL_GPIO_Init+0x118>)
 8004420:	f7fe fbaf 	bl	8002b82 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d035      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d031      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b11      	cmp	r3, #17
 800443a:	d02d      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d029      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b12      	cmp	r3, #18
 800444a:	d025      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004454:	d020      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800445e:	d01b      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8004468:	d016      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004472:	d011      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800447c:	d00c      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8004486:	d007      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d003      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
 8004490:	21ae      	movs	r1, #174	; 0xae
 8004492:	480b      	ldr	r0, [pc, #44]	; (80044c0 <HAL_GPIO_Init+0x118>)
 8004494:	f7fe fb75 	bl	8002b82 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004498:	2300      	movs	r3, #0
 800449a:	61fb      	str	r3, [r7, #28]
 800449c:	e289      	b.n	80049b2 <HAL_GPIO_Init+0x60a>
 800449e:	bf00      	nop
 80044a0:	40020000 	.word	0x40020000
 80044a4:	40020400 	.word	0x40020400
 80044a8:	40020800 	.word	0x40020800
 80044ac:	40020c00 	.word	0x40020c00
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40021400 	.word	0x40021400
 80044b8:	40021800 	.word	0x40021800
 80044bc:	40021c00 	.word	0x40021c00
 80044c0:	0801035c 	.word	0x0801035c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044c4:	2201      	movs	r2, #1
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4013      	ands	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	429a      	cmp	r2, r3
 80044de:	f040 8265 	bne.w	80049ac <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d005      	beq.n	80044fa <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d144      	bne.n	8004584 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00f      	beq.n	8004522 <HAL_GPIO_Init+0x17a>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d00b      	beq.n	8004522 <HAL_GPIO_Init+0x17a>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d007      	beq.n	8004522 <HAL_GPIO_Init+0x17a>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_Init+0x17a>
 800451a:	21c0      	movs	r1, #192	; 0xc0
 800451c:	4831      	ldr	r0, [pc, #196]	; (80045e4 <HAL_GPIO_Init+0x23c>)
 800451e:	f7fe fb30 	bl	8002b82 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	2203      	movs	r2, #3
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004558:	2201      	movs	r2, #1
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 0201 	and.w	r2, r3, #1
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b03      	cmp	r3, #3
 800458e:	d02b      	beq.n	80045e8 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <HAL_GPIO_Init+0x208>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d007      	beq.n	80045b0 <HAL_GPIO_Init+0x208>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x208>
 80045a8:	21d1      	movs	r1, #209	; 0xd1
 80045aa:	480e      	ldr	r0, [pc, #56]	; (80045e4 <HAL_GPIO_Init+0x23c>)
 80045ac:	f7fe fae9 	bl	8002b82 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	2203      	movs	r2, #3
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	60da      	str	r2, [r3, #12]
 80045e0:	e002      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045e2:	bf00      	nop
 80045e4:	0801035c 	.word	0x0801035c
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	f040 810c 	bne.w	800480e <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80e3 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b09      	cmp	r3, #9
 8004606:	f000 80de 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80d9 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80d4 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80cf 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80ca 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b01      	cmp	r3, #1
 8004638:	f000 80c5 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b01      	cmp	r3, #1
 8004642:	f000 80c0 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b02      	cmp	r3, #2
 800464c:	f000 80bb 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b02      	cmp	r3, #2
 8004656:	f000 80b6 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b02      	cmp	r3, #2
 8004660:	f000 80b1 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b03      	cmp	r3, #3
 800466a:	f000 80ac 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b04      	cmp	r3, #4
 8004674:	f000 80a7 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b04      	cmp	r3, #4
 800467e:	f000 80a2 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b04      	cmp	r3, #4
 8004688:	f000 809d 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2b05      	cmp	r3, #5
 8004692:	f000 8098 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b05      	cmp	r3, #5
 800469c:	f000 8093 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	2b09      	cmp	r3, #9
 80046a6:	f000 808e 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	f000 8089 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b09      	cmp	r3, #9
 80046ba:	f000 8084 	beq.w	80047c6 <HAL_GPIO_Init+0x41e>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b07      	cmp	r3, #7
 80046c4:	d07f      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b07      	cmp	r3, #7
 80046cc:	d07b      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b07      	cmp	r3, #7
 80046d4:	d077      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d073      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d06f      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d06b      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b09      	cmp	r3, #9
 80046f4:	d067      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b09      	cmp	r3, #9
 80046fc:	d063      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b0a      	cmp	r3, #10
 8004704:	d05f      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b0a      	cmp	r3, #10
 800470c:	d05b      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b0b      	cmp	r3, #11
 8004714:	d057      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d053      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b0c      	cmp	r3, #12
 8004724:	d04f      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b0d      	cmp	r3, #13
 800472c:	d04b      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b0f      	cmp	r3, #15
 8004734:	d047      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b05      	cmp	r3, #5
 800473c:	d043      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d03f      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b06      	cmp	r3, #6
 800474c:	d03b      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d037      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b04      	cmp	r3, #4
 800475c:	d033      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b05      	cmp	r3, #5
 8004764:	d02f      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b06      	cmp	r3, #6
 800476c:	d02b      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b06      	cmp	r3, #6
 8004774:	d027      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b07      	cmp	r3, #7
 800477c:	d023      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b07      	cmp	r3, #7
 8004784:	d01f      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b07      	cmp	r3, #7
 800478c:	d01b      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b07      	cmp	r3, #7
 8004794:	d017      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b08      	cmp	r3, #8
 800479c:	d013      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d00f      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b09      	cmp	r3, #9
 80047ac:	d00b      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b0a      	cmp	r3, #10
 80047b4:	d007      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b0a      	cmp	r3, #10
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x41e>
 80047be:	21de      	movs	r1, #222	; 0xde
 80047c0:	4880      	ldr	r0, [pc, #512]	; (80049c4 <HAL_GPIO_Init+0x61c>)
 80047c2:	f7fe f9de 	bl	8002b82 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	08da      	lsrs	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3208      	adds	r2, #8
 80047ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	08da      	lsrs	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3208      	adds	r2, #8
 8004808:	69b9      	ldr	r1, [r7, #24]
 800480a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	2203      	movs	r2, #3
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4013      	ands	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 0203 	and.w	r2, r3, #3
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80ae 	beq.w	80049ac <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	4b5c      	ldr	r3, [pc, #368]	; (80049c8 <HAL_GPIO_Init+0x620>)
 8004856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004858:	4a5b      	ldr	r2, [pc, #364]	; (80049c8 <HAL_GPIO_Init+0x620>)
 800485a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800485e:	6453      	str	r3, [r2, #68]	; 0x44
 8004860:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_GPIO_Init+0x620>)
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800486c:	4a57      	ldr	r2, [pc, #348]	; (80049cc <HAL_GPIO_Init+0x624>)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	089b      	lsrs	r3, r3, #2
 8004872:	3302      	adds	r3, #2
 8004874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	220f      	movs	r2, #15
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a4f      	ldr	r2, [pc, #316]	; (80049d0 <HAL_GPIO_Init+0x628>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d025      	beq.n	80048e4 <HAL_GPIO_Init+0x53c>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a4e      	ldr	r2, [pc, #312]	; (80049d4 <HAL_GPIO_Init+0x62c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d01f      	beq.n	80048e0 <HAL_GPIO_Init+0x538>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a4d      	ldr	r2, [pc, #308]	; (80049d8 <HAL_GPIO_Init+0x630>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d019      	beq.n	80048dc <HAL_GPIO_Init+0x534>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a4c      	ldr	r2, [pc, #304]	; (80049dc <HAL_GPIO_Init+0x634>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d013      	beq.n	80048d8 <HAL_GPIO_Init+0x530>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a4b      	ldr	r2, [pc, #300]	; (80049e0 <HAL_GPIO_Init+0x638>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00d      	beq.n	80048d4 <HAL_GPIO_Init+0x52c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a4a      	ldr	r2, [pc, #296]	; (80049e4 <HAL_GPIO_Init+0x63c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <HAL_GPIO_Init+0x528>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a49      	ldr	r2, [pc, #292]	; (80049e8 <HAL_GPIO_Init+0x640>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d101      	bne.n	80048cc <HAL_GPIO_Init+0x524>
 80048c8:	2306      	movs	r3, #6
 80048ca:	e00c      	b.n	80048e6 <HAL_GPIO_Init+0x53e>
 80048cc:	2307      	movs	r3, #7
 80048ce:	e00a      	b.n	80048e6 <HAL_GPIO_Init+0x53e>
 80048d0:	2305      	movs	r3, #5
 80048d2:	e008      	b.n	80048e6 <HAL_GPIO_Init+0x53e>
 80048d4:	2304      	movs	r3, #4
 80048d6:	e006      	b.n	80048e6 <HAL_GPIO_Init+0x53e>
 80048d8:	2303      	movs	r3, #3
 80048da:	e004      	b.n	80048e6 <HAL_GPIO_Init+0x53e>
 80048dc:	2302      	movs	r3, #2
 80048de:	e002      	b.n	80048e6 <HAL_GPIO_Init+0x53e>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <HAL_GPIO_Init+0x53e>
 80048e4:	2300      	movs	r3, #0
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	f002 0203 	and.w	r2, r2, #3
 80048ec:	0092      	lsls	r2, r2, #2
 80048ee:	4093      	lsls	r3, r2
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048f6:	4935      	ldr	r1, [pc, #212]	; (80049cc <HAL_GPIO_Init+0x624>)
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	089b      	lsrs	r3, r3, #2
 80048fc:	3302      	adds	r3, #2
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004904:	4b39      	ldr	r3, [pc, #228]	; (80049ec <HAL_GPIO_Init+0x644>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004928:	4a30      	ldr	r2, [pc, #192]	; (80049ec <HAL_GPIO_Init+0x644>)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800492e:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <HAL_GPIO_Init+0x644>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	43db      	mvns	r3, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004952:	4a26      	ldr	r2, [pc, #152]	; (80049ec <HAL_GPIO_Init+0x644>)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004958:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_GPIO_Init+0x644>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800497c:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <HAL_GPIO_Init+0x644>)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004982:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <HAL_GPIO_Init+0x644>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	43db      	mvns	r3, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4013      	ands	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049a6:	4a11      	ldr	r2, [pc, #68]	; (80049ec <HAL_GPIO_Init+0x644>)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	3301      	adds	r3, #1
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	2b0f      	cmp	r3, #15
 80049b6:	f67f ad85 	bls.w	80044c4 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	3720      	adds	r7, #32
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	0801035c 	.word	0x0801035c
 80049c8:	40023800 	.word	0x40023800
 80049cc:	40013800 	.word	0x40013800
 80049d0:	40020000 	.word	0x40020000
 80049d4:	40020400 	.word	0x40020400
 80049d8:	40020800 	.word	0x40020800
 80049dc:	40020c00 	.word	0x40020c00
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40021400 	.word	0x40021400
 80049e8:	40021800 	.word	0x40021800
 80049ec:	40013c00 	.word	0x40013c00

080049f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	807b      	strh	r3, [r7, #2]
 80049fc:	4613      	mov	r3, r2
 80049fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004a00:	887b      	ldrh	r3, [r7, #2]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d004      	beq.n	8004a10 <HAL_GPIO_WritePin+0x20>
 8004a06:	887b      	ldrh	r3, [r7, #2]
 8004a08:	0c1b      	lsrs	r3, r3, #16
 8004a0a:	041b      	lsls	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <HAL_GPIO_WritePin+0x2a>
 8004a10:	f240 119d 	movw	r1, #413	; 0x19d
 8004a14:	480e      	ldr	r0, [pc, #56]	; (8004a50 <HAL_GPIO_WritePin+0x60>)
 8004a16:	f7fe f8b4 	bl	8002b82 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004a1a:	787b      	ldrb	r3, [r7, #1]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <HAL_GPIO_WritePin+0x40>
 8004a20:	787b      	ldrb	r3, [r7, #1]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d004      	beq.n	8004a30 <HAL_GPIO_WritePin+0x40>
 8004a26:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8004a2a:	4809      	ldr	r0, [pc, #36]	; (8004a50 <HAL_GPIO_WritePin+0x60>)
 8004a2c:	f7fe f8a9 	bl	8002b82 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004a30:	787b      	ldrb	r3, [r7, #1]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a3c:	e003      	b.n	8004a46 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a3e:	887b      	ldrh	r3, [r7, #2]
 8004a40:	041a      	lsls	r2, r3, #16
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	619a      	str	r2, [r3, #24]
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	0801035c 	.word	0x0801035c

08004a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a5e:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d006      	beq.n	8004a78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a6a:	4a05      	ldr	r2, [pc, #20]	; (8004a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe f864 	bl	8002b40 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40013c00 	.word	0x40013c00

08004a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e1be      	b.n	8004e14 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a9f      	ldr	r2, [pc, #636]	; (8004d18 <HAL_I2C_Init+0x294>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_I2C_Init+0x3a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a9d      	ldr	r2, [pc, #628]	; (8004d1c <HAL_I2C_Init+0x298>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_I2C_Init+0x3a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a9c      	ldr	r2, [pc, #624]	; (8004d20 <HAL_I2C_Init+0x29c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_I2C_Init+0x3a>
 8004ab4:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004ab8:	489a      	ldr	r0, [pc, #616]	; (8004d24 <HAL_I2C_Init+0x2a0>)
 8004aba:	f7fe f862 	bl	8002b82 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d004      	beq.n	8004ad0 <HAL_I2C_Init+0x4c>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4a97      	ldr	r2, [pc, #604]	; (8004d28 <HAL_I2C_Init+0x2a4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d904      	bls.n	8004ada <HAL_I2C_Init+0x56>
 8004ad0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004ad4:	4893      	ldr	r0, [pc, #588]	; (8004d24 <HAL_I2C_Init+0x2a0>)
 8004ad6:	f7fe f854 	bl	8002b82 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_I2C_Init+0x72>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aea:	d004      	beq.n	8004af6 <HAL_I2C_Init+0x72>
 8004aec:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004af0:	488c      	ldr	r0, [pc, #560]	; (8004d24 <HAL_I2C_Init+0x2a0>)
 8004af2:	f7fe f846 	bl	8002b82 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d004      	beq.n	8004b10 <HAL_I2C_Init+0x8c>
 8004b06:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004b0a:	4886      	ldr	r0, [pc, #536]	; (8004d24 <HAL_I2C_Init+0x2a0>)
 8004b0c:	f7fe f839 	bl	8002b82 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b18:	d009      	beq.n	8004b2e <HAL_I2C_Init+0xaa>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b22:	d004      	beq.n	8004b2e <HAL_I2C_Init+0xaa>
 8004b24:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004b28:	487e      	ldr	r0, [pc, #504]	; (8004d24 <HAL_I2C_Init+0x2a0>)
 8004b2a:	f7fe f82a 	bl	8002b82 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <HAL_I2C_Init+0xc4>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d004      	beq.n	8004b48 <HAL_I2C_Init+0xc4>
 8004b3e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004b42:	4878      	ldr	r0, [pc, #480]	; (8004d24 <HAL_I2C_Init+0x2a0>)
 8004b44:	f7fe f81d 	bl	8002b82 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <HAL_I2C_Init+0xda>
 8004b54:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004b58:	4872      	ldr	r0, [pc, #456]	; (8004d24 <HAL_I2C_Init+0x2a0>)
 8004b5a:	f7fe f812 	bl	8002b82 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d008      	beq.n	8004b78 <HAL_I2C_Init+0xf4>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d004      	beq.n	8004b78 <HAL_I2C_Init+0xf4>
 8004b6e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004b72:	486c      	ldr	r0, [pc, #432]	; (8004d24 <HAL_I2C_Init+0x2a0>)
 8004b74:	f7fe f805 	bl	8002b82 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_I2C_Init+0x10e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	2b80      	cmp	r3, #128	; 0x80
 8004b86:	d004      	beq.n	8004b92 <HAL_I2C_Init+0x10e>
 8004b88:	f240 11c7 	movw	r1, #455	; 0x1c7
 8004b8c:	4865      	ldr	r0, [pc, #404]	; (8004d24 <HAL_I2C_Init+0x2a0>)
 8004b8e:	f7fd fff8 	bl	8002b82 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fe f81e 	bl	8002be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	; 0x24
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004be2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004be4:	f001 f96e 	bl	8005ec4 <HAL_RCC_GetPCLK1Freq>
 8004be8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4a4f      	ldr	r2, [pc, #316]	; (8004d2c <HAL_I2C_Init+0x2a8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d807      	bhi.n	8004c04 <HAL_I2C_Init+0x180>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a4e      	ldr	r2, [pc, #312]	; (8004d30 <HAL_I2C_Init+0x2ac>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	bf94      	ite	ls
 8004bfc:	2301      	movls	r3, #1
 8004bfe:	2300      	movhi	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	e006      	b.n	8004c12 <HAL_I2C_Init+0x18e>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a4b      	ldr	r2, [pc, #300]	; (8004d34 <HAL_I2C_Init+0x2b0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bf94      	ite	ls
 8004c0c:	2301      	movls	r3, #1
 8004c0e:	2300      	movhi	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0fc      	b.n	8004e14 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a46      	ldr	r2, [pc, #280]	; (8004d38 <HAL_I2C_Init+0x2b4>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	0c9b      	lsrs	r3, r3, #18
 8004c24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a38      	ldr	r2, [pc, #224]	; (8004d2c <HAL_I2C_Init+0x2a8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d802      	bhi.n	8004c54 <HAL_I2C_Init+0x1d0>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	3301      	adds	r3, #1
 8004c52:	e009      	b.n	8004c68 <HAL_I2C_Init+0x1e4>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	4a37      	ldr	r2, [pc, #220]	; (8004d3c <HAL_I2C_Init+0x2b8>)
 8004c60:	fba2 2303 	umull	r2, r3, r2, r3
 8004c64:	099b      	lsrs	r3, r3, #6
 8004c66:	3301      	adds	r3, #1
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	492a      	ldr	r1, [pc, #168]	; (8004d2c <HAL_I2C_Init+0x2a8>)
 8004c84:	428b      	cmp	r3, r1
 8004c86:	d819      	bhi.n	8004cbc <HAL_I2C_Init+0x238>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1e59      	subs	r1, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c96:	1c59      	adds	r1, r3, #1
 8004c98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c9c:	400b      	ands	r3, r1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_I2C_Init+0x234>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1e59      	subs	r1, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb6:	e066      	b.n	8004d86 <HAL_I2C_Init+0x302>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	e064      	b.n	8004d86 <HAL_I2C_Init+0x302>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d111      	bne.n	8004ce8 <HAL_I2C_Init+0x264>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1e58      	subs	r0, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	440b      	add	r3, r1
 8004cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	e012      	b.n	8004d0e <HAL_I2C_Init+0x28a>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	1e58      	subs	r0, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	0099      	lsls	r1, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfe:	3301      	adds	r3, #1
 8004d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d016      	beq.n	8004d40 <HAL_I2C_Init+0x2bc>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e037      	b.n	8004d86 <HAL_I2C_Init+0x302>
 8004d16:	bf00      	nop
 8004d18:	40005400 	.word	0x40005400
 8004d1c:	40005800 	.word	0x40005800
 8004d20:	40005c00 	.word	0x40005c00
 8004d24:	08010398 	.word	0x08010398
 8004d28:	00061a80 	.word	0x00061a80
 8004d2c:	000186a0 	.word	0x000186a0
 8004d30:	001e847f 	.word	0x001e847f
 8004d34:	003d08ff 	.word	0x003d08ff
 8004d38:	431bde83 	.word	0x431bde83
 8004d3c:	10624dd3 	.word	0x10624dd3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10e      	bne.n	8004d66 <HAL_I2C_Init+0x2e2>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	1e58      	subs	r0, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6859      	ldr	r1, [r3, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	440b      	add	r3, r1
 8004d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d64:	e00f      	b.n	8004d86 <HAL_I2C_Init+0x302>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1e58      	subs	r0, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6859      	ldr	r1, [r3, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	0099      	lsls	r1, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	6809      	ldr	r1, [r1, #0]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004db4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6911      	ldr	r1, [r2, #16]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	68d2      	ldr	r2, [r2, #12]
 8004dc0:	4311      	orrs	r1, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0201 	orr.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	607a      	str	r2, [r7, #4]
 8004e26:	461a      	mov	r2, r3
 8004e28:	460b      	mov	r3, r1
 8004e2a:	817b      	strh	r3, [r7, #10]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e30:	f7fe fc60 	bl	80036f4 <HAL_GetTick>
 8004e34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	f040 80e0 	bne.w	8005004 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	2319      	movs	r3, #25
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	4970      	ldr	r1, [pc, #448]	; (8005010 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 fc58 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e0d3      	b.n	8005006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_I2C_Master_Transmit+0x50>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e0cc      	b.n	8005006 <HAL_I2C_Master_Transmit+0x1ea>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d007      	beq.n	8004e92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0201 	orr.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ea0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2221      	movs	r2, #33	; 0x21
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2210      	movs	r2, #16
 8004eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	893a      	ldrh	r2, [r7, #8]
 8004ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a50      	ldr	r2, [pc, #320]	; (8005014 <HAL_I2C_Master_Transmit+0x1f8>)
 8004ed2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ed4:	8979      	ldrh	r1, [r7, #10]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	6a3a      	ldr	r2, [r7, #32]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fac2 	bl	8005464 <I2C_MasterRequestWrite>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e08d      	b.n	8005006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eea:	2300      	movs	r3, #0
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f00:	e066      	b.n	8004fd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	6a39      	ldr	r1, [r7, #32]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fcd2 	bl	80058b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00d      	beq.n	8004f2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d107      	bne.n	8004f2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e06b      	b.n	8005006 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	781a      	ldrb	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d11b      	bne.n	8004fa4 <HAL_I2C_Master_Transmit+0x188>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d017      	beq.n	8004fa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	6a39      	ldr	r1, [r7, #32]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 fcc2 	bl	8005932 <I2C_WaitOnBTFFlagUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00d      	beq.n	8004fd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d107      	bne.n	8004fcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e01a      	b.n	8005006 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d194      	bne.n	8004f02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	e000      	b.n	8005006 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005004:	2302      	movs	r3, #2
  }
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	00100002 	.word	0x00100002
 8005014:	ffff0000 	.word	0xffff0000

08005018 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08c      	sub	sp, #48	; 0x30
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	461a      	mov	r2, r3
 8005024:	460b      	mov	r3, r1
 8005026:	817b      	strh	r3, [r7, #10]
 8005028:	4613      	mov	r3, r2
 800502a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800502c:	f7fe fb62 	bl	80036f4 <HAL_GetTick>
 8005030:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b20      	cmp	r3, #32
 800503c:	f040 820b 	bne.w	8005456 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	2319      	movs	r3, #25
 8005046:	2201      	movs	r2, #1
 8005048:	497c      	ldr	r1, [pc, #496]	; (800523c <HAL_I2C_Master_Receive+0x224>)
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 fb5a 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005056:	2302      	movs	r3, #2
 8005058:	e1fe      	b.n	8005458 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_I2C_Master_Receive+0x50>
 8005064:	2302      	movs	r3, #2
 8005066:	e1f7      	b.n	8005458 <HAL_I2C_Master_Receive+0x440>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b01      	cmp	r3, #1
 800507c:	d007      	beq.n	800508e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0201 	orr.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800509c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2222      	movs	r2, #34	; 0x22
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2210      	movs	r2, #16
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	893a      	ldrh	r2, [r7, #8]
 80050be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4a5c      	ldr	r2, [pc, #368]	; (8005240 <HAL_I2C_Master_Receive+0x228>)
 80050ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80050d0:	8979      	ldrh	r1, [r7, #10]
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fa46 	bl	8005568 <I2C_MasterRequestRead>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e1b8      	b.n	8005458 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d113      	bne.n	8005116 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ee:	2300      	movs	r3, #0
 80050f0:	623b      	str	r3, [r7, #32]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	623b      	str	r3, [r7, #32]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	623b      	str	r3, [r7, #32]
 8005102:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	e18c      	b.n	8005430 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511a:	2b01      	cmp	r3, #1
 800511c:	d11b      	bne.n	8005156 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	e16c      	b.n	8005430 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515a:	2b02      	cmp	r3, #2
 800515c:	d11b      	bne.n	8005196 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800517c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517e:	2300      	movs	r3, #0
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	e14c      	b.n	8005430 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051bc:	e138      	b.n	8005430 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	f200 80f1 	bhi.w	80053aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d123      	bne.n	8005218 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fbed 	bl	80059b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e139      	b.n	8005458 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005216:	e10b      	b.n	8005430 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	2b02      	cmp	r3, #2
 800521e:	d14e      	bne.n	80052be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	2200      	movs	r2, #0
 8005228:	4906      	ldr	r1, [pc, #24]	; (8005244 <HAL_I2C_Master_Receive+0x22c>)
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fa6a 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d008      	beq.n	8005248 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e10e      	b.n	8005458 <HAL_I2C_Master_Receive+0x440>
 800523a:	bf00      	nop
 800523c:	00100002 	.word	0x00100002
 8005240:	ffff0000 	.word	0xffff0000
 8005244:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052bc:	e0b8      	b.n	8005430 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	2200      	movs	r2, #0
 80052c6:	4966      	ldr	r1, [pc, #408]	; (8005460 <HAL_I2C_Master_Receive+0x448>)
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 fa1b 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0bf      	b.n	8005458 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	2200      	movs	r2, #0
 8005322:	494f      	ldr	r1, [pc, #316]	; (8005460 <HAL_I2C_Master_Receive+0x448>)
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f9ed 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e091      	b.n	8005458 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053a8:	e042      	b.n	8005430 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 fb00 	bl	80059b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e04c      	b.n	8005458 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d118      	bne.n	8005430 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005434:	2b00      	cmp	r3, #0
 8005436:	f47f aec2 	bne.w	80051be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	e000      	b.n	8005458 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005456:	2302      	movs	r3, #2
  }
}
 8005458:	4618      	mov	r0, r3
 800545a:	3728      	adds	r7, #40	; 0x28
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	00010004 	.word	0x00010004

08005464 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af02      	add	r7, sp, #8
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	460b      	mov	r3, r1
 8005472:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b08      	cmp	r3, #8
 800547e:	d006      	beq.n	800548e <I2C_MasterRequestWrite+0x2a>
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d003      	beq.n	800548e <I2C_MasterRequestWrite+0x2a>
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800548c:	d108      	bne.n	80054a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e00b      	b.n	80054b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	2b12      	cmp	r3, #18
 80054a6:	d107      	bne.n	80054b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f91d 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00d      	beq.n	80054ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054de:	d103      	bne.n	80054e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e035      	b.n	8005558 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054f4:	d108      	bne.n	8005508 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054f6:	897b      	ldrh	r3, [r7, #10]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005504:	611a      	str	r2, [r3, #16]
 8005506:	e01b      	b.n	8005540 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005508:	897b      	ldrh	r3, [r7, #10]
 800550a:	11db      	asrs	r3, r3, #7
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f003 0306 	and.w	r3, r3, #6
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f063 030f 	orn	r3, r3, #15
 8005518:	b2da      	uxtb	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	490e      	ldr	r1, [pc, #56]	; (8005560 <I2C_MasterRequestWrite+0xfc>)
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f943 	bl	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e010      	b.n	8005558 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005536:	897b      	ldrh	r3, [r7, #10]
 8005538:	b2da      	uxtb	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	4907      	ldr	r1, [pc, #28]	; (8005564 <I2C_MasterRequestWrite+0x100>)
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f933 	bl	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	00010008 	.word	0x00010008
 8005564:	00010002 	.word	0x00010002

08005568 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	607a      	str	r2, [r7, #4]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	460b      	mov	r3, r1
 8005576:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800558c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b08      	cmp	r3, #8
 8005592:	d006      	beq.n	80055a2 <I2C_MasterRequestRead+0x3a>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d003      	beq.n	80055a2 <I2C_MasterRequestRead+0x3a>
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055a0:	d108      	bne.n	80055b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e00b      	b.n	80055cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	2b11      	cmp	r3, #17
 80055ba:	d107      	bne.n	80055cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f893 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00d      	beq.n	8005600 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f2:	d103      	bne.n	80055fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e079      	b.n	80056f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005608:	d108      	bne.n	800561c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800560a:	897b      	ldrh	r3, [r7, #10]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f043 0301 	orr.w	r3, r3, #1
 8005612:	b2da      	uxtb	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	611a      	str	r2, [r3, #16]
 800561a:	e05f      	b.n	80056dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800561c:	897b      	ldrh	r3, [r7, #10]
 800561e:	11db      	asrs	r3, r3, #7
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f003 0306 	and.w	r3, r3, #6
 8005626:	b2db      	uxtb	r3, r3
 8005628:	f063 030f 	orn	r3, r3, #15
 800562c:	b2da      	uxtb	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	4930      	ldr	r1, [pc, #192]	; (80056fc <I2C_MasterRequestRead+0x194>)
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f8b9 	bl	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e054      	b.n	80056f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800564a:	897b      	ldrh	r3, [r7, #10]
 800564c:	b2da      	uxtb	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4929      	ldr	r1, [pc, #164]	; (8005700 <I2C_MasterRequestRead+0x198>)
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f8a9 	bl	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e044      	b.n	80056f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566a:	2300      	movs	r3, #0
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800568e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f831 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00d      	beq.n	80056c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b6:	d103      	bne.n	80056c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056be:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e017      	b.n	80056f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80056c4:	897b      	ldrh	r3, [r7, #10]
 80056c6:	11db      	asrs	r3, r3, #7
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	f003 0306 	and.w	r3, r3, #6
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	f063 030e 	orn	r3, r3, #14
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	4907      	ldr	r1, [pc, #28]	; (8005700 <I2C_MasterRequestRead+0x198>)
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 f865 	bl	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	00010008 	.word	0x00010008
 8005700:	00010002 	.word	0x00010002

08005704 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	4613      	mov	r3, r2
 8005712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005714:	e025      	b.n	8005762 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d021      	beq.n	8005762 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571e:	f7fd ffe9 	bl	80036f4 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d302      	bcc.n	8005734 <I2C_WaitOnFlagUntilTimeout+0x30>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d116      	bne.n	8005762 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	f043 0220 	orr.w	r2, r3, #32
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e023      	b.n	80057aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	0c1b      	lsrs	r3, r3, #16
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	d10d      	bne.n	8005788 <I2C_WaitOnFlagUntilTimeout+0x84>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	43da      	mvns	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4013      	ands	r3, r2
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	bf0c      	ite	eq
 800577e:	2301      	moveq	r3, #1
 8005780:	2300      	movne	r3, #0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	e00c      	b.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	43da      	mvns	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4013      	ands	r3, r2
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	bf0c      	ite	eq
 800579a:	2301      	moveq	r3, #1
 800579c:	2300      	movne	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d0b6      	beq.n	8005716 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
 80057be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057c0:	e051      	b.n	8005866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d0:	d123      	bne.n	800581a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f043 0204 	orr.w	r2, r3, #4
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e046      	b.n	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d021      	beq.n	8005866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005822:	f7fd ff67 	bl	80036f4 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	429a      	cmp	r2, r3
 8005830:	d302      	bcc.n	8005838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d116      	bne.n	8005866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f043 0220 	orr.w	r2, r3, #32
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e020      	b.n	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	0c1b      	lsrs	r3, r3, #16
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d10c      	bne.n	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	43da      	mvns	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4013      	ands	r3, r2
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	bf14      	ite	ne
 8005882:	2301      	movne	r3, #1
 8005884:	2300      	moveq	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	e00b      	b.n	80058a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	43da      	mvns	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	4013      	ands	r3, r2
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	bf14      	ite	ne
 800589c:	2301      	movne	r3, #1
 800589e:	2300      	moveq	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d18d      	bne.n	80057c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058bc:	e02d      	b.n	800591a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f8ce 	bl	8005a60 <I2C_IsAcknowledgeFailed>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e02d      	b.n	800592a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d4:	d021      	beq.n	800591a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d6:	f7fd ff0d 	bl	80036f4 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d302      	bcc.n	80058ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d116      	bne.n	800591a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f043 0220 	orr.w	r2, r3, #32
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e007      	b.n	800592a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005924:	2b80      	cmp	r3, #128	; 0x80
 8005926:	d1ca      	bne.n	80058be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800593e:	e02d      	b.n	800599c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f88d 	bl	8005a60 <I2C_IsAcknowledgeFailed>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e02d      	b.n	80059ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005956:	d021      	beq.n	800599c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005958:	f7fd fecc 	bl	80036f4 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	429a      	cmp	r2, r3
 8005966:	d302      	bcc.n	800596e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d116      	bne.n	800599c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e007      	b.n	80059ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d1ca      	bne.n	8005940 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059c0:	e042      	b.n	8005a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d119      	bne.n	8005a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0210 	mvn.w	r2, #16
 80059d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e029      	b.n	8005a58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a04:	f7fd fe76 	bl	80036f4 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d302      	bcc.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d116      	bne.n	8005a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	f043 0220 	orr.w	r2, r3, #32
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e007      	b.n	8005a58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d1b5      	bne.n	80059c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a76:	d11b      	bne.n	8005ab0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	f043 0204 	orr.w	r2, r3, #4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005aca:	2300      	movs	r3, #0
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	4b20      	ldr	r3, [pc, #128]	; (8005b50 <HAL_PWREx_EnableOverDrive+0x90>)
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <HAL_PWREx_EnableOverDrive+0x90>)
 8005ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8005ada:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <HAL_PWREx_EnableOverDrive+0x90>)
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005ae6:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <HAL_PWREx_EnableOverDrive+0x94>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aec:	f7fd fe02 	bl	80036f4 <HAL_GetTick>
 8005af0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005af2:	e009      	b.n	8005b08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005af4:	f7fd fdfe 	bl	80036f4 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b02:	d901      	bls.n	8005b08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e01f      	b.n	8005b48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b08:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b14:	d1ee      	bne.n	8005af4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b16:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b1c:	f7fd fdea 	bl	80036f4 <HAL_GetTick>
 8005b20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b22:	e009      	b.n	8005b38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b24:	f7fd fde6 	bl	80036f4 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b32:	d901      	bls.n	8005b38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e007      	b.n	8005b48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b38:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b44:	d1ee      	bne.n	8005b24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40023800 	.word	0x40023800
 8005b54:	420e0040 	.word	0x420e0040
 8005b58:	40007000 	.word	0x40007000
 8005b5c:	420e0044 	.word	0x420e0044

08005b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e18c      	b.n	8005e8e <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x24>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b0f      	cmp	r3, #15
 8005b82:	d904      	bls.n	8005b8e <HAL_RCC_ClockConfig+0x2e>
 8005b84:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8005b88:	4887      	ldr	r0, [pc, #540]	; (8005da8 <HAL_RCC_ClockConfig+0x248>)
 8005b8a:	f7fc fffa 	bl	8002b82 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d031      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d02e      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d02b      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d028      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d025      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d022      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b06      	cmp	r3, #6
 8005bb6:	d01f      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b07      	cmp	r3, #7
 8005bbc:	d01c      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d019      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b09      	cmp	r3, #9
 8005bc8:	d016      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b0a      	cmp	r3, #10
 8005bce:	d013      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b0b      	cmp	r3, #11
 8005bd4:	d010      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b0c      	cmp	r3, #12
 8005bda:	d00d      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b0d      	cmp	r3, #13
 8005be0:	d00a      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b0e      	cmp	r3, #14
 8005be6:	d007      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b0f      	cmp	r3, #15
 8005bec:	d004      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x98>
 8005bee:	f240 215d 	movw	r1, #605	; 0x25d
 8005bf2:	486d      	ldr	r0, [pc, #436]	; (8005da8 <HAL_RCC_ClockConfig+0x248>)
 8005bf4:	f7fc ffc5 	bl	8002b82 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf8:	4b6c      	ldr	r3, [pc, #432]	; (8005dac <HAL_RCC_ClockConfig+0x24c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d90c      	bls.n	8005c20 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c06:	4b69      	ldr	r3, [pc, #420]	; (8005dac <HAL_RCC_ClockConfig+0x24c>)
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0e:	4b67      	ldr	r3, [pc, #412]	; (8005dac <HAL_RCC_ClockConfig+0x24c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e136      	b.n	8005e8e <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d049      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c38:	4b5d      	ldr	r3, [pc, #372]	; (8005db0 <HAL_RCC_ClockConfig+0x250>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4a5c      	ldr	r2, [pc, #368]	; (8005db0 <HAL_RCC_ClockConfig+0x250>)
 8005c3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c50:	4b57      	ldr	r3, [pc, #348]	; (8005db0 <HAL_RCC_ClockConfig+0x250>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4a56      	ldr	r2, [pc, #344]	; (8005db0 <HAL_RCC_ClockConfig+0x250>)
 8005c56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d024      	beq.n	8005cae <HAL_RCC_ClockConfig+0x14e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b80      	cmp	r3, #128	; 0x80
 8005c6a:	d020      	beq.n	8005cae <HAL_RCC_ClockConfig+0x14e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b90      	cmp	r3, #144	; 0x90
 8005c72:	d01c      	beq.n	8005cae <HAL_RCC_ClockConfig+0x14e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2ba0      	cmp	r3, #160	; 0xa0
 8005c7a:	d018      	beq.n	8005cae <HAL_RCC_ClockConfig+0x14e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2bb0      	cmp	r3, #176	; 0xb0
 8005c82:	d014      	beq.n	8005cae <HAL_RCC_ClockConfig+0x14e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2bc0      	cmp	r3, #192	; 0xc0
 8005c8a:	d010      	beq.n	8005cae <HAL_RCC_ClockConfig+0x14e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2bd0      	cmp	r3, #208	; 0xd0
 8005c92:	d00c      	beq.n	8005cae <HAL_RCC_ClockConfig+0x14e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2be0      	cmp	r3, #224	; 0xe0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCC_ClockConfig+0x14e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2bf0      	cmp	r3, #240	; 0xf0
 8005ca2:	d004      	beq.n	8005cae <HAL_RCC_ClockConfig+0x14e>
 8005ca4:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005ca8:	483f      	ldr	r0, [pc, #252]	; (8005da8 <HAL_RCC_ClockConfig+0x248>)
 8005caa:	f7fc ff6a 	bl	8002b82 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cae:	4b40      	ldr	r3, [pc, #256]	; (8005db0 <HAL_RCC_ClockConfig+0x250>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	493d      	ldr	r1, [pc, #244]	; (8005db0 <HAL_RCC_ClockConfig+0x250>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d059      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d010      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x196>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d00c      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x196>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d008      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x196>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d004      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x196>
 8005cec:	f240 2187 	movw	r1, #647	; 0x287
 8005cf0:	482d      	ldr	r0, [pc, #180]	; (8005da8 <HAL_RCC_ClockConfig+0x248>)
 8005cf2:	f7fc ff46 	bl	8002b82 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d107      	bne.n	8005d0e <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfe:	4b2c      	ldr	r3, [pc, #176]	; (8005db0 <HAL_RCC_ClockConfig+0x250>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d119      	bne.n	8005d3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e0bf      	b.n	8005e8e <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d003      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d107      	bne.n	8005d2e <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d1e:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <HAL_RCC_ClockConfig+0x250>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d109      	bne.n	8005d3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e0af      	b.n	8005e8e <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d2e:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <HAL_RCC_ClockConfig+0x250>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e0a7      	b.n	8005e8e <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d3e:	4b1c      	ldr	r3, [pc, #112]	; (8005db0 <HAL_RCC_ClockConfig+0x250>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f023 0203 	bic.w	r2, r3, #3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	4919      	ldr	r1, [pc, #100]	; (8005db0 <HAL_RCC_ClockConfig+0x250>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d50:	f7fd fcd0 	bl	80036f4 <HAL_GetTick>
 8005d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d56:	e00a      	b.n	8005d6e <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d58:	f7fd fccc 	bl	80036f4 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e08f      	b.n	8005e8e <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6e:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <HAL_RCC_ClockConfig+0x250>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 020c 	and.w	r2, r3, #12
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d1eb      	bne.n	8005d58 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <HAL_RCC_ClockConfig+0x24c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d212      	bcs.n	8005db4 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <HAL_RCC_ClockConfig+0x24c>)
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_RCC_ClockConfig+0x24c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d007      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e072      	b.n	8005e8e <HAL_RCC_ClockConfig+0x32e>
 8005da8:	080103d0 	.word	0x080103d0
 8005dac:	40023c00 	.word	0x40023c00
 8005db0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d025      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d018      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x29a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd0:	d013      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x29a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005dda:	d00e      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x29a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005de4:	d009      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x29a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005dee:	d004      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x29a>
 8005df0:	f240 21c5 	movw	r1, #709	; 0x2c5
 8005df4:	4828      	ldr	r0, [pc, #160]	; (8005e98 <HAL_RCC_ClockConfig+0x338>)
 8005df6:	f7fc fec4 	bl	8002b82 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dfa:	4b28      	ldr	r3, [pc, #160]	; (8005e9c <HAL_RCC_ClockConfig+0x33c>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	4925      	ldr	r1, [pc, #148]	; (8005e9c <HAL_RCC_ClockConfig+0x33c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d026      	beq.n	8005e66 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d018      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x2f2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e28:	d013      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x2f2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e32:	d00e      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x2f2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005e3c:	d009      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x2f2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005e46:	d004      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x2f2>
 8005e48:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8005e4c:	4812      	ldr	r0, [pc, #72]	; (8005e98 <HAL_RCC_ClockConfig+0x338>)
 8005e4e:	f7fc fe98 	bl	8002b82 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e52:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <HAL_RCC_ClockConfig+0x33c>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	490e      	ldr	r1, [pc, #56]	; (8005e9c <HAL_RCC_ClockConfig+0x33c>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e66:	f000 f855 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <HAL_RCC_ClockConfig+0x33c>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	091b      	lsrs	r3, r3, #4
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	490a      	ldr	r1, [pc, #40]	; (8005ea0 <HAL_RCC_ClockConfig+0x340>)
 8005e78:	5ccb      	ldrb	r3, [r1, r3]
 8005e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7e:	4a09      	ldr	r2, [pc, #36]	; (8005ea4 <HAL_RCC_ClockConfig+0x344>)
 8005e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e82:	4b09      	ldr	r3, [pc, #36]	; (8005ea8 <HAL_RCC_ClockConfig+0x348>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fd fbf0 	bl	800366c <HAL_InitTick>

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	080103d0 	.word	0x080103d0
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	08010588 	.word	0x08010588
 8005ea4:	2000014c 	.word	0x2000014c
 8005ea8:	20000150 	.word	0x20000150

08005eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eb0:	4b03      	ldr	r3, [pc, #12]	; (8005ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	2000014c 	.word	0x2000014c

08005ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ec8:	f7ff fff0 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	0a9b      	lsrs	r3, r3, #10
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	4903      	ldr	r1, [pc, #12]	; (8005ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eda:	5ccb      	ldrb	r3, [r1, r3]
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	08010598 	.word	0x08010598

08005eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ef0:	f7ff ffdc 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	0b5b      	lsrs	r3, r3, #13
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	4903      	ldr	r1, [pc, #12]	; (8005f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f02:	5ccb      	ldrb	r3, [r1, r3]
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	08010598 	.word	0x08010598

08005f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f18:	b088      	sub	sp, #32
 8005f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f30:	4bce      	ldr	r3, [pc, #824]	; (800626c <HAL_RCC_GetSysClockFreq+0x358>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 030c 	and.w	r3, r3, #12
 8005f38:	2b0c      	cmp	r3, #12
 8005f3a:	f200 818d 	bhi.w	8006258 <HAL_RCC_GetSysClockFreq+0x344>
 8005f3e:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <HAL_RCC_GetSysClockFreq+0x30>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005f79 	.word	0x08005f79
 8005f48:	08006259 	.word	0x08006259
 8005f4c:	08006259 	.word	0x08006259
 8005f50:	08006259 	.word	0x08006259
 8005f54:	08005f7f 	.word	0x08005f7f
 8005f58:	08006259 	.word	0x08006259
 8005f5c:	08006259 	.word	0x08006259
 8005f60:	08006259 	.word	0x08006259
 8005f64:	08005f85 	.word	0x08005f85
 8005f68:	08006259 	.word	0x08006259
 8005f6c:	08006259 	.word	0x08006259
 8005f70:	08006259 	.word	0x08006259
 8005f74:	080060f9 	.word	0x080060f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f78:	4bbd      	ldr	r3, [pc, #756]	; (8006270 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005f7a:	61bb      	str	r3, [r7, #24]
       break;
 8005f7c:	e16f      	b.n	800625e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f7e:	4bbd      	ldr	r3, [pc, #756]	; (8006274 <HAL_RCC_GetSysClockFreq+0x360>)
 8005f80:	61bb      	str	r3, [r7, #24]
      break;
 8005f82:	e16c      	b.n	800625e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f84:	4bb9      	ldr	r3, [pc, #740]	; (800626c <HAL_RCC_GetSysClockFreq+0x358>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f8c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f8e:	4bb7      	ldr	r3, [pc, #732]	; (800626c <HAL_RCC_GetSysClockFreq+0x358>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d053      	beq.n	8006042 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f9a:	4bb4      	ldr	r3, [pc, #720]	; (800626c <HAL_RCC_GetSysClockFreq+0x358>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	099b      	lsrs	r3, r3, #6
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005faa:	f04f 0100 	mov.w	r1, #0
 8005fae:	ea02 0400 	and.w	r4, r2, r0
 8005fb2:	603c      	str	r4, [r7, #0]
 8005fb4:	400b      	ands	r3, r1
 8005fb6:	607b      	str	r3, [r7, #4]
 8005fb8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	014b      	lsls	r3, r1, #5
 8005fca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005fce:	0142      	lsls	r2, r0, #5
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4623      	mov	r3, r4
 8005fd6:	1ac0      	subs	r0, r0, r3
 8005fd8:	462b      	mov	r3, r5
 8005fda:	eb61 0103 	sbc.w	r1, r1, r3
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	018b      	lsls	r3, r1, #6
 8005fe8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005fec:	0182      	lsls	r2, r0, #6
 8005fee:	1a12      	subs	r2, r2, r0
 8005ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8005ff4:	f04f 0000 	mov.w	r0, #0
 8005ff8:	f04f 0100 	mov.w	r1, #0
 8005ffc:	00d9      	lsls	r1, r3, #3
 8005ffe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006002:	00d0      	lsls	r0, r2, #3
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4621      	mov	r1, r4
 800600a:	1852      	adds	r2, r2, r1
 800600c:	4629      	mov	r1, r5
 800600e:	eb43 0101 	adc.w	r1, r3, r1
 8006012:	460b      	mov	r3, r1
 8006014:	f04f 0000 	mov.w	r0, #0
 8006018:	f04f 0100 	mov.w	r1, #0
 800601c:	0259      	lsls	r1, r3, #9
 800601e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006022:	0250      	lsls	r0, r2, #9
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4610      	mov	r0, r2
 800602a:	4619      	mov	r1, r3
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	461a      	mov	r2, r3
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	f7fa fd84 	bl	8000b40 <__aeabi_uldivmod>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4613      	mov	r3, r2
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	e04c      	b.n	80060dc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006042:	4b8a      	ldr	r3, [pc, #552]	; (800626c <HAL_RCC_GetSysClockFreq+0x358>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	099b      	lsrs	r3, r3, #6
 8006048:	461a      	mov	r2, r3
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006052:	f04f 0100 	mov.w	r1, #0
 8006056:	ea02 0a00 	and.w	sl, r2, r0
 800605a:	ea03 0b01 	and.w	fp, r3, r1
 800605e:	4650      	mov	r0, sl
 8006060:	4659      	mov	r1, fp
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	014b      	lsls	r3, r1, #5
 800606c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006070:	0142      	lsls	r2, r0, #5
 8006072:	4610      	mov	r0, r2
 8006074:	4619      	mov	r1, r3
 8006076:	ebb0 000a 	subs.w	r0, r0, sl
 800607a:	eb61 010b 	sbc.w	r1, r1, fp
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	018b      	lsls	r3, r1, #6
 8006088:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800608c:	0182      	lsls	r2, r0, #6
 800608e:	1a12      	subs	r2, r2, r0
 8006090:	eb63 0301 	sbc.w	r3, r3, r1
 8006094:	f04f 0000 	mov.w	r0, #0
 8006098:	f04f 0100 	mov.w	r1, #0
 800609c:	00d9      	lsls	r1, r3, #3
 800609e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060a2:	00d0      	lsls	r0, r2, #3
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	eb12 020a 	adds.w	r2, r2, sl
 80060ac:	eb43 030b 	adc.w	r3, r3, fp
 80060b0:	f04f 0000 	mov.w	r0, #0
 80060b4:	f04f 0100 	mov.w	r1, #0
 80060b8:	0299      	lsls	r1, r3, #10
 80060ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80060be:	0290      	lsls	r0, r2, #10
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4610      	mov	r0, r2
 80060c6:	4619      	mov	r1, r3
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	461a      	mov	r2, r3
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	f7fa fd36 	bl	8000b40 <__aeabi_uldivmod>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4613      	mov	r3, r2
 80060da:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060dc:	4b63      	ldr	r3, [pc, #396]	; (800626c <HAL_RCC_GetSysClockFreq+0x358>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	0c1b      	lsrs	r3, r3, #16
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	3301      	adds	r3, #1
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	61bb      	str	r3, [r7, #24]
      break;
 80060f6:	e0b2      	b.n	800625e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060f8:	4b5c      	ldr	r3, [pc, #368]	; (800626c <HAL_RCC_GetSysClockFreq+0x358>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006100:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006102:	4b5a      	ldr	r3, [pc, #360]	; (800626c <HAL_RCC_GetSysClockFreq+0x358>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d04d      	beq.n	80061aa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800610e:	4b57      	ldr	r3, [pc, #348]	; (800626c <HAL_RCC_GetSysClockFreq+0x358>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	099b      	lsrs	r3, r3, #6
 8006114:	461a      	mov	r2, r3
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800611e:	f04f 0100 	mov.w	r1, #0
 8006122:	ea02 0800 	and.w	r8, r2, r0
 8006126:	ea03 0901 	and.w	r9, r3, r1
 800612a:	4640      	mov	r0, r8
 800612c:	4649      	mov	r1, r9
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	f04f 0300 	mov.w	r3, #0
 8006136:	014b      	lsls	r3, r1, #5
 8006138:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800613c:	0142      	lsls	r2, r0, #5
 800613e:	4610      	mov	r0, r2
 8006140:	4619      	mov	r1, r3
 8006142:	ebb0 0008 	subs.w	r0, r0, r8
 8006146:	eb61 0109 	sbc.w	r1, r1, r9
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	018b      	lsls	r3, r1, #6
 8006154:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006158:	0182      	lsls	r2, r0, #6
 800615a:	1a12      	subs	r2, r2, r0
 800615c:	eb63 0301 	sbc.w	r3, r3, r1
 8006160:	f04f 0000 	mov.w	r0, #0
 8006164:	f04f 0100 	mov.w	r1, #0
 8006168:	00d9      	lsls	r1, r3, #3
 800616a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800616e:	00d0      	lsls	r0, r2, #3
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	eb12 0208 	adds.w	r2, r2, r8
 8006178:	eb43 0309 	adc.w	r3, r3, r9
 800617c:	f04f 0000 	mov.w	r0, #0
 8006180:	f04f 0100 	mov.w	r1, #0
 8006184:	0259      	lsls	r1, r3, #9
 8006186:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800618a:	0250      	lsls	r0, r2, #9
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4610      	mov	r0, r2
 8006192:	4619      	mov	r1, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	461a      	mov	r2, r3
 8006198:	f04f 0300 	mov.w	r3, #0
 800619c:	f7fa fcd0 	bl	8000b40 <__aeabi_uldivmod>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4613      	mov	r3, r2
 80061a6:	61fb      	str	r3, [r7, #28]
 80061a8:	e04a      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061aa:	4b30      	ldr	r3, [pc, #192]	; (800626c <HAL_RCC_GetSysClockFreq+0x358>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	099b      	lsrs	r3, r3, #6
 80061b0:	461a      	mov	r2, r3
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061ba:	f04f 0100 	mov.w	r1, #0
 80061be:	ea02 0400 	and.w	r4, r2, r0
 80061c2:	ea03 0501 	and.w	r5, r3, r1
 80061c6:	4620      	mov	r0, r4
 80061c8:	4629      	mov	r1, r5
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	014b      	lsls	r3, r1, #5
 80061d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061d8:	0142      	lsls	r2, r0, #5
 80061da:	4610      	mov	r0, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	1b00      	subs	r0, r0, r4
 80061e0:	eb61 0105 	sbc.w	r1, r1, r5
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	018b      	lsls	r3, r1, #6
 80061ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061f2:	0182      	lsls	r2, r0, #6
 80061f4:	1a12      	subs	r2, r2, r0
 80061f6:	eb63 0301 	sbc.w	r3, r3, r1
 80061fa:	f04f 0000 	mov.w	r0, #0
 80061fe:	f04f 0100 	mov.w	r1, #0
 8006202:	00d9      	lsls	r1, r3, #3
 8006204:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006208:	00d0      	lsls	r0, r2, #3
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	1912      	adds	r2, r2, r4
 8006210:	eb45 0303 	adc.w	r3, r5, r3
 8006214:	f04f 0000 	mov.w	r0, #0
 8006218:	f04f 0100 	mov.w	r1, #0
 800621c:	0299      	lsls	r1, r3, #10
 800621e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006222:	0290      	lsls	r0, r2, #10
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4610      	mov	r0, r2
 800622a:	4619      	mov	r1, r3
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	461a      	mov	r2, r3
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	f7fa fc84 	bl	8000b40 <__aeabi_uldivmod>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4613      	mov	r3, r2
 800623e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006240:	4b0a      	ldr	r3, [pc, #40]	; (800626c <HAL_RCC_GetSysClockFreq+0x358>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	0f1b      	lsrs	r3, r3, #28
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	fbb2 f3f3 	udiv	r3, r2, r3
 8006254:	61bb      	str	r3, [r7, #24]
      break;
 8006256:	e002      	b.n	800625e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <HAL_RCC_GetSysClockFreq+0x35c>)
 800625a:	61bb      	str	r3, [r7, #24]
      break;
 800625c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800625e:	69bb      	ldr	r3, [r7, #24]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3720      	adds	r7, #32
 8006264:	46bd      	mov	sp, r7
 8006266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800626a:	bf00      	nop
 800626c:	40023800 	.word	0x40023800
 8006270:	00f42400 	.word	0x00f42400
 8006274:	007a1200 	.word	0x007a1200

08006278 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e34b      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b0f      	cmp	r3, #15
 8006290:	d904      	bls.n	800629c <HAL_RCC_OscConfig+0x24>
 8006292:	f640 5112 	movw	r1, #3346	; 0xd12
 8006296:	48a5      	ldr	r0, [pc, #660]	; (800652c <HAL_RCC_OscConfig+0x2b4>)
 8006298:	f7fc fc73 	bl	8002b82 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8096 	beq.w	80063d6 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00e      	beq.n	80062d0 <HAL_RCC_OscConfig+0x58>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ba:	d009      	beq.n	80062d0 <HAL_RCC_OscConfig+0x58>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062c4:	d004      	beq.n	80062d0 <HAL_RCC_OscConfig+0x58>
 80062c6:	f640 5117 	movw	r1, #3351	; 0xd17
 80062ca:	4898      	ldr	r0, [pc, #608]	; (800652c <HAL_RCC_OscConfig+0x2b4>)
 80062cc:	f7fc fc59 	bl	8002b82 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062d0:	4b97      	ldr	r3, [pc, #604]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 030c 	and.w	r3, r3, #12
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d019      	beq.n	8006310 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062dc:	4b94      	ldr	r3, [pc, #592]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d106      	bne.n	80062f6 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062e8:	4b91      	ldr	r3, [pc, #580]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062f4:	d00c      	beq.n	8006310 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062f6:	4b8e      	ldr	r3, [pc, #568]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062fe:	2b0c      	cmp	r3, #12
 8006300:	d112      	bne.n	8006328 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006302:	4b8b      	ldr	r3, [pc, #556]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800630a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800630e:	d10b      	bne.n	8006328 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006310:	4b87      	ldr	r3, [pc, #540]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d05b      	beq.n	80063d4 <HAL_RCC_OscConfig+0x15c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d157      	bne.n	80063d4 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e2fc      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006330:	d106      	bne.n	8006340 <HAL_RCC_OscConfig+0xc8>
 8006332:	4b7f      	ldr	r3, [pc, #508]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a7e      	ldr	r2, [pc, #504]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e01d      	b.n	800637c <HAL_RCC_OscConfig+0x104>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006348:	d10c      	bne.n	8006364 <HAL_RCC_OscConfig+0xec>
 800634a:	4b79      	ldr	r3, [pc, #484]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a78      	ldr	r2, [pc, #480]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	4b76      	ldr	r3, [pc, #472]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a75      	ldr	r2, [pc, #468]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 800635c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	e00b      	b.n	800637c <HAL_RCC_OscConfig+0x104>
 8006364:	4b72      	ldr	r3, [pc, #456]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a71      	ldr	r2, [pc, #452]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 800636a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	4b6f      	ldr	r3, [pc, #444]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a6e      	ldr	r2, [pc, #440]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800637a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d013      	beq.n	80063ac <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fd f9b6 	bl	80036f4 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800638c:	f7fd f9b2 	bl	80036f4 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b64      	cmp	r3, #100	; 0x64
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e2c1      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639e:	4b64      	ldr	r3, [pc, #400]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f0      	beq.n	800638c <HAL_RCC_OscConfig+0x114>
 80063aa:	e014      	b.n	80063d6 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7fd f9a2 	bl	80036f4 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063b4:	f7fd f99e 	bl	80036f4 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b64      	cmp	r3, #100	; 0x64
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e2ad      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063c6:	4b5a      	ldr	r3, [pc, #360]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x13c>
 80063d2:	e000      	b.n	80063d6 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8086 	beq.w	80064f0 <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <HAL_RCC_OscConfig+0x186>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d004      	beq.n	80063fe <HAL_RCC_OscConfig+0x186>
 80063f4:	f640 514f 	movw	r1, #3407	; 0xd4f
 80063f8:	484c      	ldr	r0, [pc, #304]	; (800652c <HAL_RCC_OscConfig+0x2b4>)
 80063fa:	f7fc fbc2 	bl	8002b82 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b1f      	cmp	r3, #31
 8006404:	d904      	bls.n	8006410 <HAL_RCC_OscConfig+0x198>
 8006406:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 800640a:	4848      	ldr	r0, [pc, #288]	; (800652c <HAL_RCC_OscConfig+0x2b4>)
 800640c:	f7fc fbb9 	bl	8002b82 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006410:	4b47      	ldr	r3, [pc, #284]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 030c 	and.w	r3, r3, #12
 8006418:	2b00      	cmp	r3, #0
 800641a:	d017      	beq.n	800644c <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800641c:	4b44      	ldr	r3, [pc, #272]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006424:	2b08      	cmp	r3, #8
 8006426:	d105      	bne.n	8006434 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006428:	4b41      	ldr	r3, [pc, #260]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006434:	4b3e      	ldr	r3, [pc, #248]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800643c:	2b0c      	cmp	r3, #12
 800643e:	d11c      	bne.n	800647a <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006440:	4b3b      	ldr	r3, [pc, #236]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d116      	bne.n	800647a <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800644c:	4b38      	ldr	r3, [pc, #224]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_RCC_OscConfig+0x1ec>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d001      	beq.n	8006464 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e25e      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006464:	4b32      	ldr	r3, [pc, #200]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	492f      	ldr	r1, [pc, #188]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 8006474:	4313      	orrs	r3, r2
 8006476:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006478:	e03a      	b.n	80064f0 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d020      	beq.n	80064c4 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006482:	4b2c      	ldr	r3, [pc, #176]	; (8006534 <HAL_RCC_OscConfig+0x2bc>)
 8006484:	2201      	movs	r2, #1
 8006486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006488:	f7fd f934 	bl	80036f4 <HAL_GetTick>
 800648c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800648e:	e008      	b.n	80064a2 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006490:	f7fd f930 	bl	80036f4 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e23f      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a2:	4b23      	ldr	r3, [pc, #140]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0f0      	beq.n	8006490 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ae:	4b20      	ldr	r3, [pc, #128]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	491c      	ldr	r1, [pc, #112]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	600b      	str	r3, [r1, #0]
 80064c2:	e015      	b.n	80064f0 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064c4:	4b1b      	ldr	r3, [pc, #108]	; (8006534 <HAL_RCC_OscConfig+0x2bc>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ca:	f7fd f913 	bl	80036f4 <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d2:	f7fd f90f 	bl	80036f4 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e21e      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064e4:	4b12      	ldr	r3, [pc, #72]	; (8006530 <HAL_RCC_OscConfig+0x2b8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1f0      	bne.n	80064d2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d045      	beq.n	8006588 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d008      	beq.n	8006516 <HAL_RCC_OscConfig+0x29e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d004      	beq.n	8006516 <HAL_RCC_OscConfig+0x29e>
 800650c:	f640 5196 	movw	r1, #3478	; 0xd96
 8006510:	4806      	ldr	r0, [pc, #24]	; (800652c <HAL_RCC_OscConfig+0x2b4>)
 8006512:	f7fc fb36 	bl	8002b82 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01e      	beq.n	800655c <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800651e:	4b06      	ldr	r3, [pc, #24]	; (8006538 <HAL_RCC_OscConfig+0x2c0>)
 8006520:	2201      	movs	r2, #1
 8006522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006524:	f7fd f8e6 	bl	80036f4 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800652a:	e010      	b.n	800654e <HAL_RCC_OscConfig+0x2d6>
 800652c:	08010408 	.word	0x08010408
 8006530:	40023800 	.word	0x40023800
 8006534:	42470000 	.word	0x42470000
 8006538:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800653c:	f7fd f8da 	bl	80036f4 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e1e9      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800654e:	4ba4      	ldr	r3, [pc, #656]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 8006550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0f0      	beq.n	800653c <HAL_RCC_OscConfig+0x2c4>
 800655a:	e015      	b.n	8006588 <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800655c:	4ba1      	ldr	r3, [pc, #644]	; (80067e4 <HAL_RCC_OscConfig+0x56c>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006562:	f7fd f8c7 	bl	80036f4 <HAL_GetTick>
 8006566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006568:	e008      	b.n	800657c <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800656a:	f7fd f8c3 	bl	80036f4 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e1d2      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800657c:	4b98      	ldr	r3, [pc, #608]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 800657e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f0      	bne.n	800656a <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 80a8 	beq.w	80066e6 <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006596:	2300      	movs	r3, #0
 8006598:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00c      	beq.n	80065bc <HAL_RCC_OscConfig+0x344>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d008      	beq.n	80065bc <HAL_RCC_OscConfig+0x344>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	2b05      	cmp	r3, #5
 80065b0:	d004      	beq.n	80065bc <HAL_RCC_OscConfig+0x344>
 80065b2:	f640 51c2 	movw	r1, #3522	; 0xdc2
 80065b6:	488c      	ldr	r0, [pc, #560]	; (80067e8 <HAL_RCC_OscConfig+0x570>)
 80065b8:	f7fc fae3 	bl	8002b82 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065bc:	4b88      	ldr	r3, [pc, #544]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10f      	bne.n	80065e8 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065c8:	2300      	movs	r3, #0
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	4b84      	ldr	r3, [pc, #528]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	4a83      	ldr	r2, [pc, #524]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 80065d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d6:	6413      	str	r3, [r2, #64]	; 0x40
 80065d8:	4b81      	ldr	r3, [pc, #516]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 80065da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065e4:	2301      	movs	r3, #1
 80065e6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e8:	4b80      	ldr	r3, [pc, #512]	; (80067ec <HAL_RCC_OscConfig+0x574>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d118      	bne.n	8006626 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065f4:	4b7d      	ldr	r3, [pc, #500]	; (80067ec <HAL_RCC_OscConfig+0x574>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a7c      	ldr	r2, [pc, #496]	; (80067ec <HAL_RCC_OscConfig+0x574>)
 80065fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006600:	f7fd f878 	bl	80036f4 <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006608:	f7fd f874 	bl	80036f4 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e183      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661a:	4b74      	ldr	r3, [pc, #464]	; (80067ec <HAL_RCC_OscConfig+0x574>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d106      	bne.n	800663c <HAL_RCC_OscConfig+0x3c4>
 800662e:	4b6c      	ldr	r3, [pc, #432]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006632:	4a6b      	ldr	r2, [pc, #428]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	6713      	str	r3, [r2, #112]	; 0x70
 800663a:	e01c      	b.n	8006676 <HAL_RCC_OscConfig+0x3fe>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b05      	cmp	r3, #5
 8006642:	d10c      	bne.n	800665e <HAL_RCC_OscConfig+0x3e6>
 8006644:	4b66      	ldr	r3, [pc, #408]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006648:	4a65      	ldr	r2, [pc, #404]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 800664a:	f043 0304 	orr.w	r3, r3, #4
 800664e:	6713      	str	r3, [r2, #112]	; 0x70
 8006650:	4b63      	ldr	r3, [pc, #396]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006654:	4a62      	ldr	r2, [pc, #392]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	6713      	str	r3, [r2, #112]	; 0x70
 800665c:	e00b      	b.n	8006676 <HAL_RCC_OscConfig+0x3fe>
 800665e:	4b60      	ldr	r3, [pc, #384]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 8006660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006662:	4a5f      	ldr	r2, [pc, #380]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	6713      	str	r3, [r2, #112]	; 0x70
 800666a:	4b5d      	ldr	r3, [pc, #372]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	4a5c      	ldr	r2, [pc, #368]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 8006670:	f023 0304 	bic.w	r3, r3, #4
 8006674:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d015      	beq.n	80066aa <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667e:	f7fd f839 	bl	80036f4 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006684:	e00a      	b.n	800669c <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006686:	f7fd f835 	bl	80036f4 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	f241 3288 	movw	r2, #5000	; 0x1388
 8006694:	4293      	cmp	r3, r2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e142      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800669c:	4b50      	ldr	r3, [pc, #320]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 800669e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0ee      	beq.n	8006686 <HAL_RCC_OscConfig+0x40e>
 80066a8:	e014      	b.n	80066d4 <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066aa:	f7fd f823 	bl	80036f4 <HAL_GetTick>
 80066ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b0:	e00a      	b.n	80066c8 <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066b2:	f7fd f81f 	bl	80036f4 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d901      	bls.n	80066c8 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e12c      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066c8:	4b45      	ldr	r3, [pc, #276]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 80066ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1ee      	bne.n	80066b2 <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d105      	bne.n	80066e6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066da:	4b41      	ldr	r3, [pc, #260]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	4a40      	ldr	r2, [pc, #256]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 80066e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <HAL_RCC_OscConfig+0x490>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d008      	beq.n	8006708 <HAL_RCC_OscConfig+0x490>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d004      	beq.n	8006708 <HAL_RCC_OscConfig+0x490>
 80066fe:	f640 6105 	movw	r1, #3589	; 0xe05
 8006702:	4839      	ldr	r0, [pc, #228]	; (80067e8 <HAL_RCC_OscConfig+0x570>)
 8006704:	f7fc fa3d 	bl	8002b82 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8107 	beq.w	8006920 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006712:	4b33      	ldr	r3, [pc, #204]	; (80067e0 <HAL_RCC_OscConfig+0x568>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 030c 	and.w	r3, r3, #12
 800671a:	2b08      	cmp	r3, #8
 800671c:	f000 80c0 	beq.w	80068a0 <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	2b02      	cmp	r3, #2
 8006726:	f040 80a4 	bne.w	8006872 <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <HAL_RCC_OscConfig+0x4ce>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800673a:	d004      	beq.n	8006746 <HAL_RCC_OscConfig+0x4ce>
 800673c:	f640 610e 	movw	r1, #3598	; 0xe0e
 8006740:	4829      	ldr	r0, [pc, #164]	; (80067e8 <HAL_RCC_OscConfig+0x570>)
 8006742:	f7fc fa1e 	bl	8002b82 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	2b3f      	cmp	r3, #63	; 0x3f
 800674c:	d904      	bls.n	8006758 <HAL_RCC_OscConfig+0x4e0>
 800674e:	f640 610f 	movw	r1, #3599	; 0xe0f
 8006752:	4825      	ldr	r0, [pc, #148]	; (80067e8 <HAL_RCC_OscConfig+0x570>)
 8006754:	f7fc fa15 	bl	8002b82 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	2b31      	cmp	r3, #49	; 0x31
 800675e:	d904      	bls.n	800676a <HAL_RCC_OscConfig+0x4f2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006768:	d904      	bls.n	8006774 <HAL_RCC_OscConfig+0x4fc>
 800676a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800676e:	481e      	ldr	r0, [pc, #120]	; (80067e8 <HAL_RCC_OscConfig+0x570>)
 8006770:	f7fc fa07 	bl	8002b82 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	2b02      	cmp	r3, #2
 800677a:	d010      	beq.n	800679e <HAL_RCC_OscConfig+0x526>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006780:	2b04      	cmp	r3, #4
 8006782:	d00c      	beq.n	800679e <HAL_RCC_OscConfig+0x526>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006788:	2b06      	cmp	r3, #6
 800678a:	d008      	beq.n	800679e <HAL_RCC_OscConfig+0x526>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006790:	2b08      	cmp	r3, #8
 8006792:	d004      	beq.n	800679e <HAL_RCC_OscConfig+0x526>
 8006794:	f640 6111 	movw	r1, #3601	; 0xe11
 8006798:	4813      	ldr	r0, [pc, #76]	; (80067e8 <HAL_RCC_OscConfig+0x570>)
 800679a:	f7fc f9f2 	bl	8002b82 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d903      	bls.n	80067ae <HAL_RCC_OscConfig+0x536>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067aa:	2b0f      	cmp	r3, #15
 80067ac:	d904      	bls.n	80067b8 <HAL_RCC_OscConfig+0x540>
 80067ae:	f640 6112 	movw	r1, #3602	; 0xe12
 80067b2:	480d      	ldr	r0, [pc, #52]	; (80067e8 <HAL_RCC_OscConfig+0x570>)
 80067b4:	f7fc f9e5 	bl	8002b82 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d903      	bls.n	80067c8 <HAL_RCC_OscConfig+0x550>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	2b07      	cmp	r3, #7
 80067c6:	d904      	bls.n	80067d2 <HAL_RCC_OscConfig+0x55a>
 80067c8:	f640 6113 	movw	r1, #3603	; 0xe13
 80067cc:	4806      	ldr	r0, [pc, #24]	; (80067e8 <HAL_RCC_OscConfig+0x570>)
 80067ce:	f7fc f9d8 	bl	8002b82 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d2:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <HAL_RCC_OscConfig+0x578>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d8:	f7fc ff8c 	bl	80036f4 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067de:	e012      	b.n	8006806 <HAL_RCC_OscConfig+0x58e>
 80067e0:	40023800 	.word	0x40023800
 80067e4:	42470e80 	.word	0x42470e80
 80067e8:	08010408 	.word	0x08010408
 80067ec:	40007000 	.word	0x40007000
 80067f0:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f4:	f7fc ff7e 	bl	80036f4 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e08d      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006806:	4b49      	ldr	r3, [pc, #292]	; (800692c <HAL_RCC_OscConfig+0x6b4>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1f0      	bne.n	80067f4 <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	69da      	ldr	r2, [r3, #28]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	019b      	lsls	r3, r3, #6
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	3b01      	subs	r3, #1
 800682c:	041b      	lsls	r3, r3, #16
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	061b      	lsls	r3, r3, #24
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	071b      	lsls	r3, r3, #28
 800683e:	493b      	ldr	r1, [pc, #236]	; (800692c <HAL_RCC_OscConfig+0x6b4>)
 8006840:	4313      	orrs	r3, r2
 8006842:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006844:	4b3a      	ldr	r3, [pc, #232]	; (8006930 <HAL_RCC_OscConfig+0x6b8>)
 8006846:	2201      	movs	r2, #1
 8006848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684a:	f7fc ff53 	bl	80036f4 <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006852:	f7fc ff4f 	bl	80036f4 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e05e      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006864:	4b31      	ldr	r3, [pc, #196]	; (800692c <HAL_RCC_OscConfig+0x6b4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0f0      	beq.n	8006852 <HAL_RCC_OscConfig+0x5da>
 8006870:	e056      	b.n	8006920 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006872:	4b2f      	ldr	r3, [pc, #188]	; (8006930 <HAL_RCC_OscConfig+0x6b8>)
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fc ff3c 	bl	80036f4 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006880:	f7fc ff38 	bl	80036f4 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e047      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006892:	4b26      	ldr	r3, [pc, #152]	; (800692c <HAL_RCC_OscConfig+0x6b4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x608>
 800689e:	e03f      	b.n	8006920 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d101      	bne.n	80068ac <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e03a      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068ac:	4b1f      	ldr	r3, [pc, #124]	; (800692c <HAL_RCC_OscConfig+0x6b4>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d030      	beq.n	800691c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d129      	bne.n	800691c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d122      	bne.n	800691c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068dc:	4013      	ands	r3, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d119      	bne.n	800691c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	085b      	lsrs	r3, r3, #1
 80068f4:	3b01      	subs	r3, #1
 80068f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d10f      	bne.n	800691c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006908:	429a      	cmp	r2, r3
 800690a:	d107      	bne.n	800691c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006918:	429a      	cmp	r2, r3
 800691a:	d001      	beq.n	8006920 <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e000      	b.n	8006922 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40023800 	.word	0x40023800
 8006930:	42470060 	.word	0x42470060

08006934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e184      	b.n	8006c50 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a72      	ldr	r2, [pc, #456]	; (8006b14 <HAL_SPI_Init+0x1e0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d013      	beq.n	8006978 <HAL_SPI_Init+0x44>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a70      	ldr	r2, [pc, #448]	; (8006b18 <HAL_SPI_Init+0x1e4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00e      	beq.n	8006978 <HAL_SPI_Init+0x44>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a6f      	ldr	r2, [pc, #444]	; (8006b1c <HAL_SPI_Init+0x1e8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d009      	beq.n	8006978 <HAL_SPI_Init+0x44>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a6d      	ldr	r2, [pc, #436]	; (8006b20 <HAL_SPI_Init+0x1ec>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_SPI_Init+0x44>
 800696e:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006972:	486c      	ldr	r0, [pc, #432]	; (8006b24 <HAL_SPI_Init+0x1f0>)
 8006974:	f7fc f905 	bl	8002b82 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d009      	beq.n	8006994 <HAL_SPI_Init+0x60>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006988:	d004      	beq.n	8006994 <HAL_SPI_Init+0x60>
 800698a:	f240 1143 	movw	r1, #323	; 0x143
 800698e:	4865      	ldr	r0, [pc, #404]	; (8006b24 <HAL_SPI_Init+0x1f0>)
 8006990:	f7fc f8f7 	bl	8002b82 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00e      	beq.n	80069ba <HAL_SPI_Init+0x86>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a4:	d009      	beq.n	80069ba <HAL_SPI_Init+0x86>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ae:	d004      	beq.n	80069ba <HAL_SPI_Init+0x86>
 80069b0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80069b4:	485b      	ldr	r0, [pc, #364]	; (8006b24 <HAL_SPI_Init+0x1f0>)
 80069b6:	f7fc f8e4 	bl	8002b82 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c2:	d008      	beq.n	80069d6 <HAL_SPI_Init+0xa2>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <HAL_SPI_Init+0xa2>
 80069cc:	f240 1145 	movw	r1, #325	; 0x145
 80069d0:	4854      	ldr	r0, [pc, #336]	; (8006b24 <HAL_SPI_Init+0x1f0>)
 80069d2:	f7fc f8d6 	bl	8002b82 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069de:	d00d      	beq.n	80069fc <HAL_SPI_Init+0xc8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d009      	beq.n	80069fc <HAL_SPI_Init+0xc8>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069f0:	d004      	beq.n	80069fc <HAL_SPI_Init+0xc8>
 80069f2:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80069f6:	484b      	ldr	r0, [pc, #300]	; (8006b24 <HAL_SPI_Init+0x1f0>)
 80069f8:	f7fc f8c3 	bl	8002b82 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d020      	beq.n	8006a46 <HAL_SPI_Init+0x112>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d01c      	beq.n	8006a46 <HAL_SPI_Init+0x112>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d018      	beq.n	8006a46 <HAL_SPI_Init+0x112>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	2b18      	cmp	r3, #24
 8006a1a:	d014      	beq.n	8006a46 <HAL_SPI_Init+0x112>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d010      	beq.n	8006a46 <HAL_SPI_Init+0x112>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	2b28      	cmp	r3, #40	; 0x28
 8006a2a:	d00c      	beq.n	8006a46 <HAL_SPI_Init+0x112>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	2b30      	cmp	r3, #48	; 0x30
 8006a32:	d008      	beq.n	8006a46 <HAL_SPI_Init+0x112>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	2b38      	cmp	r3, #56	; 0x38
 8006a3a:	d004      	beq.n	8006a46 <HAL_SPI_Init+0x112>
 8006a3c:	f240 1147 	movw	r1, #327	; 0x147
 8006a40:	4838      	ldr	r0, [pc, #224]	; (8006b24 <HAL_SPI_Init+0x1f0>)
 8006a42:	f7fc f89e 	bl	8002b82 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d008      	beq.n	8006a60 <HAL_SPI_Init+0x12c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	2b80      	cmp	r3, #128	; 0x80
 8006a54:	d004      	beq.n	8006a60 <HAL_SPI_Init+0x12c>
 8006a56:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006a5a:	4832      	ldr	r0, [pc, #200]	; (8006b24 <HAL_SPI_Init+0x1f0>)
 8006a5c:	f7fc f891 	bl	8002b82 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <HAL_SPI_Init+0x146>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	2b10      	cmp	r3, #16
 8006a6e:	d004      	beq.n	8006a7a <HAL_SPI_Init+0x146>
 8006a70:	f240 1149 	movw	r1, #329	; 0x149
 8006a74:	482b      	ldr	r0, [pc, #172]	; (8006b24 <HAL_SPI_Init+0x1f0>)
 8006a76:	f7fc f884 	bl	8002b82 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d152      	bne.n	8006b28 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d008      	beq.n	8006a9c <HAL_SPI_Init+0x168>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d004      	beq.n	8006a9c <HAL_SPI_Init+0x168>
 8006a92:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006a96:	4823      	ldr	r0, [pc, #140]	; (8006b24 <HAL_SPI_Init+0x1f0>)
 8006a98:	f7fc f873 	bl	8002b82 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d008      	beq.n	8006ab6 <HAL_SPI_Init+0x182>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d004      	beq.n	8006ab6 <HAL_SPI_Init+0x182>
 8006aac:	f240 114d 	movw	r1, #333	; 0x14d
 8006ab0:	481c      	ldr	r0, [pc, #112]	; (8006b24 <HAL_SPI_Init+0x1f0>)
 8006ab2:	f7fc f866 	bl	8002b82 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006abe:	d125      	bne.n	8006b0c <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d05a      	beq.n	8006b7e <HAL_SPI_Init+0x24a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d056      	beq.n	8006b7e <HAL_SPI_Init+0x24a>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	2b10      	cmp	r3, #16
 8006ad6:	d052      	beq.n	8006b7e <HAL_SPI_Init+0x24a>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	2b18      	cmp	r3, #24
 8006ade:	d04e      	beq.n	8006b7e <HAL_SPI_Init+0x24a>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d04a      	beq.n	8006b7e <HAL_SPI_Init+0x24a>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	2b28      	cmp	r3, #40	; 0x28
 8006aee:	d046      	beq.n	8006b7e <HAL_SPI_Init+0x24a>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	2b30      	cmp	r3, #48	; 0x30
 8006af6:	d042      	beq.n	8006b7e <HAL_SPI_Init+0x24a>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	2b38      	cmp	r3, #56	; 0x38
 8006afe:	d03e      	beq.n	8006b7e <HAL_SPI_Init+0x24a>
 8006b00:	f240 1151 	movw	r1, #337	; 0x151
 8006b04:	4807      	ldr	r0, [pc, #28]	; (8006b24 <HAL_SPI_Init+0x1f0>)
 8006b06:	f7fc f83c 	bl	8002b82 <assert_failed>
 8006b0a:	e038      	b.n	8006b7e <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	61da      	str	r2, [r3, #28]
 8006b12:	e034      	b.n	8006b7e <HAL_SPI_Init+0x24a>
 8006b14:	40013000 	.word	0x40013000
 8006b18:	40003800 	.word	0x40003800
 8006b1c:	40003c00 	.word	0x40003c00
 8006b20:	40013400 	.word	0x40013400
 8006b24:	08010444 	.word	0x08010444
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d020      	beq.n	8006b72 <HAL_SPI_Init+0x23e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d01c      	beq.n	8006b72 <HAL_SPI_Init+0x23e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d018      	beq.n	8006b72 <HAL_SPI_Init+0x23e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	2b18      	cmp	r3, #24
 8006b46:	d014      	beq.n	8006b72 <HAL_SPI_Init+0x23e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	d010      	beq.n	8006b72 <HAL_SPI_Init+0x23e>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	2b28      	cmp	r3, #40	; 0x28
 8006b56:	d00c      	beq.n	8006b72 <HAL_SPI_Init+0x23e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	2b30      	cmp	r3, #48	; 0x30
 8006b5e:	d008      	beq.n	8006b72 <HAL_SPI_Init+0x23e>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	2b38      	cmp	r3, #56	; 0x38
 8006b66:	d004      	beq.n	8006b72 <HAL_SPI_Init+0x23e>
 8006b68:	f240 115b 	movw	r1, #347	; 0x15b
 8006b6c:	483a      	ldr	r0, [pc, #232]	; (8006c58 <HAL_SPI_Init+0x324>)
 8006b6e:	f7fc f808 	bl	8002b82 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d106      	bne.n	8006b9e <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7fc f919 	bl	8002dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c02:	ea42 0103 	orr.w	r1, r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	0c1b      	lsrs	r3, r3, #16
 8006c1c:	f003 0104 	and.w	r1, r3, #4
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	f003 0210 	and.w	r2, r3, #16
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	69da      	ldr	r2, [r3, #28]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	08010444 	.word	0x08010444

08006c5c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d009      	beq.n	8006c8c <HAL_SPI_Transmit+0x30>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c80:	d004      	beq.n	8006c8c <HAL_SPI_Transmit+0x30>
 8006c82:	f240 310a 	movw	r1, #778	; 0x30a
 8006c86:	4893      	ldr	r0, [pc, #588]	; (8006ed4 <HAL_SPI_Transmit+0x278>)
 8006c88:	f7fb ff7b 	bl	8002b82 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d101      	bne.n	8006c9a <HAL_SPI_Transmit+0x3e>
 8006c96:	2302      	movs	r3, #2
 8006c98:	e128      	b.n	8006eec <HAL_SPI_Transmit+0x290>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ca2:	f7fc fd27 	bl	80036f4 <HAL_GetTick>
 8006ca6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d002      	beq.n	8006cbe <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006cb8:	2302      	movs	r3, #2
 8006cba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cbc:	e10d      	b.n	8006eda <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <HAL_SPI_Transmit+0x6e>
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d102      	bne.n	8006cd0 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cce:	e104      	b.n	8006eda <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	88fa      	ldrh	r2, [r7, #6]
 8006cee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d16:	d10f      	bne.n	8006d38 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d007      	beq.n	8006d56 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d5e:	d14b      	bne.n	8006df8 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_SPI_Transmit+0x112>
 8006d68:	8afb      	ldrh	r3, [r7, #22]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d13e      	bne.n	8006dec <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	881a      	ldrh	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7e:	1c9a      	adds	r2, r3, #2
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d92:	e02b      	b.n	8006dec <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d112      	bne.n	8006dc8 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	881a      	ldrh	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db2:	1c9a      	adds	r2, r3, #2
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dc6:	e011      	b.n	8006dec <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dc8:	f7fc fc94 	bl	80036f4 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d803      	bhi.n	8006de0 <HAL_SPI_Transmit+0x184>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dde:	d102      	bne.n	8006de6 <HAL_SPI_Transmit+0x18a>
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d102      	bne.n	8006dec <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dea:	e076      	b.n	8006eda <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1ce      	bne.n	8006d94 <HAL_SPI_Transmit+0x138>
 8006df6:	e04c      	b.n	8006e92 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <HAL_SPI_Transmit+0x1aa>
 8006e00:	8afb      	ldrh	r3, [r7, #22]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d140      	bne.n	8006e88 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	7812      	ldrb	r2, [r2, #0]
 8006e12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e2c:	e02c      	b.n	8006e88 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d113      	bne.n	8006e64 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	330c      	adds	r3, #12
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e62:	e011      	b.n	8006e88 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e64:	f7fc fc46 	bl	80036f4 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d803      	bhi.n	8006e7c <HAL_SPI_Transmit+0x220>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7a:	d102      	bne.n	8006e82 <HAL_SPI_Transmit+0x226>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d102      	bne.n	8006e88 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e86:	e028      	b.n	8006eda <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1cd      	bne.n	8006e2e <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 fbda 	bl	8007650 <SPI_EndRxTxTransaction>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	613b      	str	r3, [r7, #16]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	613b      	str	r3, [r7, #16]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	613b      	str	r3, [r7, #16]
 8006ec4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	77fb      	strb	r3, [r7, #31]
 8006ed2:	e002      	b.n	8006eda <HAL_SPI_Transmit+0x27e>
 8006ed4:	08010444 	.word	0x08010444
  }

error:
 8006ed8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006eea:	7ffb      	ldrb	r3, [r7, #31]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3720      	adds	r7, #32
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	4613      	mov	r3, r2
 8006f02:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f10:	d112      	bne.n	8006f38 <HAL_SPI_Receive+0x44>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10e      	bne.n	8006f38 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2204      	movs	r2, #4
 8006f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f22:	88fa      	ldrh	r2, [r7, #6]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f8f2 	bl	8007118 <HAL_SPI_TransmitReceive>
 8006f34:	4603      	mov	r3, r0
 8006f36:	e0ea      	b.n	800710e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <HAL_SPI_Receive+0x52>
 8006f42:	2302      	movs	r3, #2
 8006f44:	e0e3      	b.n	800710e <HAL_SPI_Receive+0x21a>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f4e:	f7fc fbd1 	bl	80036f4 <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d002      	beq.n	8006f66 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006f60:	2302      	movs	r3, #2
 8006f62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f64:	e0ca      	b.n	80070fc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <HAL_SPI_Receive+0x7e>
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f76:	e0c1      	b.n	80070fc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	88fa      	ldrh	r2, [r7, #6]
 8006f90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	88fa      	ldrh	r2, [r7, #6]
 8006f96:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fbe:	d10f      	bne.n	8006fe0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fde:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fea:	2b40      	cmp	r3, #64	; 0x40
 8006fec:	d007      	beq.n	8006ffe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ffc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d162      	bne.n	80070cc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007006:	e02e      	b.n	8007066 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b01      	cmp	r3, #1
 8007014:	d115      	bne.n	8007042 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f103 020c 	add.w	r2, r3, #12
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007036:	b29b      	uxth	r3, r3
 8007038:	3b01      	subs	r3, #1
 800703a:	b29a      	uxth	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007040:	e011      	b.n	8007066 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007042:	f7fc fb57 	bl	80036f4 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d803      	bhi.n	800705a <HAL_SPI_Receive+0x166>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007058:	d102      	bne.n	8007060 <HAL_SPI_Receive+0x16c>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d102      	bne.n	8007066 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007064:	e04a      	b.n	80070fc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800706a:	b29b      	uxth	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1cb      	bne.n	8007008 <HAL_SPI_Receive+0x114>
 8007070:	e031      	b.n	80070d6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b01      	cmp	r3, #1
 800707e:	d113      	bne.n	80070a8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	b292      	uxth	r2, r2
 800708c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	1c9a      	adds	r2, r3, #2
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070a6:	e011      	b.n	80070cc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070a8:	f7fc fb24 	bl	80036f4 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d803      	bhi.n	80070c0 <HAL_SPI_Receive+0x1cc>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	d102      	bne.n	80070c6 <HAL_SPI_Receive+0x1d2>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070ca:	e017      	b.n	80070fc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1cd      	bne.n	8007072 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 fa52 	bl	8007584 <SPI_EndRxTransaction>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2220      	movs	r2, #32
 80070ea:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	75fb      	strb	r3, [r7, #23]
 80070f8:	e000      	b.n	80070fc <HAL_SPI_Receive+0x208>
  }

error :
 80070fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08c      	sub	sp, #48	; 0x30
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007126:	2301      	movs	r3, #1
 8007128:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <HAL_SPI_TransmitReceive+0x2a>
 8007138:	f240 417e 	movw	r1, #1150	; 0x47e
 800713c:	4884      	ldr	r0, [pc, #528]	; (8007350 <HAL_SPI_TransmitReceive+0x238>)
 800713e:	f7fb fd20 	bl	8002b82 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_SPI_TransmitReceive+0x38>
 800714c:	2302      	movs	r3, #2
 800714e:	e18d      	b.n	800746c <HAL_SPI_TransmitReceive+0x354>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007158:	f7fc facc 	bl	80036f4 <HAL_GetTick>
 800715c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800716e:	887b      	ldrh	r3, [r7, #2]
 8007170:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007172:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007176:	2b01      	cmp	r3, #1
 8007178:	d00f      	beq.n	800719a <HAL_SPI_TransmitReceive+0x82>
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007180:	d107      	bne.n	8007192 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d103      	bne.n	8007192 <HAL_SPI_TransmitReceive+0x7a>
 800718a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800718e:	2b04      	cmp	r3, #4
 8007190:	d003      	beq.n	800719a <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8007192:	2302      	movs	r3, #2
 8007194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007198:	e15e      	b.n	8007458 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <HAL_SPI_TransmitReceive+0x94>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <HAL_SPI_TransmitReceive+0x94>
 80071a6:	887b      	ldrh	r3, [r7, #2]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d103      	bne.n	80071b4 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071b2:	e151      	b.n	8007458 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d003      	beq.n	80071c8 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2205      	movs	r2, #5
 80071c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	887a      	ldrh	r2, [r7, #2]
 80071d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	887a      	ldrh	r2, [r7, #2]
 80071de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	887a      	ldrh	r2, [r7, #2]
 80071ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	887a      	ldrh	r2, [r7, #2]
 80071f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b40      	cmp	r3, #64	; 0x40
 800720a:	d007      	beq.n	800721c <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800721a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007224:	d178      	bne.n	8007318 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_SPI_TransmitReceive+0x11c>
 800722e:	8b7b      	ldrh	r3, [r7, #26]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d166      	bne.n	8007302 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	881a      	ldrh	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	1c9a      	adds	r2, r3, #2
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007258:	e053      	b.n	8007302 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b02      	cmp	r3, #2
 8007266:	d11b      	bne.n	80072a0 <HAL_SPI_TransmitReceive+0x188>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800726c:	b29b      	uxth	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d016      	beq.n	80072a0 <HAL_SPI_TransmitReceive+0x188>
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	2b01      	cmp	r3, #1
 8007276:	d113      	bne.n	80072a0 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727c:	881a      	ldrh	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	1c9a      	adds	r2, r3, #2
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007292:	b29b      	uxth	r3, r3
 8007294:	3b01      	subs	r3, #1
 8007296:	b29a      	uxth	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d119      	bne.n	80072e2 <HAL_SPI_TransmitReceive+0x1ca>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d014      	beq.n	80072e2 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	b292      	uxth	r2, r2
 80072c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	1c9a      	adds	r2, r3, #2
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072de:	2301      	movs	r3, #1
 80072e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072e2:	f7fc fa07 	bl	80036f4 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d807      	bhi.n	8007302 <HAL_SPI_TransmitReceive+0x1ea>
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f8:	d003      	beq.n	8007302 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007300:	e0aa      	b.n	8007458 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1a6      	bne.n	800725a <HAL_SPI_TransmitReceive+0x142>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1a1      	bne.n	800725a <HAL_SPI_TransmitReceive+0x142>
 8007316:	e07f      	b.n	8007418 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <HAL_SPI_TransmitReceive+0x20e>
 8007320:	8b7b      	ldrh	r3, [r7, #26]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d16e      	bne.n	8007404 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	330c      	adds	r3, #12
 8007330:	7812      	ldrb	r2, [r2, #0]
 8007332:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007342:	b29b      	uxth	r3, r3
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800734c:	e05a      	b.n	8007404 <HAL_SPI_TransmitReceive+0x2ec>
 800734e:	bf00      	nop
 8007350:	08010444 	.word	0x08010444
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b02      	cmp	r3, #2
 8007360:	d11c      	bne.n	800739c <HAL_SPI_TransmitReceive+0x284>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d017      	beq.n	800739c <HAL_SPI_TransmitReceive+0x284>
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	2b01      	cmp	r3, #1
 8007370:	d114      	bne.n	800739c <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	330c      	adds	r3, #12
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800738e:	b29b      	uxth	r3, r3
 8007390:	3b01      	subs	r3, #1
 8007392:	b29a      	uxth	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d119      	bne.n	80073de <HAL_SPI_TransmitReceive+0x2c6>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d014      	beq.n	80073de <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073da:	2301      	movs	r3, #1
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073de:	f7fc f989 	bl	80036f4 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d803      	bhi.n	80073f6 <HAL_SPI_TransmitReceive+0x2de>
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f4:	d102      	bne.n	80073fc <HAL_SPI_TransmitReceive+0x2e4>
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d103      	bne.n	8007404 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007402:	e029      	b.n	8007458 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1a2      	bne.n	8007354 <HAL_SPI_TransmitReceive+0x23c>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d19d      	bne.n	8007354 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800741a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 f917 	bl	8007650 <SPI_EndRxTxTransaction>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d006      	beq.n	8007436 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007434:	e010      	b.n	8007458 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10b      	bne.n	8007456 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	e000      	b.n	8007458 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8007456:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007468:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800746c:	4618      	mov	r0, r3
 800746e:	3730      	adds	r7, #48	; 0x30
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b088      	sub	sp, #32
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	4613      	mov	r3, r2
 8007482:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007484:	f7fc f936 	bl	80036f4 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	1a9b      	subs	r3, r3, r2
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	4413      	add	r3, r2
 8007492:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007494:	f7fc f92e 	bl	80036f4 <HAL_GetTick>
 8007498:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800749a:	4b39      	ldr	r3, [pc, #228]	; (8007580 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	015b      	lsls	r3, r3, #5
 80074a0:	0d1b      	lsrs	r3, r3, #20
 80074a2:	69fa      	ldr	r2, [r7, #28]
 80074a4:	fb02 f303 	mul.w	r3, r2, r3
 80074a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074aa:	e054      	b.n	8007556 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b2:	d050      	beq.n	8007556 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074b4:	f7fc f91e 	bl	80036f4 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d902      	bls.n	80074ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d13d      	bne.n	8007546 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074e2:	d111      	bne.n	8007508 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ec:	d004      	beq.n	80074f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074f6:	d107      	bne.n	8007508 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007506:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007510:	d10f      	bne.n	8007532 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007530:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e017      	b.n	8007576 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	3b01      	subs	r3, #1
 8007554:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	4013      	ands	r3, r2
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	429a      	cmp	r2, r3
 8007564:	bf0c      	ite	eq
 8007566:	2301      	moveq	r3, #1
 8007568:	2300      	movne	r3, #0
 800756a:	b2db      	uxtb	r3, r3
 800756c:	461a      	mov	r2, r3
 800756e:	79fb      	ldrb	r3, [r7, #7]
 8007570:	429a      	cmp	r2, r3
 8007572:	d19b      	bne.n	80074ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	2000014c 	.word	0x2000014c

08007584 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af02      	add	r7, sp, #8
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007598:	d111      	bne.n	80075be <SPI_EndRxTransaction+0x3a>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075a2:	d004      	beq.n	80075ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ac:	d107      	bne.n	80075be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075c6:	d12a      	bne.n	800761e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d0:	d012      	beq.n	80075f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2200      	movs	r2, #0
 80075da:	2180      	movs	r1, #128	; 0x80
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7ff ff49 	bl	8007474 <SPI_WaitFlagStateUntilTimeout>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d02d      	beq.n	8007644 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ec:	f043 0220 	orr.w	r2, r3, #32
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e026      	b.n	8007646 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2200      	movs	r2, #0
 8007600:	2101      	movs	r1, #1
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff ff36 	bl	8007474 <SPI_WaitFlagStateUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d01a      	beq.n	8007644 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007612:	f043 0220 	orr.w	r2, r3, #32
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e013      	b.n	8007646 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	2101      	movs	r1, #1
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f7ff ff23 	bl	8007474 <SPI_WaitFlagStateUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d007      	beq.n	8007644 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007638:	f043 0220 	orr.w	r2, r3, #32
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e000      	b.n	8007646 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800765c:	4b1b      	ldr	r3, [pc, #108]	; (80076cc <SPI_EndRxTxTransaction+0x7c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1b      	ldr	r2, [pc, #108]	; (80076d0 <SPI_EndRxTxTransaction+0x80>)
 8007662:	fba2 2303 	umull	r2, r3, r2, r3
 8007666:	0d5b      	lsrs	r3, r3, #21
 8007668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800766c:	fb02 f303 	mul.w	r3, r2, r3
 8007670:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800767a:	d112      	bne.n	80076a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2200      	movs	r2, #0
 8007684:	2180      	movs	r1, #128	; 0x80
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f7ff fef4 	bl	8007474 <SPI_WaitFlagStateUntilTimeout>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d016      	beq.n	80076c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007696:	f043 0220 	orr.w	r2, r3, #32
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e00f      	b.n	80076c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00a      	beq.n	80076be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b8:	2b80      	cmp	r3, #128	; 0x80
 80076ba:	d0f2      	beq.n	80076a2 <SPI_EndRxTxTransaction+0x52>
 80076bc:	e000      	b.n	80076c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80076be:	bf00      	nop
  }

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	2000014c 	.word	0x2000014c
 80076d0:	165e9f81 	.word	0x165e9f81

080076d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e0c5      	b.n	8007872 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a64      	ldr	r2, [pc, #400]	; (800787c <HAL_TIM_Base_Init+0x1a8>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d045      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f8:	d040      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a60      	ldr	r2, [pc, #384]	; (8007880 <HAL_TIM_Base_Init+0x1ac>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d03b      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a5e      	ldr	r2, [pc, #376]	; (8007884 <HAL_TIM_Base_Init+0x1b0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d036      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a5d      	ldr	r2, [pc, #372]	; (8007888 <HAL_TIM_Base_Init+0x1b4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d031      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a5b      	ldr	r2, [pc, #364]	; (800788c <HAL_TIM_Base_Init+0x1b8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d02c      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a5a      	ldr	r2, [pc, #360]	; (8007890 <HAL_TIM_Base_Init+0x1bc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d027      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a58      	ldr	r2, [pc, #352]	; (8007894 <HAL_TIM_Base_Init+0x1c0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d022      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a57      	ldr	r2, [pc, #348]	; (8007898 <HAL_TIM_Base_Init+0x1c4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d01d      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a55      	ldr	r2, [pc, #340]	; (800789c <HAL_TIM_Base_Init+0x1c8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d018      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a54      	ldr	r2, [pc, #336]	; (80078a0 <HAL_TIM_Base_Init+0x1cc>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d013      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a52      	ldr	r2, [pc, #328]	; (80078a4 <HAL_TIM_Base_Init+0x1d0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00e      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a51      	ldr	r2, [pc, #324]	; (80078a8 <HAL_TIM_Base_Init+0x1d4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d009      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a4f      	ldr	r2, [pc, #316]	; (80078ac <HAL_TIM_Base_Init+0x1d8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d004      	beq.n	800777c <HAL_TIM_Base_Init+0xa8>
 8007772:	f240 1113 	movw	r1, #275	; 0x113
 8007776:	484e      	ldr	r0, [pc, #312]	; (80078b0 <HAL_TIM_Base_Init+0x1dc>)
 8007778:	f7fb fa03 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d014      	beq.n	80077ae <HAL_TIM_Base_Init+0xda>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	2b10      	cmp	r3, #16
 800778a:	d010      	beq.n	80077ae <HAL_TIM_Base_Init+0xda>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b20      	cmp	r3, #32
 8007792:	d00c      	beq.n	80077ae <HAL_TIM_Base_Init+0xda>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2b40      	cmp	r3, #64	; 0x40
 800779a:	d008      	beq.n	80077ae <HAL_TIM_Base_Init+0xda>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b60      	cmp	r3, #96	; 0x60
 80077a2:	d004      	beq.n	80077ae <HAL_TIM_Base_Init+0xda>
 80077a4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80077a8:	4841      	ldr	r0, [pc, #260]	; (80078b0 <HAL_TIM_Base_Init+0x1dc>)
 80077aa:	f7fb f9ea 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00e      	beq.n	80077d4 <HAL_TIM_Base_Init+0x100>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077be:	d009      	beq.n	80077d4 <HAL_TIM_Base_Init+0x100>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077c8:	d004      	beq.n	80077d4 <HAL_TIM_Base_Init+0x100>
 80077ca:	f240 1115 	movw	r1, #277	; 0x115
 80077ce:	4838      	ldr	r0, [pc, #224]	; (80078b0 <HAL_TIM_Base_Init+0x1dc>)
 80077d0:	f7fb f9d7 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d008      	beq.n	80077ee <HAL_TIM_Base_Init+0x11a>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	2b80      	cmp	r3, #128	; 0x80
 80077e2:	d004      	beq.n	80077ee <HAL_TIM_Base_Init+0x11a>
 80077e4:	f44f 718b 	mov.w	r1, #278	; 0x116
 80077e8:	4831      	ldr	r0, [pc, #196]	; (80078b0 <HAL_TIM_Base_Init+0x1dc>)
 80077ea:	f7fb f9ca 	bl	8002b82 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7fb fc36 	bl	8003074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f001 fbb8 	bl	8008f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40010000 	.word	0x40010000
 8007880:	40000400 	.word	0x40000400
 8007884:	40000800 	.word	0x40000800
 8007888:	40000c00 	.word	0x40000c00
 800788c:	40001000 	.word	0x40001000
 8007890:	40001400 	.word	0x40001400
 8007894:	40010400 	.word	0x40010400
 8007898:	40014000 	.word	0x40014000
 800789c:	40014400 	.word	0x40014400
 80078a0:	40014800 	.word	0x40014800
 80078a4:	40001800 	.word	0x40001800
 80078a8:	40001c00 	.word	0x40001c00
 80078ac:	40002000 	.word	0x40002000
 80078b0:	0801047c 	.word	0x0801047c

080078b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a51      	ldr	r2, [pc, #324]	; (8007a08 <HAL_TIM_Base_Start_IT+0x154>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d045      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ce:	d040      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a4d      	ldr	r2, [pc, #308]	; (8007a0c <HAL_TIM_Base_Start_IT+0x158>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d03b      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a4c      	ldr	r2, [pc, #304]	; (8007a10 <HAL_TIM_Base_Start_IT+0x15c>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d036      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a4a      	ldr	r2, [pc, #296]	; (8007a14 <HAL_TIM_Base_Start_IT+0x160>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d031      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a49      	ldr	r2, [pc, #292]	; (8007a18 <HAL_TIM_Base_Start_IT+0x164>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d02c      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a47      	ldr	r2, [pc, #284]	; (8007a1c <HAL_TIM_Base_Start_IT+0x168>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d027      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a46      	ldr	r2, [pc, #280]	; (8007a20 <HAL_TIM_Base_Start_IT+0x16c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d022      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a44      	ldr	r2, [pc, #272]	; (8007a24 <HAL_TIM_Base_Start_IT+0x170>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d01d      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a43      	ldr	r2, [pc, #268]	; (8007a28 <HAL_TIM_Base_Start_IT+0x174>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d018      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a41      	ldr	r2, [pc, #260]	; (8007a2c <HAL_TIM_Base_Start_IT+0x178>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d013      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a40      	ldr	r2, [pc, #256]	; (8007a30 <HAL_TIM_Base_Start_IT+0x17c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00e      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a3e      	ldr	r2, [pc, #248]	; (8007a34 <HAL_TIM_Base_Start_IT+0x180>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d009      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a3d      	ldr	r2, [pc, #244]	; (8007a38 <HAL_TIM_Base_Start_IT+0x184>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d004      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0x9e>
 8007948:	f240 11cf 	movw	r1, #463	; 0x1cf
 800794c:	483b      	ldr	r0, [pc, #236]	; (8007a3c <HAL_TIM_Base_Start_IT+0x188>)
 800794e:	f7fb f918 	bl	8002b82 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b01      	cmp	r3, #1
 800795c:	d001      	beq.n	8007962 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e04e      	b.n	8007a00 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2202      	movs	r2, #2
 8007966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68da      	ldr	r2, [r3, #12]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0201 	orr.w	r2, r2, #1
 8007978:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a22      	ldr	r2, [pc, #136]	; (8007a08 <HAL_TIM_Base_Start_IT+0x154>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d022      	beq.n	80079ca <HAL_TIM_Base_Start_IT+0x116>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800798c:	d01d      	beq.n	80079ca <HAL_TIM_Base_Start_IT+0x116>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a1e      	ldr	r2, [pc, #120]	; (8007a0c <HAL_TIM_Base_Start_IT+0x158>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d018      	beq.n	80079ca <HAL_TIM_Base_Start_IT+0x116>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a1c      	ldr	r2, [pc, #112]	; (8007a10 <HAL_TIM_Base_Start_IT+0x15c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d013      	beq.n	80079ca <HAL_TIM_Base_Start_IT+0x116>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a1b      	ldr	r2, [pc, #108]	; (8007a14 <HAL_TIM_Base_Start_IT+0x160>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00e      	beq.n	80079ca <HAL_TIM_Base_Start_IT+0x116>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1b      	ldr	r2, [pc, #108]	; (8007a20 <HAL_TIM_Base_Start_IT+0x16c>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d009      	beq.n	80079ca <HAL_TIM_Base_Start_IT+0x116>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <HAL_TIM_Base_Start_IT+0x170>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d004      	beq.n	80079ca <HAL_TIM_Base_Start_IT+0x116>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <HAL_TIM_Base_Start_IT+0x17c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d111      	bne.n	80079ee <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b06      	cmp	r3, #6
 80079da:	d010      	beq.n	80079fe <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0201 	orr.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ec:	e007      	b.n	80079fe <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f042 0201 	orr.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	40010000 	.word	0x40010000
 8007a0c:	40000400 	.word	0x40000400
 8007a10:	40000800 	.word	0x40000800
 8007a14:	40000c00 	.word	0x40000c00
 8007a18:	40001000 	.word	0x40001000
 8007a1c:	40001400 	.word	0x40001400
 8007a20:	40010400 	.word	0x40010400
 8007a24:	40014000 	.word	0x40014000
 8007a28:	40014400 	.word	0x40014400
 8007a2c:	40014800 	.word	0x40014800
 8007a30:	40001800 	.word	0x40001800
 8007a34:	40001c00 	.word	0x40001c00
 8007a38:	40002000 	.word	0x40002000
 8007a3c:	0801047c 	.word	0x0801047c

08007a40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e0c5      	b.n	8007bde <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a64      	ldr	r2, [pc, #400]	; (8007be8 <HAL_TIM_PWM_Init+0x1a8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d045      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a64:	d040      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a60      	ldr	r2, [pc, #384]	; (8007bec <HAL_TIM_PWM_Init+0x1ac>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d03b      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a5e      	ldr	r2, [pc, #376]	; (8007bf0 <HAL_TIM_PWM_Init+0x1b0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d036      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a5d      	ldr	r2, [pc, #372]	; (8007bf4 <HAL_TIM_PWM_Init+0x1b4>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d031      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a5b      	ldr	r2, [pc, #364]	; (8007bf8 <HAL_TIM_PWM_Init+0x1b8>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d02c      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a5a      	ldr	r2, [pc, #360]	; (8007bfc <HAL_TIM_PWM_Init+0x1bc>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d027      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a58      	ldr	r2, [pc, #352]	; (8007c00 <HAL_TIM_PWM_Init+0x1c0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d022      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a57      	ldr	r2, [pc, #348]	; (8007c04 <HAL_TIM_PWM_Init+0x1c4>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d01d      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a55      	ldr	r2, [pc, #340]	; (8007c08 <HAL_TIM_PWM_Init+0x1c8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d018      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a54      	ldr	r2, [pc, #336]	; (8007c0c <HAL_TIM_PWM_Init+0x1cc>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d013      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a52      	ldr	r2, [pc, #328]	; (8007c10 <HAL_TIM_PWM_Init+0x1d0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d00e      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a51      	ldr	r2, [pc, #324]	; (8007c14 <HAL_TIM_PWM_Init+0x1d4>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d009      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a4f      	ldr	r2, [pc, #316]	; (8007c18 <HAL_TIM_PWM_Init+0x1d8>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d004      	beq.n	8007ae8 <HAL_TIM_PWM_Init+0xa8>
 8007ade:	f240 5129 	movw	r1, #1321	; 0x529
 8007ae2:	484e      	ldr	r0, [pc, #312]	; (8007c1c <HAL_TIM_PWM_Init+0x1dc>)
 8007ae4:	f7fb f84d 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d014      	beq.n	8007b1a <HAL_TIM_PWM_Init+0xda>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	2b10      	cmp	r3, #16
 8007af6:	d010      	beq.n	8007b1a <HAL_TIM_PWM_Init+0xda>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	d00c      	beq.n	8007b1a <HAL_TIM_PWM_Init+0xda>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	2b40      	cmp	r3, #64	; 0x40
 8007b06:	d008      	beq.n	8007b1a <HAL_TIM_PWM_Init+0xda>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	2b60      	cmp	r3, #96	; 0x60
 8007b0e:	d004      	beq.n	8007b1a <HAL_TIM_PWM_Init+0xda>
 8007b10:	f240 512a 	movw	r1, #1322	; 0x52a
 8007b14:	4841      	ldr	r0, [pc, #260]	; (8007c1c <HAL_TIM_PWM_Init+0x1dc>)
 8007b16:	f7fb f834 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00e      	beq.n	8007b40 <HAL_TIM_PWM_Init+0x100>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b2a:	d009      	beq.n	8007b40 <HAL_TIM_PWM_Init+0x100>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b34:	d004      	beq.n	8007b40 <HAL_TIM_PWM_Init+0x100>
 8007b36:	f240 512b 	movw	r1, #1323	; 0x52b
 8007b3a:	4838      	ldr	r0, [pc, #224]	; (8007c1c <HAL_TIM_PWM_Init+0x1dc>)
 8007b3c:	f7fb f821 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d008      	beq.n	8007b5a <HAL_TIM_PWM_Init+0x11a>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	2b80      	cmp	r3, #128	; 0x80
 8007b4e:	d004      	beq.n	8007b5a <HAL_TIM_PWM_Init+0x11a>
 8007b50:	f240 512c 	movw	r1, #1324	; 0x52c
 8007b54:	4831      	ldr	r0, [pc, #196]	; (8007c1c <HAL_TIM_PWM_Init+0x1dc>)
 8007b56:	f7fb f814 	bl	8002b82 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d106      	bne.n	8007b74 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7fb fae2 	bl	8003138 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3304      	adds	r3, #4
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	f001 fa02 	bl	8008f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	40010000 	.word	0x40010000
 8007bec:	40000400 	.word	0x40000400
 8007bf0:	40000800 	.word	0x40000800
 8007bf4:	40000c00 	.word	0x40000c00
 8007bf8:	40001000 	.word	0x40001000
 8007bfc:	40001400 	.word	0x40001400
 8007c00:	40010400 	.word	0x40010400
 8007c04:	40014000 	.word	0x40014000
 8007c08:	40014400 	.word	0x40014400
 8007c0c:	40014800 	.word	0x40014800
 8007c10:	40001800 	.word	0x40001800
 8007c14:	40001c00 	.word	0x40001c00
 8007c18:	40002000 	.word	0x40002000
 8007c1c:	0801047c 	.word	0x0801047c

08007c20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a84      	ldr	r2, [pc, #528]	; (8007e40 <HAL_TIM_PWM_Start+0x220>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d10f      	bne.n	8007c54 <HAL_TIM_PWM_Start+0x34>
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 809f 	beq.w	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	f000 809b 	beq.w	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b08      	cmp	r3, #8
 8007c48:	f000 8097 	beq.w	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2b0c      	cmp	r3, #12
 8007c50:	f000 8093 	beq.w	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c5c:	d10e      	bne.n	8007c7c <HAL_TIM_PWM_Start+0x5c>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 808a 	beq.w	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	f000 8086 	beq.w	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	f000 8082 	beq.w	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b0c      	cmp	r3, #12
 8007c7a:	d07e      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a70      	ldr	r2, [pc, #448]	; (8007e44 <HAL_TIM_PWM_Start+0x224>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d10b      	bne.n	8007c9e <HAL_TIM_PWM_Start+0x7e>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d076      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d073      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d070      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b0c      	cmp	r3, #12
 8007c9c:	d06d      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a69      	ldr	r2, [pc, #420]	; (8007e48 <HAL_TIM_PWM_Start+0x228>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d10b      	bne.n	8007cc0 <HAL_TIM_PWM_Start+0xa0>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d065      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	d062      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b08      	cmp	r3, #8
 8007cb8:	d05f      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b0c      	cmp	r3, #12
 8007cbe:	d05c      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a61      	ldr	r2, [pc, #388]	; (8007e4c <HAL_TIM_PWM_Start+0x22c>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d10b      	bne.n	8007ce2 <HAL_TIM_PWM_Start+0xc2>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d054      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	d051      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d04e      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b0c      	cmp	r3, #12
 8007ce0:	d04b      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a5a      	ldr	r2, [pc, #360]	; (8007e50 <HAL_TIM_PWM_Start+0x230>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d10b      	bne.n	8007d04 <HAL_TIM_PWM_Start+0xe4>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d043      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	d040      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	d03d      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b0c      	cmp	r3, #12
 8007d02:	d03a      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a52      	ldr	r2, [pc, #328]	; (8007e54 <HAL_TIM_PWM_Start+0x234>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d105      	bne.n	8007d1a <HAL_TIM_PWM_Start+0xfa>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d032      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d02f      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a4e      	ldr	r2, [pc, #312]	; (8007e58 <HAL_TIM_PWM_Start+0x238>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d102      	bne.n	8007d2a <HAL_TIM_PWM_Start+0x10a>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d027      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a4b      	ldr	r2, [pc, #300]	; (8007e5c <HAL_TIM_PWM_Start+0x23c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d102      	bne.n	8007d3a <HAL_TIM_PWM_Start+0x11a>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d01f      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a48      	ldr	r2, [pc, #288]	; (8007e60 <HAL_TIM_PWM_Start+0x240>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d105      	bne.n	8007d50 <HAL_TIM_PWM_Start+0x130>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d017      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d014      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a43      	ldr	r2, [pc, #268]	; (8007e64 <HAL_TIM_PWM_Start+0x244>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d102      	bne.n	8007d60 <HAL_TIM_PWM_Start+0x140>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00c      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a40      	ldr	r2, [pc, #256]	; (8007e68 <HAL_TIM_PWM_Start+0x248>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d102      	bne.n	8007d70 <HAL_TIM_PWM_Start+0x150>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d004      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007d70:	f240 51af 	movw	r1, #1455	; 0x5af
 8007d74:	483d      	ldr	r0, [pc, #244]	; (8007e6c <HAL_TIM_PWM_Start+0x24c>)
 8007d76:	f7fa ff04 	bl	8002b82 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d109      	bne.n	8007d94 <HAL_TIM_PWM_Start+0x174>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	bf14      	ite	ne
 8007d8c:	2301      	movne	r3, #1
 8007d8e:	2300      	moveq	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	e022      	b.n	8007dda <HAL_TIM_PWM_Start+0x1ba>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d109      	bne.n	8007dae <HAL_TIM_PWM_Start+0x18e>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	bf14      	ite	ne
 8007da6:	2301      	movne	r3, #1
 8007da8:	2300      	moveq	r3, #0
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	e015      	b.n	8007dda <HAL_TIM_PWM_Start+0x1ba>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d109      	bne.n	8007dc8 <HAL_TIM_PWM_Start+0x1a8>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	bf14      	ite	ne
 8007dc0:	2301      	movne	r3, #1
 8007dc2:	2300      	moveq	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	e008      	b.n	8007dda <HAL_TIM_PWM_Start+0x1ba>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	bf14      	ite	ne
 8007dd4:	2301      	movne	r3, #1
 8007dd6:	2300      	moveq	r3, #0
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e094      	b.n	8007f0c <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d104      	bne.n	8007df2 <HAL_TIM_PWM_Start+0x1d2>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007df0:	e013      	b.n	8007e1a <HAL_TIM_PWM_Start+0x1fa>
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d104      	bne.n	8007e02 <HAL_TIM_PWM_Start+0x1e2>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e00:	e00b      	b.n	8007e1a <HAL_TIM_PWM_Start+0x1fa>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d104      	bne.n	8007e12 <HAL_TIM_PWM_Start+0x1f2>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e10:	e003      	b.n	8007e1a <HAL_TIM_PWM_Start+0x1fa>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2202      	movs	r2, #2
 8007e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f001 fc28 	bl	8009678 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a04      	ldr	r2, [pc, #16]	; (8007e40 <HAL_TIM_PWM_Start+0x220>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d004      	beq.n	8007e3c <HAL_TIM_PWM_Start+0x21c>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a06      	ldr	r2, [pc, #24]	; (8007e50 <HAL_TIM_PWM_Start+0x230>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d119      	bne.n	8007e70 <HAL_TIM_PWM_Start+0x250>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e018      	b.n	8007e72 <HAL_TIM_PWM_Start+0x252>
 8007e40:	40010000 	.word	0x40010000
 8007e44:	40000400 	.word	0x40000400
 8007e48:	40000800 	.word	0x40000800
 8007e4c:	40000c00 	.word	0x40000c00
 8007e50:	40010400 	.word	0x40010400
 8007e54:	40014000 	.word	0x40014000
 8007e58:	40014400 	.word	0x40014400
 8007e5c:	40014800 	.word	0x40014800
 8007e60:	40001800 	.word	0x40001800
 8007e64:	40001c00 	.word	0x40001c00
 8007e68:	40002000 	.word	0x40002000
 8007e6c:	0801047c 	.word	0x0801047c
 8007e70:	2300      	movs	r3, #0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d007      	beq.n	8007e86 <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a22      	ldr	r2, [pc, #136]	; (8007f14 <HAL_TIM_PWM_Start+0x2f4>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d022      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2b6>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e98:	d01d      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2b6>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a1e      	ldr	r2, [pc, #120]	; (8007f18 <HAL_TIM_PWM_Start+0x2f8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d018      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2b6>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a1c      	ldr	r2, [pc, #112]	; (8007f1c <HAL_TIM_PWM_Start+0x2fc>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d013      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2b6>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a1b      	ldr	r2, [pc, #108]	; (8007f20 <HAL_TIM_PWM_Start+0x300>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d00e      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2b6>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a19      	ldr	r2, [pc, #100]	; (8007f24 <HAL_TIM_PWM_Start+0x304>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d009      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2b6>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a18      	ldr	r2, [pc, #96]	; (8007f28 <HAL_TIM_PWM_Start+0x308>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d004      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2b6>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a16      	ldr	r2, [pc, #88]	; (8007f2c <HAL_TIM_PWM_Start+0x30c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d111      	bne.n	8007efa <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2b06      	cmp	r3, #6
 8007ee6:	d010      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0201 	orr.w	r2, r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef8:	e007      	b.n	8007f0a <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f042 0201 	orr.w	r2, r2, #1
 8007f08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40010000 	.word	0x40010000
 8007f18:	40000400 	.word	0x40000400
 8007f1c:	40000800 	.word	0x40000800
 8007f20:	40000c00 	.word	0x40000c00
 8007f24:	40010400 	.word	0x40010400
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40001800 	.word	0x40001800

08007f30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e198      	b.n	8008276 <HAL_TIM_Encoder_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a7d      	ldr	r2, [pc, #500]	; (8008140 <HAL_TIM_Encoder_Init+0x210>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d027      	beq.n	8007f9e <HAL_TIM_Encoder_Init+0x6e>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f56:	d022      	beq.n	8007f9e <HAL_TIM_Encoder_Init+0x6e>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a79      	ldr	r2, [pc, #484]	; (8008144 <HAL_TIM_Encoder_Init+0x214>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d01d      	beq.n	8007f9e <HAL_TIM_Encoder_Init+0x6e>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a78      	ldr	r2, [pc, #480]	; (8008148 <HAL_TIM_Encoder_Init+0x218>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d018      	beq.n	8007f9e <HAL_TIM_Encoder_Init+0x6e>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a76      	ldr	r2, [pc, #472]	; (800814c <HAL_TIM_Encoder_Init+0x21c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d013      	beq.n	8007f9e <HAL_TIM_Encoder_Init+0x6e>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a75      	ldr	r2, [pc, #468]	; (8008150 <HAL_TIM_Encoder_Init+0x220>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00e      	beq.n	8007f9e <HAL_TIM_Encoder_Init+0x6e>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a73      	ldr	r2, [pc, #460]	; (8008154 <HAL_TIM_Encoder_Init+0x224>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d009      	beq.n	8007f9e <HAL_TIM_Encoder_Init+0x6e>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a72      	ldr	r2, [pc, #456]	; (8008158 <HAL_TIM_Encoder_Init+0x228>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d004      	beq.n	8007f9e <HAL_TIM_Encoder_Init+0x6e>
 8007f94:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8007f98:	4870      	ldr	r0, [pc, #448]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 8007f9a:	f7fa fdf2 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d014      	beq.n	8007fd0 <HAL_TIM_Encoder_Init+0xa0>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	2b10      	cmp	r3, #16
 8007fac:	d010      	beq.n	8007fd0 <HAL_TIM_Encoder_Init+0xa0>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d00c      	beq.n	8007fd0 <HAL_TIM_Encoder_Init+0xa0>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b40      	cmp	r3, #64	; 0x40
 8007fbc:	d008      	beq.n	8007fd0 <HAL_TIM_Encoder_Init+0xa0>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	2b60      	cmp	r3, #96	; 0x60
 8007fc4:	d004      	beq.n	8007fd0 <HAL_TIM_Encoder_Init+0xa0>
 8007fc6:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8007fca:	4864      	ldr	r0, [pc, #400]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 8007fcc:	f7fa fdd9 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00e      	beq.n	8007ff6 <HAL_TIM_Encoder_Init+0xc6>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe0:	d009      	beq.n	8007ff6 <HAL_TIM_Encoder_Init+0xc6>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fea:	d004      	beq.n	8007ff6 <HAL_TIM_Encoder_Init+0xc6>
 8007fec:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8007ff0:	485a      	ldr	r0, [pc, #360]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 8007ff2:	f7fa fdc6 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <HAL_TIM_Encoder_Init+0xe0>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	2b80      	cmp	r3, #128	; 0x80
 8008004:	d004      	beq.n	8008010 <HAL_TIM_Encoder_Init+0xe0>
 8008006:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800800a:	4854      	ldr	r0, [pc, #336]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 800800c:	f7fa fdb9 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d00c      	beq.n	8008032 <HAL_TIM_Encoder_Init+0x102>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d008      	beq.n	8008032 <HAL_TIM_Encoder_Init+0x102>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b03      	cmp	r3, #3
 8008026:	d004      	beq.n	8008032 <HAL_TIM_Encoder_Init+0x102>
 8008028:	f640 31d5 	movw	r1, #3029	; 0xbd5
 800802c:	484b      	ldr	r0, [pc, #300]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 800802e:	f7fa fda8 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d00c      	beq.n	8008054 <HAL_TIM_Encoder_Init+0x124>
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	2b02      	cmp	r3, #2
 8008040:	d008      	beq.n	8008054 <HAL_TIM_Encoder_Init+0x124>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	2b03      	cmp	r3, #3
 8008048:	d004      	beq.n	8008054 <HAL_TIM_Encoder_Init+0x124>
 800804a:	f640 31d6 	movw	r1, #3030	; 0xbd6
 800804e:	4843      	ldr	r0, [pc, #268]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 8008050:	f7fa fd97 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d00c      	beq.n	8008076 <HAL_TIM_Encoder_Init+0x146>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d008      	beq.n	8008076 <HAL_TIM_Encoder_Init+0x146>
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	2b03      	cmp	r3, #3
 800806a:	d004      	beq.n	8008076 <HAL_TIM_Encoder_Init+0x146>
 800806c:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8008070:	483a      	ldr	r0, [pc, #232]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 8008072:	f7fa fd86 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d008      	beq.n	8008090 <HAL_TIM_Encoder_Init+0x160>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2b02      	cmp	r3, #2
 8008084:	d004      	beq.n	8008090 <HAL_TIM_Encoder_Init+0x160>
 8008086:	f640 31d8 	movw	r1, #3032	; 0xbd8
 800808a:	4834      	ldr	r0, [pc, #208]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 800808c:	f7fa fd79 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d008      	beq.n	80080aa <HAL_TIM_Encoder_Init+0x17a>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	2b02      	cmp	r3, #2
 800809e:	d004      	beq.n	80080aa <HAL_TIM_Encoder_Init+0x17a>
 80080a0:	f640 31d9 	movw	r1, #3033	; 0xbd9
 80080a4:	482d      	ldr	r0, [pc, #180]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 80080a6:	f7fa fd6c 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d010      	beq.n	80080d4 <HAL_TIM_Encoder_Init+0x1a4>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	d00c      	beq.n	80080d4 <HAL_TIM_Encoder_Init+0x1a4>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	2b08      	cmp	r3, #8
 80080c0:	d008      	beq.n	80080d4 <HAL_TIM_Encoder_Init+0x1a4>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	2b0c      	cmp	r3, #12
 80080c8:	d004      	beq.n	80080d4 <HAL_TIM_Encoder_Init+0x1a4>
 80080ca:	f640 31da 	movw	r1, #3034	; 0xbda
 80080ce:	4823      	ldr	r0, [pc, #140]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 80080d0:	f7fa fd57 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d010      	beq.n	80080fe <HAL_TIM_Encoder_Init+0x1ce>
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d00c      	beq.n	80080fe <HAL_TIM_Encoder_Init+0x1ce>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d008      	beq.n	80080fe <HAL_TIM_Encoder_Init+0x1ce>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	2b0c      	cmp	r3, #12
 80080f2:	d004      	beq.n	80080fe <HAL_TIM_Encoder_Init+0x1ce>
 80080f4:	f640 31db 	movw	r1, #3035	; 0xbdb
 80080f8:	4818      	ldr	r0, [pc, #96]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 80080fa:	f7fa fd42 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	2b0f      	cmp	r3, #15
 8008104:	d904      	bls.n	8008110 <HAL_TIM_Encoder_Init+0x1e0>
 8008106:	f640 31dc 	movw	r1, #3036	; 0xbdc
 800810a:	4814      	ldr	r0, [pc, #80]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 800810c:	f7fa fd39 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	2b0f      	cmp	r3, #15
 8008116:	d904      	bls.n	8008122 <HAL_TIM_Encoder_Init+0x1f2>
 8008118:	f640 31dd 	movw	r1, #3037	; 0xbdd
 800811c:	480f      	ldr	r0, [pc, #60]	; (800815c <HAL_TIM_Encoder_Init+0x22c>)
 800811e:	f7fa fd30 	bl	8002b82 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d118      	bne.n	8008160 <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7fb f826 	bl	8003188 <HAL_TIM_Encoder_MspInit>
 800813c:	e010      	b.n	8008160 <HAL_TIM_Encoder_Init+0x230>
 800813e:	bf00      	nop
 8008140:	40010000 	.word	0x40010000
 8008144:	40000400 	.word	0x40000400
 8008148:	40000800 	.word	0x40000800
 800814c:	40000c00 	.word	0x40000c00
 8008150:	40010400 	.word	0x40010400
 8008154:	40014000 	.word	0x40014000
 8008158:	40001800 	.word	0x40001800
 800815c:	0801047c 	.word	0x0801047c
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	6812      	ldr	r2, [r2, #0]
 8008172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008176:	f023 0307 	bic.w	r3, r3, #7
 800817a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3304      	adds	r3, #4
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f000 ff02 	bl	8008f90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b4:	f023 0303 	bic.w	r3, r3, #3
 80081b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	689a      	ldr	r2, [r3, #8]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	4313      	orrs	r3, r2
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80081d2:	f023 030c 	bic.w	r3, r3, #12
 80081d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	4313      	orrs	r3, r2
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	011a      	lsls	r2, r3, #4
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	031b      	lsls	r3, r3, #12
 8008202:	4313      	orrs	r3, r2
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	4313      	orrs	r3, r2
 8008208:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008210:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008218:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	4313      	orrs	r3, r2
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop

08008280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	2b02      	cmp	r3, #2
 8008294:	d122      	bne.n	80082dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d11b      	bne.n	80082dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0202 	mvn.w	r2, #2
 80082ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f003 0303 	and.w	r3, r3, #3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fe46 	bl	8008f54 <HAL_TIM_IC_CaptureCallback>
 80082c8:	e005      	b.n	80082d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fe38 	bl	8008f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fe49 	bl	8008f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d122      	bne.n	8008330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b04      	cmp	r3, #4
 80082f6:	d11b      	bne.n	8008330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0204 	mvn.w	r2, #4
 8008300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2202      	movs	r2, #2
 8008306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fe1c 	bl	8008f54 <HAL_TIM_IC_CaptureCallback>
 800831c:	e005      	b.n	800832a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fe0e 	bl	8008f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fe1f 	bl	8008f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0308 	and.w	r3, r3, #8
 800833a:	2b08      	cmp	r3, #8
 800833c:	d122      	bne.n	8008384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f003 0308 	and.w	r3, r3, #8
 8008348:	2b08      	cmp	r3, #8
 800834a:	d11b      	bne.n	8008384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0208 	mvn.w	r2, #8
 8008354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2204      	movs	r2, #4
 800835a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fdf2 	bl	8008f54 <HAL_TIM_IC_CaptureCallback>
 8008370:	e005      	b.n	800837e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fde4 	bl	8008f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fdf5 	bl	8008f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f003 0310 	and.w	r3, r3, #16
 800838e:	2b10      	cmp	r3, #16
 8008390:	d122      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f003 0310 	and.w	r3, r3, #16
 800839c:	2b10      	cmp	r3, #16
 800839e:	d11b      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0210 	mvn.w	r2, #16
 80083a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2208      	movs	r2, #8
 80083ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fdc8 	bl	8008f54 <HAL_TIM_IC_CaptureCallback>
 80083c4:	e005      	b.n	80083d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fdba 	bl	8008f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fdcb 	bl	8008f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d10e      	bne.n	8008404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d107      	bne.n	8008404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f06f 0201 	mvn.w	r2, #1
 80083fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7f8 ff04 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d10e      	bne.n	8008430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841c:	2b80      	cmp	r3, #128	; 0x80
 800841e:	d107      	bne.n	8008430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 fb5c 	bl	8009ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d10e      	bne.n	800845c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008448:	2b40      	cmp	r3, #64	; 0x40
 800844a:	d107      	bne.n	800845c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fd90 	bl	8008f7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b20      	cmp	r3, #32
 8008468:	d10e      	bne.n	8008488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b20      	cmp	r3, #32
 8008476:	d107      	bne.n	8008488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f06f 0220 	mvn.w	r2, #32
 8008480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f001 fb26 	bl	8009ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d010      	beq.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b04      	cmp	r3, #4
 80084aa:	d00d      	beq.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b08      	cmp	r3, #8
 80084b0:	d00a      	beq.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b0c      	cmp	r3, #12
 80084b6:	d007      	beq.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b3c      	cmp	r3, #60	; 0x3c
 80084bc:	d004      	beq.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80084be:	f241 0177 	movw	r1, #4215	; 0x1077
 80084c2:	4883      	ldr	r0, [pc, #524]	; (80086d0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80084c4:	f7fa fb5d 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b60      	cmp	r3, #96	; 0x60
 80084ce:	d008      	beq.n	80084e2 <HAL_TIM_PWM_ConfigChannel+0x52>
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b70      	cmp	r3, #112	; 0x70
 80084d6:	d004      	beq.n	80084e2 <HAL_TIM_PWM_ConfigChannel+0x52>
 80084d8:	f241 0178 	movw	r1, #4216	; 0x1078
 80084dc:	487c      	ldr	r0, [pc, #496]	; (80086d0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80084de:	f7fa fb50 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d008      	beq.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x6c>
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d004      	beq.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x6c>
 80084f2:	f241 0179 	movw	r1, #4217	; 0x1079
 80084f6:	4876      	ldr	r0, [pc, #472]	; (80086d0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80084f8:	f7fa fb43 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d008      	beq.n	8008516 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	2b04      	cmp	r3, #4
 800850a:	d004      	beq.n	8008516 <HAL_TIM_PWM_ConfigChannel+0x86>
 800850c:	f241 017a 	movw	r1, #4218	; 0x107a
 8008510:	486f      	ldr	r0, [pc, #444]	; (80086d0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008512:	f7fa fb36 	bl	8002b82 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800851c:	2b01      	cmp	r3, #1
 800851e:	d101      	bne.n	8008524 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008520:	2302      	movs	r3, #2
 8008522:	e17c      	b.n	800881e <HAL_TIM_PWM_ConfigChannel+0x38e>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b0c      	cmp	r3, #12
 8008530:	f200 816d 	bhi.w	800880e <HAL_TIM_PWM_ConfigChannel+0x37e>
 8008534:	a201      	add	r2, pc, #4	; (adr r2, 800853c <HAL_TIM_PWM_ConfigChannel+0xac>)
 8008536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853a:	bf00      	nop
 800853c:	08008571 	.word	0x08008571
 8008540:	0800880f 	.word	0x0800880f
 8008544:	0800880f 	.word	0x0800880f
 8008548:	0800880f 	.word	0x0800880f
 800854c:	08008633 	.word	0x08008633
 8008550:	0800880f 	.word	0x0800880f
 8008554:	0800880f 	.word	0x0800880f
 8008558:	0800880f 	.word	0x0800880f
 800855c:	08008701 	.word	0x08008701
 8008560:	0800880f 	.word	0x0800880f
 8008564:	0800880f 	.word	0x0800880f
 8008568:	0800880f 	.word	0x0800880f
 800856c:	08008787 	.word	0x08008787
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a57      	ldr	r2, [pc, #348]	; (80086d4 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d03b      	beq.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x162>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008582:	d036      	beq.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x162>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a53      	ldr	r2, [pc, #332]	; (80086d8 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d031      	beq.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x162>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a52      	ldr	r2, [pc, #328]	; (80086dc <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d02c      	beq.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x162>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a50      	ldr	r2, [pc, #320]	; (80086e0 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d027      	beq.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a4f      	ldr	r2, [pc, #316]	; (80086e4 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d022      	beq.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a4d      	ldr	r2, [pc, #308]	; (80086e8 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d01d      	beq.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a4c      	ldr	r2, [pc, #304]	; (80086ec <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d018      	beq.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a4a      	ldr	r2, [pc, #296]	; (80086f0 <HAL_TIM_PWM_ConfigChannel+0x260>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d013      	beq.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a49      	ldr	r2, [pc, #292]	; (80086f4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d00e      	beq.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a47      	ldr	r2, [pc, #284]	; (80086f8 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d009      	beq.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a46      	ldr	r2, [pc, #280]	; (80086fc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d004      	beq.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085e8:	f241 0184 	movw	r1, #4228	; 0x1084
 80085ec:	4838      	ldr	r0, [pc, #224]	; (80086d0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80085ee:	f7fa fac8 	bl	8002b82 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fd69 	bl	80090d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f042 0208 	orr.w	r2, r2, #8
 800860c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	699a      	ldr	r2, [r3, #24]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0204 	bic.w	r2, r2, #4
 800861c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6999      	ldr	r1, [r3, #24]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	691a      	ldr	r2, [r3, #16]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	619a      	str	r2, [r3, #24]
      break;
 8008630:	e0f0      	b.n	8008814 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a27      	ldr	r2, [pc, #156]	; (80086d4 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d027      	beq.n	800868c <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008644:	d022      	beq.n	800868c <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a23      	ldr	r2, [pc, #140]	; (80086d8 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d01d      	beq.n	800868c <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a21      	ldr	r2, [pc, #132]	; (80086dc <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d018      	beq.n	800868c <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a20      	ldr	r2, [pc, #128]	; (80086e0 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d013      	beq.n	800868c <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a1e      	ldr	r2, [pc, #120]	; (80086e4 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00e      	beq.n	800868c <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a1d      	ldr	r2, [pc, #116]	; (80086e8 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d009      	beq.n	800868c <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a1d      	ldr	r2, [pc, #116]	; (80086f4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d004      	beq.n	800868c <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008682:	f241 0195 	movw	r1, #4245	; 0x1095
 8008686:	4812      	ldr	r0, [pc, #72]	; (80086d0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008688:	f7fa fa7b 	bl	8002b82 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68b9      	ldr	r1, [r7, #8]
 8008692:	4618      	mov	r0, r3
 8008694:	f000 fdb6 	bl	8009204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	699a      	ldr	r2, [r3, #24]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	699a      	ldr	r2, [r3, #24]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6999      	ldr	r1, [r3, #24]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	021a      	lsls	r2, r3, #8
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	619a      	str	r2, [r3, #24]
      break;
 80086cc:	e0a2      	b.n	8008814 <HAL_TIM_PWM_ConfigChannel+0x384>
 80086ce:	bf00      	nop
 80086d0:	0801047c 	.word	0x0801047c
 80086d4:	40010000 	.word	0x40010000
 80086d8:	40000400 	.word	0x40000400
 80086dc:	40000800 	.word	0x40000800
 80086e0:	40000c00 	.word	0x40000c00
 80086e4:	40010400 	.word	0x40010400
 80086e8:	40014000 	.word	0x40014000
 80086ec:	40014400 	.word	0x40014400
 80086f0:	40014800 	.word	0x40014800
 80086f4:	40001800 	.word	0x40001800
 80086f8:	40001c00 	.word	0x40001c00
 80086fc:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a48      	ldr	r2, [pc, #288]	; (8008828 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d01d      	beq.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008712:	d018      	beq.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a44      	ldr	r2, [pc, #272]	; (800882c <HAL_TIM_PWM_ConfigChannel+0x39c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d013      	beq.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a43      	ldr	r2, [pc, #268]	; (8008830 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d00e      	beq.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a41      	ldr	r2, [pc, #260]	; (8008834 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d009      	beq.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a40      	ldr	r2, [pc, #256]	; (8008838 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d004      	beq.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800873c:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8008740:	483e      	ldr	r0, [pc, #248]	; (800883c <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8008742:	f7fa fa1e 	bl	8002b82 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fdf7 	bl	8009340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69da      	ldr	r2, [r3, #28]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f042 0208 	orr.w	r2, r2, #8
 8008760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69da      	ldr	r2, [r3, #28]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f022 0204 	bic.w	r2, r2, #4
 8008770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	69d9      	ldr	r1, [r3, #28]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	691a      	ldr	r2, [r3, #16]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	61da      	str	r2, [r3, #28]
      break;
 8008784:	e046      	b.n	8008814 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a27      	ldr	r2, [pc, #156]	; (8008828 <HAL_TIM_PWM_ConfigChannel+0x398>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d01d      	beq.n	80087cc <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008798:	d018      	beq.n	80087cc <HAL_TIM_PWM_ConfigChannel+0x33c>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a23      	ldr	r2, [pc, #140]	; (800882c <HAL_TIM_PWM_ConfigChannel+0x39c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d013      	beq.n	80087cc <HAL_TIM_PWM_ConfigChannel+0x33c>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a21      	ldr	r2, [pc, #132]	; (8008830 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00e      	beq.n	80087cc <HAL_TIM_PWM_ConfigChannel+0x33c>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a20      	ldr	r2, [pc, #128]	; (8008834 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d009      	beq.n	80087cc <HAL_TIM_PWM_ConfigChannel+0x33c>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a1e      	ldr	r2, [pc, #120]	; (8008838 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d004      	beq.n	80087cc <HAL_TIM_PWM_ConfigChannel+0x33c>
 80087c2:	f241 01b7 	movw	r1, #4279	; 0x10b7
 80087c6:	481d      	ldr	r0, [pc, #116]	; (800883c <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80087c8:	f7fa f9db 	bl	8002b82 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fe52 	bl	800947c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	69da      	ldr	r2, [r3, #28]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	69da      	ldr	r2, [r3, #28]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	69d9      	ldr	r1, [r3, #28]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	021a      	lsls	r2, r3, #8
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	61da      	str	r2, [r3, #28]
      break;
 800880c:	e002      	b.n	8008814 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	75fb      	strb	r3, [r7, #23]
      break;
 8008812:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800881c:	7dfb      	ldrb	r3, [r7, #23]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	40010000 	.word	0x40010000
 800882c:	40000400 	.word	0x40000400
 8008830:	40000800 	.word	0x40000800
 8008834:	40000c00 	.word	0x40000c00
 8008838:	40010400 	.word	0x40010400
 800883c:	0801047c 	.word	0x0801047c

08008840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008854:	2b01      	cmp	r3, #1
 8008856:	d101      	bne.n	800885c <HAL_TIM_ConfigClockSource+0x1c>
 8008858:	2302      	movs	r3, #2
 800885a:	e35c      	b.n	8008f16 <HAL_TIM_ConfigClockSource+0x6d6>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2202      	movs	r2, #2
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008874:	d029      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0x8a>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800887e:	d024      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0x8a>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d020      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0x8a>
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b10      	cmp	r3, #16
 800888e:	d01c      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0x8a>
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b20      	cmp	r3, #32
 8008896:	d018      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0x8a>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b30      	cmp	r3, #48	; 0x30
 800889e:	d014      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0x8a>
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b40      	cmp	r3, #64	; 0x40
 80088a6:	d010      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0x8a>
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b50      	cmp	r3, #80	; 0x50
 80088ae:	d00c      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0x8a>
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b60      	cmp	r3, #96	; 0x60
 80088b6:	d008      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0x8a>
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b70      	cmp	r3, #112	; 0x70
 80088be:	d004      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0x8a>
 80088c0:	f241 41bb 	movw	r1, #5307	; 0x14bb
 80088c4:	4893      	ldr	r0, [pc, #588]	; (8008b14 <HAL_TIM_ConfigClockSource+0x2d4>)
 80088c6:	f7fa f95c 	bl	8002b82 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80088d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f2:	f000 812b 	beq.w	8008b4c <HAL_TIM_ConfigClockSource+0x30c>
 80088f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088fa:	f200 82ff 	bhi.w	8008efc <HAL_TIM_ConfigClockSource+0x6bc>
 80088fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008902:	d02e      	beq.n	8008962 <HAL_TIM_ConfigClockSource+0x122>
 8008904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008908:	f200 82f8 	bhi.w	8008efc <HAL_TIM_ConfigClockSource+0x6bc>
 800890c:	2b70      	cmp	r3, #112	; 0x70
 800890e:	f000 8082 	beq.w	8008a16 <HAL_TIM_ConfigClockSource+0x1d6>
 8008912:	2b70      	cmp	r3, #112	; 0x70
 8008914:	f200 82f2 	bhi.w	8008efc <HAL_TIM_ConfigClockSource+0x6bc>
 8008918:	2b60      	cmp	r3, #96	; 0x60
 800891a:	f000 81e8 	beq.w	8008cee <HAL_TIM_ConfigClockSource+0x4ae>
 800891e:	2b60      	cmp	r3, #96	; 0x60
 8008920:	f200 82ec 	bhi.w	8008efc <HAL_TIM_ConfigClockSource+0x6bc>
 8008924:	2b50      	cmp	r3, #80	; 0x50
 8008926:	f000 8182 	beq.w	8008c2e <HAL_TIM_ConfigClockSource+0x3ee>
 800892a:	2b50      	cmp	r3, #80	; 0x50
 800892c:	f200 82e6 	bhi.w	8008efc <HAL_TIM_ConfigClockSource+0x6bc>
 8008930:	2b40      	cmp	r3, #64	; 0x40
 8008932:	f000 824d 	beq.w	8008dd0 <HAL_TIM_ConfigClockSource+0x590>
 8008936:	2b40      	cmp	r3, #64	; 0x40
 8008938:	f200 82e0 	bhi.w	8008efc <HAL_TIM_ConfigClockSource+0x6bc>
 800893c:	2b30      	cmp	r3, #48	; 0x30
 800893e:	f000 82a7 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x650>
 8008942:	2b30      	cmp	r3, #48	; 0x30
 8008944:	f200 82da 	bhi.w	8008efc <HAL_TIM_ConfigClockSource+0x6bc>
 8008948:	2b20      	cmp	r3, #32
 800894a:	f000 82a1 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x650>
 800894e:	2b20      	cmp	r3, #32
 8008950:	f200 82d4 	bhi.w	8008efc <HAL_TIM_ConfigClockSource+0x6bc>
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 829b 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x650>
 800895a:	2b10      	cmp	r3, #16
 800895c:	f000 8298 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x650>
 8008960:	e2cc      	b.n	8008efc <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a6c      	ldr	r2, [pc, #432]	; (8008b18 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008968:	4293      	cmp	r3, r2
 800896a:	f000 82ca 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008976:	f000 82c4 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a67      	ldr	r2, [pc, #412]	; (8008b1c <HAL_TIM_ConfigClockSource+0x2dc>)
 8008980:	4293      	cmp	r3, r2
 8008982:	f000 82be 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a65      	ldr	r2, [pc, #404]	; (8008b20 <HAL_TIM_ConfigClockSource+0x2e0>)
 800898c:	4293      	cmp	r3, r2
 800898e:	f000 82b8 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a63      	ldr	r2, [pc, #396]	; (8008b24 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008998:	4293      	cmp	r3, r2
 800899a:	f000 82b2 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a61      	ldr	r2, [pc, #388]	; (8008b28 <HAL_TIM_ConfigClockSource+0x2e8>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	f000 82ac 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a5f      	ldr	r2, [pc, #380]	; (8008b2c <HAL_TIM_ConfigClockSource+0x2ec>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	f000 82a6 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a5d      	ldr	r2, [pc, #372]	; (8008b30 <HAL_TIM_ConfigClockSource+0x2f0>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	f000 82a0 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a5b      	ldr	r2, [pc, #364]	; (8008b34 <HAL_TIM_ConfigClockSource+0x2f4>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	f000 829a 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a59      	ldr	r2, [pc, #356]	; (8008b38 <HAL_TIM_ConfigClockSource+0x2f8>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	f000 8294 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a57      	ldr	r2, [pc, #348]	; (8008b3c <HAL_TIM_ConfigClockSource+0x2fc>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	f000 828e 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a55      	ldr	r2, [pc, #340]	; (8008b40 <HAL_TIM_ConfigClockSource+0x300>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	f000 8288 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a53      	ldr	r2, [pc, #332]	; (8008b44 <HAL_TIM_ConfigClockSource+0x304>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	f000 8282 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a51      	ldr	r2, [pc, #324]	; (8008b48 <HAL_TIM_ConfigClockSource+0x308>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	f000 827c 	beq.w	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
 8008a0a:	f241 41c7 	movw	r1, #5319	; 0x14c7
 8008a0e:	4841      	ldr	r0, [pc, #260]	; (8008b14 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008a10:	f7fa f8b7 	bl	8002b82 <assert_failed>
      break;
 8008a14:	e275      	b.n	8008f02 <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a3f      	ldr	r2, [pc, #252]	; (8008b18 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d027      	beq.n	8008a70 <HAL_TIM_ConfigClockSource+0x230>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a28:	d022      	beq.n	8008a70 <HAL_TIM_ConfigClockSource+0x230>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a3b      	ldr	r2, [pc, #236]	; (8008b1c <HAL_TIM_ConfigClockSource+0x2dc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d01d      	beq.n	8008a70 <HAL_TIM_ConfigClockSource+0x230>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a39      	ldr	r2, [pc, #228]	; (8008b20 <HAL_TIM_ConfigClockSource+0x2e0>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d018      	beq.n	8008a70 <HAL_TIM_ConfigClockSource+0x230>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a38      	ldr	r2, [pc, #224]	; (8008b24 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d013      	beq.n	8008a70 <HAL_TIM_ConfigClockSource+0x230>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a38      	ldr	r2, [pc, #224]	; (8008b30 <HAL_TIM_ConfigClockSource+0x2f0>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d00e      	beq.n	8008a70 <HAL_TIM_ConfigClockSource+0x230>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a37      	ldr	r2, [pc, #220]	; (8008b34 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d009      	beq.n	8008a70 <HAL_TIM_ConfigClockSource+0x230>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a37      	ldr	r2, [pc, #220]	; (8008b40 <HAL_TIM_ConfigClockSource+0x300>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d004      	beq.n	8008a70 <HAL_TIM_ConfigClockSource+0x230>
 8008a66:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8008a6a:	482a      	ldr	r0, [pc, #168]	; (8008b14 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008a6c:	f7fa f889 	bl	8002b82 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d013      	beq.n	8008aa0 <HAL_TIM_ConfigClockSource+0x260>
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a80:	d00e      	beq.n	8008aa0 <HAL_TIM_ConfigClockSource+0x260>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a8a:	d009      	beq.n	8008aa0 <HAL_TIM_ConfigClockSource+0x260>
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a94:	d004      	beq.n	8008aa0 <HAL_TIM_ConfigClockSource+0x260>
 8008a96:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8008a9a:	481e      	ldr	r0, [pc, #120]	; (8008b14 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008a9c:	f7fa f871 	bl	8002b82 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aa8:	d014      	beq.n	8008ad4 <HAL_TIM_ConfigClockSource+0x294>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d010      	beq.n	8008ad4 <HAL_TIM_ConfigClockSource+0x294>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00c      	beq.n	8008ad4 <HAL_TIM_ConfigClockSource+0x294>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d008      	beq.n	8008ad4 <HAL_TIM_ConfigClockSource+0x294>
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	2b0a      	cmp	r3, #10
 8008ac8:	d004      	beq.n	8008ad4 <HAL_TIM_ConfigClockSource+0x294>
 8008aca:	f241 41d2 	movw	r1, #5330	; 0x14d2
 8008ace:	4811      	ldr	r0, [pc, #68]	; (8008b14 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008ad0:	f7fa f857 	bl	8002b82 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	2b0f      	cmp	r3, #15
 8008ada:	d904      	bls.n	8008ae6 <HAL_TIM_ConfigClockSource+0x2a6>
 8008adc:	f241 41d3 	movw	r1, #5331	; 0x14d3
 8008ae0:	480c      	ldr	r0, [pc, #48]	; (8008b14 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008ae2:	f7fa f84e 	bl	8002b82 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6818      	ldr	r0, [r3, #0]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	6899      	ldr	r1, [r3, #8]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	f000 fd9f 	bl	8009638 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	609a      	str	r2, [r3, #8]
      break;
 8008b12:	e1f7      	b.n	8008f04 <HAL_TIM_ConfigClockSource+0x6c4>
 8008b14:	0801047c 	.word	0x0801047c
 8008b18:	40010000 	.word	0x40010000
 8008b1c:	40000400 	.word	0x40000400
 8008b20:	40000800 	.word	0x40000800
 8008b24:	40000c00 	.word	0x40000c00
 8008b28:	40001000 	.word	0x40001000
 8008b2c:	40001400 	.word	0x40001400
 8008b30:	40010400 	.word	0x40010400
 8008b34:	40014000 	.word	0x40014000
 8008b38:	40014400 	.word	0x40014400
 8008b3c:	40014800 	.word	0x40014800
 8008b40:	40001800 	.word	0x40001800
 8008b44:	40001c00 	.word	0x40001c00
 8008b48:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a97      	ldr	r2, [pc, #604]	; (8008db0 <HAL_TIM_ConfigClockSource+0x570>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d01d      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x352>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b5e:	d018      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x352>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a93      	ldr	r2, [pc, #588]	; (8008db4 <HAL_TIM_ConfigClockSource+0x574>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d013      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x352>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a92      	ldr	r2, [pc, #584]	; (8008db8 <HAL_TIM_ConfigClockSource+0x578>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d00e      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x352>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a90      	ldr	r2, [pc, #576]	; (8008dbc <HAL_TIM_ConfigClockSource+0x57c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d009      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x352>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a8f      	ldr	r2, [pc, #572]	; (8008dc0 <HAL_TIM_ConfigClockSource+0x580>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d004      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x352>
 8008b88:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8008b8c:	488d      	ldr	r0, [pc, #564]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x584>)
 8008b8e:	f7f9 fff8 	bl	8002b82 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d013      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x382>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba2:	d00e      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x382>
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bac:	d009      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x382>
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bb6:	d004      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x382>
 8008bb8:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8008bbc:	4881      	ldr	r0, [pc, #516]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x584>)
 8008bbe:	f7f9 ffe0 	bl	8002b82 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bca:	d014      	beq.n	8008bf6 <HAL_TIM_ConfigClockSource+0x3b6>
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d010      	beq.n	8008bf6 <HAL_TIM_ConfigClockSource+0x3b6>
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00c      	beq.n	8008bf6 <HAL_TIM_ConfigClockSource+0x3b6>
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d008      	beq.n	8008bf6 <HAL_TIM_ConfigClockSource+0x3b6>
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	2b0a      	cmp	r3, #10
 8008bea:	d004      	beq.n	8008bf6 <HAL_TIM_ConfigClockSource+0x3b6>
 8008bec:	f241 41ea 	movw	r1, #5354	; 0x14ea
 8008bf0:	4874      	ldr	r0, [pc, #464]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x584>)
 8008bf2:	f7f9 ffc6 	bl	8002b82 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	2b0f      	cmp	r3, #15
 8008bfc:	d904      	bls.n	8008c08 <HAL_TIM_ConfigClockSource+0x3c8>
 8008bfe:	f241 41eb 	movw	r1, #5355	; 0x14eb
 8008c02:	4870      	ldr	r0, [pc, #448]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x584>)
 8008c04:	f7f9 ffbd 	bl	8002b82 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6818      	ldr	r0, [r3, #0]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	6899      	ldr	r1, [r3, #8]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	f000 fd0e 	bl	8009638 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689a      	ldr	r2, [r3, #8]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c2a:	609a      	str	r2, [r3, #8]
      break;
 8008c2c:	e16a      	b.n	8008f04 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a5f      	ldr	r2, [pc, #380]	; (8008db0 <HAL_TIM_ConfigClockSource+0x570>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d027      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x448>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c40:	d022      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x448>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a5b      	ldr	r2, [pc, #364]	; (8008db4 <HAL_TIM_ConfigClockSource+0x574>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d01d      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x448>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a59      	ldr	r2, [pc, #356]	; (8008db8 <HAL_TIM_ConfigClockSource+0x578>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d018      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x448>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a58      	ldr	r2, [pc, #352]	; (8008dbc <HAL_TIM_ConfigClockSource+0x57c>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d013      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x448>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a56      	ldr	r2, [pc, #344]	; (8008dc0 <HAL_TIM_ConfigClockSource+0x580>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00e      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x448>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a56      	ldr	r2, [pc, #344]	; (8008dc8 <HAL_TIM_ConfigClockSource+0x588>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d009      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x448>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a54      	ldr	r2, [pc, #336]	; (8008dcc <HAL_TIM_ConfigClockSource+0x58c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d004      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x448>
 8008c7e:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8008c82:	4850      	ldr	r0, [pc, #320]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x584>)
 8008c84:	f7f9 ff7d 	bl	8002b82 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c90:	d014      	beq.n	8008cbc <HAL_TIM_ConfigClockSource+0x47c>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d010      	beq.n	8008cbc <HAL_TIM_ConfigClockSource+0x47c>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00c      	beq.n	8008cbc <HAL_TIM_ConfigClockSource+0x47c>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d008      	beq.n	8008cbc <HAL_TIM_ConfigClockSource+0x47c>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	2b0a      	cmp	r3, #10
 8008cb0:	d004      	beq.n	8008cbc <HAL_TIM_ConfigClockSource+0x47c>
 8008cb2:	f241 41fd 	movw	r1, #5373	; 0x14fd
 8008cb6:	4843      	ldr	r0, [pc, #268]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x584>)
 8008cb8:	f7f9 ff63 	bl	8002b82 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b0f      	cmp	r3, #15
 8008cc2:	d904      	bls.n	8008cce <HAL_TIM_ConfigClockSource+0x48e>
 8008cc4:	f241 41fe 	movw	r1, #5374	; 0x14fe
 8008cc8:	483e      	ldr	r0, [pc, #248]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x584>)
 8008cca:	f7f9 ff5a 	bl	8002b82 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	6859      	ldr	r1, [r3, #4]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	f000 fc32 	bl	8009544 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2150      	movs	r1, #80	; 0x50
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fc8b 	bl	8009602 <TIM_ITRx_SetConfig>
      break;
 8008cec:	e10a      	b.n	8008f04 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a2f      	ldr	r2, [pc, #188]	; (8008db0 <HAL_TIM_ConfigClockSource+0x570>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d027      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x508>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d00:	d022      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x508>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a2b      	ldr	r2, [pc, #172]	; (8008db4 <HAL_TIM_ConfigClockSource+0x574>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d01d      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x508>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a29      	ldr	r2, [pc, #164]	; (8008db8 <HAL_TIM_ConfigClockSource+0x578>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d018      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x508>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a28      	ldr	r2, [pc, #160]	; (8008dbc <HAL_TIM_ConfigClockSource+0x57c>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d013      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x508>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a26      	ldr	r2, [pc, #152]	; (8008dc0 <HAL_TIM_ConfigClockSource+0x580>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00e      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x508>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a26      	ldr	r2, [pc, #152]	; (8008dc8 <HAL_TIM_ConfigClockSource+0x588>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d009      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x508>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a24      	ldr	r2, [pc, #144]	; (8008dcc <HAL_TIM_ConfigClockSource+0x58c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d004      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x508>
 8008d3e:	f241 510a 	movw	r1, #5386	; 0x150a
 8008d42:	4820      	ldr	r0, [pc, #128]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x584>)
 8008d44:	f7f9 ff1d 	bl	8002b82 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d50:	d014      	beq.n	8008d7c <HAL_TIM_ConfigClockSource+0x53c>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d010      	beq.n	8008d7c <HAL_TIM_ConfigClockSource+0x53c>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00c      	beq.n	8008d7c <HAL_TIM_ConfigClockSource+0x53c>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d008      	beq.n	8008d7c <HAL_TIM_ConfigClockSource+0x53c>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	2b0a      	cmp	r3, #10
 8008d70:	d004      	beq.n	8008d7c <HAL_TIM_ConfigClockSource+0x53c>
 8008d72:	f241 510d 	movw	r1, #5389	; 0x150d
 8008d76:	4813      	ldr	r0, [pc, #76]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x584>)
 8008d78:	f7f9 ff03 	bl	8002b82 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	2b0f      	cmp	r3, #15
 8008d82:	d904      	bls.n	8008d8e <HAL_TIM_ConfigClockSource+0x54e>
 8008d84:	f241 510e 	movw	r1, #5390	; 0x150e
 8008d88:	480e      	ldr	r0, [pc, #56]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x584>)
 8008d8a:	f7f9 fefa 	bl	8002b82 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	6859      	ldr	r1, [r3, #4]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f000 fc01 	bl	80095a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2160      	movs	r1, #96	; 0x60
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fc2b 	bl	8009602 <TIM_ITRx_SetConfig>
      break;
 8008dac:	e0aa      	b.n	8008f04 <HAL_TIM_ConfigClockSource+0x6c4>
 8008dae:	bf00      	nop
 8008db0:	40010000 	.word	0x40010000
 8008db4:	40000400 	.word	0x40000400
 8008db8:	40000800 	.word	0x40000800
 8008dbc:	40000c00 	.word	0x40000c00
 8008dc0:	40010400 	.word	0x40010400
 8008dc4:	0801047c 	.word	0x0801047c
 8008dc8:	40014000 	.word	0x40014000
 8008dcc:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a52      	ldr	r2, [pc, #328]	; (8008f20 <HAL_TIM_ConfigClockSource+0x6e0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d027      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x5ea>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de2:	d022      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x5ea>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a4e      	ldr	r2, [pc, #312]	; (8008f24 <HAL_TIM_ConfigClockSource+0x6e4>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d01d      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x5ea>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a4d      	ldr	r2, [pc, #308]	; (8008f28 <HAL_TIM_ConfigClockSource+0x6e8>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d018      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x5ea>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a4b      	ldr	r2, [pc, #300]	; (8008f2c <HAL_TIM_ConfigClockSource+0x6ec>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d013      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x5ea>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a4a      	ldr	r2, [pc, #296]	; (8008f30 <HAL_TIM_ConfigClockSource+0x6f0>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d00e      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x5ea>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a48      	ldr	r2, [pc, #288]	; (8008f34 <HAL_TIM_ConfigClockSource+0x6f4>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d009      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x5ea>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a47      	ldr	r2, [pc, #284]	; (8008f38 <HAL_TIM_ConfigClockSource+0x6f8>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d004      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x5ea>
 8008e20:	f241 511a 	movw	r1, #5402	; 0x151a
 8008e24:	4845      	ldr	r0, [pc, #276]	; (8008f3c <HAL_TIM_ConfigClockSource+0x6fc>)
 8008e26:	f7f9 feac 	bl	8002b82 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e32:	d014      	beq.n	8008e5e <HAL_TIM_ConfigClockSource+0x61e>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d010      	beq.n	8008e5e <HAL_TIM_ConfigClockSource+0x61e>
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00c      	beq.n	8008e5e <HAL_TIM_ConfigClockSource+0x61e>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d008      	beq.n	8008e5e <HAL_TIM_ConfigClockSource+0x61e>
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	2b0a      	cmp	r3, #10
 8008e52:	d004      	beq.n	8008e5e <HAL_TIM_ConfigClockSource+0x61e>
 8008e54:	f241 511d 	movw	r1, #5405	; 0x151d
 8008e58:	4838      	ldr	r0, [pc, #224]	; (8008f3c <HAL_TIM_ConfigClockSource+0x6fc>)
 8008e5a:	f7f9 fe92 	bl	8002b82 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	2b0f      	cmp	r3, #15
 8008e64:	d904      	bls.n	8008e70 <HAL_TIM_ConfigClockSource+0x630>
 8008e66:	f241 511e 	movw	r1, #5406	; 0x151e
 8008e6a:	4834      	ldr	r0, [pc, #208]	; (8008f3c <HAL_TIM_ConfigClockSource+0x6fc>)
 8008e6c:	f7f9 fe89 	bl	8002b82 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	6859      	ldr	r1, [r3, #4]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	f000 fb61 	bl	8009544 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2140      	movs	r1, #64	; 0x40
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fbba 	bl	8009602 <TIM_ITRx_SetConfig>
      break;
 8008e8e:	e039      	b.n	8008f04 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a22      	ldr	r2, [pc, #136]	; (8008f20 <HAL_TIM_ConfigClockSource+0x6e0>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d027      	beq.n	8008eea <HAL_TIM_ConfigClockSource+0x6aa>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea2:	d022      	beq.n	8008eea <HAL_TIM_ConfigClockSource+0x6aa>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a1e      	ldr	r2, [pc, #120]	; (8008f24 <HAL_TIM_ConfigClockSource+0x6e4>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d01d      	beq.n	8008eea <HAL_TIM_ConfigClockSource+0x6aa>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a1d      	ldr	r2, [pc, #116]	; (8008f28 <HAL_TIM_ConfigClockSource+0x6e8>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d018      	beq.n	8008eea <HAL_TIM_ConfigClockSource+0x6aa>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a1b      	ldr	r2, [pc, #108]	; (8008f2c <HAL_TIM_ConfigClockSource+0x6ec>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d013      	beq.n	8008eea <HAL_TIM_ConfigClockSource+0x6aa>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a1a      	ldr	r2, [pc, #104]	; (8008f30 <HAL_TIM_ConfigClockSource+0x6f0>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d00e      	beq.n	8008eea <HAL_TIM_ConfigClockSource+0x6aa>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a18      	ldr	r2, [pc, #96]	; (8008f34 <HAL_TIM_ConfigClockSource+0x6f4>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d009      	beq.n	8008eea <HAL_TIM_ConfigClockSource+0x6aa>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a17      	ldr	r2, [pc, #92]	; (8008f38 <HAL_TIM_ConfigClockSource+0x6f8>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d004      	beq.n	8008eea <HAL_TIM_ConfigClockSource+0x6aa>
 8008ee0:	f241 512d 	movw	r1, #5421	; 0x152d
 8008ee4:	4815      	ldr	r0, [pc, #84]	; (8008f3c <HAL_TIM_ConfigClockSource+0x6fc>)
 8008ee6:	f7f9 fe4c 	bl	8002b82 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	f000 fb84 	bl	8009602 <TIM_ITRx_SetConfig>
      break;
 8008efa:	e003      	b.n	8008f04 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
      break;
 8008f00:	e000      	b.n	8008f04 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 8008f02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	40010000 	.word	0x40010000
 8008f24:	40000400 	.word	0x40000400
 8008f28:	40000800 	.word	0x40000800
 8008f2c:	40000c00 	.word	0x40000c00
 8008f30:	40010400 	.word	0x40010400
 8008f34:	40014000 	.word	0x40014000
 8008f38:	40001800 	.word	0x40001800
 8008f3c:	0801047c 	.word	0x0801047c

08008f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a40      	ldr	r2, [pc, #256]	; (80090a4 <TIM_Base_SetConfig+0x114>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d013      	beq.n	8008fd0 <TIM_Base_SetConfig+0x40>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fae:	d00f      	beq.n	8008fd0 <TIM_Base_SetConfig+0x40>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a3d      	ldr	r2, [pc, #244]	; (80090a8 <TIM_Base_SetConfig+0x118>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d00b      	beq.n	8008fd0 <TIM_Base_SetConfig+0x40>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a3c      	ldr	r2, [pc, #240]	; (80090ac <TIM_Base_SetConfig+0x11c>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d007      	beq.n	8008fd0 <TIM_Base_SetConfig+0x40>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a3b      	ldr	r2, [pc, #236]	; (80090b0 <TIM_Base_SetConfig+0x120>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d003      	beq.n	8008fd0 <TIM_Base_SetConfig+0x40>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a3a      	ldr	r2, [pc, #232]	; (80090b4 <TIM_Base_SetConfig+0x124>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d108      	bne.n	8008fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a2f      	ldr	r2, [pc, #188]	; (80090a4 <TIM_Base_SetConfig+0x114>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d02b      	beq.n	8009042 <TIM_Base_SetConfig+0xb2>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ff0:	d027      	beq.n	8009042 <TIM_Base_SetConfig+0xb2>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a2c      	ldr	r2, [pc, #176]	; (80090a8 <TIM_Base_SetConfig+0x118>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d023      	beq.n	8009042 <TIM_Base_SetConfig+0xb2>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a2b      	ldr	r2, [pc, #172]	; (80090ac <TIM_Base_SetConfig+0x11c>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d01f      	beq.n	8009042 <TIM_Base_SetConfig+0xb2>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a2a      	ldr	r2, [pc, #168]	; (80090b0 <TIM_Base_SetConfig+0x120>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d01b      	beq.n	8009042 <TIM_Base_SetConfig+0xb2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a29      	ldr	r2, [pc, #164]	; (80090b4 <TIM_Base_SetConfig+0x124>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d017      	beq.n	8009042 <TIM_Base_SetConfig+0xb2>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a28      	ldr	r2, [pc, #160]	; (80090b8 <TIM_Base_SetConfig+0x128>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d013      	beq.n	8009042 <TIM_Base_SetConfig+0xb2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a27      	ldr	r2, [pc, #156]	; (80090bc <TIM_Base_SetConfig+0x12c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d00f      	beq.n	8009042 <TIM_Base_SetConfig+0xb2>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a26      	ldr	r2, [pc, #152]	; (80090c0 <TIM_Base_SetConfig+0x130>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d00b      	beq.n	8009042 <TIM_Base_SetConfig+0xb2>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a25      	ldr	r2, [pc, #148]	; (80090c4 <TIM_Base_SetConfig+0x134>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d007      	beq.n	8009042 <TIM_Base_SetConfig+0xb2>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a24      	ldr	r2, [pc, #144]	; (80090c8 <TIM_Base_SetConfig+0x138>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d003      	beq.n	8009042 <TIM_Base_SetConfig+0xb2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a23      	ldr	r2, [pc, #140]	; (80090cc <TIM_Base_SetConfig+0x13c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d108      	bne.n	8009054 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	4313      	orrs	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	4313      	orrs	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <TIM_Base_SetConfig+0x114>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d003      	beq.n	8009088 <TIM_Base_SetConfig+0xf8>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a0c      	ldr	r2, [pc, #48]	; (80090b4 <TIM_Base_SetConfig+0x124>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d103      	bne.n	8009090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	691a      	ldr	r2, [r3, #16]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	615a      	str	r2, [r3, #20]
}
 8009096:	bf00      	nop
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	40010000 	.word	0x40010000
 80090a8:	40000400 	.word	0x40000400
 80090ac:	40000800 	.word	0x40000800
 80090b0:	40000c00 	.word	0x40000c00
 80090b4:	40010400 	.word	0x40010400
 80090b8:	40014000 	.word	0x40014000
 80090bc:	40014400 	.word	0x40014400
 80090c0:	40014800 	.word	0x40014800
 80090c4:	40001800 	.word	0x40001800
 80090c8:	40001c00 	.word	0x40001c00
 80090cc:	40002000 	.word	0x40002000

080090d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	f023 0201 	bic.w	r2, r3, #1
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f023 0303 	bic.w	r3, r3, #3
 8009106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	4313      	orrs	r3, r2
 8009110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f023 0302 	bic.w	r3, r3, #2
 8009118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	4313      	orrs	r3, r2
 8009122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a34      	ldr	r2, [pc, #208]	; (80091f8 <TIM_OC1_SetConfig+0x128>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d003      	beq.n	8009134 <TIM_OC1_SetConfig+0x64>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a33      	ldr	r2, [pc, #204]	; (80091fc <TIM_OC1_SetConfig+0x12c>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d119      	bne.n	8009168 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d008      	beq.n	800914e <TIM_OC1_SetConfig+0x7e>
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	2b08      	cmp	r3, #8
 8009142:	d004      	beq.n	800914e <TIM_OC1_SetConfig+0x7e>
 8009144:	f641 21cb 	movw	r1, #6859	; 0x1acb
 8009148:	482d      	ldr	r0, [pc, #180]	; (8009200 <TIM_OC1_SetConfig+0x130>)
 800914a:	f7f9 fd1a 	bl	8002b82 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f023 0308 	bic.w	r3, r3, #8
 8009154:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	4313      	orrs	r3, r2
 800915e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	f023 0304 	bic.w	r3, r3, #4
 8009166:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a23      	ldr	r2, [pc, #140]	; (80091f8 <TIM_OC1_SetConfig+0x128>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d003      	beq.n	8009178 <TIM_OC1_SetConfig+0xa8>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a22      	ldr	r2, [pc, #136]	; (80091fc <TIM_OC1_SetConfig+0x12c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d12d      	bne.n	80091d4 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009180:	d008      	beq.n	8009194 <TIM_OC1_SetConfig+0xc4>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d004      	beq.n	8009194 <TIM_OC1_SetConfig+0xc4>
 800918a:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800918e:	481c      	ldr	r0, [pc, #112]	; (8009200 <TIM_OC1_SetConfig+0x130>)
 8009190:	f7f9 fcf7 	bl	8002b82 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	695b      	ldr	r3, [r3, #20]
 8009198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800919c:	d008      	beq.n	80091b0 <TIM_OC1_SetConfig+0xe0>
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d004      	beq.n	80091b0 <TIM_OC1_SetConfig+0xe0>
 80091a6:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 80091aa:	4815      	ldr	r0, [pc, #84]	; (8009200 <TIM_OC1_SetConfig+0x130>)
 80091ac:	f7f9 fce9 	bl	8002b82 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	621a      	str	r2, [r3, #32]
}
 80091ee:	bf00      	nop
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	40010000 	.word	0x40010000
 80091fc:	40010400 	.word	0x40010400
 8009200:	0801047c 	.word	0x0801047c

08009204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	f023 0210 	bic.w	r2, r3, #16
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800923a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	021b      	lsls	r3, r3, #8
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	4313      	orrs	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f023 0320 	bic.w	r3, r3, #32
 800924e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	4313      	orrs	r3, r2
 800925a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a35      	ldr	r2, [pc, #212]	; (8009334 <TIM_OC2_SetConfig+0x130>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d003      	beq.n	800926c <TIM_OC2_SetConfig+0x68>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a34      	ldr	r2, [pc, #208]	; (8009338 <TIM_OC2_SetConfig+0x134>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d11a      	bne.n	80092a2 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d008      	beq.n	8009286 <TIM_OC2_SetConfig+0x82>
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	2b08      	cmp	r3, #8
 800927a:	d004      	beq.n	8009286 <TIM_OC2_SetConfig+0x82>
 800927c:	f641 3116 	movw	r1, #6934	; 0x1b16
 8009280:	482e      	ldr	r0, [pc, #184]	; (800933c <TIM_OC2_SetConfig+0x138>)
 8009282:	f7f9 fc7e 	bl	8002b82 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800928c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	011b      	lsls	r3, r3, #4
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	4313      	orrs	r3, r2
 8009298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092a0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a23      	ldr	r2, [pc, #140]	; (8009334 <TIM_OC2_SetConfig+0x130>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d003      	beq.n	80092b2 <TIM_OC2_SetConfig+0xae>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a22      	ldr	r2, [pc, #136]	; (8009338 <TIM_OC2_SetConfig+0x134>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d12f      	bne.n	8009312 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092ba:	d008      	beq.n	80092ce <TIM_OC2_SetConfig+0xca>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <TIM_OC2_SetConfig+0xca>
 80092c4:	f641 3124 	movw	r1, #6948	; 0x1b24
 80092c8:	481c      	ldr	r0, [pc, #112]	; (800933c <TIM_OC2_SetConfig+0x138>)
 80092ca:	f7f9 fc5a 	bl	8002b82 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d6:	d008      	beq.n	80092ea <TIM_OC2_SetConfig+0xe6>
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d004      	beq.n	80092ea <TIM_OC2_SetConfig+0xe6>
 80092e0:	f641 3125 	movw	r1, #6949	; 0x1b25
 80092e4:	4815      	ldr	r0, [pc, #84]	; (800933c <TIM_OC2_SetConfig+0x138>)
 80092e6:	f7f9 fc4c 	bl	8002b82 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	4313      	orrs	r3, r2
 8009304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	4313      	orrs	r3, r2
 8009310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	621a      	str	r2, [r3, #32]
}
 800932c:	bf00      	nop
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	40010000 	.word	0x40010000
 8009338:	40010400 	.word	0x40010400
 800933c:	0801047c 	.word	0x0801047c

08009340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f023 0303 	bic.w	r3, r3, #3
 8009376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	4313      	orrs	r3, r2
 8009380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	021b      	lsls	r3, r3, #8
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	4313      	orrs	r3, r2
 8009394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a35      	ldr	r2, [pc, #212]	; (8009470 <TIM_OC3_SetConfig+0x130>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d003      	beq.n	80093a6 <TIM_OC3_SetConfig+0x66>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a34      	ldr	r2, [pc, #208]	; (8009474 <TIM_OC3_SetConfig+0x134>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d11a      	bne.n	80093dc <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d008      	beq.n	80093c0 <TIM_OC3_SetConfig+0x80>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	2b08      	cmp	r3, #8
 80093b4:	d004      	beq.n	80093c0 <TIM_OC3_SetConfig+0x80>
 80093b6:	f641 3161 	movw	r1, #7009	; 0x1b61
 80093ba:	482f      	ldr	r0, [pc, #188]	; (8009478 <TIM_OC3_SetConfig+0x138>)
 80093bc:	f7f9 fbe1 	bl	8002b82 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	021b      	lsls	r3, r3, #8
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a24      	ldr	r2, [pc, #144]	; (8009470 <TIM_OC3_SetConfig+0x130>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d003      	beq.n	80093ec <TIM_OC3_SetConfig+0xac>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a23      	ldr	r2, [pc, #140]	; (8009474 <TIM_OC3_SetConfig+0x134>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d12f      	bne.n	800944c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093f4:	d008      	beq.n	8009408 <TIM_OC3_SetConfig+0xc8>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d004      	beq.n	8009408 <TIM_OC3_SetConfig+0xc8>
 80093fe:	f641 316e 	movw	r1, #7022	; 0x1b6e
 8009402:	481d      	ldr	r0, [pc, #116]	; (8009478 <TIM_OC3_SetConfig+0x138>)
 8009404:	f7f9 fbbd 	bl	8002b82 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	695b      	ldr	r3, [r3, #20]
 800940c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009410:	d008      	beq.n	8009424 <TIM_OC3_SetConfig+0xe4>
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <TIM_OC3_SetConfig+0xe4>
 800941a:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800941e:	4816      	ldr	r0, [pc, #88]	; (8009478 <TIM_OC3_SetConfig+0x138>)
 8009420:	f7f9 fbaf 	bl	8002b82 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800942a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	4313      	orrs	r3, r2
 800943e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	011b      	lsls	r3, r3, #4
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4313      	orrs	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	621a      	str	r2, [r3, #32]
}
 8009466:	bf00      	nop
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	40010000 	.word	0x40010000
 8009474:	40010400 	.word	0x40010400
 8009478:	0801047c 	.word	0x0801047c

0800947c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	021b      	lsls	r3, r3, #8
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	031b      	lsls	r3, r3, #12
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a18      	ldr	r2, [pc, #96]	; (8009538 <TIM_OC4_SetConfig+0xbc>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d003      	beq.n	80094e4 <TIM_OC4_SetConfig+0x68>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a17      	ldr	r2, [pc, #92]	; (800953c <TIM_OC4_SetConfig+0xc0>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d117      	bne.n	8009514 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ec:	d008      	beq.n	8009500 <TIM_OC4_SetConfig+0x84>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <TIM_OC4_SetConfig+0x84>
 80094f6:	f641 31ad 	movw	r1, #7085	; 0x1bad
 80094fa:	4811      	ldr	r0, [pc, #68]	; (8009540 <TIM_OC4_SetConfig+0xc4>)
 80094fc:	f7f9 fb41 	bl	8002b82 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009506:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	695b      	ldr	r3, [r3, #20]
 800950c:	019b      	lsls	r3, r3, #6
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	4313      	orrs	r3, r2
 8009512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	621a      	str	r2, [r3, #32]
}
 800952e:	bf00      	nop
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	40010000 	.word	0x40010000
 800953c:	40010400 	.word	0x40010400
 8009540:	0801047c 	.word	0x0801047c

08009544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	f023 0201 	bic.w	r2, r3, #1
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800956e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	011b      	lsls	r3, r3, #4
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	4313      	orrs	r3, r2
 8009578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f023 030a 	bic.w	r3, r3, #10
 8009580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	4313      	orrs	r3, r2
 8009588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	621a      	str	r2, [r3, #32]
}
 8009596:	bf00      	nop
 8009598:	371c      	adds	r7, #28
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b087      	sub	sp, #28
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	f023 0210 	bic.w	r2, r3, #16
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6a1b      	ldr	r3, [r3, #32]
 80095c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	031b      	lsls	r3, r3, #12
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	011b      	lsls	r3, r3, #4
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	621a      	str	r2, [r3, #32]
}
 80095f6:	bf00      	nop
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009602:	b480      	push	{r7}
 8009604:	b085      	sub	sp, #20
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4313      	orrs	r3, r2
 8009620:	f043 0307 	orr.w	r3, r3, #7
 8009624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	609a      	str	r2, [r3, #8]
}
 800962c:	bf00      	nop
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009652:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	021a      	lsls	r2, r3, #8
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	431a      	orrs	r2, r3
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	4313      	orrs	r3, r2
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	4313      	orrs	r3, r2
 8009664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	609a      	str	r2, [r3, #8]
}
 800966c:	bf00      	nop
 800966e:	371c      	adds	r7, #28
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4a32      	ldr	r2, [pc, #200]	; (8009750 <TIM_CCxChannelCmd+0xd8>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d030      	beq.n	80096ee <TIM_CCxChannelCmd+0x76>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009692:	d02c      	beq.n	80096ee <TIM_CCxChannelCmd+0x76>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	4a2f      	ldr	r2, [pc, #188]	; (8009754 <TIM_CCxChannelCmd+0xdc>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d028      	beq.n	80096ee <TIM_CCxChannelCmd+0x76>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4a2e      	ldr	r2, [pc, #184]	; (8009758 <TIM_CCxChannelCmd+0xe0>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d024      	beq.n	80096ee <TIM_CCxChannelCmd+0x76>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4a2d      	ldr	r2, [pc, #180]	; (800975c <TIM_CCxChannelCmd+0xe4>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d020      	beq.n	80096ee <TIM_CCxChannelCmd+0x76>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4a2c      	ldr	r2, [pc, #176]	; (8009760 <TIM_CCxChannelCmd+0xe8>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d01c      	beq.n	80096ee <TIM_CCxChannelCmd+0x76>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4a2b      	ldr	r2, [pc, #172]	; (8009764 <TIM_CCxChannelCmd+0xec>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d018      	beq.n	80096ee <TIM_CCxChannelCmd+0x76>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4a2a      	ldr	r2, [pc, #168]	; (8009768 <TIM_CCxChannelCmd+0xf0>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d014      	beq.n	80096ee <TIM_CCxChannelCmd+0x76>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4a29      	ldr	r2, [pc, #164]	; (800976c <TIM_CCxChannelCmd+0xf4>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d010      	beq.n	80096ee <TIM_CCxChannelCmd+0x76>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	4a28      	ldr	r2, [pc, #160]	; (8009770 <TIM_CCxChannelCmd+0xf8>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d00c      	beq.n	80096ee <TIM_CCxChannelCmd+0x76>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4a27      	ldr	r2, [pc, #156]	; (8009774 <TIM_CCxChannelCmd+0xfc>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d008      	beq.n	80096ee <TIM_CCxChannelCmd+0x76>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4a26      	ldr	r2, [pc, #152]	; (8009778 <TIM_CCxChannelCmd+0x100>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d004      	beq.n	80096ee <TIM_CCxChannelCmd+0x76>
 80096e4:	f641 5198 	movw	r1, #7576	; 0x1d98
 80096e8:	4824      	ldr	r0, [pc, #144]	; (800977c <TIM_CCxChannelCmd+0x104>)
 80096ea:	f7f9 fa4a 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d010      	beq.n	8009716 <TIM_CCxChannelCmd+0x9e>
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b04      	cmp	r3, #4
 80096f8:	d00d      	beq.n	8009716 <TIM_CCxChannelCmd+0x9e>
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b08      	cmp	r3, #8
 80096fe:	d00a      	beq.n	8009716 <TIM_CCxChannelCmd+0x9e>
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2b0c      	cmp	r3, #12
 8009704:	d007      	beq.n	8009716 <TIM_CCxChannelCmd+0x9e>
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	2b3c      	cmp	r3, #60	; 0x3c
 800970a:	d004      	beq.n	8009716 <TIM_CCxChannelCmd+0x9e>
 800970c:	f641 5199 	movw	r1, #7577	; 0x1d99
 8009710:	481a      	ldr	r0, [pc, #104]	; (800977c <TIM_CCxChannelCmd+0x104>)
 8009712:	f7f9 fa36 	bl	8002b82 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f003 031f 	and.w	r3, r3, #31
 800971c:	2201      	movs	r2, #1
 800971e:	fa02 f303 	lsl.w	r3, r2, r3
 8009722:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6a1a      	ldr	r2, [r3, #32]
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	43db      	mvns	r3, r3
 800972c:	401a      	ands	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6a1a      	ldr	r2, [r3, #32]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	f003 031f 	and.w	r3, r3, #31
 800973c:	6879      	ldr	r1, [r7, #4]
 800973e:	fa01 f303 	lsl.w	r3, r1, r3
 8009742:	431a      	orrs	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	621a      	str	r2, [r3, #32]
}
 8009748:	bf00      	nop
 800974a:	3718      	adds	r7, #24
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	40010000 	.word	0x40010000
 8009754:	40000400 	.word	0x40000400
 8009758:	40000800 	.word	0x40000800
 800975c:	40000c00 	.word	0x40000c00
 8009760:	40010400 	.word	0x40010400
 8009764:	40014000 	.word	0x40014000
 8009768:	40014400 	.word	0x40014400
 800976c:	40014800 	.word	0x40014800
 8009770:	40001800 	.word	0x40001800
 8009774:	40001c00 	.word	0x40001c00
 8009778:	40002000 	.word	0x40002000
 800977c:	0801047c 	.word	0x0801047c

08009780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a61      	ldr	r2, [pc, #388]	; (8009914 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d027      	beq.n	80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800979c:	d022      	beq.n	80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a5d      	ldr	r2, [pc, #372]	; (8009918 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d01d      	beq.n	80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a5b      	ldr	r2, [pc, #364]	; (800991c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d018      	beq.n	80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a5a      	ldr	r2, [pc, #360]	; (8009920 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d013      	beq.n	80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a58      	ldr	r2, [pc, #352]	; (8009924 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d00e      	beq.n	80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a57      	ldr	r2, [pc, #348]	; (8009928 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d009      	beq.n	80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a55      	ldr	r2, [pc, #340]	; (800992c <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d004      	beq.n	80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80097da:	f240 71b1 	movw	r1, #1969	; 0x7b1
 80097de:	4854      	ldr	r0, [pc, #336]	; (8009930 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80097e0:	f7f9 f9cf 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d020      	beq.n	800982e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b10      	cmp	r3, #16
 80097f2:	d01c      	beq.n	800982e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	d018      	beq.n	800982e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b30      	cmp	r3, #48	; 0x30
 8009802:	d014      	beq.n	800982e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b40      	cmp	r3, #64	; 0x40
 800980a:	d010      	beq.n	800982e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b50      	cmp	r3, #80	; 0x50
 8009812:	d00c      	beq.n	800982e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b60      	cmp	r3, #96	; 0x60
 800981a:	d008      	beq.n	800982e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b70      	cmp	r3, #112	; 0x70
 8009822:	d004      	beq.n	800982e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009824:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8009828:	4841      	ldr	r0, [pc, #260]	; (8009930 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800982a:	f7f9 f9aa 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	2b80      	cmp	r3, #128	; 0x80
 8009834:	d008      	beq.n	8009848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d004      	beq.n	8009848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800983e:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8009842:	483b      	ldr	r0, [pc, #236]	; (8009930 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009844:	f7f9 f99d 	bl	8002b82 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009852:	2302      	movs	r3, #2
 8009854:	e05a      	b.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2202      	movs	r2, #2
 8009862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800987c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a1f      	ldr	r2, [pc, #124]	; (8009914 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d022      	beq.n	80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098a2:	d01d      	beq.n	80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a1b      	ldr	r2, [pc, #108]	; (8009918 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d018      	beq.n	80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a1a      	ldr	r2, [pc, #104]	; (800991c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d013      	beq.n	80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a18      	ldr	r2, [pc, #96]	; (8009920 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00e      	beq.n	80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a19      	ldr	r2, [pc, #100]	; (800992c <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d009      	beq.n	80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a18      	ldr	r2, [pc, #96]	; (8009934 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d004      	beq.n	80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a17      	ldr	r2, [pc, #92]	; (8009938 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d10c      	bne.n	80098fa <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	40010000 	.word	0x40010000
 8009918:	40000400 	.word	0x40000400
 800991c:	40000800 	.word	0x40000800
 8009920:	40000c00 	.word	0x40000c00
 8009924:	40001000 	.word	0x40001000
 8009928:	40001400 	.word	0x40001400
 800992c:	40010400 	.word	0x40010400
 8009930:	080104b4 	.word	0x080104b4
 8009934:	40014000 	.word	0x40014000
 8009938:	40001800 	.word	0x40001800

0800993c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a5e      	ldr	r2, [pc, #376]	; (8009ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d009      	beq.n	8009968 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a5c      	ldr	r2, [pc, #368]	; (8009acc <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d004      	beq.n	8009968 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800995e:	f240 71ee 	movw	r1, #2030	; 0x7ee
 8009962:	485b      	ldr	r0, [pc, #364]	; (8009ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009964:	f7f9 f90d 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009970:	d008      	beq.n	8009984 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d004      	beq.n	8009984 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800997a:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800997e:	4854      	ldr	r0, [pc, #336]	; (8009ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009980:	f7f9 f8ff 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800998c:	d008      	beq.n	80099a0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d004      	beq.n	80099a0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009996:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800999a:	484d      	ldr	r0, [pc, #308]	; (8009ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800999c:	f7f9 f8f1 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d013      	beq.n	80099d0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b0:	d00e      	beq.n	80099d0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ba:	d009      	beq.n	80099d0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099c4:	d004      	beq.n	80099d0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80099c6:	f240 71f1 	movw	r1, #2033	; 0x7f1
 80099ca:	4841      	ldr	r0, [pc, #260]	; (8009ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80099cc:	f7f9 f8d9 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	2bff      	cmp	r3, #255	; 0xff
 80099d6:	d904      	bls.n	80099e2 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80099d8:	f240 71f2 	movw	r1, #2034	; 0x7f2
 80099dc:	483c      	ldr	r0, [pc, #240]	; (8009ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80099de:	f7f9 f8d0 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ea:	d008      	beq.n	80099fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d004      	beq.n	80099fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80099f4:	f240 71f3 	movw	r1, #2035	; 0x7f3
 80099f8:	4835      	ldr	r0, [pc, #212]	; (8009ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80099fa:	f7f9 f8c2 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d009      	beq.n	8009a1a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a0e:	d004      	beq.n	8009a1a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009a10:	f240 71f4 	movw	r1, #2036	; 0x7f4
 8009a14:	482e      	ldr	r0, [pc, #184]	; (8009ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009a16:	f7f9 f8b4 	bl	8002b82 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a22:	d008      	beq.n	8009a36 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d004      	beq.n	8009a36 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009a2c:	f240 71f5 	movw	r1, #2037	; 0x7f5
 8009a30:	4827      	ldr	r0, [pc, #156]	; (8009ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009a32:	f7f9 f8a6 	bl	8002b82 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d101      	bne.n	8009a44 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8009a40:	2302      	movs	r3, #2
 8009a42:	e03d      	b.n	8009ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	40010000 	.word	0x40010000
 8009acc:	40010400 	.word	0x40010400
 8009ad0:	080104b4 	.word	0x080104b4

08009ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e0be      	b.n	8009c8c <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d03b      	beq.n	8009b8e <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a5e      	ldr	r2, [pc, #376]	; (8009c94 <HAL_UART_Init+0x198>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d01d      	beq.n	8009b5c <HAL_UART_Init+0x60>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a5c      	ldr	r2, [pc, #368]	; (8009c98 <HAL_UART_Init+0x19c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d018      	beq.n	8009b5c <HAL_UART_Init+0x60>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a5b      	ldr	r2, [pc, #364]	; (8009c9c <HAL_UART_Init+0x1a0>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d013      	beq.n	8009b5c <HAL_UART_Init+0x60>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a59      	ldr	r2, [pc, #356]	; (8009ca0 <HAL_UART_Init+0x1a4>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d00e      	beq.n	8009b5c <HAL_UART_Init+0x60>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a58      	ldr	r2, [pc, #352]	; (8009ca4 <HAL_UART_Init+0x1a8>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d009      	beq.n	8009b5c <HAL_UART_Init+0x60>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a56      	ldr	r2, [pc, #344]	; (8009ca8 <HAL_UART_Init+0x1ac>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d004      	beq.n	8009b5c <HAL_UART_Init+0x60>
 8009b52:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8009b56:	4855      	ldr	r0, [pc, #340]	; (8009cac <HAL_UART_Init+0x1b0>)
 8009b58:	f7f9 f813 	bl	8002b82 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d037      	beq.n	8009bd4 <HAL_UART_Init+0xd8>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b6c:	d032      	beq.n	8009bd4 <HAL_UART_Init+0xd8>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b76:	d02d      	beq.n	8009bd4 <HAL_UART_Init+0xd8>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b80:	d028      	beq.n	8009bd4 <HAL_UART_Init+0xd8>
 8009b82:	f240 1173 	movw	r1, #371	; 0x173
 8009b86:	4849      	ldr	r0, [pc, #292]	; (8009cac <HAL_UART_Init+0x1b0>)
 8009b88:	f7f8 fffb 	bl	8002b82 <assert_failed>
 8009b8c:	e022      	b.n	8009bd4 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a40      	ldr	r2, [pc, #256]	; (8009c94 <HAL_UART_Init+0x198>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d01d      	beq.n	8009bd4 <HAL_UART_Init+0xd8>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a3e      	ldr	r2, [pc, #248]	; (8009c98 <HAL_UART_Init+0x19c>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d018      	beq.n	8009bd4 <HAL_UART_Init+0xd8>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a3d      	ldr	r2, [pc, #244]	; (8009c9c <HAL_UART_Init+0x1a0>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d013      	beq.n	8009bd4 <HAL_UART_Init+0xd8>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a3b      	ldr	r2, [pc, #236]	; (8009ca0 <HAL_UART_Init+0x1a4>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d00e      	beq.n	8009bd4 <HAL_UART_Init+0xd8>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a3a      	ldr	r2, [pc, #232]	; (8009ca4 <HAL_UART_Init+0x1a8>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d009      	beq.n	8009bd4 <HAL_UART_Init+0xd8>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a38      	ldr	r2, [pc, #224]	; (8009ca8 <HAL_UART_Init+0x1ac>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d004      	beq.n	8009bd4 <HAL_UART_Init+0xd8>
 8009bca:	f240 1177 	movw	r1, #375	; 0x177
 8009bce:	4837      	ldr	r0, [pc, #220]	; (8009cac <HAL_UART_Init+0x1b0>)
 8009bd0:	f7f8 ffd7 	bl	8002b82 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d009      	beq.n	8009bf0 <HAL_UART_Init+0xf4>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009be4:	d004      	beq.n	8009bf0 <HAL_UART_Init+0xf4>
 8009be6:	f240 1179 	movw	r1, #377	; 0x179
 8009bea:	4830      	ldr	r0, [pc, #192]	; (8009cac <HAL_UART_Init+0x1b0>)
 8009bec:	f7f8 ffc9 	bl	8002b82 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	69db      	ldr	r3, [r3, #28]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d009      	beq.n	8009c0c <HAL_UART_Init+0x110>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c00:	d004      	beq.n	8009c0c <HAL_UART_Init+0x110>
 8009c02:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8009c06:	4829      	ldr	r0, [pc, #164]	; (8009cac <HAL_UART_Init+0x1b0>)
 8009c08:	f7f8 ffbb 	bl	8002b82 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d106      	bne.n	8009c26 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7f9 fb83 	bl	800332c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2224      	movs	r2, #36	; 0x24
 8009c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68da      	ldr	r2, [r3, #12]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fc7e 	bl	800a540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	691a      	ldr	r2, [r3, #16]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	695a      	ldr	r2, [r3, #20]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	40011000 	.word	0x40011000
 8009c98:	40004400 	.word	0x40004400
 8009c9c:	40004800 	.word	0x40004800
 8009ca0:	40004c00 	.word	0x40004c00
 8009ca4:	40005000 	.word	0x40005000
 8009ca8:	40011400 	.word	0x40011400
 8009cac:	080104f0 	.word	0x080104f0

08009cb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b0ba      	sub	sp, #232	; 0xe8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ce6:	f003 030f 	and.w	r3, r3, #15
 8009cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10f      	bne.n	8009d16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cfa:	f003 0320 	and.w	r3, r3, #32
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d009      	beq.n	8009d16 <HAL_UART_IRQHandler+0x66>
 8009d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d06:	f003 0320 	and.w	r3, r3, #32
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fb5b 	bl	800a3ca <UART_Receive_IT>
      return;
 8009d14:	e256      	b.n	800a1c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 80de 	beq.w	8009edc <HAL_UART_IRQHandler+0x22c>
 8009d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d24:	f003 0301 	and.w	r3, r3, #1
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d106      	bne.n	8009d3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 80d1 	beq.w	8009edc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00b      	beq.n	8009d5e <HAL_UART_IRQHandler+0xae>
 8009d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d005      	beq.n	8009d5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d56:	f043 0201 	orr.w	r2, r3, #1
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d62:	f003 0304 	and.w	r3, r3, #4
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00b      	beq.n	8009d82 <HAL_UART_IRQHandler+0xd2>
 8009d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d005      	beq.n	8009d82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	f043 0202 	orr.w	r2, r3, #2
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d86:	f003 0302 	and.w	r3, r3, #2
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00b      	beq.n	8009da6 <HAL_UART_IRQHandler+0xf6>
 8009d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d005      	beq.n	8009da6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9e:	f043 0204 	orr.w	r2, r3, #4
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009daa:	f003 0308 	and.w	r3, r3, #8
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d011      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x126>
 8009db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009db6:	f003 0320 	and.w	r3, r3, #32
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d105      	bne.n	8009dca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d005      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	f043 0208 	orr.w	r2, r3, #8
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 81ed 	beq.w	800a1ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009de4:	f003 0320 	and.w	r3, r3, #32
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d008      	beq.n	8009dfe <HAL_UART_IRQHandler+0x14e>
 8009dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009df0:	f003 0320 	and.w	r3, r3, #32
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fae6 	bl	800a3ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e08:	2b40      	cmp	r3, #64	; 0x40
 8009e0a:	bf0c      	ite	eq
 8009e0c:	2301      	moveq	r3, #1
 8009e0e:	2300      	movne	r3, #0
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	f003 0308 	and.w	r3, r3, #8
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d103      	bne.n	8009e2a <HAL_UART_IRQHandler+0x17a>
 8009e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d04f      	beq.n	8009eca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f9ee 	bl	800a20c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e3a:	2b40      	cmp	r3, #64	; 0x40
 8009e3c:	d141      	bne.n	8009ec2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3314      	adds	r3, #20
 8009e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e4c:	e853 3f00 	ldrex	r3, [r3]
 8009e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	3314      	adds	r3, #20
 8009e66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e7a:	e841 2300 	strex	r3, r2, [r1]
 8009e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1d9      	bne.n	8009e3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d013      	beq.n	8009eba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e96:	4a7d      	ldr	r2, [pc, #500]	; (800a08c <HAL_UART_IRQHandler+0x3dc>)
 8009e98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fa f824 	bl	8003eec <HAL_DMA_Abort_IT>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d016      	beq.n	8009ed8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb8:	e00e      	b.n	8009ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f990 	bl	800a1e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec0:	e00a      	b.n	8009ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f98c 	bl	800a1e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec8:	e006      	b.n	8009ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f988 	bl	800a1e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009ed6:	e170      	b.n	800a1ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ed8:	bf00      	nop
    return;
 8009eda:	e16e      	b.n	800a1ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	f040 814a 	bne.w	800a17a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eea:	f003 0310 	and.w	r3, r3, #16
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f000 8143 	beq.w	800a17a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ef8:	f003 0310 	and.w	r3, r3, #16
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 813c 	beq.w	800a17a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f02:	2300      	movs	r3, #0
 8009f04:	60bb      	str	r3, [r7, #8]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60bb      	str	r3, [r7, #8]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	60bb      	str	r3, [r7, #8]
 8009f16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f22:	2b40      	cmp	r3, #64	; 0x40
 8009f24:	f040 80b4 	bne.w	800a090 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 8140 	beq.w	800a1be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f46:	429a      	cmp	r2, r3
 8009f48:	f080 8139 	bcs.w	800a1be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f58:	69db      	ldr	r3, [r3, #28]
 8009f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f5e:	f000 8088 	beq.w	800a072 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	330c      	adds	r3, #12
 8009f68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f70:	e853 3f00 	ldrex	r3, [r3]
 8009f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	330c      	adds	r3, #12
 8009f8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009f8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009f9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f9e:	e841 2300 	strex	r3, r2, [r1]
 8009fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1d9      	bne.n	8009f62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3314      	adds	r3, #20
 8009fb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fb8:	e853 3f00 	ldrex	r3, [r3]
 8009fbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fc0:	f023 0301 	bic.w	r3, r3, #1
 8009fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	3314      	adds	r3, #20
 8009fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009fd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009fda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009fde:	e841 2300 	strex	r3, r2, [r1]
 8009fe2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1e1      	bne.n	8009fae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3314      	adds	r3, #20
 8009ff0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ff4:	e853 3f00 	ldrex	r3, [r3]
 8009ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	3314      	adds	r3, #20
 800a00a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a00e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a010:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a014:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a01c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e3      	bne.n	8009fea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2220      	movs	r2, #32
 800a026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	330c      	adds	r3, #12
 800a036:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a03a:	e853 3f00 	ldrex	r3, [r3]
 800a03e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a042:	f023 0310 	bic.w	r3, r3, #16
 800a046:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	330c      	adds	r3, #12
 800a050:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a054:	65ba      	str	r2, [r7, #88]	; 0x58
 800a056:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a05a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a05c:	e841 2300 	strex	r3, r2, [r1]
 800a060:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1e3      	bne.n	800a030 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7f9 fecd 	bl	8003e0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f8b6 	bl	800a1f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a088:	e099      	b.n	800a1be <HAL_UART_IRQHandler+0x50e>
 800a08a:	bf00      	nop
 800a08c:	0800a2d3 	.word	0x0800a2d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a098:	b29b      	uxth	r3, r3
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 808b 	beq.w	800a1c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a0ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 8086 	beq.w	800a1c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	330c      	adds	r3, #12
 800a0bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c0:	e853 3f00 	ldrex	r3, [r3]
 800a0c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	330c      	adds	r3, #12
 800a0d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a0da:	647a      	str	r2, [r7, #68]	; 0x44
 800a0dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0e2:	e841 2300 	strex	r3, r2, [r1]
 800a0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1e3      	bne.n	800a0b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	3314      	adds	r3, #20
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	e853 3f00 	ldrex	r3, [r3]
 800a0fc:	623b      	str	r3, [r7, #32]
   return(result);
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	f023 0301 	bic.w	r3, r3, #1
 800a104:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3314      	adds	r3, #20
 800a10e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a112:	633a      	str	r2, [r7, #48]	; 0x30
 800a114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a11a:	e841 2300 	strex	r3, r2, [r1]
 800a11e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1e3      	bne.n	800a0ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2220      	movs	r2, #32
 800a12a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	330c      	adds	r3, #12
 800a13a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	e853 3f00 	ldrex	r3, [r3]
 800a142:	60fb      	str	r3, [r7, #12]
   return(result);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f023 0310 	bic.w	r3, r3, #16
 800a14a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	330c      	adds	r3, #12
 800a154:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a158:	61fa      	str	r2, [r7, #28]
 800a15a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15c:	69b9      	ldr	r1, [r7, #24]
 800a15e:	69fa      	ldr	r2, [r7, #28]
 800a160:	e841 2300 	strex	r3, r2, [r1]
 800a164:	617b      	str	r3, [r7, #20]
   return(result);
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1e3      	bne.n	800a134 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a16c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f83e 	bl	800a1f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a178:	e023      	b.n	800a1c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a182:	2b00      	cmp	r3, #0
 800a184:	d009      	beq.n	800a19a <HAL_UART_IRQHandler+0x4ea>
 800a186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a18a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f8b1 	bl	800a2fa <UART_Transmit_IT>
    return;
 800a198:	e014      	b.n	800a1c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00e      	beq.n	800a1c4 <HAL_UART_IRQHandler+0x514>
 800a1a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d008      	beq.n	800a1c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f8f1 	bl	800a39a <UART_EndTransmit_IT>
    return;
 800a1b8:	e004      	b.n	800a1c4 <HAL_UART_IRQHandler+0x514>
    return;
 800a1ba:	bf00      	nop
 800a1bc:	e002      	b.n	800a1c4 <HAL_UART_IRQHandler+0x514>
      return;
 800a1be:	bf00      	nop
 800a1c0:	e000      	b.n	800a1c4 <HAL_UART_IRQHandler+0x514>
      return;
 800a1c2:	bf00      	nop
  }
}
 800a1c4:	37e8      	adds	r7, #232	; 0xe8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop

0800a1cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b095      	sub	sp, #84	; 0x54
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	330c      	adds	r3, #12
 800a21a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a22a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	330c      	adds	r3, #12
 800a232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a234:	643a      	str	r2, [r7, #64]	; 0x40
 800a236:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a23a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a23c:	e841 2300 	strex	r3, r2, [r1]
 800a240:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e5      	bne.n	800a214 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3314      	adds	r3, #20
 800a24e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	e853 3f00 	ldrex	r3, [r3]
 800a256:	61fb      	str	r3, [r7, #28]
   return(result);
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	f023 0301 	bic.w	r3, r3, #1
 800a25e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3314      	adds	r3, #20
 800a266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a268:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a26a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a26e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a270:	e841 2300 	strex	r3, r2, [r1]
 800a274:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e5      	bne.n	800a248 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a280:	2b01      	cmp	r3, #1
 800a282:	d119      	bne.n	800a2b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	330c      	adds	r3, #12
 800a28a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	e853 3f00 	ldrex	r3, [r3]
 800a292:	60bb      	str	r3, [r7, #8]
   return(result);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	f023 0310 	bic.w	r3, r3, #16
 800a29a:	647b      	str	r3, [r7, #68]	; 0x44
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2a4:	61ba      	str	r2, [r7, #24]
 800a2a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a8:	6979      	ldr	r1, [r7, #20]
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	e841 2300 	strex	r3, r2, [r1]
 800a2b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e5      	bne.n	800a284 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a2c6:	bf00      	nop
 800a2c8:	3754      	adds	r7, #84	; 0x54
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b084      	sub	sp, #16
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7ff ff77 	bl	800a1e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2f2:	bf00      	nop
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b085      	sub	sp, #20
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b21      	cmp	r3, #33	; 0x21
 800a30c:	d13e      	bne.n	800a38c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a316:	d114      	bne.n	800a342 <UART_Transmit_IT+0x48>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d110      	bne.n	800a342 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a1b      	ldr	r3, [r3, #32]
 800a324:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a334:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	1c9a      	adds	r2, r3, #2
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	621a      	str	r2, [r3, #32]
 800a340:	e008      	b.n	800a354 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	1c59      	adds	r1, r3, #1
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	6211      	str	r1, [r2, #32]
 800a34c:	781a      	ldrb	r2, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a358:	b29b      	uxth	r3, r3
 800a35a:	3b01      	subs	r3, #1
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	4619      	mov	r1, r3
 800a362:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10f      	bne.n	800a388 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68da      	ldr	r2, [r3, #12]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a376:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68da      	ldr	r2, [r3, #12]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a386:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	e000      	b.n	800a38e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a38c:	2302      	movs	r3, #2
  }
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b082      	sub	sp, #8
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68da      	ldr	r2, [r3, #12]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2220      	movs	r2, #32
 800a3b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff ff06 	bl	800a1cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b08c      	sub	sp, #48	; 0x30
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b22      	cmp	r3, #34	; 0x22
 800a3dc:	f040 80ab 	bne.w	800a536 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3e8:	d117      	bne.n	800a41a <UART_Receive_IT+0x50>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d113      	bne.n	800a41a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	b29b      	uxth	r3, r3
 800a404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a408:	b29a      	uxth	r2, r3
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a412:	1c9a      	adds	r2, r3, #2
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	629a      	str	r2, [r3, #40]	; 0x28
 800a418:	e026      	b.n	800a468 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a420:	2300      	movs	r3, #0
 800a422:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a42c:	d007      	beq.n	800a43e <UART_Receive_IT+0x74>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10a      	bne.n	800a44c <UART_Receive_IT+0x82>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d106      	bne.n	800a44c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	b2da      	uxtb	r2, r3
 800a446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	e008      	b.n	800a45e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	b2db      	uxtb	r3, r3
 800a454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	3b01      	subs	r3, #1
 800a470:	b29b      	uxth	r3, r3
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	4619      	mov	r1, r3
 800a476:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d15a      	bne.n	800a532 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f022 0220 	bic.w	r2, r2, #32
 800a48a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68da      	ldr	r2, [r3, #12]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a49a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	695a      	ldr	r2, [r3, #20]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f022 0201 	bic.w	r2, r2, #1
 800a4aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2220      	movs	r2, #32
 800a4b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d135      	bne.n	800a528 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	330c      	adds	r3, #12
 800a4c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	e853 3f00 	ldrex	r3, [r3]
 800a4d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f023 0310 	bic.w	r3, r3, #16
 800a4d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	330c      	adds	r3, #12
 800a4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e2:	623a      	str	r2, [r7, #32]
 800a4e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e6:	69f9      	ldr	r1, [r7, #28]
 800a4e8:	6a3a      	ldr	r2, [r7, #32]
 800a4ea:	e841 2300 	strex	r3, r2, [r1]
 800a4ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1e5      	bne.n	800a4c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0310 	and.w	r3, r3, #16
 800a500:	2b10      	cmp	r3, #16
 800a502:	d10a      	bne.n	800a51a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a504:	2300      	movs	r3, #0
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff fe67 	bl	800a1f4 <HAL_UARTEx_RxEventCallback>
 800a526:	e002      	b.n	800a52e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7f6 fe65 	bl	80011f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	e002      	b.n	800a538 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	e000      	b.n	800a538 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a536:	2302      	movs	r3, #2
  }
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3730      	adds	r7, #48	; 0x30
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a544:	b09f      	sub	sp, #124	; 0x7c
 800a546:	af00      	add	r7, sp, #0
 800a548:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a54c:	685a      	ldr	r2, [r3, #4]
 800a54e:	4b9b      	ldr	r3, [pc, #620]	; (800a7bc <UART_SetConfig+0x27c>)
 800a550:	429a      	cmp	r2, r3
 800a552:	d904      	bls.n	800a55e <UART_SetConfig+0x1e>
 800a554:	f640 6156 	movw	r1, #3670	; 0xe56
 800a558:	4899      	ldr	r0, [pc, #612]	; (800a7c0 <UART_SetConfig+0x280>)
 800a55a:	f7f8 fb12 	bl	8002b82 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a55e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d009      	beq.n	800a57a <UART_SetConfig+0x3a>
 800a566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a56e:	d004      	beq.n	800a57a <UART_SetConfig+0x3a>
 800a570:	f640 6157 	movw	r1, #3671	; 0xe57
 800a574:	4892      	ldr	r0, [pc, #584]	; (800a7c0 <UART_SetConfig+0x280>)
 800a576:	f7f8 fb04 	bl	8002b82 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a57a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00e      	beq.n	800a5a0 <UART_SetConfig+0x60>
 800a582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a58a:	d009      	beq.n	800a5a0 <UART_SetConfig+0x60>
 800a58c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a594:	d004      	beq.n	800a5a0 <UART_SetConfig+0x60>
 800a596:	f640 6158 	movw	r1, #3672	; 0xe58
 800a59a:	4889      	ldr	r0, [pc, #548]	; (800a7c0 <UART_SetConfig+0x280>)
 800a59c:	f7f8 faf1 	bl	8002b82 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a5a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a2:	695a      	ldr	r2, [r3, #20]
 800a5a4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d103      	bne.n	800a5b6 <UART_SetConfig+0x76>
 800a5ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d104      	bne.n	800a5c0 <UART_SetConfig+0x80>
 800a5b6:	f640 6159 	movw	r1, #3673	; 0xe59
 800a5ba:	4881      	ldr	r0, [pc, #516]	; (800a7c0 <UART_SetConfig+0x280>)
 800a5bc:	f7f8 fae1 	bl	8002b82 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a5ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5cc:	68d9      	ldr	r1, [r3, #12]
 800a5ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	ea40 0301 	orr.w	r3, r0, r1
 800a5d6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5da:	689a      	ldr	r2, [r3, #8]
 800a5dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	431a      	orrs	r2, r3
 800a5e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ea:	69db      	ldr	r3, [r3, #28]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a5f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a5fa:	f021 010c 	bic.w	r1, r1, #12
 800a5fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a604:	430b      	orrs	r3, r1
 800a606:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a614:	6999      	ldr	r1, [r3, #24]
 800a616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	ea40 0301 	orr.w	r3, r0, r1
 800a61e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	4b67      	ldr	r3, [pc, #412]	; (800a7c4 <UART_SetConfig+0x284>)
 800a626:	429a      	cmp	r2, r3
 800a628:	d004      	beq.n	800a634 <UART_SetConfig+0xf4>
 800a62a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	4b66      	ldr	r3, [pc, #408]	; (800a7c8 <UART_SetConfig+0x288>)
 800a630:	429a      	cmp	r2, r3
 800a632:	d103      	bne.n	800a63c <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a634:	f7fb fc5a 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 800a638:	6778      	str	r0, [r7, #116]	; 0x74
 800a63a:	e002      	b.n	800a642 <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a63c:	f7fb fc42 	bl	8005ec4 <HAL_RCC_GetPCLK1Freq>
 800a640:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a64a:	f040 80c1 	bne.w	800a7d0 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a64e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a650:	461c      	mov	r4, r3
 800a652:	f04f 0500 	mov.w	r5, #0
 800a656:	4622      	mov	r2, r4
 800a658:	462b      	mov	r3, r5
 800a65a:	1891      	adds	r1, r2, r2
 800a65c:	6439      	str	r1, [r7, #64]	; 0x40
 800a65e:	415b      	adcs	r3, r3
 800a660:	647b      	str	r3, [r7, #68]	; 0x44
 800a662:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a666:	1912      	adds	r2, r2, r4
 800a668:	eb45 0303 	adc.w	r3, r5, r3
 800a66c:	f04f 0000 	mov.w	r0, #0
 800a670:	f04f 0100 	mov.w	r1, #0
 800a674:	00d9      	lsls	r1, r3, #3
 800a676:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a67a:	00d0      	lsls	r0, r2, #3
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	1911      	adds	r1, r2, r4
 800a682:	6639      	str	r1, [r7, #96]	; 0x60
 800a684:	416b      	adcs	r3, r5
 800a686:	667b      	str	r3, [r7, #100]	; 0x64
 800a688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	461a      	mov	r2, r3
 800a68e:	f04f 0300 	mov.w	r3, #0
 800a692:	1891      	adds	r1, r2, r2
 800a694:	63b9      	str	r1, [r7, #56]	; 0x38
 800a696:	415b      	adcs	r3, r3
 800a698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a69a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a69e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a6a2:	f7f6 fa4d 	bl	8000b40 <__aeabi_uldivmod>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4b48      	ldr	r3, [pc, #288]	; (800a7cc <UART_SetConfig+0x28c>)
 800a6ac:	fba3 2302 	umull	r2, r3, r3, r2
 800a6b0:	095b      	lsrs	r3, r3, #5
 800a6b2:	011e      	lsls	r6, r3, #4
 800a6b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6b6:	461c      	mov	r4, r3
 800a6b8:	f04f 0500 	mov.w	r5, #0
 800a6bc:	4622      	mov	r2, r4
 800a6be:	462b      	mov	r3, r5
 800a6c0:	1891      	adds	r1, r2, r2
 800a6c2:	6339      	str	r1, [r7, #48]	; 0x30
 800a6c4:	415b      	adcs	r3, r3
 800a6c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a6cc:	1912      	adds	r2, r2, r4
 800a6ce:	eb45 0303 	adc.w	r3, r5, r3
 800a6d2:	f04f 0000 	mov.w	r0, #0
 800a6d6:	f04f 0100 	mov.w	r1, #0
 800a6da:	00d9      	lsls	r1, r3, #3
 800a6dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a6e0:	00d0      	lsls	r0, r2, #3
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	1911      	adds	r1, r2, r4
 800a6e8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a6ea:	416b      	adcs	r3, r5
 800a6ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	f04f 0300 	mov.w	r3, #0
 800a6f8:	1891      	adds	r1, r2, r2
 800a6fa:	62b9      	str	r1, [r7, #40]	; 0x28
 800a6fc:	415b      	adcs	r3, r3
 800a6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a704:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a708:	f7f6 fa1a 	bl	8000b40 <__aeabi_uldivmod>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4b2e      	ldr	r3, [pc, #184]	; (800a7cc <UART_SetConfig+0x28c>)
 800a712:	fba3 1302 	umull	r1, r3, r3, r2
 800a716:	095b      	lsrs	r3, r3, #5
 800a718:	2164      	movs	r1, #100	; 0x64
 800a71a:	fb01 f303 	mul.w	r3, r1, r3
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	00db      	lsls	r3, r3, #3
 800a722:	3332      	adds	r3, #50	; 0x32
 800a724:	4a29      	ldr	r2, [pc, #164]	; (800a7cc <UART_SetConfig+0x28c>)
 800a726:	fba2 2303 	umull	r2, r3, r2, r3
 800a72a:	095b      	lsrs	r3, r3, #5
 800a72c:	005b      	lsls	r3, r3, #1
 800a72e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a732:	441e      	add	r6, r3
 800a734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a736:	4618      	mov	r0, r3
 800a738:	f04f 0100 	mov.w	r1, #0
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	1894      	adds	r4, r2, r2
 800a742:	623c      	str	r4, [r7, #32]
 800a744:	415b      	adcs	r3, r3
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
 800a748:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a74c:	1812      	adds	r2, r2, r0
 800a74e:	eb41 0303 	adc.w	r3, r1, r3
 800a752:	f04f 0400 	mov.w	r4, #0
 800a756:	f04f 0500 	mov.w	r5, #0
 800a75a:	00dd      	lsls	r5, r3, #3
 800a75c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a760:	00d4      	lsls	r4, r2, #3
 800a762:	4622      	mov	r2, r4
 800a764:	462b      	mov	r3, r5
 800a766:	1814      	adds	r4, r2, r0
 800a768:	653c      	str	r4, [r7, #80]	; 0x50
 800a76a:	414b      	adcs	r3, r1
 800a76c:	657b      	str	r3, [r7, #84]	; 0x54
 800a76e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	461a      	mov	r2, r3
 800a774:	f04f 0300 	mov.w	r3, #0
 800a778:	1891      	adds	r1, r2, r2
 800a77a:	61b9      	str	r1, [r7, #24]
 800a77c:	415b      	adcs	r3, r3
 800a77e:	61fb      	str	r3, [r7, #28]
 800a780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a784:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a788:	f7f6 f9da 	bl	8000b40 <__aeabi_uldivmod>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	4b0e      	ldr	r3, [pc, #56]	; (800a7cc <UART_SetConfig+0x28c>)
 800a792:	fba3 1302 	umull	r1, r3, r3, r2
 800a796:	095b      	lsrs	r3, r3, #5
 800a798:	2164      	movs	r1, #100	; 0x64
 800a79a:	fb01 f303 	mul.w	r3, r1, r3
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	00db      	lsls	r3, r3, #3
 800a7a2:	3332      	adds	r3, #50	; 0x32
 800a7a4:	4a09      	ldr	r2, [pc, #36]	; (800a7cc <UART_SetConfig+0x28c>)
 800a7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7aa:	095b      	lsrs	r3, r3, #5
 800a7ac:	f003 0207 	and.w	r2, r3, #7
 800a7b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4432      	add	r2, r6
 800a7b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a7b8:	e0c4      	b.n	800a944 <UART_SetConfig+0x404>
 800a7ba:	bf00      	nop
 800a7bc:	00a037a0 	.word	0x00a037a0
 800a7c0:	080104f0 	.word	0x080104f0
 800a7c4:	40011000 	.word	0x40011000
 800a7c8:	40011400 	.word	0x40011400
 800a7cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7d2:	461c      	mov	r4, r3
 800a7d4:	f04f 0500 	mov.w	r5, #0
 800a7d8:	4622      	mov	r2, r4
 800a7da:	462b      	mov	r3, r5
 800a7dc:	1891      	adds	r1, r2, r2
 800a7de:	6139      	str	r1, [r7, #16]
 800a7e0:	415b      	adcs	r3, r3
 800a7e2:	617b      	str	r3, [r7, #20]
 800a7e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a7e8:	1912      	adds	r2, r2, r4
 800a7ea:	eb45 0303 	adc.w	r3, r5, r3
 800a7ee:	f04f 0000 	mov.w	r0, #0
 800a7f2:	f04f 0100 	mov.w	r1, #0
 800a7f6:	00d9      	lsls	r1, r3, #3
 800a7f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a7fc:	00d0      	lsls	r0, r2, #3
 800a7fe:	4602      	mov	r2, r0
 800a800:	460b      	mov	r3, r1
 800a802:	eb12 0804 	adds.w	r8, r2, r4
 800a806:	eb43 0905 	adc.w	r9, r3, r5
 800a80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	4618      	mov	r0, r3
 800a810:	f04f 0100 	mov.w	r1, #0
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	f04f 0300 	mov.w	r3, #0
 800a81c:	008b      	lsls	r3, r1, #2
 800a81e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a822:	0082      	lsls	r2, r0, #2
 800a824:	4640      	mov	r0, r8
 800a826:	4649      	mov	r1, r9
 800a828:	f7f6 f98a 	bl	8000b40 <__aeabi_uldivmod>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	4b47      	ldr	r3, [pc, #284]	; (800a950 <UART_SetConfig+0x410>)
 800a832:	fba3 2302 	umull	r2, r3, r3, r2
 800a836:	095b      	lsrs	r3, r3, #5
 800a838:	011e      	lsls	r6, r3, #4
 800a83a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a83c:	4618      	mov	r0, r3
 800a83e:	f04f 0100 	mov.w	r1, #0
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	1894      	adds	r4, r2, r2
 800a848:	60bc      	str	r4, [r7, #8]
 800a84a:	415b      	adcs	r3, r3
 800a84c:	60fb      	str	r3, [r7, #12]
 800a84e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a852:	1812      	adds	r2, r2, r0
 800a854:	eb41 0303 	adc.w	r3, r1, r3
 800a858:	f04f 0400 	mov.w	r4, #0
 800a85c:	f04f 0500 	mov.w	r5, #0
 800a860:	00dd      	lsls	r5, r3, #3
 800a862:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a866:	00d4      	lsls	r4, r2, #3
 800a868:	4622      	mov	r2, r4
 800a86a:	462b      	mov	r3, r5
 800a86c:	1814      	adds	r4, r2, r0
 800a86e:	64bc      	str	r4, [r7, #72]	; 0x48
 800a870:	414b      	adcs	r3, r1
 800a872:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	4618      	mov	r0, r3
 800a87a:	f04f 0100 	mov.w	r1, #0
 800a87e:	f04f 0200 	mov.w	r2, #0
 800a882:	f04f 0300 	mov.w	r3, #0
 800a886:	008b      	lsls	r3, r1, #2
 800a888:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a88c:	0082      	lsls	r2, r0, #2
 800a88e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a892:	f7f6 f955 	bl	8000b40 <__aeabi_uldivmod>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	4b2d      	ldr	r3, [pc, #180]	; (800a950 <UART_SetConfig+0x410>)
 800a89c:	fba3 1302 	umull	r1, r3, r3, r2
 800a8a0:	095b      	lsrs	r3, r3, #5
 800a8a2:	2164      	movs	r1, #100	; 0x64
 800a8a4:	fb01 f303 	mul.w	r3, r1, r3
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	011b      	lsls	r3, r3, #4
 800a8ac:	3332      	adds	r3, #50	; 0x32
 800a8ae:	4a28      	ldr	r2, [pc, #160]	; (800a950 <UART_SetConfig+0x410>)
 800a8b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b4:	095b      	lsrs	r3, r3, #5
 800a8b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8ba:	441e      	add	r6, r3
 800a8bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f04f 0100 	mov.w	r1, #0
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	1894      	adds	r4, r2, r2
 800a8ca:	603c      	str	r4, [r7, #0]
 800a8cc:	415b      	adcs	r3, r3
 800a8ce:	607b      	str	r3, [r7, #4]
 800a8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d4:	1812      	adds	r2, r2, r0
 800a8d6:	eb41 0303 	adc.w	r3, r1, r3
 800a8da:	f04f 0400 	mov.w	r4, #0
 800a8de:	f04f 0500 	mov.w	r5, #0
 800a8e2:	00dd      	lsls	r5, r3, #3
 800a8e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a8e8:	00d4      	lsls	r4, r2, #3
 800a8ea:	4622      	mov	r2, r4
 800a8ec:	462b      	mov	r3, r5
 800a8ee:	eb12 0a00 	adds.w	sl, r2, r0
 800a8f2:	eb43 0b01 	adc.w	fp, r3, r1
 800a8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f04f 0100 	mov.w	r1, #0
 800a900:	f04f 0200 	mov.w	r2, #0
 800a904:	f04f 0300 	mov.w	r3, #0
 800a908:	008b      	lsls	r3, r1, #2
 800a90a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a90e:	0082      	lsls	r2, r0, #2
 800a910:	4650      	mov	r0, sl
 800a912:	4659      	mov	r1, fp
 800a914:	f7f6 f914 	bl	8000b40 <__aeabi_uldivmod>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4b0c      	ldr	r3, [pc, #48]	; (800a950 <UART_SetConfig+0x410>)
 800a91e:	fba3 1302 	umull	r1, r3, r3, r2
 800a922:	095b      	lsrs	r3, r3, #5
 800a924:	2164      	movs	r1, #100	; 0x64
 800a926:	fb01 f303 	mul.w	r3, r1, r3
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	011b      	lsls	r3, r3, #4
 800a92e:	3332      	adds	r3, #50	; 0x32
 800a930:	4a07      	ldr	r2, [pc, #28]	; (800a950 <UART_SetConfig+0x410>)
 800a932:	fba2 2303 	umull	r2, r3, r2, r3
 800a936:	095b      	lsrs	r3, r3, #5
 800a938:	f003 020f 	and.w	r2, r3, #15
 800a93c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4432      	add	r2, r6
 800a942:	609a      	str	r2, [r3, #8]
}
 800a944:	bf00      	nop
 800a946:	377c      	adds	r7, #124	; 0x7c
 800a948:	46bd      	mov	sp, r7
 800a94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94e:	bf00      	nop
 800a950:	51eb851f 	.word	0x51eb851f

0800a954 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a95c:	2300      	movs	r3, #0
 800a95e:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800a960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d105      	bne.n	800a974 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800a968:	2101      	movs	r1, #1
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f001 f824 	bl	800b9b8 <VL53L1_data_init>
 800a970:	4603      	mov	r3, r0
 800a972:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 800a974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d103      	bne.n	800a984 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a984:	2300      	movs	r3, #0
 800a986:	73bb      	strb	r3, [r7, #14]
 800a988:	e012      	b.n	800a9b0 <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 800a98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d112      	bne.n	800a9b8 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	b29b      	uxth	r3, r3
 800a996:	2201      	movs	r2, #1
 800a998:	4619      	mov	r1, r3
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fbd3 	bl	800b146 <VL53L1_SetLimitCheckEnable>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	73bb      	strb	r3, [r7, #14]
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d9e9      	bls.n	800a98a <VL53L1_DataInit+0x36>
 800a9b6:	e000      	b.n	800a9ba <VL53L1_DataInit+0x66>
		else
			break;
 800a9b8:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b084      	sub	sp, #16
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2203      	movs	r2, #3
 800a9d6:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800a9da:	2320      	movs	r3, #32
 800a9dc:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	7bba      	ldrb	r2, [r7, #14]
 800a9e2:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800a9e4:	2108      	movs	r1, #8
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f8f9 	bl	800abde <VL53L1_SetPresetMode>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2208      	movs	r2, #8
 800a9f4:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800a9f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800aa10:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f004 ffe0 	bl	800f9da <VL53L1_poll_for_boot_completion>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800aa1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b087      	sub	sp, #28
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	603a      	str	r2, [r7, #0]
 800aa36:	71fb      	strb	r3, [r7, #7]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800aa40:	4a2c      	ldr	r2, [pc, #176]	; (800aaf4 <ComputeDevicePresetMode+0xc8>)
 800aa42:	f107 0310 	add.w	r3, r7, #16
 800aa46:	6812      	ldr	r2, [r2, #0]
 800aa48:	4611      	mov	r1, r2
 800aa4a:	8019      	strh	r1, [r3, #0]
 800aa4c:	3302      	adds	r3, #2
 800aa4e:	0c12      	lsrs	r2, r2, #16
 800aa50:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800aa52:	4a29      	ldr	r2, [pc, #164]	; (800aaf8 <ComputeDevicePresetMode+0xcc>)
 800aa54:	f107 030c 	add.w	r3, r7, #12
 800aa58:	6812      	ldr	r2, [r2, #0]
 800aa5a:	4611      	mov	r1, r2
 800aa5c:	8019      	strh	r1, [r3, #0]
 800aa5e:	3302      	adds	r3, #2
 800aa60:	0c12      	lsrs	r2, r2, #16
 800aa62:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800aa64:	4a25      	ldr	r2, [pc, #148]	; (800aafc <ComputeDevicePresetMode+0xd0>)
 800aa66:	f107 0308 	add.w	r3, r7, #8
 800aa6a:	6812      	ldr	r2, [r2, #0]
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	8019      	strh	r1, [r3, #0]
 800aa70:	3302      	adds	r3, #2
 800aa72:	0c12      	lsrs	r2, r2, #16
 800aa74:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800aa7c:	79bb      	ldrb	r3, [r7, #6]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d002      	beq.n	800aa88 <ComputeDevicePresetMode+0x5c>
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d003      	beq.n	800aa8e <ComputeDevicePresetMode+0x62>
 800aa86:	e005      	b.n	800aa94 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	75bb      	strb	r3, [r7, #22]
		break;
 800aa8c:	e004      	b.n	800aa98 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	75bb      	strb	r3, [r7, #22]
		break;
 800aa92:	e001      	b.n	800aa98 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 800aa94:	2302      	movs	r3, #2
 800aa96:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800aa98:	79fb      	ldrb	r3, [r7, #7]
 800aa9a:	2b08      	cmp	r3, #8
 800aa9c:	d017      	beq.n	800aace <ComputeDevicePresetMode+0xa2>
 800aa9e:	2b08      	cmp	r3, #8
 800aaa0:	dc1e      	bgt.n	800aae0 <ComputeDevicePresetMode+0xb4>
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d00a      	beq.n	800aabc <ComputeDevicePresetMode+0x90>
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	d11a      	bne.n	800aae0 <ComputeDevicePresetMode+0xb4>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800aaaa:	7dbb      	ldrb	r3, [r7, #22]
 800aaac:	f107 0218 	add.w	r2, r7, #24
 800aab0:	4413      	add	r3, r2
 800aab2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	701a      	strb	r2, [r3, #0]
		break;
 800aaba:	e013      	b.n	800aae4 <ComputeDevicePresetMode+0xb8>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800aabc:	7dbb      	ldrb	r3, [r7, #22]
 800aabe:	f107 0218 	add.w	r2, r7, #24
 800aac2:	4413      	add	r3, r2
 800aac4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	701a      	strb	r2, [r3, #0]
		break;
 800aacc:	e00a      	b.n	800aae4 <ComputeDevicePresetMode+0xb8>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800aace:	7dbb      	ldrb	r3, [r7, #22]
 800aad0:	f107 0218 	add.w	r2, r7, #24
 800aad4:	4413      	add	r3, r2
 800aad6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	701a      	strb	r2, [r3, #0]
		break;
 800aade:	e001      	b.n	800aae4 <ComputeDevicePresetMode+0xb8>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800aae0:	23f8      	movs	r3, #248	; 0xf8
 800aae2:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800aae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	371c      	adds	r7, #28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	08010558 	.word	0x08010558
 800aaf8:	0801055c 	.word	0x0801055c
 800aafc:	08010560 	.word	0x08010560

0800ab00 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800ab00:	b5b0      	push	{r4, r5, r7, lr}
 800ab02:	b08e      	sub	sp, #56	; 0x38
 800ab04:	af04      	add	r7, sp, #16
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	607b      	str	r3, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	72fb      	strb	r3, [r7, #11]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ab12:	2300      	movs	r3, #0
 800ab14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800ab28:	7afb      	ldrb	r3, [r7, #11]
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d002      	beq.n	800ab34 <SetPresetMode+0x34>
 800ab2e:	7afb      	ldrb	r3, [r7, #11]
 800ab30:	2b08      	cmp	r3, #8
 800ab32:	d103      	bne.n	800ab3c <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800ab34:	2340      	movs	r3, #64	; 0x40
 800ab36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab3a:	e002      	b.n	800ab42 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800ab3c:	2320      	movs	r3, #32
 800ab3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800ab42:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800ab46:	7ab9      	ldrb	r1, [r7, #10]
 800ab48:	7afb      	ldrb	r3, [r7, #11]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7ff ff6e 	bl	800aa2c <ComputeDevicePresetMode>
 800ab50:	4603      	mov	r3, r0
 800ab52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800ab56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d112      	bne.n	800ab84 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800ab5e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800ab62:	f107 001c 	add.w	r0, r7, #28
 800ab66:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800ab6a:	f107 0314 	add.w	r3, r7, #20
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	f107 0318 	add.w	r3, r7, #24
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	4603      	mov	r3, r0
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f001 f9dd 	bl	800bf38 <VL53L1_get_preset_mode_timing_cfg>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800ab84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d112      	bne.n	800abb2 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 800ab8c:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800ab90:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800ab92:	69fd      	ldr	r5, [r7, #28]
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	6879      	ldr	r1, [r7, #4]
 800ab9a:	9102      	str	r1, [sp, #8]
 800ab9c:	9201      	str	r2, [sp, #4]
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	462b      	mov	r3, r5
 800aba2:	4622      	mov	r2, r4
 800aba4:	4601      	mov	r1, r0
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f001 fa70 	bl	800c08c <VL53L1_set_preset_mode>
 800abac:	4603      	mov	r3, r0
 800abae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800abb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d103      	bne.n	800abc2 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800abc0:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800abc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d103      	bne.n	800abd2 <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	7afa      	ldrb	r2, [r7, #11]
 800abce:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800abd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3728      	adds	r7, #40	; 0x28
 800abda:	46bd      	mov	sp, r7
 800abdc:	bdb0      	pop	{r4, r5, r7, pc}

0800abde <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	460b      	mov	r3, r1
 800abe8:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800abea:	2300      	movs	r3, #0
 800abec:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800abee:	2303      	movs	r3, #3
 800abf0:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f003 fd2c 	bl	800e650 <VL53L1_low_power_auto_data_init>
 800abf8:	4603      	mov	r3, r0
 800abfa:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 800abfc:	7bba      	ldrb	r2, [r7, #14]
 800abfe:	78f9      	ldrb	r1, [r7, #3]
 800ac00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7ff ff7b 	bl	800ab00 <SetPresetMode>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800ac0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d117      	bne.n	800ac46 <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800ac16:	78fb      	ldrb	r3, [r7, #3]
 800ac18:	2b04      	cmp	r3, #4
 800ac1a:	d005      	beq.n	800ac28 <VL53L1_SetPresetMode+0x4a>
 800ac1c:	78fb      	ldrb	r3, [r7, #3]
 800ac1e:	2b03      	cmp	r3, #3
 800ac20:	d002      	beq.n	800ac28 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800ac22:	78fb      	ldrb	r3, [r7, #3]
 800ac24:	2b08      	cmp	r3, #8
 800ac26:	d107      	bne.n	800ac38 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800ac28:	f24a 0128 	movw	r1, #41000	; 0xa028
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f891 	bl	800ad54 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800ac32:	4603      	mov	r3, r0
 800ac34:	73fb      	strb	r3, [r7, #15]
 800ac36:	e006      	b.n	800ac46 <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800ac38:	f248 2135 	movw	r1, #33333	; 0x8235
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f889 	bl	800ad54 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800ac42:	4603      	mov	r3, r0
 800ac44:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ac46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d106      	bne.n	800ac5c <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800ac4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fa0a 	bl	800b06c <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b088      	sub	sp, #32
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ac74:	2300      	movs	r3, #0
 800ac76:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800ac8a:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800ac8c:	78fb      	ldrb	r3, [r7, #3]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d008      	beq.n	800aca4 <VL53L1_SetDistanceMode+0x3c>
 800ac92:	78fb      	ldrb	r3, [r7, #3]
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d005      	beq.n	800aca4 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800ac98:	78fb      	ldrb	r3, [r7, #3]
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d002      	beq.n	800aca4 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800ac9e:	f06f 0303 	mvn.w	r3, #3
 800aca2:	e052      	b.n	800ad4a <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 800aca4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d107      	bne.n	800acbc <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800acac:	f107 0308 	add.w	r3, r7, #8
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 f8e9 	bl	800be8a <VL53L1_get_user_zone>
 800acb8:	4603      	mov	r3, r0
 800acba:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	695b      	ldr	r3, [r3, #20]
 800acc0:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800acc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10a      	bne.n	800ace0 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800acca:	f107 0314 	add.w	r3, r7, #20
 800acce:	f107 0210 	add.w	r2, r7, #16
 800acd2:	f107 010c 	add.w	r1, r7, #12
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f001 f812 	bl	800bd00 <VL53L1_get_timeouts_us>
 800acdc:	4603      	mov	r3, r0
 800acde:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800ace0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d107      	bne.n	800acf8 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 800ace8:	78fa      	ldrb	r2, [r7, #3]
 800acea:	7fb9      	ldrb	r1, [r7, #30]
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff ff06 	bl	800ab00 <SetPresetMode>
 800acf4:	4603      	mov	r3, r0
 800acf6:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800acf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d103      	bne.n	800ad08 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	78fa      	ldrb	r2, [r7, #3]
 800ad04:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ad08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10e      	bne.n	800ad2e <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800ad10:	68f9      	ldr	r1, [r7, #12]
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 ffba 	bl	800bc90 <VL53L1_set_timeouts_us>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800ad20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d102      	bne.n	800ad2e <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800ad2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d107      	bne.n	800ad46 <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800ad36:	f107 0308 	add.w	r3, r7, #8
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f001 f881 	bl	800be44 <VL53L1_set_user_zone>
 800ad42:	4603      	mov	r3, r0
 800ad44:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800ad46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3720      	adds	r7, #32
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08c      	sub	sp, #48	; 0x30
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 800ad74:	2300      	movs	r3, #0
 800ad76:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800ad78:	4b64      	ldr	r3, [pc, #400]	; (800af0c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 800ad7a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	4a64      	ldr	r2, [pc, #400]	; (800af10 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d902      	bls.n	800ad8a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ad84:	23fc      	movs	r3, #252	; 0xfc
 800ad86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800ad8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d109      	bne.n	800ada6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800ad92:	f107 031a 	add.w	r3, r7, #26
 800ad96:	461a      	mov	r2, r3
 800ad98:	2105      	movs	r1, #5
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fa8d 	bl	800b2ba <VL53L1_GetSequenceStepEnable>
 800ada0:	4603      	mov	r3, r0
 800ada2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ada6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d109      	bne.n	800adc2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800adae:	f107 0319 	add.w	r3, r7, #25
 800adb2:	461a      	mov	r2, r3
 800adb4:	2106      	movs	r1, #6
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fa7f 	bl	800b2ba <VL53L1_GetSequenceStepEnable>
 800adbc:	4603      	mov	r3, r0
 800adbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800adc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10b      	bne.n	800ade2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800adca:	f107 0314 	add.w	r3, r7, #20
 800adce:	f107 0210 	add.w	r2, r7, #16
 800add2:	f107 010c 	add.w	r1, r7, #12
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 ff92 	bl	800bd00 <VL53L1_get_timeouts_us>
 800addc:	4603      	mov	r3, r0
 800adde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800ade2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f040 8081 	bne.w	800aeee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800adf2:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800adf8:	2301      	movs	r3, #1
 800adfa:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800adfc:	7efb      	ldrb	r3, [r7, #27]
 800adfe:	2b08      	cmp	r3, #8
 800ae00:	d026      	beq.n	800ae50 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800ae02:	2b08      	cmp	r3, #8
 800ae04:	dc43      	bgt.n	800ae8e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800ae06:	2b03      	cmp	r3, #3
 800ae08:	d00f      	beq.n	800ae2a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 800ae0a:	2b04      	cmp	r3, #4
 800ae0c:	d13f      	bne.n	800ae8e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800ae0e:	7ebb      	ldrb	r3, [r7, #26]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d002      	beq.n	800ae1a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800ae14:	7e7b      	ldrb	r3, [r7, #25]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d103      	bne.n	800ae22 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 800ae1a:	f241 3388 	movw	r3, #5000	; 0x1388
 800ae1e:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800ae20:	e038      	b.n	800ae94 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800ae22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae26:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800ae28:	e034      	b.n	800ae94 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800ae30:	7ebb      	ldrb	r3, [r7, #26]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d002      	beq.n	800ae3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800ae36:	7e7b      	ldrb	r3, [r7, #25]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d103      	bne.n	800ae44 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 800ae3c:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800ae40:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae42:	e002      	b.n	800ae4a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800ae44:	f245 4360 	movw	r3, #21600	; 0x5460
 800ae48:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800ae4e:	e021      	b.n	800ae94 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800ae56:	23f5      	movs	r3, #245	; 0xf5
 800ae58:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800ae5a:	f107 0308 	add.w	r3, r7, #8
 800ae5e:	461a      	mov	r2, r3
 800ae60:	f248 0136 	movw	r1, #32822	; 0x8036
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f001 ff75 	bl	800cd54 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	dd07      	ble.n	800ae80 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	22f5      	movs	r2, #245	; 0xf5
 800ae74:	fb02 f303 	mul.w	r3, r2, r3
 800ae78:	461a      	mov	r2, r3
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800ae86:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800ae88:	2302      	movs	r3, #2
 800ae8a:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800ae8c:	e002      	b.n	800ae94 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800ae8e:	23f8      	movs	r3, #248	; 0xf8
 800ae90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d803      	bhi.n	800aea4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800ae9c:	23fc      	movs	r3, #252	; 0xfc
 800ae9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aea2:	e003      	b.n	800aeac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800aea4:	683a      	ldr	r2, [r7, #0]
 800aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea8:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800aeaa:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800aeac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d11c      	bne.n	800aeee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	69fa      	ldr	r2, [r7, #28]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d203      	bcs.n	800aec4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800aebc:	23fc      	movs	r3, #252	; 0xfc
 800aebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aec2:	e00d      	b.n	800aee0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aecc:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800aece:	68f9      	ldr	r1, [r7, #12]
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fedb 	bl	800bc90 <VL53L1_set_timeouts_us>
 800aeda:	4603      	mov	r3, r0
 800aedc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800aee0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d102      	bne.n	800aeee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800aeee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d103      	bne.n	800aefe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aefe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800af02:	4618      	mov	r0, r3
 800af04:	3730      	adds	r7, #48	; 0x30
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	00086470 	.word	0x00086470
 800af10:	00989680 	.word	0x00989680

0800af14 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08c      	sub	sp, #48	; 0x30
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800af1e:	2300      	movs	r3, #0
 800af20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800af24:	2300      	movs	r3, #0
 800af26:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800af34:	2300      	movs	r3, #0
 800af36:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2200      	movs	r2, #0
 800af40:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800af42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af46:	2b00      	cmp	r3, #0
 800af48:	d109      	bne.n	800af5e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800af4a:	f107 031b 	add.w	r3, r7, #27
 800af4e:	461a      	mov	r2, r3
 800af50:	2105      	movs	r1, #5
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 f9b1 	bl	800b2ba <VL53L1_GetSequenceStepEnable>
 800af58:	4603      	mov	r3, r0
 800af5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800af5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af62:	2b00      	cmp	r3, #0
 800af64:	d109      	bne.n	800af7a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800af66:	f107 031a 	add.w	r3, r7, #26
 800af6a:	461a      	mov	r2, r3
 800af6c:	2106      	movs	r1, #6
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f9a3 	bl	800b2ba <VL53L1_GetSequenceStepEnable>
 800af74:	4603      	mov	r3, r0
 800af76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800af7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d10b      	bne.n	800af9a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800af82:	f107 0310 	add.w	r3, r7, #16
 800af86:	f107 0214 	add.w	r2, r7, #20
 800af8a:	f107 010c 	add.w	r1, r7, #12
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 feb6 	bl	800bd00 <VL53L1_get_timeouts_us>
 800af94:	4603      	mov	r3, r0
 800af96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800af9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d156      	bne.n	800b050 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800afa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 800afac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800afb0:	2b08      	cmp	r3, #8
 800afb2:	d02a      	beq.n	800b00a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 800afb4:	2b08      	cmp	r3, #8
 800afb6:	dc47      	bgt.n	800b048 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 800afb8:	2b03      	cmp	r3, #3
 800afba:	d012      	beq.n	800afe2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 800afbc:	2b04      	cmp	r3, #4
 800afbe:	d143      	bne.n	800b048 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800afc0:	7efb      	ldrb	r3, [r7, #27]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d002      	beq.n	800afcc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800afc6:	7ebb      	ldrb	r3, [r7, #26]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d105      	bne.n	800afd8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800afd2:	3308      	adds	r3, #8
 800afd4:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800afd6:	e03c      	b.n	800b052 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800afde:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800afe0:	e037      	b.n	800b052 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800afe2:	7efb      	ldrb	r3, [r7, #27]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d002      	beq.n	800afee <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 800afe8:	7ebb      	ldrb	r3, [r7, #26]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d106      	bne.n	800affc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800aff4:	3334      	adds	r3, #52	; 0x34
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800affa:	e02a      	b.n	800b052 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800b002:	3330      	adds	r3, #48	; 0x30
 800b004:	005b      	lsls	r3, r3, #1
 800b006:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b008:	e023      	b.n	800b052 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800b00a:	23f5      	movs	r3, #245	; 0xf5
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800b00e:	f107 0308 	add.w	r3, r7, #8
 800b012:	461a      	mov	r2, r3
 800b014:	f248 0136 	movw	r1, #32822	; 0x8036
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f001 fe9b 	bl	800cd54 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	dd07      	ble.n	800b034 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	22f5      	movs	r2, #245	; 0xf5
 800b028:	fb02 f303 	mul.w	r3, r2, r3
 800b02c:	461a      	mov	r2, r3
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	4413      	add	r3, r2
 800b032:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800b03a:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	005b      	lsls	r3, r3, #1
 800b040:	69fa      	ldr	r2, [r7, #28]
 800b042:	4413      	add	r3, r2
 800b044:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b046:	e004      	b.n	800b052 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800b048:	23f8      	movs	r3, #248	; 0xf8
 800b04a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b04e:	e000      	b.n	800b052 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 800b050:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800b052:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b056:	2b00      	cmp	r3, #0
 800b058:	d102      	bne.n	800b060 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b05e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b060:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b064:	4618      	mov	r0, r3
 800b066:	3730      	adds	r7, #48	; 0x30
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b076:	2300      	movs	r3, #0
 800b078:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	019b      	lsls	r3, r3, #6
 800b082:	4a09      	ldr	r2, [pc, #36]	; (800b0a8 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800b084:	fba2 2303 	umull	r2, r3, r2, r3
 800b088:	099b      	lsrs	r3, r3, #6
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	4413      	add	r3, r2
 800b08e:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800b090:	68b9      	ldr	r1, [r7, #8]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fdad 	bl	800bbf2 <VL53L1_set_inter_measurement_period_ms>
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800b09c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	10624dd3 	.word	0x10624dd3

0800b0ac <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800b0ba:	f107 0308 	add.w	r3, r7, #8
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fdbf 	bl	800bc44 <VL53L1_get_inter_measurement_period_ms>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	019b      	lsls	r3, r3, #6
 800b0d0:	4907      	ldr	r1, [pc, #28]	; (800b0f0 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800b0d2:	fba1 1303 	umull	r1, r3, r1, r3
 800b0d6:	099b      	lsrs	r3, r3, #6
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800b0e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	10624dd3 	.word	0x10624dd3

0800b0f4 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	607a      	str	r2, [r7, #4]
 800b100:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b102:	2300      	movs	r3, #0
 800b104:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b106:	897b      	ldrh	r3, [r7, #10]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d002      	beq.n	800b112 <SetLimitValue+0x1e>
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d009      	beq.n	800b124 <SetLimitValue+0x30>
 800b110:	e011      	b.n	800b136 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	0b9b      	lsrs	r3, r3, #14
 800b116:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800b118:	8abb      	ldrh	r3, [r7, #20]
 800b11a:	4619      	mov	r1, r3
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f001 f941 	bl	800c3a4 <VL53L1_set_lite_sigma_threshold>
		break;
 800b122:	e00a      	b.n	800b13a <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	0a5b      	lsrs	r3, r3, #9
 800b128:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800b12a:	8abb      	ldrh	r3, [r7, #20]
 800b12c:	4619      	mov	r1, r3
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f001 f964 	bl	800c3fc <VL53L1_set_lite_min_count_rate>
		break;
 800b134:	e001      	b.n	800b13a <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b136:	23fc      	movs	r3, #252	; 0xfc
 800b138:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b13a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3718      	adds	r7, #24
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	460b      	mov	r3, r1
 800b150:	807b      	strh	r3, [r7, #2]
 800b152:	4613      	mov	r3, r2
 800b154:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b156:	2300      	movs	r3, #0
 800b158:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b15e:	887b      	ldrh	r3, [r7, #2]
 800b160:	2b01      	cmp	r3, #1
 800b162:	d902      	bls.n	800b16a <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b164:	23fc      	movs	r3, #252	; 0xfc
 800b166:	73fb      	strb	r3, [r7, #15]
 800b168:	e014      	b.n	800b194 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800b16a:	787b      	ldrb	r3, [r7, #1]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d102      	bne.n	800b176 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800b170:	2300      	movs	r3, #0
 800b172:	60bb      	str	r3, [r7, #8]
 800b174:	e006      	b.n	800b184 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b176:	887b      	ldrh	r3, [r7, #2]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	33e0      	adds	r3, #224	; 0xe0
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800b184:	887b      	ldrh	r3, [r7, #2]
 800b186:	68ba      	ldr	r2, [r7, #8]
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7ff ffb2 	bl	800b0f4 <SetLimitValue>
 800b190:	4603      	mov	r3, r0
 800b192:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800b194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10c      	bne.n	800b1b6 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b19c:	787b      	ldrb	r3, [r7, #1]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	bf14      	ite	ne
 800b1a2:	2301      	movne	r3, #1
 800b1a4:	2300      	moveq	r3, #0
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	887b      	ldrh	r3, [r7, #2]
 800b1aa:	4611      	mov	r1, r2
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	460a      	mov	r2, r1
 800b1b2:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800b1b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b087      	sub	sp, #28
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	60f8      	str	r0, [r7, #12]
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	607a      	str	r2, [r7, #4]
 800b1ce:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b1d4:	897b      	ldrh	r3, [r7, #10]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d905      	bls.n	800b1e6 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b1da:	23fc      	movs	r3, #252	; 0xfc
 800b1dc:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	701a      	strb	r2, [r3, #0]
 800b1e4:	e008      	b.n	800b1f8 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b1e6:	897b      	ldrh	r3, [r7, #10]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800b1f0:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	7dba      	ldrb	r2, [r7, #22]
 800b1f6:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b1f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	371c      	adds	r7, #28
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b088      	sub	sp, #32
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	460b      	mov	r3, r1
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b216:	2300      	movs	r3, #0
 800b218:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b21e:	897b      	ldrh	r3, [r7, #10]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <VL53L1_GetLimitCheckValue+0x22>
 800b224:	2b01      	cmp	r3, #1
 800b226:	d00c      	beq.n	800b242 <VL53L1_GetLimitCheckValue+0x3a>
 800b228:	e017      	b.n	800b25a <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800b22a:	f107 0314 	add.w	r3, r7, #20
 800b22e:	4619      	mov	r1, r3
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f001 f8a1 	bl	800c378 <VL53L1_get_lite_sigma_threshold>
 800b236:	4603      	mov	r3, r0
 800b238:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800b23a:	8abb      	ldrh	r3, [r7, #20]
 800b23c:	039b      	lsls	r3, r3, #14
 800b23e:	61bb      	str	r3, [r7, #24]
		break;
 800b240:	e00d      	b.n	800b25e <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800b242:	f107 0316 	add.w	r3, r7, #22
 800b246:	4619      	mov	r1, r3
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f001 f8c1 	bl	800c3d0 <VL53L1_get_lite_min_count_rate>
 800b24e:	4603      	mov	r3, r0
 800b250:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800b252:	8afb      	ldrh	r3, [r7, #22]
 800b254:	025b      	lsls	r3, r3, #9
 800b256:	61bb      	str	r3, [r7, #24]
		break;
 800b258:	e001      	b.n	800b25e <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b25a:	23fc      	movs	r3, #252	; 0xfc
 800b25c:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800b25e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d123      	bne.n	800b2ae <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d110      	bne.n	800b28e <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800b26c:	897b      	ldrh	r3, [r7, #10]
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	33e0      	adds	r3, #224	; 0xe0
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	69ba      	ldr	r2, [r7, #24]
 800b27e:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b280:	897b      	ldrh	r3, [r7, #10]
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	4413      	add	r3, r2
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800b28c:	e00f      	b.n	800b2ae <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	69ba      	ldr	r2, [r7, #24]
 800b292:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b294:	897b      	ldrh	r3, [r7, #10]
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	33e0      	adds	r3, #224	; 0xe0
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	4413      	add	r3, r2
 800b29e:	69ba      	ldr	r2, [r7, #24]
 800b2a0:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b2a2:	897b      	ldrh	r3, [r7, #10]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800b2ae:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3720      	adds	r7, #32
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b086      	sub	sp, #24
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	607a      	str	r2, [r7, #4]
 800b2c6:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800b2cc:	7afb      	ldrb	r3, [r7, #11]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f000 fd7f 	bl	800bdd6 <VL53L1_get_sequence_config_bit>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800b2dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3718      	adds	r7, #24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	789b      	ldrb	r3, [r3, #2]
 800b2f8:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800b2fa:	7dbb      	ldrb	r3, [r7, #22]
 800b2fc:	2b40      	cmp	r3, #64	; 0x40
 800b2fe:	d002      	beq.n	800b306 <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fa6b 	bl	800b7dc <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800b30c:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 800b30e:	7d7b      	ldrb	r3, [r7, #21]
 800b310:	2b63      	cmp	r3, #99	; 0x63
 800b312:	dc12      	bgt.n	800b33a <VL53L1_StartMeasurement+0x52>
 800b314:	2b62      	cmp	r3, #98	; 0x62
 800b316:	da0d      	bge.n	800b334 <VL53L1_StartMeasurement+0x4c>
 800b318:	2b05      	cmp	r3, #5
 800b31a:	dc0e      	bgt.n	800b33a <VL53L1_StartMeasurement+0x52>
 800b31c:	2b04      	cmp	r3, #4
 800b31e:	da09      	bge.n	800b334 <VL53L1_StartMeasurement+0x4c>
 800b320:	2b02      	cmp	r3, #2
 800b322:	dc02      	bgt.n	800b32a <VL53L1_StartMeasurement+0x42>
 800b324:	2b00      	cmp	r3, #0
 800b326:	da05      	bge.n	800b334 <VL53L1_StartMeasurement+0x4c>
 800b328:	e007      	b.n	800b33a <VL53L1_StartMeasurement+0x52>
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d105      	bne.n	800b33a <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800b32e:	2300      	movs	r3, #0
 800b330:	75fb      	strb	r3, [r7, #23]
		break;
 800b332:	e004      	b.n	800b33e <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800b334:	23f2      	movs	r3, #242	; 0xf2
 800b336:	75fb      	strb	r3, [r7, #23]
		break;
 800b338:	e001      	b.n	800b33e <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800b33a:	23fd      	movs	r3, #253	; 0xfd
 800b33c:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800b33e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d11f      	bne.n	800b386 <VL53L1_StartMeasurement+0x9e>
 800b346:	7dbb      	ldrb	r3, [r7, #22]
 800b348:	2b40      	cmp	r3, #64	; 0x40
 800b34a:	d11c      	bne.n	800b386 <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b34c:	f107 0310 	add.w	r3, r7, #16
 800b350:	4619      	mov	r1, r3
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7ff fdde 	bl	800af14 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800b358:	4603      	mov	r3, r0
 800b35a:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	4a17      	ldr	r2, [pc, #92]	; (800b3bc <VL53L1_StartMeasurement+0xd4>)
 800b360:	fba2 2303 	umull	r2, r3, r2, r3
 800b364:	099b      	lsrs	r3, r3, #6
 800b366:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b368:	f107 030c 	add.w	r3, r7, #12
 800b36c:	4619      	mov	r1, r3
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7ff fe9c 	bl	800b0ac <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800b374:	4603      	mov	r3, r0
 800b376:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	1d1a      	adds	r2, r3, #4
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d901      	bls.n	800b386 <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800b382:	23fc      	movs	r3, #252	; 0xfc
 800b384:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800b386:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d107      	bne.n	800b39e <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 800b38e:	7dbb      	ldrb	r3, [r7, #22]
 800b390:	2206      	movs	r2, #6
 800b392:	4619      	mov	r1, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f001 f867 	bl	800c468 <VL53L1_init_and_start_range>
 800b39a:	4603      	mov	r3, r0
 800b39c:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800b39e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d103      	bne.n	800b3ae <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2204      	movs	r2, #4
 800b3aa:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800b3ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	10624dd3 	.word	0x10624dd3

0800b3c0 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	789b      	ldrb	r3, [r3, #2]
 800b3d0:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800b3d2:	7bbb      	ldrb	r3, [r7, #14]
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f001 fb87 	bl	800caea <VL53L1_clear_interrupt_and_enable_next_range>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800b3e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800b3f8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f004 fb18 	bl	800fa32 <VL53L1_poll_for_range_completion>
 800b402:	4603      	mov	r3, r0
 800b404:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800b406:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
	...

0800b414 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800b414:	b480      	push	{r7}
 800b416:	b08d      	sub	sp, #52	; 0x34
 800b418:	af00      	add	r7, sp, #0
 800b41a:	4603      	mov	r3, r0
 800b41c:	603a      	str	r2, [r7, #0]
 800b41e:	71fb      	strb	r3, [r7, #7]
 800b420:	460b      	mov	r3, r1
 800b422:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800b424:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800b428:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800b42a:	231e      	movs	r3, #30
 800b42c:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800b42e:	4b33      	ldr	r3, [pc, #204]	; (800b4fc <ComputeRQL+0xe8>)
 800b430:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800b432:	4b33      	ldr	r3, [pc, #204]	; (800b500 <ComputeRQL+0xec>)
 800b434:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800b436:	f641 139a 	movw	r3, #6554	; 0x199a
 800b43a:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800b43c:	79fb      	ldrb	r3, [r7, #7]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d103      	bne.n	800b44a <ComputeRQL+0x36>
		returnvalue = 0;
 800b442:	2300      	movs	r3, #0
 800b444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b448:	e04f      	b.n	800b4ea <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800b44a:	79bb      	ldrb	r3, [r7, #6]
 800b44c:	2b07      	cmp	r3, #7
 800b44e:	d103      	bne.n	800b458 <ComputeRQL+0x44>
		returnvalue = 50;
 800b450:	2332      	movs	r3, #50	; 0x32
 800b452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b456:	e048      	b.n	800b4ea <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b45e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800b462:	429a      	cmp	r2, r3
 800b464:	dd03      	ble.n	800b46e <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800b466:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b468:	041b      	lsls	r3, r3, #16
 800b46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b46c:	e007      	b.n	800b47e <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b474:	461a      	mov	r2, r3
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	fb02 f303 	mul.w	r3, r2, r3
 800b47c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800b47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b480:	2b00      	cmp	r3, #0
 800b482:	d020      	beq.n	800b4c6 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b488:	461a      	mov	r2, r3
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	fb02 f303 	mul.w	r3, r2, r3
 800b490:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b494:	085b      	lsrs	r3, r3, #1
 800b496:	693a      	ldr	r2, [r7, #16]
 800b498:	4413      	add	r3, r2
 800b49a:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4a4:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	041b      	lsls	r3, r3, #16
 800b4aa:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d804      	bhi.n	800b4be <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800b4b4:	69fa      	ldr	r2, [r7, #28]
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4bc:	e006      	b.n	800b4cc <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800b4be:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b4c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4c4:	e002      	b.n	800b4cc <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800b4c6:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800b4ca:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ce:	0c1b      	lsrs	r3, r3, #16
 800b4d0:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	2b32      	cmp	r3, #50	; 0x32
 800b4d6:	d905      	bls.n	800b4e4 <ComputeRQL+0xd0>
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	2b64      	cmp	r3, #100	; 0x64
 800b4dc:	bf28      	it	cs
 800b4de:	2364      	movcs	r3, #100	; 0x64
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	e000      	b.n	800b4e6 <ComputeRQL+0xd2>
 800b4e4:	2332      	movs	r3, #50	; 0x32
 800b4e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800b4ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3734      	adds	r7, #52	; 0x34
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	0075b333 	.word	0x0075b333
 800b500:	0030cccd 	.word	0x0030cccd

0800b504 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	4603      	mov	r3, r0
 800b50c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800b50e:	79fb      	ldrb	r3, [r7, #7]
 800b510:	3b04      	subs	r3, #4
 800b512:	2b0f      	cmp	r3, #15
 800b514:	d83d      	bhi.n	800b592 <ConvertStatusLite+0x8e>
 800b516:	a201      	add	r2, pc, #4	; (adr r2, 800b51c <ConvertStatusLite+0x18>)
 800b518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51c:	0800b56f 	.word	0x0800b56f
 800b520:	0800b569 	.word	0x0800b569
 800b524:	0800b575 	.word	0x0800b575
 800b528:	0800b57b 	.word	0x0800b57b
 800b52c:	0800b587 	.word	0x0800b587
 800b530:	0800b58d 	.word	0x0800b58d
 800b534:	0800b593 	.word	0x0800b593
 800b538:	0800b593 	.word	0x0800b593
 800b53c:	0800b581 	.word	0x0800b581
 800b540:	0800b593 	.word	0x0800b593
 800b544:	0800b593 	.word	0x0800b593
 800b548:	0800b593 	.word	0x0800b593
 800b54c:	0800b593 	.word	0x0800b593
 800b550:	0800b593 	.word	0x0800b593
 800b554:	0800b55d 	.word	0x0800b55d
 800b558:	0800b563 	.word	0x0800b563
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800b55c:	230a      	movs	r3, #10
 800b55e:	73fb      	strb	r3, [r7, #15]
		break;
 800b560:	e019      	b.n	800b596 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800b562:	2306      	movs	r3, #6
 800b564:	73fb      	strb	r3, [r7, #15]
		break;
 800b566:	e016      	b.n	800b596 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800b568:	2304      	movs	r3, #4
 800b56a:	73fb      	strb	r3, [r7, #15]
		break;
 800b56c:	e013      	b.n	800b596 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800b56e:	2302      	movs	r3, #2
 800b570:	73fb      	strb	r3, [r7, #15]
		break;
 800b572:	e010      	b.n	800b596 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800b574:	2301      	movs	r3, #1
 800b576:	73fb      	strb	r3, [r7, #15]
		break;
 800b578:	e00d      	b.n	800b596 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800b57a:	2307      	movs	r3, #7
 800b57c:	73fb      	strb	r3, [r7, #15]
		break;
 800b57e:	e00a      	b.n	800b596 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800b580:	2309      	movs	r3, #9
 800b582:	73fb      	strb	r3, [r7, #15]
		break;
 800b584:	e007      	b.n	800b596 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800b586:	2303      	movs	r3, #3
 800b588:	73fb      	strb	r3, [r7, #15]
		break;
 800b58a:	e004      	b.n	800b596 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b58c:	2300      	movs	r3, #0
 800b58e:	73fb      	strb	r3, [r7, #15]
		break;
 800b590:	e001      	b.n	800b596 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800b592:	23ff      	movs	r3, #255	; 0xff
 800b594:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800b596:	7bfb      	ldrb	r3, [r7, #15]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b08c      	sub	sp, #48	; 0x30
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	607b      	str	r3, [r7, #4]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	72fb      	strb	r3, [r7, #11]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685a      	ldr	r2, [r3, #4]
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c2:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5ca:	f003 031f 	and.w	r3, r3, #31
 800b5ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800b5d2:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800b5d6:	7afb      	ldrb	r3, [r7, #11]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7ff ff1a 	bl	800b414 <ComputeRQL>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e6:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5ec:	025b      	lsls	r3, r3, #9
 800b5ee:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5f4:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b5fa:	025b      	lsls	r3, r3, #9
 800b5fc:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800b5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b602:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800b608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60a:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b610:	025b      	lsls	r3, r3, #9
 800b612:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800b614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b616:	6a3a      	ldr	r2, [r7, #32]
 800b618:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800b624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b626:	2200      	movs	r2, #0
 800b628:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800b62a:	7abb      	ldrb	r3, [r7, #10]
 800b62c:	2b11      	cmp	r3, #17
 800b62e:	d009      	beq.n	800b644 <SetSimpleData+0xa0>
 800b630:	2b11      	cmp	r3, #17
 800b632:	dc0f      	bgt.n	800b654 <SetSimpleData+0xb0>
 800b634:	2b03      	cmp	r3, #3
 800b636:	dc02      	bgt.n	800b63e <SetSimpleData+0x9a>
 800b638:	2b00      	cmp	r3, #0
 800b63a:	dc03      	bgt.n	800b644 <SetSimpleData+0xa0>
 800b63c:	e00a      	b.n	800b654 <SetSimpleData+0xb0>
 800b63e:	2b0d      	cmp	r3, #13
 800b640:	d004      	beq.n	800b64c <SetSimpleData+0xa8>
 800b642:	e007      	b.n	800b654 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800b644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b646:	2205      	movs	r2, #5
 800b648:	76da      	strb	r2, [r3, #27]
		break;
 800b64a:	e006      	b.n	800b65a <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800b64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64e:	220d      	movs	r2, #13
 800b650:	76da      	strb	r2, [r3, #27]
		break;
 800b652:	e002      	b.n	800b65a <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b656:	2200      	movs	r2, #0
 800b658:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800b65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65c:	7edb      	ldrb	r3, [r3, #27]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d108      	bne.n	800b674 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800b662:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b666:	4618      	mov	r0, r3
 800b668:	f7ff ff4c 	bl	800b504 <ConvertStatusLite>
 800b66c:	4603      	mov	r3, r0
 800b66e:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800b670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b672:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b678:	025b      	lsls	r3, r3, #9
 800b67a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6a3a      	ldr	r2, [r7, #32]
 800b680:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b688:	025b      	lsls	r3, r3, #9
 800b68a:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6a3a      	ldr	r2, [r7, #32]
 800b690:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800b694:	f107 0314 	add.w	r3, r7, #20
 800b698:	461a      	mov	r2, r3
 800b69a:	2100      	movs	r1, #0
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f7ff fdb3 	bl	800b208 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800b6a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b6a6:	2b06      	cmp	r3, #6
 800b6a8:	bf0c      	ite	eq
 800b6aa:	2301      	moveq	r3, #1
 800b6ac:	2300      	movne	r3, #0
 800b6ae:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800b6b0:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800b6b2:	f107 0319 	add.w	r3, r7, #25
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f7ff fd81 	bl	800b1c2 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800b6c0:	7e7b      	ldrb	r3, [r7, #25]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d104      	bne.n	800b6d0 <SetSimpleData+0x12c>
 800b6c6:	7ffb      	ldrb	r3, [r7, #31]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d101      	bne.n	800b6d0 <SetSimpleData+0x12c>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e000      	b.n	800b6d2 <SetSimpleData+0x12e>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	7fba      	ldrb	r2, [r7, #30]
 800b6d8:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800b6dc:	f107 0314 	add.w	r3, r7, #20
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f7ff fd8f 	bl	800b208 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800b6ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b6ee:	2b04      	cmp	r3, #4
 800b6f0:	bf0c      	ite	eq
 800b6f2:	2301      	moveq	r3, #1
 800b6f4:	2300      	movne	r3, #0
 800b6f6:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800b6f8:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800b6fa:	f107 0319 	add.w	r3, r7, #25
 800b6fe:	461a      	mov	r2, r3
 800b700:	2101      	movs	r1, #1
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f7ff fd5d 	bl	800b1c2 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800b708:	7e7b      	ldrb	r3, [r7, #25]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d104      	bne.n	800b718 <SetSimpleData+0x174>
 800b70e:	7f7b      	ldrb	r3, [r7, #29]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d101      	bne.n	800b718 <SetSimpleData+0x174>
 800b714:	2301      	movs	r3, #1
 800b716:	e000      	b.n	800b71a <SetSimpleData+0x176>
 800b718:	2300      	movs	r3, #0
 800b71a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	7fba      	ldrb	r2, [r7, #30]
 800b720:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800b724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b726:	8b1b      	ldrh	r3, [r3, #24]
 800b728:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800b72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72c:	7edb      	ldrb	r3, [r3, #27]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d110      	bne.n	800b754 <SetSimpleData+0x1b0>
 800b732:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b736:	2b00      	cmp	r3, #0
 800b738:	da0c      	bge.n	800b754 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800b73a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b73e:	4b08      	ldr	r3, [pc, #32]	; (800b760 <SetSimpleData+0x1bc>)
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	429a      	cmp	r2, r3
 800b744:	da03      	bge.n	800b74e <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800b746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b748:	220e      	movs	r2, #14
 800b74a:	76da      	strb	r2, [r3, #27]
 800b74c:	e002      	b.n	800b754 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800b74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b750:	2200      	movs	r2, #0
 800b752:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800b754:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3730      	adds	r7, #48	; 0x30
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20000158 	.word	0x20000158

0800b764 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b0a8      	sub	sp, #160	; 0xa0
 800b768:	af02      	add	r7, sp, #8
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b76e:	2300      	movs	r3, #0
 800b770:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 800b774:	f107 0308 	add.w	r3, r7, #8
 800b778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800b77c:	221c      	movs	r2, #28
 800b77e:	21ff      	movs	r1, #255	; 0xff
 800b780:	6838      	ldr	r0, [r7, #0]
 800b782:	f004 fd89 	bl	8010298 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800b786:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b78a:	2102      	movs	r1, #2
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f001 f93c 	bl	800ca0a <VL53L1_get_device_results>
 800b792:	4603      	mov	r3, r0
 800b794:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800b798:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d117      	bne.n	800b7d0 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800b7a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7a4:	789a      	ldrb	r2, [r3, #2]
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800b7aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800b7b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7b8:	78da      	ldrb	r2, [r3, #3]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7c2:	2101      	movs	r1, #1
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7ff feed 	bl	800b5a4 <SetSimpleData>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b7d0:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3798      	adds	r7, #152	; 0x98
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b0c6      	sub	sp, #280	; 0x118
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	1d3b      	adds	r3, r7, #4
 800b7e4:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800b7f2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d108      	bne.n	800b80c <VL53L1_LoadPatch+0x30>
		status = VL53L1_WrByte(
 800b7fa:	1d3b      	adds	r3, r7, #4
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	2185      	movs	r1, #133	; 0x85
 800b800:	6818      	ldr	r0, [r3, #0]
 800b802:	f004 f9f1 	bl	800fbe8 <VL53L1_WrByte>
 800b806:	4603      	mov	r3, r0
 800b808:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 800b80c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b810:	2b00      	cmp	r3, #0
 800b812:	d103      	bne.n	800b81c <VL53L1_LoadPatch+0x40>
		VL53L1_enable_powerforce(Dev);
 800b814:	1d3b      	adds	r3, r7, #4
 800b816:	6818      	ldr	r0, [r3, #0]
 800b818:	f002 fce1 	bl	800e1de <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800b81c:	4b65      	ldr	r3, [pc, #404]	; (800b9b4 <VL53L1_LoadPatch+0x1d8>)
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b828:	2b03      	cmp	r3, #3
 800b82a:	d81b      	bhi.n	800b864 <VL53L1_LoadPatch+0x88>
 800b82c:	a201      	add	r2, pc, #4	; (adr r2, 800b834 <VL53L1_LoadPatch+0x58>)
 800b82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b832:	bf00      	nop
 800b834:	0800b845 	.word	0x0800b845
 800b838:	0800b84d 	.word	0x0800b84d
 800b83c:	0800b855 	.word	0x0800b855
 800b840:	0800b85d 	.word	0x0800b85d

	switch(patch_tuning) {
	case 0:
		patch_power = 0x00;
 800b844:	2300      	movs	r3, #0
 800b846:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b84a:	e00e      	b.n	800b86a <VL53L1_LoadPatch+0x8e>
	case 1:
		patch_power = 0x10;
 800b84c:	2310      	movs	r3, #16
 800b84e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b852:	e00a      	b.n	800b86a <VL53L1_LoadPatch+0x8e>
	case 2:
		patch_power = 0x20;
 800b854:	2320      	movs	r3, #32
 800b856:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b85a:	e006      	b.n	800b86a <VL53L1_LoadPatch+0x8e>
	case 3:
		patch_power = 0x40;
 800b85c:	2340      	movs	r3, #64	; 0x40
 800b85e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b862:	e002      	b.n	800b86a <VL53L1_LoadPatch+0x8e>
	default:
		patch_power = 0x00;
 800b864:	2300      	movs	r3, #0
 800b866:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800b86a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d125      	bne.n	800b8be <VL53L1_LoadPatch+0xe2>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 800b872:	f107 030c 	add.w	r3, r7, #12
 800b876:	2229      	movs	r2, #41	; 0x29
 800b878:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800b87a:	f107 030c 	add.w	r3, r7, #12
 800b87e:	22c9      	movs	r2, #201	; 0xc9
 800b880:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800b882:	f107 030c 	add.w	r3, r7, #12
 800b886:	220e      	movs	r2, #14
 800b888:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800b88a:	f107 030c 	add.w	r3, r7, #12
 800b88e:	2240      	movs	r2, #64	; 0x40
 800b890:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800b892:	f107 030c 	add.w	r3, r7, #12
 800b896:	2228      	movs	r2, #40	; 0x28
 800b898:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800b89a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b89e:	b2da      	uxtb	r2, r3
 800b8a0:	f107 030c 	add.w	r3, r7, #12
 800b8a4:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800b8a6:	f107 020c 	add.w	r2, r7, #12
 800b8aa:	1d38      	adds	r0, r7, #4
 800b8ac:	2306      	movs	r3, #6
 800b8ae:	f240 4176 	movw	r1, #1142	; 0x476
 800b8b2:	6800      	ldr	r0, [r0, #0]
 800b8b4:	f004 f92c 	bl	800fb10 <VL53L1_WriteMulti>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 800b8be:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d123      	bne.n	800b90e <VL53L1_LoadPatch+0x132>
		comms_buffer[0] = 0x03;
 800b8c6:	f107 030c 	add.w	r3, r7, #12
 800b8ca:	2203      	movs	r2, #3
 800b8cc:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800b8ce:	f107 030c 	add.w	r3, r7, #12
 800b8d2:	226d      	movs	r2, #109	; 0x6d
 800b8d4:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800b8d6:	f107 030c 	add.w	r3, r7, #12
 800b8da:	2203      	movs	r2, #3
 800b8dc:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800b8de:	f107 030c 	add.w	r3, r7, #12
 800b8e2:	226f      	movs	r2, #111	; 0x6f
 800b8e4:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800b8e6:	f107 030c 	add.w	r3, r7, #12
 800b8ea:	2207      	movs	r2, #7
 800b8ec:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800b8ee:	f107 030c 	add.w	r3, r7, #12
 800b8f2:	2229      	movs	r2, #41	; 0x29
 800b8f4:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 800b8f6:	f107 020c 	add.w	r2, r7, #12
 800b8fa:	1d38      	adds	r0, r7, #4
 800b8fc:	2306      	movs	r3, #6
 800b8fe:	f240 4196 	movw	r1, #1174	; 0x496
 800b902:	6800      	ldr	r0, [r0, #0]
 800b904:	f004 f904 	bl	800fb10 <VL53L1_WriteMulti>
 800b908:	4603      	mov	r3, r0
 800b90a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800b90e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b912:	2b00      	cmp	r3, #0
 800b914:	d113      	bne.n	800b93e <VL53L1_LoadPatch+0x162>
		comms_buffer[0] = 0x00;
 800b916:	f107 030c 	add.w	r3, r7, #12
 800b91a:	2200      	movs	r2, #0
 800b91c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800b91e:	f107 030c 	add.w	r3, r7, #12
 800b922:	2207      	movs	r2, #7
 800b924:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800b926:	f107 020c 	add.w	r2, r7, #12
 800b92a:	1d38      	adds	r0, r7, #4
 800b92c:	2302      	movs	r3, #2
 800b92e:	f240 4172 	movw	r1, #1138	; 0x472
 800b932:	6800      	ldr	r0, [r0, #0]
 800b934:	f004 f8ec 	bl	800fb10 <VL53L1_WriteMulti>
 800b938:	4603      	mov	r3, r0
 800b93a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 800b93e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b942:	2b00      	cmp	r3, #0
 800b944:	d113      	bne.n	800b96e <VL53L1_LoadPatch+0x192>
		comms_buffer[0] = 0x00;
 800b946:	f107 030c 	add.w	r3, r7, #12
 800b94a:	2200      	movs	r2, #0
 800b94c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800b94e:	f107 030c 	add.w	r3, r7, #12
 800b952:	2207      	movs	r2, #7
 800b954:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800b956:	f107 020c 	add.w	r2, r7, #12
 800b95a:	1d38      	adds	r0, r7, #4
 800b95c:	2302      	movs	r3, #2
 800b95e:	f240 4174 	movw	r1, #1140	; 0x474
 800b962:	6800      	ldr	r0, [r0, #0]
 800b964:	f004 f8d4 	bl	800fb10 <VL53L1_WriteMulti>
 800b968:	4603      	mov	r3, r0
 800b96a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800b96e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b972:	2b00      	cmp	r3, #0
 800b974:	d109      	bne.n	800b98a <VL53L1_LoadPatch+0x1ae>
		status = VL53L1_WrByte(
 800b976:	1d3b      	adds	r3, r7, #4
 800b978:	2201      	movs	r2, #1
 800b97a:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	f004 f932 	bl	800fbe8 <VL53L1_WrByte>
 800b984:	4603      	mov	r3, r0
 800b986:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 800b98a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d108      	bne.n	800b9a4 <VL53L1_LoadPatch+0x1c8>
		status = VL53L1_WrByte(
 800b992:	1d3b      	adds	r3, r7, #4
 800b994:	2201      	movs	r2, #1
 800b996:	2185      	movs	r1, #133	; 0x85
 800b998:	6818      	ldr	r0, [r3, #0]
 800b99a:	f004 f925 	bl	800fbe8 <VL53L1_WrByte>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 800b9a4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20000158 	.word	0x20000158

0800b9b8 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800b9b8:	b5b0      	push	{r4, r5, r7, lr}
 800b9ba:	b088      	sub	sp, #32
 800b9bc:	af04      	add	r7, sp, #16
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800b9cc:	2162      	movs	r1, #98	; 0x62
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f002 f8bf 	bl	800db52 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b9f8:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ba00:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800ba08:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	2264      	movs	r2, #100	; 0x64
 800ba0e:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ba16:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	f240 72db 	movw	r2, #2011	; 0x7db
 800ba26:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f002 f875 	bl	800db1a <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ba30:	78fb      	ldrb	r3, [r7, #3]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d008      	beq.n	800ba48 <VL53L1_data_init+0x90>
 800ba36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d104      	bne.n	800ba48 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 f857 	bl	800baf2 <VL53L1_read_p2p_data>
 800ba44:	4603      	mov	r3, r0
 800ba46:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f001 fba4 	bl	800d19c <VL53L1_init_refspadchar_config_struct>
 800ba54:	4603      	mov	r3, r0
 800ba56:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f001 fbc0 	bl	800d1e4 <VL53L1_init_ssc_config_struct>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ba74:	4619      	mov	r1, r3
 800ba76:	4610      	mov	r0, r2
 800ba78:	f001 fbd5 	bl	800d226 <VL53L1_init_xtalk_config_struct>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ba86:	4618      	mov	r0, r3
 800ba88:	f001 fc2f 	bl	800d2ea <VL53L1_init_offset_cal_config_struct>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	33a4      	adds	r3, #164	; 0xa4
 800ba94:	4618      	mov	r0, r3
 800ba96:	f001 fc4f 	bl	800d338 <VL53L1_init_tuning_parm_storage_struct>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800ba9e:	2120      	movs	r1, #32
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fcc1 	bl	800c428 <VL53L1_set_vhv_loopbound>
 800baa6:	4603      	mov	r3, r0
 800baa8:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800baaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d116      	bne.n	800bae0 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	7858      	ldrb	r0, [r3, #1]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	8b1c      	ldrh	r4, [r3, #24]
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	689d      	ldr	r5, [r3, #8]
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	6912      	ldr	r2, [r2, #16]
 800bac6:	68b9      	ldr	r1, [r7, #8]
 800bac8:	6949      	ldr	r1, [r1, #20]
 800baca:	9102      	str	r1, [sp, #8]
 800bacc:	9201      	str	r2, [sp, #4]
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	462b      	mov	r3, r5
 800bad2:	4622      	mov	r2, r4
 800bad4:	4601      	mov	r1, r0
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fad8 	bl	800c08c <VL53L1_set_preset_mode>
 800badc:	4603      	mov	r3, r0
 800bade:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f002 fdb5 	bl	800e650 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800bae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bdb0      	pop	{r4, r5, r7, pc}

0800baf2 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800bafa:	2300      	movs	r3, #0
 800bafc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800bb02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d108      	bne.n	800bb1c <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f002 ff39 	bl	800e98a <VL53L1_get_static_nvm_managed>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800bb1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d107      	bne.n	800bb34 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	3342      	adds	r3, #66	; 0x42
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f003 f86b 	bl	800ec06 <VL53L1_get_customer_nvm_managed>
 800bb30:	4603      	mov	r3, r0
 800bb32:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800bb34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d115      	bne.n	800bb68 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800bb42:	4619      	mov	r1, r3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f003 ff1d 	bl	800f984 <VL53L1_get_nvm_copy_data>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800bb4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d108      	bne.n	800bb68 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	33f0      	adds	r3, #240	; 0xf0
 800bb60:	4619      	mov	r1, r3
 800bb62:	4610      	mov	r0, r2
 800bb64:	f002 f957 	bl	800de16 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800bb68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d109      	bne.n	800bb84 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800bb76:	461a      	mov	r2, r3
 800bb78:	21de      	movs	r1, #222	; 0xde
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f004 f892 	bl	800fca4 <VL53L1_RdWord>
 800bb80:	4603      	mov	r3, r0
 800bb82:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bb8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb8e:	d204      	bcs.n	800bb9a <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800bb96:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800bb9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d107      	bne.n	800bbb2 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	339e      	adds	r3, #158	; 0x9e
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f990 	bl	800bece <VL53L1_get_mode_mitigation_roi>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d114      	bne.n	800bbe6 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10f      	bne.n	800bbe6 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800bbcc:	011b      	lsls	r3, r3, #4
 800bbce:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bbdc:	011b      	lsls	r3, r3, #4
 800bbde:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800bbe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b085      	sub	sp, #20
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d101      	bne.n	800bc12 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bc0e:	23f1      	movs	r3, #241	; 0xf1
 800bc10:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800bc12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10c      	bne.n	800bc34 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	683a      	ldr	r2, [r7, #0]
 800bc1e:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800bc26:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800bc34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3714      	adds	r7, #20
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d101      	bne.n	800bc64 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bc60:	23f1      	movs	r3, #241	; 0xf1
 800bc62:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800bc64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d109      	bne.n	800bc80 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800bc78:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800bc80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b088      	sub	sp, #32
 800bc94:	af02      	add	r7, sp, #8
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
 800bc9c:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d101      	bne.n	800bcb4 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bcb0:	23f1      	movs	r3, #241	; 0xf1
 800bcb2:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800bcb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d11b      	bne.n	800bcf4 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800bcda:	693a      	ldr	r2, [r7, #16]
 800bcdc:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 800bce0:	9201      	str	r2, [sp, #4]
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	460b      	mov	r3, r1
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	6879      	ldr	r1, [r7, #4]
 800bcea:	68b8      	ldr	r0, [r7, #8]
 800bcec:	f002 fbe2 	bl	800e4b4 <VL53L1_calc_timeout_register_values>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800bcf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3718      	adds	r7, #24
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b088      	sub	sp, #32
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
 800bd0c:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800bd16:	2300      	movs	r3, #0
 800bd18:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d101      	bne.n	800bd2c <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bd28:	23f1      	movs	r3, #241	; 0xf1
 800bd2a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800bd2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d14a      	bne.n	800bdca <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800bd40:	4619      	mov	r1, r3
 800bd42:	4610      	mov	r0, r2
 800bd44:	f002 fa5d 	bl	800e202 <VL53L1_calc_macro_period_us>
 800bd48:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800bd50:	6979      	ldr	r1, [r7, #20]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f002 fb15 	bl	800e382 <VL53L1_calc_timeout_us>
 800bd58:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800bd64:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800bd66:	8a7b      	ldrh	r3, [r7, #18]
 800bd68:	021b      	lsls	r3, r3, #8
 800bd6a:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800bd72:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800bd74:	4413      	add	r3, r2
 800bd76:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800bd78:	8a7b      	ldrh	r3, [r7, #18]
 800bd7a:	6979      	ldr	r1, [r7, #20]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f002 fb3e 	bl	800e3fe <VL53L1_calc_decoded_timeout_us>
 800bd82:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800bd8e:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800bd90:	8a7b      	ldrh	r3, [r7, #18]
 800bd92:	021b      	lsls	r3, r3, #8
 800bd94:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800bd9c:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800bd9e:	4413      	add	r3, r2
 800bda0:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800bda2:	8a7b      	ldrh	r3, [r7, #18]
 800bda4:	6979      	ldr	r1, [r7, #20]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f002 fb29 	bl	800e3fe <VL53L1_calc_decoded_timeout_us>
 800bdac:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800bdca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3720      	adds	r7, #32
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b087      	sub	sp, #28
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	460b      	mov	r3, r1
 800bde0:	607a      	str	r2, [r7, #4]
 800bde2:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bde4:	2300      	movs	r3, #0
 800bde6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800bdec:	2301      	movs	r3, #1
 800bdee:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800bdf0:	7afb      	ldrb	r3, [r7, #11]
 800bdf2:	2b07      	cmp	r3, #7
 800bdf4:	d81c      	bhi.n	800be30 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800bdf6:	7afb      	ldrb	r3, [r7, #11]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d004      	beq.n	800be06 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800bdfc:	7afb      	ldrb	r3, [r7, #11]
 800bdfe:	2201      	movs	r2, #1
 800be00:	fa02 f303 	lsl.w	r3, r2, r3
 800be04:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800be0c:	7dbb      	ldrb	r3, [r7, #22]
 800be0e:	4013      	ands	r3, r2
 800be10:	b2da      	uxtb	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800be16:	7afb      	ldrb	r3, [r7, #11]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00b      	beq.n	800be34 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	461a      	mov	r2, r3
 800be22:	7afb      	ldrb	r3, [r7, #11]
 800be24:	fa42 f303 	asr.w	r3, r2, r3
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	701a      	strb	r2, [r3, #0]
 800be2e:	e001      	b.n	800be34 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800be30:	23fc      	movs	r3, #252	; 0xfc
 800be32:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800be34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	371c      	adds	r7, #28
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be4e:	2300      	movs	r3, #0
 800be50:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	7858      	ldrb	r0, [r3, #1]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	7819      	ldrb	r1, [r3, #0]
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800be64:	461a      	mov	r2, r3
 800be66:	f002 fb9e 	bl	800e5a6 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	7898      	ldrb	r0, [r3, #2]
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	78d9      	ldrb	r1, [r3, #3]
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800be78:	461a      	mov	r2, r3
 800be7a:	f002 fbd3 	bl	800e624 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800be7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b084      	sub	sp, #16
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
 800be92:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be94:	2300      	movs	r3, #0
 800be96:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	3301      	adds	r3, #1
 800bea6:	683a      	ldr	r2, [r7, #0]
 800bea8:	4619      	mov	r1, r3
 800beaa:	f002 fc8a 	bl	800e7c2 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	1c99      	adds	r1, r3, #2
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	3303      	adds	r3, #3
 800bebc:	461a      	mov	r2, r3
 800bebe:	f002 fb99 	bl	800e5f4 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800bec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b086      	sub	sp, #24
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bed8:	2300      	movs	r3, #0
 800beda:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800bee8:	2300      	movs	r3, #0
 800beea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800bef2:	f107 020e 	add.w	r2, r7, #14
 800bef6:	f107 010d 	add.w	r1, r7, #13
 800befa:	4618      	mov	r0, r3
 800befc:	f002 fc61 	bl	800e7c2 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800bf00:	7bba      	ldrb	r2, [r7, #14]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800bf06:	7b7a      	ldrb	r2, [r7, #13]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800bf12:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
 800bf16:	091b      	lsrs	r3, r3, #4
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
 800bf20:	f003 030f 	and.w	r3, r3, #15
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800bf2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
	...

0800bf38 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b087      	sub	sp, #28
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	607a      	str	r2, [r7, #4]
 800bf42:	603b      	str	r3, [r7, #0]
 800bf44:	460b      	mov	r3, r1
 800bf46:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800bf50:	7afb      	ldrb	r3, [r7, #11]
 800bf52:	3b01      	subs	r3, #1
 800bf54:	2b25      	cmp	r3, #37	; 0x25
 800bf56:	f200 808e 	bhi.w	800c076 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800bf5a:	a201      	add	r2, pc, #4	; (adr r2, 800bf60 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800bf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf60:	0800bff9 	.word	0x0800bff9
 800bf64:	0800bff9 	.word	0x0800bff9
 800bf68:	0800bff9 	.word	0x0800bff9
 800bf6c:	0800bff9 	.word	0x0800bff9
 800bf70:	0800bff9 	.word	0x0800bff9
 800bf74:	0800c023 	.word	0x0800c023
 800bf78:	0800c023 	.word	0x0800c023
 800bf7c:	0800c023 	.word	0x0800c023
 800bf80:	0800c077 	.word	0x0800c077
 800bf84:	0800c077 	.word	0x0800c077
 800bf88:	0800c077 	.word	0x0800c077
 800bf8c:	0800c077 	.word	0x0800c077
 800bf90:	0800c077 	.word	0x0800c077
 800bf94:	0800c077 	.word	0x0800c077
 800bf98:	0800c077 	.word	0x0800c077
 800bf9c:	0800c077 	.word	0x0800c077
 800bfa0:	0800bff9 	.word	0x0800bff9
 800bfa4:	0800c023 	.word	0x0800c023
 800bfa8:	0800c077 	.word	0x0800c077
 800bfac:	0800c077 	.word	0x0800c077
 800bfb0:	0800c077 	.word	0x0800c077
 800bfb4:	0800c077 	.word	0x0800c077
 800bfb8:	0800c077 	.word	0x0800c077
 800bfbc:	0800c077 	.word	0x0800c077
 800bfc0:	0800c077 	.word	0x0800c077
 800bfc4:	0800c077 	.word	0x0800c077
 800bfc8:	0800c077 	.word	0x0800c077
 800bfcc:	0800c077 	.word	0x0800c077
 800bfd0:	0800c077 	.word	0x0800c077
 800bfd4:	0800c077 	.word	0x0800c077
 800bfd8:	0800c077 	.word	0x0800c077
 800bfdc:	0800c077 	.word	0x0800c077
 800bfe0:	0800c077 	.word	0x0800c077
 800bfe4:	0800c077 	.word	0x0800c077
 800bfe8:	0800c077 	.word	0x0800c077
 800bfec:	0800c04d 	.word	0x0800c04d
 800bff0:	0800c04d 	.word	0x0800c04d
 800bff4:	0800c04d 	.word	0x0800c04d
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800c012:	6a3b      	ldr	r3, [r7, #32]
 800c014:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	601a      	str	r2, [r3, #0]
	break;
 800c020:	e02c      	b.n	800c07c <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800c03c:	6a3b      	ldr	r3, [r7, #32]
 800c03e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	601a      	str	r2, [r3, #0]
	break;
 800c04a:	e017      	b.n	800c07c <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	601a      	str	r2, [r3, #0]
	break;
 800c074:	e002      	b.n	800c07c <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c076:	23fc      	movs	r3, #252	; 0xfc
 800c078:	75fb      	strb	r3, [r7, #23]
		break;
 800c07a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800c07c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c080:	4618      	mov	r0, r3
 800c082:	371c      	adds	r7, #28
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b092      	sub	sp, #72	; 0x48
 800c090:	af04      	add	r7, sp, #16
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	607b      	str	r3, [r7, #4]
 800c096:	460b      	mov	r3, r1
 800c098:	72fb      	strb	r3, [r7, #11]
 800c09a:	4613      	mov	r3, r2
 800c09c:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800c0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800c0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c0b6:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ba:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800c0be:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c0c6:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800c0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ca:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c0ce:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800c0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d2:	33a4      	adds	r3, #164	; 0xa4
 800c0d4:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d8:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800c0dc:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800c0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e0:	7afa      	ldrb	r2, [r7, #11]
 800c0e2:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0e8:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0ee:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0f4:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800c0f6:	2103      	movs	r1, #3
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f001 fd2a 	bl	800db52 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800c0fe:	7afb      	ldrb	r3, [r7, #11]
 800c100:	3b01      	subs	r3, #1
 800c102:	2b25      	cmp	r3, #37	; 0x25
 800c104:	f200 810c 	bhi.w	800c320 <VL53L1_set_preset_mode+0x294>
 800c108:	a201      	add	r2, pc, #4	; (adr r2, 800c110 <VL53L1_set_preset_mode+0x84>)
 800c10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10e:	bf00      	nop
 800c110:	0800c1a9 	.word	0x0800c1a9
 800c114:	0800c1c5 	.word	0x0800c1c5
 800c118:	0800c1e1 	.word	0x0800c1e1
 800c11c:	0800c1fd 	.word	0x0800c1fd
 800c120:	0800c219 	.word	0x0800c219
 800c124:	0800c235 	.word	0x0800c235
 800c128:	0800c251 	.word	0x0800c251
 800c12c:	0800c26d 	.word	0x0800c26d
 800c130:	0800c321 	.word	0x0800c321
 800c134:	0800c321 	.word	0x0800c321
 800c138:	0800c321 	.word	0x0800c321
 800c13c:	0800c321 	.word	0x0800c321
 800c140:	0800c321 	.word	0x0800c321
 800c144:	0800c321 	.word	0x0800c321
 800c148:	0800c321 	.word	0x0800c321
 800c14c:	0800c321 	.word	0x0800c321
 800c150:	0800c289 	.word	0x0800c289
 800c154:	0800c2a5 	.word	0x0800c2a5
 800c158:	0800c321 	.word	0x0800c321
 800c15c:	0800c321 	.word	0x0800c321
 800c160:	0800c321 	.word	0x0800c321
 800c164:	0800c321 	.word	0x0800c321
 800c168:	0800c321 	.word	0x0800c321
 800c16c:	0800c321 	.word	0x0800c321
 800c170:	0800c321 	.word	0x0800c321
 800c174:	0800c321 	.word	0x0800c321
 800c178:	0800c321 	.word	0x0800c321
 800c17c:	0800c321 	.word	0x0800c321
 800c180:	0800c321 	.word	0x0800c321
 800c184:	0800c321 	.word	0x0800c321
 800c188:	0800c321 	.word	0x0800c321
 800c18c:	0800c321 	.word	0x0800c321
 800c190:	0800c321 	.word	0x0800c321
 800c194:	0800c321 	.word	0x0800c321
 800c198:	0800c321 	.word	0x0800c321
 800c19c:	0800c2c1 	.word	0x0800c2c1
 800c1a0:	0800c2e1 	.word	0x0800c2e1
 800c1a4:	0800c301 	.word	0x0800c301

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	9301      	str	r3, [sp, #4]
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	6a3b      	ldr	r3, [r7, #32]
 800c1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1b8:	f001 f94d 	bl	800d456 <VL53L1_preset_mode_standard_ranging>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c1c2:	e0b1      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	6a3b      	ldr	r3, [r7, #32]
 800c1ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1d4:	f001 fa5d 	bl	800d692 <VL53L1_preset_mode_standard_ranging_short_range>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c1de:	e0a3      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	9301      	str	r3, [sp, #4]
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	6a3b      	ldr	r3, [r7, #32]
 800c1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1f0:	f001 fa90 	bl	800d714 <VL53L1_preset_mode_standard_ranging_long_range>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c1fa:	e095      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	9301      	str	r3, [sp, #4]
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	6a3b      	ldr	r3, [r7, #32]
 800c206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c20a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c20c:	f001 fac3 	bl	800d796 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800c210:	4603      	mov	r3, r0
 800c212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c216:	e087      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	9301      	str	r3, [sp, #4]
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	6a3b      	ldr	r3, [r7, #32]
 800c222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c228:	f001 fada 	bl	800d7e0 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800c22c:	4603      	mov	r3, r0
 800c22e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c232:	e079      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	6a3b      	ldr	r3, [r7, #32]
 800c23e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c244:	f001 faf1 	bl	800d82a <VL53L1_preset_mode_timed_ranging>
 800c248:	4603      	mov	r3, r0
 800c24a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c24e:	e06b      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	9301      	str	r3, [sp, #4]
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	6a3b      	ldr	r3, [r7, #32]
 800c25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c25c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c25e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c260:	f001 fb1d 	bl	800d89e <VL53L1_preset_mode_timed_ranging_short_range>
 800c264:	4603      	mov	r3, r0
 800c266:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c26a:	e05d      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	9301      	str	r3, [sp, #4]
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c27a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c27c:	f001 fb49 	bl	800d912 <VL53L1_preset_mode_timed_ranging_long_range>
 800c280:	4603      	mov	r3, r0
 800c282:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c286:	e04f      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	9301      	str	r3, [sp, #4]
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	6a3b      	ldr	r3, [r7, #32]
 800c292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c298:	f001 fc1d 	bl	800dad6 <VL53L1_preset_mode_olt>
 800c29c:	4603      	mov	r3, r0
 800c29e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c2a2:	e041      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
 800c2ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2b4:	f001 fbd9 	bl	800da6a <VL53L1_preset_mode_singleshot_ranging>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c2be:	e033      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	9302      	str	r3, [sp, #8]
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2d4:	f001 fb7d 	bl	800d9d2 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c2de:	e023      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	9302      	str	r3, [sp, #8]
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	9301      	str	r3, [sp, #4]
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	6a3b      	ldr	r3, [r7, #32]
 800c2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2f4:	f001 fb47 	bl	800d986 <VL53L1_preset_mode_low_power_auto_ranging>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c2fe:	e013      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	9302      	str	r3, [sp, #8]
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	9301      	str	r3, [sp, #4]
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	6a3b      	ldr	r3, [r7, #32]
 800c30e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c312:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c314:	f001 fb83 	bl	800da1e <VL53L1_preset_mode_low_power_auto_long_ranging>
 800c318:	4603      	mov	r3, r0
 800c31a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c31e:	e003      	b.n	800c328 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c320:	23fc      	movs	r3, #252	; 0xfc
 800c322:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800c326:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800c328:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d105      	bne.n	800c33c <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c332:	893a      	ldrh	r2, [r7, #8]
 800c334:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800c336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c338:	893a      	ldrh	r2, [r7, #8]
 800c33a:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800c33c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c340:	2b00      	cmp	r3, #0
 800c342:	d108      	bne.n	800c356 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800c344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c346:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c348:	6879      	ldr	r1, [r7, #4]
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f7ff fca0 	bl	800bc90 <VL53L1_set_timeouts_us>
 800c350:	4603      	mov	r3, r0
 800c352:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800c356:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d106      	bne.n	800c36c <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800c35e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f7ff fc46 	bl	800bbf2 <VL53L1_set_inter_measurement_period_ms>
 800c366:	4603      	mov	r3, r0
 800c368:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800c36c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c370:	4618      	mov	r0, r3
 800c372:	3738      	adds	r7, #56	; 0x38
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c382:	2300      	movs	r3, #0
 800c384:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c394:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c398:	4618      	mov	r0, r3
 800c39a:	3714      	adds	r7, #20
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	887a      	ldrh	r2, [r7, #2]
 800c3bc:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800c3c0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3714      	adds	r7, #20
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c3ec:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3714      	adds	r7, #20
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	460b      	mov	r3, r1
 800c406:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c408:	2300      	movs	r3, #0
 800c40a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	887a      	ldrh	r2, [r7, #2]
 800c414:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800c418:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	460b      	mov	r3, r1
 800c432:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c434:	2300      	movs	r3, #0
 800c436:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c442:	f003 0303 	and.w	r3, r3, #3
 800c446:	b2da      	uxtb	r2, r3
 800c448:	78fb      	ldrb	r3, [r7, #3]
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	4413      	add	r3, r2
 800c450:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800c458:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3714      	adds	r7, #20
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b0d0      	sub	sp, #320	; 0x140
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	1d3b      	adds	r3, r7, #4
 800c470:	6018      	str	r0, [r3, #0]
 800c472:	4608      	mov	r0, r1
 800c474:	4611      	mov	r1, r2
 800c476:	1cfb      	adds	r3, r7, #3
 800c478:	4602      	mov	r2, r0
 800c47a:	701a      	strb	r2, [r3, #0]
 800c47c:	1cbb      	adds	r3, r7, #2
 800c47e:	460a      	mov	r2, r1
 800c480:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c482:	2300      	movs	r3, #0
 800c484:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c488:	1d3b      	adds	r3, r7, #4
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800c490:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c494:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c498:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800c49c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4a0:	3342      	adds	r3, #66	; 0x42
 800c4a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800c4a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c4ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800c4b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4b6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c4ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800c4be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4c2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800c4c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800c4ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4ce:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c4d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800c4d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4da:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c4de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800c4e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4e6:	332c      	adds	r3, #44	; 0x2c
 800c4e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800c4ec:	f107 030c 	add.w	r3, r7, #12
 800c4f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800c500:	2300      	movs	r3, #0
 800c502:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800c50c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c510:	1cfa      	adds	r2, r7, #3
 800c512:	7812      	ldrb	r2, [r2, #0]
 800c514:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800c516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c51a:	791b      	ldrb	r3, [r3, #4]
 800c51c:	b25b      	sxtb	r3, r3
 800c51e:	f003 030f 	and.w	r3, r3, #15
 800c522:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800c524:	1cfb      	adds	r3, r7, #3
 800c526:	f993 3000 	ldrsb.w	r3, [r3]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	b25b      	sxtb	r3, r3
 800c52e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800c530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c534:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800c536:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c53a:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800c53e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c542:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800c546:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c54a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800c54e:	2bff      	cmp	r3, #255	; 0xff
 800c550:	d104      	bne.n	800c55c <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800c552:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c556:	2200      	movs	r2, #0
 800c558:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c55c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c560:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c564:	2b01      	cmp	r3, #1
 800c566:	d133      	bne.n	800c5d0 <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800c568:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c56c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c570:	2b00      	cmp	r3, #0
 800c572:	d12d      	bne.n	800c5d0 <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800c574:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c578:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800c57c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c580:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800c584:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c588:	2220      	movs	r2, #32
 800c58a:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800c58e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c592:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800c596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10c      	bne.n	800c5b8 <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800c59e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5a2:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800c5ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800c5b6:	e004      	b.n	800c5c2 <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800c5b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800c5c2:	1cbb      	adds	r3, r7, #2
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	2b04      	cmp	r3, #4
 800c5c8:	d802      	bhi.n	800c5d0 <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800c5ca:	1cbb      	adds	r3, r7, #2
 800c5cc:	2205      	movs	r2, #5
 800c5ce:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c5d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5d4:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d110      	bne.n	800c5fe <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800c5dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5e0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d10a      	bne.n	800c5fe <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800c5e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5ec:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800c5f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5f4:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800c5f8:	1cbb      	adds	r3, r7, #2
 800c5fa:	2206      	movs	r2, #6
 800c5fc:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800c5fe:	1cbb      	adds	r3, r7, #2
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	3b01      	subs	r3, #1
 800c604:	2b05      	cmp	r3, #5
 800c606:	d827      	bhi.n	800c658 <VL53L1_init_and_start_range+0x1f0>
 800c608:	a201      	add	r2, pc, #4	; (adr r2, 800c610 <VL53L1_init_and_start_range+0x1a8>)
 800c60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60e:	bf00      	nop
 800c610:	0800c651 	.word	0x0800c651
 800c614:	0800c649 	.word	0x0800c649
 800c618:	0800c641 	.word	0x0800c641
 800c61c:	0800c639 	.word	0x0800c639
 800c620:	0800c631 	.word	0x0800c631
 800c624:	0800c629 	.word	0x0800c629
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800c628:	2301      	movs	r3, #1
 800c62a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c62e:	e017      	b.n	800c660 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800c630:	230d      	movs	r3, #13
 800c632:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c636:	e013      	b.n	800c660 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800c638:	2324      	movs	r3, #36	; 0x24
 800c63a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c63e:	e00f      	b.n	800c660 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800c640:	2344      	movs	r3, #68	; 0x44
 800c642:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c646:	e00b      	b.n	800c660 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800c648:	235a      	movs	r3, #90	; 0x5a
 800c64a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c64e:	e007      	b.n	800c660 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800c650:	2371      	movs	r3, #113	; 0x71
 800c652:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c656:	e003      	b.n	800c660 <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800c658:	2383      	movs	r3, #131	; 0x83
 800c65a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c65e:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800c660:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c664:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800c668:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800c66c:	f107 030c 	add.w	r3, r7, #12
 800c670:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c674:	2300      	movs	r3, #0
 800c676:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c67a:	e00b      	b.n	800c694 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800c67c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c680:	1c5a      	adds	r2, r3, #1
 800c682:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800c686:	2200      	movs	r2, #0
 800c688:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c68a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800c68e:	3301      	adds	r3, #1
 800c690:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c694:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800c698:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d3ed      	bcc.n	800c67c <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800c6a0:	1cbb      	adds	r3, r7, #2
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	2b05      	cmp	r3, #5
 800c6a6:	d917      	bls.n	800c6d8 <VL53L1_init_and_start_range+0x270>
 800c6a8:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d113      	bne.n	800c6d8 <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c6b0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c6b4:	f1c3 0301 	rsb	r3, r3, #1
 800c6b8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c6bc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800c6c0:	f107 020c 	add.w	r2, r7, #12
 800c6c4:	4413      	add	r3, r2
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	210b      	movs	r1, #11
 800c6ca:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800c6ce:	f002 f8a7 	bl	800e820 <VL53L1_i2c_encode_static_nvm_managed>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800c6d8:	1cbb      	adds	r3, r7, #2
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2b04      	cmp	r3, #4
 800c6de:	d917      	bls.n	800c710 <VL53L1_init_and_start_range+0x2a8>
 800c6e0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d113      	bne.n	800c710 <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c6e8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c6ec:	f1c3 030d 	rsb	r3, r3, #13
 800c6f0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c6f4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800c6f8:	f107 020c 	add.w	r2, r7, #12
 800c6fc:	4413      	add	r3, r2
 800c6fe:	461a      	mov	r2, r3
 800c700:	2117      	movs	r1, #23
 800c702:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c706:	f002 f967 	bl	800e9d8 <VL53L1_i2c_encode_customer_nvm_managed>
 800c70a:	4603      	mov	r3, r0
 800c70c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800c710:	1cbb      	adds	r3, r7, #2
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b03      	cmp	r3, #3
 800c716:	d917      	bls.n	800c748 <VL53L1_init_and_start_range+0x2e0>
 800c718:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d113      	bne.n	800c748 <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c720:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c724:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800c728:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c72c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800c730:	f107 020c 	add.w	r2, r7, #12
 800c734:	4413      	add	r3, r2
 800c736:	461a      	mov	r2, r3
 800c738:	2120      	movs	r1, #32
 800c73a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c73e:	f002 fa89 	bl	800ec54 <VL53L1_i2c_encode_static_config>
 800c742:	4603      	mov	r3, r0
 800c744:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800c748:	1cbb      	adds	r3, r7, #2
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d917      	bls.n	800c780 <VL53L1_init_and_start_range+0x318>
 800c750:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c754:	2b00      	cmp	r3, #0
 800c756:	d113      	bne.n	800c780 <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c758:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c75c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800c760:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c764:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800c768:	f107 020c 	add.w	r2, r7, #12
 800c76c:	4413      	add	r3, r2
 800c76e:	461a      	mov	r2, r3
 800c770:	2116      	movs	r1, #22
 800c772:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800c776:	f002 fb50 	bl	800ee1a <VL53L1_i2c_encode_general_config>
 800c77a:	4603      	mov	r3, r0
 800c77c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800c780:	1cbb      	adds	r3, r7, #2
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	2b01      	cmp	r3, #1
 800c786:	d917      	bls.n	800c7b8 <VL53L1_init_and_start_range+0x350>
 800c788:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d113      	bne.n	800c7b8 <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c790:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c794:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800c798:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c79c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800c7a0:	f107 020c 	add.w	r2, r7, #12
 800c7a4:	4413      	add	r3, r2
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	2117      	movs	r1, #23
 800c7aa:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c7ae:	f002 fbb8 	bl	800ef22 <VL53L1_i2c_encode_timing_config>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800c7b8:	1cbb      	adds	r3, r7, #2
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d036      	beq.n	800c82e <VL53L1_init_and_start_range+0x3c6>
 800c7c0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d132      	bne.n	800c82e <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c7c8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c7cc:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800c7d0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800c7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7d8:	791b      	ldrb	r3, [r3, #4]
 800c7da:	f003 0320 	and.w	r3, r3, #32
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d017      	beq.n	800c812 <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800c7e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c7e6:	789b      	ldrb	r3, [r3, #2]
 800c7e8:	f043 0301 	orr.w	r3, r3, #1
 800c7ec:	b2da      	uxtb	r2, r3
 800c7ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c7f2:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800c7f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c7f8:	789b      	ldrb	r3, [r3, #2]
 800c7fa:	f043 0301 	orr.w	r3, r3, #1
 800c7fe:	b2da      	uxtb	r2, r3
 800c800:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c804:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800c806:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c80a:	789a      	ldrb	r2, [r3, #2]
 800c80c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c810:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c812:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800c816:	f107 020c 	add.w	r2, r7, #12
 800c81a:	4413      	add	r3, r2
 800c81c:	461a      	mov	r2, r3
 800c81e:	2112      	movs	r1, #18
 800c820:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800c824:	f002 fbff 	bl	800f026 <VL53L1_i2c_encode_dynamic_config>
 800c828:	4603      	mov	r3, r0
 800c82a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800c82e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c832:	2b00      	cmp	r3, #0
 800c834:	d113      	bne.n	800c85e <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800c836:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c83a:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800c83e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c842:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800c846:	f107 020c 	add.w	r2, r7, #12
 800c84a:	4413      	add	r3, r2
 800c84c:	461a      	mov	r2, r3
 800c84e:	2105      	movs	r1, #5
 800c850:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800c854:	f002 fc6c 	bl	800f130 <VL53L1_i2c_encode_system_control>
 800c858:	4603      	mov	r3, r0
 800c85a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800c85e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10c      	bne.n	800c880 <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800c866:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c86a:	f107 020c 	add.w	r2, r7, #12
 800c86e:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800c872:	1d38      	adds	r0, r7, #4
 800c874:	6800      	ldr	r0, [r0, #0]
 800c876:	f003 f94b 	bl	800fb10 <VL53L1_WriteMulti>
 800c87a:	4603      	mov	r3, r0
 800c87c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800c880:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c884:	2b00      	cmp	r3, #0
 800c886:	d106      	bne.n	800c896 <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800c888:	1d3b      	adds	r3, r7, #4
 800c88a:	6818      	ldr	r0, [r3, #0]
 800c88c:	f001 f98a 	bl	800dba4 <VL53L1_update_ll_driver_rd_state>
 800c890:	4603      	mov	r3, r0
 800c892:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800c896:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d106      	bne.n	800c8ac <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800c89e:	1d3b      	adds	r3, r7, #4
 800c8a0:	6818      	ldr	r0, [r3, #0]
 800c8a2:	f001 fa52 	bl	800dd4a <VL53L1_update_ll_driver_cfg_state>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800c8ac:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop

0800c8bc <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b0c8      	sub	sp, #288	; 0x120
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	1d3b      	adds	r3, r7, #4
 800c8c4:	6018      	str	r0, [r3, #0]
 800c8c6:	460a      	mov	r2, r1
 800c8c8:	1cfb      	adds	r3, r7, #3
 800c8ca:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c8d2:	1d3b      	adds	r3, r7, #4
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800c8da:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c8de:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800c8e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800c8e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c8ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c8ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800c8f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c8f6:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800c8fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800c8fe:	2388      	movs	r3, #136	; 0x88
 800c900:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800c910:	1cfb      	adds	r3, r7, #3
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d008      	beq.n	800c92a <VL53L1_get_measurement_results+0x6e>
 800c918:	2b02      	cmp	r3, #2
 800c91a:	d10d      	bne.n	800c938 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800c91c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c920:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800c924:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800c928:	e00a      	b.n	800c940 <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800c92a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c92e:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800c932:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800c936:	e003      	b.n	800c940 <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800c938:	232c      	movs	r3, #44	; 0x2c
 800c93a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800c93e:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c940:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10c      	bne.n	800c962 <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800c948:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800c94c:	f107 0208 	add.w	r2, r7, #8
 800c950:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800c954:	1d38      	adds	r0, r7, #4
 800c956:	6800      	ldr	r0, [r0, #0]
 800c958:	f003 f910 	bl	800fb7c <VL53L1_ReadMulti>
 800c95c:	4603      	mov	r3, r0
 800c95e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800c962:	1cfb      	adds	r3, r7, #3
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	2b01      	cmp	r3, #1
 800c968:	d917      	bls.n	800c99a <VL53L1_get_measurement_results+0xde>
 800c96a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d113      	bne.n	800c99a <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c972:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c976:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800c97a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c97e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800c982:	f107 0208 	add.w	r2, r7, #8
 800c986:	4413      	add	r3, r2
 800c988:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800c98c:	4619      	mov	r1, r3
 800c98e:	2038      	movs	r0, #56	; 0x38
 800c990:	f002 fd60 	bl	800f454 <VL53L1_i2c_decode_debug_results>
 800c994:	4603      	mov	r3, r0
 800c996:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800c99a:	1cfb      	adds	r3, r7, #3
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d017      	beq.n	800c9d2 <VL53L1_get_measurement_results+0x116>
 800c9a2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d113      	bne.n	800c9d2 <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c9aa:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c9ae:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800c9b2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c9b6:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800c9ba:	f107 0208 	add.w	r2, r7, #8
 800c9be:	4413      	add	r3, r2
 800c9c0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	2021      	movs	r0, #33	; 0x21
 800c9c8:	f002 fce3 	bl	800f392 <VL53L1_i2c_decode_core_results>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800c9d2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d110      	bne.n	800c9fc <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c9e0:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800c9e4:	f107 0208 	add.w	r2, r7, #8
 800c9e8:	4413      	add	r3, r2
 800c9ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	202c      	movs	r0, #44	; 0x2c
 800c9f2:	f002 fbd8 	bl	800f1a6 <VL53L1_i2c_decode_system_results>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c9fc:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b088      	sub	sp, #32
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	60f8      	str	r0, [r7, #12]
 800ca12:	460b      	mov	r3, r1
 800ca14:	607a      	str	r2, [r7, #4]
 800ca16:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800ca26:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ca2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d106      	bne.n	800ca42 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800ca34:	7afb      	ldrb	r3, [r7, #11]
 800ca36:	4619      	mov	r1, r3
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f7ff ff3f 	bl	800c8bc <VL53L1_get_measurement_results>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800ca42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10c      	bne.n	800ca64 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800ca50:	4618      	mov	r0, r3
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	f000 f85e 	bl	800cb20 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d11f      	bne.n	800caae <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800ca6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d10e      	bne.n	800ca94 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d109      	bne.n	800ca94 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f001 fe32 	bl	800e6ea <VL53L1_low_power_auto_setup_manual_calibration>
 800ca86:	4603      	mov	r3, r0
 800ca88:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800ca92:	e00c      	b.n	800caae <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800ca94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d108      	bne.n	800caae <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d103      	bne.n	800caae <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	2202      	movs	r2, #2
 800caaa:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800cac2:	2284      	movs	r2, #132	; 0x84
 800cac4:	6939      	ldr	r1, [r7, #16]
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f003 fbd8 	bl	801027c <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800cacc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d104      	bne.n	800cade <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f001 f8ed 	bl	800dcb4 <VL53L1_check_ll_driver_rd_state>
 800cada:	4603      	mov	r3, r0
 800cadc:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800cade:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3720      	adds	r7, #32
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b084      	sub	sp, #16
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	460b      	mov	r3, r1
 800caf4:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800caf6:	2300      	movs	r3, #0
 800caf8:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800cafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d107      	bne.n	800cb12 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800cb02:	78fb      	ldrb	r3, [r7, #3]
 800cb04:	2203      	movs	r2, #3
 800cb06:	4619      	mov	r1, r3
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f7ff fcad 	bl	800c468 <VL53L1_init_and_start_range>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800cb12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
	...

0800cb20 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b089      	sub	sp, #36	; 0x24
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	78da      	ldrb	r2, [r3, #3]
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	3304      	adds	r3, #4
 800cb46:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800cb48:	2300      	movs	r3, #0
 800cb4a:	77fb      	strb	r3, [r7, #31]
 800cb4c:	e0d0      	b.n	800ccf0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	7ffa      	ldrb	r2, [r7, #31]
 800cb52:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	2200      	movs	r2, #0
 800cb58:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	78db      	ldrb	r3, [r3, #3]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d10a      	bne.n	800cb78 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	785b      	ldrb	r3, [r3, #1]
 800cb66:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800cb6a:	2b09      	cmp	r3, #9
 800cb6c:	d104      	bne.n	800cb78 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	2213      	movs	r2, #19
 800cb72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb76:	e007      	b.n	800cb88 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	785b      	ldrb	r3, [r3, #1]
 800cb7c:	f003 031f 	and.w	r3, r3, #31
 800cb80:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800cb88:	7ffb      	ldrb	r3, [r7, #31]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d002      	beq.n	800cb94 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d05d      	beq.n	800cc4e <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800cb92:	e0a7      	b.n	800cce4 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	789b      	ldrb	r3, [r3, #2]
 800cb98:	2b07      	cmp	r3, #7
 800cb9a:	d104      	bne.n	800cba6 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800cba0:	69bb      	ldr	r3, [r7, #24]
 800cba2:	821a      	strh	r2, [r3, #16]
 800cba4:	e00c      	b.n	800cbc0 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	789b      	ldrb	r3, [r3, #2]
 800cbaa:	2b08      	cmp	r3, #8
 800cbac:	d104      	bne.n	800cbb8 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	821a      	strh	r2, [r3, #16]
 800cbb6:	e003      	b.n	800cbc0 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	895b      	ldrh	r3, [r3, #10]
 800cbdc:	015b      	lsls	r3, r3, #5
 800cbde:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbe6:	d302      	bcc.n	800cbee <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800cbe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbec:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800cc02:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	fb02 f303 	mul.w	r3, r2, r3
 800cc0c:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc14:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	da01      	bge.n	800cc20 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800cc1c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800cc20:	12db      	asrs	r3, r3, #11
 800cc22:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	b21a      	sxth	r2, r3
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	621a      	str	r2, [r3, #32]

			break;
 800cc4c:	e04a      	b.n	800cce4 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc64:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	8bdb      	ldrh	r3, [r3, #30]
 800cc72:	015b      	lsls	r3, r3, #5
 800cc74:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc7c:	d302      	bcc.n	800cc84 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800cc7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc82:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	b29a      	uxth	r2, r3
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800cc98:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	fb02 f303 	mul.w	r3, r2, r3
 800cca2:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccaa:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	da01      	bge.n	800ccb6 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800ccb2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ccb6:	12db      	asrs	r3, r3, #11
 800ccb8:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	b21a      	sxth	r2, r3
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	621a      	str	r2, [r3, #32]

			break;
 800cce2:	bf00      	nop
		}

		pdata++;
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	3340      	adds	r3, #64	; 0x40
 800cce8:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800ccea:	7ffb      	ldrb	r3, [r7, #31]
 800ccec:	3301      	adds	r3, #1
 800ccee:	77fb      	strb	r3, [r7, #31]
 800ccf0:	7ffb      	ldrb	r3, [r7, #31]
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	f67f af2b 	bls.w	800cb4e <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	785b      	ldrb	r3, [r3, #1]
 800cd02:	f003 031f 	and.w	r3, r3, #31
 800cd06:	2b11      	cmp	r3, #17
 800cd08:	bf8c      	ite	hi
 800cd0a:	2201      	movhi	r2, #1
 800cd0c:	2200      	movls	r2, #0
 800cd0e:	b2d2      	uxtb	r2, r2
 800cd10:	2a00      	cmp	r2, #0
 800cd12:	d116      	bne.n	800cd42 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800cd14:	2201      	movs	r2, #1
 800cd16:	409a      	lsls	r2, r3
 800cd18:	4b0d      	ldr	r3, [pc, #52]	; (800cd50 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	bf14      	ite	ne
 800cd20:	2301      	movne	r3, #1
 800cd22:	2300      	moveq	r3, #0
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00b      	beq.n	800cd42 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	785b      	ldrb	r3, [r3, #1]
 800cd2e:	f003 031f 	and.w	r3, r3, #31
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800cd40:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800cd42:	bf00      	nop
 800cd44:	3724      	adds	r7, #36	; 0x24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	0002200e 	.word	0x0002200e

0800cd54 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b087      	sub	sp, #28
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	607a      	str	r2, [r7, #4]
 800cd60:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd62:	2300      	movs	r3, #0
 800cd64:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800cd6a:	897b      	ldrh	r3, [r7, #10]
 800cd6c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800cd70:	2b38      	cmp	r3, #56	; 0x38
 800cd72:	f200 8204 	bhi.w	800d17e <VL53L1_get_tuning_parm+0x42a>
 800cd76:	a201      	add	r2, pc, #4	; (adr r2, 800cd7c <VL53L1_get_tuning_parm+0x28>)
 800cd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7c:	0800ce61 	.word	0x0800ce61
 800cd80:	0800ce6f 	.word	0x0800ce6f
 800cd84:	0800ce7d 	.word	0x0800ce7d
 800cd88:	0800ce8b 	.word	0x0800ce8b
 800cd8c:	0800ce99 	.word	0x0800ce99
 800cd90:	0800cea7 	.word	0x0800cea7
 800cd94:	0800ceb5 	.word	0x0800ceb5
 800cd98:	0800cec3 	.word	0x0800cec3
 800cd9c:	0800ced1 	.word	0x0800ced1
 800cda0:	0800cedf 	.word	0x0800cedf
 800cda4:	0800ceed 	.word	0x0800ceed
 800cda8:	0800cefb 	.word	0x0800cefb
 800cdac:	0800cf09 	.word	0x0800cf09
 800cdb0:	0800cf17 	.word	0x0800cf17
 800cdb4:	0800cf25 	.word	0x0800cf25
 800cdb8:	0800cf33 	.word	0x0800cf33
 800cdbc:	0800cf41 	.word	0x0800cf41
 800cdc0:	0800cf4f 	.word	0x0800cf4f
 800cdc4:	0800cf5d 	.word	0x0800cf5d
 800cdc8:	0800cf6b 	.word	0x0800cf6b
 800cdcc:	0800cf79 	.word	0x0800cf79
 800cdd0:	0800cf87 	.word	0x0800cf87
 800cdd4:	0800cf95 	.word	0x0800cf95
 800cdd8:	0800cfa3 	.word	0x0800cfa3
 800cddc:	0800cfb1 	.word	0x0800cfb1
 800cde0:	0800cfbf 	.word	0x0800cfbf
 800cde4:	0800cfcd 	.word	0x0800cfcd
 800cde8:	0800cfdb 	.word	0x0800cfdb
 800cdec:	0800cfe9 	.word	0x0800cfe9
 800cdf0:	0800cff7 	.word	0x0800cff7
 800cdf4:	0800d005 	.word	0x0800d005
 800cdf8:	0800d013 	.word	0x0800d013
 800cdfc:	0800d021 	.word	0x0800d021
 800ce00:	0800d02f 	.word	0x0800d02f
 800ce04:	0800d03d 	.word	0x0800d03d
 800ce08:	0800d04b 	.word	0x0800d04b
 800ce0c:	0800d059 	.word	0x0800d059
 800ce10:	0800d067 	.word	0x0800d067
 800ce14:	0800d075 	.word	0x0800d075
 800ce18:	0800d083 	.word	0x0800d083
 800ce1c:	0800d091 	.word	0x0800d091
 800ce20:	0800d09f 	.word	0x0800d09f
 800ce24:	0800d0ad 	.word	0x0800d0ad
 800ce28:	0800d0bb 	.word	0x0800d0bb
 800ce2c:	0800d0c9 	.word	0x0800d0c9
 800ce30:	0800d0d7 	.word	0x0800d0d7
 800ce34:	0800d0e5 	.word	0x0800d0e5
 800ce38:	0800d0f3 	.word	0x0800d0f3
 800ce3c:	0800d101 	.word	0x0800d101
 800ce40:	0800d10f 	.word	0x0800d10f
 800ce44:	0800d11d 	.word	0x0800d11d
 800ce48:	0800d12b 	.word	0x0800d12b
 800ce4c:	0800d139 	.word	0x0800d139
 800ce50:	0800d147 	.word	0x0800d147
 800ce54:	0800d155 	.word	0x0800d155
 800ce58:	0800d163 	.word	0x0800d163
 800ce5c:	0800d171 	.word	0x0800d171

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800ce66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	601a      	str	r2, [r3, #0]
	break;
 800ce6c:	e18e      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800ce74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	601a      	str	r2, [r3, #0]
	break;
 800ce7a:	e187      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800ce82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	601a      	str	r2, [r3, #0]
	break;
 800ce88:	e180      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800ce90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	601a      	str	r2, [r3, #0]
	break;
 800ce96:	e179      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ce9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	601a      	str	r2, [r3, #0]
	break;
 800cea4:	e172      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800ceac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	601a      	str	r2, [r3, #0]
	break;
 800ceb2:	e16b      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ceba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	601a      	str	r2, [r3, #0]
	break;
 800cec0:	e164      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800cec8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	601a      	str	r2, [r3, #0]
	break;
 800cece:	e15d      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800ced6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	601a      	str	r2, [r3, #0]
	break;
 800cedc:	e156      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800cee4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	601a      	str	r2, [r3, #0]
	break;
 800ceea:	e14f      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800cef2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	601a      	str	r2, [r3, #0]
	break;
 800cef8:	e148      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800cf00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	601a      	str	r2, [r3, #0]
	break;
 800cf06:	e141      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800cf0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	601a      	str	r2, [r3, #0]
	break;
 800cf14:	e13a      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800cf1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	601a      	str	r2, [r3, #0]
	break;
 800cf22:	e133      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800cf2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	601a      	str	r2, [r3, #0]
	break;
 800cf30:	e12c      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800cf38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	601a      	str	r2, [r3, #0]
	break;
 800cf3e:	e125      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800cf46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	601a      	str	r2, [r3, #0]
	break;
 800cf4c:	e11e      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800cf54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	601a      	str	r2, [r3, #0]
	break;
 800cf5a:	e117      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800cf62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	601a      	str	r2, [r3, #0]
	break;
 800cf68:	e110      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800cf70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	601a      	str	r2, [r3, #0]
	break;
 800cf76:	e109      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cf7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	601a      	str	r2, [r3, #0]
	break;
 800cf84:	e102      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800cf8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	601a      	str	r2, [r3, #0]
	break;
 800cf92:	e0fb      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800cf9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	601a      	str	r2, [r3, #0]
	break;
 800cfa0:	e0f4      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800cfa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	601a      	str	r2, [r3, #0]
	break;
 800cfae:	e0ed      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800cfb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	601a      	str	r2, [r3, #0]
	break;
 800cfbc:	e0e6      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800cfc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	601a      	str	r2, [r3, #0]
	break;
 800cfca:	e0df      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800cfd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	601a      	str	r2, [r3, #0]
	break;
 800cfd8:	e0d8      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800cfe0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	601a      	str	r2, [r3, #0]
	break;
 800cfe6:	e0d1      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800cfee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	601a      	str	r2, [r3, #0]
	break;
 800cff4:	e0ca      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800cffc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	601a      	str	r2, [r3, #0]
	break;
 800d002:	e0c3      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d00a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	601a      	str	r2, [r3, #0]
	break;
 800d010:	e0bc      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800d018:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	601a      	str	r2, [r3, #0]
	break;
 800d01e:	e0b5      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d026:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	601a      	str	r2, [r3, #0]
	break;
 800d02c:	e0ae      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800d034:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	601a      	str	r2, [r3, #0]
	break;
 800d03a:	e0a7      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800d042:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	601a      	str	r2, [r3, #0]
	break;
 800d048:	e0a0      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800d050:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	601a      	str	r2, [r3, #0]
	break;
 800d056:	e099      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800d05e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	601a      	str	r2, [r3, #0]
	break;
 800d064:	e092      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800d06c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	601a      	str	r2, [r3, #0]
	break;
 800d072:	e08b      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d07a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	601a      	str	r2, [r3, #0]
	break;
 800d080:	e084      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d088:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	601a      	str	r2, [r3, #0]
	break;
 800d08e:	e07d      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d096:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	601a      	str	r2, [r3, #0]
	break;
 800d09c:	e076      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800d0a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	601a      	str	r2, [r3, #0]
	break;
 800d0aa:	e06f      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800d0b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	601a      	str	r2, [r3, #0]
	break;
 800d0b8:	e068      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800d0c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	601a      	str	r2, [r3, #0]
	break;
 800d0c6:	e061      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800d0ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	601a      	str	r2, [r3, #0]
	break;
 800d0d4:	e05a      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800d0dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	601a      	str	r2, [r3, #0]
	break;
 800d0e2:	e053      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800d0ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	601a      	str	r2, [r3, #0]
	break;
 800d0f0:	e04c      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800d0f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	601a      	str	r2, [r3, #0]
	break;
 800d0fe:	e045      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d106:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	601a      	str	r2, [r3, #0]
	break;
 800d10c:	e03e      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d114:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	601a      	str	r2, [r3, #0]
	break;
 800d11a:	e037      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d122:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	601a      	str	r2, [r3, #0]
	break;
 800d128:	e030      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d130:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	601a      	str	r2, [r3, #0]
	break;
 800d136:	e029      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d13e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	601a      	str	r2, [r3, #0]
	break;
 800d144:	e022      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d14c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	601a      	str	r2, [r3, #0]
	break;
 800d152:	e01b      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800d15a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	601a      	str	r2, [r3, #0]
	break;
 800d160:	e014      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d168:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	601a      	str	r2, [r3, #0]
	break;
 800d16e:	e00d      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d176:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	601a      	str	r2, [r3, #0]
	break;
 800d17c:	e006      	b.n	800d18c <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d184:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800d186:	23fc      	movs	r3, #252	; 0xfc
 800d188:	75fb      	strb	r3, [r7, #23]
	break;
 800d18a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800d18c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d190:	4618      	mov	r0, r3
 800d192:	371c      	adds	r7, #28
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b085      	sub	sp, #20
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2208      	movs	r2, #8
 800d1ac:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	220b      	movs	r2, #11
 800d1b2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d1ba:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d1c2:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800d1ca:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800d1d2:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d1d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2212      	movs	r2, #18
 800d1fa:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	220f      	movs	r2, #15
 800d200:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2202      	movs	r2, #2
 800d206:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800d20e:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	220c      	movs	r2, #12
 800d214:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d216:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3714      	adds	r7, #20
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr

0800d226 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b084      	sub	sp, #16
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
 800d22e:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d230:	2300      	movs	r3, #0
 800d232:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	895b      	ldrh	r3, [r3, #10]
 800d238:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	895b      	ldrh	r3, [r3, #10]
 800d256:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	2200      	movs	r2, #0
 800d274:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2240      	movs	r2, #64	; 0x40
 800d27a:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10d      	bne.n	800d2a0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d108      	bne.n	800d2a0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d103      	bne.n	800d2a0 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	2200      	movs	r2, #0
 800d29c:	741a      	strb	r2, [r3, #16]
 800d29e:	e002      	b.n	800d2a6 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800d2a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d114      	bne.n	800d2d8 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d110      	bne.n	800d2d8 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	6818      	ldr	r0, [r3, #0]
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	7d1b      	ldrb	r3, [r3, #20]
 800d2ca:	f000 ffc9 	bl	800e260 <VL53L1_calc_range_ignore_threshold>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	82da      	strh	r2, [r3, #22]
 800d2d6:	e002      	b.n	800d2de <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d2de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800d2ea:	b480      	push	{r7}
 800d2ec:	b085      	sub	sp, #20
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d2fc:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d304:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d30c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d314:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2208      	movs	r2, #8
 800d31a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2228      	movs	r2, #40	; 0x28
 800d320:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2209      	movs	r2, #9
 800d326:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d328:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3714      	adds	r7, #20
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr

0800d338 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800d338:	b480      	push	{r7}
 800d33a:	b085      	sub	sp, #20
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d340:	2300      	movs	r3, #0
 800d342:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f248 0203 	movw	r2, #32771	; 0x8003
 800d34a:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f248 0201 	movw	r2, #32769	; 0x8001
 800d352:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f248 0241 	movw	r2, #32833	; 0x8041
 800d35a:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	220e      	movs	r2, #14
 800d360:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	220a      	movs	r2, #10
 800d366:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2206      	movs	r2, #6
 800d36c:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	220e      	movs	r2, #14
 800d372:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	220a      	movs	r2, #10
 800d378:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2206      	movs	r2, #6
 800d37e:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2202      	movs	r2, #2
 800d384:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2221      	movs	r2, #33	; 0x21
 800d38a:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d39e:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d3a6:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d3ae:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	22c0      	movs	r2, #192	; 0xc0
 800d3b4:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	22c0      	movs	r2, #192	; 0xc0
 800d3ba:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	22c0      	movs	r2, #192	; 0xc0
 800d3c0:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2208      	movs	r2, #8
 800d3c6:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2210      	movs	r2, #16
 800d3cc:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2202      	movs	r2, #2
 800d3da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2202      	movs	r2, #2
 800d3ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d3fc:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d404:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f248 0230 	movw	r2, #32816	; 0x8030
 800d40c:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d414:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d41c:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d424:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f24f 6218 	movw	r2, #63000	; 0xf618
 800d42c:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d434:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800d43c:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d444:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800d446:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3714      	adds	r7, #20
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr

0800d456 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d456:	b480      	push	{r7}
 800d458:	b087      	sub	sp, #28
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	60f8      	str	r0, [r7, #12]
 800d45e:	60b9      	str	r1, [r7, #8]
 800d460:	607a      	str	r2, [r7, #4]
 800d462:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d464:	2300      	movs	r3, #0
 800d466:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d46e:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2200      	movs	r2, #0
 800d474:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2200      	movs	r2, #0
 800d47a:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2200      	movs	r2, #0
 800d480:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2200      	movs	r2, #0
 800d486:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2200      	movs	r2, #0
 800d492:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2200      	movs	r2, #0
 800d498:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2200      	movs	r2, #0
 800d49e:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2211      	movs	r2, #17
 800d4b0:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2202      	movs	r2, #2
 800d4b6:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2202      	movs	r2, #2
 800d4c2:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2208      	movs	r2, #8
 800d4c8:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d2:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4da:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e2:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2200      	movs	r2, #0
 800d500:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	22ff      	movs	r2, #255	; 0xff
 800d506:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800d508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800d510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d512:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2200      	movs	r2, #0
 800d51c:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2200      	movs	r2, #0
 800d528:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	2200      	movs	r2, #0
 800d52e:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2200      	movs	r2, #0
 800d534:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2220      	movs	r2, #32
 800d53a:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	220b      	movs	r2, #11
 800d540:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800d542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d544:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	2202      	movs	r2, #2
 800d54e:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	220d      	movs	r2, #13
 800d554:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	2200      	movs	r2, #0
 800d562:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	2201      	movs	r2, #1
 800d568:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	2200      	movs	r2, #0
 800d56e:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	2200      	movs	r2, #0
 800d574:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800d57c:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	2200      	movs	r2, #0
 800d582:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	2238      	movs	r2, #56	; 0x38
 800d588:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	22ff      	movs	r2, #255	; 0xff
 800d58e:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	2201      	movs	r2, #1
 800d594:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	221a      	movs	r2, #26
 800d5a0:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2220      	movs	r2, #32
 800d5ac:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	22cc      	movs	r2, #204	; 0xcc
 800d5b8:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	220b      	movs	r2, #11
 800d5be:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	22f5      	movs	r2, #245	; 0xf5
 800d5ca:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2209      	movs	r2, #9
 800d5d0:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800d5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d4:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800d5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5dc:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2208      	movs	r2, #8
 800d5e6:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2278      	movs	r2, #120	; 0x78
 800d5ec:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2200      	movs	r2, #0
 800d604:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	2200      	movs	r2, #0
 800d60a:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	2200      	movs	r2, #0
 800d610:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800d612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d614:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	220b      	movs	r2, #11
 800d620:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	2209      	movs	r2, #9
 800d626:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	2201      	movs	r2, #1
 800d63c:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800d63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d640:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800d648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	22c7      	movs	r2, #199	; 0xc7
 800d656:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	22ff      	movs	r2, #255	; 0xff
 800d65c:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	22db      	movs	r2, #219	; 0xdb
 800d662:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	2202      	movs	r2, #2
 800d668:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800d66a:	6a3b      	ldr	r3, [r7, #32]
 800d66c:	2200      	movs	r2, #0
 800d66e:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800d670:	6a3b      	ldr	r3, [r7, #32]
 800d672:	2201      	movs	r2, #1
 800d674:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	2201      	movs	r2, #1
 800d67a:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800d67c:	6a3b      	ldr	r3, [r7, #32]
 800d67e:	2221      	movs	r2, #33	; 0x21
 800d680:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800d682:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d686:	4618      	mov	r0, r3
 800d688:	371c      	adds	r7, #28
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b088      	sub	sp, #32
 800d696:	af02      	add	r7, sp, #8
 800d698:	60f8      	str	r0, [r7, #12]
 800d69a:	60b9      	str	r1, [r7, #8]
 800d69c:	607a      	str	r2, [r7, #4]
 800d69e:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a6:	9301      	str	r3, [sp, #4]
 800d6a8:	6a3b      	ldr	r3, [r7, #32]
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	68b9      	ldr	r1, [r7, #8]
 800d6b2:	68f8      	ldr	r0, [r7, #12]
 800d6b4:	f7ff fecf 	bl	800d456 <VL53L1_preset_mode_standard_ranging>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d6bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d121      	bne.n	800d708 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2207      	movs	r2, #7
 800d6c8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2205      	movs	r2, #5
 800d6ce:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d2:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2208      	movs	r2, #8
 800d6e4:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2238      	movs	r2, #56	; 0x38
 800d6ea:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	2207      	movs	r2, #7
 800d6f0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2205      	movs	r2, #5
 800d6f6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fa:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800d700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d702:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d708:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3718      	adds	r7, #24
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b088      	sub	sp, #32
 800d718:	af02      	add	r7, sp, #8
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
 800d720:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d722:	2300      	movs	r3, #0
 800d724:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d728:	9301      	str	r3, [sp, #4]
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	68b9      	ldr	r1, [r7, #8]
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f7ff fe8e 	bl	800d456 <VL53L1_preset_mode_standard_ranging>
 800d73a:	4603      	mov	r3, r0
 800d73c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d73e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d121      	bne.n	800d78a <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	220f      	movs	r2, #15
 800d74a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	220d      	movs	r2, #13
 800d750:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800d752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d754:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800d75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75c:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2208      	movs	r2, #8
 800d766:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	22b8      	movs	r2, #184	; 0xb8
 800d76c:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	220f      	movs	r2, #15
 800d772:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	220d      	movs	r2, #13
 800d778:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77c:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800d782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d784:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d78a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3718      	adds	r7, #24
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b088      	sub	sp, #32
 800d79a:	af02      	add	r7, sp, #8
 800d79c:	60f8      	str	r0, [r7, #12]
 800d79e:	60b9      	str	r1, [r7, #8]
 800d7a0:	607a      	str	r2, [r7, #4]
 800d7a2:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7aa:	9301      	str	r3, [sp, #4]
 800d7ac:	6a3b      	ldr	r3, [r7, #32]
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	68b9      	ldr	r1, [r7, #8]
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f7ff fe4d 	bl	800d456 <VL53L1_preset_mode_standard_ranging>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d7c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d105      	bne.n	800d7d4 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	2202      	movs	r2, #2
 800d7cc:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	223b      	movs	r2, #59	; 0x3b
 800d7d2:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d7d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3718      	adds	r7, #24
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b088      	sub	sp, #32
 800d7e4:	af02      	add	r7, sp, #8
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	607a      	str	r2, [r7, #4]
 800d7ec:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f4:	9301      	str	r3, [sp, #4]
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	68b9      	ldr	r1, [r7, #8]
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f7ff fe28 	bl	800d456 <VL53L1_preset_mode_standard_ranging>
 800d806:	4603      	mov	r3, r0
 800d808:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d80a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d105      	bne.n	800d81e <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	2202      	movs	r2, #2
 800d816:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	225b      	movs	r2, #91	; 0x5b
 800d81c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d81e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3718      	adds	r7, #24
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b088      	sub	sp, #32
 800d82e:	af02      	add	r7, sp, #8
 800d830:	60f8      	str	r0, [r7, #12]
 800d832:	60b9      	str	r1, [r7, #8]
 800d834:	607a      	str	r2, [r7, #4]
 800d836:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d838:	2300      	movs	r3, #0
 800d83a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	9301      	str	r3, [sp, #4]
 800d840:	6a3b      	ldr	r3, [r7, #32]
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	687a      	ldr	r2, [r7, #4]
 800d848:	68b9      	ldr	r1, [r7, #8]
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f7ff fe03 	bl	800d456 <VL53L1_preset_mode_standard_ranging>
 800d850:	4603      	mov	r3, r0
 800d852:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d854:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d11a      	bne.n	800d892 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	2200      	movs	r2, #0
 800d860:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2200      	movs	r2, #0
 800d866:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	22b1      	movs	r2, #177	; 0xb1
 800d86c:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	22d4      	movs	r2, #212	; 0xd4
 800d878:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d880:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d88c:	6a3b      	ldr	r3, [r7, #32]
 800d88e:	2240      	movs	r2, #64	; 0x40
 800d890:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d892:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d896:	4618      	mov	r0, r3
 800d898:	3718      	adds	r7, #24
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b088      	sub	sp, #32
 800d8a2:	af02      	add	r7, sp, #8
 800d8a4:	60f8      	str	r0, [r7, #12]
 800d8a6:	60b9      	str	r1, [r7, #8]
 800d8a8:	607a      	str	r2, [r7, #4]
 800d8aa:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	9301      	str	r3, [sp, #4]
 800d8b4:	6a3b      	ldr	r3, [r7, #32]
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	68b9      	ldr	r1, [r7, #8]
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f7ff fee7 	bl	800d692 <VL53L1_preset_mode_standard_ranging_short_range>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d8c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d11a      	bne.n	800d906 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2201      	movs	r2, #1
 800d8da:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2284      	movs	r2, #132	; 0x84
 800d8e0:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	22b1      	movs	r2, #177	; 0xb1
 800d8ec:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d8f4:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d900:	6a3b      	ldr	r3, [r7, #32]
 800d902:	2240      	movs	r2, #64	; 0x40
 800d904:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d906:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3718      	adds	r7, #24
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b088      	sub	sp, #32
 800d916:	af02      	add	r7, sp, #8
 800d918:	60f8      	str	r0, [r7, #12]
 800d91a:	60b9      	str	r1, [r7, #8]
 800d91c:	607a      	str	r2, [r7, #4]
 800d91e:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d920:	2300      	movs	r3, #0
 800d922:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800d924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d926:	9301      	str	r3, [sp, #4]
 800d928:	6a3b      	ldr	r3, [r7, #32]
 800d92a:	9300      	str	r3, [sp, #0]
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	68b9      	ldr	r1, [r7, #8]
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f7ff feee 	bl	800d714 <VL53L1_preset_mode_standard_ranging_long_range>
 800d938:	4603      	mov	r3, r0
 800d93a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d93c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d11a      	bne.n	800d97a <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2200      	movs	r2, #0
 800d948:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2297      	movs	r2, #151	; 0x97
 800d954:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2200      	movs	r2, #0
 800d95a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	22b1      	movs	r2, #177	; 0xb1
 800d960:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d968:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d974:	6a3b      	ldr	r3, [r7, #32]
 800d976:	2240      	movs	r2, #64	; 0x40
 800d978:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d97a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3718      	adds	r7, #24
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b088      	sub	sp, #32
 800d98a:	af02      	add	r7, sp, #8
 800d98c:	60f8      	str	r0, [r7, #12]
 800d98e:	60b9      	str	r1, [r7, #8]
 800d990:	607a      	str	r2, [r7, #4]
 800d992:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d994:	2300      	movs	r3, #0
 800d996:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800d998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99a:	9301      	str	r3, [sp, #4]
 800d99c:	6a3b      	ldr	r3, [r7, #32]
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	68b9      	ldr	r1, [r7, #8]
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f7ff ff3f 	bl	800d82a <VL53L1_preset_mode_timed_ranging>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d9b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d106      	bne.n	800d9c6 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800d9b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9ba:	6839      	ldr	r1, [r7, #0]
 800d9bc:	68b8      	ldr	r0, [r7, #8]
 800d9be:	f000 fe7b 	bl	800e6b8 <VL53L1_config_low_power_auto_mode>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d9c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3718      	adds	r7, #24
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b088      	sub	sp, #32
 800d9d6:	af02      	add	r7, sp, #8
 800d9d8:	60f8      	str	r0, [r7, #12]
 800d9da:	60b9      	str	r1, [r7, #8]
 800d9dc:	607a      	str	r2, [r7, #4]
 800d9de:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	9301      	str	r3, [sp, #4]
 800d9e8:	6a3b      	ldr	r3, [r7, #32]
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	68b9      	ldr	r1, [r7, #8]
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f7ff ff53 	bl	800d89e <VL53L1_preset_mode_timed_ranging_short_range>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d9fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d106      	bne.n	800da12 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800da04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da06:	6839      	ldr	r1, [r7, #0]
 800da08:	68b8      	ldr	r0, [r7, #8]
 800da0a:	f000 fe55 	bl	800e6b8 <VL53L1_config_low_power_auto_mode>
 800da0e:	4603      	mov	r3, r0
 800da10:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800da12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800da1e:	b580      	push	{r7, lr}
 800da20:	b088      	sub	sp, #32
 800da22:	af02      	add	r7, sp, #8
 800da24:	60f8      	str	r0, [r7, #12]
 800da26:	60b9      	str	r1, [r7, #8]
 800da28:	607a      	str	r2, [r7, #4]
 800da2a:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da2c:	2300      	movs	r3, #0
 800da2e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	9301      	str	r3, [sp, #4]
 800da34:	6a3b      	ldr	r3, [r7, #32]
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	68b9      	ldr	r1, [r7, #8]
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f7ff ff67 	bl	800d912 <VL53L1_preset_mode_timed_ranging_long_range>
 800da44:	4603      	mov	r3, r0
 800da46:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800da48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d106      	bne.n	800da5e <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800da50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da52:	6839      	ldr	r1, [r7, #0]
 800da54:	68b8      	ldr	r0, [r7, #8]
 800da56:	f000 fe2f 	bl	800e6b8 <VL53L1_config_low_power_auto_mode>
 800da5a:	4603      	mov	r3, r0
 800da5c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800da5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3718      	adds	r7, #24
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b088      	sub	sp, #32
 800da6e:	af02      	add	r7, sp, #8
 800da70:	60f8      	str	r0, [r7, #12]
 800da72:	60b9      	str	r1, [r7, #8]
 800da74:	607a      	str	r2, [r7, #4]
 800da76:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da78:	2300      	movs	r3, #0
 800da7a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7e:	9301      	str	r3, [sp, #4]
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	68b9      	ldr	r1, [r7, #8]
 800da8a:	68f8      	ldr	r0, [r7, #12]
 800da8c:	f7ff fce3 	bl	800d456 <VL53L1_preset_mode_standard_ranging>
 800da90:	4603      	mov	r3, r0
 800da92:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800da94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d116      	bne.n	800daca <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	2200      	movs	r2, #0
 800daa0:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	22b1      	movs	r2, #177	; 0xb1
 800daac:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	22d4      	movs	r2, #212	; 0xd4
 800dab8:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800daba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabc:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800dac4:	6a3b      	ldr	r3, [r7, #32]
 800dac6:	2210      	movs	r2, #16
 800dac8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800daca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3718      	adds	r7, #24
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b088      	sub	sp, #32
 800dada:	af02      	add	r7, sp, #8
 800dadc:	60f8      	str	r0, [r7, #12]
 800dade:	60b9      	str	r1, [r7, #8]
 800dae0:	607a      	str	r2, [r7, #4]
 800dae2:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dae4:	2300      	movs	r3, #0
 800dae6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daea:	9301      	str	r3, [sp, #4]
 800daec:	6a3b      	ldr	r3, [r7, #32]
 800daee:	9300      	str	r3, [sp, #0]
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	68b9      	ldr	r1, [r7, #8]
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f7ff fcad 	bl	800d456 <VL53L1_preset_mode_standard_ranging>
 800dafc:	4603      	mov	r3, r0
 800dafe:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800db00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d102      	bne.n	800db0e <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800db08:	6a3b      	ldr	r3, [r7, #32]
 800db0a:	2201      	movs	r2, #1
 800db0c:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800db0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3718      	adds	r7, #24
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800db1a:	b480      	push	{r7}
 800db1c:	b085      	sub	sp, #20
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2201      	movs	r2, #1
 800db2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2202      	movs	r2, #2
 800db32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	220d      	movs	r2, #13
 800db3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f640 028e 	movw	r2, #2190	; 0x88e
 800db44:	625a      	str	r2, [r3, #36]	; 0x24
}
 800db46:	bf00      	nop
 800db48:	3714      	adds	r7, #20
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr

0800db52 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800db52:	b480      	push	{r7}
 800db54:	b085      	sub	sp, #20
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
 800db5a:	460b      	mov	r3, r1
 800db5c:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	332c      	adds	r3, #44	; 0x2c
 800db66:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	78fa      	ldrb	r2, [r7, #3]
 800db6c:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	2200      	movs	r2, #0
 800db72:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	2202      	movs	r2, #2
 800db78:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	2200      	movs	r2, #0
 800db7e:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	78fa      	ldrb	r2, [r7, #3]
 800db84:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2200      	movs	r2, #0
 800db8a:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	2202      	movs	r2, #2
 800db90:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	2200      	movs	r2, #0
 800db96:	71da      	strb	r2, [r3, #7]

}
 800db98:	bf00      	nop
 800db9a:	3714      	adds	r7, #20
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b087      	sub	sp, #28
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800dbac:	2300      	movs	r3, #0
 800dbae:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	332c      	adds	r3, #44	; 0x2c
 800dbb8:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800dbc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d10c      	bne.n	800dbe2 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2203      	movs	r2, #3
 800dbcc:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2202      	movs	r2, #2
 800dbd8:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	71da      	strb	r2, [r3, #7]
 800dbe0:	e060      	b.n	800dca4 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	795b      	ldrb	r3, [r3, #5]
 800dbe6:	2bff      	cmp	r3, #255	; 0xff
 800dbe8:	d103      	bne.n	800dbf2 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2280      	movs	r2, #128	; 0x80
 800dbee:	715a      	strb	r2, [r3, #5]
 800dbf0:	e005      	b.n	800dbfe <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	795b      	ldrb	r3, [r3, #5]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	799b      	ldrb	r3, [r3, #6]
 800dc02:	f083 0302 	eor.w	r3, r3, #2
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	791b      	ldrb	r3, [r3, #4]
 800dc10:	3b03      	subs	r3, #3
 800dc12:	2b05      	cmp	r3, #5
 800dc14:	d839      	bhi.n	800dc8a <VL53L1_update_ll_driver_rd_state+0xe6>
 800dc16:	a201      	add	r2, pc, #4	; (adr r2, 800dc1c <VL53L1_update_ll_driver_rd_state+0x78>)
 800dc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc1c:	0800dc35 	.word	0x0800dc35
 800dc20:	0800dc8b 	.word	0x0800dc8b
 800dc24:	0800dc8b 	.word	0x0800dc8b
 800dc28:	0800dc5f 	.word	0x0800dc5f
 800dc2c:	0800dc6d 	.word	0x0800dc6d
 800dc30:	0800dc75 	.word	0x0800dc75

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800dc3a:	f003 0302 	and.w	r3, r3, #2
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	dd03      	ble.n	800dc4a <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2206      	movs	r2, #6
 800dc46:	711a      	strb	r2, [r3, #4]
 800dc48:	e002      	b.n	800dc50 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2208      	movs	r2, #8
 800dc4e:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2200      	movs	r2, #0
 800dc54:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	71da      	strb	r2, [r3, #7]

		break;
 800dc5c:	e022      	b.n	800dca4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2200      	movs	r2, #0
 800dc62:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2208      	movs	r2, #8
 800dc68:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800dc6a:	e01b      	b.n	800dca4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2208      	movs	r2, #8
 800dc70:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800dc72:	e017      	b.n	800dca4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	79db      	ldrb	r3, [r3, #7]
 800dc78:	f083 0301 	eor.w	r3, r3, #1
 800dc7c:	b2da      	uxtb	r2, r3
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2208      	movs	r2, #8
 800dc86:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800dc88:	e00c      	b.n	800dca4 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2203      	movs	r2, #3
 800dc8e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2200      	movs	r2, #0
 800dc94:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2202      	movs	r2, #2
 800dc9a:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	71da      	strb	r2, [r3, #7]

		break;
 800dca2:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800dca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	371c      	adds	r7, #28
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b089      	sub	sp, #36	; 0x24
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	332c      	adds	r3, #44	; 0x2c
 800dcc8:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800dcd0:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800dce2:	f003 031f 	and.w	r3, r3, #31
 800dce6:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	78db      	ldrb	r3, [r3, #3]
 800dcec:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800dcf2:	111b      	asrs	r3, r3, #4
 800dcf4:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800dcf6:	f003 0302 	and.w	r3, r3, #2
 800dcfa:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800dd02:	f003 0320 	and.w	r3, r3, #32
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d017      	beq.n	800dd3a <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	791b      	ldrb	r3, [r3, #4]
 800dd0e:	2b06      	cmp	r3, #6
 800dd10:	d105      	bne.n	800dd1e <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
 800dd14:	2b12      	cmp	r3, #18
 800dd16:	d010      	beq.n	800dd3a <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800dd18:	23ef      	movs	r3, #239	; 0xef
 800dd1a:	77fb      	strb	r3, [r7, #31]
 800dd1c:	e00d      	b.n	800dd3a <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	795b      	ldrb	r3, [r3, #5]
 800dd22:	7bba      	ldrb	r2, [r7, #14]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d001      	beq.n	800dd2c <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800dd28:	23ee      	movs	r3, #238	; 0xee
 800dd2a:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	799b      	ldrb	r3, [r3, #6]
 800dd30:	7b7a      	ldrb	r2, [r7, #13]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d001      	beq.n	800dd3a <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800dd36:	23ed      	movs	r3, #237	; 0xed
 800dd38:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800dd3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3724      	adds	r7, #36	; 0x24
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr

0800dd4a <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800dd4a:	b480      	push	{r7}
 800dd4c:	b087      	sub	sp, #28
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800dd52:	2300      	movs	r3, #0
 800dd54:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	332c      	adds	r3, #44	; 0x2c
 800dd5e:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800dd66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10c      	bne.n	800dd88 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2203      	movs	r2, #3
 800dd72:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2200      	movs	r2, #0
 800dd78:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2202      	movs	r2, #2
 800dd7e:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2200      	movs	r2, #0
 800dd84:	70da      	strb	r2, [r3, #3]
 800dd86:	e03e      	b.n	800de06 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	785b      	ldrb	r3, [r3, #1]
 800dd8c:	2bff      	cmp	r3, #255	; 0xff
 800dd8e:	d103      	bne.n	800dd98 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2280      	movs	r2, #128	; 0x80
 800dd94:	705a      	strb	r2, [r3, #1]
 800dd96:	e005      	b.n	800dda4 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	785b      	ldrb	r3, [r3, #1]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	789b      	ldrb	r3, [r3, #2]
 800dda8:	f083 0302 	eor.w	r3, r3, #2
 800ddac:	b2da      	uxtb	r2, r3
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	2b03      	cmp	r3, #3
 800ddb8:	d002      	beq.n	800ddc0 <VL53L1_update_ll_driver_cfg_state+0x76>
 800ddba:	2b04      	cmp	r3, #4
 800ddbc:	d00e      	beq.n	800dddc <VL53L1_update_ll_driver_cfg_state+0x92>
 800ddbe:	e015      	b.n	800ddec <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	78db      	ldrb	r3, [r3, #3]
 800ddc4:	f083 0301 	eor.w	r3, r3, #1
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2204      	movs	r2, #4
 800ddd8:	701a      	strb	r2, [r3, #0]
		break;
 800ddda:	e014      	b.n	800de06 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	78db      	ldrb	r3, [r3, #3]
 800dde0:	f083 0301 	eor.w	r3, r3, #1
 800dde4:	b2da      	uxtb	r2, r3
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	70da      	strb	r2, [r3, #3]

		break;
 800ddea:	e00c      	b.n	800de06 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2203      	movs	r2, #3
 800ddf0:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2202      	movs	r2, #2
 800ddfc:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2200      	movs	r2, #0
 800de02:	70da      	strb	r2, [r3, #3]

		break;
 800de04:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800de06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	371c      	adds	r7, #28
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr

0800de16 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800de16:	b480      	push	{r7}
 800de18:	b083      	sub	sp, #12
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
 800de1e:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	7c1a      	ldrb	r2, [r3, #16]
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	3301      	adds	r3, #1
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	7c52      	ldrb	r2, [r2, #17]
 800de30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	3302      	adds	r3, #2
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	7c92      	ldrb	r2, [r2, #18]
 800de3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	3303      	adds	r3, #3
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	7cd2      	ldrb	r2, [r2, #19]
 800de44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	3304      	adds	r3, #4
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	7d12      	ldrb	r2, [r2, #20]
 800de4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	3305      	adds	r3, #5
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	7d52      	ldrb	r2, [r2, #21]
 800de58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	3306      	adds	r3, #6
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	7d92      	ldrb	r2, [r2, #22]
 800de62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	3307      	adds	r3, #7
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	7dd2      	ldrb	r2, [r2, #23]
 800de6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	3308      	adds	r3, #8
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	7e12      	ldrb	r2, [r2, #24]
 800de76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	3309      	adds	r3, #9
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	7e52      	ldrb	r2, [r2, #25]
 800de80:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	330a      	adds	r3, #10
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	7e92      	ldrb	r2, [r2, #26]
 800de8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	330b      	adds	r3, #11
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	7ed2      	ldrb	r2, [r2, #27]
 800de94:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	330c      	adds	r3, #12
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	7f12      	ldrb	r2, [r2, #28]
 800de9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	330d      	adds	r3, #13
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	7f52      	ldrb	r2, [r2, #29]
 800dea8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	330e      	adds	r3, #14
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	7f92      	ldrb	r2, [r2, #30]
 800deb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	330f      	adds	r3, #15
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	7fd2      	ldrb	r2, [r2, #31]
 800debc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	3310      	adds	r3, #16
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	f892 2020 	ldrb.w	r2, [r2, #32]
 800dec8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	3311      	adds	r3, #17
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ded4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	3312      	adds	r3, #18
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800dee0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	3313      	adds	r3, #19
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800deec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	3314      	adds	r3, #20
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800def8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	3315      	adds	r3, #21
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800df04:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	3316      	adds	r3, #22
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800df10:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	3317      	adds	r3, #23
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800df1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	3318      	adds	r3, #24
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800df28:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	3319      	adds	r3, #25
 800df2e:	687a      	ldr	r2, [r7, #4]
 800df30:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800df34:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	331a      	adds	r3, #26
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800df40:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	331b      	adds	r3, #27
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800df4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	331c      	adds	r3, #28
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800df58:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	331d      	adds	r3, #29
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800df64:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	331e      	adds	r3, #30
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800df70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	331f      	adds	r3, #31
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800df7c:	701a      	strb	r2, [r3, #0]
}
 800df7e:	bf00      	nop
 800df80:	370c      	adds	r7, #12
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800df8a:	b480      	push	{r7}
 800df8c:	b085      	sub	sp, #20
 800df8e:	af00      	add	r7, sp, #0
 800df90:	4603      	mov	r3, r0
 800df92:	603a      	str	r2, [r7, #0]
 800df94:	80fb      	strh	r3, [r7, #6]
 800df96:	460b      	mov	r3, r1
 800df98:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800df9a:	2300      	movs	r3, #0
 800df9c:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800dfa2:	88fb      	ldrh	r3, [r7, #6]
 800dfa4:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	81fb      	strh	r3, [r7, #14]
 800dfaa:	e00e      	b.n	800dfca <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800dfac:	88ba      	ldrh	r2, [r7, #4]
 800dfae:	89fb      	ldrh	r3, [r7, #14]
 800dfb0:	1ad3      	subs	r3, r2, r3
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	89ba      	ldrh	r2, [r7, #12]
 800dfba:	b2d2      	uxtb	r2, r2
 800dfbc:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800dfbe:	89bb      	ldrh	r3, [r7, #12]
 800dfc0:	0a1b      	lsrs	r3, r3, #8
 800dfc2:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800dfc4:	89fb      	ldrh	r3, [r7, #14]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	81fb      	strh	r3, [r7, #14]
 800dfca:	89fa      	ldrh	r2, [r7, #14]
 800dfcc:	88bb      	ldrh	r3, [r7, #4]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d3ec      	bcc.n	800dfac <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800dfd2:	bf00      	nop
 800dfd4:	bf00      	nop
 800dfd6:	3714      	adds	r7, #20
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	6039      	str	r1, [r7, #0]
 800dfea:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800dfec:	2300      	movs	r3, #0
 800dfee:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800dff0:	e00a      	b.n	800e008 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800dff2:	89fb      	ldrh	r3, [r7, #14]
 800dff4:	021b      	lsls	r3, r3, #8
 800dff6:	b21a      	sxth	r2, r3
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	1c59      	adds	r1, r3, #1
 800dffc:	6039      	str	r1, [r7, #0]
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	b21b      	sxth	r3, r3
 800e002:	4313      	orrs	r3, r2
 800e004:	b21b      	sxth	r3, r3
 800e006:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800e008:	88fb      	ldrh	r3, [r7, #6]
 800e00a:	1e5a      	subs	r2, r3, #1
 800e00c:	80fa      	strh	r2, [r7, #6]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d1ef      	bne.n	800dff2 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800e012:	89fb      	ldrh	r3, [r7, #14]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3714      	adds	r7, #20
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e020:	b480      	push	{r7}
 800e022:	b085      	sub	sp, #20
 800e024:	af00      	add	r7, sp, #0
 800e026:	4603      	mov	r3, r0
 800e028:	603a      	str	r2, [r7, #0]
 800e02a:	80fb      	strh	r3, [r7, #6]
 800e02c:	460b      	mov	r3, r1
 800e02e:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800e030:	2300      	movs	r3, #0
 800e032:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800e038:	88fb      	ldrh	r3, [r7, #6]
 800e03a:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800e03c:	2300      	movs	r3, #0
 800e03e:	81fb      	strh	r3, [r7, #14]
 800e040:	e00f      	b.n	800e062 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e042:	88ba      	ldrh	r2, [r7, #4]
 800e044:	89fb      	ldrh	r3, [r7, #14]
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	3b01      	subs	r3, #1
 800e04a:	683a      	ldr	r2, [r7, #0]
 800e04c:	4413      	add	r3, r2
 800e04e:	89ba      	ldrh	r2, [r7, #12]
 800e050:	b2d2      	uxtb	r2, r2
 800e052:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e054:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e058:	121b      	asrs	r3, r3, #8
 800e05a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800e05c:	89fb      	ldrh	r3, [r7, #14]
 800e05e:	3301      	adds	r3, #1
 800e060:	81fb      	strh	r3, [r7, #14]
 800e062:	89fa      	ldrh	r2, [r7, #14]
 800e064:	88bb      	ldrh	r3, [r7, #4]
 800e066:	429a      	cmp	r2, r3
 800e068:	d3eb      	bcc.n	800e042 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800e06a:	bf00      	nop
 800e06c:	bf00      	nop
 800e06e:	3714      	adds	r7, #20
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e078:	b480      	push	{r7}
 800e07a:	b085      	sub	sp, #20
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	4603      	mov	r3, r0
 800e080:	6039      	str	r1, [r7, #0]
 800e082:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800e084:	2300      	movs	r3, #0
 800e086:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	b25b      	sxtb	r3, r3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	da0e      	bge.n	800e0b0 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800e092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e096:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800e098:	e00a      	b.n	800e0b0 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800e09a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e09e:	021b      	lsls	r3, r3, #8
 800e0a0:	b21a      	sxth	r2, r3
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	1c59      	adds	r1, r3, #1
 800e0a6:	6039      	str	r1, [r7, #0]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	b21b      	sxth	r3, r3
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800e0b0:	88fb      	ldrh	r3, [r7, #6]
 800e0b2:	1e5a      	subs	r2, r3, #1
 800e0b4:	80fa      	strh	r2, [r7, #6]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1ef      	bne.n	800e09a <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800e0ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3714      	adds	r7, #20
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr

0800e0ca <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e0ca:	b480      	push	{r7}
 800e0cc:	b087      	sub	sp, #28
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	60f8      	str	r0, [r7, #12]
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	607a      	str	r2, [r7, #4]
 800e0d6:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	82fb      	strh	r3, [r7, #22]
 800e0e8:	e00e      	b.n	800e108 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e0ea:	897a      	ldrh	r2, [r7, #10]
 800e0ec:	8afb      	ldrh	r3, [r7, #22]
 800e0ee:	1ad3      	subs	r3, r2, r3
 800e0f0:	3b01      	subs	r3, #1
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	693a      	ldr	r2, [r7, #16]
 800e0f8:	b2d2      	uxtb	r2, r2
 800e0fa:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	0a1b      	lsrs	r3, r3, #8
 800e100:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800e102:	8afb      	ldrh	r3, [r7, #22]
 800e104:	3301      	adds	r3, #1
 800e106:	82fb      	strh	r3, [r7, #22]
 800e108:	8afa      	ldrh	r2, [r7, #22]
 800e10a:	897b      	ldrh	r3, [r7, #10]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d3ec      	bcc.n	800e0ea <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800e110:	bf00      	nop
 800e112:	bf00      	nop
 800e114:	371c      	adds	r7, #28
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr

0800e11e <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e11e:	b480      	push	{r7}
 800e120:	b085      	sub	sp, #20
 800e122:	af00      	add	r7, sp, #0
 800e124:	4603      	mov	r3, r0
 800e126:	6039      	str	r1, [r7, #0]
 800e128:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800e12a:	2300      	movs	r3, #0
 800e12c:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800e12e:	e007      	b.n	800e140 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	021a      	lsls	r2, r3, #8
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	1c59      	adds	r1, r3, #1
 800e138:	6039      	str	r1, [r7, #0]
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	4313      	orrs	r3, r2
 800e13e:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800e140:	88fb      	ldrh	r3, [r7, #6]
 800e142:	1e5a      	subs	r2, r3, #1
 800e144:	80fa      	strh	r2, [r7, #6]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d1f2      	bne.n	800e130 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800e14a:	68fb      	ldr	r3, [r7, #12]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3714      	adds	r7, #20
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	4603      	mov	r3, r0
 800e160:	6039      	str	r1, [r7, #0]
 800e162:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800e164:	2300      	movs	r3, #0
 800e166:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	b25b      	sxtb	r3, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	da0b      	bge.n	800e18a <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800e172:	f04f 33ff 	mov.w	r3, #4294967295
 800e176:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800e178:	e007      	b.n	800e18a <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	021a      	lsls	r2, r3, #8
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	1c59      	adds	r1, r3, #1
 800e182:	6039      	str	r1, [r7, #0]
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	4313      	orrs	r3, r2
 800e188:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800e18a:	88fb      	ldrh	r3, [r7, #6]
 800e18c:	1e5a      	subs	r2, r3, #1
 800e18e:	80fa      	strh	r2, [r7, #6]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1f2      	bne.n	800e17a <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800e194:	68fb      	ldr	r3, [r7, #12]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3714      	adds	r7, #20
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr

0800e1a2 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b084      	sub	sp, #16
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	78fa      	ldrb	r2, [r7, #3]
 800e1ba:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	2183      	movs	r1, #131	; 0x83
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f001 fd0d 	bl	800fbe8 <VL53L1_WrByte>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800e1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3710      	adds	r7, #16
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}

0800e1de <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	b084      	sub	sp, #16
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800e1ea:	2101      	movs	r1, #1
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f7ff ffd8 	bl	800e1a2 <VL53L1_set_powerforce_register>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800e1f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3710      	adds	r7, #16
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}

0800e202 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800e202:	b580      	push	{r7, lr}
 800e204:	b086      	sub	sp, #24
 800e206:	af00      	add	r7, sp, #0
 800e208:	4603      	mov	r3, r0
 800e20a:	460a      	mov	r2, r1
 800e20c:	80fb      	strh	r3, [r7, #6]
 800e20e:	4613      	mov	r3, r2
 800e210:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800e212:	2300      	movs	r3, #0
 800e214:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800e216:	2300      	movs	r3, #0
 800e218:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800e21a:	2300      	movs	r3, #0
 800e21c:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800e21e:	88fb      	ldrh	r3, [r7, #6]
 800e220:	4618      	mov	r0, r3
 800e222:	f000 faa7 	bl	800e774 <VL53L1_calc_pll_period_us>
 800e226:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800e228:	797b      	ldrb	r3, [r7, #5]
 800e22a:	4618      	mov	r0, r3
 800e22c:	f000 fab6 	bl	800e79c <VL53L1_decode_vcsel_period>
 800e230:	4603      	mov	r3, r0
 800e232:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800e234:	697a      	ldr	r2, [r7, #20]
 800e236:	4613      	mov	r3, r2
 800e238:	00db      	lsls	r3, r3, #3
 800e23a:	4413      	add	r3, r2
 800e23c:	021b      	lsls	r3, r3, #8
 800e23e:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	099b      	lsrs	r3, r3, #6
 800e244:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800e246:	7cfa      	ldrb	r2, [r7, #19]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	fb02 f303 	mul.w	r3, r2, r3
 800e24e:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	099b      	lsrs	r3, r3, #6
 800e254:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800e256:	68fb      	ldr	r3, [r7, #12]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3718      	adds	r7, #24
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800e260:	b480      	push	{r7}
 800e262:	b089      	sub	sp, #36	; 0x24
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	4608      	mov	r0, r1
 800e26a:	4611      	mov	r1, r2
 800e26c:	461a      	mov	r2, r3
 800e26e:	4603      	mov	r3, r0
 800e270:	817b      	strh	r3, [r7, #10]
 800e272:	460b      	mov	r3, r1
 800e274:	813b      	strh	r3, [r7, #8]
 800e276:	4613      	mov	r3, r2
 800e278:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800e282:	2300      	movs	r3, #0
 800e284:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800e286:	2300      	movs	r3, #0
 800e288:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800e28a:	2300      	movs	r3, #0
 800e28c:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	011b      	lsls	r3, r3, #4
 800e292:	4a23      	ldr	r2, [pc, #140]	; (800e320 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800e294:	fb82 1203 	smull	r1, r2, r2, r3
 800e298:	1192      	asrs	r2, r2, #6
 800e29a:	17db      	asrs	r3, r3, #31
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800e2a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	da03      	bge.n	800e2b0 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800e2a8:	897b      	ldrh	r3, [r7, #10]
 800e2aa:	425b      	negs	r3, r3
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800e2b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	da03      	bge.n	800e2c0 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800e2b8:	893b      	ldrh	r3, [r7, #8]
 800e2ba:	425b      	negs	r3, r3
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800e2c0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e2c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	015b      	lsls	r3, r3, #5
 800e2cc:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	4a13      	ldr	r2, [pc, #76]	; (800e320 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800e2d2:	fb82 1203 	smull	r1, r2, r2, r3
 800e2d6:	1192      	asrs	r2, r2, #6
 800e2d8:	17db      	asrs	r3, r3, #31
 800e2da:	1ad3      	subs	r3, r2, r3
 800e2dc:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800e2e6:	79fa      	ldrb	r2, [r7, #7]
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	fb02 f303 	mul.w	r3, r2, r3
 800e2ee:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	3310      	adds	r3, #16
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	da00      	bge.n	800e2fa <VL53L1_calc_range_ignore_threshold+0x9a>
 800e2f8:	331f      	adds	r3, #31
 800e2fa:	115b      	asrs	r3, r3, #5
 800e2fc:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e304:	db03      	blt.n	800e30e <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800e306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e30a:	83fb      	strh	r3, [r7, #30]
 800e30c:	e001      	b.n	800e312 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800e312:	8bfb      	ldrh	r3, [r7, #30]
}
 800e314:	4618      	mov	r0, r3
 800e316:	3724      	adds	r7, #36	; 0x24
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr
 800e320:	10624dd3 	.word	0x10624dd3

0800e324 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e324:	b480      	push	{r7}
 800e326:	b085      	sub	sp, #20
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e32e:	2300      	movs	r3, #0
 800e330:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	031a      	lsls	r2, r3, #12
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	085b      	lsrs	r3, r3, #1
 800e33a:	441a      	add	r2, r3
	timeout_mclks   =
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e342:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800e344:	68fb      	ldr	r3, [r7, #12]
}
 800e346:	4618      	mov	r0, r3
 800e348:	3714      	adds	r7, #20
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr

0800e352 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e352:	b580      	push	{r7, lr}
 800e354:	b084      	sub	sp, #16
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
 800e35a:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e35c:	2300      	movs	r3, #0
 800e35e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800e360:	2300      	movs	r3, #0
 800e362:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800e364:	6839      	ldr	r1, [r7, #0]
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f7ff ffdc 	bl	800e324 <VL53L1_calc_timeout_mclks>
 800e36c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	f000 f85e 	bl	800e430 <VL53L1_encode_timeout>
 800e374:	4603      	mov	r3, r0
 800e376:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800e378:	897b      	ldrh	r3, [r7, #10]
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800e382:	b4f0      	push	{r4, r5, r6, r7}
 800e384:	b086      	sub	sp, #24
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
 800e38a:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800e38c:	2300      	movs	r3, #0
 800e38e:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 800e390:	f04f 0200 	mov.w	r2, #0
 800e394:	f04f 0300 	mov.w	r3, #0
 800e398:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f04f 0100 	mov.w	r1, #0
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	f04f 0300 	mov.w	r3, #0
 800e3ac:	fb02 fc01 	mul.w	ip, r2, r1
 800e3b0:	fb00 f603 	mul.w	r6, r0, r3
 800e3b4:	4466      	add	r6, ip
 800e3b6:	fba0 2302 	umull	r2, r3, r0, r2
 800e3ba:	18f1      	adds	r1, r6, r3
 800e3bc:	460b      	mov	r3, r1
 800e3be:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800e3c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800e3c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e3ca:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800e3ce:	f143 0500 	adc.w	r5, r3, #0
 800e3d2:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800e3d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e3da:	f04f 0200 	mov.w	r2, #0
 800e3de:	f04f 0300 	mov.w	r3, #0
 800e3e2:	0b02      	lsrs	r2, r0, #12
 800e3e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e3e8:	0b0b      	lsrs	r3, r1, #12
 800e3ea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e3f2:	697b      	ldr	r3, [r7, #20]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3718      	adds	r7, #24
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bcf0      	pop	{r4, r5, r6, r7}
 800e3fc:	4770      	bx	lr

0800e3fe <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b084      	sub	sp, #16
 800e402:	af00      	add	r7, sp, #0
 800e404:	4603      	mov	r3, r0
 800e406:	6039      	str	r1, [r7, #0]
 800e408:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800e40a:	2300      	movs	r3, #0
 800e40c:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800e40e:	2300      	movs	r3, #0
 800e410:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800e412:	88fb      	ldrh	r3, [r7, #6]
 800e414:	4618      	mov	r0, r3
 800e416:	f000 f837 	bl	800e488 <VL53L1_decode_timeout>
 800e41a:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f7ff ffaf 	bl	800e382 <VL53L1_calc_timeout_us>
 800e424:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e426:	68bb      	ldr	r3, [r7, #8]
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3710      	adds	r7, #16
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800e430:	b480      	push	{r7}
 800e432:	b087      	sub	sp, #28
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e438:	2300      	movs	r3, #0
 800e43a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e43c:	2300      	movs	r3, #0
 800e43e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e440:	2300      	movs	r3, #0
 800e442:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d017      	beq.n	800e47a <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	3b01      	subs	r3, #1
 800e44e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e450:	e005      	b.n	800e45e <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	085b      	lsrs	r3, r3, #1
 800e456:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e458:	89fb      	ldrh	r3, [r7, #14]
 800e45a:	3301      	adds	r3, #1
 800e45c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1f4      	bne.n	800e452 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e468:	89fb      	ldrh	r3, [r7, #14]
 800e46a:	021b      	lsls	r3, r3, #8
 800e46c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	b29b      	uxth	r3, r3
 800e472:	b2db      	uxtb	r3, r3
 800e474:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e476:	4413      	add	r3, r2
 800e478:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e47a:	8afb      	ldrh	r3, [r7, #22]
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	371c      	adds	r7, #28
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	4603      	mov	r3, r0
 800e490:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e496:	88fb      	ldrh	r3, [r7, #6]
 800e498:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e49a:	88fa      	ldrh	r2, [r7, #6]
 800e49c:	0a12      	lsrs	r2, r2, #8
 800e49e:	b292      	uxth	r2, r2
 800e4a0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3714      	adds	r7, #20
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr

0800e4b4 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b088      	sub	sp, #32
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
 800e4c0:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800e4d2:	887b      	ldrh	r3, [r7, #2]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d102      	bne.n	800e4de <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800e4d8:	23f1      	movs	r3, #241	; 0xf1
 800e4da:	77fb      	strb	r3, [r7, #31]
 800e4dc:	e05d      	b.n	800e59a <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e0:	799a      	ldrb	r2, [r3, #6]
 800e4e2:	887b      	ldrh	r3, [r7, #2]
 800e4e4:	4611      	mov	r1, r2
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7ff fe8b 	bl	800e202 <VL53L1_calc_macro_period_us>
 800e4ec:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800e4ee:	6979      	ldr	r1, [r7, #20]
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f7ff ff17 	bl	800e324 <VL53L1_calc_timeout_mclks>
 800e4f6:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	2bff      	cmp	r3, #255	; 0xff
 800e4fc:	d901      	bls.n	800e502 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800e4fe:	23ff      	movs	r3, #255	; 0xff
 800e500:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e502:	69bb      	ldr	r3, [r7, #24]
 800e504:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800e506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e508:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e50a:	6979      	ldr	r1, [r7, #20]
 800e50c:	68b8      	ldr	r0, [r7, #8]
 800e50e:	f7ff ff20 	bl	800e352 <VL53L1_calc_encoded_timeout>
 800e512:	4603      	mov	r3, r0
 800e514:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e516:	8a7b      	ldrh	r3, [r7, #18]
 800e518:	0a1b      	lsrs	r3, r3, #8
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800e51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e520:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e522:	8a7b      	ldrh	r3, [r7, #18]
 800e524:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800e526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e528:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e52a:	6979      	ldr	r1, [r7, #20]
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7ff ff10 	bl	800e352 <VL53L1_calc_encoded_timeout>
 800e532:	4603      	mov	r3, r0
 800e534:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e536:	8a7b      	ldrh	r3, [r7, #18]
 800e538:	0a1b      	lsrs	r3, r3, #8
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800e53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e540:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e542:	8a7b      	ldrh	r3, [r7, #18]
 800e544:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800e546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e548:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54c:	7a5a      	ldrb	r2, [r3, #9]
 800e54e:	887b      	ldrh	r3, [r7, #2]
 800e550:	4611      	mov	r1, r2
 800e552:	4618      	mov	r0, r3
 800e554:	f7ff fe55 	bl	800e202 <VL53L1_calc_macro_period_us>
 800e558:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800e55a:	6979      	ldr	r1, [r7, #20]
 800e55c:	68b8      	ldr	r0, [r7, #8]
 800e55e:	f7ff fef8 	bl	800e352 <VL53L1_calc_encoded_timeout>
 800e562:	4603      	mov	r3, r0
 800e564:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e566:	8a7b      	ldrh	r3, [r7, #18]
 800e568:	0a1b      	lsrs	r3, r3, #8
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800e56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e570:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e572:	8a7b      	ldrh	r3, [r7, #18]
 800e574:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800e576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e578:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800e57a:	6979      	ldr	r1, [r7, #20]
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f7ff fee8 	bl	800e352 <VL53L1_calc_encoded_timeout>
 800e582:	4603      	mov	r3, r0
 800e584:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e586:	8a7b      	ldrh	r3, [r7, #18]
 800e588:	0a1b      	lsrs	r3, r3, #8
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800e58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e590:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e592:	8a7b      	ldrh	r3, [r7, #18]
 800e594:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800e596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e598:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800e59a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3720      	adds	r7, #32
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}

0800e5a6 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800e5a6:	b480      	push	{r7}
 800e5a8:	b083      	sub	sp, #12
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	603a      	str	r2, [r7, #0]
 800e5b0:	71fb      	strb	r3, [r7, #7]
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800e5b6:	79fb      	ldrb	r3, [r7, #7]
 800e5b8:	2b07      	cmp	r3, #7
 800e5ba:	d90a      	bls.n	800e5d2 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800e5bc:	79bb      	ldrb	r3, [r7, #6]
 800e5be:	00db      	lsls	r3, r3, #3
 800e5c0:	b2da      	uxtb	r2, r3
 800e5c2:	79fb      	ldrb	r3, [r7, #7]
 800e5c4:	1ad3      	subs	r3, r2, r3
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	3b71      	subs	r3, #113	; 0x71
 800e5ca:	b2da      	uxtb	r2, r3
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800e5d0:	e00a      	b.n	800e5e8 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800e5d2:	79bb      	ldrb	r3, [r7, #6]
 800e5d4:	f1c3 030f 	rsb	r3, r3, #15
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	00db      	lsls	r3, r3, #3
 800e5dc:	b2da      	uxtb	r2, r3
 800e5de:	79fb      	ldrb	r3, [r7, #7]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	b2da      	uxtb	r2, r3
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	701a      	strb	r2, [r3, #0]
}
 800e5e8:	bf00      	nop
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
 800e600:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800e602:	7bfb      	ldrb	r3, [r7, #15]
 800e604:	091b      	lsrs	r3, r3, #4
 800e606:	b2da      	uxtb	r2, r3
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800e60c:	7bfb      	ldrb	r3, [r7, #15]
 800e60e:	f003 030f 	and.w	r3, r3, #15
 800e612:	b2da      	uxtb	r2, r3
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	701a      	strb	r2, [r3, #0]

}
 800e618:	bf00      	nop
 800e61a:	3714      	adds	r7, #20
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
 800e62a:	4603      	mov	r3, r0
 800e62c:	603a      	str	r2, [r7, #0]
 800e62e:	71fb      	strb	r3, [r7, #7]
 800e630:	460b      	mov	r3, r1
 800e632:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800e634:	79bb      	ldrb	r3, [r7, #6]
 800e636:	011b      	lsls	r3, r3, #4
 800e638:	b2da      	uxtb	r2, r3
 800e63a:	79fb      	ldrb	r3, [r7, #7]
 800e63c:	4413      	add	r3, r2
 800e63e:	b2da      	uxtb	r2, r3
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	701a      	strb	r2, [r3, #0]

}
 800e644:	bf00      	nop
 800e646:	370c      	adds	r7, #12
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e658:	2300      	movs	r3, #0
 800e65a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	2203      	movs	r2, #3
 800e664:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	2200      	movs	r2, #0
 800e66c:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	2200      	movs	r2, #0
 800e674:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	2200      	movs	r2, #0
 800e67c:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	2200      	movs	r2, #0
 800e684:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	2200      	movs	r2, #0
 800e68c:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	2200      	movs	r2, #0
 800e694:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800e6a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3714      	adds	r7, #20
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b087      	sub	sp, #28
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	229b      	movs	r2, #155	; 0x9b
 800e6d8:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e6da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	371c      	adds	r7, #28
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr

0800e6ea <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e6ea:	b480      	push	{r7}
 800e6ec:	b085      	sub	sp, #20
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800e718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e71c:	b2da      	uxtb	r2, r3
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e72a:	f003 0303 	and.w	r3, r3, #3
 800e72e:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e73a:	4413      	add	r3, r2
 800e73c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2201      	movs	r2, #1
 800e748:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800e764:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3714      	adds	r7, #20
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e774:	b480      	push	{r7}
 800e776:	b085      	sub	sp, #20
 800e778:	af00      	add	r7, sp, #0
 800e77a:	4603      	mov	r3, r0
 800e77c:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800e77e:	2300      	movs	r3, #0
 800e780:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e782:	88fb      	ldrh	r3, [r7, #6]
 800e784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e788:	fb92 f3f3 	sdiv	r3, r2, r3
 800e78c:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e78e:	68fb      	ldr	r3, [r7, #12]
}
 800e790:	4618      	mov	r0, r3
 800e792:	3714      	adds	r7, #20
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr

0800e79c <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b085      	sub	sp, #20
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800e7aa:	79fb      	ldrb	r3, [r7, #7]
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	005b      	lsls	r3, r3, #1
 800e7b2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800e7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3714      	adds	r7, #20
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr

0800e7c2 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800e7c2:	b480      	push	{r7}
 800e7c4:	b085      	sub	sp, #20
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	60b9      	str	r1, [r7, #8]
 800e7cc:	607a      	str	r2, [r7, #4]
 800e7ce:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800e7d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	da10      	bge.n	800e7fa <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800e7d8:	7bfb      	ldrb	r3, [r7, #15]
 800e7da:	43db      	mvns	r3, r3
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	f003 0307 	and.w	r3, r3, #7
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	3308      	adds	r3, #8
 800e7e6:	b2da      	uxtb	r2, r3
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800e7ec:	7bfb      	ldrb	r3, [r7, #15]
 800e7ee:	3b80      	subs	r3, #128	; 0x80
 800e7f0:	10db      	asrs	r3, r3, #3
 800e7f2:	b2da      	uxtb	r2, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800e7f8:	e00c      	b.n	800e814 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800e7fa:	7bfb      	ldrb	r3, [r7, #15]
 800e7fc:	f003 0307 	and.w	r3, r3, #7
 800e800:	b2da      	uxtb	r2, r3
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800e806:	7bfb      	ldrb	r3, [r7, #15]
 800e808:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800e80c:	10db      	asrs	r3, r3, #3
 800e80e:	b2da      	uxtb	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	701a      	strb	r2, [r3, #0]
}
 800e814:	bf00      	nop
 800e816:	3714      	adds	r7, #20
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	460b      	mov	r3, r1
 800e82a:	607a      	str	r2, [r7, #4]
 800e82c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e82e:	2300      	movs	r3, #0
 800e830:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e832:	897b      	ldrh	r3, [r7, #10]
 800e834:	2b0a      	cmp	r3, #10
 800e836:	d802      	bhi.n	800e83e <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e838:	f06f 0309 	mvn.w	r3, #9
 800e83c:	e047      	b.n	800e8ce <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e846:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e854:	f002 020f 	and.w	r2, r2, #15
 800e858:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800e85a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e864:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e868:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e86a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e874:	f002 0203 	and.w	r2, r2, #3
 800e878:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e87a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e884:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e888:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e88a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	88d8      	ldrh	r0, [r3, #6]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	3305      	adds	r3, #5
 800e894:	461a      	mov	r2, r3
 800e896:	2102      	movs	r1, #2
 800e898:	f7ff fb77 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e8a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e8ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800e8b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e8bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e8be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800e8c4:	68fa      	ldr	r2, [r7, #12]
 800e8c6:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800e8c8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e8ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3718      	adds	r7, #24
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b086      	sub	sp, #24
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	4603      	mov	r3, r0
 800e8de:	60b9      	str	r1, [r7, #8]
 800e8e0:	607a      	str	r2, [r7, #4]
 800e8e2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e8e8:	89fb      	ldrh	r3, [r7, #14]
 800e8ea:	2b0a      	cmp	r3, #10
 800e8ec:	d802      	bhi.n	800e8f4 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e8ee:	f06f 0309 	mvn.w	r3, #9
 800e8f2:	e046      	b.n	800e982 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8fc:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	3301      	adds	r3, #1
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	f003 030f 	and.w	r3, r3, #15
 800e90c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	3302      	adds	r3, #2
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e91c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	3303      	adds	r3, #3
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	f003 0303 	and.w	r3, r3, #3
 800e92c:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	3304      	adds	r3, #4
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e93c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	3305      	adds	r3, #5
 800e946:	4619      	mov	r1, r3
 800e948:	2002      	movs	r0, #2
 800e94a:	f7ff fb49 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800e94e:	4603      	mov	r3, r0
 800e950:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	79da      	ldrb	r2, [r3, #7]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	7a1a      	ldrb	r2, [r3, #8]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	3309      	adds	r3, #9
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e970:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	7a9a      	ldrb	r2, [r3, #10]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800e97e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e982:	4618      	mov	r0, r3
 800e984:	3718      	adds	r7, #24
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b086      	sub	sp, #24
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e994:	2300      	movs	r3, #0
 800e996:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e998:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d108      	bne.n	800e9b2 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e9a0:	f107 020c 	add.w	r2, r7, #12
 800e9a4:	230b      	movs	r3, #11
 800e9a6:	2101      	movs	r1, #1
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f001 f8e7 	bl	800fb7c <VL53L1_ReadMulti>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e9b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d108      	bne.n	800e9cc <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800e9ba:	f107 030c 	add.w	r3, r7, #12
 800e9be:	683a      	ldr	r2, [r7, #0]
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	200b      	movs	r0, #11
 800e9c4:	f7ff ff87 	bl	800e8d6 <VL53L1_i2c_decode_static_nvm_managed>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e9cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3718      	adds	r7, #24
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b086      	sub	sp, #24
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	607a      	str	r2, [r7, #4]
 800e9e4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e9ea:	897b      	ldrh	r3, [r7, #10]
 800e9ec:	2b16      	cmp	r3, #22
 800e9ee:	d802      	bhi.n	800e9f6 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e9f0:	f06f 0309 	mvn.w	r3, #9
 800e9f4:	e076      	b.n	800eae4 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ea06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800ea10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ea1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800ea20:	68fa      	ldr	r2, [r7, #12]
 800ea22:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800ea24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800ea2e:	f002 020f 	and.w	r2, r2, #15
 800ea32:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ea34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800ea3a:	68fa      	ldr	r2, [r7, #12]
 800ea3c:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800ea3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ea48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ea4c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ea4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800ea58:	f002 0203 	and.w	r2, r2, #3
 800ea5c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ea5e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	8958      	ldrh	r0, [r3, #10]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	3309      	adds	r3, #9
 800ea68:	461a      	mov	r2, r3
 800ea6a:	2102      	movs	r1, #2
 800ea6c:	f7ff fa8d 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	330b      	adds	r3, #11
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	2102      	movs	r1, #2
 800ea7e:	f7ff facf 	bl	800e020 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	330d      	adds	r3, #13
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	2102      	movs	r1, #2
 800ea90:	f7ff fac6 	bl	800e020 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	8a18      	ldrh	r0, [r3, #16]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	330f      	adds	r3, #15
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	2102      	movs	r1, #2
 800eaa0:	f7ff fa73 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800eaaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eaae:	b218      	sxth	r0, r3
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	3311      	adds	r3, #17
 800eab4:	461a      	mov	r2, r3
 800eab6:	2102      	movs	r1, #2
 800eab8:	f7ff fab2 	bl	800e020 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	3313      	adds	r3, #19
 800eac6:	461a      	mov	r2, r3
 800eac8:	2102      	movs	r1, #2
 800eaca:	f7ff faa9 	bl	800e020 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	3315      	adds	r3, #21
 800ead8:	461a      	mov	r2, r3
 800eada:	2102      	movs	r1, #2
 800eadc:	f7ff faa0 	bl	800e020 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800eae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3718      	adds	r7, #24
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	60b9      	str	r1, [r7, #8]
 800eaf6:	607a      	str	r2, [r7, #4]
 800eaf8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800eafa:	2300      	movs	r3, #0
 800eafc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800eafe:	89fb      	ldrh	r3, [r7, #14]
 800eb00:	2b16      	cmp	r3, #22
 800eb02:	d802      	bhi.n	800eb0a <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800eb04:	f06f 0309 	mvn.w	r3, #9
 800eb08:	e079      	b.n	800ebfe <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	785a      	ldrb	r2, [r3, #1]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	789a      	ldrb	r2, [r3, #2]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	78da      	ldrb	r2, [r3, #3]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	791a      	ldrb	r2, [r3, #4]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	3305      	adds	r3, #5
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	f003 030f 	and.w	r3, r3, #15
 800eb3c:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	799a      	ldrb	r2, [r3, #6]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	3307      	adds	r3, #7
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb54:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	3308      	adds	r3, #8
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	f003 0303 	and.w	r3, r3, #3
 800eb64:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	3309      	adds	r3, #9
 800eb6e:	4619      	mov	r1, r3
 800eb70:	2002      	movs	r0, #2
 800eb72:	f7ff fa35 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800eb76:	4603      	mov	r3, r0
 800eb78:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	330b      	adds	r3, #11
 800eb82:	4619      	mov	r1, r3
 800eb84:	2002      	movs	r0, #2
 800eb86:	f7ff fa77 	bl	800e078 <VL53L1_i2c_decode_int16_t>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	330d      	adds	r3, #13
 800eb96:	4619      	mov	r1, r3
 800eb98:	2002      	movs	r0, #2
 800eb9a:	f7ff fa6d 	bl	800e078 <VL53L1_i2c_decode_int16_t>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	330f      	adds	r3, #15
 800ebaa:	4619      	mov	r1, r3
 800ebac:	2002      	movs	r0, #2
 800ebae:	f7ff fa17 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	3311      	adds	r3, #17
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	2002      	movs	r0, #2
 800ebc2:	f7ff fa59 	bl	800e078 <VL53L1_i2c_decode_int16_t>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebcc:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	3313      	adds	r3, #19
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	2002      	movs	r0, #2
 800ebda:	f7ff fa4d 	bl	800e078 <VL53L1_i2c_decode_int16_t>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	3315      	adds	r3, #21
 800ebea:	4619      	mov	r1, r3
 800ebec:	2002      	movs	r0, #2
 800ebee:	f7ff fa43 	bl	800e078 <VL53L1_i2c_decode_int16_t>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800ebfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3718      	adds	r7, #24
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b088      	sub	sp, #32
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
 800ec0e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ec10:	2300      	movs	r3, #0
 800ec12:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ec14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d108      	bne.n	800ec2e <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800ec1c:	f107 0208 	add.w	r2, r7, #8
 800ec20:	2317      	movs	r3, #23
 800ec22:	210d      	movs	r1, #13
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 ffa9 	bl	800fb7c <VL53L1_ReadMulti>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800ec2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d108      	bne.n	800ec48 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800ec36:	f107 0308 	add.w	r3, r7, #8
 800ec3a:	683a      	ldr	r2, [r7, #0]
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	2017      	movs	r0, #23
 800ec40:	f7ff ff54 	bl	800eaec <VL53L1_i2c_decode_customer_nvm_managed>
 800ec44:	4603      	mov	r3, r0
 800ec46:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ec48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3720      	adds	r7, #32
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b086      	sub	sp, #24
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	607a      	str	r2, [r7, #4]
 800ec60:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ec62:	2300      	movs	r3, #0
 800ec64:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ec66:	897b      	ldrh	r3, [r7, #10]
 800ec68:	2b1f      	cmp	r3, #31
 800ec6a:	d802      	bhi.n	800ec72 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ec6c:	f06f 0309 	mvn.w	r3, #9
 800ec70:	e0cf      	b.n	800ee12 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	881b      	ldrh	r3, [r3, #0]
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	2102      	movs	r1, #2
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7ff f985 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800ec88:	f002 0201 	and.w	r2, r2, #1
 800ec8c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ec8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800ec98:	f002 020f 	and.w	r2, r2, #15
 800ec9c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ec9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800eca8:	f002 020f 	and.w	r2, r2, #15
 800ecac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ecae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800ecb8:	f002 021f 	and.w	r2, r2, #31
 800ecbc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ecbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ecc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eccc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ecce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800ecd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ecdc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ecde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800ece8:	f002 0201 	and.w	r2, r2, #1
 800ecec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ecee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800ecf4:	68fa      	ldr	r2, [r7, #12]
 800ecf6:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800ecf8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ed02:	f002 0201 	and.w	r2, r2, #1
 800ed06:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ed08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ed12:	f002 0203 	and.w	r2, r2, #3
 800ed16:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ed18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800ed22:	f002 021f 	and.w	r2, r2, #31
 800ed26:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800ed28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800ed32:	f002 0203 	and.w	r2, r2, #3
 800ed36:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800ed38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800ed42:	f002 0203 	and.w	r2, r2, #3
 800ed46:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800ed48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800ed52:	f002 0207 	and.w	r2, r2, #7
 800ed56:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800ed58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800ed62:	f002 021f 	and.w	r2, r2, #31
 800ed66:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800ed68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800ed72:	f002 0201 	and.w	r2, r2, #1
 800ed76:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800ed78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800ed82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800ed8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800ed92:	68fa      	ldr	r2, [r7, #12]
 800ed94:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800ed96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800ed9c:	68fa      	ldr	r2, [r7, #12]
 800ed9e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800eda0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800eda6:	68fa      	ldr	r2, [r7, #12]
 800eda8:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800edaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800edb0:	68fa      	ldr	r2, [r7, #12]
 800edb2:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800edb4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	8b18      	ldrh	r0, [r3, #24]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	3318      	adds	r3, #24
 800edbe:	461a      	mov	r2, r3
 800edc0:	2102      	movs	r1, #2
 800edc2:	f7ff f8e2 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800edca:	68fa      	ldr	r2, [r7, #12]
 800edcc:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800edce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800edd4:	68fa      	ldr	r2, [r7, #12]
 800edd6:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800edd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800ede2:	f002 020f 	and.w	r2, r2, #15
 800ede6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800ede8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800edf2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800edfc:	f002 020f 	and.w	r2, r2, #15
 800ee00:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800ee02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800ee0c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ee0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3718      	adds	r7, #24
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}

0800ee1a <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ee1a:	b580      	push	{r7, lr}
 800ee1c:	b086      	sub	sp, #24
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	60f8      	str	r0, [r7, #12]
 800ee22:	460b      	mov	r3, r1
 800ee24:	607a      	str	r2, [r7, #4]
 800ee26:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ee2c:	897b      	ldrh	r3, [r7, #10]
 800ee2e:	2b15      	cmp	r3, #21
 800ee30:	d802      	bhi.n	800ee38 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ee32:	f06f 0309 	mvn.w	r3, #9
 800ee36:	e070      	b.n	800ef1a <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ee48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800ee4e:	68fa      	ldr	r2, [r7, #12]
 800ee50:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800ee52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800ee5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ee60:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ee62:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800ee68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee6c:	b298      	uxth	r0, r3
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	3304      	adds	r3, #4
 800ee72:	461a      	mov	r2, r3
 800ee74:	2102      	movs	r1, #2
 800ee76:	f7ff f888 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800ee82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ee86:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ee88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800ee8e:	68fa      	ldr	r2, [r7, #12]
 800ee90:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800ee92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800ee9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800eea6:	f002 0201 	and.w	r2, r2, #1
 800eeaa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800eeac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800eeb6:	f002 0207 	and.w	r2, r2, #7
 800eeba:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800eebc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	8998      	ldrh	r0, [r3, #12]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	330c      	adds	r3, #12
 800eec6:	461a      	mov	r2, r3
 800eec8:	2102      	movs	r1, #2
 800eeca:	f7ff f85e 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	89d8      	ldrh	r0, [r3, #14]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	330e      	adds	r3, #14
 800eed6:	461a      	mov	r2, r3
 800eed8:	2102      	movs	r1, #2
 800eeda:	f7ff f856 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	8a18      	ldrh	r0, [r3, #16]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	3310      	adds	r3, #16
 800eee6:	461a      	mov	r2, r3
 800eee8:	2102      	movs	r1, #2
 800eeea:	f7ff f84e 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800eef2:	68fa      	ldr	r2, [r7, #12]
 800eef4:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800eef6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800ef00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800ef0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800ef10:	68fa      	ldr	r2, [r7, #12]
 800ef12:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800ef14:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ef16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3718      	adds	r7, #24
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ef22:	b580      	push	{r7, lr}
 800ef24:	b086      	sub	sp, #24
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	60f8      	str	r0, [r7, #12]
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	607a      	str	r2, [r7, #4]
 800ef2e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ef30:	2300      	movs	r3, #0
 800ef32:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ef34:	897b      	ldrh	r3, [r7, #10]
 800ef36:	2b16      	cmp	r3, #22
 800ef38:	d802      	bhi.n	800ef40 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ef3a:	f06f 0309 	mvn.w	r3, #9
 800ef3e:	e06e      	b.n	800f01e <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	f003 030f 	and.w	r3, r3, #15
 800ef48:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ef56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ef60:	f002 020f 	and.w	r2, r2, #15
 800ef64:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ef66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ef70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ef7a:	f002 020f 	and.w	r2, r2, #15
 800ef7e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ef80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800ef8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800ef94:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ef98:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ef9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800efa4:	f002 020f 	and.w	r2, r2, #15
 800efa8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800efaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800efb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800efbe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800efc2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800efc4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	8958      	ldrh	r0, [r3, #10]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	330a      	adds	r3, #10
 800efce:	461a      	mov	r2, r3
 800efd0:	2102      	movs	r1, #2
 800efd2:	f7fe ffda 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	8998      	ldrh	r0, [r3, #12]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	330c      	adds	r3, #12
 800efde:	461a      	mov	r2, r3
 800efe0:	2102      	movs	r1, #2
 800efe2:	f7fe ffd2 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800efea:	68fa      	ldr	r2, [r7, #12]
 800efec:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800efee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800eff8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	6918      	ldr	r0, [r3, #16]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	3312      	adds	r3, #18
 800f002:	461a      	mov	r2, r3
 800f004:	2104      	movs	r1, #4
 800f006:	f7ff f860 	bl	800e0ca <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800f012:	f002 0201 	and.w	r2, r2, #1
 800f016:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800f018:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f01a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3718      	adds	r7, #24
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}

0800f026 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f026:	b580      	push	{r7, lr}
 800f028:	b086      	sub	sp, #24
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	60f8      	str	r0, [r7, #12]
 800f02e:	460b      	mov	r3, r1
 800f030:	607a      	str	r2, [r7, #4]
 800f032:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f034:	2300      	movs	r3, #0
 800f036:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800f038:	897b      	ldrh	r3, [r7, #10]
 800f03a:	2b11      	cmp	r3, #17
 800f03c:	d802      	bhi.n	800f044 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f03e:	f06f 0309 	mvn.w	r3, #9
 800f042:	e071      	b.n	800f128 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	f003 0303 	and.w	r3, r3, #3
 800f04c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	8858      	ldrh	r0, [r3, #2]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	3301      	adds	r3, #1
 800f05a:	461a      	mov	r2, r3
 800f05c:	2102      	movs	r1, #2
 800f05e:	f7fe ff94 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	8898      	ldrh	r0, [r3, #4]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	3303      	adds	r3, #3
 800f06a:	461a      	mov	r2, r3
 800f06c:	2102      	movs	r1, #2
 800f06e:	f7fe ff8c 	bl	800df8a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f07a:	f002 0201 	and.w	r2, r2, #1
 800f07e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f080:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800f08a:	f002 0207 	and.w	r2, r2, #7
 800f08e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f090:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800f096:	68fa      	ldr	r2, [r7, #12]
 800f098:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f09a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800f0a0:	68fa      	ldr	r2, [r7, #12]
 800f0a2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f0a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f0ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f0b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f0b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f0be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f0c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f0c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f0ce:	f002 0203 	and.w	r2, r2, #3
 800f0d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f0d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800f0de:	f002 0203 	and.w	r2, r2, #3
 800f0e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f0e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800f0ee:	f002 020f 	and.w	r2, r2, #15
 800f0f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f0f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800f0fa:	68fa      	ldr	r2, [r7, #12]
 800f0fc:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800f0fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800f104:	68fa      	ldr	r2, [r7, #12]
 800f106:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800f108:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800f112:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800f11c:	f002 0203 	and.w	r2, r2, #3
 800f120:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f122:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f124:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3718      	adds	r7, #24
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f130:	b480      	push	{r7}
 800f132:	b087      	sub	sp, #28
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	460b      	mov	r3, r1
 800f13a:	607a      	str	r2, [r7, #4]
 800f13c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f13e:	2300      	movs	r3, #0
 800f140:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800f142:	897b      	ldrh	r3, [r7, #10]
 800f144:	2b04      	cmp	r3, #4
 800f146:	d802      	bhi.n	800f14e <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f148:	f06f 0309 	mvn.w	r3, #9
 800f14c:	e025      	b.n	800f19a <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	f003 0301 	and.w	r3, r3, #1
 800f156:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800f164:	f002 0201 	and.w	r2, r2, #1
 800f168:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f16a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800f174:	f002 0201 	and.w	r2, r2, #1
 800f178:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f17a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800f184:	f002 0203 	and.w	r2, r2, #3
 800f188:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f18a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f194:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	371c      	adds	r7, #28
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr

0800f1a6 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b086      	sub	sp, #24
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	60b9      	str	r1, [r7, #8]
 800f1b0:	607a      	str	r2, [r7, #4]
 800f1b2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f1b8:	89fb      	ldrh	r3, [r7, #14]
 800f1ba:	2b2b      	cmp	r3, #43	; 0x2b
 800f1bc:	d802      	bhi.n	800f1c4 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f1be:	f06f 0309 	mvn.w	r3, #9
 800f1c2:	e0e2      	b.n	800f38a <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1cc:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	785a      	ldrb	r2, [r3, #1]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	3302      	adds	r3, #2
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	f003 030f 	and.w	r3, r3, #15
 800f1e4:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	78da      	ldrb	r2, [r3, #3]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	3304      	adds	r3, #4
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	2002      	movs	r0, #2
 800f1fa:	f7fe fef1 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f1fe:	4603      	mov	r3, r0
 800f200:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	3306      	adds	r3, #6
 800f20a:	4619      	mov	r1, r3
 800f20c:	2002      	movs	r0, #2
 800f20e:	f7fe fee7 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f212:	4603      	mov	r3, r0
 800f214:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	3308      	adds	r3, #8
 800f21e:	4619      	mov	r1, r3
 800f220:	2002      	movs	r0, #2
 800f222:	f7fe fedd 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f226:	4603      	mov	r3, r0
 800f228:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	330a      	adds	r3, #10
 800f232:	4619      	mov	r1, r3
 800f234:	2002      	movs	r0, #2
 800f236:	f7fe fed3 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f23a:	4603      	mov	r3, r0
 800f23c:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	330c      	adds	r3, #12
 800f246:	4619      	mov	r1, r3
 800f248:	2002      	movs	r0, #2
 800f24a:	f7fe fec9 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f24e:	4603      	mov	r3, r0
 800f250:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	330e      	adds	r3, #14
 800f25a:	4619      	mov	r1, r3
 800f25c:	2002      	movs	r0, #2
 800f25e:	f7fe febf 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f262:	4603      	mov	r3, r0
 800f264:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	3310      	adds	r3, #16
 800f26e:	4619      	mov	r1, r3
 800f270:	2002      	movs	r0, #2
 800f272:	f7fe feb5 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f276:	4603      	mov	r3, r0
 800f278:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	3312      	adds	r3, #18
 800f282:	4619      	mov	r1, r3
 800f284:	2002      	movs	r0, #2
 800f286:	f7fe feab 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f28a:	4603      	mov	r3, r0
 800f28c:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	3314      	adds	r3, #20
 800f296:	4619      	mov	r1, r3
 800f298:	2002      	movs	r0, #2
 800f29a:	f7fe fea1 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	3316      	adds	r3, #22
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	2002      	movs	r0, #2
 800f2ae:	f7fe fe97 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	3318      	adds	r3, #24
 800f2be:	4619      	mov	r1, r3
 800f2c0:	2002      	movs	r0, #2
 800f2c2:	f7fe fe8d 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	331a      	adds	r3, #26
 800f2d2:	4619      	mov	r1, r3
 800f2d4:	2002      	movs	r0, #2
 800f2d6:	f7fe fe83 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	331c      	adds	r3, #28
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	2002      	movs	r0, #2
 800f2ea:	f7fe fe79 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	331e      	adds	r3, #30
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	2002      	movs	r0, #2
 800f2fe:	f7fe fe6f 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f302:	4603      	mov	r3, r0
 800f304:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	3320      	adds	r3, #32
 800f30e:	4619      	mov	r1, r3
 800f310:	2002      	movs	r0, #2
 800f312:	f7fe fe65 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f316:	4603      	mov	r3, r0
 800f318:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	3322      	adds	r3, #34	; 0x22
 800f322:	4619      	mov	r1, r3
 800f324:	2002      	movs	r0, #2
 800f326:	f7fe fe5b 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f32a:	4603      	mov	r3, r0
 800f32c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	3324      	adds	r3, #36	; 0x24
 800f336:	4619      	mov	r1, r3
 800f338:	2002      	movs	r0, #2
 800f33a:	f7fe fe51 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f33e:	4603      	mov	r3, r0
 800f340:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	3326      	adds	r3, #38	; 0x26
 800f34a:	4619      	mov	r1, r3
 800f34c:	2002      	movs	r0, #2
 800f34e:	f7fe fe47 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f352:	4603      	mov	r3, r0
 800f354:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	3328      	adds	r3, #40	; 0x28
 800f35e:	4619      	mov	r1, r3
 800f360:	2002      	movs	r0, #2
 800f362:	f7fe fe3d 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f366:	4603      	mov	r3, r0
 800f368:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800f386:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3718      	adds	r7, #24
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}

0800f392 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800f392:	b580      	push	{r7, lr}
 800f394:	b086      	sub	sp, #24
 800f396:	af00      	add	r7, sp, #0
 800f398:	4603      	mov	r3, r0
 800f39a:	60b9      	str	r1, [r7, #8]
 800f39c:	607a      	str	r2, [r7, #4]
 800f39e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f3a4:	89fb      	ldrh	r3, [r7, #14]
 800f3a6:	2b20      	cmp	r3, #32
 800f3a8:	d802      	bhi.n	800f3b0 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f3aa:	f06f 0309 	mvn.w	r3, #9
 800f3ae:	e04d      	b.n	800f44c <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800f3b0:	68b9      	ldr	r1, [r7, #8]
 800f3b2:	2004      	movs	r0, #4
 800f3b4:	f7fe feb3 	bl	800e11e <VL53L1_i2c_decode_uint32_t>
 800f3b8:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	3304      	adds	r3, #4
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	2004      	movs	r0, #4
 800f3c6:	f7fe feaa 	bl	800e11e <VL53L1_i2c_decode_uint32_t>
 800f3ca:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	3308      	adds	r3, #8
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	2004      	movs	r0, #4
 800f3d8:	f7fe febe 	bl	800e158 <VL53L1_i2c_decode_int32_t>
 800f3dc:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	330c      	adds	r3, #12
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	2004      	movs	r0, #4
 800f3ea:	f7fe fe98 	bl	800e11e <VL53L1_i2c_decode_uint32_t>
 800f3ee:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	3310      	adds	r3, #16
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	2004      	movs	r0, #4
 800f3fc:	f7fe fe8f 	bl	800e11e <VL53L1_i2c_decode_uint32_t>
 800f400:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	3314      	adds	r3, #20
 800f40a:	4619      	mov	r1, r3
 800f40c:	2004      	movs	r0, #4
 800f40e:	f7fe fe86 	bl	800e11e <VL53L1_i2c_decode_uint32_t>
 800f412:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	3318      	adds	r3, #24
 800f41c:	4619      	mov	r1, r3
 800f41e:	2004      	movs	r0, #4
 800f420:	f7fe fe9a 	bl	800e158 <VL53L1_i2c_decode_int32_t>
 800f424:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	331c      	adds	r3, #28
 800f42e:	4619      	mov	r1, r3
 800f430:	2004      	movs	r0, #4
 800f432:	f7fe fe74 	bl	800e11e <VL53L1_i2c_decode_uint32_t>
 800f436:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800f448:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3718      	adds	r7, #24
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b086      	sub	sp, #24
 800f458:	af00      	add	r7, sp, #0
 800f45a:	4603      	mov	r3, r0
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
 800f460:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f462:	2300      	movs	r3, #0
 800f464:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f466:	89fb      	ldrh	r3, [r7, #14]
 800f468:	2b37      	cmp	r3, #55	; 0x37
 800f46a:	d802      	bhi.n	800f472 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f46c:	f06f 0309 	mvn.w	r3, #9
 800f470:	e15e      	b.n	800f730 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800f472:	68b9      	ldr	r1, [r7, #8]
 800f474:	2002      	movs	r0, #2
 800f476:	f7fe fdb3 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f47a:	4603      	mov	r3, r0
 800f47c:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	3302      	adds	r3, #2
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f48c:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	3303      	adds	r3, #3
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f49c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	3304      	adds	r3, #4
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	f003 0303 	and.w	r3, r3, #3
 800f4ac:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	3305      	adds	r3, #5
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	f003 0301 	and.w	r3, r3, #1
 800f4bc:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	3306      	adds	r3, #6
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4cc:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	3307      	adds	r3, #7
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4dc:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	3308      	adds	r3, #8
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	2002      	movs	r0, #2
 800f4ea:	f7fe fd79 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f4f4:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	330a      	adds	r3, #10
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	f003 0303 	and.w	r3, r3, #3
 800f504:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	330b      	adds	r3, #11
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	f003 0303 	and.w	r3, r3, #3
 800f514:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	330c      	adds	r3, #12
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	f003 030f 	and.w	r3, r3, #15
 800f524:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	330d      	adds	r3, #13
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	f003 0307 	and.w	r3, r3, #7
 800f534:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	330e      	adds	r3, #14
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	f003 0301 	and.w	r3, r3, #1
 800f544:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	330f      	adds	r3, #15
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	f003 0303 	and.w	r3, r3, #3
 800f554:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	7c1a      	ldrb	r2, [r3, #16]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	7c5a      	ldrb	r2, [r3, #17]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	3312      	adds	r3, #18
 800f56e:	4619      	mov	r1, r3
 800f570:	2002      	movs	r0, #2
 800f572:	f7fe fd35 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f576:	4603      	mov	r3, r0
 800f578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f57c:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	3316      	adds	r3, #22
 800f586:	4619      	mov	r1, r3
 800f588:	2002      	movs	r0, #2
 800f58a:	f7fe fd29 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f58e:	4603      	mov	r3, r0
 800f590:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	3318      	adds	r3, #24
 800f59a:	4619      	mov	r1, r3
 800f59c:	2002      	movs	r0, #2
 800f59e:	f7fe fd1f 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	331a      	adds	r3, #26
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	f003 0301 	and.w	r3, r3, #1
 800f5b4:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	331b      	adds	r3, #27
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	f003 0307 	and.w	r3, r3, #7
 800f5c4:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	7f1a      	ldrb	r2, [r3, #28]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	7f5a      	ldrb	r2, [r3, #29]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	331e      	adds	r3, #30
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5e4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	331f      	adds	r3, #31
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5f4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	3320      	adds	r3, #32
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	f003 0303 	and.w	r3, r3, #3
 800f604:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	3321      	adds	r3, #33	; 0x21
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	f003 030f 	and.w	r3, r3, #15
 800f614:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	3325      	adds	r3, #37	; 0x25
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	f003 0301 	and.w	r3, r3, #1
 800f648:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	3326      	adds	r3, #38	; 0x26
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	f003 0303 	and.w	r3, r3, #3
 800f65a:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	3327      	adds	r3, #39	; 0x27
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	f003 031f 	and.w	r3, r3, #31
 800f66c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	3328      	adds	r3, #40	; 0x28
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	f003 031f 	and.w	r3, r3, #31
 800f67e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	3329      	adds	r3, #41	; 0x29
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	f003 031f 	and.w	r3, r3, #31
 800f690:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	332a      	adds	r3, #42	; 0x2a
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	f003 0301 	and.w	r3, r3, #1
 800f6a2:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	332b      	adds	r3, #43	; 0x2b
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	f003 0301 	and.w	r3, r3, #1
 800f6b4:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	332c      	adds	r3, #44	; 0x2c
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	f003 0303 	and.w	r3, r3, #3
 800f6c6:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	332d      	adds	r3, #45	; 0x2d
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6d8:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	332e      	adds	r3, #46	; 0x2e
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	2004      	movs	r0, #4
 800f6e8:	f7fe fd19 	bl	800e11e <VL53L1_i2c_decode_uint32_t>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	3332      	adds	r3, #50	; 0x32
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	2004      	movs	r0, #4
 800f6fe:	f7fe fd0e 	bl	800e11e <VL53L1_i2c_decode_uint32_t>
 800f702:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	3336      	adds	r3, #54	; 0x36
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	f003 0301 	and.w	r3, r3, #1
 800f712:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	3337      	adds	r3, #55	; 0x37
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	f003 0301 	and.w	r3, r3, #1
 800f724:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800f72c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f730:	4618      	mov	r0, r3
 800f732:	3718      	adds	r7, #24
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b086      	sub	sp, #24
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	4603      	mov	r3, r0
 800f740:	60b9      	str	r1, [r7, #8]
 800f742:	607a      	str	r2, [r7, #4]
 800f744:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f746:	2300      	movs	r3, #0
 800f748:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800f74a:	89fb      	ldrh	r3, [r7, #14]
 800f74c:	2b30      	cmp	r3, #48	; 0x30
 800f74e:	d802      	bhi.n	800f756 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f750:	f06f 0309 	mvn.w	r3, #9
 800f754:	e112      	b.n	800f97c <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	785a      	ldrb	r2, [r3, #1]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	789a      	ldrb	r2, [r3, #2]
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	3303      	adds	r3, #3
 800f772:	4619      	mov	r1, r3
 800f774:	2002      	movs	r0, #2
 800f776:	f7fe fc33 	bl	800dfe0 <VL53L1_i2c_decode_uint16_t>
 800f77a:	4603      	mov	r3, r0
 800f77c:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	3305      	adds	r3, #5
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f78c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	3306      	adds	r3, #6
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	f003 0307 	and.w	r3, r3, #7
 800f79c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	3307      	adds	r3, #7
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	f003 0307 	and.w	r3, r3, #7
 800f7ac:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	3308      	adds	r3, #8
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7bc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	3309      	adds	r3, #9
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7cc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	330a      	adds	r3, #10
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	f003 0301 	and.w	r3, r3, #1
 800f7dc:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	330b      	adds	r3, #11
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7ec:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	330c      	adds	r3, #12
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	f003 0301 	and.w	r3, r3, #1
 800f7fc:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	330d      	adds	r3, #13
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f80c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	330e      	adds	r3, #14
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f81c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	7bda      	ldrb	r2, [r3, #15]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	7c1a      	ldrb	r2, [r3, #16]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	7c5a      	ldrb	r2, [r3, #17]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	7c9a      	ldrb	r2, [r3, #18]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	7cda      	ldrb	r2, [r3, #19]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	7d1a      	ldrb	r2, [r3, #20]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	7d5a      	ldrb	r2, [r3, #21]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	7d9a      	ldrb	r2, [r3, #22]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	7dda      	ldrb	r2, [r3, #23]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	7e1a      	ldrb	r2, [r3, #24]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	7e5a      	ldrb	r2, [r3, #25]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	7e9a      	ldrb	r2, [r3, #26]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	7eda      	ldrb	r2, [r3, #27]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	7f1a      	ldrb	r2, [r3, #28]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	7f5a      	ldrb	r2, [r3, #29]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	7f9a      	ldrb	r2, [r3, #30]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	7fda      	ldrb	r2, [r3, #31]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800f978:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3718      	adds	r7, #24
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b090      	sub	sp, #64	; 0x40
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f98e:	2300      	movs	r3, #0
 800f990:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800f994:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d10a      	bne.n	800f9b2 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800f99c:	f107 020c 	add.w	r2, r7, #12
 800f9a0:	2331      	movs	r3, #49	; 0x31
 800f9a2:	f240 110f 	movw	r1, #271	; 0x10f
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 f8e8 	bl	800fb7c <VL53L1_ReadMulti>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800f9b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d109      	bne.n	800f9ce <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800f9ba:	f107 030c 	add.w	r3, r7, #12
 800f9be:	683a      	ldr	r2, [r7, #0]
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	2031      	movs	r0, #49	; 0x31
 800f9c4:	f7ff feb8 	bl	800f738 <VL53L1_i2c_decode_nvm_copy_data>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f9ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3740      	adds	r7, #64	; 0x40
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}

0800f9da <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800f9da:	b580      	push	{r7, lr}
 800f9dc:	b086      	sub	sp, #24
 800f9de:	af02      	add	r7, sp, #8
 800f9e0:	6078      	str	r0, [r7, #4]
 800f9e2:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800f9e8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f000 f9b9 	bl	800fd64 <VL53L1_WaitUs>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800f9f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d10b      	bne.n	800fa16 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800f9fe:	2301      	movs	r3, #1
 800fa00:	9301      	str	r3, [sp, #4]
 800fa02:	2301      	movs	r3, #1
 800fa04:	9300      	str	r3, [sp, #0]
 800fa06:	2301      	movs	r3, #1
 800fa08:	22e5      	movs	r2, #229	; 0xe5
 800fa0a:	6839      	ldr	r1, [r7, #0]
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f000 f9bf 	bl	800fd90 <VL53L1_WaitValueMaskEx>
 800fa12:	4603      	mov	r3, r0
 800fa14:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800fa16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d103      	bne.n	800fa26 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800fa1e:	2103      	movs	r1, #3
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f7fe f896 	bl	800db52 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800fa26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3710      	adds	r7, #16
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b088      	sub	sp, #32
 800fa36:	af02      	add	r7, sp, #8
 800fa38:	6078      	str	r0, [r7, #4]
 800fa3a:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800fa44:	2300      	movs	r3, #0
 800fa46:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800fa52:	f003 0310 	and.w	r3, r3, #16
 800fa56:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800fa58:	7bfb      	ldrb	r3, [r7, #15]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d102      	bne.n	800fa64 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 800fa5e:	2301      	movs	r3, #1
 800fa60:	75fb      	strb	r3, [r7, #23]
 800fa62:	e001      	b.n	800fa68 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 800fa64:	2300      	movs	r3, #0
 800fa66:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 800fa68:	7dfb      	ldrb	r3, [r7, #23]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	9201      	str	r2, [sp, #4]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	9200      	str	r2, [sp, #0]
 800fa72:	2231      	movs	r2, #49	; 0x31
 800fa74:	6839      	ldr	r1, [r7, #0]
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f000 f98a 	bl	800fd90 <VL53L1_WaitValueMaskEx>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800fa80:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3718      	adds	r7, #24
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b088      	sub	sp, #32
 800fa90:	af02      	add	r7, sp, #8
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	330a      	adds	r3, #10
 800fa9c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800faaa:	b299      	uxth	r1, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	b29a      	uxth	r2, r3
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	4613      	mov	r3, r2
 800fab6:	68ba      	ldr	r2, [r7, #8]
 800fab8:	f7f5 f9b0 	bl	8004e1c <HAL_I2C_Master_Transmit>
 800fabc:	4603      	mov	r3, r0
 800fabe:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fac0:	693b      	ldr	r3, [r7, #16]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3718      	adds	r7, #24
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800faca:	b580      	push	{r7, lr}
 800facc:	b088      	sub	sp, #32
 800face:	af02      	add	r7, sp, #8
 800fad0:	60f8      	str	r0, [r7, #12]
 800fad2:	60b9      	str	r1, [r7, #8]
 800fad4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	330a      	adds	r3, #10
 800fada:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800fae8:	f043 0301 	orr.w	r3, r3, #1
 800faec:	b2db      	uxtb	r3, r3
 800faee:	b299      	uxth	r1, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	b29a      	uxth	r2, r3
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	9300      	str	r3, [sp, #0]
 800faf8:	4613      	mov	r3, r2
 800fafa:	68ba      	ldr	r2, [r7, #8]
 800fafc:	f7f5 fa8c 	bl	8005018 <HAL_I2C_Master_Receive>
 800fb00:	4603      	mov	r3, r0
 800fb02:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fb04:	693b      	ldr	r3, [r7, #16]
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3718      	adds	r7, #24
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
	...

0800fb10 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b086      	sub	sp, #24
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	607a      	str	r2, [r7, #4]
 800fb1a:	603b      	str	r3, [r7, #0]
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fb20:	2300      	movs	r3, #0
 800fb22:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	2bff      	cmp	r3, #255	; 0xff
 800fb28:	d902      	bls.n	800fb30 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800fb2a:	f06f 0303 	mvn.w	r3, #3
 800fb2e:	e01d      	b.n	800fb6c <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800fb30:	897b      	ldrh	r3, [r7, #10]
 800fb32:	0a1b      	lsrs	r3, r3, #8
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	b2da      	uxtb	r2, r3
 800fb38:	4b0e      	ldr	r3, [pc, #56]	; (800fb74 <VL53L1_WriteMulti+0x64>)
 800fb3a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fb3c:	897b      	ldrh	r3, [r7, #10]
 800fb3e:	b2da      	uxtb	r2, r3
 800fb40:	4b0c      	ldr	r3, [pc, #48]	; (800fb74 <VL53L1_WriteMulti+0x64>)
 800fb42:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800fb44:	683a      	ldr	r2, [r7, #0]
 800fb46:	6879      	ldr	r1, [r7, #4]
 800fb48:	480b      	ldr	r0, [pc, #44]	; (800fb78 <VL53L1_WriteMulti+0x68>)
 800fb4a:	f000 fb97 	bl	801027c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	3302      	adds	r3, #2
 800fb52:	461a      	mov	r2, r3
 800fb54:	4907      	ldr	r1, [pc, #28]	; (800fb74 <VL53L1_WriteMulti+0x64>)
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	f7ff ff98 	bl	800fa8c <_I2CWrite>
 800fb5c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d001      	beq.n	800fb68 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fb64:	23f3      	movs	r3, #243	; 0xf3
 800fb66:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800fb68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3718      	adds	r7, #24
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	200006a0 	.word	0x200006a0
 800fb78:	200006a2 	.word	0x200006a2

0800fb7c <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b086      	sub	sp, #24
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	607a      	str	r2, [r7, #4]
 800fb86:	603b      	str	r3, [r7, #0]
 800fb88:	460b      	mov	r3, r1
 800fb8a:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fb90:	897b      	ldrh	r3, [r7, #10]
 800fb92:	0a1b      	lsrs	r3, r3, #8
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	b2da      	uxtb	r2, r3
 800fb98:	4b12      	ldr	r3, [pc, #72]	; (800fbe4 <VL53L1_ReadMulti+0x68>)
 800fb9a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fb9c:	897b      	ldrh	r3, [r7, #10]
 800fb9e:	b2da      	uxtb	r2, r3
 800fba0:	4b10      	ldr	r3, [pc, #64]	; (800fbe4 <VL53L1_ReadMulti+0x68>)
 800fba2:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fba4:	2202      	movs	r2, #2
 800fba6:	490f      	ldr	r1, [pc, #60]	; (800fbe4 <VL53L1_ReadMulti+0x68>)
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f7ff ff6f 	bl	800fa8c <_I2CWrite>
 800fbae:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d002      	beq.n	800fbbc <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fbb6:	23f3      	movs	r3, #243	; 0xf3
 800fbb8:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fbba:	e00c      	b.n	800fbd6 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800fbbc:	683a      	ldr	r2, [r7, #0]
 800fbbe:	6879      	ldr	r1, [r7, #4]
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	f7ff ff82 	bl	800faca <_I2CRead>
 800fbc6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d002      	beq.n	800fbd4 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fbce:	23f3      	movs	r3, #243	; 0xf3
 800fbd0:	75fb      	strb	r3, [r7, #23]
 800fbd2:	e000      	b.n	800fbd6 <VL53L1_ReadMulti+0x5a>
    }
done:
 800fbd4:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800fbd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3718      	adds	r7, #24
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	200006a0 	.word	0x200006a0

0800fbe8 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	807b      	strh	r3, [r7, #2]
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fbfc:	887b      	ldrh	r3, [r7, #2]
 800fbfe:	0a1b      	lsrs	r3, r3, #8
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	b2da      	uxtb	r2, r3
 800fc04:	4b0c      	ldr	r3, [pc, #48]	; (800fc38 <VL53L1_WrByte+0x50>)
 800fc06:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fc08:	887b      	ldrh	r3, [r7, #2]
 800fc0a:	b2da      	uxtb	r2, r3
 800fc0c:	4b0a      	ldr	r3, [pc, #40]	; (800fc38 <VL53L1_WrByte+0x50>)
 800fc0e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800fc10:	4a09      	ldr	r2, [pc, #36]	; (800fc38 <VL53L1_WrByte+0x50>)
 800fc12:	787b      	ldrb	r3, [r7, #1]
 800fc14:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800fc16:	2203      	movs	r2, #3
 800fc18:	4907      	ldr	r1, [pc, #28]	; (800fc38 <VL53L1_WrByte+0x50>)
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f7ff ff36 	bl	800fa8c <_I2CWrite>
 800fc20:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d001      	beq.n	800fc2c <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fc28:	23f3      	movs	r3, #243	; 0xf3
 800fc2a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800fc2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3710      	adds	r7, #16
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	200006a0 	.word	0x200006a0

0800fc3c <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b086      	sub	sp, #24
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	460b      	mov	r3, r1
 800fc46:	607a      	str	r2, [r7, #4]
 800fc48:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800fc4e:	897b      	ldrh	r3, [r7, #10]
 800fc50:	0a1b      	lsrs	r3, r3, #8
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	b2da      	uxtb	r2, r3
 800fc56:	4b12      	ldr	r3, [pc, #72]	; (800fca0 <VL53L1_RdByte+0x64>)
 800fc58:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fc5a:	897b      	ldrh	r3, [r7, #10]
 800fc5c:	b2da      	uxtb	r2, r3
 800fc5e:	4b10      	ldr	r3, [pc, #64]	; (800fca0 <VL53L1_RdByte+0x64>)
 800fc60:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fc62:	2202      	movs	r2, #2
 800fc64:	490e      	ldr	r1, [pc, #56]	; (800fca0 <VL53L1_RdByte+0x64>)
 800fc66:	68f8      	ldr	r0, [r7, #12]
 800fc68:	f7ff ff10 	bl	800fa8c <_I2CWrite>
 800fc6c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d002      	beq.n	800fc7a <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fc74:	23f3      	movs	r3, #243	; 0xf3
 800fc76:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fc78:	e00c      	b.n	800fc94 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	6879      	ldr	r1, [r7, #4]
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	f7ff ff23 	bl	800faca <_I2CRead>
 800fc84:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d002      	beq.n	800fc92 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fc8c:	23f3      	movs	r3, #243	; 0xf3
 800fc8e:	75fb      	strb	r3, [r7, #23]
 800fc90:	e000      	b.n	800fc94 <VL53L1_RdByte+0x58>
    }
done:
 800fc92:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800fc94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3718      	adds	r7, #24
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	200006a0 	.word	0x200006a0

0800fca4 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b086      	sub	sp, #24
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	460b      	mov	r3, r1
 800fcae:	607a      	str	r2, [r7, #4]
 800fcb0:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fcb6:	897b      	ldrh	r3, [r7, #10]
 800fcb8:	0a1b      	lsrs	r3, r3, #8
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	b2da      	uxtb	r2, r3
 800fcbe:	4b18      	ldr	r3, [pc, #96]	; (800fd20 <VL53L1_RdWord+0x7c>)
 800fcc0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fcc2:	897b      	ldrh	r3, [r7, #10]
 800fcc4:	b2da      	uxtb	r2, r3
 800fcc6:	4b16      	ldr	r3, [pc, #88]	; (800fd20 <VL53L1_RdWord+0x7c>)
 800fcc8:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fcca:	2202      	movs	r2, #2
 800fccc:	4914      	ldr	r1, [pc, #80]	; (800fd20 <VL53L1_RdWord+0x7c>)
 800fcce:	68f8      	ldr	r0, [r7, #12]
 800fcd0:	f7ff fedc 	bl	800fa8c <_I2CWrite>
 800fcd4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d002      	beq.n	800fce2 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fcdc:	23f3      	movs	r3, #243	; 0xf3
 800fcde:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fce0:	e017      	b.n	800fd12 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800fce2:	2202      	movs	r2, #2
 800fce4:	490e      	ldr	r1, [pc, #56]	; (800fd20 <VL53L1_RdWord+0x7c>)
 800fce6:	68f8      	ldr	r0, [r7, #12]
 800fce8:	f7ff feef 	bl	800faca <_I2CRead>
 800fcec:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d002      	beq.n	800fcfa <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fcf4:	23f3      	movs	r3, #243	; 0xf3
 800fcf6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fcf8:	e00b      	b.n	800fd12 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800fcfa:	4b09      	ldr	r3, [pc, #36]	; (800fd20 <VL53L1_RdWord+0x7c>)
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	021b      	lsls	r3, r3, #8
 800fd02:	b29a      	uxth	r2, r3
 800fd04:	4b06      	ldr	r3, [pc, #24]	; (800fd20 <VL53L1_RdWord+0x7c>)
 800fd06:	785b      	ldrb	r3, [r3, #1]
 800fd08:	b29b      	uxth	r3, r3
 800fd0a:	4413      	add	r3, r2
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800fd12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3718      	adds	r7, #24
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	200006a0 	.word	0x200006a0

0800fd24 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b085      	sub	sp, #20
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2200      	movs	r2, #0
 800fd34:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800fd36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3714      	adds	r7, #20
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr

0800fd46 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800fd46:	b580      	push	{r7, lr}
 800fd48:	b082      	sub	sp, #8
 800fd4a:	af00      	add	r7, sp, #0
 800fd4c:	6078      	str	r0, [r7, #4]
 800fd4e:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7f3 fcda 	bl	800370c <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800fd58:	2300      	movs	r3, #0
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3708      	adds	r7, #8
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
	...

0800fd64 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	4a06      	ldr	r2, [pc, #24]	; (800fd8c <VL53L1_WaitUs+0x28>)
 800fd72:	fb82 1203 	smull	r1, r2, r2, r3
 800fd76:	1192      	asrs	r2, r2, #6
 800fd78:	17db      	asrs	r3, r3, #31
 800fd7a:	1ad3      	subs	r3, r2, r3
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7f3 fcc5 	bl	800370c <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3708      	adds	r7, #8
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	10624dd3 	.word	0x10624dd3

0800fd90 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800fd90:	b590      	push	{r4, r7, lr}
 800fd92:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	f107 040c 	add.w	r4, r7, #12
 800fd9c:	6020      	str	r0, [r4, #0]
 800fd9e:	f107 0008 	add.w	r0, r7, #8
 800fda2:	6001      	str	r1, [r0, #0]
 800fda4:	4619      	mov	r1, r3
 800fda6:	1dbb      	adds	r3, r7, #6
 800fda8:	801a      	strh	r2, [r3, #0]
 800fdaa:	1d7b      	adds	r3, r7, #5
 800fdac:	460a      	mov	r2, r1
 800fdae:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800fdd4:	f107 0310 	add.w	r3, r7, #16
 800fdd8:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fddc:	4935      	ldr	r1, [pc, #212]	; (800feb4 <VL53L1_WaitValueMaskEx+0x124>)
 800fdde:	4618      	mov	r0, r3
 800fde0:	f000 fa62 	bl	80102a8 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800fde4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7ff ff9b 	bl	800fd24 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800fdee:	e03f      	b.n	800fe70 <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800fdf0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d10b      	bne.n	800fe10 <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 800fdf8:	f207 2213 	addw	r2, r7, #531	; 0x213
 800fdfc:	1dbb      	adds	r3, r7, #6
 800fdfe:	8819      	ldrh	r1, [r3, #0]
 800fe00:	f107 030c 	add.w	r3, r7, #12
 800fe04:	6818      	ldr	r0, [r3, #0]
 800fe06:	f7ff ff19 	bl	800fc3c <VL53L1_RdByte>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800fe10:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800fe14:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800fe18:	4013      	ands	r3, r2
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	1d7a      	adds	r2, r7, #5
 800fe1e:	7812      	ldrb	r2, [r2, #0]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d102      	bne.n	800fe2a <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 800fe24:	2301      	movs	r3, #1
 800fe26:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800fe2a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d112      	bne.n	800fe58 <VL53L1_WaitValueMaskEx+0xc8>
 800fe32:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d10e      	bne.n	800fe58 <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 800fe3a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00a      	beq.n	800fe58 <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800fe42:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800fe46:	f107 030c 	add.w	r3, r7, #12
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	6818      	ldr	r0, [r3, #0]
 800fe4e:	f7ff ff7a 	bl	800fd46 <VL53L1_WaitMs>
 800fe52:	4603      	mov	r3, r0
 800fe54:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800fe58:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7ff ff61 	bl	800fd24 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800fe62:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800fe66:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800fe6a:	1ad3      	subs	r3, r2, r3
 800fe6c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800fe70:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d10a      	bne.n	800fe8e <VL53L1_WaitValueMaskEx+0xfe>
 800fe78:	f107 0308 	add.w	r3, r7, #8
 800fe7c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d203      	bcs.n	800fe8e <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 800fe86:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d0b0      	beq.n	800fdf0 <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800fe8e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d106      	bne.n	800fea4 <VL53L1_WaitValueMaskEx+0x114>
 800fe96:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d102      	bne.n	800fea4 <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 800fe9e:	23f9      	movs	r3, #249	; 0xf9
 800fea0:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800fea4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd90      	pop	{r4, r7, pc}
 800feb2:	bf00      	nop
 800feb4:	08010564 	.word	0x08010564

0800feb8 <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b0a4      	sub	sp, #144	; 0x90
 800febc:	af00      	add	r7, sp, #0
 800febe:	4603      	mov	r3, r0
 800fec0:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fec2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fec6:	2200      	movs	r2, #0
 800fec8:	601a      	str	r2, [r3, #0]
 800feca:	605a      	str	r2, [r3, #4]
 800fecc:	609a      	str	r2, [r3, #8]
 800fece:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fed0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fed4:	2200      	movs	r2, #0
 800fed6:	601a      	str	r2, [r3, #0]
 800fed8:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800feda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fede:	2200      	movs	r2, #0
 800fee0:	601a      	str	r2, [r3, #0]
 800fee2:	605a      	str	r2, [r3, #4]
 800fee4:	609a      	str	r2, [r3, #8]
 800fee6:	60da      	str	r2, [r3, #12]
 800fee8:	611a      	str	r2, [r3, #16]
 800feea:	615a      	str	r2, [r3, #20]
 800feec:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 800feee:	2300      	movs	r3, #0
 800fef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 800fef4:	2300      	movs	r3, #0
 800fef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 800fefa:	2300      	movs	r3, #0
 800fefc:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 800ff00:	2301      	movs	r3, #1
 800ff02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800ff06:	2300      	movs	r3, #0
 800ff08:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800ff0c:	e009      	b.n	800ff22 <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 800ff0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff12:	005b      	lsls	r3, r3, #1
 800ff14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800ff18:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800ff22:	79fa      	ldrb	r2, [r7, #7]
 800ff24:	494d      	ldr	r1, [pc, #308]	; (801005c <DC_MOTOR_Init+0x1a4>)
 800ff26:	4613      	mov	r3, r2
 800ff28:	009b      	lsls	r3, r3, #2
 800ff2a:	4413      	add	r3, r2
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	440b      	add	r3, r1
 800ff30:	3310      	adds	r3, #16
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d3e8      	bcc.n	800ff0e <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 800ff3c:	79fa      	ldrb	r2, [r7, #7]
 800ff3e:	4947      	ldr	r1, [pc, #284]	; (801005c <DC_MOTOR_Init+0x1a4>)
 800ff40:	4613      	mov	r3, r2
 800ff42:	009b      	lsls	r3, r3, #2
 800ff44:	4413      	add	r3, r2
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	440b      	add	r3, r1
 800ff4a:	3308      	adds	r3, #8
 800ff4c:	881b      	ldrh	r3, [r3, #0]
 800ff4e:	461a      	mov	r2, r3
 800ff50:	4b43      	ldr	r3, [pc, #268]	; (8010060 <DC_MOTOR_Init+0x1a8>)
 800ff52:	fb03 f302 	mul.w	r3, r3, r2
 800ff56:	4618      	mov	r0, r3
 800ff58:	79fa      	ldrb	r2, [r7, #7]
 800ff5a:	4940      	ldr	r1, [pc, #256]	; (801005c <DC_MOTOR_Init+0x1a4>)
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	009b      	lsls	r3, r3, #2
 800ff60:	4413      	add	r3, r2
 800ff62:	009b      	lsls	r3, r3, #2
 800ff64:	440b      	add	r3, r1
 800ff66:	330c      	adds	r3, #12
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ff6e:	fb02 f303 	mul.w	r3, r2, r3
 800ff72:	fbb0 f3f3 	udiv	r3, r0, r3
 800ff76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 800ff7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 800ff84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff88:	3b02      	subs	r3, #2
 800ff8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 800ff8e:	79fa      	ldrb	r2, [r7, #7]
 800ff90:	4932      	ldr	r1, [pc, #200]	; (801005c <DC_MOTOR_Init+0x1a4>)
 800ff92:	4613      	mov	r3, r2
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	4413      	add	r3, r2
 800ff98:	009b      	lsls	r3, r3, #2
 800ff9a:	440b      	add	r3, r1
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 800ffa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ffa4:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800ffa6:	2360      	movs	r3, #96	; 0x60
 800ffa8:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 800ffaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ffae:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ffb4:	2380      	movs	r3, #128	; 0x80
 800ffb6:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 800ffb8:	f107 0308 	add.w	r3, r7, #8
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7f7 fb89 	bl	80076d4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ffc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ffc6:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800ffc8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800ffcc:	f107 0308 	add.w	r3, r7, #8
 800ffd0:	4611      	mov	r1, r2
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7f8 fc34 	bl	8008840 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800ffd8:	f107 0308 	add.w	r3, r7, #8
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7f7 fd2f 	bl	8007a40 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 800ffea:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ffee:	f107 0308 	add.w	r3, r7, #8
 800fff2:	4611      	mov	r1, r2
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7f9 fbc3 	bl	8009780 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fffa:	2360      	movs	r3, #96	; 0x60
 800fffc:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 800fffe:	2300      	movs	r3, #0
 8010000:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010002:	2300      	movs	r3, #0
 8010004:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010006:	2300      	movs	r3, #0
 8010008:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 801000a:	79fa      	ldrb	r2, [r7, #7]
 801000c:	4913      	ldr	r1, [pc, #76]	; (801005c <DC_MOTOR_Init+0x1a4>)
 801000e:	4613      	mov	r3, r2
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	4413      	add	r3, r2
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	440b      	add	r3, r1
 8010018:	3304      	adds	r3, #4
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010020:	f107 0308 	add.w	r3, r7, #8
 8010024:	4618      	mov	r0, r3
 8010026:	f7f8 fa33 	bl	8008490 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 801002a:	f107 0308 	add.w	r3, r7, #8
 801002e:	4618      	mov	r0, r3
 8010030:	f7f3 f8f2 	bl	8003218 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8010034:	79fa      	ldrb	r2, [r7, #7]
 8010036:	4909      	ldr	r1, [pc, #36]	; (801005c <DC_MOTOR_Init+0x1a4>)
 8010038:	4613      	mov	r3, r2
 801003a:	009b      	lsls	r3, r3, #2
 801003c:	4413      	add	r3, r2
 801003e:	009b      	lsls	r3, r3, #2
 8010040:	440b      	add	r3, r1
 8010042:	3304      	adds	r3, #4
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	f107 0308 	add.w	r3, r7, #8
 801004a:	4611      	mov	r1, r2
 801004c:	4618      	mov	r0, r3
 801004e:	f7f7 fde7 	bl	8007c20 <HAL_TIM_PWM_Start>
}
 8010052:	bf00      	nop
 8010054:	3790      	adds	r7, #144	; 0x90
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	080105a8 	.word	0x080105a8
 8010060:	000f4240 	.word	0x000f4240

08010064 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 8010064:	b480      	push	{r7}
 8010066:	b083      	sub	sp, #12
 8010068:	af00      	add	r7, sp, #0
 801006a:	4603      	mov	r3, r0
 801006c:	460a      	mov	r2, r1
 801006e:	71fb      	strb	r3, [r7, #7]
 8010070:	4613      	mov	r3, r2
 8010072:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8010074:	79fa      	ldrb	r2, [r7, #7]
 8010076:	4928      	ldr	r1, [pc, #160]	; (8010118 <DC_MOTOR_Start+0xb4>)
 8010078:	4613      	mov	r3, r2
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	4413      	add	r3, r2
 801007e:	009b      	lsls	r3, r3, #2
 8010080:	440b      	add	r3, r1
 8010082:	3304      	adds	r3, #4
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d10a      	bne.n	80100a0 <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 801008a:	79fa      	ldrb	r2, [r7, #7]
 801008c:	4922      	ldr	r1, [pc, #136]	; (8010118 <DC_MOTOR_Start+0xb4>)
 801008e:	4613      	mov	r3, r2
 8010090:	009b      	lsls	r3, r3, #2
 8010092:	4413      	add	r3, r2
 8010094:	009b      	lsls	r3, r3, #2
 8010096:	440b      	add	r3, r1
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	88ba      	ldrh	r2, [r7, #4]
 801009c:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 801009e:	e035      	b.n	801010c <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80100a0:	79fa      	ldrb	r2, [r7, #7]
 80100a2:	491d      	ldr	r1, [pc, #116]	; (8010118 <DC_MOTOR_Start+0xb4>)
 80100a4:	4613      	mov	r3, r2
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	4413      	add	r3, r2
 80100aa:	009b      	lsls	r3, r3, #2
 80100ac:	440b      	add	r3, r1
 80100ae:	3304      	adds	r3, #4
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	2b04      	cmp	r3, #4
 80100b4:	d10a      	bne.n	80100cc <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 80100b6:	79fa      	ldrb	r2, [r7, #7]
 80100b8:	4917      	ldr	r1, [pc, #92]	; (8010118 <DC_MOTOR_Start+0xb4>)
 80100ba:	4613      	mov	r3, r2
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	4413      	add	r3, r2
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	440b      	add	r3, r1
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	88ba      	ldrh	r2, [r7, #4]
 80100c8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80100ca:	e01f      	b.n	801010c <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 80100cc:	79fa      	ldrb	r2, [r7, #7]
 80100ce:	4912      	ldr	r1, [pc, #72]	; (8010118 <DC_MOTOR_Start+0xb4>)
 80100d0:	4613      	mov	r3, r2
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	4413      	add	r3, r2
 80100d6:	009b      	lsls	r3, r3, #2
 80100d8:	440b      	add	r3, r1
 80100da:	3304      	adds	r3, #4
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	2b08      	cmp	r3, #8
 80100e0:	d10a      	bne.n	80100f8 <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 80100e2:	79fa      	ldrb	r2, [r7, #7]
 80100e4:	490c      	ldr	r1, [pc, #48]	; (8010118 <DC_MOTOR_Start+0xb4>)
 80100e6:	4613      	mov	r3, r2
 80100e8:	009b      	lsls	r3, r3, #2
 80100ea:	4413      	add	r3, r2
 80100ec:	009b      	lsls	r3, r3, #2
 80100ee:	440b      	add	r3, r1
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	88ba      	ldrh	r2, [r7, #4]
 80100f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80100f6:	e009      	b.n	801010c <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 80100f8:	79fa      	ldrb	r2, [r7, #7]
 80100fa:	4907      	ldr	r1, [pc, #28]	; (8010118 <DC_MOTOR_Start+0xb4>)
 80100fc:	4613      	mov	r3, r2
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	4413      	add	r3, r2
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	440b      	add	r3, r1
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	88ba      	ldrh	r2, [r7, #4]
 801010a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801010c:	bf00      	nop
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr
 8010118:	080105a8 	.word	0x080105a8

0801011c <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	4603      	mov	r3, r0
 8010124:	460a      	mov	r2, r1
 8010126:	71fb      	strb	r3, [r7, #7]
 8010128:	4613      	mov	r3, r2
 801012a:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 801012c:	79fa      	ldrb	r2, [r7, #7]
 801012e:	4928      	ldr	r1, [pc, #160]	; (80101d0 <DC_MOTOR_Set_Speed+0xb4>)
 8010130:	4613      	mov	r3, r2
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	4413      	add	r3, r2
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	440b      	add	r3, r1
 801013a:	3304      	adds	r3, #4
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d10a      	bne.n	8010158 <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8010142:	79fa      	ldrb	r2, [r7, #7]
 8010144:	4922      	ldr	r1, [pc, #136]	; (80101d0 <DC_MOTOR_Set_Speed+0xb4>)
 8010146:	4613      	mov	r3, r2
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	4413      	add	r3, r2
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	440b      	add	r3, r1
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	88ba      	ldrh	r2, [r7, #4]
 8010154:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8010156:	e035      	b.n	80101c4 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8010158:	79fa      	ldrb	r2, [r7, #7]
 801015a:	491d      	ldr	r1, [pc, #116]	; (80101d0 <DC_MOTOR_Set_Speed+0xb4>)
 801015c:	4613      	mov	r3, r2
 801015e:	009b      	lsls	r3, r3, #2
 8010160:	4413      	add	r3, r2
 8010162:	009b      	lsls	r3, r3, #2
 8010164:	440b      	add	r3, r1
 8010166:	3304      	adds	r3, #4
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2b04      	cmp	r3, #4
 801016c:	d10a      	bne.n	8010184 <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 801016e:	79fa      	ldrb	r2, [r7, #7]
 8010170:	4917      	ldr	r1, [pc, #92]	; (80101d0 <DC_MOTOR_Set_Speed+0xb4>)
 8010172:	4613      	mov	r3, r2
 8010174:	009b      	lsls	r3, r3, #2
 8010176:	4413      	add	r3, r2
 8010178:	009b      	lsls	r3, r3, #2
 801017a:	440b      	add	r3, r1
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	88ba      	ldrh	r2, [r7, #4]
 8010180:	639a      	str	r2, [r3, #56]	; 0x38
}
 8010182:	e01f      	b.n	80101c4 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8010184:	79fa      	ldrb	r2, [r7, #7]
 8010186:	4912      	ldr	r1, [pc, #72]	; (80101d0 <DC_MOTOR_Set_Speed+0xb4>)
 8010188:	4613      	mov	r3, r2
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	4413      	add	r3, r2
 801018e:	009b      	lsls	r3, r3, #2
 8010190:	440b      	add	r3, r1
 8010192:	3304      	adds	r3, #4
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	2b08      	cmp	r3, #8
 8010198:	d10a      	bne.n	80101b0 <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 801019a:	79fa      	ldrb	r2, [r7, #7]
 801019c:	490c      	ldr	r1, [pc, #48]	; (80101d0 <DC_MOTOR_Set_Speed+0xb4>)
 801019e:	4613      	mov	r3, r2
 80101a0:	009b      	lsls	r3, r3, #2
 80101a2:	4413      	add	r3, r2
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	440b      	add	r3, r1
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	88ba      	ldrh	r2, [r7, #4]
 80101ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80101ae:	e009      	b.n	80101c4 <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 80101b0:	79fa      	ldrb	r2, [r7, #7]
 80101b2:	4907      	ldr	r1, [pc, #28]	; (80101d0 <DC_MOTOR_Set_Speed+0xb4>)
 80101b4:	4613      	mov	r3, r2
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	4413      	add	r3, r2
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	440b      	add	r3, r1
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	88ba      	ldrh	r2, [r7, #4]
 80101c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80101c4:	bf00      	nop
 80101c6:	370c      	adds	r7, #12
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr
 80101d0:	080105a8 	.word	0x080105a8

080101d4 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80101d4:	b480      	push	{r7}
 80101d6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80101d8:	4b14      	ldr	r3, [pc, #80]	; (801022c <DWT_Delay_Init+0x58>)
 80101da:	68db      	ldr	r3, [r3, #12]
 80101dc:	4a13      	ldr	r2, [pc, #76]	; (801022c <DWT_Delay_Init+0x58>)
 80101de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80101e2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80101e4:	4b11      	ldr	r3, [pc, #68]	; (801022c <DWT_Delay_Init+0x58>)
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	4a10      	ldr	r2, [pc, #64]	; (801022c <DWT_Delay_Init+0x58>)
 80101ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80101ee:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80101f0:	4b0f      	ldr	r3, [pc, #60]	; (8010230 <DWT_Delay_Init+0x5c>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	4a0e      	ldr	r2, [pc, #56]	; (8010230 <DWT_Delay_Init+0x5c>)
 80101f6:	f023 0301 	bic.w	r3, r3, #1
 80101fa:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80101fc:	4b0c      	ldr	r3, [pc, #48]	; (8010230 <DWT_Delay_Init+0x5c>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4a0b      	ldr	r2, [pc, #44]	; (8010230 <DWT_Delay_Init+0x5c>)
 8010202:	f043 0301 	orr.w	r3, r3, #1
 8010206:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8010208:	4b09      	ldr	r3, [pc, #36]	; (8010230 <DWT_Delay_Init+0x5c>)
 801020a:	2200      	movs	r2, #0
 801020c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 801020e:	bf00      	nop
    __ASM volatile ("NOP");
 8010210:	bf00      	nop
    __ASM volatile ("NOP");
 8010212:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8010214:	4b06      	ldr	r3, [pc, #24]	; (8010230 <DWT_Delay_Init+0x5c>)
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d001      	beq.n	8010220 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 801021c:	2300      	movs	r3, #0
 801021e:	e000      	b.n	8010222 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8010220:	2301      	movs	r3, #1
    }
}
 8010222:	4618      	mov	r0, r3
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr
 801022c:	e000edf0 	.word	0xe000edf0
 8010230:	e0001000 	.word	0xe0001000

08010234 <__libc_init_array>:
 8010234:	b570      	push	{r4, r5, r6, lr}
 8010236:	4d0d      	ldr	r5, [pc, #52]	; (801026c <__libc_init_array+0x38>)
 8010238:	4c0d      	ldr	r4, [pc, #52]	; (8010270 <__libc_init_array+0x3c>)
 801023a:	1b64      	subs	r4, r4, r5
 801023c:	10a4      	asrs	r4, r4, #2
 801023e:	2600      	movs	r6, #0
 8010240:	42a6      	cmp	r6, r4
 8010242:	d109      	bne.n	8010258 <__libc_init_array+0x24>
 8010244:	4d0b      	ldr	r5, [pc, #44]	; (8010274 <__libc_init_array+0x40>)
 8010246:	4c0c      	ldr	r4, [pc, #48]	; (8010278 <__libc_init_array+0x44>)
 8010248:	f000 f842 	bl	80102d0 <_init>
 801024c:	1b64      	subs	r4, r4, r5
 801024e:	10a4      	asrs	r4, r4, #2
 8010250:	2600      	movs	r6, #0
 8010252:	42a6      	cmp	r6, r4
 8010254:	d105      	bne.n	8010262 <__libc_init_array+0x2e>
 8010256:	bd70      	pop	{r4, r5, r6, pc}
 8010258:	f855 3b04 	ldr.w	r3, [r5], #4
 801025c:	4798      	blx	r3
 801025e:	3601      	adds	r6, #1
 8010260:	e7ee      	b.n	8010240 <__libc_init_array+0xc>
 8010262:	f855 3b04 	ldr.w	r3, [r5], #4
 8010266:	4798      	blx	r3
 8010268:	3601      	adds	r6, #1
 801026a:	e7f2      	b.n	8010252 <__libc_init_array+0x1e>
 801026c:	080105d8 	.word	0x080105d8
 8010270:	080105d8 	.word	0x080105d8
 8010274:	080105d8 	.word	0x080105d8
 8010278:	080105dc 	.word	0x080105dc

0801027c <memcpy>:
 801027c:	440a      	add	r2, r1
 801027e:	4291      	cmp	r1, r2
 8010280:	f100 33ff 	add.w	r3, r0, #4294967295
 8010284:	d100      	bne.n	8010288 <memcpy+0xc>
 8010286:	4770      	bx	lr
 8010288:	b510      	push	{r4, lr}
 801028a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801028e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010292:	4291      	cmp	r1, r2
 8010294:	d1f9      	bne.n	801028a <memcpy+0xe>
 8010296:	bd10      	pop	{r4, pc}

08010298 <memset>:
 8010298:	4402      	add	r2, r0
 801029a:	4603      	mov	r3, r0
 801029c:	4293      	cmp	r3, r2
 801029e:	d100      	bne.n	80102a2 <memset+0xa>
 80102a0:	4770      	bx	lr
 80102a2:	f803 1b01 	strb.w	r1, [r3], #1
 80102a6:	e7f9      	b.n	801029c <memset+0x4>

080102a8 <strncpy>:
 80102a8:	b510      	push	{r4, lr}
 80102aa:	3901      	subs	r1, #1
 80102ac:	4603      	mov	r3, r0
 80102ae:	b132      	cbz	r2, 80102be <strncpy+0x16>
 80102b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80102b4:	f803 4b01 	strb.w	r4, [r3], #1
 80102b8:	3a01      	subs	r2, #1
 80102ba:	2c00      	cmp	r4, #0
 80102bc:	d1f7      	bne.n	80102ae <strncpy+0x6>
 80102be:	441a      	add	r2, r3
 80102c0:	2100      	movs	r1, #0
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d100      	bne.n	80102c8 <strncpy+0x20>
 80102c6:	bd10      	pop	{r4, pc}
 80102c8:	f803 1b01 	strb.w	r1, [r3], #1
 80102cc:	e7f9      	b.n	80102c2 <strncpy+0x1a>
	...

080102d0 <_init>:
 80102d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102d2:	bf00      	nop
 80102d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102d6:	bc08      	pop	{r3}
 80102d8:	469e      	mov	lr, r3
 80102da:	4770      	bx	lr

080102dc <_fini>:
 80102dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102de:	bf00      	nop
 80102e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102e2:	bc08      	pop	{r3}
 80102e4:	469e      	mov	lr, r3
 80102e6:	4770      	bx	lr
