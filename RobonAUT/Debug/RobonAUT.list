
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800a398  0800a398  0001a398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6c4  0800a6c4  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6c4  0800a6c4  0001a6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6cc  0800a6cc  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6cc  0800a6cc  0001a6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6d0  0800a6d0  0001a6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  0800a6d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000118  0800a7e8  00020118  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  0800a7e8  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f6b  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a35  00000000  00000000  000370af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00039ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002635e  00000000  00000000  0003c030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be55  00000000  00000000  0006238e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eba17  00000000  00000000  0007e1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169bfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056ac  00000000  00000000  00169c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000118 	.word	0x20000118
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a380 	.word	0x0800a380

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000011c 	.word	0x2000011c
 800020c:	0800a380 	.word	0x0800a380

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96e 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468c      	mov	ip, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8083 	bne.w	8000cf2 <__udivmoddi4+0x116>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d947      	bls.n	8000c82 <__udivmoddi4+0xa6>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b142      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	f1c2 0020 	rsb	r0, r2, #32
 8000bfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea40 0c01 	orr.w	ip, r0, r1
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbc f6f8 	udiv	r6, ip, r8
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fb08 c116 	mls	r1, r8, r6, ip
 8000c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c20:	fb06 f10e 	mul.w	r1, r6, lr
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 8119 	bcs.w	8000e64 <__udivmoddi4+0x288>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8116 	bls.w	8000e64 <__udivmoddi4+0x288>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8105 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f240 8102 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xaa>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d150      	bne.n	8000d30 <__udivmoddi4+0x154>
 8000c8e:	1bcb      	subs	r3, r1, r7
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	2601      	movs	r6, #1
 8000c9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0xe2>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	f200 80e9 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ccc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x10c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x10a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80d9 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e7bf      	b.n	8000c72 <__udivmoddi4+0x96>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x12e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <__udivmoddi4+0x282>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x1cc>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0x140>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80b8 	bhi.w	8000e8c <__udivmoddi4+0x2b0>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	468c      	mov	ip, r1
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a8      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000d2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f603 	lsr.w	r6, r0, r3
 8000d38:	4097      	lsls	r7, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	4330      	orrs	r0, r6
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f108 	mul.w	r1, r6, r8
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x19c>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d6a:	f080 808d 	bcs.w	8000e88 <__udivmoddi4+0x2ac>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 808a 	bls.w	8000e88 <__udivmoddi4+0x2ac>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b281      	uxth	r1, r0
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d88:	fb00 f308 	mul.w	r3, r0, r8
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x1c4>
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d96:	d273      	bcs.n	8000e80 <__udivmoddi4+0x2a4>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d971      	bls.n	8000e80 <__udivmoddi4+0x2a4>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4439      	add	r1, r7
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da6:	e778      	b.n	8000c9a <__udivmoddi4+0xbe>
 8000da8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dac:	fa03 f406 	lsl.w	r4, r3, r6
 8000db0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db4:	431c      	orrs	r4, r3
 8000db6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	0c3b      	lsrs	r3, r7, #16
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fa1f f884 	uxth.w	r8, r4
 8000dd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dda:	fb09 fa08 	mul.w	sl, r9, r8
 8000dde:	458a      	cmp	sl, r1
 8000de0:	fa02 f206 	lsl.w	r2, r2, r6
 8000de4:	fa00 f306 	lsl.w	r3, r0, r6
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x220>
 8000dea:	1861      	adds	r1, r4, r1
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df0:	d248      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000df2:	458a      	cmp	sl, r1
 8000df4:	d946      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4421      	add	r1, r4
 8000dfc:	eba1 010a 	sub.w	r1, r1, sl
 8000e00:	b2bf      	uxth	r7, r7
 8000e02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0e:	fb00 f808 	mul.w	r8, r0, r8
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x24a>
 8000e16:	19e7      	adds	r7, r4, r7
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1c:	d22e      	bcs.n	8000e7c <__udivmoddi4+0x2a0>
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x2a0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4427      	add	r7, r4
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	eba7 0708 	sub.w	r7, r7, r8
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	454f      	cmp	r7, r9
 8000e34:	46c6      	mov	lr, r8
 8000e36:	4649      	mov	r1, r9
 8000e38:	d31a      	bcc.n	8000e70 <__udivmoddi4+0x294>
 8000e3a:	d017      	beq.n	8000e6c <__udivmoddi4+0x290>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x27a>
 8000e3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e42:	eb67 0701 	sbc.w	r7, r7, r1
 8000e46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e4a:	40f2      	lsrs	r2, r6
 8000e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	e9c5 2700 	strd	r2, r7, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e70b      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fd      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e6c:	4543      	cmp	r3, r8
 8000e6e:	d2e5      	bcs.n	8000e3c <__udivmoddi4+0x260>
 8000e70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e74:	eb69 0104 	sbc.w	r1, r9, r4
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e7d2      	b.n	8000e26 <__udivmoddi4+0x24a>
 8000e80:	4660      	mov	r0, ip
 8000e82:	e78d      	b.n	8000da0 <__udivmoddi4+0x1c4>
 8000e84:	4681      	mov	r9, r0
 8000e86:	e7b9      	b.n	8000dfc <__udivmoddi4+0x220>
 8000e88:	4666      	mov	r6, ip
 8000e8a:	e775      	b.n	8000d78 <__udivmoddi4+0x19c>
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x14a>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	4439      	add	r1, r7
 8000e96:	e713      	b.n	8000cc0 <__udivmoddi4+0xe4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e724      	b.n	8000ce8 <__udivmoddi4+0x10c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000ea4:	b5b0      	push	{r4, r5, r7, lr}
 8000ea6:	b0a8      	sub	sp, #160	; 0xa0
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000ee6:	f008 fdbb 	bl	8009a60 <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	4aaa      	ldr	r2, [pc, #680]	; (8001198 <SERVO_Init+0x2f4>)
 8000eee:	015b      	lsls	r3, r3, #5
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3314      	adds	r3, #20
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fb24 	bl	8000544 <__aeabi_ui2d>
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	4ba6      	ldr	r3, [pc, #664]	; (800119c <SERVO_Init+0x2f8>)
 8000f02:	f7ff fcc3 	bl	800088c <__aeabi_ddiv>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f7ff fe2d 	bl	8000b6c <__aeabi_d2uiz>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	4a9f      	ldr	r2, [pc, #636]	; (8001198 <SERVO_Init+0x2f4>)
 8000f1c:	015b      	lsls	r3, r3, #5
 8000f1e:	4413      	add	r3, r2
 8000f20:	3314      	adds	r3, #20
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fb0d 	bl	8000544 <__aeabi_ui2d>
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	460d      	mov	r5, r1
 8000f2e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000f32:	f7ff fb07 	bl	8000544 <__aeabi_ui2d>
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	4b99      	ldr	r3, [pc, #612]	; (80011a0 <SERVO_Init+0x2fc>)
 8000f3c:	f7ff f9c6 	bl	80002cc <__adddf3>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	4b95      	ldr	r3, [pc, #596]	; (80011a4 <SERVO_Init+0x300>)
 8000f4e:	f7ff fb73 	bl	8000638 <__aeabi_dmul>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4620      	mov	r0, r4
 8000f58:	4629      	mov	r1, r5
 8000f5a:	f7ff fc97 	bl	800088c <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	4b8d      	ldr	r3, [pc, #564]	; (80011a0 <SERVO_Init+0x2fc>)
 8000f6c:	f7ff f9ac 	bl	80002c8 <__aeabi_dsub>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fdf8 	bl	8000b6c <__aeabi_d2uiz>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000f82:	2313      	movs	r3, #19
 8000f84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000f88:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4a81      	ldr	r2, [pc, #516]	; (8001198 <SERVO_Init+0x2f4>)
 8000f94:	015b      	lsls	r3, r3, #5
 8000f96:	4413      	add	r3, r2
 8000f98:	3308      	adds	r3, #8
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a82      	ldr	r2, [pc, #520]	; (80011a8 <SERVO_Init+0x304>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10e      	bne.n	8000fc0 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	4b81      	ldr	r3, [pc, #516]	; (80011ac <SERVO_Init+0x308>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a80      	ldr	r2, [pc, #512]	; (80011ac <SERVO_Init+0x308>)
 8000fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b7e      	ldr	r3, [pc, #504]	; (80011ac <SERVO_Init+0x308>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	e046      	b.n	800104e <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	4a75      	ldr	r2, [pc, #468]	; (8001198 <SERVO_Init+0x2f4>)
 8000fc4:	015b      	lsls	r3, r3, #5
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3308      	adds	r3, #8
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd0:	d10e      	bne.n	8000ff0 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	4b75      	ldr	r3, [pc, #468]	; (80011ac <SERVO_Init+0x308>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a74      	ldr	r2, [pc, #464]	; (80011ac <SERVO_Init+0x308>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b72      	ldr	r3, [pc, #456]	; (80011ac <SERVO_Init+0x308>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	e02e      	b.n	800104e <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4a69      	ldr	r2, [pc, #420]	; (8001198 <SERVO_Init+0x2f4>)
 8000ff4:	015b      	lsls	r3, r3, #5
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a6c      	ldr	r2, [pc, #432]	; (80011b0 <SERVO_Init+0x30c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d10e      	bne.n	8001020 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b69      	ldr	r3, [pc, #420]	; (80011ac <SERVO_Init+0x308>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a68      	ldr	r2, [pc, #416]	; (80011ac <SERVO_Init+0x308>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b66      	ldr	r3, [pc, #408]	; (80011ac <SERVO_Init+0x308>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	e016      	b.n	800104e <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	4a5d      	ldr	r2, [pc, #372]	; (8001198 <SERVO_Init+0x2f4>)
 8001024:	015b      	lsls	r3, r3, #5
 8001026:	4413      	add	r3, r2
 8001028:	3308      	adds	r3, #8
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a61      	ldr	r2, [pc, #388]	; (80011b4 <SERVO_Init+0x310>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10d      	bne.n	800104e <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b5d      	ldr	r3, [pc, #372]	; (80011ac <SERVO_Init+0x308>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a5c      	ldr	r2, [pc, #368]	; (80011ac <SERVO_Init+0x308>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b5a      	ldr	r3, [pc, #360]	; (80011ac <SERVO_Init+0x308>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	4a51      	ldr	r2, [pc, #324]	; (8001198 <SERVO_Init+0x2f4>)
 8001052:	015b      	lsls	r3, r3, #5
 8001054:	4413      	add	r3, r2
 8001056:	3308      	adds	r3, #8
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 800105c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001060:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 8001066:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4618      	mov	r0, r3
 800107a:	f005 f9b9 	bl	80063f0 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001082:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8001086:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f006 fa63 	bl	800755c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4618      	mov	r0, r3
 800109c:	f005 fb5e 	bl	800675c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 80010ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f007 f9f0 	bl	800849c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010bc:	2360      	movs	r3, #96	; 0x60
 80010be:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c4:	2300      	movs	r3, #0
 80010c6:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	4a32      	ldr	r2, [pc, #200]	; (8001198 <SERVO_Init+0x2f4>)
 80010d0:	015b      	lsls	r3, r3, #5
 80010d2:	4413      	add	r3, r2
 80010d4:	3310      	adds	r3, #16
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4618      	mov	r0, r3
 80010e2:	f006 f863 	bl	80071ac <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 80010e6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80010ea:	f7ff fa2b 	bl	8000544 <__aeabi_ui2d>
 80010ee:	4604      	mov	r4, r0
 80010f0:	460d      	mov	r5, r1
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <SERVO_Init+0x2f4>)
 80010f6:	015b      	lsls	r3, r3, #5
 80010f8:	4413      	add	r3, r2
 80010fa:	3318      	adds	r3, #24
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa42 	bl	8000588 <__aeabi_f2d>
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <SERVO_Init+0x314>)
 800110a:	f7ff fbbf 	bl	800088c <__aeabi_ddiv>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff fa8f 	bl	8000638 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	88fc      	ldrh	r4, [r7, #6]
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd22 	bl	8000b6c <__aeabi_d2uiz>
 8001128:	4603      	mov	r3, r0
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <SERVO_Init+0x318>)
 800112e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 8001132:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001136:	f7ff fa05 	bl	8000544 <__aeabi_ui2d>
 800113a:	4604      	mov	r4, r0
 800113c:	460d      	mov	r5, r1
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <SERVO_Init+0x31c>)
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fa21 	bl	8000588 <__aeabi_f2d>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <SERVO_Init+0x314>)
 800114c:	f7ff fb9e 	bl	800088c <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	f7ff fa6e 	bl	8000638 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	88fc      	ldrh	r4, [r7, #6]
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fd01 	bl	8000b6c <__aeabi_d2uiz>
 800116a:	4603      	mov	r3, r0
 800116c:	b299      	uxth	r1, r3
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <SERVO_Init+0x318>)
 8001170:	00a3      	lsls	r3, r4, #2
 8001172:	4413      	add	r3, r2
 8001174:	460a      	mov	r2, r1
 8001176:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <SERVO_Init+0x2f4>)
 800117c:	015b      	lsls	r3, r3, #5
 800117e:	4413      	add	r3, r2
 8001180:	3310      	adds	r3, #16
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f005 fbd6 	bl	800693c <HAL_TIM_PWM_Start>

}
 8001190:	bf00      	nop
 8001192:	37a0      	adds	r7, #160	; 0xa0
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	0800a628 	.word	0x0800a628
 800119c:	41490000 	.word	0x41490000
 80011a0:	3ff00000 	.word	0x3ff00000
 80011a4:	40490000 	.word	0x40490000
 80011a8:	40001800 	.word	0x40001800
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40000400 	.word	0x40000400
 80011b4:	40000800 	.word	0x40000800
 80011b8:	40340000 	.word	0x40340000
 80011bc:	20000134 	.word	0x20000134
 80011c0:	40066666 	.word	0x40066666

080011c4 <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	ed87 0a00 	vstr	s0, [r7]
 80011d0:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <SERVO_MoveTo+0x94>)
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	885b      	ldrh	r3, [r3, #2]
 80011e0:	4619      	mov	r1, r3
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <SERVO_MoveTo+0x94>)
 80011e6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80011ea:	1acb      	subs	r3, r1, r3
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	edd7 7a00 	vldr	s15, [r7]
 80011f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fc:	ee17 0a90 	vmov	r0, s15
 8001200:	f7ff f9c2 	bl	8000588 <__aeabi_f2d>
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <SERVO_MoveTo+0x98>)
 800120a:	f7ff fb3f 	bl	800088c <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4614      	mov	r4, r2
 8001214:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <SERVO_MoveTo+0x94>)
 800121a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f9a0 	bl	8000564 <__aeabi_i2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4620      	mov	r0, r4
 800122a:	4629      	mov	r1, r5
 800122c:	f7ff f84e 	bl	80002cc <__adddf3>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fc98 	bl	8000b6c <__aeabi_d2uiz>
 800123c:	4603      	mov	r3, r0
 800123e:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	4a07      	ldr	r2, [pc, #28]	; (8001260 <SERVO_MoveTo+0x9c>)
 8001244:	015b      	lsls	r3, r3, #5
 8001246:	4413      	add	r3, r2
 8001248:	330c      	adds	r3, #12
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	89fa      	ldrh	r2, [r7, #14]
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bdb0      	pop	{r4, r5, r7, pc}
 8001258:	20000134 	.word	0x20000134
 800125c:	40668000 	.word	0x40668000
 8001260:	0800a628 	.word	0x0800a628

08001264 <HAL_UART_RxCpltCallback>:
void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny);	//aktualisan chip selectelt adc-bol parameterben adott chanelen olvas; ret: [0, 3]
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_UART_RxCpltCallback+0x48>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d111      	bne.n	8001298 <HAL_UART_RxCpltCallback+0x34>
		//erosen kerdeses
		if (bluetooth_rx == 0x0A)
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_UART_RxCpltCallback+0x4c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b0a      	cmp	r3, #10
 800127a:	d102      	bne.n	8001282 <HAL_UART_RxCpltCallback+0x1e>
			bluetooth_flag = 1;
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_UART_RxCpltCallback+0x50>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_UART_RxCpltCallback+0x54>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_UART_RxCpltCallback+0x4c>)
 8001288:	7811      	ldrb	r1, [r2, #0]
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_UART_RxCpltCallback+0x58>)
 800128c:	54d1      	strb	r1, [r2, r3]
		bluetooth_a++;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_UART_RxCpltCallback+0x54>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_UART_RxCpltCallback+0x54>)
 8001296:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(&huart2, &bluetooth_rx, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	4905      	ldr	r1, [pc, #20]	; (80012b0 <HAL_UART_RxCpltCallback+0x4c>)
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <HAL_UART_RxCpltCallback+0x48>)
 800129e:	f007 fb95 	bl	80089cc <HAL_UART_Receive_IT>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000620 	.word	0x20000620
 80012b0:	20000200 	.word	0x20000200
 80012b4:	20000140 	.word	0x20000140
 80012b8:	20000144 	.word	0x20000144
 80012bc:	20000148 	.word	0x20000148

080012c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d11a      	bne.n	8001306 <HAL_TIM_PeriodElapsedCallback+0x46>
		//itt kell kiirni amire kivancsiak vagyunk a stringben
		sprintf(bluetooth_buffer,
 80012d0:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4910      	ldr	r1, [pc, #64]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80012da:	7809      	ldrb	r1, [r1, #0]
 80012dc:	4608      	mov	r0, r1
 80012de:	4910      	ldr	r1, [pc, #64]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80012e0:	7809      	ldrb	r1, [r1, #0]
 80012e2:	9101      	str	r1, [sp, #4]
 80012e4:	9000      	str	r0, [sp, #0]
 80012e6:	490f      	ldr	r1, [pc, #60]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80012e8:	480f      	ldr	r0, [pc, #60]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80012ea:	f008 fc29 	bl	8009b40 <siprintf>
				"%i -edik uzenet \t kivant sebesseg: %i \t allapot: %c kanyar/egyenes: %c \r\n",
				bluetooth_i, kivant_sebesseg, sc_vagy_gyorskor,
				kanyarban_vagy_egyenes);
		bluetooth_i++;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80012f6:	6013      	str	r3, [r2, #0]
		bluetooth_len = strlen(bluetooth_buffer);
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80012fa:	f7fe ff89 	bl	8000210 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001304:	601a      	str	r2, [r3, #0]
		//HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);
	}
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200005d8 	.word	0x200005d8
 8001314:	200001ec 	.word	0x200001ec
 8001318:	2000009c 	.word	0x2000009c
 800131c:	200000a1 	.word	0x200000a1
 8001320:	200000a0 	.word	0x200000a0
 8001324:	0800a398 	.word	0x0800a398
 8001328:	20000188 	.word	0x20000188
 800132c:	20000184 	.word	0x20000184

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t eredmeny_16bit[2] = {0b1111111, 0b1111111};
 8001336:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800133a:	84bb      	strh	r3, [r7, #36]	; 0x24
	eredmeny_0 = 10.0;
 800133c:	4975      	ldr	r1, [pc, #468]	; (8001514 <main+0x1e4>)
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b75      	ldr	r3, [pc, #468]	; (8001518 <main+0x1e8>)
 8001344:	e9c1 2300 	strd	r2, r3, [r1]
	eredmeny_1 = 10.0;
 8001348:	4b74      	ldr	r3, [pc, #464]	; (800151c <main+0x1ec>)
 800134a:	220a      	movs	r2, #10
 800134c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134e:	f001 fe4b 	bl	8002fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001352:	f000 f905 	bl	8001560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001356:	f000 fd57 	bl	8001e08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800135a:	f000 fd0b 	bl	8001d74 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800135e:	f000 f971 	bl	8001644 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001362:	f000 f99d 	bl	80016a0 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001366:	f000 fa2d 	bl	80017c4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800136a:	f000 fa61 	bl	8001830 <MX_SPI3_Init>
  MX_TIM3_Init();
 800136e:	f000 fae3 	bl	8001938 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001372:	f000 fb3b 	bl	80019ec <MX_TIM4_Init>
  MX_UART4_Init();
 8001376:	f000 fca9 	bl	8001ccc <MX_UART4_Init>
  MX_TIM8_Init();
 800137a:	f000 fb8b 	bl	8001a94 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800137e:	f000 fccf 	bl	8001d20 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001382:	f000 f9bb 	bl	80016fc <MX_I2C3_Init>
  MX_TIM12_Init();
 8001386:	f000 fc31 	bl	8001bec <MX_TIM12_Init>
  MX_DMA_Init();
 800138a:	f000 fd1d 	bl	8001dc8 <MX_DMA_Init>
  MX_TIM2_Init();
 800138e:	f000 fa85 	bl	800189c <MX_TIM2_Init>
  MX_SPI1_Init();
 8001392:	f000 f9e1 	bl	8001758 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init(SZERVO);
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff fd84 	bl	8000ea4 <SERVO_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM1);
 800139c:	2000      	movs	r0, #0
 800139e:	f008 f9d1 	bl	8009744 <DC_MOTOR_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM2);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f008 f9ce 	bl	8009744 <DC_MOTOR_Init>
	DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 80013a8:	2100      	movs	r1, #0
 80013aa:	2000      	movs	r0, #0
 80013ac:	f008 faa0 	bl	80098f0 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 80013b0:	2100      	movs	r1, #0
 80013b2:	2001      	movs	r0, #1
 80013b4:	f008 fa9c 	bl	80098f0 <DC_MOTOR_Start>

	HAL_UART_Receive_IT(&huart2, &bluetooth_rx, 1);
 80013b8:	2201      	movs	r2, #1
 80013ba:	4959      	ldr	r1, [pc, #356]	; (8001520 <main+0x1f0>)
 80013bc:	4859      	ldr	r0, [pc, #356]	; (8001524 <main+0x1f4>)
 80013be:	f007 fb05 	bl	80089cc <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80013c2:	4859      	ldr	r0, [pc, #356]	; (8001528 <main+0x1f8>)
 80013c4:	f005 f904 	bl	80065d0 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 80013c8:	2104      	movs	r1, #4
 80013ca:	4858      	ldr	r0, [pc, #352]	; (800152c <main+0x1fc>)
 80013cc:	f005 fab6 	bl	800693c <HAL_TIM_PWM_Start>

	//Vonalszenzor init
	Vonalszenzor_Init();
 80013d0:	f000 fde4 	bl	8001f9c <Vonalszenzor_Init>
	/*Vonalszenzor_minta_kuldes(leszed);
	HAL_Delay(1);
	Vonalszenzor_minta_kuldes(minta0);*/

	while (1) {
		uint8_t vonal_eredmeny[32] = { 0 };
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	619a      	str	r2, [r3, #24]
		Vonalszenzor_operal(vonal_eredmeny);
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fde6 	bl	8001fc0 <Vonalszenzor_operal>
		Vonalszenzor_minta_kuldes(leszed);
 80013f4:	484e      	ldr	r0, [pc, #312]	; (8001530 <main+0x200>)
 80013f6:	f001 f807 	bl	8002408 <Vonalszenzor_minta_kuldes>
		Vonalszenzor_minta_kuldes(minta1);
 80013fa:	484e      	ldr	r0, [pc, #312]	; (8001534 <main+0x204>)
 80013fc:	f001 f804 	bl	8002408 <Vonalszenzor_minta_kuldes>
		HAL_Delay(500);
 8001400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001404:	f001 fe62 	bl	80030cc <HAL_Delay>
		Vonalszenzor_minta_kuldes(leszed);
 8001408:	4849      	ldr	r0, [pc, #292]	; (8001530 <main+0x200>)
 800140a:	f000 fffd 	bl	8002408 <Vonalszenzor_minta_kuldes>
		Vonalszenzor_minta_kuldes(minta1_adc4e);
 800140e:	484a      	ldr	r0, [pc, #296]	; (8001538 <main+0x208>)
 8001410:	f000 fffa 	bl	8002408 <Vonalszenzor_minta_kuldes>
		//HAL_Delay(500);
		Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit);
 8001414:	4b49      	ldr	r3, [pc, #292]	; (800153c <main+0x20c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f001 f81a 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
		Vonalszenzor_minta_kuldes(leszed);
 8001424:	4842      	ldr	r0, [pc, #264]	; (8001530 <main+0x200>)
 8001426:	f000 ffef 	bl	8002408 <Vonalszenzor_minta_kuldes>
		eredmeny_0 = (double) eredmeny_16bit[0];
 800142a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f888 	bl	8000544 <__aeabi_ui2d>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4936      	ldr	r1, [pc, #216]	; (8001514 <main+0x1e4>)
 800143a:	e9c1 2300 	strd	r2, r3, [r1]
		eredmeny_1 = (uint8_t) eredmeny_16bit[1];	//ha ez mukodik, akkor meg kell nezni _0-ra is es ha ott is, akkor jomkell legyen az _operal
 800143e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001442:	4b36      	ldr	r3, [pc, #216]	; (800151c <main+0x1ec>)
 8001444:	701a      	strb	r2, [r3, #0]
		if(eredmeny_0 > 9){
 8001446:	4b33      	ldr	r3, [pc, #204]	; (8001514 <main+0x1e4>)
 8001448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <main+0x210>)
 8001452:	f7ff fb81 	bl	8000b58 <__aeabi_dcmpgt>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <main+0x134>
			sotet = 1;
 800145c:	4b39      	ldr	r3, [pc, #228]	; (8001544 <main+0x214>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e002      	b.n	800146a <main+0x13a>
		} else {
			sotet = 0;
 8001464:	4b37      	ldr	r3, [pc, #220]	; (8001544 <main+0x214>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]




		//Szervo
		if (btnEnable == 1) {
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <main+0x218>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d142      	bne.n	80014f8 <main+0x1c8>
			if (szervoEnable == 1) {
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <main+0x21c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d11a      	bne.n	80014b0 <main+0x180>
				SERVO_MoveTo(SZERVO, 0);
 800147a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001550 <main+0x220>
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff fea0 	bl	80011c4 <SERVO_MoveTo>
				HAL_Delay(1000);
 8001484:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001488:	f001 fe20 	bl	80030cc <HAL_Delay>
				SERVO_MoveTo(SZERVO, 90);
 800148c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8001554 <main+0x224>
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff fe97 	bl	80011c4 <SERVO_MoveTo>
				HAL_Delay(1000);
 8001496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800149a:	f001 fe17 	bl	80030cc <HAL_Delay>
				SERVO_MoveTo(SZERVO, 180);
 800149e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8001558 <main+0x228>
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fe8e 	bl	80011c4 <SERVO_MoveTo>
				HAL_Delay(1000);
 80014a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ac:	f001 fe0e 	bl	80030cc <HAL_Delay>
			}

			if (motvezEnable == 1) {
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <main+0x22c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d18d      	bne.n	80013d4 <main+0xa4>
				int d = 1024;
 80014b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
				int k = 300;
 80014be:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
				if (k < d / 2) {
 80014c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c6:	0fda      	lsrs	r2, r3, #31
 80014c8:	4413      	add	r3, r2
 80014ca:	105b      	asrs	r3, r3, #1
 80014cc:	461a      	mov	r2, r3
 80014ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d0:	4293      	cmp	r3, r2
 80014d2:	f6bf af7f 	bge.w	80013d4 <main+0xa4>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, k); //ha pwm1 nagyobb, előremenet
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4619      	mov	r1, r3
 80014dc:	2000      	movs	r0, #0
 80014de:	f008 fa63 	bl	80099a8 <DC_MOTOR_Set_Speed>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, d - k);
 80014e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	2001      	movs	r0, #1
 80014f2:	f008 fa59 	bl	80099a8 <DC_MOTOR_Set_Speed>
 80014f6:	e76d      	b.n	80013d4 <main+0xa4>
				}
			}
		} else {
			SERVO_MoveTo(SZERVO, 90);
 80014f8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001554 <main+0x224>
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff fe61 	bl	80011c4 <SERVO_MoveTo>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, 0);//ez nem egeszen megallas, csak a jel kisimitasa. megallni k = d -vel kell
 8001502:	2100      	movs	r1, #0
 8001504:	2000      	movs	r0, #0
 8001506:	f008 fa4f 	bl	80099a8 <DC_MOTOR_Set_Speed>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, 0);
 800150a:	2100      	movs	r1, #0
 800150c:	2001      	movs	r0, #1
 800150e:	f008 fa4b 	bl	80099a8 <DC_MOTOR_Set_Speed>
	while (1) {
 8001512:	e75f      	b.n	80013d4 <main+0xa4>
 8001514:	20000208 	.word	0x20000208
 8001518:	40240000 	.word	0x40240000
 800151c:	200004f4 	.word	0x200004f4
 8001520:	20000200 	.word	0x20000200
 8001524:	20000620 	.word	0x20000620
 8001528:	200005d8 	.word	0x200005d8
 800152c:	20000664 	.word	0x20000664
 8001530:	20000004 	.word	0x20000004
 8001534:	2000000c 	.word	0x2000000c
 8001538:	20000014 	.word	0x20000014
 800153c:	20000095 	.word	0x20000095
 8001540:	40220000 	.word	0x40220000
 8001544:	2000013c 	.word	0x2000013c
 8001548:	20000138 	.word	0x20000138
 800154c:	20000000 	.word	0x20000000
 8001550:	00000000 	.word	0x00000000
 8001554:	42b40000 	.word	0x42b40000
 8001558:	43340000 	.word	0x43340000
 800155c:	20000139 	.word	0x20000139

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b094      	sub	sp, #80	; 0x50
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	2234      	movs	r2, #52	; 0x34
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f008 fade 	bl	8009b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	4b2c      	ldr	r3, [pc, #176]	; (800163c <SystemClock_Config+0xdc>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a2b      	ldr	r2, [pc, #172]	; (800163c <SystemClock_Config+0xdc>)
 800158e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <SystemClock_Config+0xdc>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a0:	2300      	movs	r3, #0
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <SystemClock_Config+0xe0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a25      	ldr	r2, [pc, #148]	; (8001640 <SystemClock_Config+0xe0>)
 80015aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <SystemClock_Config+0xe0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015bc:	2301      	movs	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c6:	2302      	movs	r3, #2
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015d0:	2304      	movs	r3, #4
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015d4:	23b4      	movs	r3, #180	; 0xb4
 80015d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d8:	2302      	movs	r3, #2
 80015da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015dc:	2302      	movs	r3, #2
 80015de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 fcd3 	bl	8004f94 <HAL_RCC_OscConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015f4:	f000 ff6a 	bl	80024cc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015f8:	f003 f8f0 	bl	80047dc <HAL_PWREx_EnableOverDrive>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001602:	f000 ff63 	bl	80024cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001606:	230f      	movs	r3, #15
 8001608:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160a:	2302      	movs	r3, #2
 800160c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001612:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001618:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800161c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	2105      	movs	r1, #5
 8001624:	4618      	mov	r0, r3
 8001626:	f003 f929 	bl	800487c <HAL_RCC_ClockConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001630:	f000 ff4c 	bl	80024cc <Error_Handler>
  }
}
 8001634:	bf00      	nop
 8001636:	3750      	adds	r7, #80	; 0x50
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	40007000 	.word	0x40007000

08001644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_I2C1_Init+0x50>)
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <MX_I2C1_Init+0x54>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_I2C1_Init+0x50>)
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_I2C1_Init+0x58>)
 8001652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_I2C1_Init+0x50>)
 8001662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_I2C1_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_I2C1_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_I2C1_Init+0x50>)
 8001682:	f002 fedf 	bl	8004444 <HAL_I2C_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800168c:	f000 ff1e 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2000034c 	.word	0x2000034c
 8001698:	40005400 	.word	0x40005400
 800169c:	000186a0 	.word	0x000186a0

080016a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016a6:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <MX_I2C2_Init+0x54>)
 80016a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <MX_I2C2_Init+0x58>)
 80016ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016de:	f002 feb1 	bl	8004444 <HAL_I2C_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016e8:	f000 fef0 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200003a0 	.word	0x200003a0
 80016f4:	40005800 	.word	0x40005800
 80016f8:	000186a0 	.word	0x000186a0

080016fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_I2C3_Init+0x50>)
 8001702:	4a13      	ldr	r2, [pc, #76]	; (8001750 <MX_I2C3_Init+0x54>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_I2C3_Init+0x50>)
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <MX_I2C3_Init+0x58>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_I2C3_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_I2C3_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_I2C3_Init+0x50>)
 800171a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800171e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <MX_I2C3_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_I2C3_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <MX_I2C3_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_I2C3_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <MX_I2C3_Init+0x50>)
 800173a:	f002 fe83 	bl	8004444 <HAL_I2C_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001744:	f000 fec2 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000210 	.word	0x20000210
 8001750:	40005c00 	.word	0x40005c00
 8001754:	000186a0 	.word	0x000186a0

08001758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_SPI1_Init+0x64>)
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <MX_SPI1_Init+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_SPI1_Init+0x64>)
 8001764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_SPI1_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_SPI1_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_SPI1_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_SPI1_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_SPI1_Init+0x64>)
 8001784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001788:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_SPI1_Init+0x64>)
 800178c:	2220      	movs	r2, #32
 800178e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_SPI1_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_SPI1_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <MX_SPI1_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_SPI1_Init+0x64>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_SPI1_Init+0x64>)
 80017aa:	f003 ff51 	bl	8005650 <HAL_SPI_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017b4:	f000 fe8a 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000580 	.word	0x20000580
 80017c0:	40013000 	.word	0x40013000

080017c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <MX_SPI2_Init+0x64>)
 80017ca:	4a18      	ldr	r2, [pc, #96]	; (800182c <MX_SPI2_Init+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_SPI2_Init+0x64>)
 80017d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_SPI2_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_SPI2_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_SPI2_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_SPI2_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_SPI2_Init+0x64>)
 80017f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_SPI2_Init+0x64>)
 80017f8:	2218      	movs	r2, #24
 80017fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <MX_SPI2_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_SPI2_Init+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <MX_SPI2_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_SPI2_Init+0x64>)
 8001810:	220a      	movs	r2, #10
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_SPI2_Init+0x64>)
 8001816:	f003 ff1b 	bl	8005650 <HAL_SPI_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001820:	f000 fe54 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000264 	.word	0x20000264
 800182c:	40003800 	.word	0x40003800

08001830 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_SPI3_Init+0x64>)
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <MX_SPI3_Init+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_SPI3_Init+0x64>)
 800183c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001840:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_SPI3_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <MX_SPI3_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_SPI3_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MX_SPI3_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <MX_SPI3_Init+0x64>)
 800185c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001860:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <MX_SPI3_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <MX_SPI3_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_SPI3_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <MX_SPI3_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_SPI3_Init+0x64>)
 800187c:	220a      	movs	r2, #10
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <MX_SPI3_Init+0x64>)
 8001882:	f003 fee5 	bl	8005650 <HAL_SPI_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800188c:	f000 fe1e 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000043c 	.word	0x2000043c
 8001898:	40003c00 	.word	0x40003c00

0800189c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b0:	463b      	mov	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018b8:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <MX_TIM2_Init+0x98>)
 80018ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <MX_TIM2_Init+0x98>)
 80018c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80018c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <MX_TIM2_Init+0x98>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <MX_TIM2_Init+0x98>)
 80018d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_TIM2_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MX_TIM2_Init+0x98>)
 80018de:	2280      	movs	r2, #128	; 0x80
 80018e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018e2:	4814      	ldr	r0, [pc, #80]	; (8001934 <MX_TIM2_Init+0x98>)
 80018e4:	f004 fd84 	bl	80063f0 <HAL_TIM_Base_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018ee:	f000 fded 	bl	80024cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4619      	mov	r1, r3
 80018fe:	480d      	ldr	r0, [pc, #52]	; (8001934 <MX_TIM2_Init+0x98>)
 8001900:	f005 fe2c 	bl	800755c <HAL_TIM_ConfigClockSource>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800190a:	f000 fddf 	bl	80024cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001916:	463b      	mov	r3, r7
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <MX_TIM2_Init+0x98>)
 800191c:	f006 fdbe 	bl	800849c <HAL_TIMEx_MasterConfigSynchronization>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001926:	f000 fdd1 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200005d8 	.word	0x200005d8

08001938 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	615a      	str	r2, [r3, #20]
 8001958:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <MX_TIM3_Init+0xac>)
 800195c:	4a22      	ldr	r2, [pc, #136]	; (80019e8 <MX_TIM3_Init+0xb0>)
 800195e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <MX_TIM3_Init+0xac>)
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <MX_TIM3_Init+0xac>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <MX_TIM3_Init+0xac>)
 800196e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001972:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <MX_TIM3_Init+0xac>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <MX_TIM3_Init+0xac>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001980:	4818      	ldr	r0, [pc, #96]	; (80019e4 <MX_TIM3_Init+0xac>)
 8001982:	f004 feeb 	bl	800675c <HAL_TIM_PWM_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800198c:	f000 fd9e 	bl	80024cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001998:	f107 0320 	add.w	r3, r7, #32
 800199c:	4619      	mov	r1, r3
 800199e:	4811      	ldr	r0, [pc, #68]	; (80019e4 <MX_TIM3_Init+0xac>)
 80019a0:	f006 fd7c 	bl	800849c <HAL_TIMEx_MasterConfigSynchronization>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80019aa:	f000 fd8f 	bl	80024cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ae:	2360      	movs	r3, #96	; 0x60
 80019b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2200      	movs	r2, #0
 80019c2:	4619      	mov	r1, r3
 80019c4:	4807      	ldr	r0, [pc, #28]	; (80019e4 <MX_TIM3_Init+0xac>)
 80019c6:	f005 fbf1 	bl	80071ac <HAL_TIM_PWM_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80019d0:	f000 fd7c 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019d4:	4803      	ldr	r0, [pc, #12]	; (80019e4 <MX_TIM3_Init+0xac>)
 80019d6:	f001 f8c9 	bl	8002b6c <HAL_TIM_MspPostInit>

}
 80019da:	bf00      	nop
 80019dc:	3728      	adds	r7, #40	; 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200003f4 	.word	0x200003f4
 80019e8:	40000400 	.word	0x40000400

080019ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	; 0x30
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	2224      	movs	r2, #36	; 0x24
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f008 f898 	bl	8009b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a0a:	4a21      	ldr	r2, [pc, #132]	; (8001a90 <MX_TIM4_Init+0xa4>)
 8001a0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a36:	2301      	movs	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a46:	2301      	movs	r3, #1
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4619      	mov	r1, r3
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a5a:	f005 f8f7 	bl	8006c4c <HAL_TIM_Encoder_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001a64:	f000 fd32 	bl	80024cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a76:	f006 fd11 	bl	800849c <HAL_TIMEx_MasterConfigSynchronization>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001a80:	f000 fd24 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	3730      	adds	r7, #48	; 0x30
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000304 	.word	0x20000304
 8001a90:	40000800 	.word	0x40000800

08001a94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b096      	sub	sp, #88	; 0x58
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
 8001ac2:	615a      	str	r2, [r3, #20]
 8001ac4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2220      	movs	r2, #32
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f008 f82f 	bl	8009b30 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ad2:	4b44      	ldr	r3, [pc, #272]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001ad4:	4a44      	ldr	r2, [pc, #272]	; (8001be8 <MX_TIM8_Init+0x154>)
 8001ad6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ad8:	4b42      	ldr	r3, [pc, #264]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001ade:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001ae0:	2260      	movs	r2, #96	; 0x60
 8001ae2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ae4:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001af2:	4b3c      	ldr	r3, [pc, #240]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001afe:	4839      	ldr	r0, [pc, #228]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001b00:	f004 fc76 	bl	80063f0 <HAL_TIM_Base_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001b0a:	f000 fcdf 	bl	80024cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b12:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4832      	ldr	r0, [pc, #200]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001b1c:	f005 fd1e 	bl	800755c <HAL_TIM_ConfigClockSource>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b26:	f000 fcd1 	bl	80024cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b2a:	482e      	ldr	r0, [pc, #184]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001b2c:	f004 fe16 	bl	800675c <HAL_TIM_PWM_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001b36:	f000 fcc9 	bl	80024cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b46:	4619      	mov	r1, r3
 8001b48:	4826      	ldr	r0, [pc, #152]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001b4a:	f006 fca7 	bl	800849c <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001b54:	f000 fcba 	bl	80024cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b58:	2360      	movs	r3, #96	; 0x60
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b64:	2300      	movs	r3, #0
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	2204      	movs	r2, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4819      	ldr	r0, [pc, #100]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001b7e:	f005 fb15 	bl	80071ac <HAL_TIM_PWM_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001b88:	f000 fca0 	bl	80024cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	2208      	movs	r2, #8
 8001b92:	4619      	mov	r1, r3
 8001b94:	4813      	ldr	r0, [pc, #76]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001b96:	f005 fb09 	bl	80071ac <HAL_TIM_PWM_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001ba0:	f000 fc94 	bl	80024cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001bc8:	f006 fd46 	bl	8008658 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001bd2:	f000 fc7b 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

	//Itt kell megivni a DC_MOTOR_Init() -et
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001bd6:	4803      	ldr	r0, [pc, #12]	; (8001be4 <MX_TIM8_Init+0x150>)
 8001bd8:	f000 ffc8 	bl	8002b6c <HAL_TIM_MspPostInit>

}
 8001bdc:	bf00      	nop
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200002bc 	.word	0x200002bc
 8001be8:	40010400 	.word	0x40010400

08001bec <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf2:	f107 0320 	add.w	r3, r7, #32
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	615a      	str	r2, [r3, #20]
 8001c10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001c14:	4a2c      	ldr	r2, [pc, #176]	; (8001cc8 <MX_TIM12_Init+0xdc>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001c1a:	2213      	movs	r2, #19
 8001c1c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001c26:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001c2a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c32:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001c34:	2280      	movs	r2, #128	; 0x80
 8001c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001c38:	4822      	ldr	r0, [pc, #136]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001c3a:	f004 fbd9 	bl	80063f0 <HAL_TIM_Base_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001c44:	f000 fc42 	bl	80024cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001c4e:	f107 0320 	add.w	r3, r7, #32
 8001c52:	4619      	mov	r1, r3
 8001c54:	481b      	ldr	r0, [pc, #108]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001c56:	f005 fc81 	bl	800755c <HAL_TIM_ConfigClockSource>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001c60:	f000 fc34 	bl	80024cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001c64:	4817      	ldr	r0, [pc, #92]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001c66:	f004 fd79 	bl	800675c <HAL_TIM_PWM_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001c70:	f000 fc2c 	bl	80024cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c74:	2360      	movs	r3, #96	; 0x60
 8001c76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480e      	ldr	r0, [pc, #56]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001c8c:	f005 fa8e 	bl	80071ac <HAL_TIM_PWM_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001c96:	f000 fc19 	bl	80024cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001ca2:	f005 fa83 	bl	80071ac <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001cac:	f000 fc0e 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	HAL_TIM_Base_Start_IT(&htim12);
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001cb2:	f004 fc8d 	bl	80065d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001cb6:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <MX_TIM12_Init+0xd8>)
 8001cb8:	f000 ff58 	bl	8002b6c <HAL_TIM_MspPostInit>

}
 8001cbc:	bf00      	nop
 8001cbe:	3730      	adds	r7, #48	; 0x30
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000664 	.word	0x20000664
 8001cc8:	40001800 	.word	0x40001800

08001ccc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_UART4_Init+0x4c>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <MX_UART4_Init+0x50>)
 8001cd4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_UART4_Init+0x4c>)
 8001cd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cdc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_UART4_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_UART4_Init+0x4c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <MX_UART4_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_UART4_Init+0x4c>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <MX_UART4_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_UART4_Init+0x4c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_UART4_Init+0x4c>)
 8001d04:	f006 fd88 	bl	8008818 <HAL_UART_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001d0e:	f000 fbdd 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000053c 	.word	0x2000053c
 8001d1c:	40004c00 	.word	0x40004c00

08001d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <MX_USART1_UART_Init+0x50>)
 8001d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d46:	2204      	movs	r2, #4
 8001d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d58:	f006 fd5e 	bl	8008818 <HAL_UART_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d62:	f000 fbb3 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200004f8 	.word	0x200004f8
 8001d70:	40011000 	.word	0x40011000

08001d74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_USART2_UART_Init+0x4c>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <MX_USART2_UART_Init+0x50>)
 8001d7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <MX_USART2_UART_Init+0x4c>)
 8001d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <MX_USART2_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_USART2_UART_Init+0x4c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <MX_USART2_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <MX_USART2_UART_Init+0x4c>)
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <MX_USART2_UART_Init+0x4c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_USART2_UART_Init+0x4c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_USART2_UART_Init+0x4c>)
 8001dac:	f006 fd34 	bl	8008818 <HAL_UART_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001db6:	f000 fb89 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000620 	.word	0x20000620
 8001dc4:	40004400 	.word	0x40004400

08001dc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_DMA_Init+0x3c>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <MX_DMA_Init+0x3c>)
 8001dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_DMA_Init+0x3c>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2010      	movs	r0, #16
 8001df0:	f001 fa80 	bl	80032f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001df4:	2010      	movs	r0, #16
 8001df6:	f001 faa9 	bl	800334c <HAL_NVIC_EnableIRQ>

}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800

08001e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
 8001e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b59      	ldr	r3, [pc, #356]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b56      	ldr	r3, [pc, #344]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b52      	ldr	r3, [pc, #328]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a51      	ldr	r2, [pc, #324]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b4f      	ldr	r3, [pc, #316]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b4b      	ldr	r3, [pc, #300]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a4a      	ldr	r2, [pc, #296]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b48      	ldr	r3, [pc, #288]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a43      	ldr	r2, [pc, #268]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a3c      	ldr	r2, [pc, #240]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <MX_GPIO_Init+0x180>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001eaa:	2200      	movs	r2, #0
 8001eac:	213d      	movs	r1, #61	; 0x3d
 8001eae:	4837      	ldr	r0, [pc, #220]	; (8001f8c <MX_GPIO_Init+0x184>)
 8001eb0:	f002 fa7e 	bl	80043b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f641 0102 	movw	r1, #6146	; 0x1802
 8001eba:	4835      	ldr	r0, [pc, #212]	; (8001f90 <MX_GPIO_Init+0x188>)
 8001ebc:	f002 fa78 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f241 0126 	movw	r1, #4134	; 0x1026
 8001ec6:	4833      	ldr	r0, [pc, #204]	; (8001f94 <MX_GPIO_Init+0x18c>)
 8001ec8:	f002 fa72 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ed2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	482a      	ldr	r0, [pc, #168]	; (8001f8c <MX_GPIO_Init+0x184>)
 8001ee4:	f001 ff40 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001ee8:	233d      	movs	r3, #61	; 0x3d
 8001eea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eec:	2301      	movs	r3, #1
 8001eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4619      	mov	r1, r3
 8001efe:	4823      	ldr	r0, [pc, #140]	; (8001f8c <MX_GPIO_Init+0x184>)
 8001f00:	f001 ff32 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001f04:	f641 0302 	movw	r3, #6146	; 0x1802
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481c      	ldr	r0, [pc, #112]	; (8001f90 <MX_GPIO_Init+0x188>)
 8001f1e:	f001 ff23 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f22:	2310      	movs	r3, #16
 8001f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4816      	ldr	r0, [pc, #88]	; (8001f90 <MX_GPIO_Init+0x188>)
 8001f36:	f001 ff17 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 8001f3a:	f241 0326 	movw	r3, #4134	; 0x1026
 8001f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	4810      	ldr	r0, [pc, #64]	; (8001f94 <MX_GPIO_Init+0x18c>)
 8001f54:	f001 ff08 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f58:	2304      	movs	r3, #4
 8001f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480b      	ldr	r0, [pc, #44]	; (8001f98 <MX_GPIO_Init+0x190>)
 8001f6c:	f001 fefc 	bl	8003d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8001f70:	2201      	movs	r2, #1
 8001f72:	2100      	movs	r1, #0
 8001f74:	2028      	movs	r0, #40	; 0x28
 8001f76:	f001 f9bd 	bl	80032f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f7a:	2028      	movs	r0, #40	; 0x28
 8001f7c:	f001 f9e6 	bl	800334c <HAL_NVIC_EnableIRQ>

}
 8001f80:	bf00      	nop
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40020c00 	.word	0x40020c00

08001f9c <Vonalszenzor_Init>:

/* USER CODE BEGIN 4 */
static void Vonalszenzor_Init(void) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);	// PCB2: Von_OE1  0
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	4804      	ldr	r0, [pc, #16]	; (8001fb8 <Vonalszenzor_Init+0x1c>)
 8001fa6:	f002 fa03 	bl	80043b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	// PCB2: Von_OE2  0
 8001faa:	2200      	movs	r2, #0
 8001fac:	2120      	movs	r1, #32
 8001fae:	4803      	ldr	r0, [pc, #12]	; (8001fbc <Vonalszenzor_Init+0x20>)
 8001fb0:	f002 f9fe 	bl	80043b0 <HAL_GPIO_WritePin>
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40020800 	.word	0x40020800

08001fc0 <Vonalszenzor_operal>:

static void Vonalszenzor_operal(uint8_t* teljes_kiolvasott) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	Vonalszenzor_minta_kuldes(leszed);
 8001fc8:	48bd      	ldr	r0, [pc, #756]	; (80022c0 <Vonalszenzor_operal+0x300>)
 8001fca:	f000 fa1d 	bl	8002408 <Vonalszenzor_minta_kuldes>
	uint8_t eredmeny_16bit_temp[2] = {0b1110000, 0b00000000};
 8001fce:	2370      	movs	r3, #112	; 0x70
 8001fd0:	81bb      	strh	r3, [r7, #12]

	Vonalszenzor_minta_kuldes(minta1_adc4e);
 8001fd2:	48bc      	ldr	r0, [pc, #752]	; (80022c4 <Vonalszenzor_operal+0x304>)
 8001fd4:	f000 fa18 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8001fd8:	4bbb      	ldr	r3, [pc, #748]	; (80022c8 <Vonalszenzor_operal+0x308>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	f107 020c 	add.w	r2, r7, #12
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fa38 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[0] = (uint8_t) eredmeny_16bit_temp[0];
 8001fe8:	7b3a      	ldrb	r2, [r7, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8001fee:	4bb7      	ldr	r3, [pc, #732]	; (80022cc <Vonalszenzor_operal+0x30c>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	f107 020c 	add.w	r2, r7, #12
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fa2d 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[4] = (uint8_t) eredmeny_16bit_temp[0];
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	7b3a      	ldrb	r2, [r7, #12]
 8002004:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002006:	48ae      	ldr	r0, [pc, #696]	; (80022c0 <Vonalszenzor_operal+0x300>)
 8002008:	f000 f9fe 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3e);
 800200c:	48b0      	ldr	r0, [pc, #704]	; (80022d0 <Vonalszenzor_operal+0x310>)
 800200e:	f000 f9fb 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002012:	4bad      	ldr	r3, [pc, #692]	; (80022c8 <Vonalszenzor_operal+0x308>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	f107 020c 	add.w	r2, r7, #12
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fa1b 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[8] = (uint8_t) eredmeny_16bit_temp[0];
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3308      	adds	r3, #8
 8002026:	7b3a      	ldrb	r2, [r7, #12]
 8002028:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800202a:	4ba8      	ldr	r3, [pc, #672]	; (80022cc <Vonalszenzor_operal+0x30c>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	f107 020c 	add.w	r2, r7, #12
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fa0f 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[12] = (uint8_t) eredmeny_16bit_temp[0];
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	330c      	adds	r3, #12
 800203e:	7b3a      	ldrb	r2, [r7, #12]
 8002040:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002042:	489f      	ldr	r0, [pc, #636]	; (80022c0 <Vonalszenzor_operal+0x300>)
 8002044:	f000 f9e0 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2e);
 8002048:	48a2      	ldr	r0, [pc, #648]	; (80022d4 <Vonalszenzor_operal+0x314>)
 800204a:	f000 f9dd 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800204e:	4b9e      	ldr	r3, [pc, #632]	; (80022c8 <Vonalszenzor_operal+0x308>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	f107 020c 	add.w	r2, r7, #12
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f9fd 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[16] = (uint8_t) eredmeny_16bit_temp[0];
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3310      	adds	r3, #16
 8002062:	7b3a      	ldrb	r2, [r7, #12]
 8002064:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002066:	4b99      	ldr	r3, [pc, #612]	; (80022cc <Vonalszenzor_operal+0x30c>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	f107 020c 	add.w	r2, r7, #12
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f9f1 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[20] = (uint8_t) eredmeny_16bit_temp[0];
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3314      	adds	r3, #20
 800207a:	7b3a      	ldrb	r2, [r7, #12]
 800207c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800207e:	4890      	ldr	r0, [pc, #576]	; (80022c0 <Vonalszenzor_operal+0x300>)
 8002080:	f000 f9c2 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc1e);
 8002084:	4894      	ldr	r0, [pc, #592]	; (80022d8 <Vonalszenzor_operal+0x318>)
 8002086:	f000 f9bf 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800208a:	4b8f      	ldr	r3, [pc, #572]	; (80022c8 <Vonalszenzor_operal+0x308>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f107 020c 	add.w	r2, r7, #12
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f9df 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[24] = (uint8_t) eredmeny_16bit_temp[0];
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3318      	adds	r3, #24
 800209e:	7b3a      	ldrb	r2, [r7, #12]
 80020a0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80020a2:	4b8a      	ldr	r3, [pc, #552]	; (80022cc <Vonalszenzor_operal+0x30c>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	f107 020c 	add.w	r2, r7, #12
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 f9d3 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[28] = (uint8_t) eredmeny_16bit_temp[0];
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	331c      	adds	r3, #28
 80020b6:	7b3a      	ldrb	r2, [r7, #12]
 80020b8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80020ba:	4881      	ldr	r0, [pc, #516]	; (80022c0 <Vonalszenzor_operal+0x300>)
 80020bc:	f000 f9a4 	bl	8002408 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc4e);
 80020c0:	4886      	ldr	r0, [pc, #536]	; (80022dc <Vonalszenzor_operal+0x31c>)
 80020c2:	f000 f9a1 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80020c6:	4b86      	ldr	r3, [pc, #536]	; (80022e0 <Vonalszenzor_operal+0x320>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	f107 020c 	add.w	r2, r7, #12
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 f9c1 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[1] = (uint8_t) eredmeny_16bit_temp[0];
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3301      	adds	r3, #1
 80020da:	7b3a      	ldrb	r2, [r7, #12]
 80020dc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80020de:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <Vonalszenzor_operal+0x324>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	f107 020c 	add.w	r2, r7, #12
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 f9b5 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[5] = (uint8_t) eredmeny_16bit_temp[0];
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3305      	adds	r3, #5
 80020f2:	7b3a      	ldrb	r2, [r7, #12]
 80020f4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80020f6:	4872      	ldr	r0, [pc, #456]	; (80022c0 <Vonalszenzor_operal+0x300>)
 80020f8:	f000 f986 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3e);
 80020fc:	487a      	ldr	r0, [pc, #488]	; (80022e8 <Vonalszenzor_operal+0x328>)
 80020fe:	f000 f983 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002102:	4b77      	ldr	r3, [pc, #476]	; (80022e0 <Vonalszenzor_operal+0x320>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f107 020c 	add.w	r2, r7, #12
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f9a3 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[9] = (uint8_t) eredmeny_16bit_temp[0];
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3309      	adds	r3, #9
 8002116:	7b3a      	ldrb	r2, [r7, #12]
 8002118:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800211a:	4b72      	ldr	r3, [pc, #456]	; (80022e4 <Vonalszenzor_operal+0x324>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	f107 020c 	add.w	r2, r7, #12
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f997 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[13] = (uint8_t) eredmeny_16bit_temp[0];
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	330d      	adds	r3, #13
 800212e:	7b3a      	ldrb	r2, [r7, #12]
 8002130:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002132:	4863      	ldr	r0, [pc, #396]	; (80022c0 <Vonalszenzor_operal+0x300>)
 8002134:	f000 f968 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2e);
 8002138:	486c      	ldr	r0, [pc, #432]	; (80022ec <Vonalszenzor_operal+0x32c>)
 800213a:	f000 f965 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800213e:	4b68      	ldr	r3, [pc, #416]	; (80022e0 <Vonalszenzor_operal+0x320>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	f107 020c 	add.w	r2, r7, #12
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f985 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[17] = (uint8_t) eredmeny_16bit_temp[0];
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3311      	adds	r3, #17
 8002152:	7b3a      	ldrb	r2, [r7, #12]
 8002154:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002156:	4b63      	ldr	r3, [pc, #396]	; (80022e4 <Vonalszenzor_operal+0x324>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	f107 020c 	add.w	r2, r7, #12
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f000 f979 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[21] = (uint8_t) eredmeny_16bit_temp[0];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3315      	adds	r3, #21
 800216a:	7b3a      	ldrb	r2, [r7, #12]
 800216c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800216e:	4854      	ldr	r0, [pc, #336]	; (80022c0 <Vonalszenzor_operal+0x300>)
 8002170:	f000 f94a 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc1e);
 8002174:	485e      	ldr	r0, [pc, #376]	; (80022f0 <Vonalszenzor_operal+0x330>)
 8002176:	f000 f947 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800217a:	4b59      	ldr	r3, [pc, #356]	; (80022e0 <Vonalszenzor_operal+0x320>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	f107 020c 	add.w	r2, r7, #12
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f000 f967 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[25] = (uint8_t) eredmeny_16bit_temp[0];
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3319      	adds	r3, #25
 800218e:	7b3a      	ldrb	r2, [r7, #12]
 8002190:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002192:	4b54      	ldr	r3, [pc, #336]	; (80022e4 <Vonalszenzor_operal+0x324>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f107 020c 	add.w	r2, r7, #12
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f000 f95b 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[29] = (uint8_t) eredmeny_16bit_temp[0];
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	331d      	adds	r3, #29
 80021a6:	7b3a      	ldrb	r2, [r7, #12]
 80021a8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80021aa:	4845      	ldr	r0, [pc, #276]	; (80022c0 <Vonalszenzor_operal+0x300>)
 80021ac:	f000 f92c 	bl	8002408 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc4e);
 80021b0:	4850      	ldr	r0, [pc, #320]	; (80022f4 <Vonalszenzor_operal+0x334>)
 80021b2:	f000 f929 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80021b6:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <Vonalszenzor_operal+0x338>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	f107 020c 	add.w	r2, r7, #12
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 f949 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[2] = (uint8_t) eredmeny_16bit_temp[0];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3302      	adds	r3, #2
 80021ca:	7b3a      	ldrb	r2, [r7, #12]
 80021cc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80021ce:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <Vonalszenzor_operal+0x33c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	f107 020c 	add.w	r2, r7, #12
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 f93d 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[6] = (uint8_t) eredmeny_16bit_temp[0];
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3306      	adds	r3, #6
 80021e2:	7b3a      	ldrb	r2, [r7, #12]
 80021e4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80021e6:	4836      	ldr	r0, [pc, #216]	; (80022c0 <Vonalszenzor_operal+0x300>)
 80021e8:	f000 f90e 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3e);
 80021ec:	4844      	ldr	r0, [pc, #272]	; (8002300 <Vonalszenzor_operal+0x340>)
 80021ee:	f000 f90b 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <Vonalszenzor_operal+0x338>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	f107 020c 	add.w	r2, r7, #12
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f92b 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[10] = (uint8_t) eredmeny_16bit_temp[0];
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	330a      	adds	r3, #10
 8002206:	7b3a      	ldrb	r2, [r7, #12]
 8002208:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800220a:	4b3c      	ldr	r3, [pc, #240]	; (80022fc <Vonalszenzor_operal+0x33c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	f107 020c 	add.w	r2, r7, #12
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f91f 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[14] = (uint8_t) eredmeny_16bit_temp[0];
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	330e      	adds	r3, #14
 800221e:	7b3a      	ldrb	r2, [r7, #12]
 8002220:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002222:	4827      	ldr	r0, [pc, #156]	; (80022c0 <Vonalszenzor_operal+0x300>)
 8002224:	f000 f8f0 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2e);
 8002228:	4836      	ldr	r0, [pc, #216]	; (8002304 <Vonalszenzor_operal+0x344>)
 800222a:	f000 f8ed 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800222e:	4b32      	ldr	r3, [pc, #200]	; (80022f8 <Vonalszenzor_operal+0x338>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	f107 020c 	add.w	r2, r7, #12
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f000 f90d 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[18] = (uint8_t) eredmeny_16bit_temp[0];
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3312      	adds	r3, #18
 8002242:	7b3a      	ldrb	r2, [r7, #12]
 8002244:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002246:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <Vonalszenzor_operal+0x33c>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	f107 020c 	add.w	r2, r7, #12
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f000 f901 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[22] = (uint8_t) eredmeny_16bit_temp[0];
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3316      	adds	r3, #22
 800225a:	7b3a      	ldrb	r2, [r7, #12]
 800225c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800225e:	4818      	ldr	r0, [pc, #96]	; (80022c0 <Vonalszenzor_operal+0x300>)
 8002260:	f000 f8d2 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc1e);
 8002264:	4828      	ldr	r0, [pc, #160]	; (8002308 <Vonalszenzor_operal+0x348>)
 8002266:	f000 f8cf 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <Vonalszenzor_operal+0x338>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	f107 020c 	add.w	r2, r7, #12
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f8ef 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[26] = (uint8_t) eredmeny_16bit_temp[0];
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	331a      	adds	r3, #26
 800227e:	7b3a      	ldrb	r2, [r7, #12]
 8002280:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002282:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <Vonalszenzor_operal+0x33c>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f107 020c 	add.w	r2, r7, #12
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f8e3 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[30] = (uint8_t) eredmeny_16bit_temp[0];
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	331e      	adds	r3, #30
 8002296:	7b3a      	ldrb	r2, [r7, #12]
 8002298:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800229a:	4809      	ldr	r0, [pc, #36]	; (80022c0 <Vonalszenzor_operal+0x300>)
 800229c:	f000 f8b4 	bl	8002408 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc4e);
 80022a0:	481a      	ldr	r0, [pc, #104]	; (800230c <Vonalszenzor_operal+0x34c>)
 80022a2:	f000 f8b1 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <Vonalszenzor_operal+0x350>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	f107 020c 	add.w	r2, r7, #12
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f8d1 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[3] = (uint8_t) eredmeny_16bit_temp[0];
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3303      	adds	r3, #3
 80022ba:	7b3a      	ldrb	r2, [r7, #12]
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e029      	b.n	8002314 <Vonalszenzor_operal+0x354>
 80022c0:	20000004 	.word	0x20000004
 80022c4:	20000014 	.word	0x20000014
 80022c8:	2000013a 	.word	0x2000013a
 80022cc:	20000095 	.word	0x20000095
 80022d0:	2000001c 	.word	0x2000001c
 80022d4:	20000024 	.word	0x20000024
 80022d8:	2000002c 	.word	0x2000002c
 80022dc:	20000034 	.word	0x20000034
 80022e0:	20000092 	.word	0x20000092
 80022e4:	20000096 	.word	0x20000096
 80022e8:	2000003c 	.word	0x2000003c
 80022ec:	20000044 	.word	0x20000044
 80022f0:	2000004c 	.word	0x2000004c
 80022f4:	20000054 	.word	0x20000054
 80022f8:	20000093 	.word	0x20000093
 80022fc:	20000097 	.word	0x20000097
 8002300:	2000005c 	.word	0x2000005c
 8002304:	20000064 	.word	0x20000064
 8002308:	2000006c 	.word	0x2000006c
 800230c:	20000074 	.word	0x20000074
 8002310:	20000094 	.word	0x20000094
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <Vonalszenzor_operal+0x430>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	f107 020c 	add.w	r2, r7, #12
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f89a 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[7] = (uint8_t) eredmeny_16bit_temp[0];
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3307      	adds	r3, #7
 8002328:	7b3a      	ldrb	r2, [r7, #12]
 800232a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800232c:	4831      	ldr	r0, [pc, #196]	; (80023f4 <Vonalszenzor_operal+0x434>)
 800232e:	f000 f86b 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3e);
 8002332:	4831      	ldr	r0, [pc, #196]	; (80023f8 <Vonalszenzor_operal+0x438>)
 8002334:	f000 f868 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <Vonalszenzor_operal+0x43c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f107 020c 	add.w	r2, r7, #12
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f888 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[11] = (uint8_t) eredmeny_16bit_temp[0];
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	330b      	adds	r3, #11
 800234c:	7b3a      	ldrb	r2, [r7, #12]
 800234e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <Vonalszenzor_operal+0x430>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	f107 020c 	add.w	r2, r7, #12
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f87c 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[15] = (uint8_t) eredmeny_16bit_temp[0];
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	330f      	adds	r3, #15
 8002364:	7b3a      	ldrb	r2, [r7, #12]
 8002366:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002368:	4822      	ldr	r0, [pc, #136]	; (80023f4 <Vonalszenzor_operal+0x434>)
 800236a:	f000 f84d 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2e);
 800236e:	4824      	ldr	r0, [pc, #144]	; (8002400 <Vonalszenzor_operal+0x440>)
 8002370:	f000 f84a 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002374:	4b21      	ldr	r3, [pc, #132]	; (80023fc <Vonalszenzor_operal+0x43c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	f107 020c 	add.w	r2, r7, #12
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f86a 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[19] = (uint8_t) eredmeny_16bit_temp[0];
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3313      	adds	r3, #19
 8002388:	7b3a      	ldrb	r2, [r7, #12]
 800238a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <Vonalszenzor_operal+0x430>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	f107 020c 	add.w	r2, r7, #12
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f85e 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[23] = (uint8_t) eredmeny_16bit_temp[0];
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3317      	adds	r3, #23
 80023a0:	7b3a      	ldrb	r2, [r7, #12]
 80023a2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023a4:	4813      	ldr	r0, [pc, #76]	; (80023f4 <Vonalszenzor_operal+0x434>)
 80023a6:	f000 f82f 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc1e);
 80023aa:	4816      	ldr	r0, [pc, #88]	; (8002404 <Vonalszenzor_operal+0x444>)
 80023ac:	f000 f82c 	bl	8002408 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <Vonalszenzor_operal+0x43c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	f107 020c 	add.w	r2, r7, #12
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f84c 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[27] = (uint8_t) eredmeny_16bit_temp[0];
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	331b      	adds	r3, #27
 80023c4:	7b3a      	ldrb	r2, [r7, #12]
 80023c6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <Vonalszenzor_operal+0x430>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	f107 020c 	add.w	r2, r7, #12
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f840 	bl	8002458 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[31] = (uint8_t) eredmeny_16bit_temp[0];
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	331f      	adds	r3, #31
 80023dc:	7b3a      	ldrb	r2, [r7, #12]
 80023de:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <Vonalszenzor_operal+0x434>)
 80023e2:	f000 f811 	bl	8002408 <Vonalszenzor_minta_kuldes>
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000098 	.word	0x20000098
 80023f4:	20000004 	.word	0x20000004
 80023f8:	2000007c 	.word	0x2000007c
 80023fc:	20000094 	.word	0x20000094
 8002400:	20000084 	.word	0x20000084
 8002404:	2000008c 	.word	0x2000008c

08002408 <Vonalszenzor_minta_kuldes>:

void Vonalszenzor_minta_kuldes(uint8_t* minta) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	// PC4: Von_latch1  0
 8002410:	2200      	movs	r2, #0
 8002412:	2110      	movs	r1, #16
 8002414:	480d      	ldr	r0, [pc, #52]	; (800244c <Vonalszenzor_minta_kuldes+0x44>)
 8002416:	f001 ffcb 	bl	80043b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// PB1: Von_latch2  0
 800241a:	2200      	movs	r2, #0
 800241c:	2102      	movs	r1, #2
 800241e:	480c      	ldr	r0, [pc, #48]	; (8002450 <Vonalszenzor_minta_kuldes+0x48>)
 8002420:	f001 ffc6 	bl	80043b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, minta, 6, 100);				// minta kikuldes
 8002424:	2364      	movs	r3, #100	; 0x64
 8002426:	2206      	movs	r2, #6
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	480a      	ldr	r0, [pc, #40]	; (8002454 <Vonalszenzor_minta_kuldes+0x4c>)
 800242c:	f003 faa4 	bl	8005978 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		// PC4: Von_latch1  1
 8002430:	2201      	movs	r2, #1
 8002432:	2110      	movs	r1, #16
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <Vonalszenzor_minta_kuldes+0x44>)
 8002436:	f001 ffbb 	bl	80043b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// PB1: Von_latch2  1
 800243a:	2201      	movs	r2, #1
 800243c:	2102      	movs	r1, #2
 800243e:	4804      	ldr	r0, [pc, #16]	; (8002450 <Vonalszenzor_minta_kuldes+0x48>)
 8002440:	f001 ffb6 	bl	80043b0 <HAL_GPIO_WritePin>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40020800 	.word	0x40020800
 8002450:	40020400 	.word	0x40020400
 8002454:	20000264 	.word	0x20000264

08002458 <Vonalszenzor_meres_kiolvasas>:

void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[2]= {chanel,0};
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	733b      	strb	r3, [r7, #12]
 8002468:	2300      	movs	r3, #0
 800246a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, temp1, 2, 100);
 800246c:	f107 010c 	add.w	r1, r7, #12
 8002470:	2364      	movs	r3, #100	; 0x64
 8002472:	2202      	movs	r2, #2
 8002474:	4806      	ldr	r0, [pc, #24]	; (8002490 <Vonalszenzor_meres_kiolvasas+0x38>)
 8002476:	f003 fa7f 	bl	8005978 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, eredmeny, 2, 100);
 800247a:	2364      	movs	r3, #100	; 0x64
 800247c:	2202      	movs	r2, #2
 800247e:	6839      	ldr	r1, [r7, #0]
 8002480:	4803      	ldr	r0, [pc, #12]	; (8002490 <Vonalszenzor_meres_kiolvasas+0x38>)
 8002482:	f003 fbc5 	bl	8005c10 <HAL_SPI_Receive>
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000580 	.word	0x20000580

08002494 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a4:	d109      	bne.n	80024ba <HAL_GPIO_EXTI_Callback+0x26>
		btnEnable = !btnEnable;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_GPIO_EXTI_Callback+0x34>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	bf0c      	ite	eq
 80024ae:	2301      	moveq	r3, #1
 80024b0:	2300      	movne	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <HAL_GPIO_EXTI_Callback+0x34>)
 80024b8:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	//LED felvilagitasa
	}
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000138 	.word	0x20000138

080024cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024d0:	b672      	cpsid	i
}
 80024d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80024d4:	e7fe      	b.n	80024d4 <Error_Handler+0x8>

080024d6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_MspInit+0x4c>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <HAL_MspInit+0x4c>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_MspInit+0x4c>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_MspInit+0x4c>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_MspInit+0x4c>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_MspInit+0x4c>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800252a:	2007      	movs	r0, #7
 800252c:	f000 fec2 	bl	80032b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40023800 	.word	0x40023800

0800253c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b090      	sub	sp, #64	; 0x40
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a6b      	ldr	r2, [pc, #428]	; (8002708 <HAL_I2C_MspInit+0x1cc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d12d      	bne.n	80025ba <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
 8002562:	4b6a      	ldr	r3, [pc, #424]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a69      	ldr	r2, [pc, #420]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b67      	ldr	r3, [pc, #412]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800257a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002580:	2312      	movs	r3, #18
 8002582:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002588:	2303      	movs	r3, #3
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800258c:	2304      	movs	r3, #4
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002594:	4619      	mov	r1, r3
 8002596:	485e      	ldr	r0, [pc, #376]	; (8002710 <HAL_I2C_MspInit+0x1d4>)
 8002598:	f001 fbe6 	bl	8003d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
 80025a0:	4b5a      	ldr	r3, [pc, #360]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	4a59      	ldr	r2, [pc, #356]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 80025a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025aa:	6413      	str	r3, [r2, #64]	; 0x40
 80025ac:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80025b8:	e0a2      	b.n	8002700 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a55      	ldr	r2, [pc, #340]	; (8002714 <HAL_I2C_MspInit+0x1d8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d14c      	bne.n	800265e <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	4a4f      	ldr	r2, [pc, #316]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	6313      	str	r3, [r2, #48]	; 0x30
 80025d4:	4b4d      	ldr	r3, [pc, #308]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	4b49      	ldr	r3, [pc, #292]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	4a48      	ldr	r2, [pc, #288]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6313      	str	r3, [r2, #48]	; 0x30
 80025f0:	4b46      	ldr	r3, [pc, #280]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002602:	2312      	movs	r3, #18
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800260e:	2304      	movs	r3, #4
 8002610:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002616:	4619      	mov	r1, r3
 8002618:	483d      	ldr	r0, [pc, #244]	; (8002710 <HAL_I2C_MspInit+0x1d4>)
 800261a:	f001 fba5 	bl	8003d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800261e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002624:	2312      	movs	r3, #18
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002630:	2304      	movs	r3, #4
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002638:	4619      	mov	r1, r3
 800263a:	4837      	ldr	r0, [pc, #220]	; (8002718 <HAL_I2C_MspInit+0x1dc>)
 800263c:	f001 fb94 	bl	8003d68 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	4a30      	ldr	r2, [pc, #192]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 800264a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800264e:	6413      	str	r3, [r2, #64]	; 0x40
 8002650:	4b2e      	ldr	r3, [pc, #184]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	69bb      	ldr	r3, [r7, #24]
}
 800265c:	e050      	b.n	8002700 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2e      	ldr	r2, [pc, #184]	; (800271c <HAL_I2C_MspInit+0x1e0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d14b      	bne.n	8002700 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	4a26      	ldr	r2, [pc, #152]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	6313      	str	r3, [r2, #48]	; 0x30
 8002678:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4a1f      	ldr	r2, [pc, #124]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6313      	str	r3, [r2, #48]	; 0x30
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a6:	2312      	movs	r3, #18
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026b2:	2304      	movs	r3, #4
 80026b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ba:	4619      	mov	r1, r3
 80026bc:	4816      	ldr	r0, [pc, #88]	; (8002718 <HAL_I2C_MspInit+0x1dc>)
 80026be:	f001 fb53 	bl	8003d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c8:	2312      	movs	r3, #18
 80026ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026d4:	2304      	movs	r3, #4
 80026d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026dc:	4619      	mov	r1, r3
 80026de:	4810      	ldr	r0, [pc, #64]	; (8002720 <HAL_I2C_MspInit+0x1e4>)
 80026e0:	f001 fb42 	bl	8003d68 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	4a07      	ldr	r2, [pc, #28]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 80026ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026f2:	6413      	str	r3, [r2, #64]	; 0x40
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_I2C_MspInit+0x1d0>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	bf00      	nop
 8002702:	3740      	adds	r7, #64	; 0x40
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40005400 	.word	0x40005400
 800270c:	40023800 	.word	0x40023800
 8002710:	40020400 	.word	0x40020400
 8002714:	40005800 	.word	0x40005800
 8002718:	40020800 	.word	0x40020800
 800271c:	40005c00 	.word	0x40005c00
 8002720:	40020000 	.word	0x40020000

08002724 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b090      	sub	sp, #64	; 0x40
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a98      	ldr	r2, [pc, #608]	; (80029a4 <HAL_SPI_MspInit+0x280>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d12c      	bne.n	80027a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
 800274a:	4b97      	ldr	r3, [pc, #604]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4a96      	ldr	r2, [pc, #600]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 8002750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b94      	ldr	r3, [pc, #592]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
 8002766:	4b90      	ldr	r3, [pc, #576]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a8f      	ldr	r2, [pc, #572]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b8d      	ldr	r3, [pc, #564]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800277e:	23e0      	movs	r3, #224	; 0xe0
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800278e:	2305      	movs	r3, #5
 8002790:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002796:	4619      	mov	r1, r3
 8002798:	4884      	ldr	r0, [pc, #528]	; (80029ac <HAL_SPI_MspInit+0x288>)
 800279a:	f001 fae5 	bl	8003d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800279e:	e0fd      	b.n	800299c <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a82      	ldr	r2, [pc, #520]	; (80029b0 <HAL_SPI_MspInit+0x28c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d14b      	bne.n	8002842 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	623b      	str	r3, [r7, #32]
 80027ae:	4b7e      	ldr	r3, [pc, #504]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a7d      	ldr	r2, [pc, #500]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 80027b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b7b      	ldr	r3, [pc, #492]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c2:	623b      	str	r3, [r7, #32]
 80027c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	4b77      	ldr	r3, [pc, #476]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a76      	ldr	r2, [pc, #472]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b74      	ldr	r3, [pc, #464]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	4b70      	ldr	r3, [pc, #448]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a6f      	ldr	r2, [pc, #444]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b6d      	ldr	r3, [pc, #436]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	61bb      	str	r3, [r7, #24]
 80027fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027fe:	2302      	movs	r3, #2
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800280e:	2307      	movs	r3, #7
 8002810:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002816:	4619      	mov	r1, r3
 8002818:	4866      	ldr	r0, [pc, #408]	; (80029b4 <HAL_SPI_MspInit+0x290>)
 800281a:	f001 faa5 	bl	8003d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800281e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002830:	2305      	movs	r3, #5
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002838:	4619      	mov	r1, r3
 800283a:	485f      	ldr	r0, [pc, #380]	; (80029b8 <HAL_SPI_MspInit+0x294>)
 800283c:	f001 fa94 	bl	8003d68 <HAL_GPIO_Init>
}
 8002840:	e0ac      	b.n	800299c <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI3)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a5d      	ldr	r2, [pc, #372]	; (80029bc <HAL_SPI_MspInit+0x298>)
 8002848:	4293      	cmp	r3, r2
 800284a:	f040 80a7 	bne.w	800299c <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	4b55      	ldr	r3, [pc, #340]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a54      	ldr	r2, [pc, #336]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 8002858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b52      	ldr	r3, [pc, #328]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	4b4e      	ldr	r3, [pc, #312]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a4d      	ldr	r2, [pc, #308]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b4b      	ldr	r3, [pc, #300]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a46      	ldr	r2, [pc, #280]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b44      	ldr	r3, [pc, #272]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a3f      	ldr	r2, [pc, #252]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <HAL_SPI_MspInit+0x284>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028be:	2301      	movs	r3, #1
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ca:	2303      	movs	r3, #3
 80028cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80028ce:	2307      	movs	r3, #7
 80028d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d6:	4619      	mov	r1, r3
 80028d8:	4837      	ldr	r0, [pc, #220]	; (80029b8 <HAL_SPI_MspInit+0x294>)
 80028da:	f001 fa45 	bl	8003d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028f0:	2306      	movs	r3, #6
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f8:	4619      	mov	r1, r3
 80028fa:	482c      	ldr	r0, [pc, #176]	; (80029ac <HAL_SPI_MspInit+0x288>)
 80028fc:	f001 fa34 	bl	8003d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002912:	2306      	movs	r3, #6
 8002914:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291a:	4619      	mov	r1, r3
 800291c:	4825      	ldr	r0, [pc, #148]	; (80029b4 <HAL_SPI_MspInit+0x290>)
 800291e:	f001 fa23 	bl	8003d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002922:	2310      	movs	r3, #16
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002932:	2306      	movs	r3, #6
 8002934:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800293a:	4619      	mov	r1, r3
 800293c:	481e      	ldr	r0, [pc, #120]	; (80029b8 <HAL_SPI_MspInit+0x294>)
 800293e:	f001 fa13 	bl	8003d68 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002942:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 8002944:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <HAL_SPI_MspInit+0x2a0>)
 8002946:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 800294a:	2200      	movs	r2, #0
 800294c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 8002950:	2240      	movs	r2, #64	; 0x40
 8002952:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800295a:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 800295c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002960:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 8002964:	2200      	movs	r2, #0
 8002966:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 8002970:	2200      	movs	r2, #0
 8002972:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 8002976:	2200      	movs	r2, #0
 8002978:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 800297c:	2200      	movs	r2, #0
 800297e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002980:	480f      	ldr	r0, [pc, #60]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 8002982:	f000 fd07 	bl	8003394 <HAL_DMA_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 800298c:	f7ff fd9e 	bl	80024cc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 8002994:	649a      	str	r2, [r3, #72]	; 0x48
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_SPI_MspInit+0x29c>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800299c:	bf00      	nop
 800299e:	3740      	adds	r7, #64	; 0x40
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40013000 	.word	0x40013000
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40003800 	.word	0x40003800
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020400 	.word	0x40020400
 80029bc:	40003c00 	.word	0x40003c00
 80029c0:	20000494 	.word	0x20000494
 80029c4:	40026088 	.word	0x40026088

080029c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d8:	d116      	bne.n	8002a08 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <HAL_TIM_Base_MspInit+0xb8>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_TIM_Base_MspInit+0xb8>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_TIM_Base_MspInit+0xb8>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	201c      	movs	r0, #28
 80029fc:	f000 fc7a 	bl	80032f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a00:	201c      	movs	r0, #28
 8002a02:	f000 fca3 	bl	800334c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002a06:	e036      	b.n	8002a76 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <HAL_TIM_Base_MspInit+0xbc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d116      	bne.n	8002a40 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_TIM_Base_MspInit+0xb8>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_TIM_Base_MspInit+0xb8>)
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_TIM_Base_MspInit+0xb8>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8002a2e:	2201      	movs	r2, #1
 8002a30:	2100      	movs	r1, #0
 8002a32:	202b      	movs	r0, #43	; 0x2b
 8002a34:	f000 fc5e 	bl	80032f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002a38:	202b      	movs	r0, #43	; 0x2b
 8002a3a:	f000 fc87 	bl	800334c <HAL_NVIC_EnableIRQ>
}
 8002a3e:	e01a      	b.n	8002a76 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM12)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <HAL_TIM_Base_MspInit+0xc0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d115      	bne.n	8002a76 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_TIM_Base_MspInit+0xb8>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <HAL_TIM_Base_MspInit+0xb8>)
 8002a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_TIM_Base_MspInit+0xb8>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8002a66:	2201      	movs	r2, #1
 8002a68:	2100      	movs	r1, #0
 8002a6a:	202b      	movs	r0, #43	; 0x2b
 8002a6c:	f000 fc42 	bl	80032f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002a70:	202b      	movs	r0, #43	; 0x2b
 8002a72:	f000 fc6b 	bl	800334c <HAL_NVIC_EnableIRQ>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40010400 	.word	0x40010400
 8002a88:	40001800 	.word	0x40001800

08002a8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0e      	ldr	r2, [pc, #56]	; (8002ad4 <HAL_TIM_PWM_MspInit+0x48>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d115      	bne.n	8002aca <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <HAL_TIM_PWM_MspInit+0x4c>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <HAL_TIM_PWM_MspInit+0x4c>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	6413      	str	r3, [r2, #64]	; 0x40
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_TIM_PWM_MspInit+0x4c>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2100      	movs	r1, #0
 8002abe:	201d      	movs	r0, #29
 8002ac0:	f000 fc18 	bl	80032f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ac4:	201d      	movs	r0, #29
 8002ac6:	f000 fc41 	bl	800334c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	40023800 	.word	0x40023800

08002adc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_TIM_Encoder_MspInit+0x84>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d12b      	bne.n	8002b56 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b08:	f043 0304 	orr.w	r3, r3, #4
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b36:	23c0      	movs	r3, #192	; 0xc0
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b46:	2302      	movs	r3, #2
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4805      	ldr	r0, [pc, #20]	; (8002b68 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b52:	f001 f909 	bl	8003d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b56:	bf00      	nop
 8002b58:	3728      	adds	r7, #40	; 0x28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020400 	.word	0x40020400

08002b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a37      	ldr	r2, [pc, #220]	; (8002c68 <HAL_TIM_MspPostInit+0xfc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d11e      	bne.n	8002bcc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <HAL_TIM_MspPostInit+0x100>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a35      	ldr	r2, [pc, #212]	; (8002c6c <HAL_TIM_MspPostInit+0x100>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <HAL_TIM_MspPostInit+0x100>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002baa:	2340      	movs	r3, #64	; 0x40
 8002bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	482a      	ldr	r0, [pc, #168]	; (8002c70 <HAL_TIM_MspPostInit+0x104>)
 8002bc6:	f001 f8cf 	bl	8003d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002bca:	e048      	b.n	8002c5e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a28      	ldr	r2, [pc, #160]	; (8002c74 <HAL_TIM_MspPostInit+0x108>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d11f      	bne.n	8002c16 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_TIM_MspPostInit+0x100>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a23      	ldr	r2, [pc, #140]	; (8002c6c <HAL_TIM_MspPostInit+0x100>)
 8002be0:	f043 0304 	orr.w	r3, r3, #4
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <HAL_TIM_MspPostInit+0x100>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002bf2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c04:	2303      	movs	r3, #3
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4818      	ldr	r0, [pc, #96]	; (8002c70 <HAL_TIM_MspPostInit+0x104>)
 8002c10:	f001 f8aa 	bl	8003d68 <HAL_GPIO_Init>
}
 8002c14:	e023      	b.n	8002c5e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <HAL_TIM_MspPostInit+0x10c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d11e      	bne.n	8002c5e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <HAL_TIM_MspPostInit+0x100>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	4a10      	ldr	r2, [pc, #64]	; (8002c6c <HAL_TIM_MspPostInit+0x100>)
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <HAL_TIM_MspPostInit+0x100>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002c3c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002c4e:	2309      	movs	r3, #9
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c52:	f107 0314 	add.w	r3, r7, #20
 8002c56:	4619      	mov	r1, r3
 8002c58:	4808      	ldr	r0, [pc, #32]	; (8002c7c <HAL_TIM_MspPostInit+0x110>)
 8002c5a:	f001 f885 	bl	8003d68 <HAL_GPIO_Init>
}
 8002c5e:	bf00      	nop
 8002c60:	3728      	adds	r7, #40	; 0x28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40020800 	.word	0x40020800
 8002c74:	40010400 	.word	0x40010400
 8002c78:	40001800 	.word	0x40001800
 8002c7c:	40020400 	.word	0x40020400

08002c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08e      	sub	sp, #56	; 0x38
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a5f      	ldr	r2, [pc, #380]	; (8002e1c <HAL_UART_MspInit+0x19c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d153      	bne.n	8002d4a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	623b      	str	r3, [r7, #32]
 8002ca6:	4b5e      	ldr	r3, [pc, #376]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a5d      	ldr	r2, [pc, #372]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a56      	ldr	r2, [pc, #344]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b54      	ldr	r3, [pc, #336]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	4b50      	ldr	r3, [pc, #320]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a4f      	ldr	r2, [pc, #316]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002ce4:	f043 0304 	orr.w	r3, r3, #4
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b4d      	ldr	r3, [pc, #308]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d02:	2303      	movs	r3, #3
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d06:	2308      	movs	r3, #8
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4844      	ldr	r0, [pc, #272]	; (8002e24 <HAL_UART_MspInit+0x1a4>)
 8002d12:	f001 f829 	bl	8003d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d20:	2301      	movs	r3, #1
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d24:	2303      	movs	r3, #3
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d28:	2308      	movs	r3, #8
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d30:	4619      	mov	r1, r3
 8002d32:	483d      	ldr	r0, [pc, #244]	; (8002e28 <HAL_UART_MspInit+0x1a8>)
 8002d34:	f001 f818 	bl	8003d68 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	2034      	movs	r0, #52	; 0x34
 8002d3e:	f000 fad9 	bl	80032f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d42:	2034      	movs	r0, #52	; 0x34
 8002d44:	f000 fb02 	bl	800334c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d48:	e063      	b.n	8002e12 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a37      	ldr	r2, [pc, #220]	; (8002e2c <HAL_UART_MspInit+0x1ac>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d12d      	bne.n	8002db0 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002d5e:	f043 0310 	orr.w	r3, r3, #16
 8002d62:	6453      	str	r3, [r2, #68]	; 0x44
 8002d64:	4b2e      	ldr	r3, [pc, #184]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d8c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d9e:	2307      	movs	r3, #7
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da6:	4619      	mov	r1, r3
 8002da8:	481e      	ldr	r0, [pc, #120]	; (8002e24 <HAL_UART_MspInit+0x1a4>)
 8002daa:	f000 ffdd 	bl	8003d68 <HAL_GPIO_Init>
}
 8002dae:	e030      	b.n	8002e12 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1e      	ldr	r2, [pc, #120]	; (8002e30 <HAL_UART_MspInit+0x1b0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d12b      	bne.n	8002e12 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a10      	ldr	r2, [pc, #64]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002df2:	230c      	movs	r3, #12
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e02:	2307      	movs	r3, #7
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4805      	ldr	r0, [pc, #20]	; (8002e24 <HAL_UART_MspInit+0x1a4>)
 8002e0e:	f000 ffab 	bl	8003d68 <HAL_GPIO_Init>
}
 8002e12:	bf00      	nop
 8002e14:	3738      	adds	r7, #56	; 0x38
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40004c00 	.word	0x40004c00
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40020000 	.word	0x40020000
 8002e28:	40020800 	.word	0x40020800
 8002e2c:	40011000 	.word	0x40011000
 8002e30:	40004400 	.word	0x40004400

08002e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <NMI_Handler+0x4>

08002e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <HardFault_Handler+0x4>

08002e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <MemManage_Handler+0x4>

08002e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e4a:	e7fe      	b.n	8002e4a <BusFault_Handler+0x4>

08002e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <UsageFault_Handler+0x4>

08002e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e80:	f000 f904 	bl	800308c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <DMA1_Stream5_IRQHandler+0x10>)
 8002e8e:	f000 fd2f 	bl	80038f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000494 	.word	0x20000494

08002e9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <TIM2_IRQHandler+0x10>)
 8002ea2:	f004 f87b 	bl	8006f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200005d8 	.word	0x200005d8

08002eb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <TIM3_IRQHandler+0x10>)
 8002eb6:	f004 f871 	bl	8006f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200003f4 	.word	0x200003f4

08002ec4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ec8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ecc:	f001 faa2 	bl	8004414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002ed8:	4803      	ldr	r0, [pc, #12]	; (8002ee8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002eda:	f004 f85f 	bl	8006f9c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002ede:	4803      	ldr	r0, [pc, #12]	; (8002eec <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002ee0:	f004 f85c 	bl	8006f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200002bc 	.word	0x200002bc
 8002eec:	20000664 	.word	0x20000664

08002ef0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <UART4_IRQHandler+0x10>)
 8002ef6:	f005 fd99 	bl	8008a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	2000053c 	.word	0x2000053c

08002f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f0c:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <_sbrk+0x5c>)
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <_sbrk+0x60>)
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <_sbrk+0x64>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <_sbrk+0x64>)
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <_sbrk+0x68>)
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <_sbrk+0x64>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d207      	bcs.n	8002f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f34:	f006 fdc4 	bl	8009ac0 <__errno>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f42:	e009      	b.n	8002f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <_sbrk+0x64>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <_sbrk+0x64>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <_sbrk+0x64>)
 8002f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20020000 	.word	0x20020000
 8002f64:	00000400 	.word	0x00000400
 8002f68:	200001f0 	.word	0x200001f0
 8002f6c:	200006c0 	.word	0x200006c0

08002f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <SystemInit+0x20>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <SystemInit+0x20>)
 8002f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f9a:	490e      	ldr	r1, [pc, #56]	; (8002fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fa0:	e002      	b.n	8002fa8 <LoopCopyDataInit>

08002fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fa6:	3304      	adds	r3, #4

08002fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fac:	d3f9      	bcc.n	8002fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fae:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fb0:	4c0b      	ldr	r4, [pc, #44]	; (8002fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb4:	e001      	b.n	8002fba <LoopFillZerobss>

08002fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb8:	3204      	adds	r2, #4

08002fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fbc:	d3fb      	bcc.n	8002fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fbe:	f7ff ffd7 	bl	8002f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fc2:	f006 fd83 	bl	8009acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fc6:	f7fe f9b3 	bl	8001330 <main>
  bx  lr    
 8002fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fd4:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8002fd8:	0800a6d4 	.word	0x0800a6d4
  ldr r2, =_sbss
 8002fdc:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002fe0:	200006c0 	.word	0x200006c0

08002fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fe4:	e7fe      	b.n	8002fe4 <ADC_IRQHandler>
	...

08002fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fec:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_Init+0x40>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <HAL_Init+0x40>)
 8002ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_Init+0x40>)
 8002ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_Init+0x40>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a07      	ldr	r2, [pc, #28]	; (8003028 <HAL_Init+0x40>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003010:	2003      	movs	r0, #3
 8003012:	f000 f94f 	bl	80032b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003016:	2000      	movs	r0, #0
 8003018:	f000 f808 	bl	800302c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800301c:	f7ff fa66 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023c00 	.word	0x40023c00

0800302c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_InitTick+0x54>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_InitTick+0x58>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003042:	fbb3 f3f1 	udiv	r3, r3, r1
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f996 	bl	800337c <HAL_SYSTICK_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e00e      	b.n	8003078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b0f      	cmp	r3, #15
 800305e:	d80a      	bhi.n	8003076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003060:	2200      	movs	r2, #0
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	f000 f944 	bl	80032f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800306c:	4a06      	ldr	r2, [pc, #24]	; (8003088 <HAL_InitTick+0x5c>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	200000a4 	.word	0x200000a4
 8003084:	200000ac 	.word	0x200000ac
 8003088:	200000a8 	.word	0x200000a8

0800308c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_IncTick+0x20>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_IncTick+0x24>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4413      	add	r3, r2
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <HAL_IncTick+0x24>)
 800309e:	6013      	str	r3, [r2, #0]
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	200000ac 	.word	0x200000ac
 80030b0:	200006ac 	.word	0x200006ac

080030b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return uwTick;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <HAL_GetTick+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	200006ac 	.word	0x200006ac

080030cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d4:	f7ff ffee 	bl	80030b4 <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d005      	beq.n	80030f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_Delay+0x44>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030f2:	bf00      	nop
 80030f4:	f7ff ffde 	bl	80030b4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	429a      	cmp	r2, r3
 8003102:	d8f7      	bhi.n	80030f4 <HAL_Delay+0x28>
  {
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200000ac 	.word	0x200000ac

08003114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003130:	4013      	ands	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800313c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003146:	4a04      	ldr	r2, [pc, #16]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	60d3      	str	r3, [r2, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <__NVIC_GetPriorityGrouping+0x18>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0307 	and.w	r3, r3, #7
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db0b      	blt.n	80031a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4907      	ldr	r1, [pc, #28]	; (80031b0 <__NVIC_EnableIRQ+0x38>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2001      	movs	r0, #1
 800319a:	fa00 f202 	lsl.w	r2, r0, r2
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
         );
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3b01      	subs	r3, #1
 800327c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003280:	d301      	bcc.n	8003286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003282:	2301      	movs	r3, #1
 8003284:	e00f      	b.n	80032a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <SysTick_Config+0x40>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328e:	210f      	movs	r1, #15
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	f7ff ff8e 	bl	80031b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <SysTick_Config+0x40>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <SysTick_Config+0x40>)
 80032a0:	2207      	movs	r2, #7
 80032a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	e000e010 	.word	0xe000e010

080032b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b07      	cmp	r3, #7
 80032c0:	d00f      	beq.n	80032e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d00c      	beq.n	80032e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d009      	beq.n	80032e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d006      	beq.n	80032e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d003      	beq.n	80032e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032da:	2192      	movs	r1, #146	; 0x92
 80032dc:	4804      	ldr	r0, [pc, #16]	; (80032f0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80032de:	f7ff f8fa 	bl	80024d6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff16 	bl	8003114 <__NVIC_SetPriorityGrouping>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	0800a3e4 	.word	0x0800a3e4

080032f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b0f      	cmp	r3, #15
 800330a:	d903      	bls.n	8003314 <HAL_NVIC_SetPriority+0x20>
 800330c:	21aa      	movs	r1, #170	; 0xaa
 800330e:	480e      	ldr	r0, [pc, #56]	; (8003348 <HAL_NVIC_SetPriority+0x54>)
 8003310:	f7ff f8e1 	bl	80024d6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b0f      	cmp	r3, #15
 8003318:	d903      	bls.n	8003322 <HAL_NVIC_SetPriority+0x2e>
 800331a:	21ab      	movs	r1, #171	; 0xab
 800331c:	480a      	ldr	r0, [pc, #40]	; (8003348 <HAL_NVIC_SetPriority+0x54>)
 800331e:	f7ff f8da 	bl	80024d6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003322:	f7ff ff1b 	bl	800315c <__NVIC_GetPriorityGrouping>
 8003326:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	6978      	ldr	r0, [r7, #20]
 800332e:	f7ff ff6b 	bl	8003208 <NVIC_EncodePriority>
 8003332:	4602      	mov	r2, r0
 8003334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff3a 	bl	80031b4 <__NVIC_SetPriority>
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	0800a3e4 	.word	0x0800a3e4

0800334c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	da03      	bge.n	8003366 <HAL_NVIC_EnableIRQ+0x1a>
 800335e:	21be      	movs	r1, #190	; 0xbe
 8003360:	4805      	ldr	r0, [pc, #20]	; (8003378 <HAL_NVIC_EnableIRQ+0x2c>)
 8003362:	f7ff f8b8 	bl	80024d6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ff04 	bl	8003178 <__NVIC_EnableIRQ>
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	0800a3e4 	.word	0x0800a3e4

0800337c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff73 	bl	8003270 <SysTick_Config>
 800338a:	4603      	mov	r3, r0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7ff fe88 	bl	80030b4 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e204      	b.n	80037ba <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a97      	ldr	r2, [pc, #604]	; (8003614 <HAL_DMA_Init+0x280>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d04e      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a96      	ldr	r2, [pc, #600]	; (8003618 <HAL_DMA_Init+0x284>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d049      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a94      	ldr	r2, [pc, #592]	; (800361c <HAL_DMA_Init+0x288>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d044      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a93      	ldr	r2, [pc, #588]	; (8003620 <HAL_DMA_Init+0x28c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d03f      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a91      	ldr	r2, [pc, #580]	; (8003624 <HAL_DMA_Init+0x290>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d03a      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a90      	ldr	r2, [pc, #576]	; (8003628 <HAL_DMA_Init+0x294>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d035      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a8e      	ldr	r2, [pc, #568]	; (800362c <HAL_DMA_Init+0x298>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d030      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a8d      	ldr	r2, [pc, #564]	; (8003630 <HAL_DMA_Init+0x29c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d02b      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a8b      	ldr	r2, [pc, #556]	; (8003634 <HAL_DMA_Init+0x2a0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d026      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a8a      	ldr	r2, [pc, #552]	; (8003638 <HAL_DMA_Init+0x2a4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d021      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a88      	ldr	r2, [pc, #544]	; (800363c <HAL_DMA_Init+0x2a8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01c      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a87      	ldr	r2, [pc, #540]	; (8003640 <HAL_DMA_Init+0x2ac>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d017      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a85      	ldr	r2, [pc, #532]	; (8003644 <HAL_DMA_Init+0x2b0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d012      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a84      	ldr	r2, [pc, #528]	; (8003648 <HAL_DMA_Init+0x2b4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00d      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a82      	ldr	r2, [pc, #520]	; (800364c <HAL_DMA_Init+0x2b8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d008      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a81      	ldr	r2, [pc, #516]	; (8003650 <HAL_DMA_Init+0x2bc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d003      	beq.n	8003458 <HAL_DMA_Init+0xc4>
 8003450:	21b8      	movs	r1, #184	; 0xb8
 8003452:	4880      	ldr	r0, [pc, #512]	; (8003654 <HAL_DMA_Init+0x2c0>)
 8003454:	f7ff f83f 	bl	80024d6 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d026      	beq.n	80034ae <HAL_DMA_Init+0x11a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003468:	d021      	beq.n	80034ae <HAL_DMA_Init+0x11a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003472:	d01c      	beq.n	80034ae <HAL_DMA_Init+0x11a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800347c:	d017      	beq.n	80034ae <HAL_DMA_Init+0x11a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003486:	d012      	beq.n	80034ae <HAL_DMA_Init+0x11a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003490:	d00d      	beq.n	80034ae <HAL_DMA_Init+0x11a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800349a:	d008      	beq.n	80034ae <HAL_DMA_Init+0x11a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80034a4:	d003      	beq.n	80034ae <HAL_DMA_Init+0x11a>
 80034a6:	21b9      	movs	r1, #185	; 0xb9
 80034a8:	486a      	ldr	r0, [pc, #424]	; (8003654 <HAL_DMA_Init+0x2c0>)
 80034aa:	f7ff f814 	bl	80024d6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_DMA_Init+0x13a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d007      	beq.n	80034ce <HAL_DMA_Init+0x13a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b80      	cmp	r3, #128	; 0x80
 80034c4:	d003      	beq.n	80034ce <HAL_DMA_Init+0x13a>
 80034c6:	21ba      	movs	r1, #186	; 0xba
 80034c8:	4862      	ldr	r0, [pc, #392]	; (8003654 <HAL_DMA_Init+0x2c0>)
 80034ca:	f7ff f804 	bl	80024d6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d6:	d007      	beq.n	80034e8 <HAL_DMA_Init+0x154>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_DMA_Init+0x154>
 80034e0:	21bb      	movs	r1, #187	; 0xbb
 80034e2:	485c      	ldr	r0, [pc, #368]	; (8003654 <HAL_DMA_Init+0x2c0>)
 80034e4:	f7fe fff7 	bl	80024d6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f0:	d007      	beq.n	8003502 <HAL_DMA_Init+0x16e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_DMA_Init+0x16e>
 80034fa:	21bc      	movs	r1, #188	; 0xbc
 80034fc:	4855      	ldr	r0, [pc, #340]	; (8003654 <HAL_DMA_Init+0x2c0>)
 80034fe:	f7fe ffea 	bl	80024d6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00d      	beq.n	8003526 <HAL_DMA_Init+0x192>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003512:	d008      	beq.n	8003526 <HAL_DMA_Init+0x192>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351c:	d003      	beq.n	8003526 <HAL_DMA_Init+0x192>
 800351e:	21bd      	movs	r1, #189	; 0xbd
 8003520:	484c      	ldr	r0, [pc, #304]	; (8003654 <HAL_DMA_Init+0x2c0>)
 8003522:	f7fe ffd8 	bl	80024d6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00d      	beq.n	800354a <HAL_DMA_Init+0x1b6>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003536:	d008      	beq.n	800354a <HAL_DMA_Init+0x1b6>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003540:	d003      	beq.n	800354a <HAL_DMA_Init+0x1b6>
 8003542:	21be      	movs	r1, #190	; 0xbe
 8003544:	4843      	ldr	r0, [pc, #268]	; (8003654 <HAL_DMA_Init+0x2c0>)
 8003546:	f7fe ffc6 	bl	80024d6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00c      	beq.n	800356c <HAL_DMA_Init+0x1d8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355a:	d007      	beq.n	800356c <HAL_DMA_Init+0x1d8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	2b20      	cmp	r3, #32
 8003562:	d003      	beq.n	800356c <HAL_DMA_Init+0x1d8>
 8003564:	21bf      	movs	r1, #191	; 0xbf
 8003566:	483b      	ldr	r0, [pc, #236]	; (8003654 <HAL_DMA_Init+0x2c0>)
 8003568:	f7fe ffb5 	bl	80024d6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <HAL_DMA_Init+0x206>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357c:	d00d      	beq.n	800359a <HAL_DMA_Init+0x206>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003586:	d008      	beq.n	800359a <HAL_DMA_Init+0x206>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003590:	d003      	beq.n	800359a <HAL_DMA_Init+0x206>
 8003592:	21c0      	movs	r1, #192	; 0xc0
 8003594:	482f      	ldr	r0, [pc, #188]	; (8003654 <HAL_DMA_Init+0x2c0>)
 8003596:	f7fe ff9e 	bl	80024d6 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_DMA_Init+0x21e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d003      	beq.n	80035b2 <HAL_DMA_Init+0x21e>
 80035aa:	21c1      	movs	r1, #193	; 0xc1
 80035ac:	4829      	ldr	r0, [pc, #164]	; (8003654 <HAL_DMA_Init+0x2c0>)
 80035ae:	f7fe ff92 	bl	80024d6 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d065      	beq.n	8003686 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00f      	beq.n	80035e2 <HAL_DMA_Init+0x24e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d00b      	beq.n	80035e2 <HAL_DMA_Init+0x24e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d007      	beq.n	80035e2 <HAL_DMA_Init+0x24e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d003      	beq.n	80035e2 <HAL_DMA_Init+0x24e>
 80035da:	21c6      	movs	r1, #198	; 0xc6
 80035dc:	481d      	ldr	r0, [pc, #116]	; (8003654 <HAL_DMA_Init+0x2c0>)
 80035de:	f7fe ff7a 	bl	80024d6 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d036      	beq.n	8003658 <HAL_DMA_Init+0x2c4>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f2:	d031      	beq.n	8003658 <HAL_DMA_Init+0x2c4>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035fc:	d02c      	beq.n	8003658 <HAL_DMA_Init+0x2c4>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003606:	d027      	beq.n	8003658 <HAL_DMA_Init+0x2c4>
 8003608:	21c7      	movs	r1, #199	; 0xc7
 800360a:	4812      	ldr	r0, [pc, #72]	; (8003654 <HAL_DMA_Init+0x2c0>)
 800360c:	f7fe ff63 	bl	80024d6 <assert_failed>
 8003610:	e022      	b.n	8003658 <HAL_DMA_Init+0x2c4>
 8003612:	bf00      	nop
 8003614:	40026010 	.word	0x40026010
 8003618:	40026028 	.word	0x40026028
 800361c:	40026040 	.word	0x40026040
 8003620:	40026058 	.word	0x40026058
 8003624:	40026070 	.word	0x40026070
 8003628:	40026088 	.word	0x40026088
 800362c:	400260a0 	.word	0x400260a0
 8003630:	400260b8 	.word	0x400260b8
 8003634:	40026410 	.word	0x40026410
 8003638:	40026428 	.word	0x40026428
 800363c:	40026440 	.word	0x40026440
 8003640:	40026458 	.word	0x40026458
 8003644:	40026470 	.word	0x40026470
 8003648:	40026488 	.word	0x40026488
 800364c:	400264a0 	.word	0x400264a0
 8003650:	400264b8 	.word	0x400264b8
 8003654:	0800a420 	.word	0x0800a420
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	2b00      	cmp	r3, #0
 800365e:	d012      	beq.n	8003686 <HAL_DMA_Init+0x2f2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003668:	d00d      	beq.n	8003686 <HAL_DMA_Init+0x2f2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003672:	d008      	beq.n	8003686 <HAL_DMA_Init+0x2f2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800367c:	d003      	beq.n	8003686 <HAL_DMA_Init+0x2f2>
 800367e:	21c8      	movs	r1, #200	; 0xc8
 8003680:	4850      	ldr	r0, [pc, #320]	; (80037c4 <HAL_DMA_Init+0x430>)
 8003682:	f7fe ff28 	bl	80024d6 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a6:	e00f      	b.n	80036c8 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036a8:	f7ff fd04 	bl	80030b4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d908      	bls.n	80036c8 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2203      	movs	r2, #3
 80036c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e078      	b.n	80037ba <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e8      	bne.n	80036a8 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <HAL_DMA_Init+0x434>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	2b04      	cmp	r3, #4
 8003720:	d107      	bne.n	8003732 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4313      	orrs	r3, r2
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f023 0307 	bic.w	r3, r3, #7
 8003748:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	2b04      	cmp	r3, #4
 800375a:	d117      	bne.n	800378c <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00e      	beq.n	800378c <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa7e 	bl	8003c70 <DMA_CheckFifoParam>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d008      	beq.n	800378c <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2240      	movs	r2, #64	; 0x40
 800377e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003788:	2301      	movs	r3, #1
 800378a:	e016      	b.n	80037ba <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fa35 	bl	8003c04 <DMA_CalcBaseAndBitshift>
 800379a:	4603      	mov	r3, r0
 800379c:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a2:	223f      	movs	r2, #63	; 0x3f
 80037a4:	409a      	lsls	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	0800a420 	.word	0x0800a420
 80037c8:	f010803f 	.word	0xf010803f

080037cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037da:	f7ff fc6b 	bl	80030b4 <HAL_GetTick>
 80037de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d008      	beq.n	80037fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e052      	b.n	80038a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0216 	bic.w	r2, r2, #22
 800380c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800381c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d103      	bne.n	800382e <HAL_DMA_Abort+0x62>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0208 	bic.w	r2, r2, #8
 800383c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800384e:	e013      	b.n	8003878 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003850:	f7ff fc30 	bl	80030b4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b05      	cmp	r3, #5
 800385c:	d90c      	bls.n	8003878 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2203      	movs	r2, #3
 8003868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e015      	b.n	80038a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e4      	bne.n	8003850 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	223f      	movs	r2, #63	; 0x3f
 800388c:	409a      	lsls	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d004      	beq.n	80038ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2280      	movs	r2, #128	; 0x80
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00c      	b.n	80038e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2205      	movs	r2, #5
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038fc:	4b92      	ldr	r3, [pc, #584]	; (8003b48 <HAL_DMA_IRQHandler+0x258>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a92      	ldr	r2, [pc, #584]	; (8003b4c <HAL_DMA_IRQHandler+0x25c>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	0a9b      	lsrs	r3, r3, #10
 8003908:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	2208      	movs	r2, #8
 800391c:	409a      	lsls	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4013      	ands	r3, r2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01a      	beq.n	800395c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d013      	beq.n	800395c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0204 	bic.w	r2, r2, #4
 8003942:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	2208      	movs	r2, #8
 800394a:	409a      	lsls	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003954:	f043 0201 	orr.w	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	2201      	movs	r2, #1
 8003962:	409a      	lsls	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d012      	beq.n	8003992 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	2201      	movs	r2, #1
 8003980:	409a      	lsls	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f043 0202 	orr.w	r2, r3, #2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	2204      	movs	r2, #4
 8003998:	409a      	lsls	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d012      	beq.n	80039c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00b      	beq.n	80039c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	2204      	movs	r2, #4
 80039b6:	409a      	lsls	r2, r3
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	f043 0204 	orr.w	r2, r3, #4
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	2210      	movs	r2, #16
 80039ce:	409a      	lsls	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d043      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d03c      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	2210      	movs	r2, #16
 80039ec:	409a      	lsls	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d018      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d024      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4798      	blx	r3
 8003a1e:	e01f      	b.n	8003a60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01b      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
 8003a30:	e016      	b.n	8003a60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d107      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0208 	bic.w	r2, r2, #8
 8003a4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	2220      	movs	r2, #32
 8003a66:	409a      	lsls	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 808e 	beq.w	8003b8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8086 	beq.w	8003b8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a86:	2220      	movs	r2, #32
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d136      	bne.n	8003b08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0216 	bic.w	r2, r2, #22
 8003aa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ab8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d103      	bne.n	8003aca <HAL_DMA_IRQHandler+0x1da>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0208 	bic.w	r2, r2, #8
 8003ad8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	223f      	movs	r2, #63	; 0x3f
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d07d      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
        }
        return;
 8003b06:	e078      	b.n	8003bfa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01c      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d108      	bne.n	8003b36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d030      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	4798      	blx	r3
 8003b34:	e02b      	b.n	8003b8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d027      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
 8003b46:	e022      	b.n	8003b8e <HAL_DMA_IRQHandler+0x29e>
 8003b48:	200000a4 	.word	0x200000a4
 8003b4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0210 	bic.w	r2, r2, #16
 8003b6c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d032      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d022      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2205      	movs	r2, #5
 8003ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d307      	bcc.n	8003bd6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f2      	bne.n	8003bba <HAL_DMA_IRQHandler+0x2ca>
 8003bd4:	e000      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003bd6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
 8003bf8:	e000      	b.n	8003bfc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003bfa:	bf00      	nop
    }
  }
}
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop

08003c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	3b10      	subs	r3, #16
 8003c14:	4a14      	ldr	r2, [pc, #80]	; (8003c68 <DMA_CalcBaseAndBitshift+0x64>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c1e:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <DMA_CalcBaseAndBitshift+0x68>)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d909      	bls.n	8003c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c3a:	f023 0303 	bic.w	r3, r3, #3
 8003c3e:	1d1a      	adds	r2, r3, #4
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	659a      	str	r2, [r3, #88]	; 0x58
 8003c44:	e007      	b.n	8003c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c4e:	f023 0303 	bic.w	r3, r3, #3
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	aaaaaaab 	.word	0xaaaaaaab
 8003c6c:	0800a660 	.word	0x0800a660

08003c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d11f      	bne.n	8003cca <DMA_CheckFifoParam+0x5a>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d856      	bhi.n	8003d3e <DMA_CheckFifoParam+0xce>
 8003c90:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <DMA_CheckFifoParam+0x28>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003ca9 	.word	0x08003ca9
 8003c9c:	08003cbb 	.word	0x08003cbb
 8003ca0:	08003ca9 	.word	0x08003ca9
 8003ca4:	08003d3f 	.word	0x08003d3f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d046      	beq.n	8003d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb8:	e043      	b.n	8003d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cc2:	d140      	bne.n	8003d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc8:	e03d      	b.n	8003d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd2:	d121      	bne.n	8003d18 <DMA_CheckFifoParam+0xa8>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d837      	bhi.n	8003d4a <DMA_CheckFifoParam+0xda>
 8003cda:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <DMA_CheckFifoParam+0x70>)
 8003cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce0:	08003cf1 	.word	0x08003cf1
 8003ce4:	08003cf7 	.word	0x08003cf7
 8003ce8:	08003cf1 	.word	0x08003cf1
 8003cec:	08003d09 	.word	0x08003d09
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf4:	e030      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d025      	beq.n	8003d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d06:	e022      	b.n	8003d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d10:	d11f      	bne.n	8003d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d16:	e01c      	b.n	8003d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d903      	bls.n	8003d26 <DMA_CheckFifoParam+0xb6>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d003      	beq.n	8003d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d24:	e018      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
      break;
 8003d2a:	e015      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00e      	beq.n	8003d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3c:	e00b      	b.n	8003d56 <DMA_CheckFifoParam+0xe6>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e00a      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      break;
 8003d42:	bf00      	nop
 8003d44:	e008      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      break;
 8003d46:	bf00      	nop
 8003d48:	e006      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e004      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e002      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d52:	bf00      	nop
 8003d54:	e000      	b.n	8003d58 <DMA_CheckFifoParam+0xe8>
      break;
 8003d56:	bf00      	nop
    }
  } 
  
  return status; 
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop

08003d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a37      	ldr	r2, [pc, #220]	; (8003e60 <HAL_GPIO_Init+0xf8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01f      	beq.n	8003dc6 <HAL_GPIO_Init+0x5e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a36      	ldr	r2, [pc, #216]	; (8003e64 <HAL_GPIO_Init+0xfc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01b      	beq.n	8003dc6 <HAL_GPIO_Init+0x5e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a35      	ldr	r2, [pc, #212]	; (8003e68 <HAL_GPIO_Init+0x100>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d017      	beq.n	8003dc6 <HAL_GPIO_Init+0x5e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a34      	ldr	r2, [pc, #208]	; (8003e6c <HAL_GPIO_Init+0x104>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_GPIO_Init+0x5e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a33      	ldr	r2, [pc, #204]	; (8003e70 <HAL_GPIO_Init+0x108>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00f      	beq.n	8003dc6 <HAL_GPIO_Init+0x5e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a32      	ldr	r2, [pc, #200]	; (8003e74 <HAL_GPIO_Init+0x10c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00b      	beq.n	8003dc6 <HAL_GPIO_Init+0x5e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a31      	ldr	r2, [pc, #196]	; (8003e78 <HAL_GPIO_Init+0x110>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d007      	beq.n	8003dc6 <HAL_GPIO_Init+0x5e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a30      	ldr	r2, [pc, #192]	; (8003e7c <HAL_GPIO_Init+0x114>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_Init+0x5e>
 8003dbe:	21ac      	movs	r1, #172	; 0xac
 8003dc0:	482f      	ldr	r0, [pc, #188]	; (8003e80 <HAL_GPIO_Init+0x118>)
 8003dc2:	f7fe fb88 	bl	80024d6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_GPIO_Init+0x74>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0x7c>
 8003ddc:	21ad      	movs	r1, #173	; 0xad
 8003dde:	4828      	ldr	r0, [pc, #160]	; (8003e80 <HAL_GPIO_Init+0x118>)
 8003de0:	f7fe fb79 	bl	80024d6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d035      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d031      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b11      	cmp	r3, #17
 8003dfa:	d02d      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d029      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b12      	cmp	r3, #18
 8003e0a:	d025      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003e14:	d020      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003e1e:	d01b      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003e28:	d016      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003e32:	d011      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003e3c:	d00c      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003e46:	d007      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0xf0>
 8003e50:	21ae      	movs	r1, #174	; 0xae
 8003e52:	480b      	ldr	r0, [pc, #44]	; (8003e80 <HAL_GPIO_Init+0x118>)
 8003e54:	f7fe fb3f 	bl	80024d6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	e289      	b.n	8004372 <HAL_GPIO_Init+0x60a>
 8003e5e:	bf00      	nop
 8003e60:	40020000 	.word	0x40020000
 8003e64:	40020400 	.word	0x40020400
 8003e68:	40020800 	.word	0x40020800
 8003e6c:	40020c00 	.word	0x40020c00
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40021400 	.word	0x40021400
 8003e78:	40021800 	.word	0x40021800
 8003e7c:	40021c00 	.word	0x40021c00
 8003e80:	0800a458 	.word	0x0800a458
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e84:	2201      	movs	r2, #1
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	f040 8265 	bne.w	800436c <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d005      	beq.n	8003eba <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d144      	bne.n	8003f44 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00f      	beq.n	8003ee2 <HAL_GPIO_Init+0x17a>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_GPIO_Init+0x17a>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d007      	beq.n	8003ee2 <HAL_GPIO_Init+0x17a>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x17a>
 8003eda:	21c0      	movs	r1, #192	; 0xc0
 8003edc:	4831      	ldr	r0, [pc, #196]	; (8003fa4 <HAL_GPIO_Init+0x23c>)
 8003ede:	f7fe fafa 	bl	80024d6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	2203      	movs	r2, #3
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f18:	2201      	movs	r2, #1
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 0201 	and.w	r2, r3, #1
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d02b      	beq.n	8003fa8 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <HAL_GPIO_Init+0x208>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d007      	beq.n	8003f70 <HAL_GPIO_Init+0x208>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d003      	beq.n	8003f70 <HAL_GPIO_Init+0x208>
 8003f68:	21d1      	movs	r1, #209	; 0xd1
 8003f6a:	480e      	ldr	r0, [pc, #56]	; (8003fa4 <HAL_GPIO_Init+0x23c>)
 8003f6c:	f7fe fab3 	bl	80024d6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	60da      	str	r2, [r3, #12]
 8003fa0:	e002      	b.n	8003fa8 <HAL_GPIO_Init+0x240>
 8003fa2:	bf00      	nop
 8003fa4:	0800a458 	.word	0x0800a458
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	f040 810c 	bne.w	80041ce <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80e3 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b09      	cmp	r3, #9
 8003fc6:	f000 80de 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80d9 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 80d4 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 80cf 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80ca 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	f000 80c5 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	2b01      	cmp	r3, #1
 8004002:	f000 80c0 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b02      	cmp	r3, #2
 800400c:	f000 80bb 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b02      	cmp	r3, #2
 8004016:	f000 80b6 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b02      	cmp	r3, #2
 8004020:	f000 80b1 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	2b03      	cmp	r3, #3
 800402a:	f000 80ac 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b04      	cmp	r3, #4
 8004034:	f000 80a7 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2b04      	cmp	r3, #4
 800403e:	f000 80a2 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b04      	cmp	r3, #4
 8004048:	f000 809d 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b05      	cmp	r3, #5
 8004052:	f000 8098 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b05      	cmp	r3, #5
 800405c:	f000 8093 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b09      	cmp	r3, #9
 8004066:	f000 808e 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b06      	cmp	r3, #6
 8004070:	f000 8089 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b09      	cmp	r3, #9
 800407a:	f000 8084 	beq.w	8004186 <HAL_GPIO_Init+0x41e>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b07      	cmp	r3, #7
 8004084:	d07f      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b07      	cmp	r3, #7
 800408c:	d07b      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b07      	cmp	r3, #7
 8004094:	d077      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b08      	cmp	r3, #8
 800409c:	d073      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d06f      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d06b      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b09      	cmp	r3, #9
 80040b4:	d067      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b09      	cmp	r3, #9
 80040bc:	d063      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b0a      	cmp	r3, #10
 80040c4:	d05f      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b0a      	cmp	r3, #10
 80040cc:	d05b      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b0b      	cmp	r3, #11
 80040d4:	d057      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d053      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d04f      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b0d      	cmp	r3, #13
 80040ec:	d04b      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	d047      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b05      	cmp	r3, #5
 80040fc:	d043      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d03f      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b06      	cmp	r3, #6
 800410c:	d03b      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d037      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b04      	cmp	r3, #4
 800411c:	d033      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b05      	cmp	r3, #5
 8004124:	d02f      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b06      	cmp	r3, #6
 800412c:	d02b      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b06      	cmp	r3, #6
 8004134:	d027      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b07      	cmp	r3, #7
 800413c:	d023      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b07      	cmp	r3, #7
 8004144:	d01f      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b07      	cmp	r3, #7
 800414c:	d01b      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b07      	cmp	r3, #7
 8004154:	d017      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b08      	cmp	r3, #8
 800415c:	d013      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b08      	cmp	r3, #8
 8004164:	d00f      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b09      	cmp	r3, #9
 800416c:	d00b      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b0a      	cmp	r3, #10
 8004174:	d007      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b0a      	cmp	r3, #10
 800417c:	d003      	beq.n	8004186 <HAL_GPIO_Init+0x41e>
 800417e:	21de      	movs	r1, #222	; 0xde
 8004180:	4880      	ldr	r0, [pc, #512]	; (8004384 <HAL_GPIO_Init+0x61c>)
 8004182:	f7fe f9a8 	bl	80024d6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	08da      	lsrs	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3208      	adds	r2, #8
 800418e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	220f      	movs	r2, #15
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	08da      	lsrs	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3208      	adds	r2, #8
 80041c8:	69b9      	ldr	r1, [r7, #24]
 80041ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	2203      	movs	r2, #3
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 0203 	and.w	r2, r3, #3
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80ae 	beq.w	800436c <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	4b5c      	ldr	r3, [pc, #368]	; (8004388 <HAL_GPIO_Init+0x620>)
 8004216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004218:	4a5b      	ldr	r2, [pc, #364]	; (8004388 <HAL_GPIO_Init+0x620>)
 800421a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800421e:	6453      	str	r3, [r2, #68]	; 0x44
 8004220:	4b59      	ldr	r3, [pc, #356]	; (8004388 <HAL_GPIO_Init+0x620>)
 8004222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800422c:	4a57      	ldr	r2, [pc, #348]	; (800438c <HAL_GPIO_Init+0x624>)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	089b      	lsrs	r3, r3, #2
 8004232:	3302      	adds	r3, #2
 8004234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	220f      	movs	r2, #15
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a4f      	ldr	r2, [pc, #316]	; (8004390 <HAL_GPIO_Init+0x628>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d025      	beq.n	80042a4 <HAL_GPIO_Init+0x53c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a4e      	ldr	r2, [pc, #312]	; (8004394 <HAL_GPIO_Init+0x62c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d01f      	beq.n	80042a0 <HAL_GPIO_Init+0x538>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a4d      	ldr	r2, [pc, #308]	; (8004398 <HAL_GPIO_Init+0x630>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d019      	beq.n	800429c <HAL_GPIO_Init+0x534>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a4c      	ldr	r2, [pc, #304]	; (800439c <HAL_GPIO_Init+0x634>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d013      	beq.n	8004298 <HAL_GPIO_Init+0x530>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a4b      	ldr	r2, [pc, #300]	; (80043a0 <HAL_GPIO_Init+0x638>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00d      	beq.n	8004294 <HAL_GPIO_Init+0x52c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a4a      	ldr	r2, [pc, #296]	; (80043a4 <HAL_GPIO_Init+0x63c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <HAL_GPIO_Init+0x528>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a49      	ldr	r2, [pc, #292]	; (80043a8 <HAL_GPIO_Init+0x640>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d101      	bne.n	800428c <HAL_GPIO_Init+0x524>
 8004288:	2306      	movs	r3, #6
 800428a:	e00c      	b.n	80042a6 <HAL_GPIO_Init+0x53e>
 800428c:	2307      	movs	r3, #7
 800428e:	e00a      	b.n	80042a6 <HAL_GPIO_Init+0x53e>
 8004290:	2305      	movs	r3, #5
 8004292:	e008      	b.n	80042a6 <HAL_GPIO_Init+0x53e>
 8004294:	2304      	movs	r3, #4
 8004296:	e006      	b.n	80042a6 <HAL_GPIO_Init+0x53e>
 8004298:	2303      	movs	r3, #3
 800429a:	e004      	b.n	80042a6 <HAL_GPIO_Init+0x53e>
 800429c:	2302      	movs	r3, #2
 800429e:	e002      	b.n	80042a6 <HAL_GPIO_Init+0x53e>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_GPIO_Init+0x53e>
 80042a4:	2300      	movs	r3, #0
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	f002 0203 	and.w	r2, r2, #3
 80042ac:	0092      	lsls	r2, r2, #2
 80042ae:	4093      	lsls	r3, r2
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b6:	4935      	ldr	r1, [pc, #212]	; (800438c <HAL_GPIO_Init+0x624>)
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	089b      	lsrs	r3, r3, #2
 80042bc:	3302      	adds	r3, #2
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042c4:	4b39      	ldr	r3, [pc, #228]	; (80043ac <HAL_GPIO_Init+0x644>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042e8:	4a30      	ldr	r2, [pc, #192]	; (80043ac <HAL_GPIO_Init+0x644>)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042ee:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <HAL_GPIO_Init+0x644>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	43db      	mvns	r3, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4013      	ands	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004312:	4a26      	ldr	r2, [pc, #152]	; (80043ac <HAL_GPIO_Init+0x644>)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004318:	4b24      	ldr	r3, [pc, #144]	; (80043ac <HAL_GPIO_Init+0x644>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	43db      	mvns	r3, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4013      	ands	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800433c:	4a1b      	ldr	r2, [pc, #108]	; (80043ac <HAL_GPIO_Init+0x644>)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004342:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <HAL_GPIO_Init+0x644>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	43db      	mvns	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004366:	4a11      	ldr	r2, [pc, #68]	; (80043ac <HAL_GPIO_Init+0x644>)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	3301      	adds	r3, #1
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	2b0f      	cmp	r3, #15
 8004376:	f67f ad85 	bls.w	8003e84 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	0800a458 	.word	0x0800a458
 8004388:	40023800 	.word	0x40023800
 800438c:	40013800 	.word	0x40013800
 8004390:	40020000 	.word	0x40020000
 8004394:	40020400 	.word	0x40020400
 8004398:	40020800 	.word	0x40020800
 800439c:	40020c00 	.word	0x40020c00
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40021400 	.word	0x40021400
 80043a8:	40021800 	.word	0x40021800
 80043ac:	40013c00 	.word	0x40013c00

080043b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80043c0:	887b      	ldrh	r3, [r7, #2]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_GPIO_WritePin+0x20>
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	0c1b      	lsrs	r3, r3, #16
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d004      	beq.n	80043da <HAL_GPIO_WritePin+0x2a>
 80043d0:	f240 119d 	movw	r1, #413	; 0x19d
 80043d4:	480e      	ldr	r0, [pc, #56]	; (8004410 <HAL_GPIO_WritePin+0x60>)
 80043d6:	f7fe f87e 	bl	80024d6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80043da:	787b      	ldrb	r3, [r7, #1]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <HAL_GPIO_WritePin+0x40>
 80043e0:	787b      	ldrb	r3, [r7, #1]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d004      	beq.n	80043f0 <HAL_GPIO_WritePin+0x40>
 80043e6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80043ea:	4809      	ldr	r0, [pc, #36]	; (8004410 <HAL_GPIO_WritePin+0x60>)
 80043ec:	f7fe f873 	bl	80024d6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80043f0:	787b      	ldrb	r3, [r7, #1]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043fc:	e003      	b.n	8004406 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043fe:	887b      	ldrh	r3, [r7, #2]
 8004400:	041a      	lsls	r2, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	619a      	str	r2, [r3, #24]
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	0800a458 	.word	0x0800a458

08004414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800441e:	4b08      	ldr	r3, [pc, #32]	; (8004440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800442a:	4a05      	ldr	r2, [pc, #20]	; (8004440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe f82e 	bl	8002494 <HAL_GPIO_EXTI_Callback>
  }
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40013c00 	.word	0x40013c00

08004444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e1be      	b.n	80047d4 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a9f      	ldr	r2, [pc, #636]	; (80046d8 <HAL_I2C_Init+0x294>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_I2C_Init+0x3a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a9d      	ldr	r2, [pc, #628]	; (80046dc <HAL_I2C_Init+0x298>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_I2C_Init+0x3a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a9c      	ldr	r2, [pc, #624]	; (80046e0 <HAL_I2C_Init+0x29c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_I2C_Init+0x3a>
 8004474:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004478:	489a      	ldr	r0, [pc, #616]	; (80046e4 <HAL_I2C_Init+0x2a0>)
 800447a:	f7fe f82c 	bl	80024d6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d004      	beq.n	8004490 <HAL_I2C_Init+0x4c>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4a97      	ldr	r2, [pc, #604]	; (80046e8 <HAL_I2C_Init+0x2a4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d904      	bls.n	800449a <HAL_I2C_Init+0x56>
 8004490:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004494:	4893      	ldr	r0, [pc, #588]	; (80046e4 <HAL_I2C_Init+0x2a0>)
 8004496:	f7fe f81e 	bl	80024d6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <HAL_I2C_Init+0x72>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044aa:	d004      	beq.n	80044b6 <HAL_I2C_Init+0x72>
 80044ac:	f240 11c1 	movw	r1, #449	; 0x1c1
 80044b0:	488c      	ldr	r0, [pc, #560]	; (80046e4 <HAL_I2C_Init+0x2a0>)
 80044b2:	f7fe f810 	bl	80024d6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044be:	f023 0303 	bic.w	r3, r3, #3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d004      	beq.n	80044d0 <HAL_I2C_Init+0x8c>
 80044c6:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80044ca:	4886      	ldr	r0, [pc, #536]	; (80046e4 <HAL_I2C_Init+0x2a0>)
 80044cc:	f7fe f803 	bl	80024d6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d8:	d009      	beq.n	80044ee <HAL_I2C_Init+0xaa>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044e2:	d004      	beq.n	80044ee <HAL_I2C_Init+0xaa>
 80044e4:	f240 11c3 	movw	r1, #451	; 0x1c3
 80044e8:	487e      	ldr	r0, [pc, #504]	; (80046e4 <HAL_I2C_Init+0x2a0>)
 80044ea:	f7fd fff4 	bl	80024d6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <HAL_I2C_Init+0xc4>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d004      	beq.n	8004508 <HAL_I2C_Init+0xc4>
 80044fe:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004502:	4878      	ldr	r0, [pc, #480]	; (80046e4 <HAL_I2C_Init+0x2a0>)
 8004504:	f7fd ffe7 	bl	80024d6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004510:	2b00      	cmp	r3, #0
 8004512:	d004      	beq.n	800451e <HAL_I2C_Init+0xda>
 8004514:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004518:	4872      	ldr	r0, [pc, #456]	; (80046e4 <HAL_I2C_Init+0x2a0>)
 800451a:	f7fd ffdc 	bl	80024d6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d008      	beq.n	8004538 <HAL_I2C_Init+0xf4>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d004      	beq.n	8004538 <HAL_I2C_Init+0xf4>
 800452e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004532:	486c      	ldr	r0, [pc, #432]	; (80046e4 <HAL_I2C_Init+0x2a0>)
 8004534:	f7fd ffcf 	bl	80024d6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_I2C_Init+0x10e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	2b80      	cmp	r3, #128	; 0x80
 8004546:	d004      	beq.n	8004552 <HAL_I2C_Init+0x10e>
 8004548:	f240 11c7 	movw	r1, #455	; 0x1c7
 800454c:	4865      	ldr	r0, [pc, #404]	; (80046e4 <HAL_I2C_Init+0x2a0>)
 800454e:	f7fd ffc2 	bl	80024d6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fd ffe8 	bl	800253c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	; 0x24
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045a4:	f000 fb1c 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 80045a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4a4f      	ldr	r2, [pc, #316]	; (80046ec <HAL_I2C_Init+0x2a8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d807      	bhi.n	80045c4 <HAL_I2C_Init+0x180>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a4e      	ldr	r2, [pc, #312]	; (80046f0 <HAL_I2C_Init+0x2ac>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	bf94      	ite	ls
 80045bc:	2301      	movls	r3, #1
 80045be:	2300      	movhi	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e006      	b.n	80045d2 <HAL_I2C_Init+0x18e>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4a4b      	ldr	r2, [pc, #300]	; (80046f4 <HAL_I2C_Init+0x2b0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	bf94      	ite	ls
 80045cc:	2301      	movls	r3, #1
 80045ce:	2300      	movhi	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0fc      	b.n	80047d4 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a46      	ldr	r2, [pc, #280]	; (80046f8 <HAL_I2C_Init+0x2b4>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	0c9b      	lsrs	r3, r3, #18
 80045e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	4a38      	ldr	r2, [pc, #224]	; (80046ec <HAL_I2C_Init+0x2a8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d802      	bhi.n	8004614 <HAL_I2C_Init+0x1d0>
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	3301      	adds	r3, #1
 8004612:	e009      	b.n	8004628 <HAL_I2C_Init+0x1e4>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	4a37      	ldr	r2, [pc, #220]	; (80046fc <HAL_I2C_Init+0x2b8>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	099b      	lsrs	r3, r3, #6
 8004626:	3301      	adds	r3, #1
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	430b      	orrs	r3, r1
 800462e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800463a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	492a      	ldr	r1, [pc, #168]	; (80046ec <HAL_I2C_Init+0x2a8>)
 8004644:	428b      	cmp	r3, r1
 8004646:	d819      	bhi.n	800467c <HAL_I2C_Init+0x238>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1e59      	subs	r1, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	fbb1 f3f3 	udiv	r3, r1, r3
 8004656:	1c59      	adds	r1, r3, #1
 8004658:	f640 73fc 	movw	r3, #4092	; 0xffc
 800465c:	400b      	ands	r3, r1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_I2C_Init+0x234>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1e59      	subs	r1, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004670:	3301      	adds	r3, #1
 8004672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004676:	e066      	b.n	8004746 <HAL_I2C_Init+0x302>
 8004678:	2304      	movs	r3, #4
 800467a:	e064      	b.n	8004746 <HAL_I2C_Init+0x302>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d111      	bne.n	80046a8 <HAL_I2C_Init+0x264>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1e58      	subs	r0, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6859      	ldr	r1, [r3, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	440b      	add	r3, r1
 8004692:	fbb0 f3f3 	udiv	r3, r0, r3
 8004696:	3301      	adds	r3, #1
 8004698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e012      	b.n	80046ce <HAL_I2C_Init+0x28a>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	1e58      	subs	r0, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6859      	ldr	r1, [r3, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	0099      	lsls	r1, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80046be:	3301      	adds	r3, #1
 80046c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d016      	beq.n	8004700 <HAL_I2C_Init+0x2bc>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e037      	b.n	8004746 <HAL_I2C_Init+0x302>
 80046d6:	bf00      	nop
 80046d8:	40005400 	.word	0x40005400
 80046dc:	40005800 	.word	0x40005800
 80046e0:	40005c00 	.word	0x40005c00
 80046e4:	0800a494 	.word	0x0800a494
 80046e8:	00061a80 	.word	0x00061a80
 80046ec:	000186a0 	.word	0x000186a0
 80046f0:	001e847f 	.word	0x001e847f
 80046f4:	003d08ff 	.word	0x003d08ff
 80046f8:	431bde83 	.word	0x431bde83
 80046fc:	10624dd3 	.word	0x10624dd3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10e      	bne.n	8004726 <HAL_I2C_Init+0x2e2>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1e58      	subs	r0, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6859      	ldr	r1, [r3, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	440b      	add	r3, r1
 8004716:	fbb0 f3f3 	udiv	r3, r0, r3
 800471a:	3301      	adds	r3, #1
 800471c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004724:	e00f      	b.n	8004746 <HAL_I2C_Init+0x302>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1e58      	subs	r0, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	0099      	lsls	r1, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	fbb0 f3f3 	udiv	r3, r0, r3
 800473c:	3301      	adds	r3, #1
 800473e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	6809      	ldr	r1, [r1, #0]
 800474a:	4313      	orrs	r3, r2
 800474c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004774:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6911      	ldr	r1, [r2, #16]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	68d2      	ldr	r2, [r2, #12]
 8004780:	4311      	orrs	r1, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	430b      	orrs	r3, r1
 8004788:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	4b20      	ldr	r3, [pc, #128]	; (800486c <HAL_PWREx_EnableOverDrive+0x90>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	4a1f      	ldr	r2, [pc, #124]	; (800486c <HAL_PWREx_EnableOverDrive+0x90>)
 80047f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f4:	6413      	str	r3, [r2, #64]	; 0x40
 80047f6:	4b1d      	ldr	r3, [pc, #116]	; (800486c <HAL_PWREx_EnableOverDrive+0x90>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004802:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <HAL_PWREx_EnableOverDrive+0x94>)
 8004804:	2201      	movs	r2, #1
 8004806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004808:	f7fe fc54 	bl	80030b4 <HAL_GetTick>
 800480c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800480e:	e009      	b.n	8004824 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004810:	f7fe fc50 	bl	80030b4 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800481e:	d901      	bls.n	8004824 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e01f      	b.n	8004864 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004824:	4b13      	ldr	r3, [pc, #76]	; (8004874 <HAL_PWREx_EnableOverDrive+0x98>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004830:	d1ee      	bne.n	8004810 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004832:	4b11      	ldr	r3, [pc, #68]	; (8004878 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004834:	2201      	movs	r2, #1
 8004836:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004838:	f7fe fc3c 	bl	80030b4 <HAL_GetTick>
 800483c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800483e:	e009      	b.n	8004854 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004840:	f7fe fc38 	bl	80030b4 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800484e:	d901      	bls.n	8004854 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e007      	b.n	8004864 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004854:	4b07      	ldr	r3, [pc, #28]	; (8004874 <HAL_PWREx_EnableOverDrive+0x98>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004860:	d1ee      	bne.n	8004840 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	420e0040 	.word	0x420e0040
 8004874:	40007000 	.word	0x40007000
 8004878:	420e0044 	.word	0x420e0044

0800487c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e18c      	b.n	8004baa <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x24>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b0f      	cmp	r3, #15
 800489e:	d904      	bls.n	80048aa <HAL_RCC_ClockConfig+0x2e>
 80048a0:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80048a4:	4887      	ldr	r0, [pc, #540]	; (8004ac4 <HAL_RCC_ClockConfig+0x248>)
 80048a6:	f7fd fe16 	bl	80024d6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d031      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d02e      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d02b      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d028      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d025      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b05      	cmp	r3, #5
 80048cc:	d022      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b06      	cmp	r3, #6
 80048d2:	d01f      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b07      	cmp	r3, #7
 80048d8:	d01c      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d019      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b09      	cmp	r3, #9
 80048e4:	d016      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b0a      	cmp	r3, #10
 80048ea:	d013      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b0b      	cmp	r3, #11
 80048f0:	d010      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b0c      	cmp	r3, #12
 80048f6:	d00d      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b0d      	cmp	r3, #13
 80048fc:	d00a      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b0e      	cmp	r3, #14
 8004902:	d007      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b0f      	cmp	r3, #15
 8004908:	d004      	beq.n	8004914 <HAL_RCC_ClockConfig+0x98>
 800490a:	f240 215d 	movw	r1, #605	; 0x25d
 800490e:	486d      	ldr	r0, [pc, #436]	; (8004ac4 <HAL_RCC_ClockConfig+0x248>)
 8004910:	f7fd fde1 	bl	80024d6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004914:	4b6c      	ldr	r3, [pc, #432]	; (8004ac8 <HAL_RCC_ClockConfig+0x24c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d90c      	bls.n	800493c <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b69      	ldr	r3, [pc, #420]	; (8004ac8 <HAL_RCC_ClockConfig+0x24c>)
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492a:	4b67      	ldr	r3, [pc, #412]	; (8004ac8 <HAL_RCC_ClockConfig+0x24c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e136      	b.n	8004baa <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d049      	beq.n	80049dc <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004954:	4b5d      	ldr	r3, [pc, #372]	; (8004acc <HAL_RCC_ClockConfig+0x250>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4a5c      	ldr	r2, [pc, #368]	; (8004acc <HAL_RCC_ClockConfig+0x250>)
 800495a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800495e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800496c:	4b57      	ldr	r3, [pc, #348]	; (8004acc <HAL_RCC_ClockConfig+0x250>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4a56      	ldr	r2, [pc, #344]	; (8004acc <HAL_RCC_ClockConfig+0x250>)
 8004972:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d024      	beq.n	80049ca <HAL_RCC_ClockConfig+0x14e>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b80      	cmp	r3, #128	; 0x80
 8004986:	d020      	beq.n	80049ca <HAL_RCC_ClockConfig+0x14e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b90      	cmp	r3, #144	; 0x90
 800498e:	d01c      	beq.n	80049ca <HAL_RCC_ClockConfig+0x14e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2ba0      	cmp	r3, #160	; 0xa0
 8004996:	d018      	beq.n	80049ca <HAL_RCC_ClockConfig+0x14e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2bb0      	cmp	r3, #176	; 0xb0
 800499e:	d014      	beq.n	80049ca <HAL_RCC_ClockConfig+0x14e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2bc0      	cmp	r3, #192	; 0xc0
 80049a6:	d010      	beq.n	80049ca <HAL_RCC_ClockConfig+0x14e>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2bd0      	cmp	r3, #208	; 0xd0
 80049ae:	d00c      	beq.n	80049ca <HAL_RCC_ClockConfig+0x14e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2be0      	cmp	r3, #224	; 0xe0
 80049b6:	d008      	beq.n	80049ca <HAL_RCC_ClockConfig+0x14e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2bf0      	cmp	r3, #240	; 0xf0
 80049be:	d004      	beq.n	80049ca <HAL_RCC_ClockConfig+0x14e>
 80049c0:	f44f 7120 	mov.w	r1, #640	; 0x280
 80049c4:	483f      	ldr	r0, [pc, #252]	; (8004ac4 <HAL_RCC_ClockConfig+0x248>)
 80049c6:	f7fd fd86 	bl	80024d6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ca:	4b40      	ldr	r3, [pc, #256]	; (8004acc <HAL_RCC_ClockConfig+0x250>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	493d      	ldr	r1, [pc, #244]	; (8004acc <HAL_RCC_ClockConfig+0x250>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d059      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d010      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x196>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d00c      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x196>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d008      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x196>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d004      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x196>
 8004a08:	f240 2187 	movw	r1, #647	; 0x287
 8004a0c:	482d      	ldr	r0, [pc, #180]	; (8004ac4 <HAL_RCC_ClockConfig+0x248>)
 8004a0e:	f7fd fd62 	bl	80024d6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	4b2c      	ldr	r3, [pc, #176]	; (8004acc <HAL_RCC_ClockConfig+0x250>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d119      	bne.n	8004a5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e0bf      	b.n	8004baa <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d003      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3a:	4b24      	ldr	r3, [pc, #144]	; (8004acc <HAL_RCC_ClockConfig+0x250>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0af      	b.n	8004baa <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <HAL_RCC_ClockConfig+0x250>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e0a7      	b.n	8004baa <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5a:	4b1c      	ldr	r3, [pc, #112]	; (8004acc <HAL_RCC_ClockConfig+0x250>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f023 0203 	bic.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4919      	ldr	r1, [pc, #100]	; (8004acc <HAL_RCC_ClockConfig+0x250>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a6c:	f7fe fb22 	bl	80030b4 <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a74:	f7fe fb1e 	bl	80030b4 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e08f      	b.n	8004baa <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_RCC_ClockConfig+0x250>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 020c 	and.w	r2, r3, #12
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d1eb      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <HAL_RCC_ClockConfig+0x24c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d212      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <HAL_RCC_ClockConfig+0x24c>)
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_ClockConfig+0x24c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d007      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e072      	b.n	8004baa <HAL_RCC_ClockConfig+0x32e>
 8004ac4:	0800a4cc 	.word	0x0800a4cc
 8004ac8:	40023c00 	.word	0x40023c00
 8004acc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d025      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d018      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x29a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aec:	d013      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x29a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004af6:	d00e      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x29a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004b00:	d009      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x29a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004b0a:	d004      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x29a>
 8004b0c:	f240 21c5 	movw	r1, #709	; 0x2c5
 8004b10:	4828      	ldr	r0, [pc, #160]	; (8004bb4 <HAL_RCC_ClockConfig+0x338>)
 8004b12:	f7fd fce0 	bl	80024d6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b16:	4b28      	ldr	r3, [pc, #160]	; (8004bb8 <HAL_RCC_ClockConfig+0x33c>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	4925      	ldr	r1, [pc, #148]	; (8004bb8 <HAL_RCC_ClockConfig+0x33c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d026      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d018      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x2f2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b44:	d013      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x2f2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b4e:	d00e      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x2f2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004b58:	d009      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x2f2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004b62:	d004      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x2f2>
 8004b64:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8004b68:	4812      	ldr	r0, [pc, #72]	; (8004bb4 <HAL_RCC_ClockConfig+0x338>)
 8004b6a:	f7fd fcb4 	bl	80024d6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b6e:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <HAL_RCC_ClockConfig+0x33c>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	490e      	ldr	r1, [pc, #56]	; (8004bb8 <HAL_RCC_ClockConfig+0x33c>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b82:	f000 f855 	bl	8004c30 <HAL_RCC_GetSysClockFreq>
 8004b86:	4602      	mov	r2, r0
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <HAL_RCC_ClockConfig+0x33c>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	490a      	ldr	r1, [pc, #40]	; (8004bbc <HAL_RCC_ClockConfig+0x340>)
 8004b94:	5ccb      	ldrb	r3, [r1, r3]
 8004b96:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9a:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <HAL_RCC_ClockConfig+0x344>)
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <HAL_RCC_ClockConfig+0x348>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fe fa42 	bl	800302c <HAL_InitTick>

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	0800a4cc 	.word	0x0800a4cc
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	0800a648 	.word	0x0800a648
 8004bc0:	200000a4 	.word	0x200000a4
 8004bc4:	200000a8 	.word	0x200000a8

08004bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bcc:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bce:	681b      	ldr	r3, [r3, #0]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	200000a4 	.word	0x200000a4

08004be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004be4:	f7ff fff0 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	0a9b      	lsrs	r3, r3, #10
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4903      	ldr	r1, [pc, #12]	; (8004c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40023800 	.word	0x40023800
 8004c04:	0800a658 	.word	0x0800a658

08004c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c0c:	f7ff ffdc 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	0b5b      	lsrs	r3, r3, #13
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4903      	ldr	r1, [pc, #12]	; (8004c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	0800a658 	.word	0x0800a658

08004c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c34:	b088      	sub	sp, #32
 8004c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c4c:	4bce      	ldr	r3, [pc, #824]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 030c 	and.w	r3, r3, #12
 8004c54:	2b0c      	cmp	r3, #12
 8004c56:	f200 818d 	bhi.w	8004f74 <HAL_RCC_GetSysClockFreq+0x344>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <HAL_RCC_GetSysClockFreq+0x30>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004f75 	.word	0x08004f75
 8004c68:	08004f75 	.word	0x08004f75
 8004c6c:	08004f75 	.word	0x08004f75
 8004c70:	08004c9b 	.word	0x08004c9b
 8004c74:	08004f75 	.word	0x08004f75
 8004c78:	08004f75 	.word	0x08004f75
 8004c7c:	08004f75 	.word	0x08004f75
 8004c80:	08004ca1 	.word	0x08004ca1
 8004c84:	08004f75 	.word	0x08004f75
 8004c88:	08004f75 	.word	0x08004f75
 8004c8c:	08004f75 	.word	0x08004f75
 8004c90:	08004e15 	.word	0x08004e15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c94:	4bbd      	ldr	r3, [pc, #756]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004c96:	61bb      	str	r3, [r7, #24]
       break;
 8004c98:	e16f      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c9a:	4bbd      	ldr	r3, [pc, #756]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x360>)
 8004c9c:	61bb      	str	r3, [r7, #24]
      break;
 8004c9e:	e16c      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca0:	4bb9      	ldr	r3, [pc, #740]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ca8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004caa:	4bb7      	ldr	r3, [pc, #732]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d053      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb6:	4bb4      	ldr	r3, [pc, #720]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	099b      	lsrs	r3, r3, #6
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	ea02 0400 	and.w	r4, r2, r0
 8004cce:	603c      	str	r4, [r7, #0]
 8004cd0:	400b      	ands	r3, r1
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cd8:	4620      	mov	r0, r4
 8004cda:	4629      	mov	r1, r5
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	014b      	lsls	r3, r1, #5
 8004ce6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cea:	0142      	lsls	r2, r0, #5
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	1ac0      	subs	r0, r0, r3
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	eb61 0103 	sbc.w	r1, r1, r3
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	018b      	lsls	r3, r1, #6
 8004d04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d08:	0182      	lsls	r2, r0, #6
 8004d0a:	1a12      	subs	r2, r2, r0
 8004d0c:	eb63 0301 	sbc.w	r3, r3, r1
 8004d10:	f04f 0000 	mov.w	r0, #0
 8004d14:	f04f 0100 	mov.w	r1, #0
 8004d18:	00d9      	lsls	r1, r3, #3
 8004d1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d1e:	00d0      	lsls	r0, r2, #3
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4621      	mov	r1, r4
 8004d26:	1852      	adds	r2, r2, r1
 8004d28:	4629      	mov	r1, r5
 8004d2a:	eb43 0101 	adc.w	r1, r3, r1
 8004d2e:	460b      	mov	r3, r1
 8004d30:	f04f 0000 	mov.w	r0, #0
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	0259      	lsls	r1, r3, #9
 8004d3a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d3e:	0250      	lsls	r0, r2, #9
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	f7fb ff2c 	bl	8000bac <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4613      	mov	r3, r2
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	e04c      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5e:	4b8a      	ldr	r3, [pc, #552]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	461a      	mov	r2, r3
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	ea02 0a00 	and.w	sl, r2, r0
 8004d76:	ea03 0b01 	and.w	fp, r3, r1
 8004d7a:	4650      	mov	r0, sl
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	014b      	lsls	r3, r1, #5
 8004d88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d8c:	0142      	lsls	r2, r0, #5
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	ebb0 000a 	subs.w	r0, r0, sl
 8004d96:	eb61 010b 	sbc.w	r1, r1, fp
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	018b      	lsls	r3, r1, #6
 8004da4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004da8:	0182      	lsls	r2, r0, #6
 8004daa:	1a12      	subs	r2, r2, r0
 8004dac:	eb63 0301 	sbc.w	r3, r3, r1
 8004db0:	f04f 0000 	mov.w	r0, #0
 8004db4:	f04f 0100 	mov.w	r1, #0
 8004db8:	00d9      	lsls	r1, r3, #3
 8004dba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dbe:	00d0      	lsls	r0, r2, #3
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	eb12 020a 	adds.w	r2, r2, sl
 8004dc8:	eb43 030b 	adc.w	r3, r3, fp
 8004dcc:	f04f 0000 	mov.w	r0, #0
 8004dd0:	f04f 0100 	mov.w	r1, #0
 8004dd4:	0299      	lsls	r1, r3, #10
 8004dd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004dda:	0290      	lsls	r0, r2, #10
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	f7fb fede 	bl	8000bac <__aeabi_uldivmod>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4613      	mov	r3, r2
 8004df6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004df8:	4b63      	ldr	r3, [pc, #396]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	0c1b      	lsrs	r3, r3, #16
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	3301      	adds	r3, #1
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	61bb      	str	r3, [r7, #24]
      break;
 8004e12:	e0b2      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e14:	4b5c      	ldr	r3, [pc, #368]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e1c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e1e:	4b5a      	ldr	r3, [pc, #360]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d04d      	beq.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2a:	4b57      	ldr	r3, [pc, #348]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	099b      	lsrs	r3, r3, #6
 8004e30:	461a      	mov	r2, r3
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e3a:	f04f 0100 	mov.w	r1, #0
 8004e3e:	ea02 0800 	and.w	r8, r2, r0
 8004e42:	ea03 0901 	and.w	r9, r3, r1
 8004e46:	4640      	mov	r0, r8
 8004e48:	4649      	mov	r1, r9
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	014b      	lsls	r3, r1, #5
 8004e54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e58:	0142      	lsls	r2, r0, #5
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	ebb0 0008 	subs.w	r0, r0, r8
 8004e62:	eb61 0109 	sbc.w	r1, r1, r9
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	018b      	lsls	r3, r1, #6
 8004e70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e74:	0182      	lsls	r2, r0, #6
 8004e76:	1a12      	subs	r2, r2, r0
 8004e78:	eb63 0301 	sbc.w	r3, r3, r1
 8004e7c:	f04f 0000 	mov.w	r0, #0
 8004e80:	f04f 0100 	mov.w	r1, #0
 8004e84:	00d9      	lsls	r1, r3, #3
 8004e86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e8a:	00d0      	lsls	r0, r2, #3
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	eb12 0208 	adds.w	r2, r2, r8
 8004e94:	eb43 0309 	adc.w	r3, r3, r9
 8004e98:	f04f 0000 	mov.w	r0, #0
 8004e9c:	f04f 0100 	mov.w	r1, #0
 8004ea0:	0259      	lsls	r1, r3, #9
 8004ea2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004ea6:	0250      	lsls	r0, r2, #9
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4610      	mov	r0, r2
 8004eae:	4619      	mov	r1, r3
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	f7fb fe78 	bl	8000bac <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	e04a      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec6:	4b30      	ldr	r3, [pc, #192]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	099b      	lsrs	r3, r3, #6
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ed6:	f04f 0100 	mov.w	r1, #0
 8004eda:	ea02 0400 	and.w	r4, r2, r0
 8004ede:	ea03 0501 	and.w	r5, r3, r1
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	014b      	lsls	r3, r1, #5
 8004ef0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ef4:	0142      	lsls	r2, r0, #5
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	1b00      	subs	r0, r0, r4
 8004efc:	eb61 0105 	sbc.w	r1, r1, r5
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	018b      	lsls	r3, r1, #6
 8004f0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f0e:	0182      	lsls	r2, r0, #6
 8004f10:	1a12      	subs	r2, r2, r0
 8004f12:	eb63 0301 	sbc.w	r3, r3, r1
 8004f16:	f04f 0000 	mov.w	r0, #0
 8004f1a:	f04f 0100 	mov.w	r1, #0
 8004f1e:	00d9      	lsls	r1, r3, #3
 8004f20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f24:	00d0      	lsls	r0, r2, #3
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	1912      	adds	r2, r2, r4
 8004f2c:	eb45 0303 	adc.w	r3, r5, r3
 8004f30:	f04f 0000 	mov.w	r0, #0
 8004f34:	f04f 0100 	mov.w	r1, #0
 8004f38:	0299      	lsls	r1, r3, #10
 8004f3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f3e:	0290      	lsls	r0, r2, #10
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	f7fb fe2c 	bl	8000bac <__aeabi_uldivmod>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4613      	mov	r3, r2
 8004f5a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	0f1b      	lsrs	r3, r3, #28
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	61bb      	str	r3, [r7, #24]
      break;
 8004f72:	e002      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f74:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004f76:	61bb      	str	r3, [r7, #24]
      break;
 8004f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	00f42400 	.word	0x00f42400
 8004f90:	007a1200 	.word	0x007a1200

08004f94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e34b      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b0f      	cmp	r3, #15
 8004fac:	d904      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x24>
 8004fae:	f640 5112 	movw	r1, #3346	; 0xd12
 8004fb2:	48a5      	ldr	r0, [pc, #660]	; (8005248 <HAL_RCC_OscConfig+0x2b4>)
 8004fb4:	f7fd fa8f 	bl	80024d6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 8096 	beq.w	80050f2 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00e      	beq.n	8004fec <HAL_RCC_OscConfig+0x58>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd6:	d009      	beq.n	8004fec <HAL_RCC_OscConfig+0x58>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fe0:	d004      	beq.n	8004fec <HAL_RCC_OscConfig+0x58>
 8004fe2:	f640 5117 	movw	r1, #3351	; 0xd17
 8004fe6:	4898      	ldr	r0, [pc, #608]	; (8005248 <HAL_RCC_OscConfig+0x2b4>)
 8004fe8:	f7fd fa75 	bl	80024d6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fec:	4b97      	ldr	r3, [pc, #604]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d019      	beq.n	800502c <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ff8:	4b94      	ldr	r3, [pc, #592]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005000:	2b08      	cmp	r3, #8
 8005002:	d106      	bne.n	8005012 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005004:	4b91      	ldr	r3, [pc, #580]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005010:	d00c      	beq.n	800502c <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005012:	4b8e      	ldr	r3, [pc, #568]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d112      	bne.n	8005044 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800501e:	4b8b      	ldr	r3, [pc, #556]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800502a:	d10b      	bne.n	8005044 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502c:	4b87      	ldr	r3, [pc, #540]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d05b      	beq.n	80050f0 <HAL_RCC_OscConfig+0x15c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d157      	bne.n	80050f0 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e2fc      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800504c:	d106      	bne.n	800505c <HAL_RCC_OscConfig+0xc8>
 800504e:	4b7f      	ldr	r3, [pc, #508]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a7e      	ldr	r2, [pc, #504]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e01d      	b.n	8005098 <HAL_RCC_OscConfig+0x104>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0xec>
 8005066:	4b79      	ldr	r3, [pc, #484]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a78      	ldr	r2, [pc, #480]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 800506c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b76      	ldr	r3, [pc, #472]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a75      	ldr	r2, [pc, #468]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e00b      	b.n	8005098 <HAL_RCC_OscConfig+0x104>
 8005080:	4b72      	ldr	r3, [pc, #456]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a71      	ldr	r2, [pc, #452]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4b6f      	ldr	r3, [pc, #444]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a6e      	ldr	r2, [pc, #440]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d013      	beq.n	80050c8 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fe f808 	bl	80030b4 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a8:	f7fe f804 	bl	80030b4 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	; 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e2c1      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	4b64      	ldr	r3, [pc, #400]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x114>
 80050c6:	e014      	b.n	80050f2 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fd fff4 	bl	80030b4 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fd fff0 	bl	80030b4 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	; 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e2ad      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e2:	4b5a      	ldr	r3, [pc, #360]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x13c>
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 8086 	beq.w	800520c <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <HAL_RCC_OscConfig+0x186>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d004      	beq.n	800511a <HAL_RCC_OscConfig+0x186>
 8005110:	f640 514f 	movw	r1, #3407	; 0xd4f
 8005114:	484c      	ldr	r0, [pc, #304]	; (8005248 <HAL_RCC_OscConfig+0x2b4>)
 8005116:	f7fd f9de 	bl	80024d6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b1f      	cmp	r3, #31
 8005120:	d904      	bls.n	800512c <HAL_RCC_OscConfig+0x198>
 8005122:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 8005126:	4848      	ldr	r0, [pc, #288]	; (8005248 <HAL_RCC_OscConfig+0x2b4>)
 8005128:	f7fd f9d5 	bl	80024d6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800512c:	4b47      	ldr	r3, [pc, #284]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 030c 	and.w	r3, r3, #12
 8005134:	2b00      	cmp	r3, #0
 8005136:	d017      	beq.n	8005168 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005138:	4b44      	ldr	r3, [pc, #272]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005140:	2b08      	cmp	r3, #8
 8005142:	d105      	bne.n	8005150 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005144:	4b41      	ldr	r3, [pc, #260]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005150:	4b3e      	ldr	r3, [pc, #248]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005158:	2b0c      	cmp	r3, #12
 800515a:	d11c      	bne.n	8005196 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515c:	4b3b      	ldr	r3, [pc, #236]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d116      	bne.n	8005196 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005168:	4b38      	ldr	r3, [pc, #224]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_RCC_OscConfig+0x1ec>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d001      	beq.n	8005180 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e25e      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005180:	4b32      	ldr	r3, [pc, #200]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	492f      	ldr	r1, [pc, #188]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005190:	4313      	orrs	r3, r2
 8005192:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005194:	e03a      	b.n	800520c <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d020      	beq.n	80051e0 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800519e:	4b2c      	ldr	r3, [pc, #176]	; (8005250 <HAL_RCC_OscConfig+0x2bc>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fd ff86 	bl	80030b4 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ac:	f7fd ff82 	bl	80030b4 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e23f      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051be:	4b23      	ldr	r3, [pc, #140]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ca:	4b20      	ldr	r3, [pc, #128]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	491c      	ldr	r1, [pc, #112]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]
 80051de:	e015      	b.n	800520c <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e0:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <HAL_RCC_OscConfig+0x2bc>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e6:	f7fd ff65 	bl	80030b4 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ee:	f7fd ff61 	bl	80030b4 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e21e      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005200:	4b12      	ldr	r3, [pc, #72]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f0      	bne.n	80051ee <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b00      	cmp	r3, #0
 8005216:	d045      	beq.n	80052a4 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_RCC_OscConfig+0x29e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d004      	beq.n	8005232 <HAL_RCC_OscConfig+0x29e>
 8005228:	f640 5196 	movw	r1, #3478	; 0xd96
 800522c:	4806      	ldr	r0, [pc, #24]	; (8005248 <HAL_RCC_OscConfig+0x2b4>)
 800522e:	f7fd f952 	bl	80024d6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d01e      	beq.n	8005278 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <HAL_RCC_OscConfig+0x2c0>)
 800523c:	2201      	movs	r2, #1
 800523e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005240:	f7fd ff38 	bl	80030b4 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005246:	e010      	b.n	800526a <HAL_RCC_OscConfig+0x2d6>
 8005248:	0800a504 	.word	0x0800a504
 800524c:	40023800 	.word	0x40023800
 8005250:	42470000 	.word	0x42470000
 8005254:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005258:	f7fd ff2c 	bl	80030b4 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e1e9      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526a:	4ba4      	ldr	r3, [pc, #656]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 800526c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0x2c4>
 8005276:	e015      	b.n	80052a4 <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005278:	4ba1      	ldr	r3, [pc, #644]	; (8005500 <HAL_RCC_OscConfig+0x56c>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527e:	f7fd ff19 	bl	80030b4 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005286:	f7fd ff15 	bl	80030b4 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e1d2      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005298:	4b98      	ldr	r3, [pc, #608]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 800529a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f0      	bne.n	8005286 <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 80a8 	beq.w	8005402 <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b2:	2300      	movs	r3, #0
 80052b4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00c      	beq.n	80052d8 <HAL_RCC_OscConfig+0x344>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d008      	beq.n	80052d8 <HAL_RCC_OscConfig+0x344>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d004      	beq.n	80052d8 <HAL_RCC_OscConfig+0x344>
 80052ce:	f640 51c2 	movw	r1, #3522	; 0xdc2
 80052d2:	488c      	ldr	r0, [pc, #560]	; (8005504 <HAL_RCC_OscConfig+0x570>)
 80052d4:	f7fd f8ff 	bl	80024d6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d8:	4b88      	ldr	r3, [pc, #544]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10f      	bne.n	8005304 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e4:	2300      	movs	r3, #0
 80052e6:	60bb      	str	r3, [r7, #8]
 80052e8:	4b84      	ldr	r3, [pc, #528]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	4a83      	ldr	r2, [pc, #524]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 80052ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f2:	6413      	str	r3, [r2, #64]	; 0x40
 80052f4:	4b81      	ldr	r3, [pc, #516]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005300:	2301      	movs	r3, #1
 8005302:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	4b80      	ldr	r3, [pc, #512]	; (8005508 <HAL_RCC_OscConfig+0x574>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d118      	bne.n	8005342 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005310:	4b7d      	ldr	r3, [pc, #500]	; (8005508 <HAL_RCC_OscConfig+0x574>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a7c      	ldr	r2, [pc, #496]	; (8005508 <HAL_RCC_OscConfig+0x574>)
 8005316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800531c:	f7fd feca 	bl	80030b4 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005324:	f7fd fec6 	bl	80030b4 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e183      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005336:	4b74      	ldr	r3, [pc, #464]	; (8005508 <HAL_RCC_OscConfig+0x574>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f0      	beq.n	8005324 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d106      	bne.n	8005358 <HAL_RCC_OscConfig+0x3c4>
 800534a:	4b6c      	ldr	r3, [pc, #432]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	4a6b      	ldr	r2, [pc, #428]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	6713      	str	r3, [r2, #112]	; 0x70
 8005356:	e01c      	b.n	8005392 <HAL_RCC_OscConfig+0x3fe>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b05      	cmp	r3, #5
 800535e:	d10c      	bne.n	800537a <HAL_RCC_OscConfig+0x3e6>
 8005360:	4b66      	ldr	r3, [pc, #408]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	4a65      	ldr	r2, [pc, #404]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 8005366:	f043 0304 	orr.w	r3, r3, #4
 800536a:	6713      	str	r3, [r2, #112]	; 0x70
 800536c:	4b63      	ldr	r3, [pc, #396]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005370:	4a62      	ldr	r2, [pc, #392]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 8005372:	f043 0301 	orr.w	r3, r3, #1
 8005376:	6713      	str	r3, [r2, #112]	; 0x70
 8005378:	e00b      	b.n	8005392 <HAL_RCC_OscConfig+0x3fe>
 800537a:	4b60      	ldr	r3, [pc, #384]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	4a5f      	ldr	r2, [pc, #380]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	6713      	str	r3, [r2, #112]	; 0x70
 8005386:	4b5d      	ldr	r3, [pc, #372]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538a:	4a5c      	ldr	r2, [pc, #368]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 800538c:	f023 0304 	bic.w	r3, r3, #4
 8005390:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d015      	beq.n	80053c6 <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539a:	f7fd fe8b 	bl	80030b4 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a0:	e00a      	b.n	80053b8 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a2:	f7fd fe87 	bl	80030b4 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e142      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b8:	4b50      	ldr	r3, [pc, #320]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0ee      	beq.n	80053a2 <HAL_RCC_OscConfig+0x40e>
 80053c4:	e014      	b.n	80053f0 <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c6:	f7fd fe75 	bl	80030b4 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fd fe71 	bl	80030b4 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e12c      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e4:	4b45      	ldr	r3, [pc, #276]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1ee      	bne.n	80053ce <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d105      	bne.n	8005402 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f6:	4b41      	ldr	r3, [pc, #260]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	4a40      	ldr	r2, [pc, #256]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 80053fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005400:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00c      	beq.n	8005424 <HAL_RCC_OscConfig+0x490>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d008      	beq.n	8005424 <HAL_RCC_OscConfig+0x490>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d004      	beq.n	8005424 <HAL_RCC_OscConfig+0x490>
 800541a:	f640 6105 	movw	r1, #3589	; 0xe05
 800541e:	4839      	ldr	r0, [pc, #228]	; (8005504 <HAL_RCC_OscConfig+0x570>)
 8005420:	f7fd f859 	bl	80024d6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8107 	beq.w	800563c <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800542e:	4b33      	ldr	r3, [pc, #204]	; (80054fc <HAL_RCC_OscConfig+0x568>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 030c 	and.w	r3, r3, #12
 8005436:	2b08      	cmp	r3, #8
 8005438:	f000 80c0 	beq.w	80055bc <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b02      	cmp	r3, #2
 8005442:	f040 80a4 	bne.w	800558e <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_RCC_OscConfig+0x4ce>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005456:	d004      	beq.n	8005462 <HAL_RCC_OscConfig+0x4ce>
 8005458:	f640 610e 	movw	r1, #3598	; 0xe0e
 800545c:	4829      	ldr	r0, [pc, #164]	; (8005504 <HAL_RCC_OscConfig+0x570>)
 800545e:	f7fd f83a 	bl	80024d6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	2b3f      	cmp	r3, #63	; 0x3f
 8005468:	d904      	bls.n	8005474 <HAL_RCC_OscConfig+0x4e0>
 800546a:	f640 610f 	movw	r1, #3599	; 0xe0f
 800546e:	4825      	ldr	r0, [pc, #148]	; (8005504 <HAL_RCC_OscConfig+0x570>)
 8005470:	f7fd f831 	bl	80024d6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	2b31      	cmp	r3, #49	; 0x31
 800547a:	d904      	bls.n	8005486 <HAL_RCC_OscConfig+0x4f2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005484:	d904      	bls.n	8005490 <HAL_RCC_OscConfig+0x4fc>
 8005486:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800548a:	481e      	ldr	r0, [pc, #120]	; (8005504 <HAL_RCC_OscConfig+0x570>)
 800548c:	f7fd f823 	bl	80024d6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	2b02      	cmp	r3, #2
 8005496:	d010      	beq.n	80054ba <HAL_RCC_OscConfig+0x526>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	2b04      	cmp	r3, #4
 800549e:	d00c      	beq.n	80054ba <HAL_RCC_OscConfig+0x526>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	2b06      	cmp	r3, #6
 80054a6:	d008      	beq.n	80054ba <HAL_RCC_OscConfig+0x526>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d004      	beq.n	80054ba <HAL_RCC_OscConfig+0x526>
 80054b0:	f640 6111 	movw	r1, #3601	; 0xe11
 80054b4:	4813      	ldr	r0, [pc, #76]	; (8005504 <HAL_RCC_OscConfig+0x570>)
 80054b6:	f7fd f80e 	bl	80024d6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d903      	bls.n	80054ca <HAL_RCC_OscConfig+0x536>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c6:	2b0f      	cmp	r3, #15
 80054c8:	d904      	bls.n	80054d4 <HAL_RCC_OscConfig+0x540>
 80054ca:	f640 6112 	movw	r1, #3602	; 0xe12
 80054ce:	480d      	ldr	r0, [pc, #52]	; (8005504 <HAL_RCC_OscConfig+0x570>)
 80054d0:	f7fd f801 	bl	80024d6 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d903      	bls.n	80054e4 <HAL_RCC_OscConfig+0x550>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	2b07      	cmp	r3, #7
 80054e2:	d904      	bls.n	80054ee <HAL_RCC_OscConfig+0x55a>
 80054e4:	f640 6113 	movw	r1, #3603	; 0xe13
 80054e8:	4806      	ldr	r0, [pc, #24]	; (8005504 <HAL_RCC_OscConfig+0x570>)
 80054ea:	f7fc fff4 	bl	80024d6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ee:	4b07      	ldr	r3, [pc, #28]	; (800550c <HAL_RCC_OscConfig+0x578>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f4:	f7fd fdde 	bl	80030b4 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054fa:	e012      	b.n	8005522 <HAL_RCC_OscConfig+0x58e>
 80054fc:	40023800 	.word	0x40023800
 8005500:	42470e80 	.word	0x42470e80
 8005504:	0800a504 	.word	0x0800a504
 8005508:	40007000 	.word	0x40007000
 800550c:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005510:	f7fd fdd0 	bl	80030b4 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e08d      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005522:	4b49      	ldr	r3, [pc, #292]	; (8005648 <HAL_RCC_OscConfig+0x6b4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69da      	ldr	r2, [r3, #28]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	019b      	lsls	r3, r3, #6
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	3b01      	subs	r3, #1
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	071b      	lsls	r3, r3, #28
 800555a:	493b      	ldr	r1, [pc, #236]	; (8005648 <HAL_RCC_OscConfig+0x6b4>)
 800555c:	4313      	orrs	r3, r2
 800555e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005560:	4b3a      	ldr	r3, [pc, #232]	; (800564c <HAL_RCC_OscConfig+0x6b8>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005566:	f7fd fda5 	bl	80030b4 <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800556e:	f7fd fda1 	bl	80030b4 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e05e      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005580:	4b31      	ldr	r3, [pc, #196]	; (8005648 <HAL_RCC_OscConfig+0x6b4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <HAL_RCC_OscConfig+0x5da>
 800558c:	e056      	b.n	800563c <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800558e:	4b2f      	ldr	r3, [pc, #188]	; (800564c <HAL_RCC_OscConfig+0x6b8>)
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fd fd8e 	bl	80030b4 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800559c:	f7fd fd8a 	bl	80030b4 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e047      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ae:	4b26      	ldr	r3, [pc, #152]	; (8005648 <HAL_RCC_OscConfig+0x6b4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x608>
 80055ba:	e03f      	b.n	800563c <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e03a      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055c8:	4b1f      	ldr	r3, [pc, #124]	; (8005648 <HAL_RCC_OscConfig+0x6b4>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d030      	beq.n	8005638 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d129      	bne.n	8005638 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d122      	bne.n	8005638 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055f8:	4013      	ands	r3, r2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005600:	4293      	cmp	r3, r2
 8005602:	d119      	bne.n	8005638 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	3b01      	subs	r3, #1
 8005612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005614:	429a      	cmp	r2, r3
 8005616:	d10f      	bne.n	8005638 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005624:	429a      	cmp	r2, r3
 8005626:	d107      	bne.n	8005638 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	40023800 	.word	0x40023800
 800564c:	42470060 	.word	0x42470060

08005650 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e184      	b.n	800596c <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a72      	ldr	r2, [pc, #456]	; (8005830 <HAL_SPI_Init+0x1e0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <HAL_SPI_Init+0x44>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a70      	ldr	r2, [pc, #448]	; (8005834 <HAL_SPI_Init+0x1e4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00e      	beq.n	8005694 <HAL_SPI_Init+0x44>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a6f      	ldr	r2, [pc, #444]	; (8005838 <HAL_SPI_Init+0x1e8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d009      	beq.n	8005694 <HAL_SPI_Init+0x44>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a6d      	ldr	r2, [pc, #436]	; (800583c <HAL_SPI_Init+0x1ec>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_SPI_Init+0x44>
 800568a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800568e:	486c      	ldr	r0, [pc, #432]	; (8005840 <HAL_SPI_Init+0x1f0>)
 8005690:	f7fc ff21 	bl	80024d6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <HAL_SPI_Init+0x60>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a4:	d004      	beq.n	80056b0 <HAL_SPI_Init+0x60>
 80056a6:	f240 1143 	movw	r1, #323	; 0x143
 80056aa:	4865      	ldr	r0, [pc, #404]	; (8005840 <HAL_SPI_Init+0x1f0>)
 80056ac:	f7fc ff13 	bl	80024d6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00e      	beq.n	80056d6 <HAL_SPI_Init+0x86>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c0:	d009      	beq.n	80056d6 <HAL_SPI_Init+0x86>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ca:	d004      	beq.n	80056d6 <HAL_SPI_Init+0x86>
 80056cc:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80056d0:	485b      	ldr	r0, [pc, #364]	; (8005840 <HAL_SPI_Init+0x1f0>)
 80056d2:	f7fc ff00 	bl	80024d6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056de:	d008      	beq.n	80056f2 <HAL_SPI_Init+0xa2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <HAL_SPI_Init+0xa2>
 80056e8:	f240 1145 	movw	r1, #325	; 0x145
 80056ec:	4854      	ldr	r0, [pc, #336]	; (8005840 <HAL_SPI_Init+0x1f0>)
 80056ee:	f7fc fef2 	bl	80024d6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fa:	d00d      	beq.n	8005718 <HAL_SPI_Init+0xc8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d009      	beq.n	8005718 <HAL_SPI_Init+0xc8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800570c:	d004      	beq.n	8005718 <HAL_SPI_Init+0xc8>
 800570e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005712:	484b      	ldr	r0, [pc, #300]	; (8005840 <HAL_SPI_Init+0x1f0>)
 8005714:	f7fc fedf 	bl	80024d6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d020      	beq.n	8005762 <HAL_SPI_Init+0x112>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d01c      	beq.n	8005762 <HAL_SPI_Init+0x112>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	2b10      	cmp	r3, #16
 800572e:	d018      	beq.n	8005762 <HAL_SPI_Init+0x112>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	2b18      	cmp	r3, #24
 8005736:	d014      	beq.n	8005762 <HAL_SPI_Init+0x112>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	2b20      	cmp	r3, #32
 800573e:	d010      	beq.n	8005762 <HAL_SPI_Init+0x112>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	2b28      	cmp	r3, #40	; 0x28
 8005746:	d00c      	beq.n	8005762 <HAL_SPI_Init+0x112>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	2b30      	cmp	r3, #48	; 0x30
 800574e:	d008      	beq.n	8005762 <HAL_SPI_Init+0x112>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	2b38      	cmp	r3, #56	; 0x38
 8005756:	d004      	beq.n	8005762 <HAL_SPI_Init+0x112>
 8005758:	f240 1147 	movw	r1, #327	; 0x147
 800575c:	4838      	ldr	r0, [pc, #224]	; (8005840 <HAL_SPI_Init+0x1f0>)
 800575e:	f7fc feba 	bl	80024d6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d008      	beq.n	800577c <HAL_SPI_Init+0x12c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d004      	beq.n	800577c <HAL_SPI_Init+0x12c>
 8005772:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005776:	4832      	ldr	r0, [pc, #200]	; (8005840 <HAL_SPI_Init+0x1f0>)
 8005778:	f7fc fead 	bl	80024d6 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_SPI_Init+0x146>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	2b10      	cmp	r3, #16
 800578a:	d004      	beq.n	8005796 <HAL_SPI_Init+0x146>
 800578c:	f240 1149 	movw	r1, #329	; 0x149
 8005790:	482b      	ldr	r0, [pc, #172]	; (8005840 <HAL_SPI_Init+0x1f0>)
 8005792:	f7fc fea0 	bl	80024d6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	2b00      	cmp	r3, #0
 800579c:	d152      	bne.n	8005844 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d008      	beq.n	80057b8 <HAL_SPI_Init+0x168>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d004      	beq.n	80057b8 <HAL_SPI_Init+0x168>
 80057ae:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80057b2:	4823      	ldr	r0, [pc, #140]	; (8005840 <HAL_SPI_Init+0x1f0>)
 80057b4:	f7fc fe8f 	bl	80024d6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_SPI_Init+0x182>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d004      	beq.n	80057d2 <HAL_SPI_Init+0x182>
 80057c8:	f240 114d 	movw	r1, #333	; 0x14d
 80057cc:	481c      	ldr	r0, [pc, #112]	; (8005840 <HAL_SPI_Init+0x1f0>)
 80057ce:	f7fc fe82 	bl	80024d6 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057da:	d125      	bne.n	8005828 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d05a      	beq.n	800589a <HAL_SPI_Init+0x24a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d056      	beq.n	800589a <HAL_SPI_Init+0x24a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d052      	beq.n	800589a <HAL_SPI_Init+0x24a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	2b18      	cmp	r3, #24
 80057fa:	d04e      	beq.n	800589a <HAL_SPI_Init+0x24a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	2b20      	cmp	r3, #32
 8005802:	d04a      	beq.n	800589a <HAL_SPI_Init+0x24a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	2b28      	cmp	r3, #40	; 0x28
 800580a:	d046      	beq.n	800589a <HAL_SPI_Init+0x24a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	2b30      	cmp	r3, #48	; 0x30
 8005812:	d042      	beq.n	800589a <HAL_SPI_Init+0x24a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	2b38      	cmp	r3, #56	; 0x38
 800581a:	d03e      	beq.n	800589a <HAL_SPI_Init+0x24a>
 800581c:	f240 1151 	movw	r1, #337	; 0x151
 8005820:	4807      	ldr	r0, [pc, #28]	; (8005840 <HAL_SPI_Init+0x1f0>)
 8005822:	f7fc fe58 	bl	80024d6 <assert_failed>
 8005826:	e038      	b.n	800589a <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	61da      	str	r2, [r3, #28]
 800582e:	e034      	b.n	800589a <HAL_SPI_Init+0x24a>
 8005830:	40013000 	.word	0x40013000
 8005834:	40003800 	.word	0x40003800
 8005838:	40003c00 	.word	0x40003c00
 800583c:	40013400 	.word	0x40013400
 8005840:	0800a540 	.word	0x0800a540
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d020      	beq.n	800588e <HAL_SPI_Init+0x23e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	2b08      	cmp	r3, #8
 8005852:	d01c      	beq.n	800588e <HAL_SPI_Init+0x23e>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	2b10      	cmp	r3, #16
 800585a:	d018      	beq.n	800588e <HAL_SPI_Init+0x23e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	2b18      	cmp	r3, #24
 8005862:	d014      	beq.n	800588e <HAL_SPI_Init+0x23e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	2b20      	cmp	r3, #32
 800586a:	d010      	beq.n	800588e <HAL_SPI_Init+0x23e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	2b28      	cmp	r3, #40	; 0x28
 8005872:	d00c      	beq.n	800588e <HAL_SPI_Init+0x23e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	2b30      	cmp	r3, #48	; 0x30
 800587a:	d008      	beq.n	800588e <HAL_SPI_Init+0x23e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	2b38      	cmp	r3, #56	; 0x38
 8005882:	d004      	beq.n	800588e <HAL_SPI_Init+0x23e>
 8005884:	f240 115b 	movw	r1, #347	; 0x15b
 8005888:	483a      	ldr	r0, [pc, #232]	; (8005974 <HAL_SPI_Init+0x324>)
 800588a:	f7fc fe24 	bl	80024d6 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d106      	bne.n	80058ba <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7fc ff35 	bl	8002724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	ea42 0103 	orr.w	r1, r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	f003 0104 	and.w	r1, r3, #4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	f003 0210 	and.w	r2, r3, #16
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	69da      	ldr	r2, [r3, #28]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800595a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	0800a540 	.word	0x0800a540

08005978 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	4613      	mov	r3, r2
 8005986:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <HAL_SPI_Transmit+0x30>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800599c:	d004      	beq.n	80059a8 <HAL_SPI_Transmit+0x30>
 800599e:	f240 310a 	movw	r1, #778	; 0x30a
 80059a2:	4893      	ldr	r0, [pc, #588]	; (8005bf0 <HAL_SPI_Transmit+0x278>)
 80059a4:	f7fc fd97 	bl	80024d6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_SPI_Transmit+0x3e>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e128      	b.n	8005c08 <HAL_SPI_Transmit+0x290>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059be:	f7fd fb79 	bl	80030b4 <HAL_GetTick>
 80059c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d002      	beq.n	80059da <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80059d4:	2302      	movs	r3, #2
 80059d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059d8:	e10d      	b.n	8005bf6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_SPI_Transmit+0x6e>
 80059e0:	88fb      	ldrh	r3, [r7, #6]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d102      	bne.n	80059ec <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059ea:	e104      	b.n	8005bf6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2203      	movs	r2, #3
 80059f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	88fa      	ldrh	r2, [r7, #6]
 8005a0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a32:	d10f      	bne.n	8005a54 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5e:	2b40      	cmp	r3, #64	; 0x40
 8005a60:	d007      	beq.n	8005a72 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7a:	d14b      	bne.n	8005b14 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <HAL_SPI_Transmit+0x112>
 8005a84:	8afb      	ldrh	r3, [r7, #22]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d13e      	bne.n	8005b08 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	1c9a      	adds	r2, r3, #2
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005aae:	e02b      	b.n	8005b08 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d112      	bne.n	8005ae4 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	881a      	ldrh	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	1c9a      	adds	r2, r3, #2
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ae2:	e011      	b.n	8005b08 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae4:	f7fd fae6 	bl	80030b4 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d803      	bhi.n	8005afc <HAL_SPI_Transmit+0x184>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d102      	bne.n	8005b02 <HAL_SPI_Transmit+0x18a>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b06:	e076      	b.n	8005bf6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1ce      	bne.n	8005ab0 <HAL_SPI_Transmit+0x138>
 8005b12:	e04c      	b.n	8005bae <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_SPI_Transmit+0x1aa>
 8005b1c:	8afb      	ldrh	r3, [r7, #22]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d140      	bne.n	8005ba4 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	7812      	ldrb	r2, [r2, #0]
 8005b2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b48:	e02c      	b.n	8005ba4 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d113      	bne.n	8005b80 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	330c      	adds	r3, #12
 8005b62:	7812      	ldrb	r2, [r2, #0]
 8005b64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b7e:	e011      	b.n	8005ba4 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b80:	f7fd fa98 	bl	80030b4 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d803      	bhi.n	8005b98 <HAL_SPI_Transmit+0x220>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b96:	d102      	bne.n	8005b9e <HAL_SPI_Transmit+0x226>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d102      	bne.n	8005ba4 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ba2:	e028      	b.n	8005bf6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1cd      	bne.n	8005b4a <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fbda 	bl	800636c <SPI_EndRxTxTransaction>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	613b      	str	r3, [r7, #16]
 8005be0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e002      	b.n	8005bf6 <HAL_SPI_Transmit+0x27e>
 8005bf0:	0800a540 	.word	0x0800a540
  }

error:
 8005bf4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c06:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c2c:	d112      	bne.n	8005c54 <HAL_SPI_Receive+0x44>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10e      	bne.n	8005c54 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2204      	movs	r2, #4
 8005c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c3e:	88fa      	ldrh	r2, [r7, #6]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	4613      	mov	r3, r2
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f8f2 	bl	8005e34 <HAL_SPI_TransmitReceive>
 8005c50:	4603      	mov	r3, r0
 8005c52:	e0ea      	b.n	8005e2a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_SPI_Receive+0x52>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e0e3      	b.n	8005e2a <HAL_SPI_Receive+0x21a>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c6a:	f7fd fa23 	bl	80030b4 <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d002      	beq.n	8005c82 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c80:	e0ca      	b.n	8005e18 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_SPI_Receive+0x7e>
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c92:	e0c1      	b.n	8005e18 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2204      	movs	r2, #4
 8005c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	88fa      	ldrh	r2, [r7, #6]
 8005cb2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cda:	d10f      	bne.n	8005cfc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cfa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b40      	cmp	r3, #64	; 0x40
 8005d08:	d007      	beq.n	8005d1a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d162      	bne.n	8005de8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d22:	e02e      	b.n	8005d82 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d115      	bne.n	8005d5e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f103 020c 	add.w	r2, r3, #12
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	7812      	ldrb	r2, [r2, #0]
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d5c:	e011      	b.n	8005d82 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d5e:	f7fd f9a9 	bl	80030b4 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d803      	bhi.n	8005d76 <HAL_SPI_Receive+0x166>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d102      	bne.n	8005d7c <HAL_SPI_Receive+0x16c>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d102      	bne.n	8005d82 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d80:	e04a      	b.n	8005e18 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1cb      	bne.n	8005d24 <HAL_SPI_Receive+0x114>
 8005d8c:	e031      	b.n	8005df2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d113      	bne.n	8005dc4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	b292      	uxth	r2, r2
 8005da8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	1c9a      	adds	r2, r3, #2
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dc2:	e011      	b.n	8005de8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc4:	f7fd f976 	bl	80030b4 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d803      	bhi.n	8005ddc <HAL_SPI_Receive+0x1cc>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dda:	d102      	bne.n	8005de2 <HAL_SPI_Receive+0x1d2>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005de6:	e017      	b.n	8005e18 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1cd      	bne.n	8005d8e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 fa52 	bl	80062a0 <SPI_EndRxTransaction>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	75fb      	strb	r3, [r7, #23]
 8005e14:	e000      	b.n	8005e18 <HAL_SPI_Receive+0x208>
  }

error :
 8005e16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08c      	sub	sp, #48	; 0x30
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e42:	2301      	movs	r3, #1
 8005e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x2a>
 8005e54:	f240 417e 	movw	r1, #1150	; 0x47e
 8005e58:	4884      	ldr	r0, [pc, #528]	; (800606c <HAL_SPI_TransmitReceive+0x238>)
 8005e5a:	f7fc fb3c 	bl	80024d6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_SPI_TransmitReceive+0x38>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e18d      	b.n	8006188 <HAL_SPI_TransmitReceive+0x354>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e74:	f7fd f91e 	bl	80030b4 <HAL_GetTick>
 8005e78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e8a:	887b      	ldrh	r3, [r7, #2]
 8005e8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d00f      	beq.n	8005eb6 <HAL_SPI_TransmitReceive+0x82>
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e9c:	d107      	bne.n	8005eae <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <HAL_SPI_TransmitReceive+0x7a>
 8005ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d003      	beq.n	8005eb6 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005eb4:	e15e      	b.n	8006174 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_SPI_TransmitReceive+0x94>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_SPI_TransmitReceive+0x94>
 8005ec2:	887b      	ldrh	r3, [r7, #2]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ece:	e151      	b.n	8006174 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d003      	beq.n	8005ee4 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2205      	movs	r2, #5
 8005ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	887a      	ldrh	r2, [r7, #2]
 8005ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	887a      	ldrh	r2, [r7, #2]
 8005efa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	887a      	ldrh	r2, [r7, #2]
 8005f06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	887a      	ldrh	r2, [r7, #2]
 8005f0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d007      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f40:	d178      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_TransmitReceive+0x11c>
 8005f4a:	8b7b      	ldrh	r3, [r7, #26]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d166      	bne.n	800601e <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	881a      	ldrh	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	1c9a      	adds	r2, r3, #2
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f74:	e053      	b.n	800601e <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d11b      	bne.n	8005fbc <HAL_SPI_TransmitReceive+0x188>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d016      	beq.n	8005fbc <HAL_SPI_TransmitReceive+0x188>
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d113      	bne.n	8005fbc <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	881a      	ldrh	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	1c9a      	adds	r2, r3, #2
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d119      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x1ca>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d014      	beq.n	8005ffe <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	b292      	uxth	r2, r2
 8005fe0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	1c9a      	adds	r2, r3, #2
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ffe:	f7fd f859 	bl	80030b4 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800600a:	429a      	cmp	r2, r3
 800600c:	d807      	bhi.n	800601e <HAL_SPI_TransmitReceive+0x1ea>
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d003      	beq.n	800601e <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800601c:	e0aa      	b.n	8006174 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1a6      	bne.n	8005f76 <HAL_SPI_TransmitReceive+0x142>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1a1      	bne.n	8005f76 <HAL_SPI_TransmitReceive+0x142>
 8006032:	e07f      	b.n	8006134 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_SPI_TransmitReceive+0x20e>
 800603c:	8b7b      	ldrh	r3, [r7, #26]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d16e      	bne.n	8006120 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	330c      	adds	r3, #12
 800604c:	7812      	ldrb	r2, [r2, #0]
 800604e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006068:	e05a      	b.n	8006120 <HAL_SPI_TransmitReceive+0x2ec>
 800606a:	bf00      	nop
 800606c:	0800a540 	.word	0x0800a540
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b02      	cmp	r3, #2
 800607c:	d11c      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0x284>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d017      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x284>
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	2b01      	cmp	r3, #1
 800608c:	d114      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330c      	adds	r3, #12
 8006098:	7812      	ldrb	r2, [r2, #0]
 800609a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d119      	bne.n	80060fa <HAL_SPI_TransmitReceive+0x2c6>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d014      	beq.n	80060fa <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060f6:	2301      	movs	r3, #1
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060fa:	f7fc ffdb 	bl	80030b4 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006106:	429a      	cmp	r2, r3
 8006108:	d803      	bhi.n	8006112 <HAL_SPI_TransmitReceive+0x2de>
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006110:	d102      	bne.n	8006118 <HAL_SPI_TransmitReceive+0x2e4>
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	2b00      	cmp	r3, #0
 8006116:	d103      	bne.n	8006120 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800611e:	e029      	b.n	8006174 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1a2      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x23c>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d19d      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f917 	bl	800636c <SPI_EndRxTxTransaction>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d006      	beq.n	8006152 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2220      	movs	r2, #32
 800614e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006150:	e010      	b.n	8006174 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	e000      	b.n	8006174 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8006172:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006184:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006188:	4618      	mov	r0, r3
 800618a:	3730      	adds	r7, #48	; 0x30
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	4613      	mov	r3, r2
 800619e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061a0:	f7fc ff88 	bl	80030b4 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	4413      	add	r3, r2
 80061ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061b0:	f7fc ff80 	bl	80030b4 <HAL_GetTick>
 80061b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061b6:	4b39      	ldr	r3, [pc, #228]	; (800629c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	015b      	lsls	r3, r3, #5
 80061bc:	0d1b      	lsrs	r3, r3, #20
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	fb02 f303 	mul.w	r3, r2, r3
 80061c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061c6:	e054      	b.n	8006272 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d050      	beq.n	8006272 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061d0:	f7fc ff70 	bl	80030b4 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	69fa      	ldr	r2, [r7, #28]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d902      	bls.n	80061e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d13d      	bne.n	8006262 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061fe:	d111      	bne.n	8006224 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006208:	d004      	beq.n	8006214 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006212:	d107      	bne.n	8006224 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006222:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800622c:	d10f      	bne.n	800624e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800624c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e017      	b.n	8006292 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	3b01      	subs	r3, #1
 8006270:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4013      	ands	r3, r2
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	429a      	cmp	r2, r3
 8006280:	bf0c      	ite	eq
 8006282:	2301      	moveq	r3, #1
 8006284:	2300      	movne	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	79fb      	ldrb	r3, [r7, #7]
 800628c:	429a      	cmp	r2, r3
 800628e:	d19b      	bne.n	80061c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3720      	adds	r7, #32
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	200000a4 	.word	0x200000a4

080062a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b4:	d111      	bne.n	80062da <SPI_EndRxTransaction+0x3a>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062be:	d004      	beq.n	80062ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c8:	d107      	bne.n	80062da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e2:	d12a      	bne.n	800633a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ec:	d012      	beq.n	8006314 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2200      	movs	r2, #0
 80062f6:	2180      	movs	r1, #128	; 0x80
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff ff49 	bl	8006190 <SPI_WaitFlagStateUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d02d      	beq.n	8006360 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e026      	b.n	8006362 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2200      	movs	r2, #0
 800631c:	2101      	movs	r1, #1
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f7ff ff36 	bl	8006190 <SPI_WaitFlagStateUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01a      	beq.n	8006360 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e013      	b.n	8006362 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2200      	movs	r2, #0
 8006342:	2101      	movs	r1, #1
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f7ff ff23 	bl	8006190 <SPI_WaitFlagStateUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006354:	f043 0220 	orr.w	r2, r3, #32
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e000      	b.n	8006362 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <SPI_EndRxTxTransaction+0x7c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <SPI_EndRxTxTransaction+0x80>)
 800637e:	fba2 2303 	umull	r2, r3, r2, r3
 8006382:	0d5b      	lsrs	r3, r3, #21
 8006384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006388:	fb02 f303 	mul.w	r3, r2, r3
 800638c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006396:	d112      	bne.n	80063be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2200      	movs	r2, #0
 80063a0:	2180      	movs	r1, #128	; 0x80
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7ff fef4 	bl	8006190 <SPI_WaitFlagStateUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d016      	beq.n	80063dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	f043 0220 	orr.w	r2, r3, #32
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e00f      	b.n	80063de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b80      	cmp	r3, #128	; 0x80
 80063d6:	d0f2      	beq.n	80063be <SPI_EndRxTxTransaction+0x52>
 80063d8:	e000      	b.n	80063dc <SPI_EndRxTxTransaction+0x70>
        break;
 80063da:	bf00      	nop
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	200000a4 	.word	0x200000a4
 80063ec:	165e9f81 	.word	0x165e9f81

080063f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e0c5      	b.n	800658e <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a64      	ldr	r2, [pc, #400]	; (8006598 <HAL_TIM_Base_Init+0x1a8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d045      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006414:	d040      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a60      	ldr	r2, [pc, #384]	; (800659c <HAL_TIM_Base_Init+0x1ac>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d03b      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a5e      	ldr	r2, [pc, #376]	; (80065a0 <HAL_TIM_Base_Init+0x1b0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d036      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a5d      	ldr	r2, [pc, #372]	; (80065a4 <HAL_TIM_Base_Init+0x1b4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d031      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a5b      	ldr	r2, [pc, #364]	; (80065a8 <HAL_TIM_Base_Init+0x1b8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d02c      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a5a      	ldr	r2, [pc, #360]	; (80065ac <HAL_TIM_Base_Init+0x1bc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d027      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a58      	ldr	r2, [pc, #352]	; (80065b0 <HAL_TIM_Base_Init+0x1c0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d022      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a57      	ldr	r2, [pc, #348]	; (80065b4 <HAL_TIM_Base_Init+0x1c4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d01d      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a55      	ldr	r2, [pc, #340]	; (80065b8 <HAL_TIM_Base_Init+0x1c8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d018      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a54      	ldr	r2, [pc, #336]	; (80065bc <HAL_TIM_Base_Init+0x1cc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d013      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a52      	ldr	r2, [pc, #328]	; (80065c0 <HAL_TIM_Base_Init+0x1d0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00e      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a51      	ldr	r2, [pc, #324]	; (80065c4 <HAL_TIM_Base_Init+0x1d4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d009      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a4f      	ldr	r2, [pc, #316]	; (80065c8 <HAL_TIM_Base_Init+0x1d8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <HAL_TIM_Base_Init+0xa8>
 800648e:	f240 1113 	movw	r1, #275	; 0x113
 8006492:	484e      	ldr	r0, [pc, #312]	; (80065cc <HAL_TIM_Base_Init+0x1dc>)
 8006494:	f7fc f81f 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d014      	beq.n	80064ca <HAL_TIM_Base_Init+0xda>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b10      	cmp	r3, #16
 80064a6:	d010      	beq.n	80064ca <HAL_TIM_Base_Init+0xda>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d00c      	beq.n	80064ca <HAL_TIM_Base_Init+0xda>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d008      	beq.n	80064ca <HAL_TIM_Base_Init+0xda>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b60      	cmp	r3, #96	; 0x60
 80064be:	d004      	beq.n	80064ca <HAL_TIM_Base_Init+0xda>
 80064c0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80064c4:	4841      	ldr	r0, [pc, #260]	; (80065cc <HAL_TIM_Base_Init+0x1dc>)
 80064c6:	f7fc f806 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00e      	beq.n	80064f0 <HAL_TIM_Base_Init+0x100>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064da:	d009      	beq.n	80064f0 <HAL_TIM_Base_Init+0x100>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e4:	d004      	beq.n	80064f0 <HAL_TIM_Base_Init+0x100>
 80064e6:	f240 1115 	movw	r1, #277	; 0x115
 80064ea:	4838      	ldr	r0, [pc, #224]	; (80065cc <HAL_TIM_Base_Init+0x1dc>)
 80064ec:	f7fb fff3 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d008      	beq.n	800650a <HAL_TIM_Base_Init+0x11a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	2b80      	cmp	r3, #128	; 0x80
 80064fe:	d004      	beq.n	800650a <HAL_TIM_Base_Init+0x11a>
 8006500:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006504:	4831      	ldr	r0, [pc, #196]	; (80065cc <HAL_TIM_Base_Init+0x1dc>)
 8006506:	f7fb ffe6 	bl	80024d6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fc fa52 	bl	80029c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3304      	adds	r3, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f001 fbb8 	bl	8007cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40010000 	.word	0x40010000
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800
 80065a4:	40000c00 	.word	0x40000c00
 80065a8:	40001000 	.word	0x40001000
 80065ac:	40001400 	.word	0x40001400
 80065b0:	40010400 	.word	0x40010400
 80065b4:	40014000 	.word	0x40014000
 80065b8:	40014400 	.word	0x40014400
 80065bc:	40014800 	.word	0x40014800
 80065c0:	40001800 	.word	0x40001800
 80065c4:	40001c00 	.word	0x40001c00
 80065c8:	40002000 	.word	0x40002000
 80065cc:	0800a578 	.word	0x0800a578

080065d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a51      	ldr	r2, [pc, #324]	; (8006724 <HAL_TIM_Base_Start_IT+0x154>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d045      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ea:	d040      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a4d      	ldr	r2, [pc, #308]	; (8006728 <HAL_TIM_Base_Start_IT+0x158>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d03b      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a4c      	ldr	r2, [pc, #304]	; (800672c <HAL_TIM_Base_Start_IT+0x15c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d036      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a4a      	ldr	r2, [pc, #296]	; (8006730 <HAL_TIM_Base_Start_IT+0x160>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d031      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a49      	ldr	r2, [pc, #292]	; (8006734 <HAL_TIM_Base_Start_IT+0x164>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d02c      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a47      	ldr	r2, [pc, #284]	; (8006738 <HAL_TIM_Base_Start_IT+0x168>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d027      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a46      	ldr	r2, [pc, #280]	; (800673c <HAL_TIM_Base_Start_IT+0x16c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d022      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a44      	ldr	r2, [pc, #272]	; (8006740 <HAL_TIM_Base_Start_IT+0x170>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d01d      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a43      	ldr	r2, [pc, #268]	; (8006744 <HAL_TIM_Base_Start_IT+0x174>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d018      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a41      	ldr	r2, [pc, #260]	; (8006748 <HAL_TIM_Base_Start_IT+0x178>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d013      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a40      	ldr	r2, [pc, #256]	; (800674c <HAL_TIM_Base_Start_IT+0x17c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00e      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a3e      	ldr	r2, [pc, #248]	; (8006750 <HAL_TIM_Base_Start_IT+0x180>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d009      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a3d      	ldr	r2, [pc, #244]	; (8006754 <HAL_TIM_Base_Start_IT+0x184>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d004      	beq.n	800666e <HAL_TIM_Base_Start_IT+0x9e>
 8006664:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006668:	483b      	ldr	r0, [pc, #236]	; (8006758 <HAL_TIM_Base_Start_IT+0x188>)
 800666a:	f7fb ff34 	bl	80024d6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b01      	cmp	r3, #1
 8006678:	d001      	beq.n	800667e <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e04e      	b.n	800671c <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2202      	movs	r2, #2
 8006682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0201 	orr.w	r2, r2, #1
 8006694:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a22      	ldr	r2, [pc, #136]	; (8006724 <HAL_TIM_Base_Start_IT+0x154>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d022      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x116>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a8:	d01d      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x116>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1e      	ldr	r2, [pc, #120]	; (8006728 <HAL_TIM_Base_Start_IT+0x158>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d018      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x116>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1c      	ldr	r2, [pc, #112]	; (800672c <HAL_TIM_Base_Start_IT+0x15c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x116>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1b      	ldr	r2, [pc, #108]	; (8006730 <HAL_TIM_Base_Start_IT+0x160>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00e      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x116>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1b      	ldr	r2, [pc, #108]	; (800673c <HAL_TIM_Base_Start_IT+0x16c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d009      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x116>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1a      	ldr	r2, [pc, #104]	; (8006740 <HAL_TIM_Base_Start_IT+0x170>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x116>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1a      	ldr	r2, [pc, #104]	; (800674c <HAL_TIM_Base_Start_IT+0x17c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d111      	bne.n	800670a <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b06      	cmp	r3, #6
 80066f6:	d010      	beq.n	800671a <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0201 	orr.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006708:	e007      	b.n	800671a <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0201 	orr.w	r2, r2, #1
 8006718:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40010000 	.word	0x40010000
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	40001000 	.word	0x40001000
 8006738:	40001400 	.word	0x40001400
 800673c:	40010400 	.word	0x40010400
 8006740:	40014000 	.word	0x40014000
 8006744:	40014400 	.word	0x40014400
 8006748:	40014800 	.word	0x40014800
 800674c:	40001800 	.word	0x40001800
 8006750:	40001c00 	.word	0x40001c00
 8006754:	40002000 	.word	0x40002000
 8006758:	0800a578 	.word	0x0800a578

0800675c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e0c5      	b.n	80068fa <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a64      	ldr	r2, [pc, #400]	; (8006904 <HAL_TIM_PWM_Init+0x1a8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d045      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006780:	d040      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a60      	ldr	r2, [pc, #384]	; (8006908 <HAL_TIM_PWM_Init+0x1ac>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d03b      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a5e      	ldr	r2, [pc, #376]	; (800690c <HAL_TIM_PWM_Init+0x1b0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d036      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a5d      	ldr	r2, [pc, #372]	; (8006910 <HAL_TIM_PWM_Init+0x1b4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d031      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a5b      	ldr	r2, [pc, #364]	; (8006914 <HAL_TIM_PWM_Init+0x1b8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d02c      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a5a      	ldr	r2, [pc, #360]	; (8006918 <HAL_TIM_PWM_Init+0x1bc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d027      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a58      	ldr	r2, [pc, #352]	; (800691c <HAL_TIM_PWM_Init+0x1c0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d022      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a57      	ldr	r2, [pc, #348]	; (8006920 <HAL_TIM_PWM_Init+0x1c4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d01d      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a55      	ldr	r2, [pc, #340]	; (8006924 <HAL_TIM_PWM_Init+0x1c8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d018      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a54      	ldr	r2, [pc, #336]	; (8006928 <HAL_TIM_PWM_Init+0x1cc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d013      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a52      	ldr	r2, [pc, #328]	; (800692c <HAL_TIM_PWM_Init+0x1d0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00e      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a51      	ldr	r2, [pc, #324]	; (8006930 <HAL_TIM_PWM_Init+0x1d4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a4f      	ldr	r2, [pc, #316]	; (8006934 <HAL_TIM_PWM_Init+0x1d8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d004      	beq.n	8006804 <HAL_TIM_PWM_Init+0xa8>
 80067fa:	f240 5129 	movw	r1, #1321	; 0x529
 80067fe:	484e      	ldr	r0, [pc, #312]	; (8006938 <HAL_TIM_PWM_Init+0x1dc>)
 8006800:	f7fb fe69 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d014      	beq.n	8006836 <HAL_TIM_PWM_Init+0xda>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	2b10      	cmp	r3, #16
 8006812:	d010      	beq.n	8006836 <HAL_TIM_PWM_Init+0xda>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b20      	cmp	r3, #32
 800681a:	d00c      	beq.n	8006836 <HAL_TIM_PWM_Init+0xda>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d008      	beq.n	8006836 <HAL_TIM_PWM_Init+0xda>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b60      	cmp	r3, #96	; 0x60
 800682a:	d004      	beq.n	8006836 <HAL_TIM_PWM_Init+0xda>
 800682c:	f240 512a 	movw	r1, #1322	; 0x52a
 8006830:	4841      	ldr	r0, [pc, #260]	; (8006938 <HAL_TIM_PWM_Init+0x1dc>)
 8006832:	f7fb fe50 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00e      	beq.n	800685c <HAL_TIM_PWM_Init+0x100>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006846:	d009      	beq.n	800685c <HAL_TIM_PWM_Init+0x100>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006850:	d004      	beq.n	800685c <HAL_TIM_PWM_Init+0x100>
 8006852:	f240 512b 	movw	r1, #1323	; 0x52b
 8006856:	4838      	ldr	r0, [pc, #224]	; (8006938 <HAL_TIM_PWM_Init+0x1dc>)
 8006858:	f7fb fe3d 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d008      	beq.n	8006876 <HAL_TIM_PWM_Init+0x11a>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	2b80      	cmp	r3, #128	; 0x80
 800686a:	d004      	beq.n	8006876 <HAL_TIM_PWM_Init+0x11a>
 800686c:	f240 512c 	movw	r1, #1324	; 0x52c
 8006870:	4831      	ldr	r0, [pc, #196]	; (8006938 <HAL_TIM_PWM_Init+0x1dc>)
 8006872:	f7fb fe30 	bl	80024d6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fc f8fe 	bl	8002a8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3304      	adds	r3, #4
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f001 fa02 	bl	8007cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40010000 	.word	0x40010000
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40001000 	.word	0x40001000
 8006918:	40001400 	.word	0x40001400
 800691c:	40010400 	.word	0x40010400
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800
 800692c:	40001800 	.word	0x40001800
 8006930:	40001c00 	.word	0x40001c00
 8006934:	40002000 	.word	0x40002000
 8006938:	0800a578 	.word	0x0800a578

0800693c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a84      	ldr	r2, [pc, #528]	; (8006b5c <HAL_TIM_PWM_Start+0x220>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d10f      	bne.n	8006970 <HAL_TIM_PWM_Start+0x34>
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 809f 	beq.w	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b04      	cmp	r3, #4
 800695c:	f000 809b 	beq.w	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b08      	cmp	r3, #8
 8006964:	f000 8097 	beq.w	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2b0c      	cmp	r3, #12
 800696c:	f000 8093 	beq.w	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006978:	d10e      	bne.n	8006998 <HAL_TIM_PWM_Start+0x5c>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 808a 	beq.w	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b04      	cmp	r3, #4
 8006986:	f000 8086 	beq.w	8006a96 <HAL_TIM_PWM_Start+0x15a>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b08      	cmp	r3, #8
 800698e:	f000 8082 	beq.w	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b0c      	cmp	r3, #12
 8006996:	d07e      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a70      	ldr	r2, [pc, #448]	; (8006b60 <HAL_TIM_PWM_Start+0x224>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d10b      	bne.n	80069ba <HAL_TIM_PWM_Start+0x7e>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d076      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d073      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d070      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b0c      	cmp	r3, #12
 80069b8:	d06d      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a69      	ldr	r2, [pc, #420]	; (8006b64 <HAL_TIM_PWM_Start+0x228>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d10b      	bne.n	80069dc <HAL_TIM_PWM_Start+0xa0>
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d065      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d062      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d05f      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b0c      	cmp	r3, #12
 80069da:	d05c      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a61      	ldr	r2, [pc, #388]	; (8006b68 <HAL_TIM_PWM_Start+0x22c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d10b      	bne.n	80069fe <HAL_TIM_PWM_Start+0xc2>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d054      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d051      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d04e      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b0c      	cmp	r3, #12
 80069fc:	d04b      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a5a      	ldr	r2, [pc, #360]	; (8006b6c <HAL_TIM_PWM_Start+0x230>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d10b      	bne.n	8006a20 <HAL_TIM_PWM_Start+0xe4>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d043      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d040      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b08      	cmp	r3, #8
 8006a18:	d03d      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b0c      	cmp	r3, #12
 8006a1e:	d03a      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a52      	ldr	r2, [pc, #328]	; (8006b70 <HAL_TIM_PWM_Start+0x234>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d105      	bne.n	8006a36 <HAL_TIM_PWM_Start+0xfa>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d032      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d02f      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a4e      	ldr	r2, [pc, #312]	; (8006b74 <HAL_TIM_PWM_Start+0x238>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d102      	bne.n	8006a46 <HAL_TIM_PWM_Start+0x10a>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d027      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a4b      	ldr	r2, [pc, #300]	; (8006b78 <HAL_TIM_PWM_Start+0x23c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d102      	bne.n	8006a56 <HAL_TIM_PWM_Start+0x11a>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01f      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a48      	ldr	r2, [pc, #288]	; (8006b7c <HAL_TIM_PWM_Start+0x240>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d105      	bne.n	8006a6c <HAL_TIM_PWM_Start+0x130>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d017      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d014      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a43      	ldr	r2, [pc, #268]	; (8006b80 <HAL_TIM_PWM_Start+0x244>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d102      	bne.n	8006a7c <HAL_TIM_PWM_Start+0x140>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00c      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a40      	ldr	r2, [pc, #256]	; (8006b84 <HAL_TIM_PWM_Start+0x248>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d102      	bne.n	8006a8c <HAL_TIM_PWM_Start+0x150>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x15a>
 8006a8c:	f240 51af 	movw	r1, #1455	; 0x5af
 8006a90:	483d      	ldr	r0, [pc, #244]	; (8006b88 <HAL_TIM_PWM_Start+0x24c>)
 8006a92:	f7fb fd20 	bl	80024d6 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d109      	bne.n	8006ab0 <HAL_TIM_PWM_Start+0x174>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	bf14      	ite	ne
 8006aa8:	2301      	movne	r3, #1
 8006aaa:	2300      	moveq	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	e022      	b.n	8006af6 <HAL_TIM_PWM_Start+0x1ba>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d109      	bne.n	8006aca <HAL_TIM_PWM_Start+0x18e>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	bf14      	ite	ne
 8006ac2:	2301      	movne	r3, #1
 8006ac4:	2300      	moveq	r3, #0
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	e015      	b.n	8006af6 <HAL_TIM_PWM_Start+0x1ba>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d109      	bne.n	8006ae4 <HAL_TIM_PWM_Start+0x1a8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	bf14      	ite	ne
 8006adc:	2301      	movne	r3, #1
 8006ade:	2300      	moveq	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	e008      	b.n	8006af6 <HAL_TIM_PWM_Start+0x1ba>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	bf14      	ite	ne
 8006af0:	2301      	movne	r3, #1
 8006af2:	2300      	moveq	r3, #0
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e094      	b.n	8006c28 <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d104      	bne.n	8006b0e <HAL_TIM_PWM_Start+0x1d2>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b0c:	e013      	b.n	8006b36 <HAL_TIM_PWM_Start+0x1fa>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d104      	bne.n	8006b1e <HAL_TIM_PWM_Start+0x1e2>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b1c:	e00b      	b.n	8006b36 <HAL_TIM_PWM_Start+0x1fa>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d104      	bne.n	8006b2e <HAL_TIM_PWM_Start+0x1f2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b2c:	e003      	b.n	8006b36 <HAL_TIM_PWM_Start+0x1fa>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 fc28 	bl	8008394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a04      	ldr	r2, [pc, #16]	; (8006b5c <HAL_TIM_PWM_Start+0x220>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <HAL_TIM_PWM_Start+0x21c>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a06      	ldr	r2, [pc, #24]	; (8006b6c <HAL_TIM_PWM_Start+0x230>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d119      	bne.n	8006b8c <HAL_TIM_PWM_Start+0x250>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e018      	b.n	8006b8e <HAL_TIM_PWM_Start+0x252>
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800
 8006b68:	40000c00 	.word	0x40000c00
 8006b6c:	40010400 	.word	0x40010400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400
 8006b78:	40014800 	.word	0x40014800
 8006b7c:	40001800 	.word	0x40001800
 8006b80:	40001c00 	.word	0x40001c00
 8006b84:	40002000 	.word	0x40002000
 8006b88:	0800a578 	.word	0x0800a578
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d007      	beq.n	8006ba2 <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ba0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a22      	ldr	r2, [pc, #136]	; (8006c30 <HAL_TIM_PWM_Start+0x2f4>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d022      	beq.n	8006bf2 <HAL_TIM_PWM_Start+0x2b6>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb4:	d01d      	beq.n	8006bf2 <HAL_TIM_PWM_Start+0x2b6>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1e      	ldr	r2, [pc, #120]	; (8006c34 <HAL_TIM_PWM_Start+0x2f8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d018      	beq.n	8006bf2 <HAL_TIM_PWM_Start+0x2b6>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1c      	ldr	r2, [pc, #112]	; (8006c38 <HAL_TIM_PWM_Start+0x2fc>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d013      	beq.n	8006bf2 <HAL_TIM_PWM_Start+0x2b6>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1b      	ldr	r2, [pc, #108]	; (8006c3c <HAL_TIM_PWM_Start+0x300>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00e      	beq.n	8006bf2 <HAL_TIM_PWM_Start+0x2b6>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a19      	ldr	r2, [pc, #100]	; (8006c40 <HAL_TIM_PWM_Start+0x304>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d009      	beq.n	8006bf2 <HAL_TIM_PWM_Start+0x2b6>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a18      	ldr	r2, [pc, #96]	; (8006c44 <HAL_TIM_PWM_Start+0x308>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <HAL_TIM_PWM_Start+0x2b6>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a16      	ldr	r2, [pc, #88]	; (8006c48 <HAL_TIM_PWM_Start+0x30c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d111      	bne.n	8006c16 <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 0307 	and.w	r3, r3, #7
 8006bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b06      	cmp	r3, #6
 8006c02:	d010      	beq.n	8006c26 <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0201 	orr.w	r2, r2, #1
 8006c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c14:	e007      	b.n	8006c26 <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0201 	orr.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	40010000 	.word	0x40010000
 8006c34:	40000400 	.word	0x40000400
 8006c38:	40000800 	.word	0x40000800
 8006c3c:	40000c00 	.word	0x40000c00
 8006c40:	40010400 	.word	0x40010400
 8006c44:	40014000 	.word	0x40014000
 8006c48:	40001800 	.word	0x40001800

08006c4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e198      	b.n	8006f92 <HAL_TIM_Encoder_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a7d      	ldr	r2, [pc, #500]	; (8006e5c <HAL_TIM_Encoder_Init+0x210>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d027      	beq.n	8006cba <HAL_TIM_Encoder_Init+0x6e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c72:	d022      	beq.n	8006cba <HAL_TIM_Encoder_Init+0x6e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a79      	ldr	r2, [pc, #484]	; (8006e60 <HAL_TIM_Encoder_Init+0x214>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d01d      	beq.n	8006cba <HAL_TIM_Encoder_Init+0x6e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a78      	ldr	r2, [pc, #480]	; (8006e64 <HAL_TIM_Encoder_Init+0x218>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d018      	beq.n	8006cba <HAL_TIM_Encoder_Init+0x6e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a76      	ldr	r2, [pc, #472]	; (8006e68 <HAL_TIM_Encoder_Init+0x21c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d013      	beq.n	8006cba <HAL_TIM_Encoder_Init+0x6e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a75      	ldr	r2, [pc, #468]	; (8006e6c <HAL_TIM_Encoder_Init+0x220>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00e      	beq.n	8006cba <HAL_TIM_Encoder_Init+0x6e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a73      	ldr	r2, [pc, #460]	; (8006e70 <HAL_TIM_Encoder_Init+0x224>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d009      	beq.n	8006cba <HAL_TIM_Encoder_Init+0x6e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a72      	ldr	r2, [pc, #456]	; (8006e74 <HAL_TIM_Encoder_Init+0x228>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d004      	beq.n	8006cba <HAL_TIM_Encoder_Init+0x6e>
 8006cb0:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8006cb4:	4870      	ldr	r0, [pc, #448]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006cb6:	f7fb fc0e 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d014      	beq.n	8006cec <HAL_TIM_Encoder_Init+0xa0>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	2b10      	cmp	r3, #16
 8006cc8:	d010      	beq.n	8006cec <HAL_TIM_Encoder_Init+0xa0>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d00c      	beq.n	8006cec <HAL_TIM_Encoder_Init+0xa0>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d008      	beq.n	8006cec <HAL_TIM_Encoder_Init+0xa0>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	2b60      	cmp	r3, #96	; 0x60
 8006ce0:	d004      	beq.n	8006cec <HAL_TIM_Encoder_Init+0xa0>
 8006ce2:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8006ce6:	4864      	ldr	r0, [pc, #400]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006ce8:	f7fb fbf5 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00e      	beq.n	8006d12 <HAL_TIM_Encoder_Init+0xc6>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cfc:	d009      	beq.n	8006d12 <HAL_TIM_Encoder_Init+0xc6>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d06:	d004      	beq.n	8006d12 <HAL_TIM_Encoder_Init+0xc6>
 8006d08:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8006d0c:	485a      	ldr	r0, [pc, #360]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006d0e:	f7fb fbe2 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d008      	beq.n	8006d2c <HAL_TIM_Encoder_Init+0xe0>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2b80      	cmp	r3, #128	; 0x80
 8006d20:	d004      	beq.n	8006d2c <HAL_TIM_Encoder_Init+0xe0>
 8006d22:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8006d26:	4854      	ldr	r0, [pc, #336]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006d28:	f7fb fbd5 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d00c      	beq.n	8006d4e <HAL_TIM_Encoder_Init+0x102>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d008      	beq.n	8006d4e <HAL_TIM_Encoder_Init+0x102>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d004      	beq.n	8006d4e <HAL_TIM_Encoder_Init+0x102>
 8006d44:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8006d48:	484b      	ldr	r0, [pc, #300]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006d4a:	f7fb fbc4 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d00c      	beq.n	8006d70 <HAL_TIM_Encoder_Init+0x124>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d008      	beq.n	8006d70 <HAL_TIM_Encoder_Init+0x124>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d004      	beq.n	8006d70 <HAL_TIM_Encoder_Init+0x124>
 8006d66:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8006d6a:	4843      	ldr	r0, [pc, #268]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006d6c:	f7fb fbb3 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d00c      	beq.n	8006d92 <HAL_TIM_Encoder_Init+0x146>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d008      	beq.n	8006d92 <HAL_TIM_Encoder_Init+0x146>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d004      	beq.n	8006d92 <HAL_TIM_Encoder_Init+0x146>
 8006d88:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8006d8c:	483a      	ldr	r0, [pc, #232]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006d8e:	f7fb fba2 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d008      	beq.n	8006dac <HAL_TIM_Encoder_Init+0x160>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d004      	beq.n	8006dac <HAL_TIM_Encoder_Init+0x160>
 8006da2:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8006da6:	4834      	ldr	r0, [pc, #208]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006da8:	f7fb fb95 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d008      	beq.n	8006dc6 <HAL_TIM_Encoder_Init+0x17a>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d004      	beq.n	8006dc6 <HAL_TIM_Encoder_Init+0x17a>
 8006dbc:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8006dc0:	482d      	ldr	r0, [pc, #180]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006dc2:	f7fb fb88 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d010      	beq.n	8006df0 <HAL_TIM_Encoder_Init+0x1a4>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d00c      	beq.n	8006df0 <HAL_TIM_Encoder_Init+0x1a4>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d008      	beq.n	8006df0 <HAL_TIM_Encoder_Init+0x1a4>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	2b0c      	cmp	r3, #12
 8006de4:	d004      	beq.n	8006df0 <HAL_TIM_Encoder_Init+0x1a4>
 8006de6:	f640 31da 	movw	r1, #3034	; 0xbda
 8006dea:	4823      	ldr	r0, [pc, #140]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006dec:	f7fb fb73 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	69db      	ldr	r3, [r3, #28]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d010      	beq.n	8006e1a <HAL_TIM_Encoder_Init+0x1ce>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d00c      	beq.n	8006e1a <HAL_TIM_Encoder_Init+0x1ce>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d008      	beq.n	8006e1a <HAL_TIM_Encoder_Init+0x1ce>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	2b0c      	cmp	r3, #12
 8006e0e:	d004      	beq.n	8006e1a <HAL_TIM_Encoder_Init+0x1ce>
 8006e10:	f640 31db 	movw	r1, #3035	; 0xbdb
 8006e14:	4818      	ldr	r0, [pc, #96]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006e16:	f7fb fb5e 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	d904      	bls.n	8006e2c <HAL_TIM_Encoder_Init+0x1e0>
 8006e22:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8006e26:	4814      	ldr	r0, [pc, #80]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006e28:	f7fb fb55 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	2b0f      	cmp	r3, #15
 8006e32:	d904      	bls.n	8006e3e <HAL_TIM_Encoder_Init+0x1f2>
 8006e34:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8006e38:	480f      	ldr	r0, [pc, #60]	; (8006e78 <HAL_TIM_Encoder_Init+0x22c>)
 8006e3a:	f7fb fb4c 	bl	80024d6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d118      	bne.n	8006e7c <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fb fe42 	bl	8002adc <HAL_TIM_Encoder_MspInit>
 8006e58:	e010      	b.n	8006e7c <HAL_TIM_Encoder_Init+0x230>
 8006e5a:	bf00      	nop
 8006e5c:	40010000 	.word	0x40010000
 8006e60:	40000400 	.word	0x40000400
 8006e64:	40000800 	.word	0x40000800
 8006e68:	40000c00 	.word	0x40000c00
 8006e6c:	40010400 	.word	0x40010400
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40001800 	.word	0x40001800
 8006e78:	0800a578 	.word	0x0800a578
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6812      	ldr	r2, [r2, #0]
 8006e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e92:	f023 0307 	bic.w	r3, r3, #7
 8006e96:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f000 ff02 	bl	8007cac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed0:	f023 0303 	bic.w	r3, r3, #3
 8006ed4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	021b      	lsls	r3, r3, #8
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006eee:	f023 030c 	bic.w	r3, r3, #12
 8006ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	011a      	lsls	r2, r3, #4
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	031b      	lsls	r3, r3, #12
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f2c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f34:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	4313      	orrs	r3, r2
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop

08006f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d122      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d11b      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f06f 0202 	mvn.w	r2, #2
 8006fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fe46 	bl	8007c70 <HAL_TIM_IC_CaptureCallback>
 8006fe4:	e005      	b.n	8006ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fe38 	bl	8007c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fe49 	bl	8007c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0304 	and.w	r3, r3, #4
 8007002:	2b04      	cmp	r3, #4
 8007004:	d122      	bne.n	800704c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b04      	cmp	r3, #4
 8007012:	d11b      	bne.n	800704c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0204 	mvn.w	r2, #4
 800701c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fe1c 	bl	8007c70 <HAL_TIM_IC_CaptureCallback>
 8007038:	e005      	b.n	8007046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fe0e 	bl	8007c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fe1f 	bl	8007c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b08      	cmp	r3, #8
 8007058:	d122      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b08      	cmp	r3, #8
 8007066:	d11b      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f06f 0208 	mvn.w	r2, #8
 8007070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2204      	movs	r2, #4
 8007076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fdf2 	bl	8007c70 <HAL_TIM_IC_CaptureCallback>
 800708c:	e005      	b.n	800709a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fde4 	bl	8007c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fdf5 	bl	8007c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	f003 0310 	and.w	r3, r3, #16
 80070aa:	2b10      	cmp	r3, #16
 80070ac:	d122      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f003 0310 	and.w	r3, r3, #16
 80070b8:	2b10      	cmp	r3, #16
 80070ba:	d11b      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f06f 0210 	mvn.w	r2, #16
 80070c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2208      	movs	r2, #8
 80070ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fdc8 	bl	8007c70 <HAL_TIM_IC_CaptureCallback>
 80070e0:	e005      	b.n	80070ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fdba 	bl	8007c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fdcb 	bl	8007c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d10e      	bne.n	8007120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b01      	cmp	r3, #1
 800710e:	d107      	bne.n	8007120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0201 	mvn.w	r2, #1
 8007118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fa f8d0 	bl	80012c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712a:	2b80      	cmp	r3, #128	; 0x80
 800712c:	d10e      	bne.n	800714c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007138:	2b80      	cmp	r3, #128	; 0x80
 800713a:	d107      	bne.n	800714c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 fb5c 	bl	8008804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007156:	2b40      	cmp	r3, #64	; 0x40
 8007158:	d10e      	bne.n	8007178 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007164:	2b40      	cmp	r3, #64	; 0x40
 8007166:	d107      	bne.n	8007178 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fd90 	bl	8007c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b20      	cmp	r3, #32
 8007184:	d10e      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b20      	cmp	r3, #32
 8007192:	d107      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0220 	mvn.w	r2, #32
 800719c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fb26 	bl	80087f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d010      	beq.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x38>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d00d      	beq.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x38>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d00a      	beq.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x38>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b0c      	cmp	r3, #12
 80071d2:	d007      	beq.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x38>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b3c      	cmp	r3, #60	; 0x3c
 80071d8:	d004      	beq.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x38>
 80071da:	f241 0177 	movw	r1, #4215	; 0x1077
 80071de:	4883      	ldr	r0, [pc, #524]	; (80073ec <HAL_TIM_PWM_ConfigChannel+0x240>)
 80071e0:	f7fb f979 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b60      	cmp	r3, #96	; 0x60
 80071ea:	d008      	beq.n	80071fe <HAL_TIM_PWM_ConfigChannel+0x52>
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b70      	cmp	r3, #112	; 0x70
 80071f2:	d004      	beq.n	80071fe <HAL_TIM_PWM_ConfigChannel+0x52>
 80071f4:	f241 0178 	movw	r1, #4216	; 0x1078
 80071f8:	487c      	ldr	r0, [pc, #496]	; (80073ec <HAL_TIM_PWM_ConfigChannel+0x240>)
 80071fa:	f7fb f96c 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d008      	beq.n	8007218 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	2b02      	cmp	r3, #2
 800720c:	d004      	beq.n	8007218 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800720e:	f241 0179 	movw	r1, #4217	; 0x1079
 8007212:	4876      	ldr	r0, [pc, #472]	; (80073ec <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007214:	f7fb f95f 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d008      	beq.n	8007232 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	2b04      	cmp	r3, #4
 8007226:	d004      	beq.n	8007232 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007228:	f241 017a 	movw	r1, #4218	; 0x107a
 800722c:	486f      	ldr	r0, [pc, #444]	; (80073ec <HAL_TIM_PWM_ConfigChannel+0x240>)
 800722e:	f7fb f952 	bl	80024d6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_TIM_PWM_ConfigChannel+0x94>
 800723c:	2302      	movs	r3, #2
 800723e:	e17c      	b.n	800753a <HAL_TIM_PWM_ConfigChannel+0x38e>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b0c      	cmp	r3, #12
 800724c:	f200 816d 	bhi.w	800752a <HAL_TIM_PWM_ConfigChannel+0x37e>
 8007250:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8007252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007256:	bf00      	nop
 8007258:	0800728d 	.word	0x0800728d
 800725c:	0800752b 	.word	0x0800752b
 8007260:	0800752b 	.word	0x0800752b
 8007264:	0800752b 	.word	0x0800752b
 8007268:	0800734f 	.word	0x0800734f
 800726c:	0800752b 	.word	0x0800752b
 8007270:	0800752b 	.word	0x0800752b
 8007274:	0800752b 	.word	0x0800752b
 8007278:	0800741d 	.word	0x0800741d
 800727c:	0800752b 	.word	0x0800752b
 8007280:	0800752b 	.word	0x0800752b
 8007284:	0800752b 	.word	0x0800752b
 8007288:	080074a3 	.word	0x080074a3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a57      	ldr	r2, [pc, #348]	; (80073f0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d03b      	beq.n	800730e <HAL_TIM_PWM_ConfigChannel+0x162>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729e:	d036      	beq.n	800730e <HAL_TIM_PWM_ConfigChannel+0x162>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a53      	ldr	r2, [pc, #332]	; (80073f4 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d031      	beq.n	800730e <HAL_TIM_PWM_ConfigChannel+0x162>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a52      	ldr	r2, [pc, #328]	; (80073f8 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d02c      	beq.n	800730e <HAL_TIM_PWM_ConfigChannel+0x162>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a50      	ldr	r2, [pc, #320]	; (80073fc <HAL_TIM_PWM_ConfigChannel+0x250>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d027      	beq.n	800730e <HAL_TIM_PWM_ConfigChannel+0x162>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a4f      	ldr	r2, [pc, #316]	; (8007400 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d022      	beq.n	800730e <HAL_TIM_PWM_ConfigChannel+0x162>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a4d      	ldr	r2, [pc, #308]	; (8007404 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01d      	beq.n	800730e <HAL_TIM_PWM_ConfigChannel+0x162>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a4c      	ldr	r2, [pc, #304]	; (8007408 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d018      	beq.n	800730e <HAL_TIM_PWM_ConfigChannel+0x162>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a4a      	ldr	r2, [pc, #296]	; (800740c <HAL_TIM_PWM_ConfigChannel+0x260>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d013      	beq.n	800730e <HAL_TIM_PWM_ConfigChannel+0x162>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a49      	ldr	r2, [pc, #292]	; (8007410 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00e      	beq.n	800730e <HAL_TIM_PWM_ConfigChannel+0x162>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a47      	ldr	r2, [pc, #284]	; (8007414 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d009      	beq.n	800730e <HAL_TIM_PWM_ConfigChannel+0x162>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a46      	ldr	r2, [pc, #280]	; (8007418 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d004      	beq.n	800730e <HAL_TIM_PWM_ConfigChannel+0x162>
 8007304:	f241 0184 	movw	r1, #4228	; 0x1084
 8007308:	4838      	ldr	r0, [pc, #224]	; (80073ec <HAL_TIM_PWM_ConfigChannel+0x240>)
 800730a:	f7fb f8e4 	bl	80024d6 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fd69 	bl	8007dec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	699a      	ldr	r2, [r3, #24]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f042 0208 	orr.w	r2, r2, #8
 8007328:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0204 	bic.w	r2, r2, #4
 8007338:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6999      	ldr	r1, [r3, #24]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	619a      	str	r2, [r3, #24]
      break;
 800734c:	e0f0      	b.n	8007530 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a27      	ldr	r2, [pc, #156]	; (80073f0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d027      	beq.n	80073a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007360:	d022      	beq.n	80073a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a23      	ldr	r2, [pc, #140]	; (80073f4 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d01d      	beq.n	80073a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a21      	ldr	r2, [pc, #132]	; (80073f8 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d018      	beq.n	80073a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a20      	ldr	r2, [pc, #128]	; (80073fc <HAL_TIM_PWM_ConfigChannel+0x250>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d013      	beq.n	80073a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1e      	ldr	r2, [pc, #120]	; (8007400 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00e      	beq.n	80073a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d009      	beq.n	80073a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a1d      	ldr	r2, [pc, #116]	; (8007410 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d004      	beq.n	80073a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800739e:	f241 0195 	movw	r1, #4245	; 0x1095
 80073a2:	4812      	ldr	r0, [pc, #72]	; (80073ec <HAL_TIM_PWM_ConfigChannel+0x240>)
 80073a4:	f7fb f897 	bl	80024d6 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fdb6 	bl	8007f20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6999      	ldr	r1, [r3, #24]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	021a      	lsls	r2, r3, #8
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	619a      	str	r2, [r3, #24]
      break;
 80073e8:	e0a2      	b.n	8007530 <HAL_TIM_PWM_ConfigChannel+0x384>
 80073ea:	bf00      	nop
 80073ec:	0800a578 	.word	0x0800a578
 80073f0:	40010000 	.word	0x40010000
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800
 80073fc:	40000c00 	.word	0x40000c00
 8007400:	40010400 	.word	0x40010400
 8007404:	40014000 	.word	0x40014000
 8007408:	40014400 	.word	0x40014400
 800740c:	40014800 	.word	0x40014800
 8007410:	40001800 	.word	0x40001800
 8007414:	40001c00 	.word	0x40001c00
 8007418:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a48      	ldr	r2, [pc, #288]	; (8007544 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d01d      	beq.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742e:	d018      	beq.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a44      	ldr	r2, [pc, #272]	; (8007548 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d013      	beq.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a43      	ldr	r2, [pc, #268]	; (800754c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00e      	beq.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a41      	ldr	r2, [pc, #260]	; (8007550 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d009      	beq.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a40      	ldr	r2, [pc, #256]	; (8007554 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d004      	beq.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8007458:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800745c:	483e      	ldr	r0, [pc, #248]	; (8007558 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800745e:	f7fb f83a 	bl	80024d6 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68b9      	ldr	r1, [r7, #8]
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fdf7 	bl	800805c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69da      	ldr	r2, [r3, #28]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f042 0208 	orr.w	r2, r2, #8
 800747c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69da      	ldr	r2, [r3, #28]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0204 	bic.w	r2, r2, #4
 800748c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69d9      	ldr	r1, [r3, #28]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	691a      	ldr	r2, [r3, #16]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	61da      	str	r2, [r3, #28]
      break;
 80074a0:	e046      	b.n	8007530 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a27      	ldr	r2, [pc, #156]	; (8007544 <HAL_TIM_PWM_ConfigChannel+0x398>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d01d      	beq.n	80074e8 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b4:	d018      	beq.n	80074e8 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a23      	ldr	r2, [pc, #140]	; (8007548 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a21      	ldr	r2, [pc, #132]	; (800754c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00e      	beq.n	80074e8 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a20      	ldr	r2, [pc, #128]	; (8007550 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d009      	beq.n	80074e8 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1e      	ldr	r2, [pc, #120]	; (8007554 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80074de:	f241 01b7 	movw	r1, #4279	; 0x10b7
 80074e2:	481d      	ldr	r0, [pc, #116]	; (8007558 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80074e4:	f7fa fff7 	bl	80024d6 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68b9      	ldr	r1, [r7, #8]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 fe52 	bl	8008198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	69da      	ldr	r2, [r3, #28]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007502:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007512:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69d9      	ldr	r1, [r3, #28]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	021a      	lsls	r2, r3, #8
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	61da      	str	r2, [r3, #28]
      break;
 8007528:	e002      	b.n	8007530 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	75fb      	strb	r3, [r7, #23]
      break;
 800752e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	40010000 	.word	0x40010000
 8007548:	40000400 	.word	0x40000400
 800754c:	40000800 	.word	0x40000800
 8007550:	40000c00 	.word	0x40000c00
 8007554:	40010400 	.word	0x40010400
 8007558:	0800a578 	.word	0x0800a578

0800755c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_TIM_ConfigClockSource+0x1c>
 8007574:	2302      	movs	r3, #2
 8007576:	e35c      	b.n	8007c32 <HAL_TIM_ConfigClockSource+0x6d6>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007590:	d029      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x8a>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800759a:	d024      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x8a>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d020      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x8a>
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b10      	cmp	r3, #16
 80075aa:	d01c      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x8a>
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	d018      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x8a>
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b30      	cmp	r3, #48	; 0x30
 80075ba:	d014      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x8a>
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b40      	cmp	r3, #64	; 0x40
 80075c2:	d010      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x8a>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b50      	cmp	r3, #80	; 0x50
 80075ca:	d00c      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x8a>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b60      	cmp	r3, #96	; 0x60
 80075d2:	d008      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x8a>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b70      	cmp	r3, #112	; 0x70
 80075da:	d004      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x8a>
 80075dc:	f241 41bb 	movw	r1, #5307	; 0x14bb
 80075e0:	4893      	ldr	r0, [pc, #588]	; (8007830 <HAL_TIM_ConfigClockSource+0x2d4>)
 80075e2:	f7fa ff78 	bl	80024d6 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075fc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800760e:	f000 812b 	beq.w	8007868 <HAL_TIM_ConfigClockSource+0x30c>
 8007612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007616:	f200 82ff 	bhi.w	8007c18 <HAL_TIM_ConfigClockSource+0x6bc>
 800761a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761e:	d02e      	beq.n	800767e <HAL_TIM_ConfigClockSource+0x122>
 8007620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007624:	f200 82f8 	bhi.w	8007c18 <HAL_TIM_ConfigClockSource+0x6bc>
 8007628:	2b70      	cmp	r3, #112	; 0x70
 800762a:	f000 8082 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1d6>
 800762e:	2b70      	cmp	r3, #112	; 0x70
 8007630:	f200 82f2 	bhi.w	8007c18 <HAL_TIM_ConfigClockSource+0x6bc>
 8007634:	2b60      	cmp	r3, #96	; 0x60
 8007636:	f000 81e8 	beq.w	8007a0a <HAL_TIM_ConfigClockSource+0x4ae>
 800763a:	2b60      	cmp	r3, #96	; 0x60
 800763c:	f200 82ec 	bhi.w	8007c18 <HAL_TIM_ConfigClockSource+0x6bc>
 8007640:	2b50      	cmp	r3, #80	; 0x50
 8007642:	f000 8182 	beq.w	800794a <HAL_TIM_ConfigClockSource+0x3ee>
 8007646:	2b50      	cmp	r3, #80	; 0x50
 8007648:	f200 82e6 	bhi.w	8007c18 <HAL_TIM_ConfigClockSource+0x6bc>
 800764c:	2b40      	cmp	r3, #64	; 0x40
 800764e:	f000 824d 	beq.w	8007aec <HAL_TIM_ConfigClockSource+0x590>
 8007652:	2b40      	cmp	r3, #64	; 0x40
 8007654:	f200 82e0 	bhi.w	8007c18 <HAL_TIM_ConfigClockSource+0x6bc>
 8007658:	2b30      	cmp	r3, #48	; 0x30
 800765a:	f000 82a7 	beq.w	8007bac <HAL_TIM_ConfigClockSource+0x650>
 800765e:	2b30      	cmp	r3, #48	; 0x30
 8007660:	f200 82da 	bhi.w	8007c18 <HAL_TIM_ConfigClockSource+0x6bc>
 8007664:	2b20      	cmp	r3, #32
 8007666:	f000 82a1 	beq.w	8007bac <HAL_TIM_ConfigClockSource+0x650>
 800766a:	2b20      	cmp	r3, #32
 800766c:	f200 82d4 	bhi.w	8007c18 <HAL_TIM_ConfigClockSource+0x6bc>
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 829b 	beq.w	8007bac <HAL_TIM_ConfigClockSource+0x650>
 8007676:	2b10      	cmp	r3, #16
 8007678:	f000 8298 	beq.w	8007bac <HAL_TIM_ConfigClockSource+0x650>
 800767c:	e2cc      	b.n	8007c18 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a6c      	ldr	r2, [pc, #432]	; (8007834 <HAL_TIM_ConfigClockSource+0x2d8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	f000 82ca 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007692:	f000 82c4 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a67      	ldr	r2, [pc, #412]	; (8007838 <HAL_TIM_ConfigClockSource+0x2dc>)
 800769c:	4293      	cmp	r3, r2
 800769e:	f000 82be 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a65      	ldr	r2, [pc, #404]	; (800783c <HAL_TIM_ConfigClockSource+0x2e0>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	f000 82b8 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a63      	ldr	r2, [pc, #396]	; (8007840 <HAL_TIM_ConfigClockSource+0x2e4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	f000 82b2 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a61      	ldr	r2, [pc, #388]	; (8007844 <HAL_TIM_ConfigClockSource+0x2e8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	f000 82ac 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a5f      	ldr	r2, [pc, #380]	; (8007848 <HAL_TIM_ConfigClockSource+0x2ec>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	f000 82a6 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a5d      	ldr	r2, [pc, #372]	; (800784c <HAL_TIM_ConfigClockSource+0x2f0>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	f000 82a0 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a5b      	ldr	r2, [pc, #364]	; (8007850 <HAL_TIM_ConfigClockSource+0x2f4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	f000 829a 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a59      	ldr	r2, [pc, #356]	; (8007854 <HAL_TIM_ConfigClockSource+0x2f8>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	f000 8294 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a57      	ldr	r2, [pc, #348]	; (8007858 <HAL_TIM_ConfigClockSource+0x2fc>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	f000 828e 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a55      	ldr	r2, [pc, #340]	; (800785c <HAL_TIM_ConfigClockSource+0x300>)
 8007708:	4293      	cmp	r3, r2
 800770a:	f000 8288 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a53      	ldr	r2, [pc, #332]	; (8007860 <HAL_TIM_ConfigClockSource+0x304>)
 8007714:	4293      	cmp	r3, r2
 8007716:	f000 8282 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a51      	ldr	r2, [pc, #324]	; (8007864 <HAL_TIM_ConfigClockSource+0x308>)
 8007720:	4293      	cmp	r3, r2
 8007722:	f000 827c 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
 8007726:	f241 41c7 	movw	r1, #5319	; 0x14c7
 800772a:	4841      	ldr	r0, [pc, #260]	; (8007830 <HAL_TIM_ConfigClockSource+0x2d4>)
 800772c:	f7fa fed3 	bl	80024d6 <assert_failed>
      break;
 8007730:	e275      	b.n	8007c1e <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a3f      	ldr	r2, [pc, #252]	; (8007834 <HAL_TIM_ConfigClockSource+0x2d8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d027      	beq.n	800778c <HAL_TIM_ConfigClockSource+0x230>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007744:	d022      	beq.n	800778c <HAL_TIM_ConfigClockSource+0x230>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a3b      	ldr	r2, [pc, #236]	; (8007838 <HAL_TIM_ConfigClockSource+0x2dc>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d01d      	beq.n	800778c <HAL_TIM_ConfigClockSource+0x230>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a39      	ldr	r2, [pc, #228]	; (800783c <HAL_TIM_ConfigClockSource+0x2e0>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d018      	beq.n	800778c <HAL_TIM_ConfigClockSource+0x230>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a38      	ldr	r2, [pc, #224]	; (8007840 <HAL_TIM_ConfigClockSource+0x2e4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d013      	beq.n	800778c <HAL_TIM_ConfigClockSource+0x230>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a38      	ldr	r2, [pc, #224]	; (800784c <HAL_TIM_ConfigClockSource+0x2f0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00e      	beq.n	800778c <HAL_TIM_ConfigClockSource+0x230>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a37      	ldr	r2, [pc, #220]	; (8007850 <HAL_TIM_ConfigClockSource+0x2f4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d009      	beq.n	800778c <HAL_TIM_ConfigClockSource+0x230>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a37      	ldr	r2, [pc, #220]	; (800785c <HAL_TIM_ConfigClockSource+0x300>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_TIM_ConfigClockSource+0x230>
 8007782:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8007786:	482a      	ldr	r0, [pc, #168]	; (8007830 <HAL_TIM_ConfigClockSource+0x2d4>)
 8007788:	f7fa fea5 	bl	80024d6 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d013      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x260>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800779c:	d00e      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x260>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a6:	d009      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x260>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077b0:	d004      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x260>
 80077b2:	f241 41d1 	movw	r1, #5329	; 0x14d1
 80077b6:	481e      	ldr	r0, [pc, #120]	; (8007830 <HAL_TIM_ConfigClockSource+0x2d4>)
 80077b8:	f7fa fe8d 	bl	80024d6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c4:	d014      	beq.n	80077f0 <HAL_TIM_ConfigClockSource+0x294>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d010      	beq.n	80077f0 <HAL_TIM_ConfigClockSource+0x294>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00c      	beq.n	80077f0 <HAL_TIM_ConfigClockSource+0x294>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d008      	beq.n	80077f0 <HAL_TIM_ConfigClockSource+0x294>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b0a      	cmp	r3, #10
 80077e4:	d004      	beq.n	80077f0 <HAL_TIM_ConfigClockSource+0x294>
 80077e6:	f241 41d2 	movw	r1, #5330	; 0x14d2
 80077ea:	4811      	ldr	r0, [pc, #68]	; (8007830 <HAL_TIM_ConfigClockSource+0x2d4>)
 80077ec:	f7fa fe73 	bl	80024d6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	2b0f      	cmp	r3, #15
 80077f6:	d904      	bls.n	8007802 <HAL_TIM_ConfigClockSource+0x2a6>
 80077f8:	f241 41d3 	movw	r1, #5331	; 0x14d3
 80077fc:	480c      	ldr	r0, [pc, #48]	; (8007830 <HAL_TIM_ConfigClockSource+0x2d4>)
 80077fe:	f7fa fe6a 	bl	80024d6 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	6899      	ldr	r1, [r3, #8]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f000 fd9f 	bl	8008354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007824:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	609a      	str	r2, [r3, #8]
      break;
 800782e:	e1f7      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x6c4>
 8007830:	0800a578 	.word	0x0800a578
 8007834:	40010000 	.word	0x40010000
 8007838:	40000400 	.word	0x40000400
 800783c:	40000800 	.word	0x40000800
 8007840:	40000c00 	.word	0x40000c00
 8007844:	40001000 	.word	0x40001000
 8007848:	40001400 	.word	0x40001400
 800784c:	40010400 	.word	0x40010400
 8007850:	40014000 	.word	0x40014000
 8007854:	40014400 	.word	0x40014400
 8007858:	40014800 	.word	0x40014800
 800785c:	40001800 	.word	0x40001800
 8007860:	40001c00 	.word	0x40001c00
 8007864:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a97      	ldr	r2, [pc, #604]	; (8007acc <HAL_TIM_ConfigClockSource+0x570>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d01d      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0x352>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787a:	d018      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0x352>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a93      	ldr	r2, [pc, #588]	; (8007ad0 <HAL_TIM_ConfigClockSource+0x574>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d013      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0x352>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a92      	ldr	r2, [pc, #584]	; (8007ad4 <HAL_TIM_ConfigClockSource+0x578>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00e      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0x352>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a90      	ldr	r2, [pc, #576]	; (8007ad8 <HAL_TIM_ConfigClockSource+0x57c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d009      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0x352>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a8f      	ldr	r2, [pc, #572]	; (8007adc <HAL_TIM_ConfigClockSource+0x580>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d004      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0x352>
 80078a4:	f241 41e6 	movw	r1, #5350	; 0x14e6
 80078a8:	488d      	ldr	r0, [pc, #564]	; (8007ae0 <HAL_TIM_ConfigClockSource+0x584>)
 80078aa:	f7fa fe14 	bl	80024d6 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d013      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x382>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078be:	d00e      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x382>
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c8:	d009      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x382>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078d2:	d004      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x382>
 80078d4:	f241 41e9 	movw	r1, #5353	; 0x14e9
 80078d8:	4881      	ldr	r0, [pc, #516]	; (8007ae0 <HAL_TIM_ConfigClockSource+0x584>)
 80078da:	f7fa fdfc 	bl	80024d6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078e6:	d014      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0x3b6>
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d010      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0x3b6>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00c      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0x3b6>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d008      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0x3b6>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	2b0a      	cmp	r3, #10
 8007906:	d004      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0x3b6>
 8007908:	f241 41ea 	movw	r1, #5354	; 0x14ea
 800790c:	4874      	ldr	r0, [pc, #464]	; (8007ae0 <HAL_TIM_ConfigClockSource+0x584>)
 800790e:	f7fa fde2 	bl	80024d6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	2b0f      	cmp	r3, #15
 8007918:	d904      	bls.n	8007924 <HAL_TIM_ConfigClockSource+0x3c8>
 800791a:	f241 41eb 	movw	r1, #5355	; 0x14eb
 800791e:	4870      	ldr	r0, [pc, #448]	; (8007ae0 <HAL_TIM_ConfigClockSource+0x584>)
 8007920:	f7fa fdd9 	bl	80024d6 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6818      	ldr	r0, [r3, #0]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	6899      	ldr	r1, [r3, #8]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f000 fd0e 	bl	8008354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007946:	609a      	str	r2, [r3, #8]
      break;
 8007948:	e16a      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a5f      	ldr	r2, [pc, #380]	; (8007acc <HAL_TIM_ConfigClockSource+0x570>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d027      	beq.n	80079a4 <HAL_TIM_ConfigClockSource+0x448>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795c:	d022      	beq.n	80079a4 <HAL_TIM_ConfigClockSource+0x448>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a5b      	ldr	r2, [pc, #364]	; (8007ad0 <HAL_TIM_ConfigClockSource+0x574>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d01d      	beq.n	80079a4 <HAL_TIM_ConfigClockSource+0x448>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a59      	ldr	r2, [pc, #356]	; (8007ad4 <HAL_TIM_ConfigClockSource+0x578>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d018      	beq.n	80079a4 <HAL_TIM_ConfigClockSource+0x448>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a58      	ldr	r2, [pc, #352]	; (8007ad8 <HAL_TIM_ConfigClockSource+0x57c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d013      	beq.n	80079a4 <HAL_TIM_ConfigClockSource+0x448>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a56      	ldr	r2, [pc, #344]	; (8007adc <HAL_TIM_ConfigClockSource+0x580>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00e      	beq.n	80079a4 <HAL_TIM_ConfigClockSource+0x448>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a56      	ldr	r2, [pc, #344]	; (8007ae4 <HAL_TIM_ConfigClockSource+0x588>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d009      	beq.n	80079a4 <HAL_TIM_ConfigClockSource+0x448>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a54      	ldr	r2, [pc, #336]	; (8007ae8 <HAL_TIM_ConfigClockSource+0x58c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d004      	beq.n	80079a4 <HAL_TIM_ConfigClockSource+0x448>
 800799a:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800799e:	4850      	ldr	r0, [pc, #320]	; (8007ae0 <HAL_TIM_ConfigClockSource+0x584>)
 80079a0:	f7fa fd99 	bl	80024d6 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ac:	d014      	beq.n	80079d8 <HAL_TIM_ConfigClockSource+0x47c>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d010      	beq.n	80079d8 <HAL_TIM_ConfigClockSource+0x47c>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00c      	beq.n	80079d8 <HAL_TIM_ConfigClockSource+0x47c>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d008      	beq.n	80079d8 <HAL_TIM_ConfigClockSource+0x47c>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2b0a      	cmp	r3, #10
 80079cc:	d004      	beq.n	80079d8 <HAL_TIM_ConfigClockSource+0x47c>
 80079ce:	f241 41fd 	movw	r1, #5373	; 0x14fd
 80079d2:	4843      	ldr	r0, [pc, #268]	; (8007ae0 <HAL_TIM_ConfigClockSource+0x584>)
 80079d4:	f7fa fd7f 	bl	80024d6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	2b0f      	cmp	r3, #15
 80079de:	d904      	bls.n	80079ea <HAL_TIM_ConfigClockSource+0x48e>
 80079e0:	f241 41fe 	movw	r1, #5374	; 0x14fe
 80079e4:	483e      	ldr	r0, [pc, #248]	; (8007ae0 <HAL_TIM_ConfigClockSource+0x584>)
 80079e6:	f7fa fd76 	bl	80024d6 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6818      	ldr	r0, [r3, #0]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	6859      	ldr	r1, [r3, #4]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	461a      	mov	r2, r3
 80079f8:	f000 fc32 	bl	8008260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2150      	movs	r1, #80	; 0x50
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fc8b 	bl	800831e <TIM_ITRx_SetConfig>
      break;
 8007a08:	e10a      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a2f      	ldr	r2, [pc, #188]	; (8007acc <HAL_TIM_ConfigClockSource+0x570>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d027      	beq.n	8007a64 <HAL_TIM_ConfigClockSource+0x508>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a1c:	d022      	beq.n	8007a64 <HAL_TIM_ConfigClockSource+0x508>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a2b      	ldr	r2, [pc, #172]	; (8007ad0 <HAL_TIM_ConfigClockSource+0x574>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d01d      	beq.n	8007a64 <HAL_TIM_ConfigClockSource+0x508>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a29      	ldr	r2, [pc, #164]	; (8007ad4 <HAL_TIM_ConfigClockSource+0x578>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d018      	beq.n	8007a64 <HAL_TIM_ConfigClockSource+0x508>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a28      	ldr	r2, [pc, #160]	; (8007ad8 <HAL_TIM_ConfigClockSource+0x57c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d013      	beq.n	8007a64 <HAL_TIM_ConfigClockSource+0x508>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a26      	ldr	r2, [pc, #152]	; (8007adc <HAL_TIM_ConfigClockSource+0x580>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00e      	beq.n	8007a64 <HAL_TIM_ConfigClockSource+0x508>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a26      	ldr	r2, [pc, #152]	; (8007ae4 <HAL_TIM_ConfigClockSource+0x588>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d009      	beq.n	8007a64 <HAL_TIM_ConfigClockSource+0x508>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a24      	ldr	r2, [pc, #144]	; (8007ae8 <HAL_TIM_ConfigClockSource+0x58c>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d004      	beq.n	8007a64 <HAL_TIM_ConfigClockSource+0x508>
 8007a5a:	f241 510a 	movw	r1, #5386	; 0x150a
 8007a5e:	4820      	ldr	r0, [pc, #128]	; (8007ae0 <HAL_TIM_ConfigClockSource+0x584>)
 8007a60:	f7fa fd39 	bl	80024d6 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a6c:	d014      	beq.n	8007a98 <HAL_TIM_ConfigClockSource+0x53c>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d010      	beq.n	8007a98 <HAL_TIM_ConfigClockSource+0x53c>
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00c      	beq.n	8007a98 <HAL_TIM_ConfigClockSource+0x53c>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d008      	beq.n	8007a98 <HAL_TIM_ConfigClockSource+0x53c>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b0a      	cmp	r3, #10
 8007a8c:	d004      	beq.n	8007a98 <HAL_TIM_ConfigClockSource+0x53c>
 8007a8e:	f241 510d 	movw	r1, #5389	; 0x150d
 8007a92:	4813      	ldr	r0, [pc, #76]	; (8007ae0 <HAL_TIM_ConfigClockSource+0x584>)
 8007a94:	f7fa fd1f 	bl	80024d6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	2b0f      	cmp	r3, #15
 8007a9e:	d904      	bls.n	8007aaa <HAL_TIM_ConfigClockSource+0x54e>
 8007aa0:	f241 510e 	movw	r1, #5390	; 0x150e
 8007aa4:	480e      	ldr	r0, [pc, #56]	; (8007ae0 <HAL_TIM_ConfigClockSource+0x584>)
 8007aa6:	f7fa fd16 	bl	80024d6 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	6859      	ldr	r1, [r3, #4]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f000 fc01 	bl	80082be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2160      	movs	r1, #96	; 0x60
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fc2b 	bl	800831e <TIM_ITRx_SetConfig>
      break;
 8007ac8:	e0aa      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x6c4>
 8007aca:	bf00      	nop
 8007acc:	40010000 	.word	0x40010000
 8007ad0:	40000400 	.word	0x40000400
 8007ad4:	40000800 	.word	0x40000800
 8007ad8:	40000c00 	.word	0x40000c00
 8007adc:	40010400 	.word	0x40010400
 8007ae0:	0800a578 	.word	0x0800a578
 8007ae4:	40014000 	.word	0x40014000
 8007ae8:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a52      	ldr	r2, [pc, #328]	; (8007c3c <HAL_TIM_ConfigClockSource+0x6e0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d027      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x5ea>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afe:	d022      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x5ea>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a4e      	ldr	r2, [pc, #312]	; (8007c40 <HAL_TIM_ConfigClockSource+0x6e4>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d01d      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x5ea>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a4d      	ldr	r2, [pc, #308]	; (8007c44 <HAL_TIM_ConfigClockSource+0x6e8>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d018      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x5ea>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a4b      	ldr	r2, [pc, #300]	; (8007c48 <HAL_TIM_ConfigClockSource+0x6ec>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x5ea>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a4a      	ldr	r2, [pc, #296]	; (8007c4c <HAL_TIM_ConfigClockSource+0x6f0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00e      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x5ea>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a48      	ldr	r2, [pc, #288]	; (8007c50 <HAL_TIM_ConfigClockSource+0x6f4>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d009      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x5ea>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a47      	ldr	r2, [pc, #284]	; (8007c54 <HAL_TIM_ConfigClockSource+0x6f8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d004      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x5ea>
 8007b3c:	f241 511a 	movw	r1, #5402	; 0x151a
 8007b40:	4845      	ldr	r0, [pc, #276]	; (8007c58 <HAL_TIM_ConfigClockSource+0x6fc>)
 8007b42:	f7fa fcc8 	bl	80024d6 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b4e:	d014      	beq.n	8007b7a <HAL_TIM_ConfigClockSource+0x61e>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d010      	beq.n	8007b7a <HAL_TIM_ConfigClockSource+0x61e>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00c      	beq.n	8007b7a <HAL_TIM_ConfigClockSource+0x61e>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d008      	beq.n	8007b7a <HAL_TIM_ConfigClockSource+0x61e>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	2b0a      	cmp	r3, #10
 8007b6e:	d004      	beq.n	8007b7a <HAL_TIM_ConfigClockSource+0x61e>
 8007b70:	f241 511d 	movw	r1, #5405	; 0x151d
 8007b74:	4838      	ldr	r0, [pc, #224]	; (8007c58 <HAL_TIM_ConfigClockSource+0x6fc>)
 8007b76:	f7fa fcae 	bl	80024d6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	2b0f      	cmp	r3, #15
 8007b80:	d904      	bls.n	8007b8c <HAL_TIM_ConfigClockSource+0x630>
 8007b82:	f241 511e 	movw	r1, #5406	; 0x151e
 8007b86:	4834      	ldr	r0, [pc, #208]	; (8007c58 <HAL_TIM_ConfigClockSource+0x6fc>)
 8007b88:	f7fa fca5 	bl	80024d6 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	6859      	ldr	r1, [r3, #4]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f000 fb61 	bl	8008260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2140      	movs	r1, #64	; 0x40
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fbba 	bl	800831e <TIM_ITRx_SetConfig>
      break;
 8007baa:	e039      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a22      	ldr	r2, [pc, #136]	; (8007c3c <HAL_TIM_ConfigClockSource+0x6e0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d027      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x6aa>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bbe:	d022      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x6aa>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a1e      	ldr	r2, [pc, #120]	; (8007c40 <HAL_TIM_ConfigClockSource+0x6e4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d01d      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x6aa>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1d      	ldr	r2, [pc, #116]	; (8007c44 <HAL_TIM_ConfigClockSource+0x6e8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d018      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x6aa>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a1b      	ldr	r2, [pc, #108]	; (8007c48 <HAL_TIM_ConfigClockSource+0x6ec>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d013      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x6aa>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a1a      	ldr	r2, [pc, #104]	; (8007c4c <HAL_TIM_ConfigClockSource+0x6f0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00e      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x6aa>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a18      	ldr	r2, [pc, #96]	; (8007c50 <HAL_TIM_ConfigClockSource+0x6f4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d009      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x6aa>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a17      	ldr	r2, [pc, #92]	; (8007c54 <HAL_TIM_ConfigClockSource+0x6f8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d004      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x6aa>
 8007bfc:	f241 512d 	movw	r1, #5421	; 0x152d
 8007c00:	4815      	ldr	r0, [pc, #84]	; (8007c58 <HAL_TIM_ConfigClockSource+0x6fc>)
 8007c02:	f7fa fc68 	bl	80024d6 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4610      	mov	r0, r2
 8007c12:	f000 fb84 	bl	800831e <TIM_ITRx_SetConfig>
      break;
 8007c16:	e003      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c1c:	e000      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 8007c1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	40000400 	.word	0x40000400
 8007c44:	40000800 	.word	0x40000800
 8007c48:	40000c00 	.word	0x40000c00
 8007c4c:	40010400 	.word	0x40010400
 8007c50:	40014000 	.word	0x40014000
 8007c54:	40001800 	.word	0x40001800
 8007c58:	0800a578 	.word	0x0800a578

08007c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a40      	ldr	r2, [pc, #256]	; (8007dc0 <TIM_Base_SetConfig+0x114>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d013      	beq.n	8007cec <TIM_Base_SetConfig+0x40>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cca:	d00f      	beq.n	8007cec <TIM_Base_SetConfig+0x40>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a3d      	ldr	r2, [pc, #244]	; (8007dc4 <TIM_Base_SetConfig+0x118>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d00b      	beq.n	8007cec <TIM_Base_SetConfig+0x40>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a3c      	ldr	r2, [pc, #240]	; (8007dc8 <TIM_Base_SetConfig+0x11c>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d007      	beq.n	8007cec <TIM_Base_SetConfig+0x40>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a3b      	ldr	r2, [pc, #236]	; (8007dcc <TIM_Base_SetConfig+0x120>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d003      	beq.n	8007cec <TIM_Base_SetConfig+0x40>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a3a      	ldr	r2, [pc, #232]	; (8007dd0 <TIM_Base_SetConfig+0x124>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d108      	bne.n	8007cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a2f      	ldr	r2, [pc, #188]	; (8007dc0 <TIM_Base_SetConfig+0x114>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d02b      	beq.n	8007d5e <TIM_Base_SetConfig+0xb2>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d0c:	d027      	beq.n	8007d5e <TIM_Base_SetConfig+0xb2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a2c      	ldr	r2, [pc, #176]	; (8007dc4 <TIM_Base_SetConfig+0x118>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d023      	beq.n	8007d5e <TIM_Base_SetConfig+0xb2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a2b      	ldr	r2, [pc, #172]	; (8007dc8 <TIM_Base_SetConfig+0x11c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d01f      	beq.n	8007d5e <TIM_Base_SetConfig+0xb2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a2a      	ldr	r2, [pc, #168]	; (8007dcc <TIM_Base_SetConfig+0x120>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d01b      	beq.n	8007d5e <TIM_Base_SetConfig+0xb2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a29      	ldr	r2, [pc, #164]	; (8007dd0 <TIM_Base_SetConfig+0x124>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d017      	beq.n	8007d5e <TIM_Base_SetConfig+0xb2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a28      	ldr	r2, [pc, #160]	; (8007dd4 <TIM_Base_SetConfig+0x128>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d013      	beq.n	8007d5e <TIM_Base_SetConfig+0xb2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a27      	ldr	r2, [pc, #156]	; (8007dd8 <TIM_Base_SetConfig+0x12c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00f      	beq.n	8007d5e <TIM_Base_SetConfig+0xb2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a26      	ldr	r2, [pc, #152]	; (8007ddc <TIM_Base_SetConfig+0x130>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d00b      	beq.n	8007d5e <TIM_Base_SetConfig+0xb2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a25      	ldr	r2, [pc, #148]	; (8007de0 <TIM_Base_SetConfig+0x134>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d007      	beq.n	8007d5e <TIM_Base_SetConfig+0xb2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a24      	ldr	r2, [pc, #144]	; (8007de4 <TIM_Base_SetConfig+0x138>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d003      	beq.n	8007d5e <TIM_Base_SetConfig+0xb2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a23      	ldr	r2, [pc, #140]	; (8007de8 <TIM_Base_SetConfig+0x13c>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d108      	bne.n	8007d70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a0a      	ldr	r2, [pc, #40]	; (8007dc0 <TIM_Base_SetConfig+0x114>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d003      	beq.n	8007da4 <TIM_Base_SetConfig+0xf8>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a0c      	ldr	r2, [pc, #48]	; (8007dd0 <TIM_Base_SetConfig+0x124>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d103      	bne.n	8007dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	691a      	ldr	r2, [r3, #16]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	615a      	str	r2, [r3, #20]
}
 8007db2:	bf00      	nop
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	40010000 	.word	0x40010000
 8007dc4:	40000400 	.word	0x40000400
 8007dc8:	40000800 	.word	0x40000800
 8007dcc:	40000c00 	.word	0x40000c00
 8007dd0:	40010400 	.word	0x40010400
 8007dd4:	40014000 	.word	0x40014000
 8007dd8:	40014400 	.word	0x40014400
 8007ddc:	40014800 	.word	0x40014800
 8007de0:	40001800 	.word	0x40001800
 8007de4:	40001c00 	.word	0x40001c00
 8007de8:	40002000 	.word	0x40002000

08007dec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	f023 0201 	bic.w	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f023 0303 	bic.w	r3, r3, #3
 8007e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f023 0302 	bic.w	r3, r3, #2
 8007e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a34      	ldr	r2, [pc, #208]	; (8007f14 <TIM_OC1_SetConfig+0x128>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d003      	beq.n	8007e50 <TIM_OC1_SetConfig+0x64>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a33      	ldr	r2, [pc, #204]	; (8007f18 <TIM_OC1_SetConfig+0x12c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d119      	bne.n	8007e84 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d008      	beq.n	8007e6a <TIM_OC1_SetConfig+0x7e>
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	2b08      	cmp	r3, #8
 8007e5e:	d004      	beq.n	8007e6a <TIM_OC1_SetConfig+0x7e>
 8007e60:	f641 21cb 	movw	r1, #6859	; 0x1acb
 8007e64:	482d      	ldr	r0, [pc, #180]	; (8007f1c <TIM_OC1_SetConfig+0x130>)
 8007e66:	f7fa fb36 	bl	80024d6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f023 0308 	bic.w	r3, r3, #8
 8007e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0304 	bic.w	r3, r3, #4
 8007e82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a23      	ldr	r2, [pc, #140]	; (8007f14 <TIM_OC1_SetConfig+0x128>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d003      	beq.n	8007e94 <TIM_OC1_SetConfig+0xa8>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a22      	ldr	r2, [pc, #136]	; (8007f18 <TIM_OC1_SetConfig+0x12c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d12d      	bne.n	8007ef0 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e9c:	d008      	beq.n	8007eb0 <TIM_OC1_SetConfig+0xc4>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d004      	beq.n	8007eb0 <TIM_OC1_SetConfig+0xc4>
 8007ea6:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 8007eaa:	481c      	ldr	r0, [pc, #112]	; (8007f1c <TIM_OC1_SetConfig+0x130>)
 8007eac:	f7fa fb13 	bl	80024d6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb8:	d008      	beq.n	8007ecc <TIM_OC1_SetConfig+0xe0>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <TIM_OC1_SetConfig+0xe0>
 8007ec2:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 8007ec6:	4815      	ldr	r0, [pc, #84]	; (8007f1c <TIM_OC1_SetConfig+0x130>)
 8007ec8:	f7fa fb05 	bl	80024d6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	621a      	str	r2, [r3, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	40010000 	.word	0x40010000
 8007f18:	40010400 	.word	0x40010400
 8007f1c:	0800a578 	.word	0x0800a578

08007f20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	f023 0210 	bic.w	r2, r3, #16
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	021b      	lsls	r3, r3, #8
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f023 0320 	bic.w	r3, r3, #32
 8007f6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a35      	ldr	r2, [pc, #212]	; (8008050 <TIM_OC2_SetConfig+0x130>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d003      	beq.n	8007f88 <TIM_OC2_SetConfig+0x68>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a34      	ldr	r2, [pc, #208]	; (8008054 <TIM_OC2_SetConfig+0x134>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d11a      	bne.n	8007fbe <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d008      	beq.n	8007fa2 <TIM_OC2_SetConfig+0x82>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	2b08      	cmp	r3, #8
 8007f96:	d004      	beq.n	8007fa2 <TIM_OC2_SetConfig+0x82>
 8007f98:	f641 3116 	movw	r1, #6934	; 0x1b16
 8007f9c:	482e      	ldr	r0, [pc, #184]	; (8008058 <TIM_OC2_SetConfig+0x138>)
 8007f9e:	f7fa fa9a 	bl	80024d6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	011b      	lsls	r3, r3, #4
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fbc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a23      	ldr	r2, [pc, #140]	; (8008050 <TIM_OC2_SetConfig+0x130>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d003      	beq.n	8007fce <TIM_OC2_SetConfig+0xae>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a22      	ldr	r2, [pc, #136]	; (8008054 <TIM_OC2_SetConfig+0x134>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d12f      	bne.n	800802e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd6:	d008      	beq.n	8007fea <TIM_OC2_SetConfig+0xca>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <TIM_OC2_SetConfig+0xca>
 8007fe0:	f641 3124 	movw	r1, #6948	; 0x1b24
 8007fe4:	481c      	ldr	r0, [pc, #112]	; (8008058 <TIM_OC2_SetConfig+0x138>)
 8007fe6:	f7fa fa76 	bl	80024d6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff2:	d008      	beq.n	8008006 <TIM_OC2_SetConfig+0xe6>
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d004      	beq.n	8008006 <TIM_OC2_SetConfig+0xe6>
 8007ffc:	f641 3125 	movw	r1, #6949	; 0x1b25
 8008000:	4815      	ldr	r0, [pc, #84]	; (8008058 <TIM_OC2_SetConfig+0x138>)
 8008002:	f7fa fa68 	bl	80024d6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800800c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	4313      	orrs	r3, r2
 800802c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	621a      	str	r2, [r3, #32]
}
 8008048:	bf00      	nop
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	40010000 	.word	0x40010000
 8008054:	40010400 	.word	0x40010400
 8008058:	0800a578 	.word	0x0800a578

0800805c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 0303 	bic.w	r3, r3, #3
 8008092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a35      	ldr	r2, [pc, #212]	; (800818c <TIM_OC3_SetConfig+0x130>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d003      	beq.n	80080c2 <TIM_OC3_SetConfig+0x66>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a34      	ldr	r2, [pc, #208]	; (8008190 <TIM_OC3_SetConfig+0x134>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d11a      	bne.n	80080f8 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d008      	beq.n	80080dc <TIM_OC3_SetConfig+0x80>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	2b08      	cmp	r3, #8
 80080d0:	d004      	beq.n	80080dc <TIM_OC3_SetConfig+0x80>
 80080d2:	f641 3161 	movw	r1, #7009	; 0x1b61
 80080d6:	482f      	ldr	r0, [pc, #188]	; (8008194 <TIM_OC3_SetConfig+0x138>)
 80080d8:	f7fa f9fd 	bl	80024d6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a24      	ldr	r2, [pc, #144]	; (800818c <TIM_OC3_SetConfig+0x130>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d003      	beq.n	8008108 <TIM_OC3_SetConfig+0xac>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a23      	ldr	r2, [pc, #140]	; (8008190 <TIM_OC3_SetConfig+0x134>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d12f      	bne.n	8008168 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008110:	d008      	beq.n	8008124 <TIM_OC3_SetConfig+0xc8>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d004      	beq.n	8008124 <TIM_OC3_SetConfig+0xc8>
 800811a:	f641 316e 	movw	r1, #7022	; 0x1b6e
 800811e:	481d      	ldr	r0, [pc, #116]	; (8008194 <TIM_OC3_SetConfig+0x138>)
 8008120:	f7fa f9d9 	bl	80024d6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812c:	d008      	beq.n	8008140 <TIM_OC3_SetConfig+0xe4>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d004      	beq.n	8008140 <TIM_OC3_SetConfig+0xe4>
 8008136:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800813a:	4816      	ldr	r0, [pc, #88]	; (8008194 <TIM_OC3_SetConfig+0x138>)
 800813c:	f7fa f9cb 	bl	80024d6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800814e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	011b      	lsls	r3, r3, #4
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	621a      	str	r2, [r3, #32]
}
 8008182:	bf00      	nop
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	40010000 	.word	0x40010000
 8008190:	40010400 	.word	0x40010400
 8008194:	0800a578 	.word	0x0800a578

08008198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	021b      	lsls	r3, r3, #8
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	031b      	lsls	r3, r3, #12
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a18      	ldr	r2, [pc, #96]	; (8008254 <TIM_OC4_SetConfig+0xbc>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d003      	beq.n	8008200 <TIM_OC4_SetConfig+0x68>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a17      	ldr	r2, [pc, #92]	; (8008258 <TIM_OC4_SetConfig+0xc0>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d117      	bne.n	8008230 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008208:	d008      	beq.n	800821c <TIM_OC4_SetConfig+0x84>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <TIM_OC4_SetConfig+0x84>
 8008212:	f641 31ad 	movw	r1, #7085	; 0x1bad
 8008216:	4811      	ldr	r0, [pc, #68]	; (800825c <TIM_OC4_SetConfig+0xc4>)
 8008218:	f7fa f95d 	bl	80024d6 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	019b      	lsls	r3, r3, #6
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	4313      	orrs	r3, r2
 800822e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	621a      	str	r2, [r3, #32]
}
 800824a:	bf00      	nop
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	40010000 	.word	0x40010000
 8008258:	40010400 	.word	0x40010400
 800825c:	0800a578 	.word	0x0800a578

08008260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	f023 0201 	bic.w	r2, r3, #1
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800828a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f023 030a 	bic.w	r3, r3, #10
 800829c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	621a      	str	r2, [r3, #32]
}
 80082b2:	bf00      	nop
 80082b4:	371c      	adds	r7, #28
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082be:	b480      	push	{r7}
 80082c0:	b087      	sub	sp, #28
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	f023 0210 	bic.w	r2, r3, #16
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	031b      	lsls	r3, r3, #12
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	4313      	orrs	r3, r2
 8008304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	621a      	str	r2, [r3, #32]
}
 8008312:	bf00      	nop
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800831e:	b480      	push	{r7}
 8008320:	b085      	sub	sp, #20
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4313      	orrs	r3, r2
 800833c:	f043 0307 	orr.w	r3, r3, #7
 8008340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	609a      	str	r2, [r3, #8]
}
 8008348:	bf00      	nop
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800836e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	021a      	lsls	r2, r3, #8
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	431a      	orrs	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4313      	orrs	r3, r2
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	4313      	orrs	r3, r2
 8008380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	609a      	str	r2, [r3, #8]
}
 8008388:	bf00      	nop
 800838a:	371c      	adds	r7, #28
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4a32      	ldr	r2, [pc, #200]	; (800846c <TIM_CCxChannelCmd+0xd8>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d030      	beq.n	800840a <TIM_CCxChannelCmd+0x76>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ae:	d02c      	beq.n	800840a <TIM_CCxChannelCmd+0x76>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4a2f      	ldr	r2, [pc, #188]	; (8008470 <TIM_CCxChannelCmd+0xdc>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d028      	beq.n	800840a <TIM_CCxChannelCmd+0x76>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4a2e      	ldr	r2, [pc, #184]	; (8008474 <TIM_CCxChannelCmd+0xe0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d024      	beq.n	800840a <TIM_CCxChannelCmd+0x76>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4a2d      	ldr	r2, [pc, #180]	; (8008478 <TIM_CCxChannelCmd+0xe4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d020      	beq.n	800840a <TIM_CCxChannelCmd+0x76>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4a2c      	ldr	r2, [pc, #176]	; (800847c <TIM_CCxChannelCmd+0xe8>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d01c      	beq.n	800840a <TIM_CCxChannelCmd+0x76>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4a2b      	ldr	r2, [pc, #172]	; (8008480 <TIM_CCxChannelCmd+0xec>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d018      	beq.n	800840a <TIM_CCxChannelCmd+0x76>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4a2a      	ldr	r2, [pc, #168]	; (8008484 <TIM_CCxChannelCmd+0xf0>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d014      	beq.n	800840a <TIM_CCxChannelCmd+0x76>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4a29      	ldr	r2, [pc, #164]	; (8008488 <TIM_CCxChannelCmd+0xf4>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d010      	beq.n	800840a <TIM_CCxChannelCmd+0x76>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4a28      	ldr	r2, [pc, #160]	; (800848c <TIM_CCxChannelCmd+0xf8>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00c      	beq.n	800840a <TIM_CCxChannelCmd+0x76>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4a27      	ldr	r2, [pc, #156]	; (8008490 <TIM_CCxChannelCmd+0xfc>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d008      	beq.n	800840a <TIM_CCxChannelCmd+0x76>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4a26      	ldr	r2, [pc, #152]	; (8008494 <TIM_CCxChannelCmd+0x100>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d004      	beq.n	800840a <TIM_CCxChannelCmd+0x76>
 8008400:	f641 5198 	movw	r1, #7576	; 0x1d98
 8008404:	4824      	ldr	r0, [pc, #144]	; (8008498 <TIM_CCxChannelCmd+0x104>)
 8008406:	f7fa f866 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d010      	beq.n	8008432 <TIM_CCxChannelCmd+0x9e>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b04      	cmp	r3, #4
 8008414:	d00d      	beq.n	8008432 <TIM_CCxChannelCmd+0x9e>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b08      	cmp	r3, #8
 800841a:	d00a      	beq.n	8008432 <TIM_CCxChannelCmd+0x9e>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b0c      	cmp	r3, #12
 8008420:	d007      	beq.n	8008432 <TIM_CCxChannelCmd+0x9e>
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2b3c      	cmp	r3, #60	; 0x3c
 8008426:	d004      	beq.n	8008432 <TIM_CCxChannelCmd+0x9e>
 8008428:	f641 5199 	movw	r1, #7577	; 0x1d99
 800842c:	481a      	ldr	r0, [pc, #104]	; (8008498 <TIM_CCxChannelCmd+0x104>)
 800842e:	f7fa f852 	bl	80024d6 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f003 031f 	and.w	r3, r3, #31
 8008438:	2201      	movs	r2, #1
 800843a:	fa02 f303 	lsl.w	r3, r2, r3
 800843e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6a1a      	ldr	r2, [r3, #32]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	43db      	mvns	r3, r3
 8008448:	401a      	ands	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6a1a      	ldr	r2, [r3, #32]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	f003 031f 	and.w	r3, r3, #31
 8008458:	6879      	ldr	r1, [r7, #4]
 800845a:	fa01 f303 	lsl.w	r3, r1, r3
 800845e:	431a      	orrs	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	621a      	str	r2, [r3, #32]
}
 8008464:	bf00      	nop
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	40010000 	.word	0x40010000
 8008470:	40000400 	.word	0x40000400
 8008474:	40000800 	.word	0x40000800
 8008478:	40000c00 	.word	0x40000c00
 800847c:	40010400 	.word	0x40010400
 8008480:	40014000 	.word	0x40014000
 8008484:	40014400 	.word	0x40014400
 8008488:	40014800 	.word	0x40014800
 800848c:	40001800 	.word	0x40001800
 8008490:	40001c00 	.word	0x40001c00
 8008494:	40002000 	.word	0x40002000
 8008498:	0800a578 	.word	0x0800a578

0800849c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a61      	ldr	r2, [pc, #388]	; (8008630 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d027      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084b8:	d022      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a5d      	ldr	r2, [pc, #372]	; (8008634 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d01d      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a5b      	ldr	r2, [pc, #364]	; (8008638 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d018      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a5a      	ldr	r2, [pc, #360]	; (800863c <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d013      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a58      	ldr	r2, [pc, #352]	; (8008640 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00e      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a57      	ldr	r2, [pc, #348]	; (8008644 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d009      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a55      	ldr	r2, [pc, #340]	; (8008648 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80084f6:	f240 71b1 	movw	r1, #1969	; 0x7b1
 80084fa:	4854      	ldr	r0, [pc, #336]	; (800864c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80084fc:	f7f9 ffeb 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d020      	beq.n	800854a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b10      	cmp	r3, #16
 800850e:	d01c      	beq.n	800854a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b20      	cmp	r3, #32
 8008516:	d018      	beq.n	800854a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b30      	cmp	r3, #48	; 0x30
 800851e:	d014      	beq.n	800854a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b40      	cmp	r3, #64	; 0x40
 8008526:	d010      	beq.n	800854a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b50      	cmp	r3, #80	; 0x50
 800852e:	d00c      	beq.n	800854a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b60      	cmp	r3, #96	; 0x60
 8008536:	d008      	beq.n	800854a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b70      	cmp	r3, #112	; 0x70
 800853e:	d004      	beq.n	800854a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008540:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8008544:	4841      	ldr	r0, [pc, #260]	; (800864c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8008546:	f7f9 ffc6 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	2b80      	cmp	r3, #128	; 0x80
 8008550:	d008      	beq.n	8008564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d004      	beq.n	8008564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800855a:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800855e:	483b      	ldr	r0, [pc, #236]	; (800864c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8008560:	f7f9 ffb9 	bl	80024d6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800856a:	2b01      	cmp	r3, #1
 800856c:	d101      	bne.n	8008572 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800856e:	2302      	movs	r3, #2
 8008570:	e05a      	b.n	8008628 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008598:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a1f      	ldr	r2, [pc, #124]	; (8008630 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d022      	beq.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085be:	d01d      	beq.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a1b      	ldr	r2, [pc, #108]	; (8008634 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d018      	beq.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a1a      	ldr	r2, [pc, #104]	; (8008638 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d013      	beq.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a18      	ldr	r2, [pc, #96]	; (800863c <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00e      	beq.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a19      	ldr	r2, [pc, #100]	; (8008648 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d009      	beq.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a18      	ldr	r2, [pc, #96]	; (8008650 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d004      	beq.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a17      	ldr	r2, [pc, #92]	; (8008654 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d10c      	bne.n	8008616 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008602:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	4313      	orrs	r3, r2
 800860c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	40010000 	.word	0x40010000
 8008634:	40000400 	.word	0x40000400
 8008638:	40000800 	.word	0x40000800
 800863c:	40000c00 	.word	0x40000c00
 8008640:	40001000 	.word	0x40001000
 8008644:	40001400 	.word	0x40001400
 8008648:	40010400 	.word	0x40010400
 800864c:	0800a5b0 	.word	0x0800a5b0
 8008650:	40014000 	.word	0x40014000
 8008654:	40001800 	.word	0x40001800

08008658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a5e      	ldr	r2, [pc, #376]	; (80087e4 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d009      	beq.n	8008684 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a5c      	ldr	r2, [pc, #368]	; (80087e8 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d004      	beq.n	8008684 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800867a:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800867e:	485b      	ldr	r0, [pc, #364]	; (80087ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008680:	f7f9 ff29 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800868c:	d008      	beq.n	80086a0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8008696:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800869a:	4854      	ldr	r0, [pc, #336]	; (80087ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800869c:	f7f9 ff1b 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a8:	d008      	beq.n	80086bc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d004      	beq.n	80086bc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80086b2:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80086b6:	484d      	ldr	r0, [pc, #308]	; (80087ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80086b8:	f7f9 ff0d 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d013      	beq.n	80086ec <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086cc:	d00e      	beq.n	80086ec <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086d6:	d009      	beq.n	80086ec <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086e0:	d004      	beq.n	80086ec <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80086e2:	f240 71f1 	movw	r1, #2033	; 0x7f1
 80086e6:	4841      	ldr	r0, [pc, #260]	; (80087ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80086e8:	f7f9 fef5 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	2bff      	cmp	r3, #255	; 0xff
 80086f2:	d904      	bls.n	80086fe <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80086f4:	f240 71f2 	movw	r1, #2034	; 0x7f2
 80086f8:	483c      	ldr	r0, [pc, #240]	; (80087ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80086fa:	f7f9 feec 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008706:	d008      	beq.n	800871a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d004      	beq.n	800871a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008710:	f240 71f3 	movw	r1, #2035	; 0x7f3
 8008714:	4835      	ldr	r0, [pc, #212]	; (80087ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008716:	f7f9 fede 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d009      	beq.n	8008736 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800872a:	d004      	beq.n	8008736 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800872c:	f240 71f4 	movw	r1, #2036	; 0x7f4
 8008730:	482e      	ldr	r0, [pc, #184]	; (80087ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008732:	f7f9 fed0 	bl	80024d6 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800873e:	d008      	beq.n	8008752 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d004      	beq.n	8008752 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008748:	f240 71f5 	movw	r1, #2037	; 0x7f5
 800874c:	4827      	ldr	r0, [pc, #156]	; (80087ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800874e:	f7f9 fec2 	bl	80024d6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008758:	2b01      	cmp	r3, #1
 800875a:	d101      	bne.n	8008760 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800875c:	2302      	movs	r3, #2
 800875e:	e03d      	b.n	80087dc <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	4313      	orrs	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	40010000 	.word	0x40010000
 80087e8:	40010400 	.word	0x40010400
 80087ec:	0800a5b0 	.word	0x0800a5b0

080087f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e0be      	b.n	80089a8 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d03b      	beq.n	80088aa <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a5e      	ldr	r2, [pc, #376]	; (80089b0 <HAL_UART_Init+0x198>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d01d      	beq.n	8008878 <HAL_UART_Init+0x60>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a5c      	ldr	r2, [pc, #368]	; (80089b4 <HAL_UART_Init+0x19c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d018      	beq.n	8008878 <HAL_UART_Init+0x60>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a5b      	ldr	r2, [pc, #364]	; (80089b8 <HAL_UART_Init+0x1a0>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d013      	beq.n	8008878 <HAL_UART_Init+0x60>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a59      	ldr	r2, [pc, #356]	; (80089bc <HAL_UART_Init+0x1a4>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d00e      	beq.n	8008878 <HAL_UART_Init+0x60>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a58      	ldr	r2, [pc, #352]	; (80089c0 <HAL_UART_Init+0x1a8>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d009      	beq.n	8008878 <HAL_UART_Init+0x60>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a56      	ldr	r2, [pc, #344]	; (80089c4 <HAL_UART_Init+0x1ac>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d004      	beq.n	8008878 <HAL_UART_Init+0x60>
 800886e:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8008872:	4855      	ldr	r0, [pc, #340]	; (80089c8 <HAL_UART_Init+0x1b0>)
 8008874:	f7f9 fe2f 	bl	80024d6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d037      	beq.n	80088f0 <HAL_UART_Init+0xd8>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008888:	d032      	beq.n	80088f0 <HAL_UART_Init+0xd8>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008892:	d02d      	beq.n	80088f0 <HAL_UART_Init+0xd8>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800889c:	d028      	beq.n	80088f0 <HAL_UART_Init+0xd8>
 800889e:	f240 1173 	movw	r1, #371	; 0x173
 80088a2:	4849      	ldr	r0, [pc, #292]	; (80089c8 <HAL_UART_Init+0x1b0>)
 80088a4:	f7f9 fe17 	bl	80024d6 <assert_failed>
 80088a8:	e022      	b.n	80088f0 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a40      	ldr	r2, [pc, #256]	; (80089b0 <HAL_UART_Init+0x198>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d01d      	beq.n	80088f0 <HAL_UART_Init+0xd8>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a3e      	ldr	r2, [pc, #248]	; (80089b4 <HAL_UART_Init+0x19c>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d018      	beq.n	80088f0 <HAL_UART_Init+0xd8>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a3d      	ldr	r2, [pc, #244]	; (80089b8 <HAL_UART_Init+0x1a0>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d013      	beq.n	80088f0 <HAL_UART_Init+0xd8>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a3b      	ldr	r2, [pc, #236]	; (80089bc <HAL_UART_Init+0x1a4>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d00e      	beq.n	80088f0 <HAL_UART_Init+0xd8>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a3a      	ldr	r2, [pc, #232]	; (80089c0 <HAL_UART_Init+0x1a8>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d009      	beq.n	80088f0 <HAL_UART_Init+0xd8>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a38      	ldr	r2, [pc, #224]	; (80089c4 <HAL_UART_Init+0x1ac>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d004      	beq.n	80088f0 <HAL_UART_Init+0xd8>
 80088e6:	f240 1177 	movw	r1, #375	; 0x177
 80088ea:	4837      	ldr	r0, [pc, #220]	; (80089c8 <HAL_UART_Init+0x1b0>)
 80088ec:	f7f9 fdf3 	bl	80024d6 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <HAL_UART_Init+0xf4>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008900:	d004      	beq.n	800890c <HAL_UART_Init+0xf4>
 8008902:	f240 1179 	movw	r1, #377	; 0x179
 8008906:	4830      	ldr	r0, [pc, #192]	; (80089c8 <HAL_UART_Init+0x1b0>)
 8008908:	f7f9 fde5 	bl	80024d6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d009      	beq.n	8008928 <HAL_UART_Init+0x110>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800891c:	d004      	beq.n	8008928 <HAL_UART_Init+0x110>
 800891e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8008922:	4829      	ldr	r0, [pc, #164]	; (80089c8 <HAL_UART_Init+0x1b0>)
 8008924:	f7f9 fdd7 	bl	80024d6 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d106      	bne.n	8008942 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fa f99f 	bl	8002c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2224      	movs	r2, #36	; 0x24
 8008946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008958:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fce8 	bl	8009330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691a      	ldr	r2, [r3, #16]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800896e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	695a      	ldr	r2, [r3, #20]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800897e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800898e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2220      	movs	r2, #32
 800899a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	40011000 	.word	0x40011000
 80089b4:	40004400 	.word	0x40004400
 80089b8:	40004800 	.word	0x40004800
 80089bc:	40004c00 	.word	0x40004c00
 80089c0:	40005000 	.word	0x40005000
 80089c4:	40011400 	.word	0x40011400
 80089c8:	0800a5ec 	.word	0x0800a5ec

080089cc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	d11d      	bne.n	8008a22 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <HAL_UART_Receive_IT+0x26>
 80089ec:	88fb      	ldrh	r3, [r7, #6]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e016      	b.n	8008a24 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d101      	bne.n	8008a04 <HAL_UART_Receive_IT+0x38>
 8008a00:	2302      	movs	r3, #2
 8008a02:	e00f      	b.n	8008a24 <HAL_UART_Receive_IT+0x58>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a12:	88fb      	ldrh	r3, [r7, #6]
 8008a14:	461a      	mov	r2, r3
 8008a16:	68b9      	ldr	r1, [r7, #8]
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 fab5 	bl	8008f88 <UART_Start_Receive_IT>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	e000      	b.n	8008a24 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008a22:	2302      	movs	r3, #2
  }
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b0ba      	sub	sp, #232	; 0xe8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10f      	bne.n	8008a92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a76:	f003 0320 	and.w	r3, r3, #32
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d009      	beq.n	8008a92 <HAL_UART_IRQHandler+0x66>
 8008a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a82:	f003 0320 	and.w	r3, r3, #32
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fb95 	bl	80091ba <UART_Receive_IT>
      return;
 8008a90:	e256      	b.n	8008f40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 80de 	beq.w	8008c58 <HAL_UART_IRQHandler+0x22c>
 8008a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 80d1 	beq.w	8008c58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <HAL_UART_IRQHandler+0xae>
 8008ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	f043 0201 	orr.w	r2, r3, #1
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ade:	f003 0304 	and.w	r3, r3, #4
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <HAL_UART_IRQHandler+0xd2>
 8008ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	f043 0202 	orr.w	r2, r3, #2
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00b      	beq.n	8008b22 <HAL_UART_IRQHandler+0xf6>
 8008b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d005      	beq.n	8008b22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	f043 0204 	orr.w	r2, r3, #4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d011      	beq.n	8008b52 <HAL_UART_IRQHandler+0x126>
 8008b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b32:	f003 0320 	and.w	r3, r3, #32
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d105      	bne.n	8008b46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d005      	beq.n	8008b52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	f043 0208 	orr.w	r2, r3, #8
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 81ed 	beq.w	8008f36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b60:	f003 0320 	and.w	r3, r3, #32
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d008      	beq.n	8008b7a <HAL_UART_IRQHandler+0x14e>
 8008b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b6c:	f003 0320 	and.w	r3, r3, #32
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fb20 	bl	80091ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b84:	2b40      	cmp	r3, #64	; 0x40
 8008b86:	bf0c      	ite	eq
 8008b88:	2301      	moveq	r3, #1
 8008b8a:	2300      	movne	r3, #0
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b96:	f003 0308 	and.w	r3, r3, #8
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d103      	bne.n	8008ba6 <HAL_UART_IRQHandler+0x17a>
 8008b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d04f      	beq.n	8008c46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fa28 	bl	8008ffc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb6:	2b40      	cmp	r3, #64	; 0x40
 8008bb8:	d141      	bne.n	8008c3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3314      	adds	r3, #20
 8008bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bc8:	e853 3f00 	ldrex	r3, [r3]
 8008bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3314      	adds	r3, #20
 8008be2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008be6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008bf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1d9      	bne.n	8008bba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d013      	beq.n	8008c36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	4a7d      	ldr	r2, [pc, #500]	; (8008e08 <HAL_UART_IRQHandler+0x3dc>)
 8008c14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fa fe46 	bl	80038ac <HAL_DMA_Abort_IT>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d016      	beq.n	8008c54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c34:	e00e      	b.n	8008c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f990 	bl	8008f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c3c:	e00a      	b.n	8008c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f98c 	bl	8008f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c44:	e006      	b.n	8008c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f988 	bl	8008f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008c52:	e170      	b.n	8008f36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c54:	bf00      	nop
    return;
 8008c56:	e16e      	b.n	8008f36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	f040 814a 	bne.w	8008ef6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c66:	f003 0310 	and.w	r3, r3, #16
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 8143 	beq.w	8008ef6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c74:	f003 0310 	and.w	r3, r3, #16
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 813c 	beq.w	8008ef6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60bb      	str	r3, [r7, #8]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60bb      	str	r3, [r7, #8]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	60bb      	str	r3, [r7, #8]
 8008c92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9e:	2b40      	cmp	r3, #64	; 0x40
 8008ca0:	f040 80b4 	bne.w	8008e0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8140 	beq.w	8008f3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	f080 8139 	bcs.w	8008f3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cda:	f000 8088 	beq.w	8008dee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	330c      	adds	r3, #12
 8008ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	330c      	adds	r3, #12
 8008d06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008d0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1d9      	bne.n	8008cde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3314      	adds	r3, #20
 8008d30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d3c:	f023 0301 	bic.w	r3, r3, #1
 8008d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3314      	adds	r3, #20
 8008d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e1      	bne.n	8008d2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3314      	adds	r3, #20
 8008d6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d70:	e853 3f00 	ldrex	r3, [r3]
 8008d74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3314      	adds	r3, #20
 8008d86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d92:	e841 2300 	strex	r3, r2, [r1]
 8008d96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e3      	bne.n	8008d66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2220      	movs	r2, #32
 8008da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	330c      	adds	r3, #12
 8008db2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db6:	e853 3f00 	ldrex	r3, [r3]
 8008dba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dbe:	f023 0310 	bic.w	r3, r3, #16
 8008dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	330c      	adds	r3, #12
 8008dcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008dd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008dd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008dd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e3      	bne.n	8008dac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fa fcef 	bl	80037cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f8b6 	bl	8008f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e04:	e099      	b.n	8008f3a <HAL_UART_IRQHandler+0x50e>
 8008e06:	bf00      	nop
 8008e08:	080090c3 	.word	0x080090c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 808b 	beq.w	8008f3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 8086 	beq.w	8008f3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	330c      	adds	r3, #12
 8008e38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3c:	e853 3f00 	ldrex	r3, [r3]
 8008e40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	330c      	adds	r3, #12
 8008e52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008e56:	647a      	str	r2, [r7, #68]	; 0x44
 8008e58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e3      	bne.n	8008e32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3314      	adds	r3, #20
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	623b      	str	r3, [r7, #32]
   return(result);
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3314      	adds	r3, #20
 8008e8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e8e:	633a      	str	r2, [r7, #48]	; 0x30
 8008e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1e3      	bne.n	8008e6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2220      	movs	r2, #32
 8008ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	330c      	adds	r3, #12
 8008eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	e853 3f00 	ldrex	r3, [r3]
 8008ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 0310 	bic.w	r3, r3, #16
 8008ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	330c      	adds	r3, #12
 8008ed0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ed4:	61fa      	str	r2, [r7, #28]
 8008ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	69b9      	ldr	r1, [r7, #24]
 8008eda:	69fa      	ldr	r2, [r7, #28]
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e3      	bne.n	8008eb0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008eec:	4619      	mov	r1, r3
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f83e 	bl	8008f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ef4:	e023      	b.n	8008f3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d009      	beq.n	8008f16 <HAL_UART_IRQHandler+0x4ea>
 8008f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f8eb 	bl	80090ea <UART_Transmit_IT>
    return;
 8008f14:	e014      	b.n	8008f40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00e      	beq.n	8008f40 <HAL_UART_IRQHandler+0x514>
 8008f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d008      	beq.n	8008f40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f92b 	bl	800918a <UART_EndTransmit_IT>
    return;
 8008f34:	e004      	b.n	8008f40 <HAL_UART_IRQHandler+0x514>
    return;
 8008f36:	bf00      	nop
 8008f38:	e002      	b.n	8008f40 <HAL_UART_IRQHandler+0x514>
      return;
 8008f3a:	bf00      	nop
 8008f3c:	e000      	b.n	8008f40 <HAL_UART_IRQHandler+0x514>
      return;
 8008f3e:	bf00      	nop
  }
}
 8008f40:	37e8      	adds	r7, #232	; 0xe8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop

08008f48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4613      	mov	r3, r2
 8008f94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	88fa      	ldrh	r2, [r7, #6]
 8008fa0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	88fa      	ldrh	r2, [r7, #6]
 8008fa6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2222      	movs	r2, #34	; 0x22
 8008fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fcc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	695a      	ldr	r2, [r3, #20]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f042 0201 	orr.w	r2, r2, #1
 8008fdc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f042 0220 	orr.w	r2, r2, #32
 8008fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b095      	sub	sp, #84	; 0x54
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	330c      	adds	r3, #12
 800900a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900e:	e853 3f00 	ldrex	r3, [r3]
 8009012:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800901a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	330c      	adds	r3, #12
 8009022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009024:	643a      	str	r2, [r7, #64]	; 0x40
 8009026:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800902a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e5      	bne.n	8009004 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3314      	adds	r3, #20
 800903e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	e853 3f00 	ldrex	r3, [r3]
 8009046:	61fb      	str	r3, [r7, #28]
   return(result);
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	f023 0301 	bic.w	r3, r3, #1
 800904e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3314      	adds	r3, #20
 8009056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009058:	62fa      	str	r2, [r7, #44]	; 0x2c
 800905a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800905e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009060:	e841 2300 	strex	r3, r2, [r1]
 8009064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1e5      	bne.n	8009038 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009070:	2b01      	cmp	r3, #1
 8009072:	d119      	bne.n	80090a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	330c      	adds	r3, #12
 800907a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	e853 3f00 	ldrex	r3, [r3]
 8009082:	60bb      	str	r3, [r7, #8]
   return(result);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f023 0310 	bic.w	r3, r3, #16
 800908a:	647b      	str	r3, [r7, #68]	; 0x44
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	330c      	adds	r3, #12
 8009092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009094:	61ba      	str	r2, [r7, #24]
 8009096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009098:	6979      	ldr	r1, [r7, #20]
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	e841 2300 	strex	r3, r2, [r1]
 80090a0:	613b      	str	r3, [r7, #16]
   return(result);
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1e5      	bne.n	8009074 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2220      	movs	r2, #32
 80090ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80090b6:	bf00      	nop
 80090b8:	3754      	adds	r7, #84	; 0x54
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f7ff ff3d 	bl	8008f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090e2:	bf00      	nop
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b085      	sub	sp, #20
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b21      	cmp	r3, #33	; 0x21
 80090fc:	d13e      	bne.n	800917c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009106:	d114      	bne.n	8009132 <UART_Transmit_IT+0x48>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d110      	bne.n	8009132 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009124:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	1c9a      	adds	r2, r3, #2
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	621a      	str	r2, [r3, #32]
 8009130:	e008      	b.n	8009144 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	1c59      	adds	r1, r3, #1
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6211      	str	r1, [r2, #32]
 800913c:	781a      	ldrb	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009148:	b29b      	uxth	r3, r3
 800914a:	3b01      	subs	r3, #1
 800914c:	b29b      	uxth	r3, r3
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	4619      	mov	r1, r3
 8009152:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10f      	bne.n	8009178 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68da      	ldr	r2, [r3, #12]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009166:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009176:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	e000      	b.n	800917e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800917c:	2302      	movs	r3, #2
  }
}
 800917e:	4618      	mov	r0, r3
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68da      	ldr	r2, [r3, #12]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2220      	movs	r2, #32
 80091a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff fecc 	bl	8008f48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b08c      	sub	sp, #48	; 0x30
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b22      	cmp	r3, #34	; 0x22
 80091cc:	f040 80ab 	bne.w	8009326 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d8:	d117      	bne.n	800920a <UART_Receive_IT+0x50>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d113      	bne.n	800920a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80091e2:	2300      	movs	r3, #0
 80091e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009202:	1c9a      	adds	r2, r3, #2
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	629a      	str	r2, [r3, #40]	; 0x28
 8009208:	e026      	b.n	8009258 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009210:	2300      	movs	r3, #0
 8009212:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800921c:	d007      	beq.n	800922e <UART_Receive_IT+0x74>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10a      	bne.n	800923c <UART_Receive_IT+0x82>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d106      	bne.n	800923c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	b2da      	uxtb	r2, r3
 8009236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009238:	701a      	strb	r2, [r3, #0]
 800923a:	e008      	b.n	800924e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009248:	b2da      	uxtb	r2, r3
 800924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800925c:	b29b      	uxth	r3, r3
 800925e:	3b01      	subs	r3, #1
 8009260:	b29b      	uxth	r3, r3
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	4619      	mov	r1, r3
 8009266:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009268:	2b00      	cmp	r3, #0
 800926a:	d15a      	bne.n	8009322 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68da      	ldr	r2, [r3, #12]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 0220 	bic.w	r2, r2, #32
 800927a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68da      	ldr	r2, [r3, #12]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800928a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	695a      	ldr	r2, [r3, #20]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f022 0201 	bic.w	r2, r2, #1
 800929a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2220      	movs	r2, #32
 80092a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d135      	bne.n	8009318 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	330c      	adds	r3, #12
 80092b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	613b      	str	r3, [r7, #16]
   return(result);
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	f023 0310 	bic.w	r3, r3, #16
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	330c      	adds	r3, #12
 80092d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d2:	623a      	str	r2, [r7, #32]
 80092d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	69f9      	ldr	r1, [r7, #28]
 80092d8:	6a3a      	ldr	r2, [r7, #32]
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	61bb      	str	r3, [r7, #24]
   return(result);
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e5      	bne.n	80092b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 0310 	and.w	r3, r3, #16
 80092f0:	2b10      	cmp	r3, #16
 80092f2:	d10a      	bne.n	800930a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092f4:	2300      	movs	r3, #0
 80092f6:	60fb      	str	r3, [r7, #12]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7ff fe2d 	bl	8008f70 <HAL_UARTEx_RxEventCallback>
 8009316:	e002      	b.n	800931e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7f7 ffa3 	bl	8001264 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	e002      	b.n	8009328 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	e000      	b.n	8009328 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009326:	2302      	movs	r3, #2
  }
}
 8009328:	4618      	mov	r0, r3
 800932a:	3730      	adds	r7, #48	; 0x30
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	b09f      	sub	sp, #124	; 0x7c
 8009336:	af00      	add	r7, sp, #0
 8009338:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800933a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	4b9b      	ldr	r3, [pc, #620]	; (80095ac <UART_SetConfig+0x27c>)
 8009340:	429a      	cmp	r2, r3
 8009342:	d904      	bls.n	800934e <UART_SetConfig+0x1e>
 8009344:	f640 6156 	movw	r1, #3670	; 0xe56
 8009348:	4899      	ldr	r0, [pc, #612]	; (80095b0 <UART_SetConfig+0x280>)
 800934a:	f7f9 f8c4 	bl	80024d6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800934e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d009      	beq.n	800936a <UART_SetConfig+0x3a>
 8009356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800935e:	d004      	beq.n	800936a <UART_SetConfig+0x3a>
 8009360:	f640 6157 	movw	r1, #3671	; 0xe57
 8009364:	4892      	ldr	r0, [pc, #584]	; (80095b0 <UART_SetConfig+0x280>)
 8009366:	f7f9 f8b6 	bl	80024d6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800936a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00e      	beq.n	8009390 <UART_SetConfig+0x60>
 8009372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800937a:	d009      	beq.n	8009390 <UART_SetConfig+0x60>
 800937c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009384:	d004      	beq.n	8009390 <UART_SetConfig+0x60>
 8009386:	f640 6158 	movw	r1, #3672	; 0xe58
 800938a:	4889      	ldr	r0, [pc, #548]	; (80095b0 <UART_SetConfig+0x280>)
 800938c:	f7f9 f8a3 	bl	80024d6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009392:	695a      	ldr	r2, [r3, #20]
 8009394:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8009398:	4013      	ands	r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d103      	bne.n	80093a6 <UART_SetConfig+0x76>
 800939e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d104      	bne.n	80093b0 <UART_SetConfig+0x80>
 80093a6:	f640 6159 	movw	r1, #3673	; 0xe59
 80093aa:	4881      	ldr	r0, [pc, #516]	; (80095b0 <UART_SetConfig+0x280>)
 80093ac:	f7f9 f893 	bl	80024d6 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80093ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093bc:	68d9      	ldr	r1, [r3, #12]
 80093be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	ea40 0301 	orr.w	r3, r0, r1
 80093c6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	431a      	orrs	r2, r3
 80093d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	431a      	orrs	r2, r3
 80093d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093da:	69db      	ldr	r3, [r3, #28]
 80093dc:	4313      	orrs	r3, r2
 80093de:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80093e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80093ea:	f021 010c 	bic.w	r1, r1, #12
 80093ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093f4:	430b      	orrs	r3, r1
 80093f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009404:	6999      	ldr	r1, [r3, #24]
 8009406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	ea40 0301 	orr.w	r3, r0, r1
 800940e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	4b67      	ldr	r3, [pc, #412]	; (80095b4 <UART_SetConfig+0x284>)
 8009416:	429a      	cmp	r2, r3
 8009418:	d004      	beq.n	8009424 <UART_SetConfig+0xf4>
 800941a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	4b66      	ldr	r3, [pc, #408]	; (80095b8 <UART_SetConfig+0x288>)
 8009420:	429a      	cmp	r2, r3
 8009422:	d103      	bne.n	800942c <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009424:	f7fb fbf0 	bl	8004c08 <HAL_RCC_GetPCLK2Freq>
 8009428:	6778      	str	r0, [r7, #116]	; 0x74
 800942a:	e002      	b.n	8009432 <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800942c:	f7fb fbd8 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 8009430:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800943a:	f040 80c1 	bne.w	80095c0 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800943e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009440:	461c      	mov	r4, r3
 8009442:	f04f 0500 	mov.w	r5, #0
 8009446:	4622      	mov	r2, r4
 8009448:	462b      	mov	r3, r5
 800944a:	1891      	adds	r1, r2, r2
 800944c:	6439      	str	r1, [r7, #64]	; 0x40
 800944e:	415b      	adcs	r3, r3
 8009450:	647b      	str	r3, [r7, #68]	; 0x44
 8009452:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009456:	1912      	adds	r2, r2, r4
 8009458:	eb45 0303 	adc.w	r3, r5, r3
 800945c:	f04f 0000 	mov.w	r0, #0
 8009460:	f04f 0100 	mov.w	r1, #0
 8009464:	00d9      	lsls	r1, r3, #3
 8009466:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800946a:	00d0      	lsls	r0, r2, #3
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	1911      	adds	r1, r2, r4
 8009472:	6639      	str	r1, [r7, #96]	; 0x60
 8009474:	416b      	adcs	r3, r5
 8009476:	667b      	str	r3, [r7, #100]	; 0x64
 8009478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	461a      	mov	r2, r3
 800947e:	f04f 0300 	mov.w	r3, #0
 8009482:	1891      	adds	r1, r2, r2
 8009484:	63b9      	str	r1, [r7, #56]	; 0x38
 8009486:	415b      	adcs	r3, r3
 8009488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800948a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800948e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009492:	f7f7 fb8b 	bl	8000bac <__aeabi_uldivmod>
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	4b48      	ldr	r3, [pc, #288]	; (80095bc <UART_SetConfig+0x28c>)
 800949c:	fba3 2302 	umull	r2, r3, r3, r2
 80094a0:	095b      	lsrs	r3, r3, #5
 80094a2:	011e      	lsls	r6, r3, #4
 80094a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094a6:	461c      	mov	r4, r3
 80094a8:	f04f 0500 	mov.w	r5, #0
 80094ac:	4622      	mov	r2, r4
 80094ae:	462b      	mov	r3, r5
 80094b0:	1891      	adds	r1, r2, r2
 80094b2:	6339      	str	r1, [r7, #48]	; 0x30
 80094b4:	415b      	adcs	r3, r3
 80094b6:	637b      	str	r3, [r7, #52]	; 0x34
 80094b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80094bc:	1912      	adds	r2, r2, r4
 80094be:	eb45 0303 	adc.w	r3, r5, r3
 80094c2:	f04f 0000 	mov.w	r0, #0
 80094c6:	f04f 0100 	mov.w	r1, #0
 80094ca:	00d9      	lsls	r1, r3, #3
 80094cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094d0:	00d0      	lsls	r0, r2, #3
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	1911      	adds	r1, r2, r4
 80094d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80094da:	416b      	adcs	r3, r5
 80094dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	461a      	mov	r2, r3
 80094e4:	f04f 0300 	mov.w	r3, #0
 80094e8:	1891      	adds	r1, r2, r2
 80094ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80094ec:	415b      	adcs	r3, r3
 80094ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094f4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80094f8:	f7f7 fb58 	bl	8000bac <__aeabi_uldivmod>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4b2e      	ldr	r3, [pc, #184]	; (80095bc <UART_SetConfig+0x28c>)
 8009502:	fba3 1302 	umull	r1, r3, r3, r2
 8009506:	095b      	lsrs	r3, r3, #5
 8009508:	2164      	movs	r1, #100	; 0x64
 800950a:	fb01 f303 	mul.w	r3, r1, r3
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	3332      	adds	r3, #50	; 0x32
 8009514:	4a29      	ldr	r2, [pc, #164]	; (80095bc <UART_SetConfig+0x28c>)
 8009516:	fba2 2303 	umull	r2, r3, r2, r3
 800951a:	095b      	lsrs	r3, r3, #5
 800951c:	005b      	lsls	r3, r3, #1
 800951e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009522:	441e      	add	r6, r3
 8009524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009526:	4618      	mov	r0, r3
 8009528:	f04f 0100 	mov.w	r1, #0
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	1894      	adds	r4, r2, r2
 8009532:	623c      	str	r4, [r7, #32]
 8009534:	415b      	adcs	r3, r3
 8009536:	627b      	str	r3, [r7, #36]	; 0x24
 8009538:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800953c:	1812      	adds	r2, r2, r0
 800953e:	eb41 0303 	adc.w	r3, r1, r3
 8009542:	f04f 0400 	mov.w	r4, #0
 8009546:	f04f 0500 	mov.w	r5, #0
 800954a:	00dd      	lsls	r5, r3, #3
 800954c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009550:	00d4      	lsls	r4, r2, #3
 8009552:	4622      	mov	r2, r4
 8009554:	462b      	mov	r3, r5
 8009556:	1814      	adds	r4, r2, r0
 8009558:	653c      	str	r4, [r7, #80]	; 0x50
 800955a:	414b      	adcs	r3, r1
 800955c:	657b      	str	r3, [r7, #84]	; 0x54
 800955e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	461a      	mov	r2, r3
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	1891      	adds	r1, r2, r2
 800956a:	61b9      	str	r1, [r7, #24]
 800956c:	415b      	adcs	r3, r3
 800956e:	61fb      	str	r3, [r7, #28]
 8009570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009574:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009578:	f7f7 fb18 	bl	8000bac <__aeabi_uldivmod>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	4b0e      	ldr	r3, [pc, #56]	; (80095bc <UART_SetConfig+0x28c>)
 8009582:	fba3 1302 	umull	r1, r3, r3, r2
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	2164      	movs	r1, #100	; 0x64
 800958a:	fb01 f303 	mul.w	r3, r1, r3
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	00db      	lsls	r3, r3, #3
 8009592:	3332      	adds	r3, #50	; 0x32
 8009594:	4a09      	ldr	r2, [pc, #36]	; (80095bc <UART_SetConfig+0x28c>)
 8009596:	fba2 2303 	umull	r2, r3, r2, r3
 800959a:	095b      	lsrs	r3, r3, #5
 800959c:	f003 0207 	and.w	r2, r3, #7
 80095a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4432      	add	r2, r6
 80095a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095a8:	e0c4      	b.n	8009734 <UART_SetConfig+0x404>
 80095aa:	bf00      	nop
 80095ac:	00a037a0 	.word	0x00a037a0
 80095b0:	0800a5ec 	.word	0x0800a5ec
 80095b4:	40011000 	.word	0x40011000
 80095b8:	40011400 	.word	0x40011400
 80095bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095c2:	461c      	mov	r4, r3
 80095c4:	f04f 0500 	mov.w	r5, #0
 80095c8:	4622      	mov	r2, r4
 80095ca:	462b      	mov	r3, r5
 80095cc:	1891      	adds	r1, r2, r2
 80095ce:	6139      	str	r1, [r7, #16]
 80095d0:	415b      	adcs	r3, r3
 80095d2:	617b      	str	r3, [r7, #20]
 80095d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095d8:	1912      	adds	r2, r2, r4
 80095da:	eb45 0303 	adc.w	r3, r5, r3
 80095de:	f04f 0000 	mov.w	r0, #0
 80095e2:	f04f 0100 	mov.w	r1, #0
 80095e6:	00d9      	lsls	r1, r3, #3
 80095e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095ec:	00d0      	lsls	r0, r2, #3
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	eb12 0804 	adds.w	r8, r2, r4
 80095f6:	eb43 0905 	adc.w	r9, r3, r5
 80095fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	4618      	mov	r0, r3
 8009600:	f04f 0100 	mov.w	r1, #0
 8009604:	f04f 0200 	mov.w	r2, #0
 8009608:	f04f 0300 	mov.w	r3, #0
 800960c:	008b      	lsls	r3, r1, #2
 800960e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009612:	0082      	lsls	r2, r0, #2
 8009614:	4640      	mov	r0, r8
 8009616:	4649      	mov	r1, r9
 8009618:	f7f7 fac8 	bl	8000bac <__aeabi_uldivmod>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4b47      	ldr	r3, [pc, #284]	; (8009740 <UART_SetConfig+0x410>)
 8009622:	fba3 2302 	umull	r2, r3, r3, r2
 8009626:	095b      	lsrs	r3, r3, #5
 8009628:	011e      	lsls	r6, r3, #4
 800962a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800962c:	4618      	mov	r0, r3
 800962e:	f04f 0100 	mov.w	r1, #0
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	1894      	adds	r4, r2, r2
 8009638:	60bc      	str	r4, [r7, #8]
 800963a:	415b      	adcs	r3, r3
 800963c:	60fb      	str	r3, [r7, #12]
 800963e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009642:	1812      	adds	r2, r2, r0
 8009644:	eb41 0303 	adc.w	r3, r1, r3
 8009648:	f04f 0400 	mov.w	r4, #0
 800964c:	f04f 0500 	mov.w	r5, #0
 8009650:	00dd      	lsls	r5, r3, #3
 8009652:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009656:	00d4      	lsls	r4, r2, #3
 8009658:	4622      	mov	r2, r4
 800965a:	462b      	mov	r3, r5
 800965c:	1814      	adds	r4, r2, r0
 800965e:	64bc      	str	r4, [r7, #72]	; 0x48
 8009660:	414b      	adcs	r3, r1
 8009662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	4618      	mov	r0, r3
 800966a:	f04f 0100 	mov.w	r1, #0
 800966e:	f04f 0200 	mov.w	r2, #0
 8009672:	f04f 0300 	mov.w	r3, #0
 8009676:	008b      	lsls	r3, r1, #2
 8009678:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800967c:	0082      	lsls	r2, r0, #2
 800967e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009682:	f7f7 fa93 	bl	8000bac <__aeabi_uldivmod>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4b2d      	ldr	r3, [pc, #180]	; (8009740 <UART_SetConfig+0x410>)
 800968c:	fba3 1302 	umull	r1, r3, r3, r2
 8009690:	095b      	lsrs	r3, r3, #5
 8009692:	2164      	movs	r1, #100	; 0x64
 8009694:	fb01 f303 	mul.w	r3, r1, r3
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	3332      	adds	r3, #50	; 0x32
 800969e:	4a28      	ldr	r2, [pc, #160]	; (8009740 <UART_SetConfig+0x410>)
 80096a0:	fba2 2303 	umull	r2, r3, r2, r3
 80096a4:	095b      	lsrs	r3, r3, #5
 80096a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096aa:	441e      	add	r6, r3
 80096ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096ae:	4618      	mov	r0, r3
 80096b0:	f04f 0100 	mov.w	r1, #0
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	1894      	adds	r4, r2, r2
 80096ba:	603c      	str	r4, [r7, #0]
 80096bc:	415b      	adcs	r3, r3
 80096be:	607b      	str	r3, [r7, #4]
 80096c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096c4:	1812      	adds	r2, r2, r0
 80096c6:	eb41 0303 	adc.w	r3, r1, r3
 80096ca:	f04f 0400 	mov.w	r4, #0
 80096ce:	f04f 0500 	mov.w	r5, #0
 80096d2:	00dd      	lsls	r5, r3, #3
 80096d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096d8:	00d4      	lsls	r4, r2, #3
 80096da:	4622      	mov	r2, r4
 80096dc:	462b      	mov	r3, r5
 80096de:	eb12 0a00 	adds.w	sl, r2, r0
 80096e2:	eb43 0b01 	adc.w	fp, r3, r1
 80096e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f04f 0100 	mov.w	r1, #0
 80096f0:	f04f 0200 	mov.w	r2, #0
 80096f4:	f04f 0300 	mov.w	r3, #0
 80096f8:	008b      	lsls	r3, r1, #2
 80096fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80096fe:	0082      	lsls	r2, r0, #2
 8009700:	4650      	mov	r0, sl
 8009702:	4659      	mov	r1, fp
 8009704:	f7f7 fa52 	bl	8000bac <__aeabi_uldivmod>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	4b0c      	ldr	r3, [pc, #48]	; (8009740 <UART_SetConfig+0x410>)
 800970e:	fba3 1302 	umull	r1, r3, r3, r2
 8009712:	095b      	lsrs	r3, r3, #5
 8009714:	2164      	movs	r1, #100	; 0x64
 8009716:	fb01 f303 	mul.w	r3, r1, r3
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	011b      	lsls	r3, r3, #4
 800971e:	3332      	adds	r3, #50	; 0x32
 8009720:	4a07      	ldr	r2, [pc, #28]	; (8009740 <UART_SetConfig+0x410>)
 8009722:	fba2 2303 	umull	r2, r3, r2, r3
 8009726:	095b      	lsrs	r3, r3, #5
 8009728:	f003 020f 	and.w	r2, r3, #15
 800972c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4432      	add	r2, r6
 8009732:	609a      	str	r2, [r3, #8]
}
 8009734:	bf00      	nop
 8009736:	377c      	adds	r7, #124	; 0x7c
 8009738:	46bd      	mov	sp, r7
 800973a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973e:	bf00      	nop
 8009740:	51eb851f 	.word	0x51eb851f

08009744 <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b0a4      	sub	sp, #144	; 0x90
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800974e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	605a      	str	r2, [r3, #4]
 8009758:	609a      	str	r2, [r3, #8]
 800975a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800975c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009760:	2200      	movs	r2, #0
 8009762:	601a      	str	r2, [r3, #0]
 8009764:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8009766:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	605a      	str	r2, [r3, #4]
 8009770:	609a      	str	r2, [r3, #8]
 8009772:	60da      	str	r2, [r3, #12]
 8009774:	611a      	str	r2, [r3, #16]
 8009776:	615a      	str	r2, [r3, #20]
 8009778:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 800978c:	2301      	movs	r3, #1
 800978e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8009792:	2300      	movs	r3, #0
 8009794:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8009798:	e009      	b.n	80097ae <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 800979a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 80097a4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80097a8:	3301      	adds	r3, #1
 80097aa:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 80097ae:	79fa      	ldrb	r2, [r7, #7]
 80097b0:	494d      	ldr	r1, [pc, #308]	; (80098e8 <DC_MOTOR_Init+0x1a4>)
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	3310      	adds	r3, #16
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d3e8      	bcc.n	800979a <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 80097c8:	79fa      	ldrb	r2, [r7, #7]
 80097ca:	4947      	ldr	r1, [pc, #284]	; (80098e8 <DC_MOTOR_Init+0x1a4>)
 80097cc:	4613      	mov	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	3308      	adds	r3, #8
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	4b43      	ldr	r3, [pc, #268]	; (80098ec <DC_MOTOR_Init+0x1a8>)
 80097de:	fb03 f302 	mul.w	r3, r3, r2
 80097e2:	4618      	mov	r0, r3
 80097e4:	79fa      	ldrb	r2, [r7, #7]
 80097e6:	4940      	ldr	r1, [pc, #256]	; (80098e8 <DC_MOTOR_Init+0x1a4>)
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	440b      	add	r3, r1
 80097f2:	330c      	adds	r3, #12
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80097fa:	fb02 f303 	mul.w	r3, r2, r3
 80097fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 8009806:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800980a:	3b01      	subs	r3, #1
 800980c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 8009810:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009814:	3b02      	subs	r3, #2
 8009816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 800981a:	79fa      	ldrb	r2, [r7, #7]
 800981c:	4932      	ldr	r1, [pc, #200]	; (80098e8 <DC_MOTOR_Init+0x1a4>)
 800981e:	4613      	mov	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	440b      	add	r3, r1
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 800982c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009830:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8009832:	2360      	movs	r3, #96	; 0x60
 8009834:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 8009836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800983a:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800983c:	2300      	movs	r3, #0
 800983e:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009840:	2380      	movs	r3, #128	; 0x80
 8009842:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 8009844:	f107 0308 	add.w	r3, r7, #8
 8009848:	4618      	mov	r0, r3
 800984a:	f7fc fdd1 	bl	80063f0 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800984e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009852:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8009854:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8009858:	f107 0308 	add.w	r3, r7, #8
 800985c:	4611      	mov	r1, r2
 800985e:	4618      	mov	r0, r3
 8009860:	f7fd fe7c 	bl	800755c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8009864:	f107 0308 	add.w	r3, r7, #8
 8009868:	4618      	mov	r0, r3
 800986a:	f7fc ff77 	bl	800675c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800986e:	2300      	movs	r3, #0
 8009870:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009872:	2300      	movs	r3, #0
 8009874:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8009876:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800987a:	f107 0308 	add.w	r3, r7, #8
 800987e:	4611      	mov	r1, r2
 8009880:	4618      	mov	r0, r3
 8009882:	f7fe fe0b 	bl	800849c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009886:	2360      	movs	r3, #96	; 0x60
 8009888:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 800988a:	2300      	movs	r3, #0
 800988c:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800988e:	2300      	movs	r3, #0
 8009890:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009892:	2300      	movs	r3, #0
 8009894:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8009896:	79fa      	ldrb	r2, [r7, #7]
 8009898:	4913      	ldr	r1, [pc, #76]	; (80098e8 <DC_MOTOR_Init+0x1a4>)
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	440b      	add	r3, r1
 80098a4:	3304      	adds	r3, #4
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80098ac:	f107 0308 	add.w	r3, r7, #8
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fd fc7b 	bl	80071ac <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 80098b6:	f107 0308 	add.w	r3, r7, #8
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7f9 f956 	bl	8002b6c <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 80098c0:	79fa      	ldrb	r2, [r7, #7]
 80098c2:	4909      	ldr	r1, [pc, #36]	; (80098e8 <DC_MOTOR_Init+0x1a4>)
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	3304      	adds	r3, #4
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	f107 0308 	add.w	r3, r7, #8
 80098d6:	4611      	mov	r1, r2
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fd f82f 	bl	800693c <HAL_TIM_PWM_Start>
}
 80098de:	bf00      	nop
 80098e0:	3790      	adds	r7, #144	; 0x90
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	0800a668 	.word	0x0800a668
 80098ec:	000f4240 	.word	0x000f4240

080098f0 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	4603      	mov	r3, r0
 80098f8:	460a      	mov	r2, r1
 80098fa:	71fb      	strb	r3, [r7, #7]
 80098fc:	4613      	mov	r3, r2
 80098fe:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8009900:	79fa      	ldrb	r2, [r7, #7]
 8009902:	4928      	ldr	r1, [pc, #160]	; (80099a4 <DC_MOTOR_Start+0xb4>)
 8009904:	4613      	mov	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	3304      	adds	r3, #4
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8009916:	79fa      	ldrb	r2, [r7, #7]
 8009918:	4922      	ldr	r1, [pc, #136]	; (80099a4 <DC_MOTOR_Start+0xb4>)
 800991a:	4613      	mov	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4413      	add	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	440b      	add	r3, r1
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	88ba      	ldrh	r2, [r7, #4]
 8009928:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800992a:	e035      	b.n	8009998 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800992c:	79fa      	ldrb	r2, [r7, #7]
 800992e:	491d      	ldr	r1, [pc, #116]	; (80099a4 <DC_MOTOR_Start+0xb4>)
 8009930:	4613      	mov	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	440b      	add	r3, r1
 800993a:	3304      	adds	r3, #4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b04      	cmp	r3, #4
 8009940:	d10a      	bne.n	8009958 <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 8009942:	79fa      	ldrb	r2, [r7, #7]
 8009944:	4917      	ldr	r1, [pc, #92]	; (80099a4 <DC_MOTOR_Start+0xb4>)
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	88ba      	ldrh	r2, [r7, #4]
 8009954:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009956:	e01f      	b.n	8009998 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8009958:	79fa      	ldrb	r2, [r7, #7]
 800995a:	4912      	ldr	r1, [pc, #72]	; (80099a4 <DC_MOTOR_Start+0xb4>)
 800995c:	4613      	mov	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	440b      	add	r3, r1
 8009966:	3304      	adds	r3, #4
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b08      	cmp	r3, #8
 800996c:	d10a      	bne.n	8009984 <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 800996e:	79fa      	ldrb	r2, [r7, #7]
 8009970:	490c      	ldr	r1, [pc, #48]	; (80099a4 <DC_MOTOR_Start+0xb4>)
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	440b      	add	r3, r1
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	88ba      	ldrh	r2, [r7, #4]
 8009980:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009982:	e009      	b.n	8009998 <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8009984:	79fa      	ldrb	r2, [r7, #7]
 8009986:	4907      	ldr	r1, [pc, #28]	; (80099a4 <DC_MOTOR_Start+0xb4>)
 8009988:	4613      	mov	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	440b      	add	r3, r1
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	88ba      	ldrh	r2, [r7, #4]
 8009996:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	0800a668 	.word	0x0800a668

080099a8 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4603      	mov	r3, r0
 80099b0:	460a      	mov	r2, r1
 80099b2:	71fb      	strb	r3, [r7, #7]
 80099b4:	4613      	mov	r3, r2
 80099b6:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80099b8:	79fa      	ldrb	r2, [r7, #7]
 80099ba:	4928      	ldr	r1, [pc, #160]	; (8009a5c <DC_MOTOR_Set_Speed+0xb4>)
 80099bc:	4613      	mov	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	440b      	add	r3, r1
 80099c6:	3304      	adds	r3, #4
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10a      	bne.n	80099e4 <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 80099ce:	79fa      	ldrb	r2, [r7, #7]
 80099d0:	4922      	ldr	r1, [pc, #136]	; (8009a5c <DC_MOTOR_Set_Speed+0xb4>)
 80099d2:	4613      	mov	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	440b      	add	r3, r1
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	88ba      	ldrh	r2, [r7, #4]
 80099e0:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 80099e2:	e035      	b.n	8009a50 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80099e4:	79fa      	ldrb	r2, [r7, #7]
 80099e6:	491d      	ldr	r1, [pc, #116]	; (8009a5c <DC_MOTOR_Set_Speed+0xb4>)
 80099e8:	4613      	mov	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	440b      	add	r3, r1
 80099f2:	3304      	adds	r3, #4
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b04      	cmp	r3, #4
 80099f8:	d10a      	bne.n	8009a10 <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 80099fa:	79fa      	ldrb	r2, [r7, #7]
 80099fc:	4917      	ldr	r1, [pc, #92]	; (8009a5c <DC_MOTOR_Set_Speed+0xb4>)
 80099fe:	4613      	mov	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	440b      	add	r3, r1
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	88ba      	ldrh	r2, [r7, #4]
 8009a0c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009a0e:	e01f      	b.n	8009a50 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8009a10:	79fa      	ldrb	r2, [r7, #7]
 8009a12:	4912      	ldr	r1, [pc, #72]	; (8009a5c <DC_MOTOR_Set_Speed+0xb4>)
 8009a14:	4613      	mov	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	440b      	add	r3, r1
 8009a1e:	3304      	adds	r3, #4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b08      	cmp	r3, #8
 8009a24:	d10a      	bne.n	8009a3c <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8009a26:	79fa      	ldrb	r2, [r7, #7]
 8009a28:	490c      	ldr	r1, [pc, #48]	; (8009a5c <DC_MOTOR_Set_Speed+0xb4>)
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	440b      	add	r3, r1
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	88ba      	ldrh	r2, [r7, #4]
 8009a38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009a3a:	e009      	b.n	8009a50 <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8009a3c:	79fa      	ldrb	r2, [r7, #7]
 8009a3e:	4907      	ldr	r1, [pc, #28]	; (8009a5c <DC_MOTOR_Set_Speed+0xb4>)
 8009a40:	4613      	mov	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	88ba      	ldrh	r2, [r7, #4]
 8009a4e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	0800a668 	.word	0x0800a668

08009a60 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8009a60:	b480      	push	{r7}
 8009a62:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8009a64:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <DWT_Delay_Init+0x58>)
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	4a13      	ldr	r2, [pc, #76]	; (8009ab8 <DWT_Delay_Init+0x58>)
 8009a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a6e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8009a70:	4b11      	ldr	r3, [pc, #68]	; (8009ab8 <DWT_Delay_Init+0x58>)
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	4a10      	ldr	r2, [pc, #64]	; (8009ab8 <DWT_Delay_Init+0x58>)
 8009a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a7a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8009a7c:	4b0f      	ldr	r3, [pc, #60]	; (8009abc <DWT_Delay_Init+0x5c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a0e      	ldr	r2, [pc, #56]	; (8009abc <DWT_Delay_Init+0x5c>)
 8009a82:	f023 0301 	bic.w	r3, r3, #1
 8009a86:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8009a88:	4b0c      	ldr	r3, [pc, #48]	; (8009abc <DWT_Delay_Init+0x5c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a0b      	ldr	r2, [pc, #44]	; (8009abc <DWT_Delay_Init+0x5c>)
 8009a8e:	f043 0301 	orr.w	r3, r3, #1
 8009a92:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8009a94:	4b09      	ldr	r3, [pc, #36]	; (8009abc <DWT_Delay_Init+0x5c>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8009a9a:	bf00      	nop
    __ASM volatile ("NOP");
 8009a9c:	bf00      	nop
    __ASM volatile ("NOP");
 8009a9e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8009aa0:	4b06      	ldr	r3, [pc, #24]	; (8009abc <DWT_Delay_Init+0x5c>)
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d001      	beq.n	8009aac <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	e000      	b.n	8009aae <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8009aac:	2301      	movs	r3, #1
    }
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	e000edf0 	.word	0xe000edf0
 8009abc:	e0001000 	.word	0xe0001000

08009ac0 <__errno>:
 8009ac0:	4b01      	ldr	r3, [pc, #4]	; (8009ac8 <__errno+0x8>)
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	200000b0 	.word	0x200000b0

08009acc <__libc_init_array>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	4d0d      	ldr	r5, [pc, #52]	; (8009b04 <__libc_init_array+0x38>)
 8009ad0:	4c0d      	ldr	r4, [pc, #52]	; (8009b08 <__libc_init_array+0x3c>)
 8009ad2:	1b64      	subs	r4, r4, r5
 8009ad4:	10a4      	asrs	r4, r4, #2
 8009ad6:	2600      	movs	r6, #0
 8009ad8:	42a6      	cmp	r6, r4
 8009ada:	d109      	bne.n	8009af0 <__libc_init_array+0x24>
 8009adc:	4d0b      	ldr	r5, [pc, #44]	; (8009b0c <__libc_init_array+0x40>)
 8009ade:	4c0c      	ldr	r4, [pc, #48]	; (8009b10 <__libc_init_array+0x44>)
 8009ae0:	f000 fc4e 	bl	800a380 <_init>
 8009ae4:	1b64      	subs	r4, r4, r5
 8009ae6:	10a4      	asrs	r4, r4, #2
 8009ae8:	2600      	movs	r6, #0
 8009aea:	42a6      	cmp	r6, r4
 8009aec:	d105      	bne.n	8009afa <__libc_init_array+0x2e>
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af4:	4798      	blx	r3
 8009af6:	3601      	adds	r6, #1
 8009af8:	e7ee      	b.n	8009ad8 <__libc_init_array+0xc>
 8009afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009afe:	4798      	blx	r3
 8009b00:	3601      	adds	r6, #1
 8009b02:	e7f2      	b.n	8009aea <__libc_init_array+0x1e>
 8009b04:	0800a6cc 	.word	0x0800a6cc
 8009b08:	0800a6cc 	.word	0x0800a6cc
 8009b0c:	0800a6cc 	.word	0x0800a6cc
 8009b10:	0800a6d0 	.word	0x0800a6d0

08009b14 <memcpy>:
 8009b14:	440a      	add	r2, r1
 8009b16:	4291      	cmp	r1, r2
 8009b18:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b1c:	d100      	bne.n	8009b20 <memcpy+0xc>
 8009b1e:	4770      	bx	lr
 8009b20:	b510      	push	{r4, lr}
 8009b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b2a:	4291      	cmp	r1, r2
 8009b2c:	d1f9      	bne.n	8009b22 <memcpy+0xe>
 8009b2e:	bd10      	pop	{r4, pc}

08009b30 <memset>:
 8009b30:	4402      	add	r2, r0
 8009b32:	4603      	mov	r3, r0
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d100      	bne.n	8009b3a <memset+0xa>
 8009b38:	4770      	bx	lr
 8009b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b3e:	e7f9      	b.n	8009b34 <memset+0x4>

08009b40 <siprintf>:
 8009b40:	b40e      	push	{r1, r2, r3}
 8009b42:	b500      	push	{lr}
 8009b44:	b09c      	sub	sp, #112	; 0x70
 8009b46:	ab1d      	add	r3, sp, #116	; 0x74
 8009b48:	9002      	str	r0, [sp, #8]
 8009b4a:	9006      	str	r0, [sp, #24]
 8009b4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b50:	4809      	ldr	r0, [pc, #36]	; (8009b78 <siprintf+0x38>)
 8009b52:	9107      	str	r1, [sp, #28]
 8009b54:	9104      	str	r1, [sp, #16]
 8009b56:	4909      	ldr	r1, [pc, #36]	; (8009b7c <siprintf+0x3c>)
 8009b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b5c:	9105      	str	r1, [sp, #20]
 8009b5e:	6800      	ldr	r0, [r0, #0]
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	a902      	add	r1, sp, #8
 8009b64:	f000 f868 	bl	8009c38 <_svfiprintf_r>
 8009b68:	9b02      	ldr	r3, [sp, #8]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	701a      	strb	r2, [r3, #0]
 8009b6e:	b01c      	add	sp, #112	; 0x70
 8009b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b74:	b003      	add	sp, #12
 8009b76:	4770      	bx	lr
 8009b78:	200000b0 	.word	0x200000b0
 8009b7c:	ffff0208 	.word	0xffff0208

08009b80 <__ssputs_r>:
 8009b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b84:	688e      	ldr	r6, [r1, #8]
 8009b86:	429e      	cmp	r6, r3
 8009b88:	4682      	mov	sl, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	4690      	mov	r8, r2
 8009b8e:	461f      	mov	r7, r3
 8009b90:	d838      	bhi.n	8009c04 <__ssputs_r+0x84>
 8009b92:	898a      	ldrh	r2, [r1, #12]
 8009b94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b98:	d032      	beq.n	8009c00 <__ssputs_r+0x80>
 8009b9a:	6825      	ldr	r5, [r4, #0]
 8009b9c:	6909      	ldr	r1, [r1, #16]
 8009b9e:	eba5 0901 	sub.w	r9, r5, r1
 8009ba2:	6965      	ldr	r5, [r4, #20]
 8009ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bac:	3301      	adds	r3, #1
 8009bae:	444b      	add	r3, r9
 8009bb0:	106d      	asrs	r5, r5, #1
 8009bb2:	429d      	cmp	r5, r3
 8009bb4:	bf38      	it	cc
 8009bb6:	461d      	movcc	r5, r3
 8009bb8:	0553      	lsls	r3, r2, #21
 8009bba:	d531      	bpl.n	8009c20 <__ssputs_r+0xa0>
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	f000 fb39 	bl	800a234 <_malloc_r>
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	b950      	cbnz	r0, 8009bdc <__ssputs_r+0x5c>
 8009bc6:	230c      	movs	r3, #12
 8009bc8:	f8ca 3000 	str.w	r3, [sl]
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bd2:	81a3      	strh	r3, [r4, #12]
 8009bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bdc:	6921      	ldr	r1, [r4, #16]
 8009bde:	464a      	mov	r2, r9
 8009be0:	f7ff ff98 	bl	8009b14 <memcpy>
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bee:	81a3      	strh	r3, [r4, #12]
 8009bf0:	6126      	str	r6, [r4, #16]
 8009bf2:	6165      	str	r5, [r4, #20]
 8009bf4:	444e      	add	r6, r9
 8009bf6:	eba5 0509 	sub.w	r5, r5, r9
 8009bfa:	6026      	str	r6, [r4, #0]
 8009bfc:	60a5      	str	r5, [r4, #8]
 8009bfe:	463e      	mov	r6, r7
 8009c00:	42be      	cmp	r6, r7
 8009c02:	d900      	bls.n	8009c06 <__ssputs_r+0x86>
 8009c04:	463e      	mov	r6, r7
 8009c06:	4632      	mov	r2, r6
 8009c08:	6820      	ldr	r0, [r4, #0]
 8009c0a:	4641      	mov	r1, r8
 8009c0c:	f000 faa8 	bl	800a160 <memmove>
 8009c10:	68a3      	ldr	r3, [r4, #8]
 8009c12:	6822      	ldr	r2, [r4, #0]
 8009c14:	1b9b      	subs	r3, r3, r6
 8009c16:	4432      	add	r2, r6
 8009c18:	60a3      	str	r3, [r4, #8]
 8009c1a:	6022      	str	r2, [r4, #0]
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e7db      	b.n	8009bd8 <__ssputs_r+0x58>
 8009c20:	462a      	mov	r2, r5
 8009c22:	f000 fb61 	bl	800a2e8 <_realloc_r>
 8009c26:	4606      	mov	r6, r0
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d1e1      	bne.n	8009bf0 <__ssputs_r+0x70>
 8009c2c:	6921      	ldr	r1, [r4, #16]
 8009c2e:	4650      	mov	r0, sl
 8009c30:	f000 fab0 	bl	800a194 <_free_r>
 8009c34:	e7c7      	b.n	8009bc6 <__ssputs_r+0x46>
	...

08009c38 <_svfiprintf_r>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	4698      	mov	r8, r3
 8009c3e:	898b      	ldrh	r3, [r1, #12]
 8009c40:	061b      	lsls	r3, r3, #24
 8009c42:	b09d      	sub	sp, #116	; 0x74
 8009c44:	4607      	mov	r7, r0
 8009c46:	460d      	mov	r5, r1
 8009c48:	4614      	mov	r4, r2
 8009c4a:	d50e      	bpl.n	8009c6a <_svfiprintf_r+0x32>
 8009c4c:	690b      	ldr	r3, [r1, #16]
 8009c4e:	b963      	cbnz	r3, 8009c6a <_svfiprintf_r+0x32>
 8009c50:	2140      	movs	r1, #64	; 0x40
 8009c52:	f000 faef 	bl	800a234 <_malloc_r>
 8009c56:	6028      	str	r0, [r5, #0]
 8009c58:	6128      	str	r0, [r5, #16]
 8009c5a:	b920      	cbnz	r0, 8009c66 <_svfiprintf_r+0x2e>
 8009c5c:	230c      	movs	r3, #12
 8009c5e:	603b      	str	r3, [r7, #0]
 8009c60:	f04f 30ff 	mov.w	r0, #4294967295
 8009c64:	e0d1      	b.n	8009e0a <_svfiprintf_r+0x1d2>
 8009c66:	2340      	movs	r3, #64	; 0x40
 8009c68:	616b      	str	r3, [r5, #20]
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6e:	2320      	movs	r3, #32
 8009c70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c78:	2330      	movs	r3, #48	; 0x30
 8009c7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e24 <_svfiprintf_r+0x1ec>
 8009c7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c82:	f04f 0901 	mov.w	r9, #1
 8009c86:	4623      	mov	r3, r4
 8009c88:	469a      	mov	sl, r3
 8009c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c8e:	b10a      	cbz	r2, 8009c94 <_svfiprintf_r+0x5c>
 8009c90:	2a25      	cmp	r2, #37	; 0x25
 8009c92:	d1f9      	bne.n	8009c88 <_svfiprintf_r+0x50>
 8009c94:	ebba 0b04 	subs.w	fp, sl, r4
 8009c98:	d00b      	beq.n	8009cb2 <_svfiprintf_r+0x7a>
 8009c9a:	465b      	mov	r3, fp
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	f7ff ff6d 	bl	8009b80 <__ssputs_r>
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	f000 80aa 	beq.w	8009e00 <_svfiprintf_r+0x1c8>
 8009cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cae:	445a      	add	r2, fp
 8009cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8009cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 80a2 	beq.w	8009e00 <_svfiprintf_r+0x1c8>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cc6:	f10a 0a01 	add.w	sl, sl, #1
 8009cca:	9304      	str	r3, [sp, #16]
 8009ccc:	9307      	str	r3, [sp, #28]
 8009cce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cd2:	931a      	str	r3, [sp, #104]	; 0x68
 8009cd4:	4654      	mov	r4, sl
 8009cd6:	2205      	movs	r2, #5
 8009cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cdc:	4851      	ldr	r0, [pc, #324]	; (8009e24 <_svfiprintf_r+0x1ec>)
 8009cde:	f7f6 fa9f 	bl	8000220 <memchr>
 8009ce2:	9a04      	ldr	r2, [sp, #16]
 8009ce4:	b9d8      	cbnz	r0, 8009d1e <_svfiprintf_r+0xe6>
 8009ce6:	06d0      	lsls	r0, r2, #27
 8009ce8:	bf44      	itt	mi
 8009cea:	2320      	movmi	r3, #32
 8009cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cf0:	0711      	lsls	r1, r2, #28
 8009cf2:	bf44      	itt	mi
 8009cf4:	232b      	movmi	r3, #43	; 0x2b
 8009cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8009cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8009d00:	d015      	beq.n	8009d2e <_svfiprintf_r+0xf6>
 8009d02:	9a07      	ldr	r2, [sp, #28]
 8009d04:	4654      	mov	r4, sl
 8009d06:	2000      	movs	r0, #0
 8009d08:	f04f 0c0a 	mov.w	ip, #10
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d12:	3b30      	subs	r3, #48	; 0x30
 8009d14:	2b09      	cmp	r3, #9
 8009d16:	d94e      	bls.n	8009db6 <_svfiprintf_r+0x17e>
 8009d18:	b1b0      	cbz	r0, 8009d48 <_svfiprintf_r+0x110>
 8009d1a:	9207      	str	r2, [sp, #28]
 8009d1c:	e014      	b.n	8009d48 <_svfiprintf_r+0x110>
 8009d1e:	eba0 0308 	sub.w	r3, r0, r8
 8009d22:	fa09 f303 	lsl.w	r3, r9, r3
 8009d26:	4313      	orrs	r3, r2
 8009d28:	9304      	str	r3, [sp, #16]
 8009d2a:	46a2      	mov	sl, r4
 8009d2c:	e7d2      	b.n	8009cd4 <_svfiprintf_r+0x9c>
 8009d2e:	9b03      	ldr	r3, [sp, #12]
 8009d30:	1d19      	adds	r1, r3, #4
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	9103      	str	r1, [sp, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	bfbb      	ittet	lt
 8009d3a:	425b      	neglt	r3, r3
 8009d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d40:	9307      	strge	r3, [sp, #28]
 8009d42:	9307      	strlt	r3, [sp, #28]
 8009d44:	bfb8      	it	lt
 8009d46:	9204      	strlt	r2, [sp, #16]
 8009d48:	7823      	ldrb	r3, [r4, #0]
 8009d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d4c:	d10c      	bne.n	8009d68 <_svfiprintf_r+0x130>
 8009d4e:	7863      	ldrb	r3, [r4, #1]
 8009d50:	2b2a      	cmp	r3, #42	; 0x2a
 8009d52:	d135      	bne.n	8009dc0 <_svfiprintf_r+0x188>
 8009d54:	9b03      	ldr	r3, [sp, #12]
 8009d56:	1d1a      	adds	r2, r3, #4
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	9203      	str	r2, [sp, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	bfb8      	it	lt
 8009d60:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d64:	3402      	adds	r4, #2
 8009d66:	9305      	str	r3, [sp, #20]
 8009d68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e34 <_svfiprintf_r+0x1fc>
 8009d6c:	7821      	ldrb	r1, [r4, #0]
 8009d6e:	2203      	movs	r2, #3
 8009d70:	4650      	mov	r0, sl
 8009d72:	f7f6 fa55 	bl	8000220 <memchr>
 8009d76:	b140      	cbz	r0, 8009d8a <_svfiprintf_r+0x152>
 8009d78:	2340      	movs	r3, #64	; 0x40
 8009d7a:	eba0 000a 	sub.w	r0, r0, sl
 8009d7e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	4303      	orrs	r3, r0
 8009d86:	3401      	adds	r4, #1
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8e:	4826      	ldr	r0, [pc, #152]	; (8009e28 <_svfiprintf_r+0x1f0>)
 8009d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d94:	2206      	movs	r2, #6
 8009d96:	f7f6 fa43 	bl	8000220 <memchr>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d038      	beq.n	8009e10 <_svfiprintf_r+0x1d8>
 8009d9e:	4b23      	ldr	r3, [pc, #140]	; (8009e2c <_svfiprintf_r+0x1f4>)
 8009da0:	bb1b      	cbnz	r3, 8009dea <_svfiprintf_r+0x1b2>
 8009da2:	9b03      	ldr	r3, [sp, #12]
 8009da4:	3307      	adds	r3, #7
 8009da6:	f023 0307 	bic.w	r3, r3, #7
 8009daa:	3308      	adds	r3, #8
 8009dac:	9303      	str	r3, [sp, #12]
 8009dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db0:	4433      	add	r3, r6
 8009db2:	9309      	str	r3, [sp, #36]	; 0x24
 8009db4:	e767      	b.n	8009c86 <_svfiprintf_r+0x4e>
 8009db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dba:	460c      	mov	r4, r1
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	e7a5      	b.n	8009d0c <_svfiprintf_r+0xd4>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	3401      	adds	r4, #1
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	f04f 0c0a 	mov.w	ip, #10
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd2:	3a30      	subs	r2, #48	; 0x30
 8009dd4:	2a09      	cmp	r2, #9
 8009dd6:	d903      	bls.n	8009de0 <_svfiprintf_r+0x1a8>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0c5      	beq.n	8009d68 <_svfiprintf_r+0x130>
 8009ddc:	9105      	str	r1, [sp, #20]
 8009dde:	e7c3      	b.n	8009d68 <_svfiprintf_r+0x130>
 8009de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009de4:	4604      	mov	r4, r0
 8009de6:	2301      	movs	r3, #1
 8009de8:	e7f0      	b.n	8009dcc <_svfiprintf_r+0x194>
 8009dea:	ab03      	add	r3, sp, #12
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	462a      	mov	r2, r5
 8009df0:	4b0f      	ldr	r3, [pc, #60]	; (8009e30 <_svfiprintf_r+0x1f8>)
 8009df2:	a904      	add	r1, sp, #16
 8009df4:	4638      	mov	r0, r7
 8009df6:	f3af 8000 	nop.w
 8009dfa:	1c42      	adds	r2, r0, #1
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	d1d6      	bne.n	8009dae <_svfiprintf_r+0x176>
 8009e00:	89ab      	ldrh	r3, [r5, #12]
 8009e02:	065b      	lsls	r3, r3, #25
 8009e04:	f53f af2c 	bmi.w	8009c60 <_svfiprintf_r+0x28>
 8009e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e0a:	b01d      	add	sp, #116	; 0x74
 8009e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e10:	ab03      	add	r3, sp, #12
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	462a      	mov	r2, r5
 8009e16:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <_svfiprintf_r+0x1f8>)
 8009e18:	a904      	add	r1, sp, #16
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	f000 f87a 	bl	8009f14 <_printf_i>
 8009e20:	e7eb      	b.n	8009dfa <_svfiprintf_r+0x1c2>
 8009e22:	bf00      	nop
 8009e24:	0800a690 	.word	0x0800a690
 8009e28:	0800a69a 	.word	0x0800a69a
 8009e2c:	00000000 	.word	0x00000000
 8009e30:	08009b81 	.word	0x08009b81
 8009e34:	0800a696 	.word	0x0800a696

08009e38 <_printf_common>:
 8009e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	4699      	mov	r9, r3
 8009e40:	688a      	ldr	r2, [r1, #8]
 8009e42:	690b      	ldr	r3, [r1, #16]
 8009e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	bfb8      	it	lt
 8009e4c:	4613      	movlt	r3, r2
 8009e4e:	6033      	str	r3, [r6, #0]
 8009e50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e54:	4607      	mov	r7, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	b10a      	cbz	r2, 8009e5e <_printf_common+0x26>
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	6033      	str	r3, [r6, #0]
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	0699      	lsls	r1, r3, #26
 8009e62:	bf42      	ittt	mi
 8009e64:	6833      	ldrmi	r3, [r6, #0]
 8009e66:	3302      	addmi	r3, #2
 8009e68:	6033      	strmi	r3, [r6, #0]
 8009e6a:	6825      	ldr	r5, [r4, #0]
 8009e6c:	f015 0506 	ands.w	r5, r5, #6
 8009e70:	d106      	bne.n	8009e80 <_printf_common+0x48>
 8009e72:	f104 0a19 	add.w	sl, r4, #25
 8009e76:	68e3      	ldr	r3, [r4, #12]
 8009e78:	6832      	ldr	r2, [r6, #0]
 8009e7a:	1a9b      	subs	r3, r3, r2
 8009e7c:	42ab      	cmp	r3, r5
 8009e7e:	dc26      	bgt.n	8009ece <_printf_common+0x96>
 8009e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e84:	1e13      	subs	r3, r2, #0
 8009e86:	6822      	ldr	r2, [r4, #0]
 8009e88:	bf18      	it	ne
 8009e8a:	2301      	movne	r3, #1
 8009e8c:	0692      	lsls	r2, r2, #26
 8009e8e:	d42b      	bmi.n	8009ee8 <_printf_common+0xb0>
 8009e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e94:	4649      	mov	r1, r9
 8009e96:	4638      	mov	r0, r7
 8009e98:	47c0      	blx	r8
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d01e      	beq.n	8009edc <_printf_common+0xa4>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	68e5      	ldr	r5, [r4, #12]
 8009ea2:	6832      	ldr	r2, [r6, #0]
 8009ea4:	f003 0306 	and.w	r3, r3, #6
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	bf08      	it	eq
 8009eac:	1aad      	subeq	r5, r5, r2
 8009eae:	68a3      	ldr	r3, [r4, #8]
 8009eb0:	6922      	ldr	r2, [r4, #16]
 8009eb2:	bf0c      	ite	eq
 8009eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009eb8:	2500      	movne	r5, #0
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	bfc4      	itt	gt
 8009ebe:	1a9b      	subgt	r3, r3, r2
 8009ec0:	18ed      	addgt	r5, r5, r3
 8009ec2:	2600      	movs	r6, #0
 8009ec4:	341a      	adds	r4, #26
 8009ec6:	42b5      	cmp	r5, r6
 8009ec8:	d11a      	bne.n	8009f00 <_printf_common+0xc8>
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e008      	b.n	8009ee0 <_printf_common+0xa8>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	4652      	mov	r2, sl
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	47c0      	blx	r8
 8009ed8:	3001      	adds	r0, #1
 8009eda:	d103      	bne.n	8009ee4 <_printf_common+0xac>
 8009edc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ee4:	3501      	adds	r5, #1
 8009ee6:	e7c6      	b.n	8009e76 <_printf_common+0x3e>
 8009ee8:	18e1      	adds	r1, r4, r3
 8009eea:	1c5a      	adds	r2, r3, #1
 8009eec:	2030      	movs	r0, #48	; 0x30
 8009eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ef2:	4422      	add	r2, r4
 8009ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009efc:	3302      	adds	r3, #2
 8009efe:	e7c7      	b.n	8009e90 <_printf_common+0x58>
 8009f00:	2301      	movs	r3, #1
 8009f02:	4622      	mov	r2, r4
 8009f04:	4649      	mov	r1, r9
 8009f06:	4638      	mov	r0, r7
 8009f08:	47c0      	blx	r8
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	d0e6      	beq.n	8009edc <_printf_common+0xa4>
 8009f0e:	3601      	adds	r6, #1
 8009f10:	e7d9      	b.n	8009ec6 <_printf_common+0x8e>
	...

08009f14 <_printf_i>:
 8009f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f18:	460c      	mov	r4, r1
 8009f1a:	4691      	mov	r9, r2
 8009f1c:	7e27      	ldrb	r7, [r4, #24]
 8009f1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f20:	2f78      	cmp	r7, #120	; 0x78
 8009f22:	4680      	mov	r8, r0
 8009f24:	469a      	mov	sl, r3
 8009f26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f2a:	d807      	bhi.n	8009f3c <_printf_i+0x28>
 8009f2c:	2f62      	cmp	r7, #98	; 0x62
 8009f2e:	d80a      	bhi.n	8009f46 <_printf_i+0x32>
 8009f30:	2f00      	cmp	r7, #0
 8009f32:	f000 80d8 	beq.w	800a0e6 <_printf_i+0x1d2>
 8009f36:	2f58      	cmp	r7, #88	; 0x58
 8009f38:	f000 80a3 	beq.w	800a082 <_printf_i+0x16e>
 8009f3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f44:	e03a      	b.n	8009fbc <_printf_i+0xa8>
 8009f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f4a:	2b15      	cmp	r3, #21
 8009f4c:	d8f6      	bhi.n	8009f3c <_printf_i+0x28>
 8009f4e:	a001      	add	r0, pc, #4	; (adr r0, 8009f54 <_printf_i+0x40>)
 8009f50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f54:	08009fad 	.word	0x08009fad
 8009f58:	08009fc1 	.word	0x08009fc1
 8009f5c:	08009f3d 	.word	0x08009f3d
 8009f60:	08009f3d 	.word	0x08009f3d
 8009f64:	08009f3d 	.word	0x08009f3d
 8009f68:	08009f3d 	.word	0x08009f3d
 8009f6c:	08009fc1 	.word	0x08009fc1
 8009f70:	08009f3d 	.word	0x08009f3d
 8009f74:	08009f3d 	.word	0x08009f3d
 8009f78:	08009f3d 	.word	0x08009f3d
 8009f7c:	08009f3d 	.word	0x08009f3d
 8009f80:	0800a0cd 	.word	0x0800a0cd
 8009f84:	08009ff1 	.word	0x08009ff1
 8009f88:	0800a0af 	.word	0x0800a0af
 8009f8c:	08009f3d 	.word	0x08009f3d
 8009f90:	08009f3d 	.word	0x08009f3d
 8009f94:	0800a0ef 	.word	0x0800a0ef
 8009f98:	08009f3d 	.word	0x08009f3d
 8009f9c:	08009ff1 	.word	0x08009ff1
 8009fa0:	08009f3d 	.word	0x08009f3d
 8009fa4:	08009f3d 	.word	0x08009f3d
 8009fa8:	0800a0b7 	.word	0x0800a0b7
 8009fac:	680b      	ldr	r3, [r1, #0]
 8009fae:	1d1a      	adds	r2, r3, #4
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	600a      	str	r2, [r1, #0]
 8009fb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e0a3      	b.n	800a108 <_printf_i+0x1f4>
 8009fc0:	6825      	ldr	r5, [r4, #0]
 8009fc2:	6808      	ldr	r0, [r1, #0]
 8009fc4:	062e      	lsls	r6, r5, #24
 8009fc6:	f100 0304 	add.w	r3, r0, #4
 8009fca:	d50a      	bpl.n	8009fe2 <_printf_i+0xce>
 8009fcc:	6805      	ldr	r5, [r0, #0]
 8009fce:	600b      	str	r3, [r1, #0]
 8009fd0:	2d00      	cmp	r5, #0
 8009fd2:	da03      	bge.n	8009fdc <_printf_i+0xc8>
 8009fd4:	232d      	movs	r3, #45	; 0x2d
 8009fd6:	426d      	negs	r5, r5
 8009fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fdc:	485e      	ldr	r0, [pc, #376]	; (800a158 <_printf_i+0x244>)
 8009fde:	230a      	movs	r3, #10
 8009fe0:	e019      	b.n	800a016 <_printf_i+0x102>
 8009fe2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009fe6:	6805      	ldr	r5, [r0, #0]
 8009fe8:	600b      	str	r3, [r1, #0]
 8009fea:	bf18      	it	ne
 8009fec:	b22d      	sxthne	r5, r5
 8009fee:	e7ef      	b.n	8009fd0 <_printf_i+0xbc>
 8009ff0:	680b      	ldr	r3, [r1, #0]
 8009ff2:	6825      	ldr	r5, [r4, #0]
 8009ff4:	1d18      	adds	r0, r3, #4
 8009ff6:	6008      	str	r0, [r1, #0]
 8009ff8:	0628      	lsls	r0, r5, #24
 8009ffa:	d501      	bpl.n	800a000 <_printf_i+0xec>
 8009ffc:	681d      	ldr	r5, [r3, #0]
 8009ffe:	e002      	b.n	800a006 <_printf_i+0xf2>
 800a000:	0669      	lsls	r1, r5, #25
 800a002:	d5fb      	bpl.n	8009ffc <_printf_i+0xe8>
 800a004:	881d      	ldrh	r5, [r3, #0]
 800a006:	4854      	ldr	r0, [pc, #336]	; (800a158 <_printf_i+0x244>)
 800a008:	2f6f      	cmp	r7, #111	; 0x6f
 800a00a:	bf0c      	ite	eq
 800a00c:	2308      	moveq	r3, #8
 800a00e:	230a      	movne	r3, #10
 800a010:	2100      	movs	r1, #0
 800a012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a016:	6866      	ldr	r6, [r4, #4]
 800a018:	60a6      	str	r6, [r4, #8]
 800a01a:	2e00      	cmp	r6, #0
 800a01c:	bfa2      	ittt	ge
 800a01e:	6821      	ldrge	r1, [r4, #0]
 800a020:	f021 0104 	bicge.w	r1, r1, #4
 800a024:	6021      	strge	r1, [r4, #0]
 800a026:	b90d      	cbnz	r5, 800a02c <_printf_i+0x118>
 800a028:	2e00      	cmp	r6, #0
 800a02a:	d04d      	beq.n	800a0c8 <_printf_i+0x1b4>
 800a02c:	4616      	mov	r6, r2
 800a02e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a032:	fb03 5711 	mls	r7, r3, r1, r5
 800a036:	5dc7      	ldrb	r7, [r0, r7]
 800a038:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a03c:	462f      	mov	r7, r5
 800a03e:	42bb      	cmp	r3, r7
 800a040:	460d      	mov	r5, r1
 800a042:	d9f4      	bls.n	800a02e <_printf_i+0x11a>
 800a044:	2b08      	cmp	r3, #8
 800a046:	d10b      	bne.n	800a060 <_printf_i+0x14c>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	07df      	lsls	r7, r3, #31
 800a04c:	d508      	bpl.n	800a060 <_printf_i+0x14c>
 800a04e:	6923      	ldr	r3, [r4, #16]
 800a050:	6861      	ldr	r1, [r4, #4]
 800a052:	4299      	cmp	r1, r3
 800a054:	bfde      	ittt	le
 800a056:	2330      	movle	r3, #48	; 0x30
 800a058:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a05c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a060:	1b92      	subs	r2, r2, r6
 800a062:	6122      	str	r2, [r4, #16]
 800a064:	f8cd a000 	str.w	sl, [sp]
 800a068:	464b      	mov	r3, r9
 800a06a:	aa03      	add	r2, sp, #12
 800a06c:	4621      	mov	r1, r4
 800a06e:	4640      	mov	r0, r8
 800a070:	f7ff fee2 	bl	8009e38 <_printf_common>
 800a074:	3001      	adds	r0, #1
 800a076:	d14c      	bne.n	800a112 <_printf_i+0x1fe>
 800a078:	f04f 30ff 	mov.w	r0, #4294967295
 800a07c:	b004      	add	sp, #16
 800a07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a082:	4835      	ldr	r0, [pc, #212]	; (800a158 <_printf_i+0x244>)
 800a084:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	680e      	ldr	r6, [r1, #0]
 800a08c:	061f      	lsls	r7, r3, #24
 800a08e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a092:	600e      	str	r6, [r1, #0]
 800a094:	d514      	bpl.n	800a0c0 <_printf_i+0x1ac>
 800a096:	07d9      	lsls	r1, r3, #31
 800a098:	bf44      	itt	mi
 800a09a:	f043 0320 	orrmi.w	r3, r3, #32
 800a09e:	6023      	strmi	r3, [r4, #0]
 800a0a0:	b91d      	cbnz	r5, 800a0aa <_printf_i+0x196>
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	f023 0320 	bic.w	r3, r3, #32
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	2310      	movs	r3, #16
 800a0ac:	e7b0      	b.n	800a010 <_printf_i+0xfc>
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	f043 0320 	orr.w	r3, r3, #32
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	2378      	movs	r3, #120	; 0x78
 800a0b8:	4828      	ldr	r0, [pc, #160]	; (800a15c <_printf_i+0x248>)
 800a0ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0be:	e7e3      	b.n	800a088 <_printf_i+0x174>
 800a0c0:	065e      	lsls	r6, r3, #25
 800a0c2:	bf48      	it	mi
 800a0c4:	b2ad      	uxthmi	r5, r5
 800a0c6:	e7e6      	b.n	800a096 <_printf_i+0x182>
 800a0c8:	4616      	mov	r6, r2
 800a0ca:	e7bb      	b.n	800a044 <_printf_i+0x130>
 800a0cc:	680b      	ldr	r3, [r1, #0]
 800a0ce:	6826      	ldr	r6, [r4, #0]
 800a0d0:	6960      	ldr	r0, [r4, #20]
 800a0d2:	1d1d      	adds	r5, r3, #4
 800a0d4:	600d      	str	r5, [r1, #0]
 800a0d6:	0635      	lsls	r5, r6, #24
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	d501      	bpl.n	800a0e0 <_printf_i+0x1cc>
 800a0dc:	6018      	str	r0, [r3, #0]
 800a0de:	e002      	b.n	800a0e6 <_printf_i+0x1d2>
 800a0e0:	0671      	lsls	r1, r6, #25
 800a0e2:	d5fb      	bpl.n	800a0dc <_printf_i+0x1c8>
 800a0e4:	8018      	strh	r0, [r3, #0]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	6123      	str	r3, [r4, #16]
 800a0ea:	4616      	mov	r6, r2
 800a0ec:	e7ba      	b.n	800a064 <_printf_i+0x150>
 800a0ee:	680b      	ldr	r3, [r1, #0]
 800a0f0:	1d1a      	adds	r2, r3, #4
 800a0f2:	600a      	str	r2, [r1, #0]
 800a0f4:	681e      	ldr	r6, [r3, #0]
 800a0f6:	6862      	ldr	r2, [r4, #4]
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f7f6 f890 	bl	8000220 <memchr>
 800a100:	b108      	cbz	r0, 800a106 <_printf_i+0x1f2>
 800a102:	1b80      	subs	r0, r0, r6
 800a104:	6060      	str	r0, [r4, #4]
 800a106:	6863      	ldr	r3, [r4, #4]
 800a108:	6123      	str	r3, [r4, #16]
 800a10a:	2300      	movs	r3, #0
 800a10c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a110:	e7a8      	b.n	800a064 <_printf_i+0x150>
 800a112:	6923      	ldr	r3, [r4, #16]
 800a114:	4632      	mov	r2, r6
 800a116:	4649      	mov	r1, r9
 800a118:	4640      	mov	r0, r8
 800a11a:	47d0      	blx	sl
 800a11c:	3001      	adds	r0, #1
 800a11e:	d0ab      	beq.n	800a078 <_printf_i+0x164>
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	079b      	lsls	r3, r3, #30
 800a124:	d413      	bmi.n	800a14e <_printf_i+0x23a>
 800a126:	68e0      	ldr	r0, [r4, #12]
 800a128:	9b03      	ldr	r3, [sp, #12]
 800a12a:	4298      	cmp	r0, r3
 800a12c:	bfb8      	it	lt
 800a12e:	4618      	movlt	r0, r3
 800a130:	e7a4      	b.n	800a07c <_printf_i+0x168>
 800a132:	2301      	movs	r3, #1
 800a134:	4632      	mov	r2, r6
 800a136:	4649      	mov	r1, r9
 800a138:	4640      	mov	r0, r8
 800a13a:	47d0      	blx	sl
 800a13c:	3001      	adds	r0, #1
 800a13e:	d09b      	beq.n	800a078 <_printf_i+0x164>
 800a140:	3501      	adds	r5, #1
 800a142:	68e3      	ldr	r3, [r4, #12]
 800a144:	9903      	ldr	r1, [sp, #12]
 800a146:	1a5b      	subs	r3, r3, r1
 800a148:	42ab      	cmp	r3, r5
 800a14a:	dcf2      	bgt.n	800a132 <_printf_i+0x21e>
 800a14c:	e7eb      	b.n	800a126 <_printf_i+0x212>
 800a14e:	2500      	movs	r5, #0
 800a150:	f104 0619 	add.w	r6, r4, #25
 800a154:	e7f5      	b.n	800a142 <_printf_i+0x22e>
 800a156:	bf00      	nop
 800a158:	0800a6a1 	.word	0x0800a6a1
 800a15c:	0800a6b2 	.word	0x0800a6b2

0800a160 <memmove>:
 800a160:	4288      	cmp	r0, r1
 800a162:	b510      	push	{r4, lr}
 800a164:	eb01 0402 	add.w	r4, r1, r2
 800a168:	d902      	bls.n	800a170 <memmove+0x10>
 800a16a:	4284      	cmp	r4, r0
 800a16c:	4623      	mov	r3, r4
 800a16e:	d807      	bhi.n	800a180 <memmove+0x20>
 800a170:	1e43      	subs	r3, r0, #1
 800a172:	42a1      	cmp	r1, r4
 800a174:	d008      	beq.n	800a188 <memmove+0x28>
 800a176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a17a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a17e:	e7f8      	b.n	800a172 <memmove+0x12>
 800a180:	4402      	add	r2, r0
 800a182:	4601      	mov	r1, r0
 800a184:	428a      	cmp	r2, r1
 800a186:	d100      	bne.n	800a18a <memmove+0x2a>
 800a188:	bd10      	pop	{r4, pc}
 800a18a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a18e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a192:	e7f7      	b.n	800a184 <memmove+0x24>

0800a194 <_free_r>:
 800a194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a196:	2900      	cmp	r1, #0
 800a198:	d048      	beq.n	800a22c <_free_r+0x98>
 800a19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a19e:	9001      	str	r0, [sp, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1a6:	bfb8      	it	lt
 800a1a8:	18e4      	addlt	r4, r4, r3
 800a1aa:	f000 f8d3 	bl	800a354 <__malloc_lock>
 800a1ae:	4a20      	ldr	r2, [pc, #128]	; (800a230 <_free_r+0x9c>)
 800a1b0:	9801      	ldr	r0, [sp, #4]
 800a1b2:	6813      	ldr	r3, [r2, #0]
 800a1b4:	4615      	mov	r5, r2
 800a1b6:	b933      	cbnz	r3, 800a1c6 <_free_r+0x32>
 800a1b8:	6063      	str	r3, [r4, #4]
 800a1ba:	6014      	str	r4, [r2, #0]
 800a1bc:	b003      	add	sp, #12
 800a1be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1c2:	f000 b8cd 	b.w	800a360 <__malloc_unlock>
 800a1c6:	42a3      	cmp	r3, r4
 800a1c8:	d90b      	bls.n	800a1e2 <_free_r+0x4e>
 800a1ca:	6821      	ldr	r1, [r4, #0]
 800a1cc:	1862      	adds	r2, r4, r1
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	bf04      	itt	eq
 800a1d2:	681a      	ldreq	r2, [r3, #0]
 800a1d4:	685b      	ldreq	r3, [r3, #4]
 800a1d6:	6063      	str	r3, [r4, #4]
 800a1d8:	bf04      	itt	eq
 800a1da:	1852      	addeq	r2, r2, r1
 800a1dc:	6022      	streq	r2, [r4, #0]
 800a1de:	602c      	str	r4, [r5, #0]
 800a1e0:	e7ec      	b.n	800a1bc <_free_r+0x28>
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	b10b      	cbz	r3, 800a1ec <_free_r+0x58>
 800a1e8:	42a3      	cmp	r3, r4
 800a1ea:	d9fa      	bls.n	800a1e2 <_free_r+0x4e>
 800a1ec:	6811      	ldr	r1, [r2, #0]
 800a1ee:	1855      	adds	r5, r2, r1
 800a1f0:	42a5      	cmp	r5, r4
 800a1f2:	d10b      	bne.n	800a20c <_free_r+0x78>
 800a1f4:	6824      	ldr	r4, [r4, #0]
 800a1f6:	4421      	add	r1, r4
 800a1f8:	1854      	adds	r4, r2, r1
 800a1fa:	42a3      	cmp	r3, r4
 800a1fc:	6011      	str	r1, [r2, #0]
 800a1fe:	d1dd      	bne.n	800a1bc <_free_r+0x28>
 800a200:	681c      	ldr	r4, [r3, #0]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	6053      	str	r3, [r2, #4]
 800a206:	4421      	add	r1, r4
 800a208:	6011      	str	r1, [r2, #0]
 800a20a:	e7d7      	b.n	800a1bc <_free_r+0x28>
 800a20c:	d902      	bls.n	800a214 <_free_r+0x80>
 800a20e:	230c      	movs	r3, #12
 800a210:	6003      	str	r3, [r0, #0]
 800a212:	e7d3      	b.n	800a1bc <_free_r+0x28>
 800a214:	6825      	ldr	r5, [r4, #0]
 800a216:	1961      	adds	r1, r4, r5
 800a218:	428b      	cmp	r3, r1
 800a21a:	bf04      	itt	eq
 800a21c:	6819      	ldreq	r1, [r3, #0]
 800a21e:	685b      	ldreq	r3, [r3, #4]
 800a220:	6063      	str	r3, [r4, #4]
 800a222:	bf04      	itt	eq
 800a224:	1949      	addeq	r1, r1, r5
 800a226:	6021      	streq	r1, [r4, #0]
 800a228:	6054      	str	r4, [r2, #4]
 800a22a:	e7c7      	b.n	800a1bc <_free_r+0x28>
 800a22c:	b003      	add	sp, #12
 800a22e:	bd30      	pop	{r4, r5, pc}
 800a230:	200001f4 	.word	0x200001f4

0800a234 <_malloc_r>:
 800a234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a236:	1ccd      	adds	r5, r1, #3
 800a238:	f025 0503 	bic.w	r5, r5, #3
 800a23c:	3508      	adds	r5, #8
 800a23e:	2d0c      	cmp	r5, #12
 800a240:	bf38      	it	cc
 800a242:	250c      	movcc	r5, #12
 800a244:	2d00      	cmp	r5, #0
 800a246:	4606      	mov	r6, r0
 800a248:	db01      	blt.n	800a24e <_malloc_r+0x1a>
 800a24a:	42a9      	cmp	r1, r5
 800a24c:	d903      	bls.n	800a256 <_malloc_r+0x22>
 800a24e:	230c      	movs	r3, #12
 800a250:	6033      	str	r3, [r6, #0]
 800a252:	2000      	movs	r0, #0
 800a254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a256:	f000 f87d 	bl	800a354 <__malloc_lock>
 800a25a:	4921      	ldr	r1, [pc, #132]	; (800a2e0 <_malloc_r+0xac>)
 800a25c:	680a      	ldr	r2, [r1, #0]
 800a25e:	4614      	mov	r4, r2
 800a260:	b99c      	cbnz	r4, 800a28a <_malloc_r+0x56>
 800a262:	4f20      	ldr	r7, [pc, #128]	; (800a2e4 <_malloc_r+0xb0>)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	b923      	cbnz	r3, 800a272 <_malloc_r+0x3e>
 800a268:	4621      	mov	r1, r4
 800a26a:	4630      	mov	r0, r6
 800a26c:	f000 f862 	bl	800a334 <_sbrk_r>
 800a270:	6038      	str	r0, [r7, #0]
 800a272:	4629      	mov	r1, r5
 800a274:	4630      	mov	r0, r6
 800a276:	f000 f85d 	bl	800a334 <_sbrk_r>
 800a27a:	1c43      	adds	r3, r0, #1
 800a27c:	d123      	bne.n	800a2c6 <_malloc_r+0x92>
 800a27e:	230c      	movs	r3, #12
 800a280:	6033      	str	r3, [r6, #0]
 800a282:	4630      	mov	r0, r6
 800a284:	f000 f86c 	bl	800a360 <__malloc_unlock>
 800a288:	e7e3      	b.n	800a252 <_malloc_r+0x1e>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	1b5b      	subs	r3, r3, r5
 800a28e:	d417      	bmi.n	800a2c0 <_malloc_r+0x8c>
 800a290:	2b0b      	cmp	r3, #11
 800a292:	d903      	bls.n	800a29c <_malloc_r+0x68>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	441c      	add	r4, r3
 800a298:	6025      	str	r5, [r4, #0]
 800a29a:	e004      	b.n	800a2a6 <_malloc_r+0x72>
 800a29c:	6863      	ldr	r3, [r4, #4]
 800a29e:	42a2      	cmp	r2, r4
 800a2a0:	bf0c      	ite	eq
 800a2a2:	600b      	streq	r3, [r1, #0]
 800a2a4:	6053      	strne	r3, [r2, #4]
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f000 f85a 	bl	800a360 <__malloc_unlock>
 800a2ac:	f104 000b 	add.w	r0, r4, #11
 800a2b0:	1d23      	adds	r3, r4, #4
 800a2b2:	f020 0007 	bic.w	r0, r0, #7
 800a2b6:	1ac2      	subs	r2, r0, r3
 800a2b8:	d0cc      	beq.n	800a254 <_malloc_r+0x20>
 800a2ba:	1a1b      	subs	r3, r3, r0
 800a2bc:	50a3      	str	r3, [r4, r2]
 800a2be:	e7c9      	b.n	800a254 <_malloc_r+0x20>
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	6864      	ldr	r4, [r4, #4]
 800a2c4:	e7cc      	b.n	800a260 <_malloc_r+0x2c>
 800a2c6:	1cc4      	adds	r4, r0, #3
 800a2c8:	f024 0403 	bic.w	r4, r4, #3
 800a2cc:	42a0      	cmp	r0, r4
 800a2ce:	d0e3      	beq.n	800a298 <_malloc_r+0x64>
 800a2d0:	1a21      	subs	r1, r4, r0
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f000 f82e 	bl	800a334 <_sbrk_r>
 800a2d8:	3001      	adds	r0, #1
 800a2da:	d1dd      	bne.n	800a298 <_malloc_r+0x64>
 800a2dc:	e7cf      	b.n	800a27e <_malloc_r+0x4a>
 800a2de:	bf00      	nop
 800a2e0:	200001f4 	.word	0x200001f4
 800a2e4:	200001f8 	.word	0x200001f8

0800a2e8 <_realloc_r>:
 800a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ea:	4607      	mov	r7, r0
 800a2ec:	4614      	mov	r4, r2
 800a2ee:	460e      	mov	r6, r1
 800a2f0:	b921      	cbnz	r1, 800a2fc <_realloc_r+0x14>
 800a2f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	f7ff bf9c 	b.w	800a234 <_malloc_r>
 800a2fc:	b922      	cbnz	r2, 800a308 <_realloc_r+0x20>
 800a2fe:	f7ff ff49 	bl	800a194 <_free_r>
 800a302:	4625      	mov	r5, r4
 800a304:	4628      	mov	r0, r5
 800a306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a308:	f000 f830 	bl	800a36c <_malloc_usable_size_r>
 800a30c:	42a0      	cmp	r0, r4
 800a30e:	d20f      	bcs.n	800a330 <_realloc_r+0x48>
 800a310:	4621      	mov	r1, r4
 800a312:	4638      	mov	r0, r7
 800a314:	f7ff ff8e 	bl	800a234 <_malloc_r>
 800a318:	4605      	mov	r5, r0
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d0f2      	beq.n	800a304 <_realloc_r+0x1c>
 800a31e:	4631      	mov	r1, r6
 800a320:	4622      	mov	r2, r4
 800a322:	f7ff fbf7 	bl	8009b14 <memcpy>
 800a326:	4631      	mov	r1, r6
 800a328:	4638      	mov	r0, r7
 800a32a:	f7ff ff33 	bl	800a194 <_free_r>
 800a32e:	e7e9      	b.n	800a304 <_realloc_r+0x1c>
 800a330:	4635      	mov	r5, r6
 800a332:	e7e7      	b.n	800a304 <_realloc_r+0x1c>

0800a334 <_sbrk_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4d06      	ldr	r5, [pc, #24]	; (800a350 <_sbrk_r+0x1c>)
 800a338:	2300      	movs	r3, #0
 800a33a:	4604      	mov	r4, r0
 800a33c:	4608      	mov	r0, r1
 800a33e:	602b      	str	r3, [r5, #0]
 800a340:	f7f8 fde0 	bl	8002f04 <_sbrk>
 800a344:	1c43      	adds	r3, r0, #1
 800a346:	d102      	bne.n	800a34e <_sbrk_r+0x1a>
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	b103      	cbz	r3, 800a34e <_sbrk_r+0x1a>
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	200006b0 	.word	0x200006b0

0800a354 <__malloc_lock>:
 800a354:	4801      	ldr	r0, [pc, #4]	; (800a35c <__malloc_lock+0x8>)
 800a356:	f000 b811 	b.w	800a37c <__retarget_lock_acquire_recursive>
 800a35a:	bf00      	nop
 800a35c:	200006b8 	.word	0x200006b8

0800a360 <__malloc_unlock>:
 800a360:	4801      	ldr	r0, [pc, #4]	; (800a368 <__malloc_unlock+0x8>)
 800a362:	f000 b80c 	b.w	800a37e <__retarget_lock_release_recursive>
 800a366:	bf00      	nop
 800a368:	200006b8 	.word	0x200006b8

0800a36c <_malloc_usable_size_r>:
 800a36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a370:	1f18      	subs	r0, r3, #4
 800a372:	2b00      	cmp	r3, #0
 800a374:	bfbc      	itt	lt
 800a376:	580b      	ldrlt	r3, [r1, r0]
 800a378:	18c0      	addlt	r0, r0, r3
 800a37a:	4770      	bx	lr

0800a37c <__retarget_lock_acquire_recursive>:
 800a37c:	4770      	bx	lr

0800a37e <__retarget_lock_release_recursive>:
 800a37e:	4770      	bx	lr

0800a380 <_init>:
 800a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a382:	bf00      	nop
 800a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a386:	bc08      	pop	{r3}
 800a388:	469e      	mov	lr, r3
 800a38a:	4770      	bx	lr

0800a38c <_fini>:
 800a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38e:	bf00      	nop
 800a390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a392:	bc08      	pop	{r3}
 800a394:	469e      	mov	lr, r3
 800a396:	4770      	bx	lr
