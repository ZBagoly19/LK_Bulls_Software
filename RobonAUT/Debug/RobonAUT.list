
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000471c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f8  080048f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004900  08004900  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004900  08004900  00014900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004904  08004904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  2000000c  08004914  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08004914  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132ac  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a1  00000000  00000000  000332e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00035490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00036608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b7b  00000000  00000000  000376e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e12  00000000  00000000  0005925b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0fd1  00000000  00000000  0006e06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f03e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b80  00000000  00000000  0013f094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080048c8 	.word	0x080048c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080048c8 	.word	0x080048c8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f001 f962 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f826 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fbe4 	bl	8000cd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 fbb8 	bl	8000c80 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000510:	f000 f88c 	bl	800062c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000514:	f000 f8b8 	bl	8000688 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000518:	f000 f912 	bl	8000740 <MX_SPI1_Init>
  MX_SPI2_Init();
 800051c:	f000 f946 	bl	80007ac <MX_SPI2_Init>
  MX_SPI3_Init();
 8000520:	f000 f97a 	bl	8000818 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000524:	f000 f9ae 	bl	8000884 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000528:	f000 fa06 	bl	8000938 <MX_TIM4_Init>
  MX_UART4_Init();	//Bluetooth
 800052c:	f000 fb54 	bl	8000bd8 <MX_UART4_Init>
  MX_TIM8_Init();
 8000530:	f000 fa56 	bl	80009e0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000534:	f000 fb7a 	bl	8000c2c <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000538:	f000 f8d4 	bl	80006e4 <MX_I2C3_Init>
  MX_TIM12_Init();
 800053c:	f000 fafc 	bl	8000b38 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4, RX_BUFFER, BLUETOOTH_BUFFER_LEN);
 8000540:	2201      	movs	r2, #1
 8000542:	4902      	ldr	r1, [pc, #8]	; (800054c <main+0x50>)
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <main+0x54>)
 8000546:	f003 fb0e 	bl	8003b66 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054a:	e7fe      	b.n	800054a <main+0x4e>
 800054c:	20000028 	.word	0x20000028
 8000550:	200002f4 	.word	0x200002f4

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2234      	movs	r2, #52	; 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 f9a8 	bl	80048b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a28      	ldr	r2, [pc, #160]	; (8000624 <SystemClock_Config+0xd0>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000594:	2300      	movs	r3, #0
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xd4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xd4>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	603b      	str	r3, [r7, #0]
 80005b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005cc:	2348      	movs	r3, #72	; 0x48
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 f8c5 	bl	8002770 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005ec:	f000 fc34 	bl	8000e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	2102      	movs	r1, #2
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fde3 	bl	80021d8 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000618:	f000 fc1e 	bl	8000e58 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	; 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_I2C1_Init+0x50>)
 800066a:	f001 fc71 	bl	8001f50 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 fbf0 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000168 	.word	0x20000168
 8000680:	40005400 	.word	0x40005400
 8000684:	000186a0 	.word	0x000186a0

08000688 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C2_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2C2_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C2_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_I2C2_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C2_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006c6:	f001 fc43 	bl	8001f50 <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 fbc2 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200001bc 	.word	0x200001bc
 80006dc:	40005800 	.word	0x40005800
 80006e0:	000186a0 	.word	0x000186a0

080006e4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C3_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_I2C3_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C3_Init+0x50>)
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_I2C3_Init+0x58>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C3_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2C3_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2C3_Init+0x50>)
 8000702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000706:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_I2C3_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2C3_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_I2C3_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2C3_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_I2C3_Init+0x50>)
 8000722:	f001 fc15 	bl	8001f50 <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 fb94 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000002c 	.word	0x2000002c
 8000738:	40005c00 	.word	0x40005c00
 800073c:	000186a0 	.word	0x000186a0

08000740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_SPI1_Init+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI1_Init+0x64>)
 800074c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI1_Init+0x64>)
 800076c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000770:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI1_Init+0x64>)
 800078c:	220a      	movs	r2, #10
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000792:	f002 fa8b 	bl	8002cac <HAL_SPI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 fb5c 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000338 	.word	0x20000338
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_SPI2_Init+0x64>)
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_SPI2_Init+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_SPI2_Init+0x64>)
 80007b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_SPI2_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_SPI2_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_SPI2_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_SPI2_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_SPI2_Init+0x64>)
 80007d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SPI2_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_SPI2_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SPI2_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_SPI2_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SPI2_Init+0x64>)
 80007f8:	220a      	movs	r2, #10
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_SPI2_Init+0x64>)
 80007fe:	f002 fa55 	bl	8002cac <HAL_SPI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000808:	f000 fb26 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000080 	.word	0x20000080
 8000814:	40003800 	.word	0x40003800

08000818 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI3_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_SPI3_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI3_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI3_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI3_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI3_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI3_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI3_Init+0x64>)
 8000844:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000848:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI3_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI3_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI3_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI3_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI3_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI3_Init+0x64>)
 800086a:	f002 fa1f 	bl	8002cac <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000874:	f000 faf0 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000258 	.word	0x20000258
 8000880:	40003c00 	.word	0x40003c00

08000884 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
 80008a2:	615a      	str	r2, [r3, #20]
 80008a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_TIM3_Init+0xac>)
 80008a8:	4a22      	ldr	r2, [pc, #136]	; (8000934 <MX_TIM3_Init+0xb0>)
 80008aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_TIM3_Init+0xac>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_TIM3_Init+0xac>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_TIM3_Init+0xac>)
 80008ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_TIM3_Init+0xac>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_TIM3_Init+0xac>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008cc:	4818      	ldr	r0, [pc, #96]	; (8000930 <MX_TIM3_Init+0xac>)
 80008ce:	f002 fac5 	bl	8002e5c <HAL_TIM_PWM_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008d8:	f000 fabe 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	4619      	mov	r1, r3
 80008ea:	4811      	ldr	r0, [pc, #68]	; (8000930 <MX_TIM3_Init+0xac>)
 80008ec:	f003 f820 	bl	8003930 <HAL_TIMEx_MasterConfigSynchronization>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008f6:	f000 faaf 	bl	8000e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fa:	2360      	movs	r3, #96	; 0x60
 80008fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_TIM3_Init+0xac>)
 8000912:	f002 fb99 	bl	8003048 <HAL_TIM_PWM_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800091c:	f000 fa9c 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_TIM3_Init+0xac>)
 8000922:	f000 fd7d 	bl	8001420 <HAL_TIM_MspPostInit>

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000210 	.word	0x20000210
 8000934:	40000400 	.word	0x40000400

08000938 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2224      	movs	r2, #36	; 0x24
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f003 ffb6 	bl	80048b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <MX_TIM4_Init+0xa0>)
 8000956:	4a21      	ldr	r2, [pc, #132]	; (80009dc <MX_TIM4_Init+0xa4>)
 8000958:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_TIM4_Init+0xa0>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_TIM4_Init+0xa0>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_TIM4_Init+0xa0>)
 8000968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_TIM4_Init+0xa0>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_TIM4_Init+0xa0>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800097a:	2301      	movs	r3, #1
 800097c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000982:	2301      	movs	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000992:	2301      	movs	r3, #1
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4619      	mov	r1, r3
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_TIM4_Init+0xa0>)
 80009a6:	f002 faa8 	bl	8002efa <HAL_TIM_Encoder_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80009b0:	f000 fa52 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_TIM4_Init+0xa0>)
 80009c2:	f002 ffb5 	bl	8003930 <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80009cc:	f000 fa44 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	3730      	adds	r7, #48	; 0x30
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000120 	.word	0x20000120
 80009dc:	40000800 	.word	0x40000800

080009e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b096      	sub	sp, #88	; 0x58
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2220      	movs	r2, #32
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 ff4d 	bl	80048b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a1e:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000a20:	4a44      	ldr	r2, [pc, #272]	; (8000b34 <MX_TIM8_Init+0x154>)
 8000a22:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a24:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a30:	4b3f      	ldr	r3, [pc, #252]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a36:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a38:	4b3d      	ldr	r3, [pc, #244]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a3e:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a44:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a4a:	4839      	ldr	r0, [pc, #228]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000a4c:	f002 f9b7 	bl	8002dbe <HAL_TIM_Base_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000a56:	f000 f9ff 	bl	8000e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a64:	4619      	mov	r1, r3
 8000a66:	4832      	ldr	r0, [pc, #200]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000a68:	f002 fbb0 	bl	80031cc <HAL_TIM_ConfigClockSource>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000a72:	f000 f9f1 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a76:	482e      	ldr	r0, [pc, #184]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000a78:	f002 f9f0 	bl	8002e5c <HAL_TIM_PWM_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000a82:	f000 f9e9 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a92:	4619      	mov	r1, r3
 8000a94:	4826      	ldr	r0, [pc, #152]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000a96:	f002 ff4b 	bl	8003930 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000aa0:	f000 f9da 	bl	8000e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa4:	2360      	movs	r3, #96	; 0x60
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4819      	ldr	r0, [pc, #100]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000aca:	f002 fabd 	bl	8003048 <HAL_TIM_PWM_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000ad4:	f000 f9c0 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	2208      	movs	r2, #8
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4813      	ldr	r0, [pc, #76]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000ae2:	f002 fab1 	bl	8003048 <HAL_TIM_PWM_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000aec:	f000 f9b4 	bl	8000e58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4807      	ldr	r0, [pc, #28]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000b14:	f002 ff88 	bl	8003a28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000b1e:	f000 f99b 	bl	8000e58 <Error_Handler>
  /* USER CODE BEGIN TIM8_Init 2 */

  //Itt kell megivni a DC_MOTOR_Init() -et

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <MX_TIM8_Init+0x150>)
 8000b24:	f000 fc7c 	bl	8001420 <HAL_TIM_MspPostInit>

}
 8000b28:	bf00      	nop
 8000b2a:	3758      	adds	r7, #88	; 0x58
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000d8 	.word	0x200000d8
 8000b34:	40010400 	.word	0x40010400

08000b38 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	615a      	str	r2, [r3, #20]
 8000b4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_TIM12_Init+0x98>)
 8000b52:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <MX_TIM12_Init+0x9c>)
 8000b54:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_TIM12_Init+0x98>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_TIM12_Init+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_TIM12_Init+0x98>)
 8000b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b68:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_TIM12_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_TIM12_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000b76:	4816      	ldr	r0, [pc, #88]	; (8000bd0 <MX_TIM12_Init+0x98>)
 8000b78:	f002 f970 	bl	8002e5c <HAL_TIM_PWM_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000b82:	f000 f969 	bl	8000e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b86:	2360      	movs	r3, #96	; 0x60
 8000b88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <MX_TIM12_Init+0x98>)
 8000b9e:	f002 fa53 	bl	8003048 <HAL_TIM_PWM_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000ba8:	f000 f956 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <MX_TIM12_Init+0x98>)
 8000bb4:	f002 fa48 	bl	8003048 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000bbe:	f000 f94b 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000bc2:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <MX_TIM12_Init+0x98>)
 8000bc4:	f000 fc2c 	bl	8001420 <HAL_TIM_MspPostInit>

}
 8000bc8:	bf00      	nop
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200003d4 	.word	0x200003d4
 8000bd4:	40001800 	.word	0x40001800

08000bd8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_UART4_Init+0x4c>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MX_UART4_Init+0x50>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_UART4_Init+0x4c>)
 8000be4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000be8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_UART4_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_UART4_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_UART4_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_UART4_Init+0x4c>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_UART4_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_UART4_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_UART4_Init+0x4c>)
 8000c10:	f002 ff5c 	bl	8003acc <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c1a:	f000 f91d 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200002f4 	.word	0x200002f4
 8000c28:	40004c00 	.word	0x40004c00

08000c2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <MX_USART1_UART_Init+0x50>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c52:	2204      	movs	r2, #4
 8000c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c64:	f002 ff32 	bl	8003acc <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c6e:	f000 f8f3 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200002b0 	.word	0x200002b0
 8000c7c:	40011000 	.word	0x40011000

08000c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_USART2_UART_Init+0x50>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cb8:	f002 ff08 	bl	8003acc <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cc2:	f000 f8c9 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000390 	.word	0x20000390
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b55      	ldr	r3, [pc, #340]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a54      	ldr	r2, [pc, #336]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b52      	ldr	r3, [pc, #328]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b4e      	ldr	r3, [pc, #312]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a4d      	ldr	r2, [pc, #308]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b4b      	ldr	r3, [pc, #300]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b47      	ldr	r3, [pc, #284]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a46      	ldr	r2, [pc, #280]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b44      	ldr	r3, [pc, #272]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a3f      	ldr	r2, [pc, #252]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a38      	ldr	r2, [pc, #224]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <MX_GPIO_Init+0x170>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000d76:	2200      	movs	r2, #0
 8000d78:	213d      	movs	r1, #61	; 0x3d
 8000d7a:	4833      	ldr	r0, [pc, #204]	; (8000e48 <MX_GPIO_Init+0x174>)
 8000d7c:	f001 f8ce 	bl	8001f1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f641 0102 	movw	r1, #6146	; 0x1802
 8000d86:	4831      	ldr	r0, [pc, #196]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d88:	f001 f8c8 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f241 0126 	movw	r1, #4134	; 0x1026
 8000d92:	482f      	ldr	r0, [pc, #188]	; (8000e50 <MX_GPIO_Init+0x17c>)
 8000d94:	f001 f8c2 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4826      	ldr	r0, [pc, #152]	; (8000e48 <MX_GPIO_Init+0x174>)
 8000db0:	f000 ff20 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000db4:	233d      	movs	r3, #61	; 0x3d
 8000db6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481f      	ldr	r0, [pc, #124]	; (8000e48 <MX_GPIO_Init+0x174>)
 8000dcc:	f000 ff12 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8000dd0:	f641 0302 	movw	r3, #6146	; 0x1802
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4818      	ldr	r0, [pc, #96]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000dea:	f000 ff03 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dee:	2310      	movs	r3, #16
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4812      	ldr	r0, [pc, #72]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000e02:	f000 fef7 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 8000e06:	f241 0326 	movw	r3, #4134	; 0x1026
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480c      	ldr	r0, [pc, #48]	; (8000e50 <MX_GPIO_Init+0x17c>)
 8000e20:	f000 fee8 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e24:	2304      	movs	r3, #4
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <MX_GPIO_Init+0x180>)
 8000e38:	f000 fedc 	bl	8001bf4 <HAL_GPIO_Init>

}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	; 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40020c00 	.word	0x40020c00

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ea2:	2007      	movs	r0, #7
 8000ea4:	f000 fdd2 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b090      	sub	sp, #64	; 0x40
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a6b      	ldr	r2, [pc, #428]	; (8001080 <HAL_I2C_MspInit+0x1cc>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d12d      	bne.n	8000f32 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eda:	4b6a      	ldr	r3, [pc, #424]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a69      	ldr	r2, [pc, #420]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b67      	ldr	r3, [pc, #412]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef8:	2312      	movs	r3, #18
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f04:	2304      	movs	r3, #4
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	485e      	ldr	r0, [pc, #376]	; (8001088 <HAL_I2C_MspInit+0x1d4>)
 8000f10:	f000 fe70 	bl	8001bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
 8000f18:	4b5a      	ldr	r3, [pc, #360]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a59      	ldr	r2, [pc, #356]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	4b57      	ldr	r3, [pc, #348]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f30:	e0a2      	b.n	8001078 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a55      	ldr	r2, [pc, #340]	; (800108c <HAL_I2C_MspInit+0x1d8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d14c      	bne.n	8000fd6 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
 8000f40:	4b50      	ldr	r3, [pc, #320]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4c:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	623b      	str	r3, [r7, #32]
 8000f56:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	4b49      	ldr	r3, [pc, #292]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	4a48      	ldr	r2, [pc, #288]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6313      	str	r3, [r2, #48]	; 0x30
 8000f68:	4b46      	ldr	r3, [pc, #280]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7a:	2312      	movs	r3, #18
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f86:	2304      	movs	r3, #4
 8000f88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	483d      	ldr	r0, [pc, #244]	; (8001088 <HAL_I2C_MspInit+0x1d4>)
 8000f92:	f000 fe2f 	bl	8001bf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4837      	ldr	r0, [pc, #220]	; (8001090 <HAL_I2C_MspInit+0x1dc>)
 8000fb4:	f000 fe1e 	bl	8001bf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	4b31      	ldr	r3, [pc, #196]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	4a30      	ldr	r2, [pc, #192]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000fc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd0:	61bb      	str	r3, [r7, #24]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
}
 8000fd4:	e050      	b.n	8001078 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2e      	ldr	r2, [pc, #184]	; (8001094 <HAL_I2C_MspInit+0x1e0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d14b      	bne.n	8001078 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a26      	ldr	r2, [pc, #152]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101e:	2312      	movs	r3, #18
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800102a:	2304      	movs	r3, #4
 800102c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001032:	4619      	mov	r1, r3
 8001034:	4816      	ldr	r0, [pc, #88]	; (8001090 <HAL_I2C_MspInit+0x1dc>)
 8001036:	f000 fddd 	bl	8001bf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800103a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001040:	2312      	movs	r3, #18
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800104c:	2304      	movs	r3, #4
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001054:	4619      	mov	r1, r3
 8001056:	4810      	ldr	r0, [pc, #64]	; (8001098 <HAL_I2C_MspInit+0x1e4>)
 8001058:	f000 fdcc 	bl	8001bf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 8001066:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800106a:	6413      	str	r3, [r2, #64]	; 0x40
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_I2C_MspInit+0x1d0>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	bf00      	nop
 800107a:	3740      	adds	r7, #64	; 0x40
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40005400 	.word	0x40005400
 8001084:	40023800 	.word	0x40023800
 8001088:	40020400 	.word	0x40020400
 800108c:	40005800 	.word	0x40005800
 8001090:	40020800 	.word	0x40020800
 8001094:	40005c00 	.word	0x40005c00
 8001098:	40020000 	.word	0x40020000

0800109c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b090      	sub	sp, #64	; 0x40
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a81      	ldr	r2, [pc, #516]	; (80012c0 <HAL_SPI_MspInit+0x224>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12c      	bne.n	8001118 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010c2:	4b80      	ldr	r3, [pc, #512]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a7f      	ldr	r2, [pc, #508]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 80010c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b7d      	ldr	r3, [pc, #500]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80010d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
 80010de:	4b79      	ldr	r3, [pc, #484]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a78      	ldr	r2, [pc, #480]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b76      	ldr	r3, [pc, #472]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010f6:	23e0      	movs	r3, #224	; 0xe0
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001106:	2305      	movs	r3, #5
 8001108:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110e:	4619      	mov	r1, r3
 8001110:	486d      	ldr	r0, [pc, #436]	; (80012c8 <HAL_SPI_MspInit+0x22c>)
 8001112:	f000 fd6f 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001116:	e0cf      	b.n	80012b8 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a6b      	ldr	r2, [pc, #428]	; (80012cc <HAL_SPI_MspInit+0x230>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d14b      	bne.n	80011ba <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
 8001126:	4b67      	ldr	r3, [pc, #412]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a66      	ldr	r2, [pc, #408]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b64      	ldr	r3, [pc, #400]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	623b      	str	r3, [r7, #32]
 800113c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	4b60      	ldr	r3, [pc, #384]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a5f      	ldr	r2, [pc, #380]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	4b59      	ldr	r3, [pc, #356]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a58      	ldr	r2, [pc, #352]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b56      	ldr	r3, [pc, #344]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001176:	2302      	movs	r3, #2
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001186:	2307      	movs	r3, #7
 8001188:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800118e:	4619      	mov	r1, r3
 8001190:	484f      	ldr	r0, [pc, #316]	; (80012d0 <HAL_SPI_MspInit+0x234>)
 8001192:	f000 fd2f 	bl	8001bf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011a8:	2305      	movs	r3, #5
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b0:	4619      	mov	r1, r3
 80011b2:	4848      	ldr	r0, [pc, #288]	; (80012d4 <HAL_SPI_MspInit+0x238>)
 80011b4:	f000 fd1e 	bl	8001bf4 <HAL_GPIO_Init>
}
 80011b8:	e07e      	b.n	80012b8 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI3)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a46      	ldr	r2, [pc, #280]	; (80012d8 <HAL_SPI_MspInit+0x23c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d179      	bne.n	80012b8 <HAL_SPI_MspInit+0x21c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	4a3d      	ldr	r2, [pc, #244]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 80011ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
 80011d4:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a36      	ldr	r2, [pc, #216]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_SPI_MspInit+0x228>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001234:	2301      	movs	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001244:	2307      	movs	r3, #7
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124c:	4619      	mov	r1, r3
 800124e:	4821      	ldr	r0, [pc, #132]	; (80012d4 <HAL_SPI_MspInit+0x238>)
 8001250:	f000 fcd0 	bl	8001bf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001266:	2306      	movs	r3, #6
 8001268:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126e:	4619      	mov	r1, r3
 8001270:	4815      	ldr	r0, [pc, #84]	; (80012c8 <HAL_SPI_MspInit+0x22c>)
 8001272:	f000 fcbf 	bl	8001bf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001288:	2306      	movs	r3, #6
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001290:	4619      	mov	r1, r3
 8001292:	480f      	ldr	r0, [pc, #60]	; (80012d0 <HAL_SPI_MspInit+0x234>)
 8001294:	f000 fcae 	bl	8001bf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001298:	2310      	movs	r3, #16
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012a8:	2306      	movs	r3, #6
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b0:	4619      	mov	r1, r3
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <HAL_SPI_MspInit+0x238>)
 80012b4:	f000 fc9e 	bl	8001bf4 <HAL_GPIO_Init>
}
 80012b8:	bf00      	nop
 80012ba:	3740      	adds	r7, #64	; 0x40
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40013000 	.word	0x40013000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40003800 	.word	0x40003800
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40003c00 	.word	0x40003c00

080012dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <HAL_TIM_PWM_MspInit+0x64>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10e      	bne.n	800130c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_TIM_PWM_MspInit+0x68>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <HAL_TIM_PWM_MspInit+0x68>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_TIM_PWM_MspInit+0x68>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800130a:	e012      	b.n	8001332 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <HAL_TIM_PWM_MspInit+0x6c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10d      	bne.n	8001332 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_TIM_PWM_MspInit+0x68>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <HAL_TIM_PWM_MspInit+0x68>)
 8001320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <HAL_TIM_PWM_MspInit+0x68>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40000400 	.word	0x40000400
 8001344:	40023800 	.word	0x40023800
 8001348:	40001800 	.word	0x40001800

0800134c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <HAL_TIM_Encoder_MspInit+0x84>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12b      	bne.n	80013c6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013a6:	23c0      	movs	r3, #192	; 0xc0
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013b6:	2302      	movs	r3, #2
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80013c2:	f000 fc17 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40000800 	.word	0x40000800
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_TIM_Base_MspInit+0x3c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10d      	bne.n	800140a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_TIM_Base_MspInit+0x40>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_TIM_Base_MspInit+0x40>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_TIM_Base_MspInit+0x40>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40010400 	.word	0x40010400
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a37      	ldr	r2, [pc, #220]	; (800151c <HAL_TIM_MspPostInit+0xfc>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d11e      	bne.n	8001480 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b36      	ldr	r3, [pc, #216]	; (8001520 <HAL_TIM_MspPostInit+0x100>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a35      	ldr	r2, [pc, #212]	; (8001520 <HAL_TIM_MspPostInit+0x100>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b33      	ldr	r3, [pc, #204]	; (8001520 <HAL_TIM_MspPostInit+0x100>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800145e:	2340      	movs	r3, #64	; 0x40
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800146e:	2302      	movs	r3, #2
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	482a      	ldr	r0, [pc, #168]	; (8001524 <HAL_TIM_MspPostInit+0x104>)
 800147a:	f000 fbbb 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800147e:	e048      	b.n	8001512 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a28      	ldr	r2, [pc, #160]	; (8001528 <HAL_TIM_MspPostInit+0x108>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d11f      	bne.n	80014ca <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_TIM_MspPostInit+0x100>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <HAL_TIM_MspPostInit+0x100>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <HAL_TIM_MspPostInit+0x100>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014b8:	2303      	movs	r3, #3
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4818      	ldr	r0, [pc, #96]	; (8001524 <HAL_TIM_MspPostInit+0x104>)
 80014c4:	f000 fb96 	bl	8001bf4 <HAL_GPIO_Init>
}
 80014c8:	e023      	b.n	8001512 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_TIM_MspPostInit+0x10c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d11e      	bne.n	8001512 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_TIM_MspPostInit+0x100>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	4a10      	ldr	r2, [pc, #64]	; (8001520 <HAL_TIM_MspPostInit+0x100>)
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	6313      	str	r3, [r2, #48]	; 0x30
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_TIM_MspPostInit+0x100>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014f0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001502:	2309      	movs	r3, #9
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <HAL_TIM_MspPostInit+0x110>)
 800150e:	f000 fb71 	bl	8001bf4 <HAL_GPIO_Init>
}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40000400 	.word	0x40000400
 8001520:	40023800 	.word	0x40023800
 8001524:	40020800 	.word	0x40020800
 8001528:	40010400 	.word	0x40010400
 800152c:	40001800 	.word	0x40001800
 8001530:	40020400 	.word	0x40020400

08001534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a5f      	ldr	r2, [pc, #380]	; (80016d0 <HAL_UART_MspInit+0x19c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d153      	bne.n	80015fe <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
 800155a:	4b5e      	ldr	r3, [pc, #376]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a5d      	ldr	r2, [pc, #372]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800156e:	623b      	str	r3, [r7, #32]
 8001570:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a56      	ldr	r2, [pc, #344]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	61fb      	str	r3, [r7, #28]
 800158c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a4f      	ldr	r2, [pc, #316]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b4d      	ldr	r3, [pc, #308]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015aa:	2301      	movs	r3, #1
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015ba:	2308      	movs	r3, #8
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	4619      	mov	r1, r3
 80015c4:	4844      	ldr	r0, [pc, #272]	; (80016d8 <HAL_UART_MspInit+0x1a4>)
 80015c6:	f000 fb15 	bl	8001bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015dc:	2308      	movs	r3, #8
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	483d      	ldr	r0, [pc, #244]	; (80016dc <HAL_UART_MspInit+0x1a8>)
 80015e8:	f000 fb04 	bl	8001bf4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2034      	movs	r0, #52	; 0x34
 80015f2:	f000 fa36 	bl	8001a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015f6:	2034      	movs	r0, #52	; 0x34
 80015f8:	f000 fa4f 	bl	8001a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015fc:	e063      	b.n	80016c6 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a37      	ldr	r2, [pc, #220]	; (80016e0 <HAL_UART_MspInit+0x1ac>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d12d      	bne.n	8001664 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	4a30      	ldr	r2, [pc, #192]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6453      	str	r3, [r2, #68]	; 0x44
 8001618:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 800161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	4a29      	ldr	r2, [pc, #164]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6313      	str	r3, [r2, #48]	; 0x30
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001640:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001652:	2307      	movs	r3, #7
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	481e      	ldr	r0, [pc, #120]	; (80016d8 <HAL_UART_MspInit+0x1a4>)
 800165e:	f000 fac9 	bl	8001bf4 <HAL_GPIO_Init>
}
 8001662:	e030      	b.n	80016c6 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_UART_MspInit+0x1b0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12b      	bne.n	80016c6 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_UART_MspInit+0x1a0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016a6:	230c      	movs	r3, #12
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b6:	2307      	movs	r3, #7
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_UART_MspInit+0x1a4>)
 80016c2:	f000 fa97 	bl	8001bf4 <HAL_GPIO_Init>
}
 80016c6:	bf00      	nop
 80016c8:	3738      	adds	r7, #56	; 0x38
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40004c00 	.word	0x40004c00
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40011000 	.word	0x40011000
 80016e4:	40004400 	.word	0x40004400

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <NMI_Handler+0x4>

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001734:	f000 f89a 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <UART4_IRQHandler+0x10>)
 8001742:	f002 fa41 	bl	8003bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200002f4 	.word	0x200002f4

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800177a:	490e      	ldr	r1, [pc, #56]	; (80017b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800177c:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001790:	4c0b      	ldr	r4, [pc, #44]	; (80017c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800179e:	f7ff ffd7 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a2:	f003 f865 	bl	8004870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7fe fea9 	bl	80004fc <main>
  bx  lr    
 80017aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017b8:	08004908 	.word	0x08004908
  ldr r2, =_sbss
 80017bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017c0:	20000420 	.word	0x20000420

080017c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <HAL_Init+0x40>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_Init+0x40>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_Init+0x40>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f92b 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fb32 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f943 	bl	8001ab6 <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f000 f90b 	bl	8001a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000000 	.word	0x20000000
 8001864:	20000008 	.word	0x20000008
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000008 	.word	0x20000008
 8001890:	2000041c 	.word	0x2000041c

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2000041c 	.word	0x2000041c

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db0b      	blt.n	800193a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	4907      	ldr	r1, [pc, #28]	; (8001948 <__NVIC_EnableIRQ+0x38>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a18:	d301      	bcc.n	8001a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00f      	b.n	8001a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <SysTick_Config+0x40>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a26:	210f      	movs	r1, #15
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f7ff ff8e 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <SysTick_Config+0x40>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <SysTick_Config+0x40>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff29 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a74:	f7ff ff3e 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7ff ff8e 	bl	80019a0 <NVIC_EncodePriority>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff5d 	bl	800194c <__NVIC_SetPriority>
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff31 	bl	8001910 <__NVIC_EnableIRQ>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffa2 	bl	8001a08 <SysTick_Config>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff feda 	bl	8001894 <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d008      	beq.n	8001b00 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e052      	b.n	8001ba6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0216 	bic.w	r2, r2, #22
 8001b0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b1e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d103      	bne.n	8001b30 <HAL_DMA_Abort+0x62>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0208 	bic.w	r2, r2, #8
 8001b3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b50:	e013      	b.n	8001b7a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b52:	f7ff fe9f 	bl	8001894 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d90c      	bls.n	8001b7a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e015      	b.n	8001ba6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e4      	bne.n	8001b52 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	223f      	movs	r2, #63	; 0x3f
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d004      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e00c      	b.n	8001be6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2205      	movs	r2, #5
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e165      	b.n	8001edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c10:	2201      	movs	r2, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 8154 	bne.w	8001ed6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d005      	beq.n	8001c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d130      	bne.n	8001ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 0201 	and.w	r2, r3, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d017      	beq.n	8001ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d123      	bne.n	8001d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	08da      	lsrs	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3208      	adds	r2, #8
 8001cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	69b9      	ldr	r1, [r7, #24]
 8001d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80ae 	beq.w	8001ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_GPIO_Init+0x300>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a5c      	ldr	r2, [pc, #368]	; (8001ef4 <HAL_GPIO_Init+0x300>)
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b5a      	ldr	r3, [pc, #360]	; (8001ef4 <HAL_GPIO_Init+0x300>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d96:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <HAL_GPIO_Init+0x304>)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <HAL_GPIO_Init+0x308>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d025      	beq.n	8001e0e <HAL_GPIO_Init+0x21a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4e      	ldr	r2, [pc, #312]	; (8001f00 <HAL_GPIO_Init+0x30c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01f      	beq.n	8001e0a <HAL_GPIO_Init+0x216>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_GPIO_Init+0x310>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d019      	beq.n	8001e06 <HAL_GPIO_Init+0x212>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_GPIO_Init+0x314>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0x20e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4b      	ldr	r2, [pc, #300]	; (8001f0c <HAL_GPIO_Init+0x318>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <HAL_GPIO_Init+0x20a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4a      	ldr	r2, [pc, #296]	; (8001f10 <HAL_GPIO_Init+0x31c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <HAL_GPIO_Init+0x206>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_GPIO_Init+0x202>
 8001df2:	2306      	movs	r3, #6
 8001df4:	e00c      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001df6:	2307      	movs	r3, #7
 8001df8:	e00a      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	e008      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001dfe:	2304      	movs	r3, #4
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001e02:	2303      	movs	r3, #3
 8001e04:	e004      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e002      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f002 0203 	and.w	r2, r2, #3
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	4093      	lsls	r3, r2
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e20:	4935      	ldr	r1, [pc, #212]	; (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e52:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e58:	4b2f      	ldr	r3, [pc, #188]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e7c:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e82:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed0:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	f67f ae96 	bls.w	8001c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40013800 	.word	0x40013800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020c00 	.word	0x40020c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40021400 	.word	0x40021400
 8001f14:	40021800 	.word	0x40021800
 8001f18:	40013c00 	.word	0x40013c00

08001f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f38:	e003      	b.n	8001f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3a:	887b      	ldrh	r3, [r7, #2]
 8001f3c:	041a      	lsls	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	619a      	str	r2, [r3, #24]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e12b      	b.n	80021ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe ff9c 	bl	8000eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	; 0x24
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fb4:	f000 fa02 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8001fb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4a81      	ldr	r2, [pc, #516]	; (80021c4 <HAL_I2C_Init+0x274>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d807      	bhi.n	8001fd4 <HAL_I2C_Init+0x84>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4a80      	ldr	r2, [pc, #512]	; (80021c8 <HAL_I2C_Init+0x278>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	bf94      	ite	ls
 8001fcc:	2301      	movls	r3, #1
 8001fce:	2300      	movhi	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	e006      	b.n	8001fe2 <HAL_I2C_Init+0x92>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a7d      	ldr	r2, [pc, #500]	; (80021cc <HAL_I2C_Init+0x27c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	bf94      	ite	ls
 8001fdc:	2301      	movls	r3, #1
 8001fde:	2300      	movhi	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0e7      	b.n	80021ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4a78      	ldr	r2, [pc, #480]	; (80021d0 <HAL_I2C_Init+0x280>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0c9b      	lsrs	r3, r3, #18
 8001ff4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	430a      	orrs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a6a      	ldr	r2, [pc, #424]	; (80021c4 <HAL_I2C_Init+0x274>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d802      	bhi.n	8002024 <HAL_I2C_Init+0xd4>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3301      	adds	r3, #1
 8002022:	e009      	b.n	8002038 <HAL_I2C_Init+0xe8>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	4a69      	ldr	r2, [pc, #420]	; (80021d4 <HAL_I2C_Init+0x284>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	099b      	lsrs	r3, r3, #6
 8002036:	3301      	adds	r3, #1
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	430b      	orrs	r3, r1
 800203e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800204a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	495c      	ldr	r1, [pc, #368]	; (80021c4 <HAL_I2C_Init+0x274>)
 8002054:	428b      	cmp	r3, r1
 8002056:	d819      	bhi.n	800208c <HAL_I2C_Init+0x13c>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e59      	subs	r1, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fbb1 f3f3 	udiv	r3, r1, r3
 8002066:	1c59      	adds	r1, r3, #1
 8002068:	f640 73fc 	movw	r3, #4092	; 0xffc
 800206c:	400b      	ands	r3, r1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_I2C_Init+0x138>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1e59      	subs	r1, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002080:	3301      	adds	r3, #1
 8002082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002086:	e051      	b.n	800212c <HAL_I2C_Init+0x1dc>
 8002088:	2304      	movs	r3, #4
 800208a:	e04f      	b.n	800212c <HAL_I2C_Init+0x1dc>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d111      	bne.n	80020b8 <HAL_I2C_Init+0x168>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1e58      	subs	r0, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	440b      	add	r3, r1
 80020a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a6:	3301      	adds	r3, #1
 80020a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e012      	b.n	80020de <HAL_I2C_Init+0x18e>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1e58      	subs	r0, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	0099      	lsls	r1, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Init+0x196>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e022      	b.n	800212c <HAL_I2C_Init+0x1dc>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10e      	bne.n	800210c <HAL_I2C_Init+0x1bc>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1e58      	subs	r0, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6859      	ldr	r1, [r3, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	440b      	add	r3, r1
 80020fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002100:	3301      	adds	r3, #1
 8002102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210a:	e00f      	b.n	800212c <HAL_I2C_Init+0x1dc>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1e58      	subs	r0, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	0099      	lsls	r1, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002122:	3301      	adds	r3, #1
 8002124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	6809      	ldr	r1, [r1, #0]
 8002130:	4313      	orrs	r3, r2
 8002132:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800215a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6911      	ldr	r1, [r2, #16]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68d2      	ldr	r2, [r2, #12]
 8002166:	4311      	orrs	r1, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	430b      	orrs	r3, r1
 800216e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	000186a0 	.word	0x000186a0
 80021c8:	001e847f 	.word	0x001e847f
 80021cc:	003d08ff 	.word	0x003d08ff
 80021d0:	431bde83 	.word	0x431bde83
 80021d4:	10624dd3 	.word	0x10624dd3

080021d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0cc      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b68      	ldr	r3, [pc, #416]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d90c      	bls.n	8002214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b63      	ldr	r3, [pc, #396]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0b8      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a58      	ldr	r2, [pc, #352]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002236:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002244:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a52      	ldr	r2, [pc, #328]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800224e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	494d      	ldr	r1, [pc, #308]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d044      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d119      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d003      	beq.n	8002296 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002292:	2b03      	cmp	r3, #3
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e067      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f023 0203 	bic.w	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4934      	ldr	r1, [pc, #208]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c8:	f7ff fae4 	bl	8001894 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7ff fae0 	bl	8001894 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e04f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 020c 	and.w	r2, r3, #12
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1eb      	bne.n	80022d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d20c      	bcs.n	8002320 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e032      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4916      	ldr	r1, [pc, #88]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800235e:	f000 f855 	bl	800240c <HAL_RCC_GetSysClockFreq>
 8002362:	4602      	mov	r2, r0
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	490a      	ldr	r1, [pc, #40]	; (8002398 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	5ccb      	ldrb	r3, [r1, r3]
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fa44 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00
 8002394:	40023800 	.word	0x40023800
 8002398:	080048e0 	.word	0x080048e0
 800239c:	20000000 	.word	0x20000000
 80023a0:	20000004 	.word	0x20000004

080023a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000000 	.word	0x20000000

080023bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023c0:	f7ff fff0 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	0a9b      	lsrs	r3, r3, #10
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4903      	ldr	r1, [pc, #12]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	080048f0 	.word	0x080048f0

080023e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023e8:	f7ff ffdc 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	0b5b      	lsrs	r3, r3, #13
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4903      	ldr	r1, [pc, #12]	; (8002408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40023800 	.word	0x40023800
 8002408:	080048f0 	.word	0x080048f0

0800240c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002410:	b088      	sub	sp, #32
 8002412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002428:	4bce      	ldr	r3, [pc, #824]	; (8002764 <HAL_RCC_GetSysClockFreq+0x358>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b0c      	cmp	r3, #12
 8002432:	f200 818d 	bhi.w	8002750 <HAL_RCC_GetSysClockFreq+0x344>
 8002436:	a201      	add	r2, pc, #4	; (adr r2, 800243c <HAL_RCC_GetSysClockFreq+0x30>)
 8002438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243c:	08002471 	.word	0x08002471
 8002440:	08002751 	.word	0x08002751
 8002444:	08002751 	.word	0x08002751
 8002448:	08002751 	.word	0x08002751
 800244c:	08002477 	.word	0x08002477
 8002450:	08002751 	.word	0x08002751
 8002454:	08002751 	.word	0x08002751
 8002458:	08002751 	.word	0x08002751
 800245c:	0800247d 	.word	0x0800247d
 8002460:	08002751 	.word	0x08002751
 8002464:	08002751 	.word	0x08002751
 8002468:	08002751 	.word	0x08002751
 800246c:	080025f1 	.word	0x080025f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4bbd      	ldr	r3, [pc, #756]	; (8002768 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002472:	61bb      	str	r3, [r7, #24]
       break;
 8002474:	e16f      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002476:	4bbd      	ldr	r3, [pc, #756]	; (800276c <HAL_RCC_GetSysClockFreq+0x360>)
 8002478:	61bb      	str	r3, [r7, #24]
      break;
 800247a:	e16c      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800247c:	4bb9      	ldr	r3, [pc, #740]	; (8002764 <HAL_RCC_GetSysClockFreq+0x358>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002484:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002486:	4bb7      	ldr	r3, [pc, #732]	; (8002764 <HAL_RCC_GetSysClockFreq+0x358>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d053      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002492:	4bb4      	ldr	r3, [pc, #720]	; (8002764 <HAL_RCC_GetSysClockFreq+0x358>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	461a      	mov	r2, r3
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024a2:	f04f 0100 	mov.w	r1, #0
 80024a6:	ea02 0400 	and.w	r4, r2, r0
 80024aa:	603c      	str	r4, [r7, #0]
 80024ac:	400b      	ands	r3, r1
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024b4:	4620      	mov	r0, r4
 80024b6:	4629      	mov	r1, r5
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	014b      	lsls	r3, r1, #5
 80024c2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024c6:	0142      	lsls	r2, r0, #5
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	4623      	mov	r3, r4
 80024ce:	1ac0      	subs	r0, r0, r3
 80024d0:	462b      	mov	r3, r5
 80024d2:	eb61 0103 	sbc.w	r1, r1, r3
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	018b      	lsls	r3, r1, #6
 80024e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024e4:	0182      	lsls	r2, r0, #6
 80024e6:	1a12      	subs	r2, r2, r0
 80024e8:	eb63 0301 	sbc.w	r3, r3, r1
 80024ec:	f04f 0000 	mov.w	r0, #0
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	00d9      	lsls	r1, r3, #3
 80024f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024fa:	00d0      	lsls	r0, r2, #3
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4621      	mov	r1, r4
 8002502:	1852      	adds	r2, r2, r1
 8002504:	4629      	mov	r1, r5
 8002506:	eb43 0101 	adc.w	r1, r3, r1
 800250a:	460b      	mov	r3, r1
 800250c:	f04f 0000 	mov.w	r0, #0
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	0259      	lsls	r1, r3, #9
 8002516:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800251a:	0250      	lsls	r0, r2, #9
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	461a      	mov	r2, r3
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	f7fd fe6a 	bl	8000204 <__aeabi_uldivmod>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4613      	mov	r3, r2
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	e04c      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253a:	4b8a      	ldr	r3, [pc, #552]	; (8002764 <HAL_RCC_GetSysClockFreq+0x358>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	461a      	mov	r2, r3
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	f240 10ff 	movw	r0, #511	; 0x1ff
 800254a:	f04f 0100 	mov.w	r1, #0
 800254e:	ea02 0a00 	and.w	sl, r2, r0
 8002552:	ea03 0b01 	and.w	fp, r3, r1
 8002556:	4650      	mov	r0, sl
 8002558:	4659      	mov	r1, fp
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	014b      	lsls	r3, r1, #5
 8002564:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002568:	0142      	lsls	r2, r0, #5
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	ebb0 000a 	subs.w	r0, r0, sl
 8002572:	eb61 010b 	sbc.w	r1, r1, fp
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002584:	0182      	lsls	r2, r0, #6
 8002586:	1a12      	subs	r2, r2, r0
 8002588:	eb63 0301 	sbc.w	r3, r3, r1
 800258c:	f04f 0000 	mov.w	r0, #0
 8002590:	f04f 0100 	mov.w	r1, #0
 8002594:	00d9      	lsls	r1, r3, #3
 8002596:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800259a:	00d0      	lsls	r0, r2, #3
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	eb12 020a 	adds.w	r2, r2, sl
 80025a4:	eb43 030b 	adc.w	r3, r3, fp
 80025a8:	f04f 0000 	mov.w	r0, #0
 80025ac:	f04f 0100 	mov.w	r1, #0
 80025b0:	0299      	lsls	r1, r3, #10
 80025b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025b6:	0290      	lsls	r0, r2, #10
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	f7fd fe1c 	bl	8000204 <__aeabi_uldivmod>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4613      	mov	r3, r2
 80025d2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025d4:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_GetSysClockFreq+0x358>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	3301      	adds	r3, #1
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	61bb      	str	r3, [r7, #24]
      break;
 80025ee:	e0b2      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f0:	4b5c      	ldr	r3, [pc, #368]	; (8002764 <HAL_RCC_GetSysClockFreq+0x358>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025fa:	4b5a      	ldr	r3, [pc, #360]	; (8002764 <HAL_RCC_GetSysClockFreq+0x358>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d04d      	beq.n	80026a2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002606:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_RCC_GetSysClockFreq+0x358>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	461a      	mov	r2, r3
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002616:	f04f 0100 	mov.w	r1, #0
 800261a:	ea02 0800 	and.w	r8, r2, r0
 800261e:	ea03 0901 	and.w	r9, r3, r1
 8002622:	4640      	mov	r0, r8
 8002624:	4649      	mov	r1, r9
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	014b      	lsls	r3, r1, #5
 8002630:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002634:	0142      	lsls	r2, r0, #5
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	ebb0 0008 	subs.w	r0, r0, r8
 800263e:	eb61 0109 	sbc.w	r1, r1, r9
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	018b      	lsls	r3, r1, #6
 800264c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002650:	0182      	lsls	r2, r0, #6
 8002652:	1a12      	subs	r2, r2, r0
 8002654:	eb63 0301 	sbc.w	r3, r3, r1
 8002658:	f04f 0000 	mov.w	r0, #0
 800265c:	f04f 0100 	mov.w	r1, #0
 8002660:	00d9      	lsls	r1, r3, #3
 8002662:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002666:	00d0      	lsls	r0, r2, #3
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	eb12 0208 	adds.w	r2, r2, r8
 8002670:	eb43 0309 	adc.w	r3, r3, r9
 8002674:	f04f 0000 	mov.w	r0, #0
 8002678:	f04f 0100 	mov.w	r1, #0
 800267c:	0259      	lsls	r1, r3, #9
 800267e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002682:	0250      	lsls	r0, r2, #9
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	461a      	mov	r2, r3
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	f7fd fdb6 	bl	8000204 <__aeabi_uldivmod>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4613      	mov	r3, r2
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	e04a      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCC_GetSysClockFreq+0x358>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	099b      	lsrs	r3, r3, #6
 80026a8:	461a      	mov	r2, r3
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026b2:	f04f 0100 	mov.w	r1, #0
 80026b6:	ea02 0400 	and.w	r4, r2, r0
 80026ba:	ea03 0501 	and.w	r5, r3, r1
 80026be:	4620      	mov	r0, r4
 80026c0:	4629      	mov	r1, r5
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	014b      	lsls	r3, r1, #5
 80026cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026d0:	0142      	lsls	r2, r0, #5
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	1b00      	subs	r0, r0, r4
 80026d8:	eb61 0105 	sbc.w	r1, r1, r5
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	018b      	lsls	r3, r1, #6
 80026e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026ea:	0182      	lsls	r2, r0, #6
 80026ec:	1a12      	subs	r2, r2, r0
 80026ee:	eb63 0301 	sbc.w	r3, r3, r1
 80026f2:	f04f 0000 	mov.w	r0, #0
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	00d9      	lsls	r1, r3, #3
 80026fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002700:	00d0      	lsls	r0, r2, #3
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	1912      	adds	r2, r2, r4
 8002708:	eb45 0303 	adc.w	r3, r5, r3
 800270c:	f04f 0000 	mov.w	r0, #0
 8002710:	f04f 0100 	mov.w	r1, #0
 8002714:	0299      	lsls	r1, r3, #10
 8002716:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800271a:	0290      	lsls	r0, r2, #10
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	461a      	mov	r2, r3
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f7fd fd6a 	bl	8000204 <__aeabi_uldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4613      	mov	r3, r2
 8002736:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_RCC_GetSysClockFreq+0x358>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	0f1b      	lsrs	r3, r3, #28
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	61bb      	str	r3, [r7, #24]
      break;
 800274e:	e002      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002752:	61bb      	str	r3, [r7, #24]
      break;
 8002754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002756:	69bb      	ldr	r3, [r7, #24]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	00f42400 	.word	0x00f42400
 800276c:	007a1200 	.word	0x007a1200

08002770 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e28d      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8083 	beq.w	8002896 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002790:	4b94      	ldr	r3, [pc, #592]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b04      	cmp	r3, #4
 800279a:	d019      	beq.n	80027d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800279c:	4b91      	ldr	r3, [pc, #580]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027a8:	4b8e      	ldr	r3, [pc, #568]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b4:	d00c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b6:	4b8b      	ldr	r3, [pc, #556]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027be:	2b0c      	cmp	r3, #12
 80027c0:	d112      	bne.n	80027e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c2:	4b88      	ldr	r3, [pc, #544]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ce:	d10b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	4b84      	ldr	r3, [pc, #528]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d05b      	beq.n	8002894 <HAL_RCC_OscConfig+0x124>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d157      	bne.n	8002894 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e25a      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x90>
 80027f2:	4b7c      	ldr	r3, [pc, #496]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a7b      	ldr	r2, [pc, #492]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xcc>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0xb4>
 800280a:	4b76      	ldr	r3, [pc, #472]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a75      	ldr	r2, [pc, #468]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a72      	ldr	r2, [pc, #456]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xcc>
 8002824:	4b6f      	ldr	r3, [pc, #444]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a6e      	ldr	r2, [pc, #440]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b6c      	ldr	r3, [pc, #432]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a6b      	ldr	r2, [pc, #428]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7ff f826 	bl	8001894 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff f822 	bl	8001894 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e21f      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b61      	ldr	r3, [pc, #388]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xdc>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7ff f812 	bl	8001894 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff f80e 	bl	8001894 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e20b      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b57      	ldr	r3, [pc, #348]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x104>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d06f      	beq.n	8002982 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028a2:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d017      	beq.n	80028de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028ae:	4b4d      	ldr	r3, [pc, #308]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d105      	bne.n	80028c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028ba:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d11c      	bne.n	800290c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d2:	4b44      	ldr	r3, [pc, #272]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d116      	bne.n	800290c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028de:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x186>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e1d3      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4937      	ldr	r1, [pc, #220]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	e03a      	b.n	8002982 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002914:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <HAL_RCC_OscConfig+0x278>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe ffbb 	bl	8001894 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002922:	f7fe ffb7 	bl	8001894 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e1b4      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4925      	ldr	r1, [pc, #148]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
 8002954:	e015      	b.n	8002982 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_RCC_OscConfig+0x278>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe ff9a 	bl	8001894 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002964:	f7fe ff96 	bl	8001894 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e193      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d036      	beq.n	80029fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d016      	beq.n	80029c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_RCC_OscConfig+0x27c>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe ff7a 	bl	8001894 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe ff76 	bl	8001894 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e173      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80029b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x234>
 80029c2:	e01b      	b.n	80029fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_OscConfig+0x27c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7fe ff63 	bl	8001894 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	e00e      	b.n	80029f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d2:	f7fe ff5f 	bl	8001894 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d907      	bls.n	80029f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e15c      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
 80029e4:	40023800 	.word	0x40023800
 80029e8:	42470000 	.word	0x42470000
 80029ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	4b8a      	ldr	r3, [pc, #552]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ea      	bne.n	80029d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8097 	beq.w	8002b38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0e:	4b83      	ldr	r3, [pc, #524]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	4b7f      	ldr	r3, [pc, #508]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a7e      	ldr	r2, [pc, #504]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b7c      	ldr	r3, [pc, #496]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a36:	2301      	movs	r3, #1
 8002a38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b79      	ldr	r3, [pc, #484]	; (8002c20 <HAL_RCC_OscConfig+0x4b0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d118      	bne.n	8002a78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a46:	4b76      	ldr	r3, [pc, #472]	; (8002c20 <HAL_RCC_OscConfig+0x4b0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a75      	ldr	r2, [pc, #468]	; (8002c20 <HAL_RCC_OscConfig+0x4b0>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a52:	f7fe ff1f 	bl	8001894 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7fe ff1b 	bl	8001894 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e118      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b6c      	ldr	r3, [pc, #432]	; (8002c20 <HAL_RCC_OscConfig+0x4b0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x31e>
 8002a80:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a65      	ldr	r2, [pc, #404]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8c:	e01c      	b.n	8002ac8 <HAL_RCC_OscConfig+0x358>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x340>
 8002a96:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a60      	ldr	r2, [pc, #384]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa2:	4b5e      	ldr	r3, [pc, #376]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a5d      	ldr	r2, [pc, #372]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0x358>
 8002ab0:	4b5a      	ldr	r3, [pc, #360]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a59      	ldr	r2, [pc, #356]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	4a56      	ldr	r2, [pc, #344]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002ac2:	f023 0304 	bic.w	r3, r3, #4
 8002ac6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fee0 	bl	8001894 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fedc 	bl	8001894 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0d7      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ee      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x368>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe feca 	bl	8001894 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fec6 	bl	8001894 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0c1      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1a:	4b40      	ldr	r3, [pc, #256]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ee      	bne.n	8002b04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2c:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	4a3a      	ldr	r2, [pc, #232]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80ad 	beq.w	8002c9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b42:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d060      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d145      	bne.n	8002be2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <HAL_RCC_OscConfig+0x4b4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fe9a 	bl	8001894 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fe96 	bl	8001894 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e093      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	4b29      	ldr	r3, [pc, #164]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	019b      	lsls	r3, r3, #6
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	041b      	lsls	r3, r3, #16
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	071b      	lsls	r3, r3, #28
 8002bae:	491b      	ldr	r1, [pc, #108]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <HAL_RCC_OscConfig+0x4b4>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7fe fe6b 	bl	8001894 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc2:	f7fe fe67 	bl	8001894 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e064      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x452>
 8002be0:	e05c      	b.n	8002c9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_RCC_OscConfig+0x4b4>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe fe54 	bl	8001894 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe fe50 	bl	8001894 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e04d      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x480>
 8002c0e:	e045      	b.n	8002c9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e040      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40007000 	.word	0x40007000
 8002c24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c28:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <HAL_RCC_OscConfig+0x538>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d030      	beq.n	8002c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d129      	bne.n	8002c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d122      	bne.n	8002c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c58:	4013      	ands	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d119      	bne.n	8002c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	3b01      	subs	r3, #1
 8002c72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d10f      	bne.n	8002c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800

08002cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e07b      	b.n	8002db6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cce:	d009      	beq.n	8002ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]
 8002cd6:	e005      	b.n	8002ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe f9cc 	bl	800109c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d68:	ea42 0103 	orr.w	r1, r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	f003 0104 	and.w	r1, r3, #4
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	f003 0210 	and.w	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e041      	b.n	8002e54 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fe faf9 	bl	80013dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f000 faad 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e041      	b.n	8002ef2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fe fa2a 	bl	80012dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f000 fa5e 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e097      	b.n	800303e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe fa12 	bl	800134c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f000 fa04 	bl	800335c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7c:	f023 0303 	bic.w	r3, r3, #3
 8002f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f9a:	f023 030c 	bic.w	r3, r3, #12
 8002f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	011a      	lsls	r2, r3, #4
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	031b      	lsls	r3, r3, #12
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002fd8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002fe0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	4313      	orrs	r3, r2
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003062:	2302      	movs	r3, #2
 8003064:	e0ae      	b.n	80031c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b0c      	cmp	r3, #12
 8003072:	f200 809f 	bhi.w	80031b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	080030b1 	.word	0x080030b1
 8003080:	080031b5 	.word	0x080031b5
 8003084:	080031b5 	.word	0x080031b5
 8003088:	080031b5 	.word	0x080031b5
 800308c:	080030f1 	.word	0x080030f1
 8003090:	080031b5 	.word	0x080031b5
 8003094:	080031b5 	.word	0x080031b5
 8003098:	080031b5 	.word	0x080031b5
 800309c:	08003133 	.word	0x08003133
 80030a0:	080031b5 	.word	0x080031b5
 80030a4:	080031b5 	.word	0x080031b5
 80030a8:	080031b5 	.word	0x080031b5
 80030ac:	08003173 	.word	0x08003173
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f9f0 	bl	800349c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0208 	orr.w	r2, r2, #8
 80030ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0204 	bic.w	r2, r2, #4
 80030da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6999      	ldr	r1, [r3, #24]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	619a      	str	r2, [r3, #24]
      break;
 80030ee:	e064      	b.n	80031ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fa40 	bl	800357c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800310a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6999      	ldr	r1, [r3, #24]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	021a      	lsls	r2, r3, #8
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	619a      	str	r2, [r3, #24]
      break;
 8003130:	e043      	b.n	80031ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fa95 	bl	8003668 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0208 	orr.w	r2, r2, #8
 800314c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0204 	bic.w	r2, r2, #4
 800315c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69d9      	ldr	r1, [r3, #28]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	61da      	str	r2, [r3, #28]
      break;
 8003170:	e023      	b.n	80031ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fae9 	bl	8003750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800318c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69d9      	ldr	r1, [r3, #28]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	021a      	lsls	r2, r3, #8
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	61da      	str	r2, [r3, #28]
      break;
 80031b2:	e002      	b.n	80031ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	75fb      	strb	r3, [r7, #23]
      break;
 80031b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_TIM_ConfigClockSource+0x1c>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e0b4      	b.n	8003352 <HAL_TIM_ConfigClockSource+0x186>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800320e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003220:	d03e      	beq.n	80032a0 <HAL_TIM_ConfigClockSource+0xd4>
 8003222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003226:	f200 8087 	bhi.w	8003338 <HAL_TIM_ConfigClockSource+0x16c>
 800322a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322e:	f000 8086 	beq.w	800333e <HAL_TIM_ConfigClockSource+0x172>
 8003232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003236:	d87f      	bhi.n	8003338 <HAL_TIM_ConfigClockSource+0x16c>
 8003238:	2b70      	cmp	r3, #112	; 0x70
 800323a:	d01a      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0xa6>
 800323c:	2b70      	cmp	r3, #112	; 0x70
 800323e:	d87b      	bhi.n	8003338 <HAL_TIM_ConfigClockSource+0x16c>
 8003240:	2b60      	cmp	r3, #96	; 0x60
 8003242:	d050      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x11a>
 8003244:	2b60      	cmp	r3, #96	; 0x60
 8003246:	d877      	bhi.n	8003338 <HAL_TIM_ConfigClockSource+0x16c>
 8003248:	2b50      	cmp	r3, #80	; 0x50
 800324a:	d03c      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0xfa>
 800324c:	2b50      	cmp	r3, #80	; 0x50
 800324e:	d873      	bhi.n	8003338 <HAL_TIM_ConfigClockSource+0x16c>
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	d058      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x13a>
 8003254:	2b40      	cmp	r3, #64	; 0x40
 8003256:	d86f      	bhi.n	8003338 <HAL_TIM_ConfigClockSource+0x16c>
 8003258:	2b30      	cmp	r3, #48	; 0x30
 800325a:	d064      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0x15a>
 800325c:	2b30      	cmp	r3, #48	; 0x30
 800325e:	d86b      	bhi.n	8003338 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b20      	cmp	r3, #32
 8003262:	d060      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0x15a>
 8003264:	2b20      	cmp	r3, #32
 8003266:	d867      	bhi.n	8003338 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d05c      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0x15a>
 800326c:	2b10      	cmp	r3, #16
 800326e:	d05a      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0x15a>
 8003270:	e062      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6899      	ldr	r1, [r3, #8]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f000 fb35 	bl	80038f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003294:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	609a      	str	r2, [r3, #8]
      break;
 800329e:	e04f      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6899      	ldr	r1, [r3, #8]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f000 fb1e 	bl	80038f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032c2:	609a      	str	r2, [r3, #8]
      break;
 80032c4:	e03c      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6859      	ldr	r1, [r3, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f000 fa92 	bl	80037fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2150      	movs	r1, #80	; 0x50
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 faeb 	bl	80038ba <TIM_ITRx_SetConfig>
      break;
 80032e4:	e02c      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f000 fab1 	bl	800385a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2160      	movs	r1, #96	; 0x60
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fadb 	bl	80038ba <TIM_ITRx_SetConfig>
      break;
 8003304:	e01c      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6859      	ldr	r1, [r3, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	461a      	mov	r2, r3
 8003314:	f000 fa72 	bl	80037fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2140      	movs	r1, #64	; 0x40
 800331e:	4618      	mov	r0, r3
 8003320:	f000 facb 	bl	80038ba <TIM_ITRx_SetConfig>
      break;
 8003324:	e00c      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4619      	mov	r1, r3
 8003330:	4610      	mov	r0, r2
 8003332:	f000 fac2 	bl	80038ba <TIM_ITRx_SetConfig>
      break;
 8003336:	e003      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      break;
 800333c:	e000      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800333e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a40      	ldr	r2, [pc, #256]	; (8003470 <TIM_Base_SetConfig+0x114>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337a:	d00f      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3d      	ldr	r2, [pc, #244]	; (8003474 <TIM_Base_SetConfig+0x118>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00b      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3c      	ldr	r2, [pc, #240]	; (8003478 <TIM_Base_SetConfig+0x11c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d007      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3b      	ldr	r2, [pc, #236]	; (800347c <TIM_Base_SetConfig+0x120>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3a      	ldr	r2, [pc, #232]	; (8003480 <TIM_Base_SetConfig+0x124>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a2f      	ldr	r2, [pc, #188]	; (8003470 <TIM_Base_SetConfig+0x114>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d02b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d027      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <TIM_Base_SetConfig+0x118>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d023      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <TIM_Base_SetConfig+0x11c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a2a      	ldr	r2, [pc, #168]	; (800347c <TIM_Base_SetConfig+0x120>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a29      	ldr	r2, [pc, #164]	; (8003480 <TIM_Base_SetConfig+0x124>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d017      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a28      	ldr	r2, [pc, #160]	; (8003484 <TIM_Base_SetConfig+0x128>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a27      	ldr	r2, [pc, #156]	; (8003488 <TIM_Base_SetConfig+0x12c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00f      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a26      	ldr	r2, [pc, #152]	; (800348c <TIM_Base_SetConfig+0x130>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a25      	ldr	r2, [pc, #148]	; (8003490 <TIM_Base_SetConfig+0x134>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a24      	ldr	r2, [pc, #144]	; (8003494 <TIM_Base_SetConfig+0x138>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a23      	ldr	r2, [pc, #140]	; (8003498 <TIM_Base_SetConfig+0x13c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <TIM_Base_SetConfig+0x114>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d003      	beq.n	8003454 <TIM_Base_SetConfig+0xf8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <TIM_Base_SetConfig+0x124>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d103      	bne.n	800345c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	615a      	str	r2, [r3, #20]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40010000 	.word	0x40010000
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40000c00 	.word	0x40000c00
 8003480:	40010400 	.word	0x40010400
 8003484:	40014000 	.word	0x40014000
 8003488:	40014400 	.word	0x40014400
 800348c:	40014800 	.word	0x40014800
 8003490:	40001800 	.word	0x40001800
 8003494:	40001c00 	.word	0x40001c00
 8003498:	40002000 	.word	0x40002000

0800349c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f023 0201 	bic.w	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f023 0302 	bic.w	r3, r3, #2
 80034e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a20      	ldr	r2, [pc, #128]	; (8003574 <TIM_OC1_SetConfig+0xd8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_OC1_SetConfig+0x64>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <TIM_OC1_SetConfig+0xdc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10c      	bne.n	800351a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f023 0308 	bic.w	r3, r3, #8
 8003506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a15      	ldr	r2, [pc, #84]	; (8003574 <TIM_OC1_SetConfig+0xd8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d003      	beq.n	800352a <TIM_OC1_SetConfig+0x8e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <TIM_OC1_SetConfig+0xdc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d111      	bne.n	800354e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	621a      	str	r2, [r3, #32]
}
 8003568:	bf00      	nop
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40010000 	.word	0x40010000
 8003578:	40010400 	.word	0x40010400

0800357c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f023 0210 	bic.w	r2, r3, #16
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f023 0320 	bic.w	r3, r3, #32
 80035c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a22      	ldr	r2, [pc, #136]	; (8003660 <TIM_OC2_SetConfig+0xe4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d003      	beq.n	80035e4 <TIM_OC2_SetConfig+0x68>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a21      	ldr	r2, [pc, #132]	; (8003664 <TIM_OC2_SetConfig+0xe8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d10d      	bne.n	8003600 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a17      	ldr	r2, [pc, #92]	; (8003660 <TIM_OC2_SetConfig+0xe4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <TIM_OC2_SetConfig+0x94>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a16      	ldr	r2, [pc, #88]	; (8003664 <TIM_OC2_SetConfig+0xe8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d113      	bne.n	8003638 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003616:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800361e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40010000 	.word	0x40010000
 8003664:	40010400 	.word	0x40010400

08003668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0303 	bic.w	r3, r3, #3
 800369e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a21      	ldr	r2, [pc, #132]	; (8003748 <TIM_OC3_SetConfig+0xe0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_OC3_SetConfig+0x66>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a20      	ldr	r2, [pc, #128]	; (800374c <TIM_OC3_SetConfig+0xe4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d10d      	bne.n	80036ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a16      	ldr	r2, [pc, #88]	; (8003748 <TIM_OC3_SetConfig+0xe0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d003      	beq.n	80036fa <TIM_OC3_SetConfig+0x92>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a15      	ldr	r2, [pc, #84]	; (800374c <TIM_OC3_SetConfig+0xe4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d113      	bne.n	8003722 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	621a      	str	r2, [r3, #32]
}
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40010000 	.word	0x40010000
 800374c:	40010400 	.word	0x40010400

08003750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800379a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	031b      	lsls	r3, r3, #12
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <TIM_OC4_SetConfig+0xa4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_OC4_SetConfig+0x68>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <TIM_OC4_SetConfig+0xa8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d109      	bne.n	80037cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40010000 	.word	0x40010000
 80037f8:	40010400 	.word	0x40010400

080037fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 030a 	bic.w	r3, r3, #10
 8003838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	621a      	str	r2, [r3, #32]
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800385a:	b480      	push	{r7}
 800385c:	b087      	sub	sp, #28
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f023 0210 	bic.w	r2, r3, #16
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	031b      	lsls	r3, r3, #12
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003896:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	621a      	str	r2, [r3, #32]
}
 80038ae:	bf00      	nop
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f043 0307 	orr.w	r3, r3, #7
 80038dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	609a      	str	r2, [r3, #8]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800390a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	021a      	lsls	r2, r3, #8
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	431a      	orrs	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4313      	orrs	r3, r2
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	609a      	str	r2, [r3, #8]
}
 8003924:	bf00      	nop
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003944:	2302      	movs	r3, #2
 8003946:	e05a      	b.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a21      	ldr	r2, [pc, #132]	; (8003a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d022      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d01d      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d018      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1b      	ldr	r2, [pc, #108]	; (8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1a      	ldr	r2, [pc, #104]	; (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00e      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d009      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d10c      	bne.n	80039ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	40010400 	.word	0x40010400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40001800 	.word	0x40001800

08003a28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e03d      	b.n	8003ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e03f      	b.n	8003b5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd fd1e 	bl	8001534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fce5 	bl	80044e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	4613      	mov	r3, r2
 8003b72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d11d      	bne.n	8003bbc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_UART_Receive_IT+0x26>
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e016      	b.n	8003bbe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Receive_IT+0x38>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e00f      	b.n	8003bbe <HAL_UART_Receive_IT+0x58>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fac0 	bl	8004138 <UART_Start_Receive_IT>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	e000      	b.n	8003bbe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b0ba      	sub	sp, #232	; 0xe8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10f      	bne.n	8003c2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_UART_IRQHandler+0x66>
 8003c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fb9f 	bl	800436a <UART_Receive_IT>
      return;
 8003c2c:	e256      	b.n	80040dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80de 	beq.w	8003df4 <HAL_UART_IRQHandler+0x22c>
 8003c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d106      	bne.n	8003c52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80d1 	beq.w	8003df4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_UART_IRQHandler+0xae>
 8003c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <HAL_UART_IRQHandler+0xd2>
 8003c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f043 0202 	orr.w	r2, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_UART_IRQHandler+0xf6>
 8003ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f043 0204 	orr.w	r2, r3, #4
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d011      	beq.n	8003cee <HAL_UART_IRQHandler+0x126>
 8003cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d105      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f043 0208 	orr.w	r2, r3, #8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 81ed 	beq.w	80040d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_UART_IRQHandler+0x14e>
 8003d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fb2a 	bl	800436a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <HAL_UART_IRQHandler+0x17a>
 8003d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d04f      	beq.n	8003de2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa32 	bl	80041ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b40      	cmp	r3, #64	; 0x40
 8003d54:	d141      	bne.n	8003dda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3314      	adds	r3, #20
 8003d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3314      	adds	r3, #20
 8003d7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1d9      	bne.n	8003d56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d013      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	4a7d      	ldr	r2, [pc, #500]	; (8003fa4 <HAL_UART_IRQHandler+0x3dc>)
 8003db0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fd fef9 	bl	8001bae <HAL_DMA_Abort_IT>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	e00e      	b.n	8003df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f99a 	bl	800410c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	e00a      	b.n	8003df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f996 	bl	800410c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	e006      	b.n	8003df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f992 	bl	800410c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dee:	e170      	b.n	80040d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	bf00      	nop
    return;
 8003df2:	e16e      	b.n	80040d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	f040 814a 	bne.w	8004092 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8143 	beq.w	8004092 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 813c 	beq.w	8004092 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	f040 80b4 	bne.w	8003fa8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8140 	beq.w	80040d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	f080 8139 	bcs.w	80040d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e76:	f000 8088 	beq.w	8003f8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1d9      	bne.n	8003e7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3314      	adds	r3, #20
 8003ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003eee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e1      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3314      	adds	r3, #20
 8003f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3314      	adds	r3, #20
 8003f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e3      	bne.n	8003f02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5a:	f023 0310 	bic.w	r3, r3, #16
 8003f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e3      	bne.n	8003f48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fd fda2 	bl	8001ace <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8c0 	bl	8004120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fa0:	e099      	b.n	80040d6 <HAL_UART_IRQHandler+0x50e>
 8003fa2:	bf00      	nop
 8003fa4:	08004273 	.word	0x08004273
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 808b 	beq.w	80040da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8086 	beq.w	80040da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ff2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ff4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e3      	bne.n	8003fce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3314      	adds	r3, #20
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	623b      	str	r3, [r7, #32]
   return(result);
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3314      	adds	r3, #20
 8004026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800402a:	633a      	str	r2, [r7, #48]	; 0x30
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e3      	bne.n	8004006 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	60fb      	str	r3, [r7, #12]
   return(result);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0310 	bic.w	r3, r3, #16
 8004062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	330c      	adds	r3, #12
 800406c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004070:	61fa      	str	r2, [r7, #28]
 8004072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	617b      	str	r3, [r7, #20]
   return(result);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e3      	bne.n	800404c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f848 	bl	8004120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004090:	e023      	b.n	80040da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <HAL_UART_IRQHandler+0x4ea>
 800409e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f8f5 	bl	800429a <UART_Transmit_IT>
    return;
 80040b0:	e014      	b.n	80040dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00e      	beq.n	80040dc <HAL_UART_IRQHandler+0x514>
 80040be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f935 	bl	800433a <UART_EndTransmit_IT>
    return;
 80040d0:	e004      	b.n	80040dc <HAL_UART_IRQHandler+0x514>
    return;
 80040d2:	bf00      	nop
 80040d4:	e002      	b.n	80040dc <HAL_UART_IRQHandler+0x514>
      return;
 80040d6:	bf00      	nop
 80040d8:	e000      	b.n	80040dc <HAL_UART_IRQHandler+0x514>
      return;
 80040da:	bf00      	nop
  }
}
 80040dc:	37e8      	adds	r7, #232	; 0xe8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop

080040e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	88fa      	ldrh	r2, [r7, #6]
 8004150:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	88fa      	ldrh	r2, [r7, #6]
 8004156:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2222      	movs	r2, #34	; 0x22
 8004162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800417c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0220 	orr.w	r2, r2, #32
 800419c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b095      	sub	sp, #84	; 0x54
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041d4:	643a      	str	r2, [r7, #64]	; 0x40
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e5      	bne.n	80041b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3314      	adds	r3, #20
 80041ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3314      	adds	r3, #20
 8004206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800420e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	2b01      	cmp	r3, #1
 8004222:	d119      	bne.n	8004258 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	60bb      	str	r3, [r7, #8]
   return(result);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f023 0310 	bic.w	r3, r3, #16
 800423a:	647b      	str	r3, [r7, #68]	; 0x44
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004244:	61ba      	str	r2, [r7, #24]
 8004246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6979      	ldr	r1, [r7, #20]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	613b      	str	r3, [r7, #16]
   return(result);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e5      	bne.n	8004224 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004266:	bf00      	nop
 8004268:	3754      	adds	r7, #84	; 0x54
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7ff ff3d 	bl	800410c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b21      	cmp	r3, #33	; 0x21
 80042ac:	d13e      	bne.n	800432c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b6:	d114      	bne.n	80042e2 <UART_Transmit_IT+0x48>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d110      	bne.n	80042e2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	1c9a      	adds	r2, r3, #2
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	621a      	str	r2, [r3, #32]
 80042e0:	e008      	b.n	80042f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	1c59      	adds	r1, r3, #1
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6211      	str	r1, [r2, #32]
 80042ec:	781a      	ldrb	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4619      	mov	r1, r3
 8004302:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10f      	bne.n	8004328 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004316:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004326:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	e000      	b.n	800432e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800432c:	2302      	movs	r3, #2
  }
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004350:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fec2 	bl	80040e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b08c      	sub	sp, #48	; 0x30
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b22      	cmp	r3, #34	; 0x22
 800437c:	f040 80ab 	bne.w	80044d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004388:	d117      	bne.n	80043ba <UART_Receive_IT+0x50>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d113      	bne.n	80043ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004392:	2300      	movs	r3, #0
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	1c9a      	adds	r2, r3, #2
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28
 80043b8:	e026      	b.n	8004408 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043cc:	d007      	beq.n	80043de <UART_Receive_IT+0x74>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <UART_Receive_IT+0x82>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e008      	b.n	80043fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29b      	uxth	r3, r3
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	4619      	mov	r1, r3
 8004416:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004418:	2b00      	cmp	r3, #0
 800441a:	d15a      	bne.n	80044d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0220 	bic.w	r2, r2, #32
 800442a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800443a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	2b01      	cmp	r3, #1
 800445a:	d135      	bne.n	80044c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	613b      	str	r3, [r7, #16]
   return(result);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f023 0310 	bic.w	r3, r3, #16
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	330c      	adds	r3, #12
 8004480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004482:	623a      	str	r2, [r7, #32]
 8004484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	69f9      	ldr	r1, [r7, #28]
 8004488:	6a3a      	ldr	r2, [r7, #32]
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e5      	bne.n	8004462 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d10a      	bne.n	80044ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff fe2d 	bl	8004120 <HAL_UARTEx_RxEventCallback>
 80044c6:	e002      	b.n	80044ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff fe15 	bl	80040f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e002      	b.n	80044d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e000      	b.n	80044d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
  }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3730      	adds	r7, #48	; 0x30
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e4:	b09f      	sub	sp, #124	; 0x7c
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f6:	68d9      	ldr	r1, [r3, #12]
 80044f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	ea40 0301 	orr.w	r3, r0, r1
 8004500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	431a      	orrs	r2, r3
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	431a      	orrs	r2, r3
 8004512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	4313      	orrs	r3, r2
 8004518:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004524:	f021 010c 	bic.w	r1, r1, #12
 8004528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800452e:	430b      	orrs	r3, r1
 8004530:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800453c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453e:	6999      	ldr	r1, [r3, #24]
 8004540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	ea40 0301 	orr.w	r3, r0, r1
 8004548:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800454a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4bc5      	ldr	r3, [pc, #788]	; (8004864 <UART_SetConfig+0x384>)
 8004550:	429a      	cmp	r2, r3
 8004552:	d004      	beq.n	800455e <UART_SetConfig+0x7e>
 8004554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4bc3      	ldr	r3, [pc, #780]	; (8004868 <UART_SetConfig+0x388>)
 800455a:	429a      	cmp	r2, r3
 800455c:	d103      	bne.n	8004566 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800455e:	f7fd ff41 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 8004562:	6778      	str	r0, [r7, #116]	; 0x74
 8004564:	e002      	b.n	800456c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004566:	f7fd ff29 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 800456a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800456c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004574:	f040 80b6 	bne.w	80046e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800457a:	461c      	mov	r4, r3
 800457c:	f04f 0500 	mov.w	r5, #0
 8004580:	4622      	mov	r2, r4
 8004582:	462b      	mov	r3, r5
 8004584:	1891      	adds	r1, r2, r2
 8004586:	6439      	str	r1, [r7, #64]	; 0x40
 8004588:	415b      	adcs	r3, r3
 800458a:	647b      	str	r3, [r7, #68]	; 0x44
 800458c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004590:	1912      	adds	r2, r2, r4
 8004592:	eb45 0303 	adc.w	r3, r5, r3
 8004596:	f04f 0000 	mov.w	r0, #0
 800459a:	f04f 0100 	mov.w	r1, #0
 800459e:	00d9      	lsls	r1, r3, #3
 80045a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045a4:	00d0      	lsls	r0, r2, #3
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	1911      	adds	r1, r2, r4
 80045ac:	6639      	str	r1, [r7, #96]	; 0x60
 80045ae:	416b      	adcs	r3, r5
 80045b0:	667b      	str	r3, [r7, #100]	; 0x64
 80045b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	1891      	adds	r1, r2, r2
 80045be:	63b9      	str	r1, [r7, #56]	; 0x38
 80045c0:	415b      	adcs	r3, r3
 80045c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80045cc:	f7fb fe1a 	bl	8000204 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4ba5      	ldr	r3, [pc, #660]	; (800486c <UART_SetConfig+0x38c>)
 80045d6:	fba3 2302 	umull	r2, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	011e      	lsls	r6, r3, #4
 80045de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e0:	461c      	mov	r4, r3
 80045e2:	f04f 0500 	mov.w	r5, #0
 80045e6:	4622      	mov	r2, r4
 80045e8:	462b      	mov	r3, r5
 80045ea:	1891      	adds	r1, r2, r2
 80045ec:	6339      	str	r1, [r7, #48]	; 0x30
 80045ee:	415b      	adcs	r3, r3
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
 80045f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045f6:	1912      	adds	r2, r2, r4
 80045f8:	eb45 0303 	adc.w	r3, r5, r3
 80045fc:	f04f 0000 	mov.w	r0, #0
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	00d9      	lsls	r1, r3, #3
 8004606:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800460a:	00d0      	lsls	r0, r2, #3
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	1911      	adds	r1, r2, r4
 8004612:	65b9      	str	r1, [r7, #88]	; 0x58
 8004614:	416b      	adcs	r3, r5
 8004616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	461a      	mov	r2, r3
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	1891      	adds	r1, r2, r2
 8004624:	62b9      	str	r1, [r7, #40]	; 0x28
 8004626:	415b      	adcs	r3, r3
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800462a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800462e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004632:	f7fb fde7 	bl	8000204 <__aeabi_uldivmod>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4b8c      	ldr	r3, [pc, #560]	; (800486c <UART_SetConfig+0x38c>)
 800463c:	fba3 1302 	umull	r1, r3, r3, r2
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	2164      	movs	r1, #100	; 0x64
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	3332      	adds	r3, #50	; 0x32
 800464e:	4a87      	ldr	r2, [pc, #540]	; (800486c <UART_SetConfig+0x38c>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800465c:	441e      	add	r6, r3
 800465e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004660:	4618      	mov	r0, r3
 8004662:	f04f 0100 	mov.w	r1, #0
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	1894      	adds	r4, r2, r2
 800466c:	623c      	str	r4, [r7, #32]
 800466e:	415b      	adcs	r3, r3
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
 8004672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004676:	1812      	adds	r2, r2, r0
 8004678:	eb41 0303 	adc.w	r3, r1, r3
 800467c:	f04f 0400 	mov.w	r4, #0
 8004680:	f04f 0500 	mov.w	r5, #0
 8004684:	00dd      	lsls	r5, r3, #3
 8004686:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800468a:	00d4      	lsls	r4, r2, #3
 800468c:	4622      	mov	r2, r4
 800468e:	462b      	mov	r3, r5
 8004690:	1814      	adds	r4, r2, r0
 8004692:	653c      	str	r4, [r7, #80]	; 0x50
 8004694:	414b      	adcs	r3, r1
 8004696:	657b      	str	r3, [r7, #84]	; 0x54
 8004698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	461a      	mov	r2, r3
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	1891      	adds	r1, r2, r2
 80046a4:	61b9      	str	r1, [r7, #24]
 80046a6:	415b      	adcs	r3, r3
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80046b2:	f7fb fda7 	bl	8000204 <__aeabi_uldivmod>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4b6c      	ldr	r3, [pc, #432]	; (800486c <UART_SetConfig+0x38c>)
 80046bc:	fba3 1302 	umull	r1, r3, r3, r2
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	2164      	movs	r1, #100	; 0x64
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	3332      	adds	r3, #50	; 0x32
 80046ce:	4a67      	ldr	r2, [pc, #412]	; (800486c <UART_SetConfig+0x38c>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	f003 0207 	and.w	r2, r3, #7
 80046da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4432      	add	r2, r6
 80046e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046e2:	e0b9      	b.n	8004858 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e6:	461c      	mov	r4, r3
 80046e8:	f04f 0500 	mov.w	r5, #0
 80046ec:	4622      	mov	r2, r4
 80046ee:	462b      	mov	r3, r5
 80046f0:	1891      	adds	r1, r2, r2
 80046f2:	6139      	str	r1, [r7, #16]
 80046f4:	415b      	adcs	r3, r3
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046fc:	1912      	adds	r2, r2, r4
 80046fe:	eb45 0303 	adc.w	r3, r5, r3
 8004702:	f04f 0000 	mov.w	r0, #0
 8004706:	f04f 0100 	mov.w	r1, #0
 800470a:	00d9      	lsls	r1, r3, #3
 800470c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004710:	00d0      	lsls	r0, r2, #3
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	eb12 0804 	adds.w	r8, r2, r4
 800471a:	eb43 0905 	adc.w	r9, r3, r5
 800471e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4618      	mov	r0, r3
 8004724:	f04f 0100 	mov.w	r1, #0
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	008b      	lsls	r3, r1, #2
 8004732:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004736:	0082      	lsls	r2, r0, #2
 8004738:	4640      	mov	r0, r8
 800473a:	4649      	mov	r1, r9
 800473c:	f7fb fd62 	bl	8000204 <__aeabi_uldivmod>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4b49      	ldr	r3, [pc, #292]	; (800486c <UART_SetConfig+0x38c>)
 8004746:	fba3 2302 	umull	r2, r3, r3, r2
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	011e      	lsls	r6, r3, #4
 800474e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004750:	4618      	mov	r0, r3
 8004752:	f04f 0100 	mov.w	r1, #0
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	1894      	adds	r4, r2, r2
 800475c:	60bc      	str	r4, [r7, #8]
 800475e:	415b      	adcs	r3, r3
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004766:	1812      	adds	r2, r2, r0
 8004768:	eb41 0303 	adc.w	r3, r1, r3
 800476c:	f04f 0400 	mov.w	r4, #0
 8004770:	f04f 0500 	mov.w	r5, #0
 8004774:	00dd      	lsls	r5, r3, #3
 8004776:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800477a:	00d4      	lsls	r4, r2, #3
 800477c:	4622      	mov	r2, r4
 800477e:	462b      	mov	r3, r5
 8004780:	1814      	adds	r4, r2, r0
 8004782:	64bc      	str	r4, [r7, #72]	; 0x48
 8004784:	414b      	adcs	r3, r1
 8004786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4618      	mov	r0, r3
 800478e:	f04f 0100 	mov.w	r1, #0
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	008b      	lsls	r3, r1, #2
 800479c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047a0:	0082      	lsls	r2, r0, #2
 80047a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80047a6:	f7fb fd2d 	bl	8000204 <__aeabi_uldivmod>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4b2f      	ldr	r3, [pc, #188]	; (800486c <UART_SetConfig+0x38c>)
 80047b0:	fba3 1302 	umull	r1, r3, r3, r2
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	2164      	movs	r1, #100	; 0x64
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	3332      	adds	r3, #50	; 0x32
 80047c2:	4a2a      	ldr	r2, [pc, #168]	; (800486c <UART_SetConfig+0x38c>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ce:	441e      	add	r6, r3
 80047d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d2:	4618      	mov	r0, r3
 80047d4:	f04f 0100 	mov.w	r1, #0
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	1894      	adds	r4, r2, r2
 80047de:	603c      	str	r4, [r7, #0]
 80047e0:	415b      	adcs	r3, r3
 80047e2:	607b      	str	r3, [r7, #4]
 80047e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047e8:	1812      	adds	r2, r2, r0
 80047ea:	eb41 0303 	adc.w	r3, r1, r3
 80047ee:	f04f 0400 	mov.w	r4, #0
 80047f2:	f04f 0500 	mov.w	r5, #0
 80047f6:	00dd      	lsls	r5, r3, #3
 80047f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047fc:	00d4      	lsls	r4, r2, #3
 80047fe:	4622      	mov	r2, r4
 8004800:	462b      	mov	r3, r5
 8004802:	eb12 0a00 	adds.w	sl, r2, r0
 8004806:	eb43 0b01 	adc.w	fp, r3, r1
 800480a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4618      	mov	r0, r3
 8004810:	f04f 0100 	mov.w	r1, #0
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	008b      	lsls	r3, r1, #2
 800481e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004822:	0082      	lsls	r2, r0, #2
 8004824:	4650      	mov	r0, sl
 8004826:	4659      	mov	r1, fp
 8004828:	f7fb fcec 	bl	8000204 <__aeabi_uldivmod>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4b0e      	ldr	r3, [pc, #56]	; (800486c <UART_SetConfig+0x38c>)
 8004832:	fba3 1302 	umull	r1, r3, r3, r2
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2164      	movs	r1, #100	; 0x64
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	3332      	adds	r3, #50	; 0x32
 8004844:	4a09      	ldr	r2, [pc, #36]	; (800486c <UART_SetConfig+0x38c>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	f003 020f 	and.w	r2, r3, #15
 8004850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4432      	add	r2, r6
 8004856:	609a      	str	r2, [r3, #8]
}
 8004858:	bf00      	nop
 800485a:	377c      	adds	r7, #124	; 0x7c
 800485c:	46bd      	mov	sp, r7
 800485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004862:	bf00      	nop
 8004864:	40011000 	.word	0x40011000
 8004868:	40011400 	.word	0x40011400
 800486c:	51eb851f 	.word	0x51eb851f

08004870 <__libc_init_array>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	4d0d      	ldr	r5, [pc, #52]	; (80048a8 <__libc_init_array+0x38>)
 8004874:	4c0d      	ldr	r4, [pc, #52]	; (80048ac <__libc_init_array+0x3c>)
 8004876:	1b64      	subs	r4, r4, r5
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	2600      	movs	r6, #0
 800487c:	42a6      	cmp	r6, r4
 800487e:	d109      	bne.n	8004894 <__libc_init_array+0x24>
 8004880:	4d0b      	ldr	r5, [pc, #44]	; (80048b0 <__libc_init_array+0x40>)
 8004882:	4c0c      	ldr	r4, [pc, #48]	; (80048b4 <__libc_init_array+0x44>)
 8004884:	f000 f820 	bl	80048c8 <_init>
 8004888:	1b64      	subs	r4, r4, r5
 800488a:	10a4      	asrs	r4, r4, #2
 800488c:	2600      	movs	r6, #0
 800488e:	42a6      	cmp	r6, r4
 8004890:	d105      	bne.n	800489e <__libc_init_array+0x2e>
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	f855 3b04 	ldr.w	r3, [r5], #4
 8004898:	4798      	blx	r3
 800489a:	3601      	adds	r6, #1
 800489c:	e7ee      	b.n	800487c <__libc_init_array+0xc>
 800489e:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a2:	4798      	blx	r3
 80048a4:	3601      	adds	r6, #1
 80048a6:	e7f2      	b.n	800488e <__libc_init_array+0x1e>
 80048a8:	08004900 	.word	0x08004900
 80048ac:	08004900 	.word	0x08004900
 80048b0:	08004900 	.word	0x08004900
 80048b4:	08004904 	.word	0x08004904

080048b8 <memset>:
 80048b8:	4402      	add	r2, r0
 80048ba:	4603      	mov	r3, r0
 80048bc:	4293      	cmp	r3, r2
 80048be:	d100      	bne.n	80048c2 <memset+0xa>
 80048c0:	4770      	bx	lr
 80048c2:	f803 1b01 	strb.w	r1, [r3], #1
 80048c6:	e7f9      	b.n	80048bc <memset+0x4>

080048c8 <_init>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr

080048d4 <_fini>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	bf00      	nop
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr
