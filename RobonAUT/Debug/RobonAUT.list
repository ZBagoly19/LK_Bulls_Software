
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100f0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  080102b4  080102b4  000202b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801059c  0801059c  00030180  2**0
                  CONTENTS
  4 .ARM          00000008  0801059c  0801059c  0002059c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105a4  080105a4  00030180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105a4  080105a4  000205a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105a8  080105a8  000205a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080105ac  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  20000180  0801072c  00030180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  0801072c  00030798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032328  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eae  00000000  00000000  000624d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  00066388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a48  00000000  00000000  00067f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029216  00000000  00000000  00069980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026ce4  00000000  00000000  00092b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6366  00000000  00000000  000b987a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001afbe0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007924  00000000  00000000  001afc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000180 	.word	0x20000180
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0801029c 	.word	0x0801029c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000184 	.word	0x20000184
 8000200:	0801029c 	.word	0x0801029c

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__gedf2>:
 80009a0:	f04f 3cff 	mov.w	ip, #4294967295
 80009a4:	e006      	b.n	80009b4 <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__ledf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	e002      	b.n	80009b4 <__cmpdf2+0x4>
 80009ae:	bf00      	nop

080009b0 <__cmpdf2>:
 80009b0:	f04f 0c01 	mov.w	ip, #1
 80009b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ca:	d01b      	beq.n	8000a04 <__cmpdf2+0x54>
 80009cc:	b001      	add	sp, #4
 80009ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d2:	bf0c      	ite	eq
 80009d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d8:	ea91 0f03 	teqne	r1, r3
 80009dc:	bf02      	ittt	eq
 80009de:	ea90 0f02 	teqeq	r0, r2
 80009e2:	2000      	moveq	r0, #0
 80009e4:	4770      	bxeq	lr
 80009e6:	f110 0f00 	cmn.w	r0, #0
 80009ea:	ea91 0f03 	teq	r1, r3
 80009ee:	bf58      	it	pl
 80009f0:	4299      	cmppl	r1, r3
 80009f2:	bf08      	it	eq
 80009f4:	4290      	cmpeq	r0, r2
 80009f6:	bf2c      	ite	cs
 80009f8:	17d8      	asrcs	r0, r3, #31
 80009fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fe:	f040 0001 	orr.w	r0, r0, #1
 8000a02:	4770      	bx	lr
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__cmpdf2+0x64>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d107      	bne.n	8000a24 <__cmpdf2+0x74>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d1d6      	bne.n	80009cc <__cmpdf2+0x1c>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d0d3      	beq.n	80009cc <__cmpdf2+0x1c>
 8000a24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdrcmple>:
 8000a2c:	4684      	mov	ip, r0
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4662      	mov	r2, ip
 8000a32:	468c      	mov	ip, r1
 8000a34:	4619      	mov	r1, r3
 8000a36:	4663      	mov	r3, ip
 8000a38:	e000      	b.n	8000a3c <__aeabi_cdcmpeq>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_cdcmpeq>:
 8000a3c:	b501      	push	{r0, lr}
 8000a3e:	f7ff ffb7 	bl	80009b0 <__cmpdf2>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	bf48      	it	mi
 8000a46:	f110 0f00 	cmnmi.w	r0, #0
 8000a4a:	bd01      	pop	{r0, pc}

08000a4c <__aeabi_dcmpeq>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff fff4 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a54:	bf0c      	ite	eq
 8000a56:	2001      	moveq	r0, #1
 8000a58:	2000      	movne	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmplt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffea 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmple>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffe0 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpge>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffce 	bl	8000a2c <__aeabi_cdrcmple>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpgt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffc4 	bl	8000a2c <__aeabi_cdrcmple>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b0a8      	sub	sp, #160	; 0xa0
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e42:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000e7a:	f00f f991 	bl	80101a0 <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	4aaa      	ldr	r2, [pc, #680]	; (800112c <SERVO_Init+0x2f4>)
 8000e82:	015b      	lsls	r3, r3, #5
 8000e84:	4413      	add	r3, r2
 8000e86:	3314      	adds	r3, #20
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fafc 	bl	8000488 <__aeabi_ui2d>
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	4ba6      	ldr	r3, [pc, #664]	; (8001130 <SERVO_Init+0x2f8>)
 8000e96:	f7ff fc9b 	bl	80007d0 <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fe2d 	bl	8000b00 <__aeabi_d2uiz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	4a9f      	ldr	r2, [pc, #636]	; (800112c <SERVO_Init+0x2f4>)
 8000eb0:	015b      	lsls	r3, r3, #5
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3314      	adds	r3, #20
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fae5 	bl	8000488 <__aeabi_ui2d>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	460d      	mov	r5, r1
 8000ec2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000ec6:	f7ff fadf 	bl	8000488 <__aeabi_ui2d>
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	4b99      	ldr	r3, [pc, #612]	; (8001134 <SERVO_Init+0x2fc>)
 8000ed0:	f7ff f99e 	bl	8000210 <__adddf3>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b95      	ldr	r3, [pc, #596]	; (8001138 <SERVO_Init+0x300>)
 8000ee2:	f7ff fb4b 	bl	800057c <__aeabi_dmul>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4620      	mov	r0, r4
 8000eec:	4629      	mov	r1, r5
 8000eee:	f7ff fc6f 	bl	80007d0 <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <SERVO_Init+0x2fc>)
 8000f00:	f7ff f984 	bl	800020c <__aeabi_dsub>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f7ff fdf8 	bl	8000b00 <__aeabi_d2uiz>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000f16:	2313      	movs	r3, #19
 8000f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000f1c:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	4a81      	ldr	r2, [pc, #516]	; (800112c <SERVO_Init+0x2f4>)
 8000f28:	015b      	lsls	r3, r3, #5
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3308      	adds	r3, #8
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a82      	ldr	r2, [pc, #520]	; (800113c <SERVO_Init+0x304>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10e      	bne.n	8000f54 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	4b81      	ldr	r3, [pc, #516]	; (8001140 <SERVO_Init+0x308>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a80      	ldr	r2, [pc, #512]	; (8001140 <SERVO_Init+0x308>)
 8000f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b7e      	ldr	r3, [pc, #504]	; (8001140 <SERVO_Init+0x308>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	e046      	b.n	8000fe2 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	4a75      	ldr	r2, [pc, #468]	; (800112c <SERVO_Init+0x2f4>)
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3308      	adds	r3, #8
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f64:	d10e      	bne.n	8000f84 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	4b75      	ldr	r3, [pc, #468]	; (8001140 <SERVO_Init+0x308>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a74      	ldr	r2, [pc, #464]	; (8001140 <SERVO_Init+0x308>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b72      	ldr	r3, [pc, #456]	; (8001140 <SERVO_Init+0x308>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	e02e      	b.n	8000fe2 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	4a69      	ldr	r2, [pc, #420]	; (800112c <SERVO_Init+0x2f4>)
 8000f88:	015b      	lsls	r3, r3, #5
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a6c      	ldr	r2, [pc, #432]	; (8001144 <SERVO_Init+0x30c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10e      	bne.n	8000fb4 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b69      	ldr	r3, [pc, #420]	; (8001140 <SERVO_Init+0x308>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a68      	ldr	r2, [pc, #416]	; (8001140 <SERVO_Init+0x308>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b66      	ldr	r3, [pc, #408]	; (8001140 <SERVO_Init+0x308>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	e016      	b.n	8000fe2 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	4a5d      	ldr	r2, [pc, #372]	; (800112c <SERVO_Init+0x2f4>)
 8000fb8:	015b      	lsls	r3, r3, #5
 8000fba:	4413      	add	r3, r2
 8000fbc:	3308      	adds	r3, #8
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a61      	ldr	r2, [pc, #388]	; (8001148 <SERVO_Init+0x310>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10d      	bne.n	8000fe2 <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b5d      	ldr	r3, [pc, #372]	; (8001140 <SERVO_Init+0x308>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a5c      	ldr	r2, [pc, #368]	; (8001140 <SERVO_Init+0x308>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b5a      	ldr	r3, [pc, #360]	; (8001140 <SERVO_Init+0x308>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4a51      	ldr	r2, [pc, #324]	; (800112c <SERVO_Init+0x2f4>)
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	4413      	add	r3, r2
 8000fea:	3308      	adds	r3, #8
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8000ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ff4:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 8000ffa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4618      	mov	r0, r3
 800100e:	f006 fb47 	bl	80076a0 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800101a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f007 fbf1 	bl	800880c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4618      	mov	r0, r3
 8001030:	f006 fcec 	bl	8007a0c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8001040:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f008 fb7e 	bl	800974c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001050:	2360      	movs	r3, #96	; 0x60
 8001052:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001058:	2300      	movs	r3, #0
 800105a:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	4a32      	ldr	r2, [pc, #200]	; (800112c <SERVO_Init+0x2f4>)
 8001064:	015b      	lsls	r3, r3, #5
 8001066:	4413      	add	r3, r2
 8001068:	3310      	adds	r3, #16
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4618      	mov	r0, r3
 8001076:	f007 f9f1 	bl	800845c <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 800107a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800107e:	f7ff fa03 	bl	8000488 <__aeabi_ui2d>
 8001082:	4604      	mov	r4, r0
 8001084:	460d      	mov	r5, r1
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	4a28      	ldr	r2, [pc, #160]	; (800112c <SERVO_Init+0x2f4>)
 800108a:	015b      	lsls	r3, r3, #5
 800108c:	4413      	add	r3, r2
 800108e:	3318      	adds	r3, #24
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa1a 	bl	80004cc <__aeabi_f2d>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <SERVO_Init+0x314>)
 800109e:	f7ff fb97 	bl	80007d0 <__aeabi_ddiv>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4620      	mov	r0, r4
 80010a8:	4629      	mov	r1, r5
 80010aa:	f7ff fa67 	bl	800057c <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	88fc      	ldrh	r4, [r7, #6]
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f7ff fd22 	bl	8000b00 <__aeabi_d2uiz>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <SERVO_Init+0x318>)
 80010c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 80010c6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80010ca:	f7ff f9dd 	bl	8000488 <__aeabi_ui2d>
 80010ce:	4604      	mov	r4, r0
 80010d0:	460d      	mov	r5, r1
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <SERVO_Init+0x31c>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f9f9 	bl	80004cc <__aeabi_f2d>
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <SERVO_Init+0x314>)
 80010e0:	f7ff fb76 	bl	80007d0 <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4620      	mov	r0, r4
 80010ea:	4629      	mov	r1, r5
 80010ec:	f7ff fa46 	bl	800057c <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	88fc      	ldrh	r4, [r7, #6]
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fd01 	bl	8000b00 <__aeabi_d2uiz>
 80010fe:	4603      	mov	r3, r0
 8001100:	b299      	uxth	r1, r3
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <SERVO_Init+0x318>)
 8001104:	00a3      	lsls	r3, r4, #2
 8001106:	4413      	add	r3, r2
 8001108:	460a      	mov	r2, r1
 800110a:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <SERVO_Init+0x2f4>)
 8001110:	015b      	lsls	r3, r3, #5
 8001112:	4413      	add	r3, r2
 8001114:	3310      	adds	r3, #16
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f006 fd64 	bl	8007bec <HAL_TIM_PWM_Start>

}
 8001124:	bf00      	nop
 8001126:	37a0      	adds	r7, #160	; 0xa0
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	08010534 	.word	0x08010534
 8001130:	41490000 	.word	0x41490000
 8001134:	3ff00000 	.word	0x3ff00000
 8001138:	40490000 	.word	0x40490000
 800113c:	40001800 	.word	0x40001800
 8001140:	40023800 	.word	0x40023800
 8001144:	40000400 	.word	0x40000400
 8001148:	40000800 	.word	0x40000800
 800114c:	40340000 	.word	0x40340000
 8001150:	2000019c 	.word	0x2000019c
 8001154:	40066666 	.word	0x40066666

08001158 <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	ed87 0a00 	vstr	s0, [r7]
 8001164:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <SERVO_MoveTo+0x94>)
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	885b      	ldrh	r3, [r3, #2]
 8001174:	4619      	mov	r1, r3
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <SERVO_MoveTo+0x94>)
 800117a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800117e:	1acb      	subs	r3, r1, r3
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	edd7 7a00 	vldr	s15, [r7]
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	ee17 0a90 	vmov	r0, s15
 8001194:	f7ff f99a 	bl	80004cc <__aeabi_f2d>
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <SERVO_MoveTo+0x98>)
 800119e:	f7ff fb17 	bl	80007d0 <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4614      	mov	r4, r2
 80011a8:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <SERVO_MoveTo+0x94>)
 80011ae:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f978 	bl	80004a8 <__aeabi_i2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff f826 	bl	8000210 <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fc98 	bl	8000b00 <__aeabi_d2uiz>
 80011d0:	4603      	mov	r3, r0
 80011d2:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <SERVO_MoveTo+0x9c>)
 80011d8:	015b      	lsls	r3, r3, #5
 80011da:	4413      	add	r3, r2
 80011dc:	330c      	adds	r3, #12
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	89fa      	ldrh	r2, [r7, #14]
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bdb0      	pop	{r4, r5, r7, pc}
 80011ec:	2000019c 	.word	0x2000019c
 80011f0:	40668000 	.word	0x40668000
 80011f4:	08010534 	.word	0x08010534

080011f8 <HAL_UART_RxCpltCallback>:
void Kovetendo_vonal_valaszto(int* elso, int* hatso);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
			bluetooth_flag = 1;
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
		bluetooth_a++;
	}
	HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);*/
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
				kanyarban_vagy_egyenes);
		bluetooth_i++;
		bluetooth_len = strlen(bluetooth_buffer);
		//HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);
	}*/
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8001226:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t tavolsag1_buff[50];
	VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_Dev_t vl53l1_c; // center module
	VL53L1_DEV Dev = &vl53l1_c;
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122e:	f002 f9e1 	bl	80035f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 fa93 	bl	800175c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f000 fee5 	bl	8002004 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800123a:	f000 fe99 	bl	8001f70 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800123e:	f000 faff 	bl	8001840 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001242:	f000 fb2b 	bl	800189c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001246:	f000 fbbb 	bl	80019c0 <MX_SPI2_Init>
  MX_SPI3_Init();
 800124a:	f000 fbef 	bl	8001a2c <MX_SPI3_Init>
  MX_TIM3_Init();
 800124e:	f000 fc71 	bl	8001b34 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001252:	f000 fcc9 	bl	8001be8 <MX_TIM4_Init>
  MX_UART4_Init();
 8001256:	f000 fe37 	bl	8001ec8 <MX_UART4_Init>
  MX_TIM8_Init();
 800125a:	f000 fd19 	bl	8001c90 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800125e:	f000 fe5d 	bl	8001f1c <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001262:	f000 fb49 	bl	80018f8 <MX_I2C3_Init>
  MX_TIM12_Init();
 8001266:	f000 fdbf 	bl	8001de8 <MX_TIM12_Init>
  MX_DMA_Init();
 800126a:	f000 feab 	bl	8001fc4 <MX_DMA_Init>
  MX_TIM2_Init();
 800126e:	f000 fc13 	bl	8001a98 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001272:	f000 fb6f 	bl	8001954 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init(SZERVO);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fdde 	bl	8000e38 <SERVO_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM1);
 800127c:	2000      	movs	r0, #0
 800127e:	f00e fe01 	bl	800fe84 <DC_MOTOR_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM2);
 8001282:	2001      	movs	r0, #1
 8001284:	f00e fdfe 	bl	800fe84 <DC_MOTOR_Init>
	DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 8001288:	2100      	movs	r1, #0
 800128a:	2000      	movs	r0, #0
 800128c:	f00e fed0 	bl	8010030 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 8001290:	2100      	movs	r1, #0
 8001292:	2001      	movs	r0, #1
 8001294:	f00e fecc 	bl	8010030 <DC_MOTOR_Start>

	//HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);
	HAL_TIM_Base_Start_IT(&htim2);
 8001298:	48b8      	ldr	r0, [pc, #736]	; (800157c <main+0x35c>)
 800129a:	f006 faf1 	bl	8007880 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 800129e:	2104      	movs	r1, #4
 80012a0:	48b7      	ldr	r0, [pc, #732]	; (8001580 <main+0x360>)
 80012a2:	f006 fca3 	bl	8007bec <HAL_TIM_PWM_Start>

	//Vonalszenzor init
	Vonalszenzor_Init();
 80012a6:	f000 ff77 	bl	8002198 <Vonalszenzor_Init>


	// initialize vl53l1x communication parameters
	Dev->I2cHandle = &hi2c1;
 80012aa:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80012ae:	4ab5      	ldr	r2, [pc, #724]	; (8001584 <main+0x364>)
 80012b0:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev->I2cDevAddr = 0x52;
 80012b4:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80012b8:	2252      	movs	r2, #82	; 0x52
 80012ba:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	/*** Initialize GPIO expanders ***/
	// Unused GPIO should be configured as outputs to minimize the power consumption
	tavolsag1_buff[0] = 0x14; // GPDR (GPIO set direction register)
 80012be:	2314      	movs	r3, #20
 80012c0:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	tavolsag1_buff[1] = 0xFF; // GPIO_0 - GPIO_7
 80012c4:	23ff      	movs	r3, #255	; 0xff
 80012c6:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[2] = 0xFF; // GPIO_8 - GPIO_15
 80012ca:	23ff      	movs	r3, #255	; 0xff
 80012cc:	f887 33c6 	strb.w	r3, [r7, #966]	; 0x3c6
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 3, 0xFFFF );
 80012d0:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80012d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2303      	movs	r3, #3
 80012dc:	2184      	movs	r1, #132	; 0x84
 80012de:	48a9      	ldr	r0, [pc, #676]	; (8001584 <main+0x364>)
 80012e0:	f003 fd82 	bl	8004de8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_2_ADDR, tavolsag1_buff, 3, 0xFFFF );
 80012e4:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80012e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2303      	movs	r3, #3
 80012f0:	2186      	movs	r1, #134	; 0x86
 80012f2:	48a4      	ldr	r0, [pc, #656]	; (8001584 <main+0x364>)
 80012f4:	f003 fd78 	bl	8004de8 <HAL_I2C_Master_Transmit>

	// clear XSHUT (disable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 80012f8:	2313      	movs	r3, #19
 80012fa:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 80012fe:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8001302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2301      	movs	r3, #1
 800130a:	2184      	movs	r1, #132	; 0x84
 800130c:	489d      	ldr	r0, [pc, #628]	; (8001584 <main+0x364>)
 800130e:	f003 fd6b 	bl	8004de8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 8001312:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8001316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	2184      	movs	r1, #132	; 0x84
 8001320:	4898      	ldr	r0, [pc, #608]	; (8001584 <main+0x364>)
 8001322:	f003 fe5f 	bl	8004fe4 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 8001326:	f897 33c4 	ldrb.w	r3, [r7, #964]	; 0x3c4
 800132a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001334:	2313      	movs	r3, #19
 8001336:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 800133a:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800133e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2302      	movs	r3, #2
 8001346:	2184      	movs	r1, #132	; 0x84
 8001348:	488e      	ldr	r0, [pc, #568]	; (8001584 <main+0x364>)
 800134a:	f003 fd4d 	bl	8004de8 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 ); // 2ms reset time
 800134e:	2002      	movs	r0, #2
 8001350:	f002 f9c2 	bl	80036d8 <HAL_Delay>

	// set XSHUT (enable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state)
 8001354:	2313      	movs	r3, #19
 8001356:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800135a:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800135e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	2184      	movs	r1, #132	; 0x84
 8001368:	4886      	ldr	r0, [pc, #536]	; (8001584 <main+0x364>)
 800136a:	f003 fd3d 	bl	8004de8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800136e:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8001372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	2184      	movs	r1, #132	; 0x84
 800137c:	4881      	ldr	r0, [pc, #516]	; (8001584 <main+0x364>)
 800137e:	f003 fe31 	bl	8004fe4 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 8001382:	f897 33c4 	ldrb.w	r3, [r7, #964]	; 0x3c4
 8001386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001390:	2313      	movs	r3, #19
 8001392:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 8001396:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800139a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2302      	movs	r3, #2
 80013a2:	2184      	movs	r1, #132	; 0x84
 80013a4:	4877      	ldr	r0, [pc, #476]	; (8001584 <main+0x364>)
 80013a6:	f003 fd1f 	bl	8004de8 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 );
 80013aa:	2002      	movs	r0, #2
 80013ac:	f002 f994 	bl	80036d8 <HAL_Delay>

	/*** VL53L1X Initialization ***/
	VL53L1_WaitDeviceBooted( Dev );
 80013b0:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013b4:	f009 fb0c 	bl	800a9d0 <VL53L1_WaitDeviceBooted>
	VL53L1_DataInit( Dev );
 80013b8:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013bc:	f009 fab0 	bl	800a920 <VL53L1_DataInit>
	VL53L1_StaticInit( Dev );
 80013c0:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013c4:	f009 fae5 	bl	800a992 <VL53L1_StaticInit>
	VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 80013c8:	2103      	movs	r1, #3
 80013ca:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013ce:	f009 fc31 	bl	800ac34 <VL53L1_SetDistanceMode>
	VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 80013d2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80013d6:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013da:	f009 fca1 	bl	800ad20 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 80013de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013e2:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013e6:	f009 fe27 	bl	800b038 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
	VL53L1_StartMeasurement( Dev );
 80013ea:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013ee:	f009 ff61 	bl	800b2b4 <VL53L1_StartMeasurement>
		kapu2 = kapuk[2];
		kapu3 = kapuk[3];
		kapu4 = kapuk[4];				ez a resz itt valahogy gebaszt okoz, akasztja a while-t
		kapu5 = kapuk[5];*/

		for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80013f8:	e010      	b.n	800141c <main+0x1fc>
			vonalak_elso[i] = '-';
 80013fa:	4a63      	ldr	r2, [pc, #396]	; (8001588 <main+0x368>)
 80013fc:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001400:	4413      	add	r3, r2
 8001402:	222d      	movs	r2, #45	; 0x2d
 8001404:	701a      	strb	r2, [r3, #0]
			vonalak_hatso[i] = '-';
 8001406:	4a61      	ldr	r2, [pc, #388]	; (800158c <main+0x36c>)
 8001408:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800140c:	4413      	add	r3, r2
 800140e:	222d      	movs	r2, #45	; 0x2d
 8001410:	701a      	strb	r2, [r3, #0]
		for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 8001412:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001416:	3301      	adds	r3, #1
 8001418:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800141c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001420:	2b04      	cmp	r3, #4
 8001422:	ddea      	ble.n	80013fa <main+0x1da>
		}
		for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 8001424:	2301      	movs	r3, #1
 8001426:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800142a:	e010      	b.n	800144e <main+0x22e>
			vonal_eredmeny_elso[i] = '-';
 800142c:	4a58      	ldr	r2, [pc, #352]	; (8001590 <main+0x370>)
 800142e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001432:	4413      	add	r3, r2
 8001434:	222d      	movs	r2, #45	; 0x2d
 8001436:	701a      	strb	r2, [r3, #0]
			vonal_eredmeny_hatso[i] = '-';
 8001438:	4a56      	ldr	r2, [pc, #344]	; (8001594 <main+0x374>)
 800143a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800143e:	4413      	add	r3, r2
 8001440:	222d      	movs	r2, #45	; 0x2d
 8001442:	701a      	strb	r2, [r3, #0]
		for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 8001444:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001448:	3301      	adds	r3, #1
 800144a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800144e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001452:	2b20      	cmp	r3, #32
 8001454:	ddea      	ble.n	800142c <main+0x20c>
		}

		Vonalszenzor_operal(vonal_eredmeny_elso, vonal_eredmeny_hatso);
 8001456:	494f      	ldr	r1, [pc, #316]	; (8001594 <main+0x374>)
 8001458:	484d      	ldr	r0, [pc, #308]	; (8001590 <main+0x370>)
 800145a:	f000 feaf 	bl	80021bc <Vonalszenzor_operal>
		for(int poz=1; poz < 33-1; poz++) {
 800145e:	2301      	movs	r3, #1
 8001460:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001464:	e04d      	b.n	8001502 <main+0x2e2>
		// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
			if(vonal_eredmeny_elso[poz] > VONAL_THRESHOLD) {
 8001466:	4a4a      	ldr	r2, [pc, #296]	; (8001590 <main+0x370>)
 8001468:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f819 	bl	80004a8 <__aeabi_i2d>
 8001476:	4b48      	ldr	r3, [pc, #288]	; (8001598 <main+0x378>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff fb0e 	bl	8000a9c <__aeabi_dcmpgt>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d038      	beq.n	80014f8 <main+0x2d8>
				if(vonal_eredmeny_elso[poz+1] > VONAL_THRESHOLD) {
 8001486:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800148a:	3301      	adds	r3, #1
 800148c:	4a40      	ldr	r2, [pc, #256]	; (8001590 <main+0x370>)
 800148e:	5cd3      	ldrb	r3, [r2, r3]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f809 	bl	80004a8 <__aeabi_i2d>
 8001496:	4b40      	ldr	r3, [pc, #256]	; (8001598 <main+0x378>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff fafe 	bl	8000a9c <__aeabi_dcmpgt>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d028      	beq.n	80014f8 <main+0x2d8>
					if(vonal_eredmeny_elso[poz-1] < VONAL_THRESHOLD) {
 80014a6:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80014aa:	3b01      	subs	r3, #1
 80014ac:	4a38      	ldr	r2, [pc, #224]	; (8001590 <main+0x370>)
 80014ae:	5cd3      	ldrb	r3, [r2, r3]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fff9 	bl	80004a8 <__aeabi_i2d>
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <main+0x378>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff fad0 	bl	8000a60 <__aeabi_dcmplt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d018      	beq.n	80014f8 <main+0x2d8>
						int i = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
						while(vonalak_elso[i] != '-') {
 80014cc:	e004      	b.n	80014d8 <main+0x2b8>
							i++;
 80014ce:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80014d2:	3301      	adds	r3, #1
 80014d4:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
						while(vonalak_elso[i] != '-') {
 80014d8:	4a2b      	ldr	r2, [pc, #172]	; (8001588 <main+0x368>)
 80014da:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b2d      	cmp	r3, #45	; 0x2d
 80014e4:	d1f3      	bne.n	80014ce <main+0x2ae>
						}
						vonalak_elso[i] = poz;
 80014e6:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80014ea:	b2d9      	uxtb	r1, r3
 80014ec:	4a26      	ldr	r2, [pc, #152]	; (8001588 <main+0x368>)
 80014ee:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80014f2:	4413      	add	r3, r2
 80014f4:	460a      	mov	r2, r1
 80014f6:	701a      	strb	r2, [r3, #0]
		for(int poz=1; poz < 33-1; poz++) {
 80014f8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80014fc:	3301      	adds	r3, #1
 80014fe:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001502:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001506:	2b1f      	cmp	r3, #31
 8001508:	ddad      	ble.n	8001466 <main+0x246>
					}
				}
			}
		}
		for(int poz=1; poz < 33-1; poz++) {
 800150a:	2301      	movs	r3, #1
 800150c:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8001510:	e05e      	b.n	80015d0 <main+0x3b0>
		// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
			if(vonal_eredmeny_hatso[poz] > VONAL_THRESHOLD) {
 8001512:	4a20      	ldr	r2, [pc, #128]	; (8001594 <main+0x374>)
 8001514:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001518:	4413      	add	r3, r2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ffc3 	bl	80004a8 <__aeabi_i2d>
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <main+0x378>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff fab8 	bl	8000a9c <__aeabi_dcmpgt>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d049      	beq.n	80015c6 <main+0x3a6>
				if(vonal_eredmeny_hatso[poz+1] > VONAL_THRESHOLD) {
 8001532:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001536:	3301      	adds	r3, #1
 8001538:	4a16      	ldr	r2, [pc, #88]	; (8001594 <main+0x374>)
 800153a:	5cd3      	ldrb	r3, [r2, r3]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ffb3 	bl	80004a8 <__aeabi_i2d>
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <main+0x378>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff faa8 	bl	8000a9c <__aeabi_dcmpgt>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d039      	beq.n	80015c6 <main+0x3a6>
					if(vonal_eredmeny_hatso[poz-1] < VONAL_THRESHOLD) {
 8001552:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001556:	3b01      	subs	r3, #1
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <main+0x374>)
 800155a:	5cd3      	ldrb	r3, [r2, r3]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ffa3 	bl	80004a8 <__aeabi_i2d>
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <main+0x378>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff fa7a 	bl	8000a60 <__aeabi_dcmplt>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d029      	beq.n	80015c6 <main+0x3a6>
						int i = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
						while(vonalak_hatso[i] != '-') {
 8001578:	e015      	b.n	80015a6 <main+0x386>
 800157a:	bf00      	nop
 800157c:	200005c0 	.word	0x200005c0
 8001580:	2000064c 	.word	0x2000064c
 8001584:	20000338 	.word	0x20000338
 8001588:	20000120 	.word	0x20000120
 800158c:	20000128 	.word	0x20000128
 8001590:	200001a4 	.word	0x200001a4
 8001594:	200001c8 	.word	0x200001c8
 8001598:	20000118 	.word	0x20000118
							i++;
 800159c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80015a0:	3301      	adds	r3, #1
 80015a2:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
						while(vonalak_hatso[i] != '-') {
 80015a6:	4a60      	ldr	r2, [pc, #384]	; (8001728 <main+0x508>)
 80015a8:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b2d      	cmp	r3, #45	; 0x2d
 80015b2:	d1f3      	bne.n	800159c <main+0x37c>
						}
						vonalak_hatso[i] = poz;
 80015b4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80015b8:	b2d9      	uxtb	r1, r3
 80015ba:	4a5b      	ldr	r2, [pc, #364]	; (8001728 <main+0x508>)
 80015bc:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80015c0:	4413      	add	r3, r2
 80015c2:	460a      	mov	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
		for(int poz=1; poz < 33-1; poz++) {
 80015c6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80015ca:	3301      	adds	r3, #1
 80015cc:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80015d0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80015d4:	2b1f      	cmp	r3, #31
 80015d6:	dd9c      	ble.n	8001512 <main+0x2f2>
					}
				}
			}
		}
		Kovetendo_vonal_valaszto(&vonal_kovetni_elso, &vonal_kovetni_hatso);
 80015d8:	4954      	ldr	r1, [pc, #336]	; (800172c <main+0x50c>)
 80015da:	4855      	ldr	r0, [pc, #340]	; (8001730 <main+0x510>)
 80015dc:	f001 fa72 	bl	8002ac4 <Kovetendo_vonal_valaszto>
		//uint8_t Test[] = "Hello World\r\n"; //Data to send
		/*int size = sizeof(minta1);
		HAL_UART_Transmit(&huart2, minta1, size, 100);// Sending in normal mode
		HAL_Delay(1000);*/

		VL53L1_WaitMeasurementDataReady( Dev );
 80015e0:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80015e4:	f009 fee8 	bl	800b3b8 <VL53L1_WaitMeasurementDataReady>
		VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 80015e8:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80015ec:	4619      	mov	r1, r3
 80015ee:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80015f2:	f00a f89d 	bl	800b730 <VL53L1_GetRangingMeasurementData>
		/*sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
				 ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
		HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );*/
		VL53L1_ClearInterruptAndStartMeasurement( Dev );
 80015f6:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80015fa:	f009 fec7 	bl	800b38c <VL53L1_ClearInterruptAndStartMeasurement>

		//Szervo
		if (btnEnable == 1) {
 80015fe:	4b4d      	ldr	r3, [pc, #308]	; (8001734 <main+0x514>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d17f      	bne.n	8001706 <main+0x4e6>
			if (szervoEnable == 1) {
 8001606:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <main+0x518>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d154      	bne.n	80016b8 <main+0x498>
				cel = (vonal_kovetni_elso) + 	(((vonal_kovetni_elso) - (vonal_kovetni_hatso))
 800160e:	4b48      	ldr	r3, [pc, #288]	; (8001730 <main+0x510>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff48 	bl	80004a8 <__aeabi_i2d>
 8001618:	4604      	mov	r4, r0
 800161a:	460d      	mov	r5, r1
 800161c:	4b44      	ldr	r3, [pc, #272]	; (8001730 <main+0x510>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b42      	ldr	r3, [pc, #264]	; (800172c <main+0x50c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1ad3      	subs	r3, r2, r3
														/ kormanyzas_agresszivitas);	//fel auto tavolsagra. ezt novelni kell (?) hogy agresszivabban kanyarodjon
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff3e 	bl	80004a8 <__aeabi_i2d>
 800162c:	4b43      	ldr	r3, [pc, #268]	; (800173c <main+0x51c>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7ff f8cd 	bl	80007d0 <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
				cel = (vonal_kovetni_elso) + 	(((vonal_kovetni_elso) - (vonal_kovetni_hatso))
 800163a:	4620      	mov	r0, r4
 800163c:	4629      	mov	r1, r5
 800163e:	f7fe fde7 	bl	8000210 <__adddf3>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fa31 	bl	8000ab0 <__aeabi_d2iz>
 800164e:	4603      	mov	r3, r0
 8001650:	4a3b      	ldr	r2, [pc, #236]	; (8001740 <main+0x520>)
 8001652:	6013      	str	r3, [r2, #0]
				if(cel < -30) {
 8001654:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <main+0x520>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f113 0f1e 	cmn.w	r3, #30
 800165c:	da08      	bge.n	8001670 <main+0x450>
					SERVO_MoveTo(SZERVO, 0);
 800165e:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8001744 <main+0x524>
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fd78 	bl	8001158 <SERVO_MoveTo>
					szervoTeszt = 0;
 8001668:	4b37      	ldr	r3, [pc, #220]	; (8001748 <main+0x528>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	e023      	b.n	80016b8 <main+0x498>
				}
				else if(30 < cel) {
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <main+0x520>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b1e      	cmp	r3, #30
 8001676:	dd08      	ble.n	800168a <main+0x46a>
					SERVO_MoveTo(SZERVO, 180);
 8001678:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800174c <main+0x52c>
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff fd6b 	bl	8001158 <SERVO_MoveTo>
					szervoTeszt = 180;
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <main+0x528>)
 8001684:	22b4      	movs	r2, #180	; 0xb4
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e016      	b.n	80016b8 <main+0x498>
				}
				else {
					SERVO_MoveTo(SZERVO, 90 + cel *3);
 800168a:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <main+0x520>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	335a      	adds	r3, #90	; 0x5a
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169e:	eeb0 0a67 	vmov.f32	s0, s15
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff fd58 	bl	8001158 <SERVO_MoveTo>
					szervoTeszt = 90 + cel *3;
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <main+0x520>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	335a      	adds	r3, #90	; 0x5a
 80016b4:	4a24      	ldr	r2, [pc, #144]	; (8001748 <main+0x528>)
 80016b6:	6013      	str	r3, [r2, #0]
					SERVO_MoveTo(SZERVO, 180);
					//motornak nagyon lassu megadas
				}*/
			}

			if (motvezEnable == 1) {
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <main+0x530>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	f47f ae98 	bne.w	80013f2 <main+0x1d2>
				int k = 100;		// 0 - 1023-ig
 80016c2:	2364      	movs	r3, #100	; 0x64
 80016c4:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
				if (k < motvez_d / 2) {
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <main+0x534>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	0fda      	lsrs	r2, r3, #31
 80016ce:	4413      	add	r3, r2
 80016d0:	105b      	asrs	r3, r3, #1
 80016d2:	461a      	mov	r2, r3
 80016d4:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80016d8:	4293      	cmp	r3, r2
 80016da:	f6bf ae8a 	bge.w	80013f2 <main+0x1d2>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, k); // ha pwm1 nagyobb, előremenet?
 80016de:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4619      	mov	r1, r3
 80016e6:	2000      	movs	r0, #0
 80016e8:	f00e fcfe 	bl	80100e8 <DC_MOTOR_Set_Speed>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - k);
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <main+0x534>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4619      	mov	r1, r3
 80016fe:	2001      	movs	r0, #1
 8001700:	f00e fcf2 	bl	80100e8 <DC_MOTOR_Set_Speed>
 8001704:	e675      	b.n	80013f2 <main+0x1d2>
				}
			}
		} else {
			SERVO_MoveTo(SZERVO, 90);
 8001706:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001758 <main+0x538>
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fd24 	bl	8001158 <SERVO_MoveTo>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_d);// elvileg ez a ketto a megallas
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <main+0x534>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	4619      	mov	r1, r3
 8001718:	2000      	movs	r0, #0
 800171a:	f00e fce5 	bl	80100e8 <DC_MOTOR_Set_Speed>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, 0);
 800171e:	2100      	movs	r1, #0
 8001720:	2001      	movs	r0, #1
 8001722:	f00e fce1 	bl	80100e8 <DC_MOTOR_Set_Speed>
		for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 8001726:	e664      	b.n	80013f2 <main+0x1d2>
 8001728:	20000128 	.word	0x20000128
 800172c:	200001f0 	.word	0x200001f0
 8001730:	200001ec 	.word	0x200001ec
 8001734:	20000000 	.word	0x20000000
 8001738:	20000001 	.word	0x20000001
 800173c:	20000138 	.word	0x20000138
 8001740:	200001f4 	.word	0x200001f4
 8001744:	00000000 	.word	0x00000000
 8001748:	20000130 	.word	0x20000130
 800174c:	43340000 	.word	0x43340000
 8001750:	200001a0 	.word	0x200001a0
 8001754:	20000140 	.word	0x20000140
 8001758:	42b40000 	.word	0x42b40000

0800175c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b094      	sub	sp, #80	; 0x50
 8001760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	2234      	movs	r2, #52	; 0x34
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f00e fd7a 	bl	8010264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <SystemClock_Config+0xdc>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	4a2b      	ldr	r2, [pc, #172]	; (8001838 <SystemClock_Config+0xdc>)
 800178a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178e:	6413      	str	r3, [r2, #64]	; 0x40
 8001790:	4b29      	ldr	r3, [pc, #164]	; (8001838 <SystemClock_Config+0xdc>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800179c:	2300      	movs	r3, #0
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <SystemClock_Config+0xe0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a25      	ldr	r2, [pc, #148]	; (800183c <SystemClock_Config+0xe0>)
 80017a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <SystemClock_Config+0xe0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c2:	2302      	movs	r3, #2
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017cc:	2304      	movs	r3, #4
 80017ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80017d0:	23b4      	movs	r3, #180	; 0xb4
 80017d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017d8:	2302      	movs	r3, #2
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017dc:	2302      	movs	r3, #2
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4618      	mov	r0, r3
 80017e6:	f004 fd2d 	bl	8006244 <HAL_RCC_OscConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017f0:	f001 f9a8 	bl	8002b44 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017f4:	f004 f94a 	bl	8005a8c <HAL_PWREx_EnableOverDrive>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017fe:	f001 f9a1 	bl	8002b44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001802:	230f      	movs	r3, #15
 8001804:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001806:	2302      	movs	r3, #2
 8001808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800180e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001814:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001818:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	2105      	movs	r1, #5
 8001820:	4618      	mov	r0, r3
 8001822:	f004 f983 	bl	8005b2c <HAL_RCC_ClockConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800182c:	f001 f98a 	bl	8002b44 <Error_Handler>
  }
}
 8001830:	bf00      	nop
 8001832:	3750      	adds	r7, #80	; 0x50
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000

08001840 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_I2C1_Init+0x50>)
 8001846:	4a13      	ldr	r2, [pc, #76]	; (8001894 <MX_I2C1_Init+0x54>)
 8001848:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_I2C1_Init+0x50>)
 800184c:	4a12      	ldr	r2, [pc, #72]	; (8001898 <MX_I2C1_Init+0x58>)
 800184e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_I2C1_Init+0x50>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_I2C1_Init+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_I2C1_Init+0x50>)
 800185e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001862:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <MX_I2C1_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_I2C1_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <MX_I2C1_Init+0x50>)
 800187e:	f003 f8e7 	bl	8004a50 <HAL_I2C_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001888:	f001 f95c 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000338 	.word	0x20000338
 8001894:	40005400 	.word	0x40005400
 8001898:	000186a0 	.word	0x000186a0

0800189c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_I2C2_Init+0x50>)
 80018a2:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <MX_I2C2_Init+0x54>)
 80018a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_I2C2_Init+0x50>)
 80018a8:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <MX_I2C2_Init+0x58>)
 80018aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_I2C2_Init+0x50>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_I2C2_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_I2C2_Init+0x50>)
 80018ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_I2C2_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_I2C2_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <MX_I2C2_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_I2C2_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_I2C2_Init+0x50>)
 80018da:	f003 f8b9 	bl	8004a50 <HAL_I2C_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018e4:	f001 f92e 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000038c 	.word	0x2000038c
 80018f0:	40005800 	.word	0x40005800
 80018f4:	000186a0 	.word	0x000186a0

080018f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C3_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_I2C3_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C3_Init+0x50>)
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_I2C3_Init+0x58>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C3_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_I2C3_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_I2C3_Init+0x50>)
 8001916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_I2C3_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_I2C3_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_I2C3_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_I2C3_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C3_Init+0x50>)
 8001936:	f003 f88b 	bl	8004a50 <HAL_I2C_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001940:	f001 f900 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200001fc 	.word	0x200001fc
 800194c:	40005c00 	.word	0x40005c00
 8001950:	000186a0 	.word	0x000186a0

08001954 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_SPI1_Init+0x64>)
 800195a:	4a18      	ldr	r2, [pc, #96]	; (80019bc <MX_SPI1_Init+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_SPI1_Init+0x64>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_SPI1_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001984:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001988:	2220      	movs	r2, #32
 800198a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <MX_SPI1_Init+0x64>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <MX_SPI1_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_SPI1_Init+0x64>)
 80019a0:	220a      	movs	r2, #10
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <MX_SPI1_Init+0x64>)
 80019a6:	f004 ffab 	bl	8006900 <HAL_SPI_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019b0:	f001 f8c8 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000568 	.word	0x20000568
 80019bc:	40013000 	.word	0x40013000

080019c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_SPI2_Init+0x64>)
 80019c6:	4a18      	ldr	r2, [pc, #96]	; (8001a28 <MX_SPI2_Init+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <MX_SPI2_Init+0x64>)
 80019cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_SPI2_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_SPI2_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_SPI2_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_SPI2_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_SPI2_Init+0x64>)
 80019ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_SPI2_Init+0x64>)
 80019f4:	2218      	movs	r2, #24
 80019f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <MX_SPI2_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_SPI2_Init+0x64>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <MX_SPI2_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_SPI2_Init+0x64>)
 8001a0c:	220a      	movs	r2, #10
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a10:	4804      	ldr	r0, [pc, #16]	; (8001a24 <MX_SPI2_Init+0x64>)
 8001a12:	f004 ff75 	bl	8006900 <HAL_SPI_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a1c:	f001 f892 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000250 	.word	0x20000250
 8001a28:	40003800 	.word	0x40003800

08001a2c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <MX_SPI3_Init+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a58:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a5c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a78:	220a      	movs	r2, #10
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_SPI3_Init+0x64>)
 8001a7e:	f004 ff3f 	bl	8006900 <HAL_SPI_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001a88:	f001 f85c 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000428 	.word	0x20000428
 8001a94:	40003c00 	.word	0x40003c00

08001a98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <MX_TIM2_Init+0x98>)
 8001ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001abc:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_TIM2_Init+0x98>)
 8001abe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001ac2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_TIM2_Init+0x98>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_TIM2_Init+0x98>)
 8001acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ad0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_TIM2_Init+0x98>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_TIM2_Init+0x98>)
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ade:	4814      	ldr	r0, [pc, #80]	; (8001b30 <MX_TIM2_Init+0x98>)
 8001ae0:	f005 fdde 	bl	80076a0 <HAL_TIM_Base_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001aea:	f001 f82b 	bl	8002b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	4619      	mov	r1, r3
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_TIM2_Init+0x98>)
 8001afc:	f006 fe86 	bl	800880c <HAL_TIM_ConfigClockSource>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b06:	f001 f81d 	bl	8002b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b12:	463b      	mov	r3, r7
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <MX_TIM2_Init+0x98>)
 8001b18:	f007 fe18 	bl	800974c <HAL_TIMEx_MasterConfigSynchronization>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b22:	f001 f80f 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200005c0 	.word	0x200005c0

08001b34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3a:	f107 0320 	add.w	r3, r7, #32
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]
 8001b52:	615a      	str	r2, [r3, #20]
 8001b54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <MX_TIM3_Init+0xac>)
 8001b58:	4a22      	ldr	r2, [pc, #136]	; (8001be4 <MX_TIM3_Init+0xb0>)
 8001b5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <MX_TIM3_Init+0xac>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <MX_TIM3_Init+0xac>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <MX_TIM3_Init+0xac>)
 8001b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <MX_TIM3_Init+0xac>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_TIM3_Init+0xac>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b7c:	4818      	ldr	r0, [pc, #96]	; (8001be0 <MX_TIM3_Init+0xac>)
 8001b7e:	f005 ff45 	bl	8007a0c <HAL_TIM_PWM_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b88:	f000 ffdc 	bl	8002b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b94:	f107 0320 	add.w	r3, r7, #32
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4811      	ldr	r0, [pc, #68]	; (8001be0 <MX_TIM3_Init+0xac>)
 8001b9c:	f007 fdd6 	bl	800974c <HAL_TIMEx_MasterConfigSynchronization>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001ba6:	f000 ffcd 	bl	8002b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001baa:	2360      	movs	r3, #96	; 0x60
 8001bac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4807      	ldr	r0, [pc, #28]	; (8001be0 <MX_TIM3_Init+0xac>)
 8001bc2:	f006 fc4b 	bl	800845c <HAL_TIM_PWM_ConfigChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001bcc:	f000 ffba 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <MX_TIM3_Init+0xac>)
 8001bd2:	f001 fb07 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200003e0 	.word	0x200003e0
 8001be4:	40000400 	.word	0x40000400

08001be8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	2224      	movs	r2, #36	; 0x24
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f00e fb34 	bl	8010264 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <MX_TIM4_Init+0xa0>)
 8001c06:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <MX_TIM4_Init+0xa4>)
 8001c08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <MX_TIM4_Init+0xa0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <MX_TIM4_Init+0xa0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <MX_TIM4_Init+0xa0>)
 8001c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <MX_TIM4_Init+0xa0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <MX_TIM4_Init+0xa0>)
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c42:	2301      	movs	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4619      	mov	r1, r3
 8001c54:	480c      	ldr	r0, [pc, #48]	; (8001c88 <MX_TIM4_Init+0xa0>)
 8001c56:	f006 f951 	bl	8007efc <HAL_TIM_Encoder_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c60:	f000 ff70 	bl	8002b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_TIM4_Init+0xa0>)
 8001c72:	f007 fd6b 	bl	800974c <HAL_TIMEx_MasterConfigSynchronization>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c7c:	f000 ff62 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	3730      	adds	r7, #48	; 0x30
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200002f0 	.word	0x200002f0
 8001c8c:	40000800 	.word	0x40000800

08001c90 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b096      	sub	sp, #88	; 0x58
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	615a      	str	r2, [r3, #20]
 8001cc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f00e facb 	bl	8010264 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cce:	4b44      	ldr	r3, [pc, #272]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001cd0:	4a44      	ldr	r2, [pc, #272]	; (8001de4 <MX_TIM8_Init+0x154>)
 8001cd2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001cd4:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001cda:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001cdc:	2260      	movs	r2, #96	; 0x60
 8001cde:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ce6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce8:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001cee:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001cfa:	4839      	ldr	r0, [pc, #228]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001cfc:	f005 fcd0 	bl	80076a0 <HAL_TIM_Base_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001d06:	f000 ff1d 	bl	8002b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d14:	4619      	mov	r1, r3
 8001d16:	4832      	ldr	r0, [pc, #200]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001d18:	f006 fd78 	bl	800880c <HAL_TIM_ConfigClockSource>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001d22:	f000 ff0f 	bl	8002b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d26:	482e      	ldr	r0, [pc, #184]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001d28:	f005 fe70 	bl	8007a0c <HAL_TIM_PWM_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001d32:	f000 ff07 	bl	8002b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d42:	4619      	mov	r1, r3
 8001d44:	4826      	ldr	r0, [pc, #152]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001d46:	f007 fd01 	bl	800974c <HAL_TIMEx_MasterConfigSynchronization>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001d50:	f000 fef8 	bl	8002b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d54:	2360      	movs	r3, #96	; 0x60
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d60:	2300      	movs	r3, #0
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d74:	2204      	movs	r2, #4
 8001d76:	4619      	mov	r1, r3
 8001d78:	4819      	ldr	r0, [pc, #100]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001d7a:	f006 fb6f 	bl	800845c <HAL_TIM_PWM_ConfigChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d84:	f000 fede 	bl	8002b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4813      	ldr	r0, [pc, #76]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001d92:	f006 fb63 	bl	800845c <HAL_TIM_PWM_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001d9c:	f000 fed2 	bl	8002b44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4807      	ldr	r0, [pc, #28]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001dc4:	f007 fda0 	bl	8009908 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001dce:	f000 feb9 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

	//Itt kell megivni a DC_MOTOR_Init() -et
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001dd2:	4803      	ldr	r0, [pc, #12]	; (8001de0 <MX_TIM8_Init+0x150>)
 8001dd4:	f001 fa06 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8001dd8:	bf00      	nop
 8001dda:	3758      	adds	r7, #88	; 0x58
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200002a8 	.word	0x200002a8
 8001de4:	40010400 	.word	0x40010400

08001de8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08c      	sub	sp, #48	; 0x30
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	611a      	str	r2, [r3, #16]
 8001e0a:	615a      	str	r2, [r3, #20]
 8001e0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001e10:	4a2c      	ldr	r2, [pc, #176]	; (8001ec4 <MX_TIM12_Init+0xdc>)
 8001e12:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8001e14:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001e16:	2213      	movs	r2, #19
 8001e18:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001e22:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001e26:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001e34:	4822      	ldr	r0, [pc, #136]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001e36:	f005 fc33 	bl	80076a0 <HAL_TIM_Base_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001e40:	f000 fe80 	bl	8002b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001e4a:	f107 0320 	add.w	r3, r7, #32
 8001e4e:	4619      	mov	r1, r3
 8001e50:	481b      	ldr	r0, [pc, #108]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001e52:	f006 fcdb 	bl	800880c <HAL_TIM_ConfigClockSource>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001e5c:	f000 fe72 	bl	8002b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e60:	4817      	ldr	r0, [pc, #92]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001e62:	f005 fdd3 	bl	8007a0c <HAL_TIM_PWM_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001e6c:	f000 fe6a 	bl	8002b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e70:	2360      	movs	r3, #96	; 0x60
 8001e72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	4619      	mov	r1, r3
 8001e86:	480e      	ldr	r0, [pc, #56]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001e88:	f006 fae8 	bl	800845c <HAL_TIM_PWM_ConfigChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001e92:	f000 fe57 	bl	8002b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	2204      	movs	r2, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4808      	ldr	r0, [pc, #32]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001e9e:	f006 fadd 	bl	800845c <HAL_TIM_PWM_ConfigChannel>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001ea8:	f000 fe4c 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	HAL_TIM_Base_Start_IT(&htim12);
 8001eac:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001eae:	f005 fce7 	bl	8007880 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001eb2:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <MX_TIM12_Init+0xd8>)
 8001eb4:	f001 f996 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8001eb8:	bf00      	nop
 8001eba:	3730      	adds	r7, #48	; 0x30
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2000064c 	.word	0x2000064c
 8001ec4:	40001800 	.word	0x40001800

08001ec8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <MX_UART4_Init+0x4c>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <MX_UART4_Init+0x50>)
 8001ed0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <MX_UART4_Init+0x4c>)
 8001ed4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ed8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <MX_UART4_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <MX_UART4_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <MX_UART4_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <MX_UART4_Init+0x4c>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <MX_UART4_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <MX_UART4_Init+0x4c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_UART4_Init+0x4c>)
 8001f00:	f007 fde2 	bl	8009ac8 <HAL_UART_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001f0a:	f000 fe1b 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000524 	.word	0x20000524
 8001f18:	40004c00 	.word	0x40004c00

08001f1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <MX_USART1_UART_Init+0x50>)
 8001f24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f42:	2204      	movs	r2, #4
 8001f44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_USART1_UART_Init+0x4c>)
 8001f54:	f007 fdb8 	bl	8009ac8 <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f5e:	f000 fdf1 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200004e0 	.word	0x200004e0
 8001f6c:	40011000 	.word	0x40011000

08001f70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <MX_USART2_UART_Init+0x50>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f96:	220c      	movs	r2, #12
 8001f98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001fa8:	f007 fd8e 	bl	8009ac8 <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fb2:	f000 fdc7 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000608 	.word	0x20000608
 8001fc0:	40004400 	.word	0x40004400

08001fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_DMA_Init+0x3c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <MX_DMA_Init+0x3c>)
 8001fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_DMA_Init+0x3c>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2010      	movs	r0, #16
 8001fec:	f001 fc88 	bl	8003900 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ff0:	2010      	movs	r0, #16
 8001ff2:	f001 fcb1 	bl	8003958 <HAL_NVIC_EnableIRQ>

}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800

08002004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	4b59      	ldr	r3, [pc, #356]	; (8002184 <MX_GPIO_Init+0x180>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a58      	ldr	r2, [pc, #352]	; (8002184 <MX_GPIO_Init+0x180>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b56      	ldr	r3, [pc, #344]	; (8002184 <MX_GPIO_Init+0x180>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b52      	ldr	r3, [pc, #328]	; (8002184 <MX_GPIO_Init+0x180>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a51      	ldr	r2, [pc, #324]	; (8002184 <MX_GPIO_Init+0x180>)
 8002040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b4f      	ldr	r3, [pc, #316]	; (8002184 <MX_GPIO_Init+0x180>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	4b4b      	ldr	r3, [pc, #300]	; (8002184 <MX_GPIO_Init+0x180>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a4a      	ldr	r2, [pc, #296]	; (8002184 <MX_GPIO_Init+0x180>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b48      	ldr	r3, [pc, #288]	; (8002184 <MX_GPIO_Init+0x180>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	4b44      	ldr	r3, [pc, #272]	; (8002184 <MX_GPIO_Init+0x180>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a43      	ldr	r2, [pc, #268]	; (8002184 <MX_GPIO_Init+0x180>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <MX_GPIO_Init+0x180>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <MX_GPIO_Init+0x180>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a3c      	ldr	r2, [pc, #240]	; (8002184 <MX_GPIO_Init+0x180>)
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <MX_GPIO_Init+0x180>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80020a6:	2200      	movs	r2, #0
 80020a8:	213d      	movs	r1, #61	; 0x3d
 80020aa:	4837      	ldr	r0, [pc, #220]	; (8002188 <MX_GPIO_Init+0x184>)
 80020ac:	f002 fc86 	bl	80049bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80020b0:	2200      	movs	r2, #0
 80020b2:	f641 0102 	movw	r1, #6146	; 0x1802
 80020b6:	4835      	ldr	r0, [pc, #212]	; (800218c <MX_GPIO_Init+0x188>)
 80020b8:	f002 fc80 	bl	80049bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	f241 0126 	movw	r1, #4134	; 0x1026
 80020c2:	4833      	ldr	r0, [pc, #204]	; (8002190 <MX_GPIO_Init+0x18c>)
 80020c4:	f002 fc7a 	bl	80049bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	482a      	ldr	r0, [pc, #168]	; (8002188 <MX_GPIO_Init+0x184>)
 80020e0:	f002 f948 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80020e4:	233d      	movs	r3, #61	; 0x3d
 80020e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	4823      	ldr	r0, [pc, #140]	; (8002188 <MX_GPIO_Init+0x184>)
 80020fc:	f002 f93a 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002100:	f641 0302 	movw	r3, #6146	; 0x1802
 8002104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002106:	2301      	movs	r3, #1
 8002108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	481c      	ldr	r0, [pc, #112]	; (800218c <MX_GPIO_Init+0x188>)
 800211a:	f002 f92b 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800211e:	2310      	movs	r3, #16
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	4619      	mov	r1, r3
 8002130:	4816      	ldr	r0, [pc, #88]	; (800218c <MX_GPIO_Init+0x188>)
 8002132:	f002 f91f 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 8002136:	f241 0326 	movw	r3, #4134	; 0x1026
 800213a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213c:	2301      	movs	r3, #1
 800213e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	4810      	ldr	r0, [pc, #64]	; (8002190 <MX_GPIO_Init+0x18c>)
 8002150:	f002 f910 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002154:	2304      	movs	r3, #4
 8002156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4619      	mov	r1, r3
 8002166:	480b      	ldr	r0, [pc, #44]	; (8002194 <MX_GPIO_Init+0x190>)
 8002168:	f002 f904 	bl	8004374 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 800216c:	2201      	movs	r2, #1
 800216e:	2100      	movs	r1, #0
 8002170:	2028      	movs	r0, #40	; 0x28
 8002172:	f001 fbc5 	bl	8003900 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002176:	2028      	movs	r0, #40	; 0x28
 8002178:	f001 fbee 	bl	8003958 <HAL_NVIC_EnableIRQ>

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	; 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40023800 	.word	0x40023800
 8002188:	40020800 	.word	0x40020800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020c00 	.word	0x40020c00

08002198 <Vonalszenzor_Init>:

/* USER CODE BEGIN 4 */
static void Vonalszenzor_Init(void) {
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);	// PCB2: Von_OE1  0
 800219c:	2200      	movs	r2, #0
 800219e:	2104      	movs	r1, #4
 80021a0:	4804      	ldr	r0, [pc, #16]	; (80021b4 <Vonalszenzor_Init+0x1c>)
 80021a2:	f002 fc0b 	bl	80049bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	// PCB2: Von_OE2  0
 80021a6:	2200      	movs	r2, #0
 80021a8:	2120      	movs	r1, #32
 80021aa:	4803      	ldr	r0, [pc, #12]	; (80021b8 <Vonalszenzor_Init+0x20>)
 80021ac:	f002 fc06 	bl	80049bc <HAL_GPIO_WritePin>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40020800 	.word	0x40020800

080021bc <Vonalszenzor_operal>:

static void Vonalszenzor_operal(uint8_t* teljes_kiolvasott_elso, uint8_t* teljes_kiolvasott_hatso) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80021c6:	48be      	ldr	r0, [pc, #760]	; (80024c0 <Vonalszenzor_operal+0x304>)
 80021c8:	f000 fc36 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	uint8_t eredmeny_16bit_temp[2] = {0b1110000, 0b00000000};
 80021cc:	2370      	movs	r3, #112	; 0x70
 80021ce:	81bb      	strh	r3, [r7, #12]
	//elso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1e);
 80021d0:	48bc      	ldr	r0, [pc, #752]	; (80024c4 <Vonalszenzor_operal+0x308>)
 80021d2:	f000 fc31 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80021d6:	4bbc      	ldr	r3, [pc, #752]	; (80024c8 <Vonalszenzor_operal+0x30c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	f107 020c 	add.w	r2, r7, #12
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fc51 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[1] = (uint8_t) eredmeny_16bit_temp[0];
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3301      	adds	r3, #1
 80021ea:	7b3a      	ldrb	r2, [r7, #12]
 80021ec:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80021ee:	4bb7      	ldr	r3, [pc, #732]	; (80024cc <Vonalszenzor_operal+0x310>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	f107 020c 	add.w	r2, r7, #12
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fc45 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[5] = (uint8_t) eredmeny_16bit_temp[0];
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3305      	adds	r3, #5
 8002202:	7b3a      	ldrb	r2, [r7, #12]
 8002204:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002206:	48ae      	ldr	r0, [pc, #696]	; (80024c0 <Vonalszenzor_operal+0x304>)
 8002208:	f000 fc16 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2e);
 800220c:	48b0      	ldr	r0, [pc, #704]	; (80024d0 <Vonalszenzor_operal+0x314>)
 800220e:	f000 fc13 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002212:	4bad      	ldr	r3, [pc, #692]	; (80024c8 <Vonalszenzor_operal+0x30c>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	f107 020c 	add.w	r2, r7, #12
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fc33 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[9] = (uint8_t) eredmeny_16bit_temp[0];
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3309      	adds	r3, #9
 8002226:	7b3a      	ldrb	r2, [r7, #12]
 8002228:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800222a:	4ba8      	ldr	r3, [pc, #672]	; (80024cc <Vonalszenzor_operal+0x310>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	f107 020c 	add.w	r2, r7, #12
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fc27 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[13] = (uint8_t) eredmeny_16bit_temp[0];
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	330d      	adds	r3, #13
 800223e:	7b3a      	ldrb	r2, [r7, #12]
 8002240:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002242:	489f      	ldr	r0, [pc, #636]	; (80024c0 <Vonalszenzor_operal+0x304>)
 8002244:	f000 fbf8 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3e);
 8002248:	48a2      	ldr	r0, [pc, #648]	; (80024d4 <Vonalszenzor_operal+0x318>)
 800224a:	f000 fbf5 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800224e:	4b9e      	ldr	r3, [pc, #632]	; (80024c8 <Vonalszenzor_operal+0x30c>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	f107 020c 	add.w	r2, r7, #12
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fc15 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[17] = (uint8_t) eredmeny_16bit_temp[0];
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3311      	adds	r3, #17
 8002262:	7b3a      	ldrb	r2, [r7, #12]
 8002264:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002266:	4b99      	ldr	r3, [pc, #612]	; (80024cc <Vonalszenzor_operal+0x310>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	f107 020c 	add.w	r2, r7, #12
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fc09 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[21] = (uint8_t) eredmeny_16bit_temp[0];
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3315      	adds	r3, #21
 800227a:	7b3a      	ldrb	r2, [r7, #12]
 800227c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800227e:	4890      	ldr	r0, [pc, #576]	; (80024c0 <Vonalszenzor_operal+0x304>)
 8002280:	f000 fbda 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4e);
 8002284:	4894      	ldr	r0, [pc, #592]	; (80024d8 <Vonalszenzor_operal+0x31c>)
 8002286:	f000 fbd7 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800228a:	4b8f      	ldr	r3, [pc, #572]	; (80024c8 <Vonalszenzor_operal+0x30c>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f107 020c 	add.w	r2, r7, #12
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fbf7 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[25] = (uint8_t) eredmeny_16bit_temp[0];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3319      	adds	r3, #25
 800229e:	7b3a      	ldrb	r2, [r7, #12]
 80022a0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80022a2:	4b8a      	ldr	r3, [pc, #552]	; (80024cc <Vonalszenzor_operal+0x310>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	f107 020c 	add.w	r2, r7, #12
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fbeb 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[29] = (uint8_t) eredmeny_16bit_temp[0];
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	331d      	adds	r3, #29
 80022b6:	7b3a      	ldrb	r2, [r7, #12]
 80022b8:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80022ba:	4881      	ldr	r0, [pc, #516]	; (80024c0 <Vonalszenzor_operal+0x304>)
 80022bc:	f000 fbbc 	bl	8002a38 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1e);
 80022c0:	4886      	ldr	r0, [pc, #536]	; (80024dc <Vonalszenzor_operal+0x320>)
 80022c2:	f000 fbb9 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80022c6:	4b86      	ldr	r3, [pc, #536]	; (80024e0 <Vonalszenzor_operal+0x324>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f107 020c 	add.w	r2, r7, #12
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fbd9 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[2] = (uint8_t) eredmeny_16bit_temp[0];
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3302      	adds	r3, #2
 80022da:	7b3a      	ldrb	r2, [r7, #12]
 80022dc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80022de:	4b81      	ldr	r3, [pc, #516]	; (80024e4 <Vonalszenzor_operal+0x328>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	f107 020c 	add.w	r2, r7, #12
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fbcd 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[6] = (uint8_t) eredmeny_16bit_temp[0];
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3306      	adds	r3, #6
 80022f2:	7b3a      	ldrb	r2, [r7, #12]
 80022f4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80022f6:	4872      	ldr	r0, [pc, #456]	; (80024c0 <Vonalszenzor_operal+0x304>)
 80022f8:	f000 fb9e 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2e);
 80022fc:	487a      	ldr	r0, [pc, #488]	; (80024e8 <Vonalszenzor_operal+0x32c>)
 80022fe:	f000 fb9b 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002302:	4b77      	ldr	r3, [pc, #476]	; (80024e0 <Vonalszenzor_operal+0x324>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	f107 020c 	add.w	r2, r7, #12
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fbbb 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[10] = (uint8_t) eredmeny_16bit_temp[0];
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	330a      	adds	r3, #10
 8002316:	7b3a      	ldrb	r2, [r7, #12]
 8002318:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800231a:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <Vonalszenzor_operal+0x328>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	f107 020c 	add.w	r2, r7, #12
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fbaf 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[14] = (uint8_t) eredmeny_16bit_temp[0];
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	330e      	adds	r3, #14
 800232e:	7b3a      	ldrb	r2, [r7, #12]
 8002330:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002332:	4863      	ldr	r0, [pc, #396]	; (80024c0 <Vonalszenzor_operal+0x304>)
 8002334:	f000 fb80 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3e);
 8002338:	486c      	ldr	r0, [pc, #432]	; (80024ec <Vonalszenzor_operal+0x330>)
 800233a:	f000 fb7d 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800233e:	4b68      	ldr	r3, [pc, #416]	; (80024e0 <Vonalszenzor_operal+0x324>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	f107 020c 	add.w	r2, r7, #12
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fb9d 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[18] = (uint8_t) eredmeny_16bit_temp[0];
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3312      	adds	r3, #18
 8002352:	7b3a      	ldrb	r2, [r7, #12]
 8002354:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <Vonalszenzor_operal+0x328>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	f107 020c 	add.w	r2, r7, #12
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fb91 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[22] = (uint8_t) eredmeny_16bit_temp[0];
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3316      	adds	r3, #22
 800236a:	7b3a      	ldrb	r2, [r7, #12]
 800236c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800236e:	4854      	ldr	r0, [pc, #336]	; (80024c0 <Vonalszenzor_operal+0x304>)
 8002370:	f000 fb62 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4e);
 8002374:	485e      	ldr	r0, [pc, #376]	; (80024f0 <Vonalszenzor_operal+0x334>)
 8002376:	f000 fb5f 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800237a:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <Vonalszenzor_operal+0x324>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	f107 020c 	add.w	r2, r7, #12
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fb7f 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[26] = (uint8_t) eredmeny_16bit_temp[0];
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	331a      	adds	r3, #26
 800238e:	7b3a      	ldrb	r2, [r7, #12]
 8002390:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002392:	4b54      	ldr	r3, [pc, #336]	; (80024e4 <Vonalszenzor_operal+0x328>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	f107 020c 	add.w	r2, r7, #12
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fb73 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[30] = (uint8_t) eredmeny_16bit_temp[0];
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	331e      	adds	r3, #30
 80023a6:	7b3a      	ldrb	r2, [r7, #12]
 80023a8:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80023aa:	4845      	ldr	r0, [pc, #276]	; (80024c0 <Vonalszenzor_operal+0x304>)
 80023ac:	f000 fb44 	bl	8002a38 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1e);
 80023b0:	4850      	ldr	r0, [pc, #320]	; (80024f4 <Vonalszenzor_operal+0x338>)
 80023b2:	f000 fb41 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80023b6:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <Vonalszenzor_operal+0x33c>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	f107 020c 	add.w	r2, r7, #12
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fb61 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[3] = (uint8_t) eredmeny_16bit_temp[0];
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3303      	adds	r3, #3
 80023ca:	7b3a      	ldrb	r2, [r7, #12]
 80023cc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80023ce:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <Vonalszenzor_operal+0x340>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	f107 020c 	add.w	r2, r7, #12
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fb55 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[7] = (uint8_t) eredmeny_16bit_temp[0];
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3307      	adds	r3, #7
 80023e2:	7b3a      	ldrb	r2, [r7, #12]
 80023e4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023e6:	4836      	ldr	r0, [pc, #216]	; (80024c0 <Vonalszenzor_operal+0x304>)
 80023e8:	f000 fb26 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2e);
 80023ec:	4844      	ldr	r0, [pc, #272]	; (8002500 <Vonalszenzor_operal+0x344>)
 80023ee:	f000 fb23 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <Vonalszenzor_operal+0x33c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	f107 020c 	add.w	r2, r7, #12
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fb43 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[11] = (uint8_t) eredmeny_16bit_temp[0];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	330b      	adds	r3, #11
 8002406:	7b3a      	ldrb	r2, [r7, #12]
 8002408:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800240a:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <Vonalszenzor_operal+0x340>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	f107 020c 	add.w	r2, r7, #12
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fb37 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[15] = (uint8_t) eredmeny_16bit_temp[0];
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	330f      	adds	r3, #15
 800241e:	7b3a      	ldrb	r2, [r7, #12]
 8002420:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002422:	4827      	ldr	r0, [pc, #156]	; (80024c0 <Vonalszenzor_operal+0x304>)
 8002424:	f000 fb08 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3e);
 8002428:	4836      	ldr	r0, [pc, #216]	; (8002504 <Vonalszenzor_operal+0x348>)
 800242a:	f000 fb05 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800242e:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <Vonalszenzor_operal+0x33c>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f107 020c 	add.w	r2, r7, #12
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fb25 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[19] = (uint8_t) eredmeny_16bit_temp[0];
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3313      	adds	r3, #19
 8002442:	7b3a      	ldrb	r2, [r7, #12]
 8002444:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <Vonalszenzor_operal+0x340>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	f107 020c 	add.w	r2, r7, #12
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fb19 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[23] = (uint8_t) eredmeny_16bit_temp[0];
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3317      	adds	r3, #23
 800245a:	7b3a      	ldrb	r2, [r7, #12]
 800245c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800245e:	4818      	ldr	r0, [pc, #96]	; (80024c0 <Vonalszenzor_operal+0x304>)
 8002460:	f000 faea 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4e);
 8002464:	4828      	ldr	r0, [pc, #160]	; (8002508 <Vonalszenzor_operal+0x34c>)
 8002466:	f000 fae7 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <Vonalszenzor_operal+0x33c>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	f107 020c 	add.w	r2, r7, #12
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fb07 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[27] = (uint8_t) eredmeny_16bit_temp[0];
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	331b      	adds	r3, #27
 800247e:	7b3a      	ldrb	r2, [r7, #12]
 8002480:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <Vonalszenzor_operal+0x340>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	f107 020c 	add.w	r2, r7, #12
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fafb 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[31] = (uint8_t) eredmeny_16bit_temp[0];
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	331f      	adds	r3, #31
 8002496:	7b3a      	ldrb	r2, [r7, #12]
 8002498:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800249a:	4809      	ldr	r0, [pc, #36]	; (80024c0 <Vonalszenzor_operal+0x304>)
 800249c:	f000 facc 	bl	8002a38 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1e);
 80024a0:	481a      	ldr	r0, [pc, #104]	; (800250c <Vonalszenzor_operal+0x350>)
 80024a2:	f000 fac9 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <Vonalszenzor_operal+0x354>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	f107 020c 	add.w	r2, r7, #12
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fae9 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[4] = (uint8_t) eredmeny_16bit_temp[0];
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3304      	adds	r3, #4
 80024ba:	7b3a      	ldrb	r2, [r7, #12]
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e029      	b.n	8002514 <Vonalszenzor_operal+0x358>
 80024c0:	20000004 	.word	0x20000004
 80024c4:	20000084 	.word	0x20000084
 80024c8:	200001a1 	.word	0x200001a1
 80024cc:	2000010d 	.word	0x2000010d
 80024d0:	2000007c 	.word	0x2000007c
 80024d4:	20000074 	.word	0x20000074
 80024d8:	2000006c 	.word	0x2000006c
 80024dc:	20000064 	.word	0x20000064
 80024e0:	2000010a 	.word	0x2000010a
 80024e4:	2000010e 	.word	0x2000010e
 80024e8:	2000005c 	.word	0x2000005c
 80024ec:	20000054 	.word	0x20000054
 80024f0:	2000004c 	.word	0x2000004c
 80024f4:	20000044 	.word	0x20000044
 80024f8:	2000010b 	.word	0x2000010b
 80024fc:	2000010f 	.word	0x2000010f
 8002500:	2000003c 	.word	0x2000003c
 8002504:	20000034 	.word	0x20000034
 8002508:	2000002c 	.word	0x2000002c
 800250c:	20000024 	.word	0x20000024
 8002510:	2000010c 	.word	0x2000010c
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002514:	4bbe      	ldr	r3, [pc, #760]	; (8002810 <Vonalszenzor_operal+0x654>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f107 020c 	add.w	r2, r7, #12
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fab2 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[8] = (uint8_t) eredmeny_16bit_temp[0];
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3308      	adds	r3, #8
 8002528:	7b3a      	ldrb	r2, [r7, #12]
 800252a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800252c:	48b9      	ldr	r0, [pc, #740]	; (8002814 <Vonalszenzor_operal+0x658>)
 800252e:	f000 fa83 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2e);
 8002532:	48b9      	ldr	r0, [pc, #740]	; (8002818 <Vonalszenzor_operal+0x65c>)
 8002534:	f000 fa80 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002538:	4bb8      	ldr	r3, [pc, #736]	; (800281c <Vonalszenzor_operal+0x660>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f107 020c 	add.w	r2, r7, #12
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f000 faa0 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[12] = (uint8_t) eredmeny_16bit_temp[0];
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	330c      	adds	r3, #12
 800254c:	7b3a      	ldrb	r2, [r7, #12]
 800254e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002550:	4baf      	ldr	r3, [pc, #700]	; (8002810 <Vonalszenzor_operal+0x654>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f107 020c 	add.w	r2, r7, #12
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fa94 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[16] = (uint8_t) eredmeny_16bit_temp[0];
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3310      	adds	r3, #16
 8002564:	7b3a      	ldrb	r2, [r7, #12]
 8002566:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002568:	48aa      	ldr	r0, [pc, #680]	; (8002814 <Vonalszenzor_operal+0x658>)
 800256a:	f000 fa65 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3e);
 800256e:	48ac      	ldr	r0, [pc, #688]	; (8002820 <Vonalszenzor_operal+0x664>)
 8002570:	f000 fa62 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002574:	4ba9      	ldr	r3, [pc, #676]	; (800281c <Vonalszenzor_operal+0x660>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	f107 020c 	add.w	r2, r7, #12
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fa82 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[20] = (uint8_t) eredmeny_16bit_temp[0];
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3314      	adds	r3, #20
 8002588:	7b3a      	ldrb	r2, [r7, #12]
 800258a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800258c:	4ba0      	ldr	r3, [pc, #640]	; (8002810 <Vonalszenzor_operal+0x654>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	f107 020c 	add.w	r2, r7, #12
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fa76 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[24] = (uint8_t) eredmeny_16bit_temp[0];
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3318      	adds	r3, #24
 80025a0:	7b3a      	ldrb	r2, [r7, #12]
 80025a2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80025a4:	489b      	ldr	r0, [pc, #620]	; (8002814 <Vonalszenzor_operal+0x658>)
 80025a6:	f000 fa47 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4e);
 80025aa:	489e      	ldr	r0, [pc, #632]	; (8002824 <Vonalszenzor_operal+0x668>)
 80025ac:	f000 fa44 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80025b0:	4b9a      	ldr	r3, [pc, #616]	; (800281c <Vonalszenzor_operal+0x660>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fa64 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[28] = (uint8_t) eredmeny_16bit_temp[0];
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	331c      	adds	r3, #28
 80025c4:	7b3a      	ldrb	r2, [r7, #12]
 80025c6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80025c8:	4b91      	ldr	r3, [pc, #580]	; (8002810 <Vonalszenzor_operal+0x654>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	f107 020c 	add.w	r2, r7, #12
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fa58 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[32] = (uint8_t) eredmeny_16bit_temp[0];
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3320      	adds	r3, #32
 80025dc:	7b3a      	ldrb	r2, [r7, #12]
 80025de:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80025e0:	488c      	ldr	r0, [pc, #560]	; (8002814 <Vonalszenzor_operal+0x658>)
 80025e2:	f000 fa29 	bl	8002a38 <Vonalszenzor_minta_kuldes>

	//hatso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1h);
 80025e6:	4890      	ldr	r0, [pc, #576]	; (8002828 <Vonalszenzor_operal+0x66c>)
 80025e8:	f000 fa26 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80025ec:	4b8f      	ldr	r3, [pc, #572]	; (800282c <Vonalszenzor_operal+0x670>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f107 020c 	add.w	r2, r7, #12
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fa46 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[1] = (uint8_t) eredmeny_16bit_temp[0];
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	7b3a      	ldrb	r2, [r7, #12]
 8002602:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002604:	4b8a      	ldr	r3, [pc, #552]	; (8002830 <Vonalszenzor_operal+0x674>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	f107 020c 	add.w	r2, r7, #12
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fa3a 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	3305      	adds	r3, #5
 8002618:	7b3a      	ldrb	r2, [r7, #12]
 800261a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800261c:	487d      	ldr	r0, [pc, #500]	; (8002814 <Vonalszenzor_operal+0x658>)
 800261e:	f000 fa0b 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2h);
 8002622:	4884      	ldr	r0, [pc, #528]	; (8002834 <Vonalszenzor_operal+0x678>)
 8002624:	f000 fa08 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002628:	4b80      	ldr	r3, [pc, #512]	; (800282c <Vonalszenzor_operal+0x670>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	f107 020c 	add.w	r2, r7, #12
 8002630:	4611      	mov	r1, r2
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fa28 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[9] = (uint8_t) eredmeny_16bit_temp[0];
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	3309      	adds	r3, #9
 800263c:	7b3a      	ldrb	r2, [r7, #12]
 800263e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002640:	4b7b      	ldr	r3, [pc, #492]	; (8002830 <Vonalszenzor_operal+0x674>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	f107 020c 	add.w	r2, r7, #12
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fa1c 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[13] = (uint8_t) eredmeny_16bit_temp[0];
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	330d      	adds	r3, #13
 8002654:	7b3a      	ldrb	r2, [r7, #12]
 8002656:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002658:	486e      	ldr	r0, [pc, #440]	; (8002814 <Vonalszenzor_operal+0x658>)
 800265a:	f000 f9ed 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3h);
 800265e:	4876      	ldr	r0, [pc, #472]	; (8002838 <Vonalszenzor_operal+0x67c>)
 8002660:	f000 f9ea 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002664:	4b71      	ldr	r3, [pc, #452]	; (800282c <Vonalszenzor_operal+0x670>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	f107 020c 	add.w	r2, r7, #12
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fa0a 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[17] = (uint8_t) eredmeny_16bit_temp[0];
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	3311      	adds	r3, #17
 8002678:	7b3a      	ldrb	r2, [r7, #12]
 800267a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800267c:	4b6c      	ldr	r3, [pc, #432]	; (8002830 <Vonalszenzor_operal+0x674>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	f107 020c 	add.w	r2, r7, #12
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f9fe 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[21] = (uint8_t) eredmeny_16bit_temp[0];
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	3315      	adds	r3, #21
 8002690:	7b3a      	ldrb	r2, [r7, #12]
 8002692:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002694:	485f      	ldr	r0, [pc, #380]	; (8002814 <Vonalszenzor_operal+0x658>)
 8002696:	f000 f9cf 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4h);
 800269a:	4868      	ldr	r0, [pc, #416]	; (800283c <Vonalszenzor_operal+0x680>)
 800269c:	f000 f9cc 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80026a0:	4b62      	ldr	r3, [pc, #392]	; (800282c <Vonalszenzor_operal+0x670>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	f107 020c 	add.w	r2, r7, #12
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f9ec 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[25] = (uint8_t) eredmeny_16bit_temp[0];
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	3319      	adds	r3, #25
 80026b4:	7b3a      	ldrb	r2, [r7, #12]
 80026b6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80026b8:	4b5d      	ldr	r3, [pc, #372]	; (8002830 <Vonalszenzor_operal+0x674>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	f107 020c 	add.w	r2, r7, #12
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f9e0 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[29] = (uint8_t) eredmeny_16bit_temp[0];
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	331d      	adds	r3, #29
 80026cc:	7b3a      	ldrb	r2, [r7, #12]
 80026ce:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80026d0:	4850      	ldr	r0, [pc, #320]	; (8002814 <Vonalszenzor_operal+0x658>)
 80026d2:	f000 f9b1 	bl	8002a38 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1h);
 80026d6:	485a      	ldr	r0, [pc, #360]	; (8002840 <Vonalszenzor_operal+0x684>)
 80026d8:	f000 f9ae 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80026dc:	4b59      	ldr	r3, [pc, #356]	; (8002844 <Vonalszenzor_operal+0x688>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	f107 020c 	add.w	r2, r7, #12
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f9ce 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[2] = (uint8_t) eredmeny_16bit_temp[0];
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	3302      	adds	r3, #2
 80026f0:	7b3a      	ldrb	r2, [r7, #12]
 80026f2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80026f4:	4b54      	ldr	r3, [pc, #336]	; (8002848 <Vonalszenzor_operal+0x68c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	f107 020c 	add.w	r2, r7, #12
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f9c2 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[6] = (uint8_t) eredmeny_16bit_temp[0];
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	3306      	adds	r3, #6
 8002708:	7b3a      	ldrb	r2, [r7, #12]
 800270a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800270c:	4841      	ldr	r0, [pc, #260]	; (8002814 <Vonalszenzor_operal+0x658>)
 800270e:	f000 f993 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2h);
 8002712:	484e      	ldr	r0, [pc, #312]	; (800284c <Vonalszenzor_operal+0x690>)
 8002714:	f000 f990 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002718:	4b4a      	ldr	r3, [pc, #296]	; (8002844 <Vonalszenzor_operal+0x688>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	f107 020c 	add.w	r2, r7, #12
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f9b0 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[10] = (uint8_t) eredmeny_16bit_temp[0];
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	330a      	adds	r3, #10
 800272c:	7b3a      	ldrb	r2, [r7, #12]
 800272e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002730:	4b45      	ldr	r3, [pc, #276]	; (8002848 <Vonalszenzor_operal+0x68c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	f107 020c 	add.w	r2, r7, #12
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f9a4 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[14] = (uint8_t) eredmeny_16bit_temp[0];
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	330e      	adds	r3, #14
 8002744:	7b3a      	ldrb	r2, [r7, #12]
 8002746:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002748:	4832      	ldr	r0, [pc, #200]	; (8002814 <Vonalszenzor_operal+0x658>)
 800274a:	f000 f975 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3h);
 800274e:	4840      	ldr	r0, [pc, #256]	; (8002850 <Vonalszenzor_operal+0x694>)
 8002750:	f000 f972 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002754:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <Vonalszenzor_operal+0x688>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	f107 020c 	add.w	r2, r7, #12
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f992 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[18] = (uint8_t) eredmeny_16bit_temp[0];
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	3312      	adds	r3, #18
 8002768:	7b3a      	ldrb	r2, [r7, #12]
 800276a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800276c:	4b36      	ldr	r3, [pc, #216]	; (8002848 <Vonalszenzor_operal+0x68c>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	f107 020c 	add.w	r2, r7, #12
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f986 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[22] = (uint8_t) eredmeny_16bit_temp[0];
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	3316      	adds	r3, #22
 8002780:	7b3a      	ldrb	r2, [r7, #12]
 8002782:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002784:	4823      	ldr	r0, [pc, #140]	; (8002814 <Vonalszenzor_operal+0x658>)
 8002786:	f000 f957 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4h);
 800278a:	4832      	ldr	r0, [pc, #200]	; (8002854 <Vonalszenzor_operal+0x698>)
 800278c:	f000 f954 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <Vonalszenzor_operal+0x688>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	f107 020c 	add.w	r2, r7, #12
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f974 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[26] = (uint8_t) eredmeny_16bit_temp[0];
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	331a      	adds	r3, #26
 80027a4:	7b3a      	ldrb	r2, [r7, #12]
 80027a6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <Vonalszenzor_operal+0x68c>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	f107 020c 	add.w	r2, r7, #12
 80027b0:	4611      	mov	r1, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f968 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[30] = (uint8_t) eredmeny_16bit_temp[0];
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	331e      	adds	r3, #30
 80027bc:	7b3a      	ldrb	r2, [r7, #12]
 80027be:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80027c0:	4814      	ldr	r0, [pc, #80]	; (8002814 <Vonalszenzor_operal+0x658>)
 80027c2:	f000 f939 	bl	8002a38 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1h);
 80027c6:	4824      	ldr	r0, [pc, #144]	; (8002858 <Vonalszenzor_operal+0x69c>)
 80027c8:	f000 f936 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80027cc:	4b23      	ldr	r3, [pc, #140]	; (800285c <Vonalszenzor_operal+0x6a0>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f107 020c 	add.w	r2, r7, #12
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f956 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[3] = (uint8_t) eredmeny_16bit_temp[0];
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	3303      	adds	r3, #3
 80027e0:	7b3a      	ldrb	r2, [r7, #12]
 80027e2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80027e4:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <Vonalszenzor_operal+0x6a4>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	f107 020c 	add.w	r2, r7, #12
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f94a 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[7] = (uint8_t) eredmeny_16bit_temp[0];
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	3307      	adds	r3, #7
 80027f8:	7b3a      	ldrb	r2, [r7, #12]
 80027fa:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027fc:	4805      	ldr	r0, [pc, #20]	; (8002814 <Vonalszenzor_operal+0x658>)
 80027fe:	f000 f91b 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2h);
 8002802:	4818      	ldr	r0, [pc, #96]	; (8002864 <Vonalszenzor_operal+0x6a8>)
 8002804:	f000 f918 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <Vonalszenzor_operal+0x6a0>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	e02c      	b.n	8002868 <Vonalszenzor_operal+0x6ac>
 800280e:	bf00      	nop
 8002810:	20000110 	.word	0x20000110
 8002814:	20000004 	.word	0x20000004
 8002818:	2000001c 	.word	0x2000001c
 800281c:	2000010c 	.word	0x2000010c
 8002820:	20000014 	.word	0x20000014
 8002824:	2000000c 	.word	0x2000000c
 8002828:	20000104 	.word	0x20000104
 800282c:	200001a1 	.word	0x200001a1
 8002830:	2000010d 	.word	0x2000010d
 8002834:	200000fc 	.word	0x200000fc
 8002838:	200000f4 	.word	0x200000f4
 800283c:	200000ec 	.word	0x200000ec
 8002840:	200000e4 	.word	0x200000e4
 8002844:	2000010a 	.word	0x2000010a
 8002848:	2000010e 	.word	0x2000010e
 800284c:	200000dc 	.word	0x200000dc
 8002850:	200000d4 	.word	0x200000d4
 8002854:	200000cc 	.word	0x200000cc
 8002858:	200000c4 	.word	0x200000c4
 800285c:	2000010b 	.word	0x2000010b
 8002860:	2000010f 	.word	0x2000010f
 8002864:	200000bc 	.word	0x200000bc
 8002868:	f107 020c 	add.w	r2, r7, #12
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f90a 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[11] = (uint8_t) eredmeny_16bit_temp[0];
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	330b      	adds	r3, #11
 8002878:	7b3a      	ldrb	r2, [r7, #12]
 800287a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800287c:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <Vonalszenzor_operal+0x850>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	f107 020c 	add.w	r2, r7, #12
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f8fe 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[15] = (uint8_t) eredmeny_16bit_temp[0];
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	330f      	adds	r3, #15
 8002890:	7b3a      	ldrb	r2, [r7, #12]
 8002892:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002894:	485e      	ldr	r0, [pc, #376]	; (8002a10 <Vonalszenzor_operal+0x854>)
 8002896:	f000 f8cf 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3h);
 800289a:	485e      	ldr	r0, [pc, #376]	; (8002a14 <Vonalszenzor_operal+0x858>)
 800289c:	f000 f8cc 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80028a0:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <Vonalszenzor_operal+0x85c>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	f107 020c 	add.w	r2, r7, #12
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f8ec 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[19] = (uint8_t) eredmeny_16bit_temp[0];
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	3313      	adds	r3, #19
 80028b4:	7b3a      	ldrb	r2, [r7, #12]
 80028b6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80028b8:	4b54      	ldr	r3, [pc, #336]	; (8002a0c <Vonalszenzor_operal+0x850>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	f107 020c 	add.w	r2, r7, #12
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f8e0 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[23] = (uint8_t) eredmeny_16bit_temp[0];
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	3317      	adds	r3, #23
 80028cc:	7b3a      	ldrb	r2, [r7, #12]
 80028ce:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80028d0:	484f      	ldr	r0, [pc, #316]	; (8002a10 <Vonalszenzor_operal+0x854>)
 80028d2:	f000 f8b1 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4h);
 80028d6:	4851      	ldr	r0, [pc, #324]	; (8002a1c <Vonalszenzor_operal+0x860>)
 80028d8:	f000 f8ae 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80028dc:	4b4e      	ldr	r3, [pc, #312]	; (8002a18 <Vonalszenzor_operal+0x85c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	f107 020c 	add.w	r2, r7, #12
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f8ce 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[27] = (uint8_t) eredmeny_16bit_temp[0];
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	331b      	adds	r3, #27
 80028f0:	7b3a      	ldrb	r2, [r7, #12]
 80028f2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80028f4:	4b45      	ldr	r3, [pc, #276]	; (8002a0c <Vonalszenzor_operal+0x850>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	f107 020c 	add.w	r2, r7, #12
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f8c2 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[31] = (uint8_t) eredmeny_16bit_temp[0];
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	331f      	adds	r3, #31
 8002908:	7b3a      	ldrb	r2, [r7, #12]
 800290a:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800290c:	4840      	ldr	r0, [pc, #256]	; (8002a10 <Vonalszenzor_operal+0x854>)
 800290e:	f000 f893 	bl	8002a38 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1h);
 8002912:	4843      	ldr	r0, [pc, #268]	; (8002a20 <Vonalszenzor_operal+0x864>)
 8002914:	f000 f890 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002918:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <Vonalszenzor_operal+0x868>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	f107 020c 	add.w	r2, r7, #12
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f8b0 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[4] = (uint8_t) eredmeny_16bit_temp[0];
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	3304      	adds	r3, #4
 800292c:	7b3a      	ldrb	r2, [r7, #12]
 800292e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002930:	4b3d      	ldr	r3, [pc, #244]	; (8002a28 <Vonalszenzor_operal+0x86c>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	f107 020c 	add.w	r2, r7, #12
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f8a4 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[8] = (uint8_t) eredmeny_16bit_temp[0];
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	3308      	adds	r3, #8
 8002944:	7b3a      	ldrb	r2, [r7, #12]
 8002946:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002948:	4831      	ldr	r0, [pc, #196]	; (8002a10 <Vonalszenzor_operal+0x854>)
 800294a:	f000 f875 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2h);
 800294e:	4837      	ldr	r0, [pc, #220]	; (8002a2c <Vonalszenzor_operal+0x870>)
 8002950:	f000 f872 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002954:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <Vonalszenzor_operal+0x868>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	f107 020c 	add.w	r2, r7, #12
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f892 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[12] = (uint8_t) eredmeny_16bit_temp[0];
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	7b3a      	ldrb	r2, [r7, #12]
 800296a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800296c:	4b2e      	ldr	r3, [pc, #184]	; (8002a28 <Vonalszenzor_operal+0x86c>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	f107 020c 	add.w	r2, r7, #12
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f886 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[16] = (uint8_t) eredmeny_16bit_temp[0];
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	3310      	adds	r3, #16
 8002980:	7b3a      	ldrb	r2, [r7, #12]
 8002982:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002984:	4822      	ldr	r0, [pc, #136]	; (8002a10 <Vonalszenzor_operal+0x854>)
 8002986:	f000 f857 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3h);
 800298a:	4829      	ldr	r0, [pc, #164]	; (8002a30 <Vonalszenzor_operal+0x874>)
 800298c:	f000 f854 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <Vonalszenzor_operal+0x868>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	f107 020c 	add.w	r2, r7, #12
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f874 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[20] = (uint8_t) eredmeny_16bit_temp[0];
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	3314      	adds	r3, #20
 80029a4:	7b3a      	ldrb	r2, [r7, #12]
 80029a6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <Vonalszenzor_operal+0x86c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	f107 020c 	add.w	r2, r7, #12
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f868 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[24] = (uint8_t) eredmeny_16bit_temp[0];
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	3318      	adds	r3, #24
 80029bc:	7b3a      	ldrb	r2, [r7, #12]
 80029be:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80029c0:	4813      	ldr	r0, [pc, #76]	; (8002a10 <Vonalszenzor_operal+0x854>)
 80029c2:	f000 f839 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4h);
 80029c6:	481b      	ldr	r0, [pc, #108]	; (8002a34 <Vonalszenzor_operal+0x878>)
 80029c8:	f000 f836 	bl	8002a38 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80029cc:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <Vonalszenzor_operal+0x868>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	f107 020c 	add.w	r2, r7, #12
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f856 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[28] = (uint8_t) eredmeny_16bit_temp[0];
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	331c      	adds	r3, #28
 80029e0:	7b3a      	ldrb	r2, [r7, #12]
 80029e2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <Vonalszenzor_operal+0x86c>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	f107 020c 	add.w	r2, r7, #12
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f84a 	bl	8002a88 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[32] = (uint8_t) eredmeny_16bit_temp[0];
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	3320      	adds	r3, #32
 80029f8:	7b3a      	ldrb	r2, [r7, #12]
 80029fa:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80029fc:	4804      	ldr	r0, [pc, #16]	; (8002a10 <Vonalszenzor_operal+0x854>)
 80029fe:	f000 f81b 	bl	8002a38 <Vonalszenzor_minta_kuldes>
}
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	2000010f 	.word	0x2000010f
 8002a10:	20000004 	.word	0x20000004
 8002a14:	200000b4 	.word	0x200000b4
 8002a18:	2000010b 	.word	0x2000010b
 8002a1c:	200000ac 	.word	0x200000ac
 8002a20:	200000a4 	.word	0x200000a4
 8002a24:	2000010c 	.word	0x2000010c
 8002a28:	20000110 	.word	0x20000110
 8002a2c:	2000009c 	.word	0x2000009c
 8002a30:	20000094 	.word	0x20000094
 8002a34:	2000008c 	.word	0x2000008c

08002a38 <Vonalszenzor_minta_kuldes>:

void Vonalszenzor_minta_kuldes(uint8_t* minta) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	// PC4: Von_latch1  0
 8002a40:	2200      	movs	r2, #0
 8002a42:	2110      	movs	r1, #16
 8002a44:	480d      	ldr	r0, [pc, #52]	; (8002a7c <Vonalszenzor_minta_kuldes+0x44>)
 8002a46:	f001 ffb9 	bl	80049bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// PB1: Von_latch2  0
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	480c      	ldr	r0, [pc, #48]	; (8002a80 <Vonalszenzor_minta_kuldes+0x48>)
 8002a50:	f001 ffb4 	bl	80049bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, minta, 6, 100);				// minta kikuldes
 8002a54:	2364      	movs	r3, #100	; 0x64
 8002a56:	2206      	movs	r2, #6
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	480a      	ldr	r0, [pc, #40]	; (8002a84 <Vonalszenzor_minta_kuldes+0x4c>)
 8002a5c:	f004 f8e4 	bl	8006c28 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		// PC4: Von_latch1  1
 8002a60:	2201      	movs	r2, #1
 8002a62:	2110      	movs	r1, #16
 8002a64:	4805      	ldr	r0, [pc, #20]	; (8002a7c <Vonalszenzor_minta_kuldes+0x44>)
 8002a66:	f001 ffa9 	bl	80049bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// PB1: Von_latch2  1
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	4804      	ldr	r0, [pc, #16]	; (8002a80 <Vonalszenzor_minta_kuldes+0x48>)
 8002a70:	f001 ffa4 	bl	80049bc <HAL_GPIO_WritePin>
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40020800 	.word	0x40020800
 8002a80:	40020400 	.word	0x40020400
 8002a84:	20000250 	.word	0x20000250

08002a88 <Vonalszenzor_meres_kiolvasas>:

void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[2]= {chanel,0};
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	733b      	strb	r3, [r7, #12]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, temp1, 2, 100);
 8002a9c:	f107 010c 	add.w	r1, r7, #12
 8002aa0:	2364      	movs	r3, #100	; 0x64
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	4806      	ldr	r0, [pc, #24]	; (8002ac0 <Vonalszenzor_meres_kiolvasas+0x38>)
 8002aa6:	f004 f8bf 	bl	8006c28 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, eredmeny, 2, 100);
 8002aaa:	2364      	movs	r3, #100	; 0x64
 8002aac:	2202      	movs	r2, #2
 8002aae:	6839      	ldr	r1, [r7, #0]
 8002ab0:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <Vonalszenzor_meres_kiolvasas+0x38>)
 8002ab2:	f004 fa05 	bl	8006ec0 <HAL_SPI_Receive>
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000568 	.word	0x20000568

08002ac4 <Kovetendo_vonal_valaszto>:

void Kovetendo_vonal_valaszto(int* elso, int* hatso) {
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
	if(vonalak_elso[0] < 33)				//kulonben '-' van benne, ami 45
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <Kovetendo_vonal_valaszto+0x40>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d805      	bhi.n	8002ae2 <Kovetendo_vonal_valaszto+0x1e>
		*elso = vonalak_elso[0] - 16;		//ez elvileg jo 1 - 1 erzekelt vonalra
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <Kovetendo_vonal_valaszto+0x40>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	f1a3 0210 	sub.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	601a      	str	r2, [r3, #0]
	if(vonalak_hatso[0] < 33)
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <Kovetendo_vonal_valaszto+0x44>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d805      	bhi.n	8002af6 <Kovetendo_vonal_valaszto+0x32>
		*hatso = vonalak_hatso[0] - 16;
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <Kovetendo_vonal_valaszto+0x44>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	f1a3 0210 	sub.w	r2, r3, #16
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	601a      	str	r2, [r3, #0]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000120 	.word	0x20000120
 8002b08:	20000128 	.word	0x20000128

08002b0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1c:	d109      	bne.n	8002b32 <HAL_GPIO_EXTI_Callback+0x26>
		btnEnable = !btnEnable;
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x34>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf0c      	ite	eq
 8002b26:	2301      	moveq	r3, #1
 8002b28:	2300      	movne	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x34>)
 8002b30:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	//LED felvilagitasa
	}
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000000 	.word	0x20000000

08002b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b48:	b672      	cpsid	i
}
 8002b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b4c:	e7fe      	b.n	8002b4c <Error_Handler+0x8>

08002b4e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	4a0f      	ldr	r2, [pc, #60]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b78:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ba2:	2007      	movs	r0, #7
 8002ba4:	f000 fe8c 	bl	80038c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800

08002bb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b090      	sub	sp, #64	; 0x40
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a6b      	ldr	r2, [pc, #428]	; (8002d80 <HAL_I2C_MspInit+0x1cc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d12d      	bne.n	8002c32 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bda:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a69      	ldr	r2, [pc, #420]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b67      	ldr	r3, [pc, #412]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bf8:	2312      	movs	r3, #18
 8002bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c00:	2303      	movs	r3, #3
 8002c02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c04:	2304      	movs	r3, #4
 8002c06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	485e      	ldr	r0, [pc, #376]	; (8002d88 <HAL_I2C_MspInit+0x1d4>)
 8002c10:	f001 fbb0 	bl	8004374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	4a59      	ldr	r2, [pc, #356]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c22:	6413      	str	r3, [r2, #64]	; 0x40
 8002c24:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c30:	e0a2      	b.n	8002d78 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a55      	ldr	r2, [pc, #340]	; (8002d8c <HAL_I2C_MspInit+0x1d8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d14c      	bne.n	8002cd6 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	4a4f      	ldr	r2, [pc, #316]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002c46:	f043 0302 	orr.w	r3, r3, #2
 8002c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4c:	4b4d      	ldr	r3, [pc, #308]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	623b      	str	r3, [r7, #32]
 8002c56:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	4b49      	ldr	r3, [pc, #292]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	4a48      	ldr	r2, [pc, #288]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002c62:	f043 0304 	orr.w	r3, r3, #4
 8002c66:	6313      	str	r3, [r2, #48]	; 0x30
 8002c68:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c7a:	2312      	movs	r3, #18
 8002c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c82:	2303      	movs	r3, #3
 8002c84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c86:	2304      	movs	r3, #4
 8002c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c8e:	4619      	mov	r1, r3
 8002c90:	483d      	ldr	r0, [pc, #244]	; (8002d88 <HAL_I2C_MspInit+0x1d4>)
 8002c92:	f001 fb6f 	bl	8004374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c9c:	2312      	movs	r3, #18
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4837      	ldr	r0, [pc, #220]	; (8002d90 <HAL_I2C_MspInit+0x1dc>)
 8002cb4:	f001 fb5e 	bl	8004374 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002cc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc8:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
}
 8002cd4:	e050      	b.n	8002d78 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2e      	ldr	r2, [pc, #184]	; (8002d94 <HAL_I2C_MspInit+0x1e0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d14b      	bne.n	8002d78 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002cea:	f043 0304 	orr.w	r3, r3, #4
 8002cee:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf0:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	4a1f      	ldr	r2, [pc, #124]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d1e:	2312      	movs	r3, #18
 8002d20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d26:	2303      	movs	r3, #3
 8002d28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d32:	4619      	mov	r1, r3
 8002d34:	4816      	ldr	r0, [pc, #88]	; (8002d90 <HAL_I2C_MspInit+0x1dc>)
 8002d36:	f001 fb1d 	bl	8004374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d40:	2312      	movs	r3, #18
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d54:	4619      	mov	r1, r3
 8002d56:	4810      	ldr	r0, [pc, #64]	; (8002d98 <HAL_I2C_MspInit+0x1e4>)
 8002d58:	f001 fb0c 	bl	8004374 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002d66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_I2C_MspInit+0x1d0>)
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	bf00      	nop
 8002d7a:	3740      	adds	r7, #64	; 0x40
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40005400 	.word	0x40005400
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	40005800 	.word	0x40005800
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40005c00 	.word	0x40005c00
 8002d98:	40020000 	.word	0x40020000

08002d9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b090      	sub	sp, #64	; 0x40
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a98      	ldr	r2, [pc, #608]	; (800301c <HAL_SPI_MspInit+0x280>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d12c      	bne.n	8002e18 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc2:	4b97      	ldr	r3, [pc, #604]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	4a96      	ldr	r2, [pc, #600]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002dc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dce:	4b94      	ldr	r3, [pc, #592]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dde:	4b90      	ldr	r3, [pc, #576]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4a8f      	ldr	r2, [pc, #572]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b8d      	ldr	r3, [pc, #564]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002df6:	23e0      	movs	r3, #224	; 0xe0
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e02:	2303      	movs	r3, #3
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e06:	2305      	movs	r3, #5
 8002e08:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4884      	ldr	r0, [pc, #528]	; (8003024 <HAL_SPI_MspInit+0x288>)
 8002e12:	f001 faaf 	bl	8004374 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e16:	e0fd      	b.n	8003014 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a82      	ldr	r2, [pc, #520]	; (8003028 <HAL_SPI_MspInit+0x28c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d14b      	bne.n	8002eba <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	4b7e      	ldr	r3, [pc, #504]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a7d      	ldr	r2, [pc, #500]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	4b7b      	ldr	r3, [pc, #492]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3a:	623b      	str	r3, [r7, #32]
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	4b77      	ldr	r3, [pc, #476]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a76      	ldr	r2, [pc, #472]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b74      	ldr	r3, [pc, #464]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	4b70      	ldr	r3, [pc, #448]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a6f      	ldr	r2, [pc, #444]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b6d      	ldr	r3, [pc, #436]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e76:	2302      	movs	r3, #2
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e82:	2303      	movs	r3, #3
 8002e84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002e86:	2307      	movs	r3, #7
 8002e88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4866      	ldr	r0, [pc, #408]	; (800302c <HAL_SPI_MspInit+0x290>)
 8002e92:	f001 fa6f 	bl	8004374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ea8:	2305      	movs	r3, #5
 8002eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	485f      	ldr	r0, [pc, #380]	; (8003030 <HAL_SPI_MspInit+0x294>)
 8002eb4:	f001 fa5e 	bl	8004374 <HAL_GPIO_Init>
}
 8002eb8:	e0ac      	b.n	8003014 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI3)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a5d      	ldr	r2, [pc, #372]	; (8003034 <HAL_SPI_MspInit+0x298>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	f040 80a7 	bne.w	8003014 <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	4b55      	ldr	r3, [pc, #340]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4a54      	ldr	r2, [pc, #336]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed6:	4b52      	ldr	r3, [pc, #328]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	4b4e      	ldr	r3, [pc, #312]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	4a4d      	ldr	r2, [pc, #308]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef2:	4b4b      	ldr	r3, [pc, #300]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a46      	ldr	r2, [pc, #280]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b44      	ldr	r3, [pc, #272]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	4b40      	ldr	r3, [pc, #256]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a3f      	ldr	r2, [pc, #252]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <HAL_SPI_MspInit+0x284>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f36:	2301      	movs	r3, #1
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f42:	2303      	movs	r3, #3
 8002f44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002f46:	2307      	movs	r3, #7
 8002f48:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4837      	ldr	r0, [pc, #220]	; (8003030 <HAL_SPI_MspInit+0x294>)
 8002f52:	f001 fa0f 	bl	8004374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f64:	2303      	movs	r3, #3
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f68:	2306      	movs	r3, #6
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f70:	4619      	mov	r1, r3
 8002f72:	482c      	ldr	r0, [pc, #176]	; (8003024 <HAL_SPI_MspInit+0x288>)
 8002f74:	f001 f9fe 	bl	8004374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f86:	2303      	movs	r3, #3
 8002f88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f92:	4619      	mov	r1, r3
 8002f94:	4825      	ldr	r0, [pc, #148]	; (800302c <HAL_SPI_MspInit+0x290>)
 8002f96:	f001 f9ed 	bl	8004374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f9a:	2310      	movs	r3, #16
 8002f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002faa:	2306      	movs	r3, #6
 8002fac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	481e      	ldr	r0, [pc, #120]	; (8003030 <HAL_SPI_MspInit+0x294>)
 8002fb6:	f001 f9dd 	bl	8004374 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002fba:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 8002fbc:	4a1f      	ldr	r2, [pc, #124]	; (800303c <HAL_SPI_MspInit+0x2a0>)
 8002fbe:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 8002fc8:	2240      	movs	r2, #64	; 0x40
 8002fca:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 8002fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fd8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe0:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ff2:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002ff8:	480f      	ldr	r0, [pc, #60]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 8002ffa:	f000 fcd1 	bl	80039a0 <HAL_DMA_Init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 8003004:	f7ff fd9e 	bl	8002b44 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 800300c:	649a      	str	r2, [r3, #72]	; 0x48
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <HAL_SPI_MspInit+0x29c>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003014:	bf00      	nop
 8003016:	3740      	adds	r7, #64	; 0x40
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40013000 	.word	0x40013000
 8003020:	40023800 	.word	0x40023800
 8003024:	40020000 	.word	0x40020000
 8003028:	40003800 	.word	0x40003800
 800302c:	40020800 	.word	0x40020800
 8003030:	40020400 	.word	0x40020400
 8003034:	40003c00 	.word	0x40003c00
 8003038:	20000480 	.word	0x20000480
 800303c:	40026088 	.word	0x40026088

08003040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003050:	d116      	bne.n	8003080 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	4b28      	ldr	r3, [pc, #160]	; (80030f8 <HAL_TIM_Base_MspInit+0xb8>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <HAL_TIM_Base_MspInit+0xb8>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6413      	str	r3, [r2, #64]	; 0x40
 8003062:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_TIM_Base_MspInit+0xb8>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800306e:	2200      	movs	r2, #0
 8003070:	2100      	movs	r1, #0
 8003072:	201c      	movs	r0, #28
 8003074:	f000 fc44 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003078:	201c      	movs	r0, #28
 800307a:	f000 fc6d 	bl	8003958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800307e:	e036      	b.n	80030ee <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <HAL_TIM_Base_MspInit+0xbc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d116      	bne.n	80030b8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <HAL_TIM_Base_MspInit+0xb8>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_TIM_Base_MspInit+0xb8>)
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	6453      	str	r3, [r2, #68]	; 0x44
 800309a:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <HAL_TIM_Base_MspInit+0xb8>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 80030a6:	2201      	movs	r2, #1
 80030a8:	2100      	movs	r1, #0
 80030aa:	202b      	movs	r0, #43	; 0x2b
 80030ac:	f000 fc28 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80030b0:	202b      	movs	r0, #43	; 0x2b
 80030b2:	f000 fc51 	bl	8003958 <HAL_NVIC_EnableIRQ>
}
 80030b6:	e01a      	b.n	80030ee <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM12)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a10      	ldr	r2, [pc, #64]	; (8003100 <HAL_TIM_Base_MspInit+0xc0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d115      	bne.n	80030ee <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <HAL_TIM_Base_MspInit+0xb8>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <HAL_TIM_Base_MspInit+0xb8>)
 80030cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_TIM_Base_MspInit+0xb8>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 80030de:	2201      	movs	r2, #1
 80030e0:	2100      	movs	r1, #0
 80030e2:	202b      	movs	r0, #43	; 0x2b
 80030e4:	f000 fc0c 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80030e8:	202b      	movs	r0, #43	; 0x2b
 80030ea:	f000 fc35 	bl	8003958 <HAL_NVIC_EnableIRQ>
}
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40010400 	.word	0x40010400
 8003100:	40001800 	.word	0x40001800

08003104 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0e      	ldr	r2, [pc, #56]	; (800314c <HAL_TIM_PWM_MspInit+0x48>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d115      	bne.n	8003142 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_TIM_PWM_MspInit+0x4c>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <HAL_TIM_PWM_MspInit+0x4c>)
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	6413      	str	r3, [r2, #64]	; 0x40
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_TIM_PWM_MspInit+0x4c>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	201d      	movs	r0, #29
 8003138:	f000 fbe2 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800313c:	201d      	movs	r0, #29
 800313e:	f000 fc0b 	bl	8003958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40000400 	.word	0x40000400
 8003150:	40023800 	.word	0x40023800

08003154 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d12b      	bne.n	80031ce <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	4b18      	ldr	r3, [pc, #96]	; (80031dc <HAL_TIM_Encoder_MspInit+0x88>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	4a17      	ldr	r2, [pc, #92]	; (80031dc <HAL_TIM_Encoder_MspInit+0x88>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	6413      	str	r3, [r2, #64]	; 0x40
 8003186:	4b15      	ldr	r3, [pc, #84]	; (80031dc <HAL_TIM_Encoder_MspInit+0x88>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_TIM_Encoder_MspInit+0x88>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4a10      	ldr	r2, [pc, #64]	; (80031dc <HAL_TIM_Encoder_MspInit+0x88>)
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <HAL_TIM_Encoder_MspInit+0x88>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031ae:	23c0      	movs	r3, #192	; 0xc0
 80031b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ba:	2300      	movs	r3, #0
 80031bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031be:	2302      	movs	r3, #2
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c2:	f107 0314 	add.w	r3, r7, #20
 80031c6:	4619      	mov	r1, r3
 80031c8:	4805      	ldr	r0, [pc, #20]	; (80031e0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80031ca:	f001 f8d3 	bl	8004374 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80031ce:	bf00      	nop
 80031d0:	3728      	adds	r7, #40	; 0x28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40000800 	.word	0x40000800
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40020400 	.word	0x40020400

080031e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	; 0x28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a37      	ldr	r2, [pc, #220]	; (80032e0 <HAL_TIM_MspPostInit+0xfc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d11e      	bne.n	8003244 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a35      	ldr	r2, [pc, #212]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003222:	2340      	movs	r3, #64	; 0x40
 8003224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003232:	2302      	movs	r3, #2
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003236:	f107 0314 	add.w	r3, r7, #20
 800323a:	4619      	mov	r1, r3
 800323c:	482a      	ldr	r0, [pc, #168]	; (80032e8 <HAL_TIM_MspPostInit+0x104>)
 800323e:	f001 f899 	bl	8004374 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003242:	e048      	b.n	80032d6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a28      	ldr	r2, [pc, #160]	; (80032ec <HAL_TIM_MspPostInit+0x108>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d11f      	bne.n	800328e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800326a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800326e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003270:	2302      	movs	r3, #2
 8003272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003278:	2300      	movs	r3, #0
 800327a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800327c:	2303      	movs	r3, #3
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	4619      	mov	r1, r3
 8003286:	4818      	ldr	r0, [pc, #96]	; (80032e8 <HAL_TIM_MspPostInit+0x104>)
 8003288:	f001 f874 	bl	8004374 <HAL_GPIO_Init>
}
 800328c:	e023      	b.n	80032d6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <HAL_TIM_MspPostInit+0x10c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d11e      	bne.n	80032d6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003298:	2300      	movs	r3, #0
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	4a10      	ldr	r2, [pc, #64]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 80032a2:	f043 0302 	orr.w	r3, r3, #2
 80032a6:	6313      	str	r3, [r2, #48]	; 0x30
 80032a8:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80032b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80032b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c2:	2300      	movs	r3, #0
 80032c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80032c6:	2309      	movs	r3, #9
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	4619      	mov	r1, r3
 80032d0:	4808      	ldr	r0, [pc, #32]	; (80032f4 <HAL_TIM_MspPostInit+0x110>)
 80032d2:	f001 f84f 	bl	8004374 <HAL_GPIO_Init>
}
 80032d6:	bf00      	nop
 80032d8:	3728      	adds	r7, #40	; 0x28
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40020800 	.word	0x40020800
 80032ec:	40010400 	.word	0x40010400
 80032f0:	40001800 	.word	0x40001800
 80032f4:	40020400 	.word	0x40020400

080032f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08e      	sub	sp, #56	; 0x38
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a5f      	ldr	r2, [pc, #380]	; (8003494 <HAL_UART_MspInit+0x19c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d153      	bne.n	80033c2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	623b      	str	r3, [r7, #32]
 800331e:	4b5e      	ldr	r3, [pc, #376]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a5d      	ldr	r2, [pc, #372]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 8003324:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003332:	623b      	str	r3, [r7, #32]
 8003334:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	4b57      	ldr	r3, [pc, #348]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a56      	ldr	r2, [pc, #344]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b54      	ldr	r3, [pc, #336]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	4b50      	ldr	r3, [pc, #320]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a4f      	ldr	r2, [pc, #316]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 800335c:	f043 0304 	orr.w	r3, r3, #4
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b4d      	ldr	r3, [pc, #308]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800336e:	2301      	movs	r3, #1
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337a:	2303      	movs	r3, #3
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800337e:	2308      	movs	r3, #8
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003386:	4619      	mov	r1, r3
 8003388:	4844      	ldr	r0, [pc, #272]	; (800349c <HAL_UART_MspInit+0x1a4>)
 800338a:	f000 fff3 	bl	8004374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800338e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003398:	2301      	movs	r3, #1
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339c:	2303      	movs	r3, #3
 800339e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80033a0:	2308      	movs	r3, #8
 80033a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a8:	4619      	mov	r1, r3
 80033aa:	483d      	ldr	r0, [pc, #244]	; (80034a0 <HAL_UART_MspInit+0x1a8>)
 80033ac:	f000 ffe2 	bl	8004374 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	2100      	movs	r1, #0
 80033b4:	2034      	movs	r0, #52	; 0x34
 80033b6:	f000 faa3 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80033ba:	2034      	movs	r0, #52	; 0x34
 80033bc:	f000 facc 	bl	8003958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033c0:	e063      	b.n	800348a <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a37      	ldr	r2, [pc, #220]	; (80034a4 <HAL_UART_MspInit+0x1ac>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d12d      	bne.n	8003428 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	4b31      	ldr	r3, [pc, #196]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	4a30      	ldr	r2, [pc, #192]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 80033d6:	f043 0310 	orr.w	r3, r3, #16
 80033da:	6453      	str	r3, [r2, #68]	; 0x44
 80033dc:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	4b2a      	ldr	r3, [pc, #168]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	4a29      	ldr	r2, [pc, #164]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6313      	str	r3, [r2, #48]	; 0x30
 80033f8:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003404:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003416:	2307      	movs	r3, #7
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800341e:	4619      	mov	r1, r3
 8003420:	481e      	ldr	r0, [pc, #120]	; (800349c <HAL_UART_MspInit+0x1a4>)
 8003422:	f000 ffa7 	bl	8004374 <HAL_GPIO_Init>
}
 8003426:	e030      	b.n	800348a <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <HAL_UART_MspInit+0x1b0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d12b      	bne.n	800348a <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	4b18      	ldr	r3, [pc, #96]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a17      	ldr	r2, [pc, #92]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 800343c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a10      	ldr	r2, [pc, #64]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_UART_MspInit+0x1a0>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800346a:	230c      	movs	r3, #12
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003476:	2303      	movs	r3, #3
 8003478:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800347a:	2307      	movs	r3, #7
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003482:	4619      	mov	r1, r3
 8003484:	4805      	ldr	r0, [pc, #20]	; (800349c <HAL_UART_MspInit+0x1a4>)
 8003486:	f000 ff75 	bl	8004374 <HAL_GPIO_Init>
}
 800348a:	bf00      	nop
 800348c:	3738      	adds	r7, #56	; 0x38
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40004c00 	.word	0x40004c00
 8003498:	40023800 	.word	0x40023800
 800349c:	40020000 	.word	0x40020000
 80034a0:	40020800 	.word	0x40020800
 80034a4:	40011000 	.word	0x40011000
 80034a8:	40004400 	.word	0x40004400

080034ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <NMI_Handler+0x4>

080034b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b6:	e7fe      	b.n	80034b6 <HardFault_Handler+0x4>

080034b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034bc:	e7fe      	b.n	80034bc <MemManage_Handler+0x4>

080034be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034c2:	e7fe      	b.n	80034c2 <BusFault_Handler+0x4>

080034c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <UsageFault_Handler+0x4>

080034ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034f8:	f000 f8ce 	bl	8003698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}

08003500 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <DMA1_Stream5_IRQHandler+0x10>)
 8003506:	f000 fcf9 	bl	8003efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000480 	.word	0x20000480

08003514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003518:	4802      	ldr	r0, [pc, #8]	; (8003524 <TIM2_IRQHandler+0x10>)
 800351a:	f004 fe97 	bl	800824c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200005c0 	.word	0x200005c0

08003528 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <TIM3_IRQHandler+0x10>)
 800352e:	f004 fe8d 	bl	800824c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200003e0 	.word	0x200003e0

0800353c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003540:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003544:	f001 fa6c 	bl	8004a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003548:	bf00      	nop
 800354a:	bd80      	pop	{r7, pc}

0800354c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003550:	4803      	ldr	r0, [pc, #12]	; (8003560 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8003552:	f004 fe7b 	bl	800824c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8003556:	4803      	ldr	r0, [pc, #12]	; (8003564 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8003558:	f004 fe78 	bl	800824c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800355c:	bf00      	nop
 800355e:	bd80      	pop	{r7, pc}
 8003560:	200002a8 	.word	0x200002a8
 8003564:	2000064c 	.word	0x2000064c

08003568 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <UART4_IRQHandler+0x10>)
 800356e:	f006 fb85 	bl	8009c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000524 	.word	0x20000524

0800357c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <SystemInit+0x20>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	4a05      	ldr	r2, [pc, #20]	; (800359c <SystemInit+0x20>)
 8003588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800358c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035a4:	480d      	ldr	r0, [pc, #52]	; (80035dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035a6:	490e      	ldr	r1, [pc, #56]	; (80035e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035a8:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035ac:	e002      	b.n	80035b4 <LoopCopyDataInit>

080035ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035b2:	3304      	adds	r3, #4

080035b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b8:	d3f9      	bcc.n	80035ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ba:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035bc:	4c0b      	ldr	r4, [pc, #44]	; (80035ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80035be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c0:	e001      	b.n	80035c6 <LoopFillZerobss>

080035c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c4:	3204      	adds	r2, #4

080035c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c8:	d3fb      	bcc.n	80035c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035ca:	f7ff ffd7 	bl	800357c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ce:	f00c fe17 	bl	8010200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035d2:	f7fd fe25 	bl	8001220 <main>
  bx  lr    
 80035d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035e0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80035e4:	080105ac 	.word	0x080105ac
  ldr r2, =_sbss
 80035e8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80035ec:	20000798 	.word	0x20000798

080035f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f0:	e7fe      	b.n	80035f0 <ADC_IRQHandler>
	...

080035f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035f8:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <HAL_Init+0x40>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <HAL_Init+0x40>)
 80035fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_Init+0x40>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_Init+0x40>)
 800360a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800360e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <HAL_Init+0x40>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a07      	ldr	r2, [pc, #28]	; (8003634 <HAL_Init+0x40>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800361c:	2003      	movs	r0, #3
 800361e:	f000 f94f 	bl	80038c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003622:	2000      	movs	r0, #0
 8003624:	f000 f808 	bl	8003638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003628:	f7ff fa9c 	bl	8002b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00

08003638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003640:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_InitTick+0x54>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_InitTick+0x58>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	4619      	mov	r1, r3
 800364a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800364e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f996 	bl	8003988 <HAL_SYSTICK_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e00e      	b.n	8003684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b0f      	cmp	r3, #15
 800366a:	d80a      	bhi.n	8003682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800366c:	2200      	movs	r2, #0
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	f000 f944 	bl	8003900 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003678:	4a06      	ldr	r2, [pc, #24]	; (8003694 <HAL_InitTick+0x5c>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000144 	.word	0x20000144
 8003690:	2000014c 	.word	0x2000014c
 8003694:	20000148 	.word	0x20000148

08003698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_IncTick+0x20>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_IncTick+0x24>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4413      	add	r3, r2
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <HAL_IncTick+0x24>)
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	2000014c 	.word	0x2000014c
 80036bc:	20000694 	.word	0x20000694

080036c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return uwTick;
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <HAL_GetTick+0x14>)
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000694 	.word	0x20000694

080036d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036e0:	f7ff ffee 	bl	80036c0 <HAL_GetTick>
 80036e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d005      	beq.n	80036fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <HAL_Delay+0x44>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036fe:	bf00      	nop
 8003700:	f7ff ffde 	bl	80036c0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	429a      	cmp	r2, r3
 800370e:	d8f7      	bhi.n	8003700 <HAL_Delay+0x28>
  {
  }
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	2000014c 	.word	0x2000014c

08003720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <__NVIC_SetPriorityGrouping+0x44>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800373c:	4013      	ands	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800374c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003752:	4a04      	ldr	r2, [pc, #16]	; (8003764 <__NVIC_SetPriorityGrouping+0x44>)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	60d3      	str	r3, [r2, #12]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <__NVIC_GetPriorityGrouping+0x18>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	f003 0307 	and.w	r3, r3, #7
}
 8003776:	4618      	mov	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	2b00      	cmp	r3, #0
 8003794:	db0b      	blt.n	80037ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	f003 021f 	and.w	r2, r3, #31
 800379c:	4907      	ldr	r1, [pc, #28]	; (80037bc <__NVIC_EnableIRQ+0x38>)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	2001      	movs	r0, #1
 80037a6:	fa00 f202 	lsl.w	r2, r0, r2
 80037aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	e000e100 	.word	0xe000e100

080037c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	db0a      	blt.n	80037ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	490c      	ldr	r1, [pc, #48]	; (800380c <__NVIC_SetPriority+0x4c>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	440b      	add	r3, r1
 80037e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e8:	e00a      	b.n	8003800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4908      	ldr	r1, [pc, #32]	; (8003810 <__NVIC_SetPriority+0x50>)
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3b04      	subs	r3, #4
 80037f8:	0112      	lsls	r2, r2, #4
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	440b      	add	r3, r1
 80037fe:	761a      	strb	r2, [r3, #24]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000e100 	.word	0xe000e100
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003814:	b480      	push	{r7}
 8003816:	b089      	sub	sp, #36	; 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f1c3 0307 	rsb	r3, r3, #7
 800382e:	2b04      	cmp	r3, #4
 8003830:	bf28      	it	cs
 8003832:	2304      	movcs	r3, #4
 8003834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3304      	adds	r3, #4
 800383a:	2b06      	cmp	r3, #6
 800383c:	d902      	bls.n	8003844 <NVIC_EncodePriority+0x30>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3b03      	subs	r3, #3
 8003842:	e000      	b.n	8003846 <NVIC_EncodePriority+0x32>
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	f04f 32ff 	mov.w	r2, #4294967295
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	401a      	ands	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800385c:	f04f 31ff 	mov.w	r1, #4294967295
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	43d9      	mvns	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	4313      	orrs	r3, r2
         );
}
 800386e:	4618      	mov	r0, r3
 8003870:	3724      	adds	r7, #36	; 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800388c:	d301      	bcc.n	8003892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388e:	2301      	movs	r3, #1
 8003890:	e00f      	b.n	80038b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <SysTick_Config+0x40>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389a:	210f      	movs	r1, #15
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	f7ff ff8e 	bl	80037c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <SysTick_Config+0x40>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <SysTick_Config+0x40>)
 80038ac:	2207      	movs	r2, #7
 80038ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	e000e010 	.word	0xe000e010

080038c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b07      	cmp	r3, #7
 80038cc:	d00f      	beq.n	80038ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d00c      	beq.n	80038ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d009      	beq.n	80038ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d006      	beq.n	80038ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d003      	beq.n	80038ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038e6:	2192      	movs	r1, #146	; 0x92
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80038ea:	f7ff f930 	bl	8002b4e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ff16 	bl	8003720 <__NVIC_SetPriorityGrouping>
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	080102b4 	.word	0x080102b4

08003900 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b0f      	cmp	r3, #15
 8003916:	d903      	bls.n	8003920 <HAL_NVIC_SetPriority+0x20>
 8003918:	21aa      	movs	r1, #170	; 0xaa
 800391a:	480e      	ldr	r0, [pc, #56]	; (8003954 <HAL_NVIC_SetPriority+0x54>)
 800391c:	f7ff f917 	bl	8002b4e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b0f      	cmp	r3, #15
 8003924:	d903      	bls.n	800392e <HAL_NVIC_SetPriority+0x2e>
 8003926:	21ab      	movs	r1, #171	; 0xab
 8003928:	480a      	ldr	r0, [pc, #40]	; (8003954 <HAL_NVIC_SetPriority+0x54>)
 800392a:	f7ff f910 	bl	8002b4e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800392e:	f7ff ff1b 	bl	8003768 <__NVIC_GetPriorityGrouping>
 8003932:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	6978      	ldr	r0, [r7, #20]
 800393a:	f7ff ff6b 	bl	8003814 <NVIC_EncodePriority>
 800393e:	4602      	mov	r2, r0
 8003940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ff3a 	bl	80037c0 <__NVIC_SetPriority>
}
 800394c:	bf00      	nop
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	080102b4 	.word	0x080102b4

08003958 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	2b00      	cmp	r3, #0
 8003968:	da03      	bge.n	8003972 <HAL_NVIC_EnableIRQ+0x1a>
 800396a:	21be      	movs	r1, #190	; 0xbe
 800396c:	4805      	ldr	r0, [pc, #20]	; (8003984 <HAL_NVIC_EnableIRQ+0x2c>)
 800396e:	f7ff f8ee 	bl	8002b4e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff04 	bl	8003784 <__NVIC_EnableIRQ>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	080102b4 	.word	0x080102b4

08003988 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ff73 	bl	800387c <SysTick_Config>
 8003996:	4603      	mov	r3, r0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7ff fe88 	bl	80036c0 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e204      	b.n	8003dc6 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a97      	ldr	r2, [pc, #604]	; (8003c20 <HAL_DMA_Init+0x280>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d04e      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a96      	ldr	r2, [pc, #600]	; (8003c24 <HAL_DMA_Init+0x284>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d049      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a94      	ldr	r2, [pc, #592]	; (8003c28 <HAL_DMA_Init+0x288>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d044      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a93      	ldr	r2, [pc, #588]	; (8003c2c <HAL_DMA_Init+0x28c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d03f      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a91      	ldr	r2, [pc, #580]	; (8003c30 <HAL_DMA_Init+0x290>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d03a      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a90      	ldr	r2, [pc, #576]	; (8003c34 <HAL_DMA_Init+0x294>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d035      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a8e      	ldr	r2, [pc, #568]	; (8003c38 <HAL_DMA_Init+0x298>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d030      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a8d      	ldr	r2, [pc, #564]	; (8003c3c <HAL_DMA_Init+0x29c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d02b      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a8b      	ldr	r2, [pc, #556]	; (8003c40 <HAL_DMA_Init+0x2a0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d026      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a8a      	ldr	r2, [pc, #552]	; (8003c44 <HAL_DMA_Init+0x2a4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d021      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a88      	ldr	r2, [pc, #544]	; (8003c48 <HAL_DMA_Init+0x2a8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01c      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a87      	ldr	r2, [pc, #540]	; (8003c4c <HAL_DMA_Init+0x2ac>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d017      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a85      	ldr	r2, [pc, #532]	; (8003c50 <HAL_DMA_Init+0x2b0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d012      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a84      	ldr	r2, [pc, #528]	; (8003c54 <HAL_DMA_Init+0x2b4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00d      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a82      	ldr	r2, [pc, #520]	; (8003c58 <HAL_DMA_Init+0x2b8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d008      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a81      	ldr	r2, [pc, #516]	; (8003c5c <HAL_DMA_Init+0x2bc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d003      	beq.n	8003a64 <HAL_DMA_Init+0xc4>
 8003a5c:	21b8      	movs	r1, #184	; 0xb8
 8003a5e:	4880      	ldr	r0, [pc, #512]	; (8003c60 <HAL_DMA_Init+0x2c0>)
 8003a60:	f7ff f875 	bl	8002b4e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d026      	beq.n	8003aba <HAL_DMA_Init+0x11a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a74:	d021      	beq.n	8003aba <HAL_DMA_Init+0x11a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a7e:	d01c      	beq.n	8003aba <HAL_DMA_Init+0x11a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003a88:	d017      	beq.n	8003aba <HAL_DMA_Init+0x11a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a92:	d012      	beq.n	8003aba <HAL_DMA_Init+0x11a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003a9c:	d00d      	beq.n	8003aba <HAL_DMA_Init+0x11a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003aa6:	d008      	beq.n	8003aba <HAL_DMA_Init+0x11a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003ab0:	d003      	beq.n	8003aba <HAL_DMA_Init+0x11a>
 8003ab2:	21b9      	movs	r1, #185	; 0xb9
 8003ab4:	486a      	ldr	r0, [pc, #424]	; (8003c60 <HAL_DMA_Init+0x2c0>)
 8003ab6:	f7ff f84a 	bl	8002b4e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_DMA_Init+0x13a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d007      	beq.n	8003ada <HAL_DMA_Init+0x13a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b80      	cmp	r3, #128	; 0x80
 8003ad0:	d003      	beq.n	8003ada <HAL_DMA_Init+0x13a>
 8003ad2:	21ba      	movs	r1, #186	; 0xba
 8003ad4:	4862      	ldr	r0, [pc, #392]	; (8003c60 <HAL_DMA_Init+0x2c0>)
 8003ad6:	f7ff f83a 	bl	8002b4e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae2:	d007      	beq.n	8003af4 <HAL_DMA_Init+0x154>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_DMA_Init+0x154>
 8003aec:	21bb      	movs	r1, #187	; 0xbb
 8003aee:	485c      	ldr	r0, [pc, #368]	; (8003c60 <HAL_DMA_Init+0x2c0>)
 8003af0:	f7ff f82d 	bl	8002b4e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afc:	d007      	beq.n	8003b0e <HAL_DMA_Init+0x16e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_DMA_Init+0x16e>
 8003b06:	21bc      	movs	r1, #188	; 0xbc
 8003b08:	4855      	ldr	r0, [pc, #340]	; (8003c60 <HAL_DMA_Init+0x2c0>)
 8003b0a:	f7ff f820 	bl	8002b4e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00d      	beq.n	8003b32 <HAL_DMA_Init+0x192>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1e:	d008      	beq.n	8003b32 <HAL_DMA_Init+0x192>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b28:	d003      	beq.n	8003b32 <HAL_DMA_Init+0x192>
 8003b2a:	21bd      	movs	r1, #189	; 0xbd
 8003b2c:	484c      	ldr	r0, [pc, #304]	; (8003c60 <HAL_DMA_Init+0x2c0>)
 8003b2e:	f7ff f80e 	bl	8002b4e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00d      	beq.n	8003b56 <HAL_DMA_Init+0x1b6>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b42:	d008      	beq.n	8003b56 <HAL_DMA_Init+0x1b6>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4c:	d003      	beq.n	8003b56 <HAL_DMA_Init+0x1b6>
 8003b4e:	21be      	movs	r1, #190	; 0xbe
 8003b50:	4843      	ldr	r0, [pc, #268]	; (8003c60 <HAL_DMA_Init+0x2c0>)
 8003b52:	f7fe fffc 	bl	8002b4e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00c      	beq.n	8003b78 <HAL_DMA_Init+0x1d8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b66:	d007      	beq.n	8003b78 <HAL_DMA_Init+0x1d8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA_Init+0x1d8>
 8003b70:	21bf      	movs	r1, #191	; 0xbf
 8003b72:	483b      	ldr	r0, [pc, #236]	; (8003c60 <HAL_DMA_Init+0x2c0>)
 8003b74:	f7fe ffeb 	bl	8002b4e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d012      	beq.n	8003ba6 <HAL_DMA_Init+0x206>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b88:	d00d      	beq.n	8003ba6 <HAL_DMA_Init+0x206>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b92:	d008      	beq.n	8003ba6 <HAL_DMA_Init+0x206>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b9c:	d003      	beq.n	8003ba6 <HAL_DMA_Init+0x206>
 8003b9e:	21c0      	movs	r1, #192	; 0xc0
 8003ba0:	482f      	ldr	r0, [pc, #188]	; (8003c60 <HAL_DMA_Init+0x2c0>)
 8003ba2:	f7fe ffd4 	bl	8002b4e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <HAL_DMA_Init+0x21e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d003      	beq.n	8003bbe <HAL_DMA_Init+0x21e>
 8003bb6:	21c1      	movs	r1, #193	; 0xc1
 8003bb8:	4829      	ldr	r0, [pc, #164]	; (8003c60 <HAL_DMA_Init+0x2c0>)
 8003bba:	f7fe ffc8 	bl	8002b4e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d065      	beq.n	8003c92 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00f      	beq.n	8003bee <HAL_DMA_Init+0x24e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d00b      	beq.n	8003bee <HAL_DMA_Init+0x24e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d007      	beq.n	8003bee <HAL_DMA_Init+0x24e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d003      	beq.n	8003bee <HAL_DMA_Init+0x24e>
 8003be6:	21c6      	movs	r1, #198	; 0xc6
 8003be8:	481d      	ldr	r0, [pc, #116]	; (8003c60 <HAL_DMA_Init+0x2c0>)
 8003bea:	f7fe ffb0 	bl	8002b4e <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d036      	beq.n	8003c64 <HAL_DMA_Init+0x2c4>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bfe:	d031      	beq.n	8003c64 <HAL_DMA_Init+0x2c4>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c08:	d02c      	beq.n	8003c64 <HAL_DMA_Init+0x2c4>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c12:	d027      	beq.n	8003c64 <HAL_DMA_Init+0x2c4>
 8003c14:	21c7      	movs	r1, #199	; 0xc7
 8003c16:	4812      	ldr	r0, [pc, #72]	; (8003c60 <HAL_DMA_Init+0x2c0>)
 8003c18:	f7fe ff99 	bl	8002b4e <assert_failed>
 8003c1c:	e022      	b.n	8003c64 <HAL_DMA_Init+0x2c4>
 8003c1e:	bf00      	nop
 8003c20:	40026010 	.word	0x40026010
 8003c24:	40026028 	.word	0x40026028
 8003c28:	40026040 	.word	0x40026040
 8003c2c:	40026058 	.word	0x40026058
 8003c30:	40026070 	.word	0x40026070
 8003c34:	40026088 	.word	0x40026088
 8003c38:	400260a0 	.word	0x400260a0
 8003c3c:	400260b8 	.word	0x400260b8
 8003c40:	40026410 	.word	0x40026410
 8003c44:	40026428 	.word	0x40026428
 8003c48:	40026440 	.word	0x40026440
 8003c4c:	40026458 	.word	0x40026458
 8003c50:	40026470 	.word	0x40026470
 8003c54:	40026488 	.word	0x40026488
 8003c58:	400264a0 	.word	0x400264a0
 8003c5c:	400264b8 	.word	0x400264b8
 8003c60:	080102f0 	.word	0x080102f0
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d012      	beq.n	8003c92 <HAL_DMA_Init+0x2f2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c74:	d00d      	beq.n	8003c92 <HAL_DMA_Init+0x2f2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7e:	d008      	beq.n	8003c92 <HAL_DMA_Init+0x2f2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c88:	d003      	beq.n	8003c92 <HAL_DMA_Init+0x2f2>
 8003c8a:	21c8      	movs	r1, #200	; 0xc8
 8003c8c:	4850      	ldr	r0, [pc, #320]	; (8003dd0 <HAL_DMA_Init+0x430>)
 8003c8e:	f7fe ff5e 	bl	8002b4e <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cb2:	e00f      	b.n	8003cd4 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cb4:	f7ff fd04 	bl	80036c0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b05      	cmp	r3, #5
 8003cc0:	d908      	bls.n	8003cd4 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2203      	movs	r2, #3
 8003ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e078      	b.n	8003dc6 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e8      	bne.n	8003cb4 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4b39      	ldr	r3, [pc, #228]	; (8003dd4 <HAL_DMA_Init+0x434>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d107      	bne.n	8003d3e <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4313      	orrs	r3, r2
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f023 0307 	bic.w	r3, r3, #7
 8003d54:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d117      	bne.n	8003d98 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00e      	beq.n	8003d98 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa7e 	bl	800427c <DMA_CheckFifoParam>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2240      	movs	r2, #64	; 0x40
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d94:	2301      	movs	r3, #1
 8003d96:	e016      	b.n	8003dc6 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fa35 	bl	8004210 <DMA_CalcBaseAndBitshift>
 8003da6:	4603      	mov	r3, r0
 8003da8:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	223f      	movs	r2, #63	; 0x3f
 8003db0:	409a      	lsls	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	080102f0 	.word	0x080102f0
 8003dd4:	f010803f 	.word	0xf010803f

08003dd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003de6:	f7ff fc6b 	bl	80036c0 <HAL_GetTick>
 8003dea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d008      	beq.n	8003e0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e052      	b.n	8003eb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0216 	bic.w	r2, r2, #22
 8003e18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <HAL_DMA_Abort+0x62>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0208 	bic.w	r2, r2, #8
 8003e48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e5a:	e013      	b.n	8003e84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e5c:	f7ff fc30 	bl	80036c0 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d90c      	bls.n	8003e84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2203      	movs	r2, #3
 8003e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e015      	b.n	8003eb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e4      	bne.n	8003e5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	223f      	movs	r2, #63	; 0x3f
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d004      	beq.n	8003ed6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2280      	movs	r2, #128	; 0x80
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e00c      	b.n	8003ef0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2205      	movs	r2, #5
 8003eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0201 	bic.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f08:	4b92      	ldr	r3, [pc, #584]	; (8004154 <HAL_DMA_IRQHandler+0x258>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a92      	ldr	r2, [pc, #584]	; (8004158 <HAL_DMA_IRQHandler+0x25c>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	0a9b      	lsrs	r3, r3, #10
 8003f14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f26:	2208      	movs	r2, #8
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01a      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0204 	bic.w	r2, r2, #4
 8003f4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	2208      	movs	r2, #8
 8003f56:	409a      	lsls	r2, r3
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f043 0201 	orr.w	r2, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d012      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	f043 0202 	orr.w	r2, r3, #2
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d012      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00b      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fcc:	f043 0204 	orr.w	r2, r3, #4
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	2210      	movs	r2, #16
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d043      	beq.n	800406c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d03c      	beq.n	800406c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff6:	2210      	movs	r2, #16
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d018      	beq.n	800403e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d108      	bne.n	800402c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d024      	beq.n	800406c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	4798      	blx	r3
 800402a:	e01f      	b.n	800406c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01b      	beq.n	800406c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4798      	blx	r3
 800403c:	e016      	b.n	800406c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d107      	bne.n	800405c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0208 	bic.w	r2, r2, #8
 800405a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004070:	2220      	movs	r2, #32
 8004072:	409a      	lsls	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4013      	ands	r3, r2
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 808e 	beq.w	800419a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8086 	beq.w	800419a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004092:	2220      	movs	r2, #32
 8004094:	409a      	lsls	r2, r3
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d136      	bne.n	8004114 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0216 	bic.w	r2, r2, #22
 80040b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <HAL_DMA_IRQHandler+0x1da>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0208 	bic.w	r2, r2, #8
 80040e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ea:	223f      	movs	r2, #63	; 0x3f
 80040ec:	409a      	lsls	r2, r3
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004106:	2b00      	cmp	r3, #0
 8004108:	d07d      	beq.n	8004206 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
        }
        return;
 8004112:	e078      	b.n	8004206 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01c      	beq.n	800415c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d108      	bne.n	8004142 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	2b00      	cmp	r3, #0
 8004136:	d030      	beq.n	800419a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4798      	blx	r3
 8004140:	e02b      	b.n	800419a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	2b00      	cmp	r3, #0
 8004148:	d027      	beq.n	800419a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	4798      	blx	r3
 8004152:	e022      	b.n	800419a <HAL_DMA_IRQHandler+0x29e>
 8004154:	20000144 	.word	0x20000144
 8004158:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10f      	bne.n	800418a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0210 	bic.w	r2, r2, #16
 8004178:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d032      	beq.n	8004208 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d022      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2205      	movs	r2, #5
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	3301      	adds	r3, #1
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d307      	bcc.n	80041e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f2      	bne.n	80041c6 <HAL_DMA_IRQHandler+0x2ca>
 80041e0:	e000      	b.n	80041e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80041e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	4798      	blx	r3
 8004204:	e000      	b.n	8004208 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004206:	bf00      	nop
    }
  }
}
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop

08004210 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	3b10      	subs	r3, #16
 8004220:	4a14      	ldr	r2, [pc, #80]	; (8004274 <DMA_CalcBaseAndBitshift+0x64>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800422a:	4a13      	ldr	r2, [pc, #76]	; (8004278 <DMA_CalcBaseAndBitshift+0x68>)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b03      	cmp	r3, #3
 800423c:	d909      	bls.n	8004252 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	1d1a      	adds	r2, r3, #4
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	659a      	str	r2, [r3, #88]	; 0x58
 8004250:	e007      	b.n	8004262 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	aaaaaaab 	.word	0xaaaaaaab
 8004278:	0801056c 	.word	0x0801056c

0800427c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d11f      	bne.n	80042d6 <DMA_CheckFifoParam+0x5a>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b03      	cmp	r3, #3
 800429a:	d856      	bhi.n	800434a <DMA_CheckFifoParam+0xce>
 800429c:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <DMA_CheckFifoParam+0x28>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	080042b5 	.word	0x080042b5
 80042a8:	080042c7 	.word	0x080042c7
 80042ac:	080042b5 	.word	0x080042b5
 80042b0:	0800434b 	.word	0x0800434b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d046      	beq.n	800434e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c4:	e043      	b.n	800434e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042ce:	d140      	bne.n	8004352 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d4:	e03d      	b.n	8004352 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042de:	d121      	bne.n	8004324 <DMA_CheckFifoParam+0xa8>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d837      	bhi.n	8004356 <DMA_CheckFifoParam+0xda>
 80042e6:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <DMA_CheckFifoParam+0x70>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	08004303 	.word	0x08004303
 80042f4:	080042fd 	.word	0x080042fd
 80042f8:	08004315 	.word	0x08004315
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004300:	e030      	b.n	8004364 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d025      	beq.n	800435a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004312:	e022      	b.n	800435a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800431c:	d11f      	bne.n	800435e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004322:	e01c      	b.n	800435e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d903      	bls.n	8004332 <DMA_CheckFifoParam+0xb6>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b03      	cmp	r3, #3
 800432e:	d003      	beq.n	8004338 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004330:	e018      	b.n	8004364 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
      break;
 8004336:	e015      	b.n	8004364 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00e      	beq.n	8004362 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
      break;
 8004348:	e00b      	b.n	8004362 <DMA_CheckFifoParam+0xe6>
      break;
 800434a:	bf00      	nop
 800434c:	e00a      	b.n	8004364 <DMA_CheckFifoParam+0xe8>
      break;
 800434e:	bf00      	nop
 8004350:	e008      	b.n	8004364 <DMA_CheckFifoParam+0xe8>
      break;
 8004352:	bf00      	nop
 8004354:	e006      	b.n	8004364 <DMA_CheckFifoParam+0xe8>
      break;
 8004356:	bf00      	nop
 8004358:	e004      	b.n	8004364 <DMA_CheckFifoParam+0xe8>
      break;
 800435a:	bf00      	nop
 800435c:	e002      	b.n	8004364 <DMA_CheckFifoParam+0xe8>
      break;   
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <DMA_CheckFifoParam+0xe8>
      break;
 8004362:	bf00      	nop
    }
  } 
  
  return status; 
 8004364:	7bfb      	ldrb	r3, [r7, #15]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop

08004374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a37      	ldr	r2, [pc, #220]	; (800446c <HAL_GPIO_Init+0xf8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01f      	beq.n	80043d2 <HAL_GPIO_Init+0x5e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a36      	ldr	r2, [pc, #216]	; (8004470 <HAL_GPIO_Init+0xfc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01b      	beq.n	80043d2 <HAL_GPIO_Init+0x5e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a35      	ldr	r2, [pc, #212]	; (8004474 <HAL_GPIO_Init+0x100>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d017      	beq.n	80043d2 <HAL_GPIO_Init+0x5e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a34      	ldr	r2, [pc, #208]	; (8004478 <HAL_GPIO_Init+0x104>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_GPIO_Init+0x5e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a33      	ldr	r2, [pc, #204]	; (800447c <HAL_GPIO_Init+0x108>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00f      	beq.n	80043d2 <HAL_GPIO_Init+0x5e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a32      	ldr	r2, [pc, #200]	; (8004480 <HAL_GPIO_Init+0x10c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <HAL_GPIO_Init+0x5e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a31      	ldr	r2, [pc, #196]	; (8004484 <HAL_GPIO_Init+0x110>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <HAL_GPIO_Init+0x5e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a30      	ldr	r2, [pc, #192]	; (8004488 <HAL_GPIO_Init+0x114>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <HAL_GPIO_Init+0x5e>
 80043ca:	21ac      	movs	r1, #172	; 0xac
 80043cc:	482f      	ldr	r0, [pc, #188]	; (800448c <HAL_GPIO_Init+0x118>)
 80043ce:	f7fe fbbe 	bl	8002b4e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_GPIO_Init+0x74>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_GPIO_Init+0x7c>
 80043e8:	21ad      	movs	r1, #173	; 0xad
 80043ea:	4828      	ldr	r0, [pc, #160]	; (800448c <HAL_GPIO_Init+0x118>)
 80043ec:	f7fe fbaf 	bl	8002b4e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d035      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d031      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b11      	cmp	r3, #17
 8004406:	d02d      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d029      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b12      	cmp	r3, #18
 8004416:	d025      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004420:	d020      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800442a:	d01b      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8004434:	d016      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800443e:	d011      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8004448:	d00c      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8004452:	d007      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d003      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
 800445c:	21ae      	movs	r1, #174	; 0xae
 800445e:	480b      	ldr	r0, [pc, #44]	; (800448c <HAL_GPIO_Init+0x118>)
 8004460:	f7fe fb75 	bl	8002b4e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004464:	2300      	movs	r3, #0
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	e289      	b.n	800497e <HAL_GPIO_Init+0x60a>
 800446a:	bf00      	nop
 800446c:	40020000 	.word	0x40020000
 8004470:	40020400 	.word	0x40020400
 8004474:	40020800 	.word	0x40020800
 8004478:	40020c00 	.word	0x40020c00
 800447c:	40021000 	.word	0x40021000
 8004480:	40021400 	.word	0x40021400
 8004484:	40021800 	.word	0x40021800
 8004488:	40021c00 	.word	0x40021c00
 800448c:	08010328 	.word	0x08010328
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004490:	2201      	movs	r2, #1
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4013      	ands	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	f040 8265 	bne.w	8004978 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d005      	beq.n	80044c6 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d144      	bne.n	8004550 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00f      	beq.n	80044ee <HAL_GPIO_Init+0x17a>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d00b      	beq.n	80044ee <HAL_GPIO_Init+0x17a>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d007      	beq.n	80044ee <HAL_GPIO_Init+0x17a>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_Init+0x17a>
 80044e6:	21c0      	movs	r1, #192	; 0xc0
 80044e8:	4831      	ldr	r0, [pc, #196]	; (80045b0 <HAL_GPIO_Init+0x23c>)
 80044ea:	f7fe fb30 	bl	8002b4e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	2203      	movs	r2, #3
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4013      	ands	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004524:	2201      	movs	r2, #1
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4013      	ands	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	091b      	lsrs	r3, r3, #4
 800453a:	f003 0201 	and.w	r2, r3, #1
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	2b03      	cmp	r3, #3
 800455a:	d02b      	beq.n	80045b4 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <HAL_GPIO_Init+0x208>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d007      	beq.n	800457c <HAL_GPIO_Init+0x208>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d003      	beq.n	800457c <HAL_GPIO_Init+0x208>
 8004574:	21d1      	movs	r1, #209	; 0xd1
 8004576:	480e      	ldr	r0, [pc, #56]	; (80045b0 <HAL_GPIO_Init+0x23c>)
 8004578:	f7fe fae9 	bl	8002b4e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	2203      	movs	r2, #3
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	60da      	str	r2, [r3, #12]
 80045ac:	e002      	b.n	80045b4 <HAL_GPIO_Init+0x240>
 80045ae:	bf00      	nop
 80045b0:	08010328 	.word	0x08010328
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	f040 810c 	bne.w	80047da <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 80e3 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b09      	cmp	r3, #9
 80045d2:	f000 80de 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80d9 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80d4 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80cf 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80ca 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b01      	cmp	r3, #1
 8004604:	f000 80c5 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b01      	cmp	r3, #1
 800460e:	f000 80c0 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b02      	cmp	r3, #2
 8004618:	f000 80bb 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b02      	cmp	r3, #2
 8004622:	f000 80b6 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b02      	cmp	r3, #2
 800462c:	f000 80b1 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2b03      	cmp	r3, #3
 8004636:	f000 80ac 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b04      	cmp	r3, #4
 8004640:	f000 80a7 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	2b04      	cmp	r3, #4
 800464a:	f000 80a2 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b04      	cmp	r3, #4
 8004654:	f000 809d 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b05      	cmp	r3, #5
 800465e:	f000 8098 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b05      	cmp	r3, #5
 8004668:	f000 8093 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2b09      	cmp	r3, #9
 8004672:	f000 808e 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b06      	cmp	r3, #6
 800467c:	f000 8089 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b09      	cmp	r3, #9
 8004686:	f000 8084 	beq.w	8004792 <HAL_GPIO_Init+0x41e>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b07      	cmp	r3, #7
 8004690:	d07f      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b07      	cmp	r3, #7
 8004698:	d07b      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b07      	cmp	r3, #7
 80046a0:	d077      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d073      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d06f      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d06b      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b09      	cmp	r3, #9
 80046c0:	d067      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b09      	cmp	r3, #9
 80046c8:	d063      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b0a      	cmp	r3, #10
 80046d0:	d05f      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b0a      	cmp	r3, #10
 80046d8:	d05b      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b0b      	cmp	r3, #11
 80046e0:	d057      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b0c      	cmp	r3, #12
 80046e8:	d053      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b0c      	cmp	r3, #12
 80046f0:	d04f      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b0d      	cmp	r3, #13
 80046f8:	d04b      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b0f      	cmp	r3, #15
 8004700:	d047      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b05      	cmp	r3, #5
 8004708:	d043      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d03f      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d03b      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b03      	cmp	r3, #3
 8004720:	d037      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b04      	cmp	r3, #4
 8004728:	d033      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b05      	cmp	r3, #5
 8004730:	d02f      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b06      	cmp	r3, #6
 8004738:	d02b      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b06      	cmp	r3, #6
 8004740:	d027      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b07      	cmp	r3, #7
 8004748:	d023      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b07      	cmp	r3, #7
 8004750:	d01f      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b07      	cmp	r3, #7
 8004758:	d01b      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b07      	cmp	r3, #7
 8004760:	d017      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b08      	cmp	r3, #8
 8004768:	d013      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b08      	cmp	r3, #8
 8004770:	d00f      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b09      	cmp	r3, #9
 8004778:	d00b      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b0a      	cmp	r3, #10
 8004780:	d007      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b0a      	cmp	r3, #10
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_Init+0x41e>
 800478a:	21de      	movs	r1, #222	; 0xde
 800478c:	4880      	ldr	r0, [pc, #512]	; (8004990 <HAL_GPIO_Init+0x61c>)
 800478e:	f7fe f9de 	bl	8002b4e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	08da      	lsrs	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3208      	adds	r2, #8
 800479a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	220f      	movs	r2, #15
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	08da      	lsrs	r2, r3, #3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3208      	adds	r2, #8
 80047d4:	69b9      	ldr	r1, [r7, #24]
 80047d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	2203      	movs	r2, #3
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4013      	ands	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 0203 	and.w	r2, r3, #3
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4313      	orrs	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80ae 	beq.w	8004978 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	4b5c      	ldr	r3, [pc, #368]	; (8004994 <HAL_GPIO_Init+0x620>)
 8004822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004824:	4a5b      	ldr	r2, [pc, #364]	; (8004994 <HAL_GPIO_Init+0x620>)
 8004826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800482a:	6453      	str	r3, [r2, #68]	; 0x44
 800482c:	4b59      	ldr	r3, [pc, #356]	; (8004994 <HAL_GPIO_Init+0x620>)
 800482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004838:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_GPIO_Init+0x624>)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	3302      	adds	r3, #2
 8004840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004844:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	220f      	movs	r2, #15
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4013      	ands	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a4f      	ldr	r2, [pc, #316]	; (800499c <HAL_GPIO_Init+0x628>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d025      	beq.n	80048b0 <HAL_GPIO_Init+0x53c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a4e      	ldr	r2, [pc, #312]	; (80049a0 <HAL_GPIO_Init+0x62c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d01f      	beq.n	80048ac <HAL_GPIO_Init+0x538>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a4d      	ldr	r2, [pc, #308]	; (80049a4 <HAL_GPIO_Init+0x630>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d019      	beq.n	80048a8 <HAL_GPIO_Init+0x534>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a4c      	ldr	r2, [pc, #304]	; (80049a8 <HAL_GPIO_Init+0x634>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d013      	beq.n	80048a4 <HAL_GPIO_Init+0x530>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a4b      	ldr	r2, [pc, #300]	; (80049ac <HAL_GPIO_Init+0x638>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00d      	beq.n	80048a0 <HAL_GPIO_Init+0x52c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a4a      	ldr	r2, [pc, #296]	; (80049b0 <HAL_GPIO_Init+0x63c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d007      	beq.n	800489c <HAL_GPIO_Init+0x528>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a49      	ldr	r2, [pc, #292]	; (80049b4 <HAL_GPIO_Init+0x640>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d101      	bne.n	8004898 <HAL_GPIO_Init+0x524>
 8004894:	2306      	movs	r3, #6
 8004896:	e00c      	b.n	80048b2 <HAL_GPIO_Init+0x53e>
 8004898:	2307      	movs	r3, #7
 800489a:	e00a      	b.n	80048b2 <HAL_GPIO_Init+0x53e>
 800489c:	2305      	movs	r3, #5
 800489e:	e008      	b.n	80048b2 <HAL_GPIO_Init+0x53e>
 80048a0:	2304      	movs	r3, #4
 80048a2:	e006      	b.n	80048b2 <HAL_GPIO_Init+0x53e>
 80048a4:	2303      	movs	r3, #3
 80048a6:	e004      	b.n	80048b2 <HAL_GPIO_Init+0x53e>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e002      	b.n	80048b2 <HAL_GPIO_Init+0x53e>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <HAL_GPIO_Init+0x53e>
 80048b0:	2300      	movs	r3, #0
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	f002 0203 	and.w	r2, r2, #3
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	4093      	lsls	r3, r2
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048c2:	4935      	ldr	r1, [pc, #212]	; (8004998 <HAL_GPIO_Init+0x624>)
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	089b      	lsrs	r3, r3, #2
 80048c8:	3302      	adds	r3, #2
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <HAL_GPIO_Init+0x644>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048f4:	4a30      	ldr	r2, [pc, #192]	; (80049b8 <HAL_GPIO_Init+0x644>)
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048fa:	4b2f      	ldr	r3, [pc, #188]	; (80049b8 <HAL_GPIO_Init+0x644>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800491e:	4a26      	ldr	r2, [pc, #152]	; (80049b8 <HAL_GPIO_Init+0x644>)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004924:	4b24      	ldr	r3, [pc, #144]	; (80049b8 <HAL_GPIO_Init+0x644>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004948:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <HAL_GPIO_Init+0x644>)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800494e:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <HAL_GPIO_Init+0x644>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	43db      	mvns	r3, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004972:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <HAL_GPIO_Init+0x644>)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	3301      	adds	r3, #1
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	2b0f      	cmp	r3, #15
 8004982:	f67f ad85 	bls.w	8004490 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	08010328 	.word	0x08010328
 8004994:	40023800 	.word	0x40023800
 8004998:	40013800 	.word	0x40013800
 800499c:	40020000 	.word	0x40020000
 80049a0:	40020400 	.word	0x40020400
 80049a4:	40020800 	.word	0x40020800
 80049a8:	40020c00 	.word	0x40020c00
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40021400 	.word	0x40021400
 80049b4:	40021800 	.word	0x40021800
 80049b8:	40013c00 	.word	0x40013c00

080049bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	807b      	strh	r3, [r7, #2]
 80049c8:	4613      	mov	r3, r2
 80049ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d004      	beq.n	80049dc <HAL_GPIO_WritePin+0x20>
 80049d2:	887b      	ldrh	r3, [r7, #2]
 80049d4:	0c1b      	lsrs	r3, r3, #16
 80049d6:	041b      	lsls	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d004      	beq.n	80049e6 <HAL_GPIO_WritePin+0x2a>
 80049dc:	f240 119d 	movw	r1, #413	; 0x19d
 80049e0:	480e      	ldr	r0, [pc, #56]	; (8004a1c <HAL_GPIO_WritePin+0x60>)
 80049e2:	f7fe f8b4 	bl	8002b4e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80049e6:	787b      	ldrb	r3, [r7, #1]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d007      	beq.n	80049fc <HAL_GPIO_WritePin+0x40>
 80049ec:	787b      	ldrb	r3, [r7, #1]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d004      	beq.n	80049fc <HAL_GPIO_WritePin+0x40>
 80049f2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80049f6:	4809      	ldr	r0, [pc, #36]	; (8004a1c <HAL_GPIO_WritePin+0x60>)
 80049f8:	f7fe f8a9 	bl	8002b4e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80049fc:	787b      	ldrb	r3, [r7, #1]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a02:	887a      	ldrh	r2, [r7, #2]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a08:	e003      	b.n	8004a12 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	041a      	lsls	r2, r3, #16
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	619a      	str	r2, [r3, #24]
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	08010328 	.word	0x08010328

08004a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a2a:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d006      	beq.n	8004a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a36:	4a05      	ldr	r2, [pc, #20]	; (8004a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe f864 	bl	8002b0c <HAL_GPIO_EXTI_Callback>
  }
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40013c00 	.word	0x40013c00

08004a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e1be      	b.n	8004de0 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a9f      	ldr	r2, [pc, #636]	; (8004ce4 <HAL_I2C_Init+0x294>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_I2C_Init+0x3a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a9d      	ldr	r2, [pc, #628]	; (8004ce8 <HAL_I2C_Init+0x298>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_I2C_Init+0x3a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a9c      	ldr	r2, [pc, #624]	; (8004cec <HAL_I2C_Init+0x29c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_I2C_Init+0x3a>
 8004a80:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004a84:	489a      	ldr	r0, [pc, #616]	; (8004cf0 <HAL_I2C_Init+0x2a0>)
 8004a86:	f7fe f862 	bl	8002b4e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d004      	beq.n	8004a9c <HAL_I2C_Init+0x4c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4a97      	ldr	r2, [pc, #604]	; (8004cf4 <HAL_I2C_Init+0x2a4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d904      	bls.n	8004aa6 <HAL_I2C_Init+0x56>
 8004a9c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004aa0:	4893      	ldr	r0, [pc, #588]	; (8004cf0 <HAL_I2C_Init+0x2a0>)
 8004aa2:	f7fe f854 	bl	8002b4e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_I2C_Init+0x72>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab6:	d004      	beq.n	8004ac2 <HAL_I2C_Init+0x72>
 8004ab8:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004abc:	488c      	ldr	r0, [pc, #560]	; (8004cf0 <HAL_I2C_Init+0x2a0>)
 8004abe:	f7fe f846 	bl	8002b4e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004aca:	f023 0303 	bic.w	r3, r3, #3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <HAL_I2C_Init+0x8c>
 8004ad2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004ad6:	4886      	ldr	r0, [pc, #536]	; (8004cf0 <HAL_I2C_Init+0x2a0>)
 8004ad8:	f7fe f839 	bl	8002b4e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae4:	d009      	beq.n	8004afa <HAL_I2C_Init+0xaa>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004aee:	d004      	beq.n	8004afa <HAL_I2C_Init+0xaa>
 8004af0:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004af4:	487e      	ldr	r0, [pc, #504]	; (8004cf0 <HAL_I2C_Init+0x2a0>)
 8004af6:	f7fe f82a 	bl	8002b4e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <HAL_I2C_Init+0xc4>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d004      	beq.n	8004b14 <HAL_I2C_Init+0xc4>
 8004b0a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004b0e:	4878      	ldr	r0, [pc, #480]	; (8004cf0 <HAL_I2C_Init+0x2a0>)
 8004b10:	f7fe f81d 	bl	8002b4e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d004      	beq.n	8004b2a <HAL_I2C_Init+0xda>
 8004b20:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004b24:	4872      	ldr	r0, [pc, #456]	; (8004cf0 <HAL_I2C_Init+0x2a0>)
 8004b26:	f7fe f812 	bl	8002b4e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d008      	beq.n	8004b44 <HAL_I2C_Init+0xf4>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d004      	beq.n	8004b44 <HAL_I2C_Init+0xf4>
 8004b3a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004b3e:	486c      	ldr	r0, [pc, #432]	; (8004cf0 <HAL_I2C_Init+0x2a0>)
 8004b40:	f7fe f805 	bl	8002b4e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_I2C_Init+0x10e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	2b80      	cmp	r3, #128	; 0x80
 8004b52:	d004      	beq.n	8004b5e <HAL_I2C_Init+0x10e>
 8004b54:	f240 11c7 	movw	r1, #455	; 0x1c7
 8004b58:	4865      	ldr	r0, [pc, #404]	; (8004cf0 <HAL_I2C_Init+0x2a0>)
 8004b5a:	f7fd fff8 	bl	8002b4e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fe f81e 	bl	8002bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2224      	movs	r2, #36	; 0x24
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0201 	bic.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f001 f96e 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 8004bb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4a4f      	ldr	r2, [pc, #316]	; (8004cf8 <HAL_I2C_Init+0x2a8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d807      	bhi.n	8004bd0 <HAL_I2C_Init+0x180>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4a4e      	ldr	r2, [pc, #312]	; (8004cfc <HAL_I2C_Init+0x2ac>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	bf94      	ite	ls
 8004bc8:	2301      	movls	r3, #1
 8004bca:	2300      	movhi	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	e006      	b.n	8004bde <HAL_I2C_Init+0x18e>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a4b      	ldr	r2, [pc, #300]	; (8004d00 <HAL_I2C_Init+0x2b0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	bf94      	ite	ls
 8004bd8:	2301      	movls	r3, #1
 8004bda:	2300      	movhi	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0fc      	b.n	8004de0 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a46      	ldr	r2, [pc, #280]	; (8004d04 <HAL_I2C_Init+0x2b4>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	0c9b      	lsrs	r3, r3, #18
 8004bf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4a38      	ldr	r2, [pc, #224]	; (8004cf8 <HAL_I2C_Init+0x2a8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d802      	bhi.n	8004c20 <HAL_I2C_Init+0x1d0>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	e009      	b.n	8004c34 <HAL_I2C_Init+0x1e4>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	4a37      	ldr	r2, [pc, #220]	; (8004d08 <HAL_I2C_Init+0x2b8>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	099b      	lsrs	r3, r3, #6
 8004c32:	3301      	adds	r3, #1
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	492a      	ldr	r1, [pc, #168]	; (8004cf8 <HAL_I2C_Init+0x2a8>)
 8004c50:	428b      	cmp	r3, r1
 8004c52:	d819      	bhi.n	8004c88 <HAL_I2C_Init+0x238>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1e59      	subs	r1, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c62:	1c59      	adds	r1, r3, #1
 8004c64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c68:	400b      	ands	r3, r1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_I2C_Init+0x234>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1e59      	subs	r1, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c82:	e066      	b.n	8004d52 <HAL_I2C_Init+0x302>
 8004c84:	2304      	movs	r3, #4
 8004c86:	e064      	b.n	8004d52 <HAL_I2C_Init+0x302>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d111      	bne.n	8004cb4 <HAL_I2C_Init+0x264>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1e58      	subs	r0, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6859      	ldr	r1, [r3, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	440b      	add	r3, r1
 8004c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e012      	b.n	8004cda <HAL_I2C_Init+0x28a>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1e58      	subs	r0, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	0099      	lsls	r1, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d016      	beq.n	8004d0c <HAL_I2C_Init+0x2bc>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e037      	b.n	8004d52 <HAL_I2C_Init+0x302>
 8004ce2:	bf00      	nop
 8004ce4:	40005400 	.word	0x40005400
 8004ce8:	40005800 	.word	0x40005800
 8004cec:	40005c00 	.word	0x40005c00
 8004cf0:	08010364 	.word	0x08010364
 8004cf4:	00061a80 	.word	0x00061a80
 8004cf8:	000186a0 	.word	0x000186a0
 8004cfc:	001e847f 	.word	0x001e847f
 8004d00:	003d08ff 	.word	0x003d08ff
 8004d04:	431bde83 	.word	0x431bde83
 8004d08:	10624dd3 	.word	0x10624dd3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10e      	bne.n	8004d32 <HAL_I2C_Init+0x2e2>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1e58      	subs	r0, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6859      	ldr	r1, [r3, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	440b      	add	r3, r1
 8004d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d26:	3301      	adds	r3, #1
 8004d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d30:	e00f      	b.n	8004d52 <HAL_I2C_Init+0x302>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1e58      	subs	r0, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6859      	ldr	r1, [r3, #4]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	0099      	lsls	r1, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d48:	3301      	adds	r3, #1
 8004d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	6809      	ldr	r1, [r1, #0]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6911      	ldr	r1, [r2, #16]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	68d2      	ldr	r2, [r2, #12]
 8004d8c:	4311      	orrs	r1, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	430b      	orrs	r3, r1
 8004d94:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	695a      	ldr	r2, [r3, #20]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0201 	orr.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	607a      	str	r2, [r7, #4]
 8004df2:	461a      	mov	r2, r3
 8004df4:	460b      	mov	r3, r1
 8004df6:	817b      	strh	r3, [r7, #10]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dfc:	f7fe fc60 	bl	80036c0 <HAL_GetTick>
 8004e00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	f040 80e0 	bne.w	8004fd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	2319      	movs	r3, #25
 8004e16:	2201      	movs	r2, #1
 8004e18:	4970      	ldr	r1, [pc, #448]	; (8004fdc <HAL_I2C_Master_Transmit+0x1f4>)
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fc58 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e26:	2302      	movs	r3, #2
 8004e28:	e0d3      	b.n	8004fd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_I2C_Master_Transmit+0x50>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e0cc      	b.n	8004fd2 <HAL_I2C_Master_Transmit+0x1ea>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d007      	beq.n	8004e5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2221      	movs	r2, #33	; 0x21
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2210      	movs	r2, #16
 8004e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	893a      	ldrh	r2, [r7, #8]
 8004e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a50      	ldr	r2, [pc, #320]	; (8004fe0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ea0:	8979      	ldrh	r1, [r7, #10]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	6a3a      	ldr	r2, [r7, #32]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fac2 	bl	8005430 <I2C_MasterRequestWrite>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e08d      	b.n	8004fd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ecc:	e066      	b.n	8004f9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	6a39      	ldr	r1, [r7, #32]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fcd2 	bl	800587c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00d      	beq.n	8004efa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d107      	bne.n	8004ef6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e06b      	b.n	8004fd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	781a      	ldrb	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d11b      	bne.n	8004f70 <HAL_I2C_Master_Transmit+0x188>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d017      	beq.n	8004f70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	6a39      	ldr	r1, [r7, #32]
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fcc2 	bl	80058fe <I2C_WaitOnBTFFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00d      	beq.n	8004f9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d107      	bne.n	8004f98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e01a      	b.n	8004fd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d194      	bne.n	8004ece <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e000      	b.n	8004fd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
  }
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	00100002 	.word	0x00100002
 8004fe0:	ffff0000 	.word	0xffff0000

08004fe4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08c      	sub	sp, #48	; 0x30
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	607a      	str	r2, [r7, #4]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	817b      	strh	r3, [r7, #10]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ff8:	f7fe fb62 	bl	80036c0 <HAL_GetTick>
 8004ffc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b20      	cmp	r3, #32
 8005008:	f040 820b 	bne.w	8005422 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	2319      	movs	r3, #25
 8005012:	2201      	movs	r2, #1
 8005014:	497c      	ldr	r1, [pc, #496]	; (8005208 <HAL_I2C_Master_Receive+0x224>)
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fb5a 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005022:	2302      	movs	r3, #2
 8005024:	e1fe      	b.n	8005424 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_I2C_Master_Receive+0x50>
 8005030:	2302      	movs	r3, #2
 8005032:	e1f7      	b.n	8005424 <HAL_I2C_Master_Receive+0x440>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b01      	cmp	r3, #1
 8005048:	d007      	beq.n	800505a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0201 	orr.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005068:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2222      	movs	r2, #34	; 0x22
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2210      	movs	r2, #16
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	893a      	ldrh	r2, [r7, #8]
 800508a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4a5c      	ldr	r2, [pc, #368]	; (800520c <HAL_I2C_Master_Receive+0x228>)
 800509a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800509c:	8979      	ldrh	r1, [r7, #10]
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fa46 	bl	8005534 <I2C_MasterRequestRead>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e1b8      	b.n	8005424 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d113      	bne.n	80050e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ba:	2300      	movs	r3, #0
 80050bc:	623b      	str	r3, [r7, #32]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	623b      	str	r3, [r7, #32]
 80050ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	e18c      	b.n	80053fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d11b      	bne.n	8005122 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e16c      	b.n	80053fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005126:	2b02      	cmp	r3, #2
 8005128:	d11b      	bne.n	8005162 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005138:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005148:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514a:	2300      	movs	r3, #0
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	e14c      	b.n	80053fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005170:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005188:	e138      	b.n	80053fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	2b03      	cmp	r3, #3
 8005190:	f200 80f1 	bhi.w	8005376 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005198:	2b01      	cmp	r3, #1
 800519a:	d123      	bne.n	80051e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800519c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 fbed 	bl	8005980 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e139      	b.n	8005424 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051e2:	e10b      	b.n	80053fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d14e      	bne.n	800528a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	2200      	movs	r2, #0
 80051f4:	4906      	ldr	r1, [pc, #24]	; (8005210 <HAL_I2C_Master_Receive+0x22c>)
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fa6a 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d008      	beq.n	8005214 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e10e      	b.n	8005424 <HAL_I2C_Master_Receive+0x440>
 8005206:	bf00      	nop
 8005208:	00100002 	.word	0x00100002
 800520c:	ffff0000 	.word	0xffff0000
 8005210:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005288:	e0b8      	b.n	80053fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	2200      	movs	r2, #0
 8005292:	4966      	ldr	r1, [pc, #408]	; (800542c <HAL_I2C_Master_Receive+0x448>)
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fa1b 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0bf      	b.n	8005424 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	2200      	movs	r2, #0
 80052ee:	494f      	ldr	r1, [pc, #316]	; (800542c <HAL_I2C_Master_Receive+0x448>)
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f9ed 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e091      	b.n	8005424 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800530e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005374:	e042      	b.n	80053fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fb00 	bl	8005980 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e04c      	b.n	8005424 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d118      	bne.n	80053fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005400:	2b00      	cmp	r3, #0
 8005402:	f47f aec2 	bne.w	800518a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	3728      	adds	r7, #40	; 0x28
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	00010004 	.word	0x00010004

08005430 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	460b      	mov	r3, r1
 800543e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b08      	cmp	r3, #8
 800544a:	d006      	beq.n	800545a <I2C_MasterRequestWrite+0x2a>
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d003      	beq.n	800545a <I2C_MasterRequestWrite+0x2a>
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005458:	d108      	bne.n	800546c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	e00b      	b.n	8005484 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005470:	2b12      	cmp	r3, #18
 8005472:	d107      	bne.n	8005484 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005482:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f91d 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00d      	beq.n	80054b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054aa:	d103      	bne.n	80054b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e035      	b.n	8005524 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054c0:	d108      	bne.n	80054d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054c2:	897b      	ldrh	r3, [r7, #10]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054d0:	611a      	str	r2, [r3, #16]
 80054d2:	e01b      	b.n	800550c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054d4:	897b      	ldrh	r3, [r7, #10]
 80054d6:	11db      	asrs	r3, r3, #7
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	f003 0306 	and.w	r3, r3, #6
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	f063 030f 	orn	r3, r3, #15
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	490e      	ldr	r1, [pc, #56]	; (800552c <I2C_MasterRequestWrite+0xfc>)
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 f943 	bl	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e010      	b.n	8005524 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005502:	897b      	ldrh	r3, [r7, #10]
 8005504:	b2da      	uxtb	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4907      	ldr	r1, [pc, #28]	; (8005530 <I2C_MasterRequestWrite+0x100>)
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f933 	bl	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	00010008 	.word	0x00010008
 8005530:	00010002 	.word	0x00010002

08005534 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	460b      	mov	r3, r1
 8005542:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005558:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d006      	beq.n	800556e <I2C_MasterRequestRead+0x3a>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d003      	beq.n	800556e <I2C_MasterRequestRead+0x3a>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800556c:	d108      	bne.n	8005580 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	e00b      	b.n	8005598 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	2b11      	cmp	r3, #17
 8005586:	d107      	bne.n	8005598 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005596:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 f893 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00d      	beq.n	80055cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055be:	d103      	bne.n	80055c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e079      	b.n	80056c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d4:	d108      	bne.n	80055e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055d6:	897b      	ldrh	r3, [r7, #10]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	611a      	str	r2, [r3, #16]
 80055e6:	e05f      	b.n	80056a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055e8:	897b      	ldrh	r3, [r7, #10]
 80055ea:	11db      	asrs	r3, r3, #7
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	f003 0306 	and.w	r3, r3, #6
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f063 030f 	orn	r3, r3, #15
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4930      	ldr	r1, [pc, #192]	; (80056c8 <I2C_MasterRequestRead+0x194>)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f8b9 	bl	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e054      	b.n	80056c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005616:	897b      	ldrh	r3, [r7, #10]
 8005618:	b2da      	uxtb	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4929      	ldr	r1, [pc, #164]	; (80056cc <I2C_MasterRequestRead+0x198>)
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f8a9 	bl	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e044      	b.n	80056c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800565a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f831 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00d      	beq.n	8005690 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005682:	d103      	bne.n	800568c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e017      	b.n	80056c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005690:	897b      	ldrh	r3, [r7, #10]
 8005692:	11db      	asrs	r3, r3, #7
 8005694:	b2db      	uxtb	r3, r3
 8005696:	f003 0306 	and.w	r3, r3, #6
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f063 030e 	orn	r3, r3, #14
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4907      	ldr	r1, [pc, #28]	; (80056cc <I2C_MasterRequestRead+0x198>)
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f865 	bl	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	00010008 	.word	0x00010008
 80056cc:	00010002 	.word	0x00010002

080056d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	4613      	mov	r3, r2
 80056de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056e0:	e025      	b.n	800572e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d021      	beq.n	800572e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ea:	f7fd ffe9 	bl	80036c0 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d116      	bne.n	800572e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f043 0220 	orr.w	r2, r3, #32
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e023      	b.n	8005776 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d10d      	bne.n	8005754 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	43da      	mvns	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4013      	ands	r3, r2
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	bf0c      	ite	eq
 800574a:	2301      	moveq	r3, #1
 800574c:	2300      	movne	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	e00c      	b.n	800576e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	43da      	mvns	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	bf0c      	ite	eq
 8005766:	2301      	moveq	r3, #1
 8005768:	2300      	movne	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	429a      	cmp	r2, r3
 8005772:	d0b6      	beq.n	80056e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800578c:	e051      	b.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800579c:	d123      	bne.n	80057e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f043 0204 	orr.w	r2, r3, #4
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e046      	b.n	8005874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d021      	beq.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ee:	f7fd ff67 	bl	80036c0 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d302      	bcc.n	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d116      	bne.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f043 0220 	orr.w	r2, r3, #32
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e020      	b.n	8005874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	0c1b      	lsrs	r3, r3, #16
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b01      	cmp	r3, #1
 800583a:	d10c      	bne.n	8005856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	43da      	mvns	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4013      	ands	r3, r2
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	e00b      	b.n	800586e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	43da      	mvns	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4013      	ands	r3, r2
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d18d      	bne.n	800578e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005888:	e02d      	b.n	80058e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f8ce 	bl	8005a2c <I2C_IsAcknowledgeFailed>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e02d      	b.n	80058f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a0:	d021      	beq.n	80058e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a2:	f7fd ff0d 	bl	80036c0 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d302      	bcc.n	80058b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d116      	bne.n	80058e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	f043 0220 	orr.w	r2, r3, #32
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e007      	b.n	80058f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f0:	2b80      	cmp	r3, #128	; 0x80
 80058f2:	d1ca      	bne.n	800588a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800590a:	e02d      	b.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f88d 	bl	8005a2c <I2C_IsAcknowledgeFailed>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e02d      	b.n	8005978 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005922:	d021      	beq.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005924:	f7fd fecc 	bl	80036c0 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d302      	bcc.n	800593a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	f043 0220 	orr.w	r2, r3, #32
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e007      	b.n	8005978 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b04      	cmp	r3, #4
 8005974:	d1ca      	bne.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800598c:	e042      	b.n	8005a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b10      	cmp	r3, #16
 800599a:	d119      	bne.n	80059d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0210 	mvn.w	r2, #16
 80059a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e029      	b.n	8005a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d0:	f7fd fe76 	bl	80036c0 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d302      	bcc.n	80059e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d116      	bne.n	8005a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	f043 0220 	orr.w	r2, r3, #32
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e007      	b.n	8005a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1e:	2b40      	cmp	r3, #64	; 0x40
 8005a20:	d1b5      	bne.n	800598e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a42:	d11b      	bne.n	8005a7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	f043 0204 	orr.w	r2, r3, #4
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a96:	2300      	movs	r3, #0
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	4b20      	ldr	r3, [pc, #128]	; (8005b1c <HAL_PWREx_EnableOverDrive+0x90>)
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	4a1f      	ldr	r2, [pc, #124]	; (8005b1c <HAL_PWREx_EnableOverDrive+0x90>)
 8005aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8005aa6:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <HAL_PWREx_EnableOverDrive+0x90>)
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005ab2:	4b1b      	ldr	r3, [pc, #108]	; (8005b20 <HAL_PWREx_EnableOverDrive+0x94>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ab8:	f7fd fe02 	bl	80036c0 <HAL_GetTick>
 8005abc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005abe:	e009      	b.n	8005ad4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ac0:	f7fd fdfe 	bl	80036c0 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ace:	d901      	bls.n	8005ad4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e01f      	b.n	8005b14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ad4:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae0:	d1ee      	bne.n	8005ac0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ae8:	f7fd fdea 	bl	80036c0 <HAL_GetTick>
 8005aec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005aee:	e009      	b.n	8005b04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005af0:	f7fd fde6 	bl	80036c0 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005afe:	d901      	bls.n	8005b04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e007      	b.n	8005b14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b04:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b10:	d1ee      	bne.n	8005af0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	420e0040 	.word	0x420e0040
 8005b24:	40007000 	.word	0x40007000
 8005b28:	420e0044 	.word	0x420e0044

08005b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e18c      	b.n	8005e5a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x24>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b0f      	cmp	r3, #15
 8005b4e:	d904      	bls.n	8005b5a <HAL_RCC_ClockConfig+0x2e>
 8005b50:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8005b54:	4887      	ldr	r0, [pc, #540]	; (8005d74 <HAL_RCC_ClockConfig+0x248>)
 8005b56:	f7fc fffa 	bl	8002b4e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d031      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d02e      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d02b      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d028      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d025      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b05      	cmp	r3, #5
 8005b7c:	d022      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b06      	cmp	r3, #6
 8005b82:	d01f      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b07      	cmp	r3, #7
 8005b88:	d01c      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d019      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b09      	cmp	r3, #9
 8005b94:	d016      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b0a      	cmp	r3, #10
 8005b9a:	d013      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b0b      	cmp	r3, #11
 8005ba0:	d010      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b0c      	cmp	r3, #12
 8005ba6:	d00d      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b0d      	cmp	r3, #13
 8005bac:	d00a      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b0e      	cmp	r3, #14
 8005bb2:	d007      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b0f      	cmp	r3, #15
 8005bb8:	d004      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x98>
 8005bba:	f240 215d 	movw	r1, #605	; 0x25d
 8005bbe:	486d      	ldr	r0, [pc, #436]	; (8005d74 <HAL_RCC_ClockConfig+0x248>)
 8005bc0:	f7fc ffc5 	bl	8002b4e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc4:	4b6c      	ldr	r3, [pc, #432]	; (8005d78 <HAL_RCC_ClockConfig+0x24c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d90c      	bls.n	8005bec <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd2:	4b69      	ldr	r3, [pc, #420]	; (8005d78 <HAL_RCC_ClockConfig+0x24c>)
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	4b67      	ldr	r3, [pc, #412]	; (8005d78 <HAL_RCC_ClockConfig+0x24c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e136      	b.n	8005e5a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d049      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c04:	4b5d      	ldr	r3, [pc, #372]	; (8005d7c <HAL_RCC_ClockConfig+0x250>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	4a5c      	ldr	r2, [pc, #368]	; (8005d7c <HAL_RCC_ClockConfig+0x250>)
 8005c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c1c:	4b57      	ldr	r3, [pc, #348]	; (8005d7c <HAL_RCC_ClockConfig+0x250>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4a56      	ldr	r2, [pc, #344]	; (8005d7c <HAL_RCC_ClockConfig+0x250>)
 8005c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d024      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x14e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b80      	cmp	r3, #128	; 0x80
 8005c36:	d020      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x14e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b90      	cmp	r3, #144	; 0x90
 8005c3e:	d01c      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x14e>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2ba0      	cmp	r3, #160	; 0xa0
 8005c46:	d018      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x14e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2bb0      	cmp	r3, #176	; 0xb0
 8005c4e:	d014      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x14e>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	2bc0      	cmp	r3, #192	; 0xc0
 8005c56:	d010      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x14e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2bd0      	cmp	r3, #208	; 0xd0
 8005c5e:	d00c      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x14e>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2be0      	cmp	r3, #224	; 0xe0
 8005c66:	d008      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x14e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2bf0      	cmp	r3, #240	; 0xf0
 8005c6e:	d004      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x14e>
 8005c70:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005c74:	483f      	ldr	r0, [pc, #252]	; (8005d74 <HAL_RCC_ClockConfig+0x248>)
 8005c76:	f7fc ff6a 	bl	8002b4e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c7a:	4b40      	ldr	r3, [pc, #256]	; (8005d7c <HAL_RCC_ClockConfig+0x250>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	493d      	ldr	r1, [pc, #244]	; (8005d7c <HAL_RCC_ClockConfig+0x250>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d059      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d010      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x196>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d00c      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x196>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d008      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x196>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d004      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x196>
 8005cb8:	f240 2187 	movw	r1, #647	; 0x287
 8005cbc:	482d      	ldr	r0, [pc, #180]	; (8005d74 <HAL_RCC_ClockConfig+0x248>)
 8005cbe:	f7fc ff46 	bl	8002b4e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d107      	bne.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cca:	4b2c      	ldr	r3, [pc, #176]	; (8005d7c <HAL_RCC_ClockConfig+0x250>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d119      	bne.n	8005d0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e0bf      	b.n	8005e5a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d003      	beq.n	8005cea <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cea:	4b24      	ldr	r3, [pc, #144]	; (8005d7c <HAL_RCC_ClockConfig+0x250>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d109      	bne.n	8005d0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e0af      	b.n	8005e5a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cfa:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <HAL_RCC_ClockConfig+0x250>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e0a7      	b.n	8005e5a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <HAL_RCC_ClockConfig+0x250>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f023 0203 	bic.w	r2, r3, #3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	4919      	ldr	r1, [pc, #100]	; (8005d7c <HAL_RCC_ClockConfig+0x250>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d1c:	f7fd fcd0 	bl	80036c0 <HAL_GetTick>
 8005d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d22:	e00a      	b.n	8005d3a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d24:	f7fd fccc 	bl	80036c0 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e08f      	b.n	8005e5a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3a:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <HAL_RCC_ClockConfig+0x250>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 020c 	and.w	r2, r3, #12
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d1eb      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <HAL_RCC_ClockConfig+0x24c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 030f 	and.w	r3, r3, #15
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d212      	bcs.n	8005d80 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5a:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <HAL_RCC_ClockConfig+0x24c>)
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d62:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <HAL_RCC_ClockConfig+0x24c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d007      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e072      	b.n	8005e5a <HAL_RCC_ClockConfig+0x32e>
 8005d74:	0801039c 	.word	0x0801039c
 8005d78:	40023c00 	.word	0x40023c00
 8005d7c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d025      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d018      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x29a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9c:	d013      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x29a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005da6:	d00e      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x29a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005db0:	d009      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x29a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005dba:	d004      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x29a>
 8005dbc:	f240 21c5 	movw	r1, #709	; 0x2c5
 8005dc0:	4828      	ldr	r0, [pc, #160]	; (8005e64 <HAL_RCC_ClockConfig+0x338>)
 8005dc2:	f7fc fec4 	bl	8002b4e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc6:	4b28      	ldr	r3, [pc, #160]	; (8005e68 <HAL_RCC_ClockConfig+0x33c>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	4925      	ldr	r1, [pc, #148]	; (8005e68 <HAL_RCC_ClockConfig+0x33c>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d026      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d018      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x2f2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df4:	d013      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x2f2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005dfe:	d00e      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x2f2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005e08:	d009      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x2f2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005e12:	d004      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x2f2>
 8005e14:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8005e18:	4812      	ldr	r0, [pc, #72]	; (8005e64 <HAL_RCC_ClockConfig+0x338>)
 8005e1a:	f7fc fe98 	bl	8002b4e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e1e:	4b12      	ldr	r3, [pc, #72]	; (8005e68 <HAL_RCC_ClockConfig+0x33c>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	490e      	ldr	r1, [pc, #56]	; (8005e68 <HAL_RCC_ClockConfig+0x33c>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e32:	f000 f855 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 8005e36:	4602      	mov	r2, r0
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <HAL_RCC_ClockConfig+0x33c>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	490a      	ldr	r1, [pc, #40]	; (8005e6c <HAL_RCC_ClockConfig+0x340>)
 8005e44:	5ccb      	ldrb	r3, [r1, r3]
 8005e46:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4a:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <HAL_RCC_ClockConfig+0x344>)
 8005e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e4e:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <HAL_RCC_ClockConfig+0x348>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fd fbf0 	bl	8003638 <HAL_InitTick>

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	0801039c 	.word	0x0801039c
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	08010554 	.word	0x08010554
 8005e70:	20000144 	.word	0x20000144
 8005e74:	20000148 	.word	0x20000148

08005e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e7c:	4b03      	ldr	r3, [pc, #12]	; (8005e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20000144 	.word	0x20000144

08005e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e94:	f7ff fff0 	bl	8005e78 <HAL_RCC_GetHCLKFreq>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	0a9b      	lsrs	r3, r3, #10
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	4903      	ldr	r1, [pc, #12]	; (8005eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ea6:	5ccb      	ldrb	r3, [r1, r3]
 8005ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	08010564 	.word	0x08010564

08005eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ebc:	f7ff ffdc 	bl	8005e78 <HAL_RCC_GetHCLKFreq>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	0b5b      	lsrs	r3, r3, #13
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	4903      	ldr	r1, [pc, #12]	; (8005edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ece:	5ccb      	ldrb	r3, [r1, r3]
 8005ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	08010564 	.word	0x08010564

08005ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ee4:	b088      	sub	sp, #32
 8005ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005efc:	4bce      	ldr	r3, [pc, #824]	; (8006238 <HAL_RCC_GetSysClockFreq+0x358>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 030c 	and.w	r3, r3, #12
 8005f04:	2b0c      	cmp	r3, #12
 8005f06:	f200 818d 	bhi.w	8006224 <HAL_RCC_GetSysClockFreq+0x344>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <HAL_RCC_GetSysClockFreq+0x30>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f45 	.word	0x08005f45
 8005f14:	08006225 	.word	0x08006225
 8005f18:	08006225 	.word	0x08006225
 8005f1c:	08006225 	.word	0x08006225
 8005f20:	08005f4b 	.word	0x08005f4b
 8005f24:	08006225 	.word	0x08006225
 8005f28:	08006225 	.word	0x08006225
 8005f2c:	08006225 	.word	0x08006225
 8005f30:	08005f51 	.word	0x08005f51
 8005f34:	08006225 	.word	0x08006225
 8005f38:	08006225 	.word	0x08006225
 8005f3c:	08006225 	.word	0x08006225
 8005f40:	080060c5 	.word	0x080060c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f44:	4bbd      	ldr	r3, [pc, #756]	; (800623c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005f46:	61bb      	str	r3, [r7, #24]
       break;
 8005f48:	e16f      	b.n	800622a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f4a:	4bbd      	ldr	r3, [pc, #756]	; (8006240 <HAL_RCC_GetSysClockFreq+0x360>)
 8005f4c:	61bb      	str	r3, [r7, #24]
      break;
 8005f4e:	e16c      	b.n	800622a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f50:	4bb9      	ldr	r3, [pc, #740]	; (8006238 <HAL_RCC_GetSysClockFreq+0x358>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f58:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f5a:	4bb7      	ldr	r3, [pc, #732]	; (8006238 <HAL_RCC_GetSysClockFreq+0x358>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d053      	beq.n	800600e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f66:	4bb4      	ldr	r3, [pc, #720]	; (8006238 <HAL_RCC_GetSysClockFreq+0x358>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	099b      	lsrs	r3, r3, #6
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f76:	f04f 0100 	mov.w	r1, #0
 8005f7a:	ea02 0400 	and.w	r4, r2, r0
 8005f7e:	603c      	str	r4, [r7, #0]
 8005f80:	400b      	ands	r3, r1
 8005f82:	607b      	str	r3, [r7, #4]
 8005f84:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f88:	4620      	mov	r0, r4
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	014b      	lsls	r3, r1, #5
 8005f96:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f9a:	0142      	lsls	r2, r0, #5
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4623      	mov	r3, r4
 8005fa2:	1ac0      	subs	r0, r0, r3
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	eb61 0103 	sbc.w	r1, r1, r3
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	018b      	lsls	r3, r1, #6
 8005fb4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005fb8:	0182      	lsls	r2, r0, #6
 8005fba:	1a12      	subs	r2, r2, r0
 8005fbc:	eb63 0301 	sbc.w	r3, r3, r1
 8005fc0:	f04f 0000 	mov.w	r0, #0
 8005fc4:	f04f 0100 	mov.w	r1, #0
 8005fc8:	00d9      	lsls	r1, r3, #3
 8005fca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fce:	00d0      	lsls	r0, r2, #3
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	1852      	adds	r2, r2, r1
 8005fd8:	4629      	mov	r1, r5
 8005fda:	eb43 0101 	adc.w	r1, r3, r1
 8005fde:	460b      	mov	r3, r1
 8005fe0:	f04f 0000 	mov.w	r0, #0
 8005fe4:	f04f 0100 	mov.w	r1, #0
 8005fe8:	0259      	lsls	r1, r3, #9
 8005fea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005fee:	0250      	lsls	r0, r2, #9
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	f7fa fd9e 	bl	8000b40 <__aeabi_uldivmod>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4613      	mov	r3, r2
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	e04c      	b.n	80060a8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800600e:	4b8a      	ldr	r3, [pc, #552]	; (8006238 <HAL_RCC_GetSysClockFreq+0x358>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	099b      	lsrs	r3, r3, #6
 8006014:	461a      	mov	r2, r3
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800601e:	f04f 0100 	mov.w	r1, #0
 8006022:	ea02 0a00 	and.w	sl, r2, r0
 8006026:	ea03 0b01 	and.w	fp, r3, r1
 800602a:	4650      	mov	r0, sl
 800602c:	4659      	mov	r1, fp
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	014b      	lsls	r3, r1, #5
 8006038:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800603c:	0142      	lsls	r2, r0, #5
 800603e:	4610      	mov	r0, r2
 8006040:	4619      	mov	r1, r3
 8006042:	ebb0 000a 	subs.w	r0, r0, sl
 8006046:	eb61 010b 	sbc.w	r1, r1, fp
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	018b      	lsls	r3, r1, #6
 8006054:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006058:	0182      	lsls	r2, r0, #6
 800605a:	1a12      	subs	r2, r2, r0
 800605c:	eb63 0301 	sbc.w	r3, r3, r1
 8006060:	f04f 0000 	mov.w	r0, #0
 8006064:	f04f 0100 	mov.w	r1, #0
 8006068:	00d9      	lsls	r1, r3, #3
 800606a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800606e:	00d0      	lsls	r0, r2, #3
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	eb12 020a 	adds.w	r2, r2, sl
 8006078:	eb43 030b 	adc.w	r3, r3, fp
 800607c:	f04f 0000 	mov.w	r0, #0
 8006080:	f04f 0100 	mov.w	r1, #0
 8006084:	0299      	lsls	r1, r3, #10
 8006086:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800608a:	0290      	lsls	r0, r2, #10
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4610      	mov	r0, r2
 8006092:	4619      	mov	r1, r3
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	461a      	mov	r2, r3
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	f7fa fd50 	bl	8000b40 <__aeabi_uldivmod>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4613      	mov	r3, r2
 80060a6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060a8:	4b63      	ldr	r3, [pc, #396]	; (8006238 <HAL_RCC_GetSysClockFreq+0x358>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	0c1b      	lsrs	r3, r3, #16
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	3301      	adds	r3, #1
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80060b8:	69fa      	ldr	r2, [r7, #28]
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c0:	61bb      	str	r3, [r7, #24]
      break;
 80060c2:	e0b2      	b.n	800622a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060c4:	4b5c      	ldr	r3, [pc, #368]	; (8006238 <HAL_RCC_GetSysClockFreq+0x358>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060cc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ce:	4b5a      	ldr	r3, [pc, #360]	; (8006238 <HAL_RCC_GetSysClockFreq+0x358>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d04d      	beq.n	8006176 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060da:	4b57      	ldr	r3, [pc, #348]	; (8006238 <HAL_RCC_GetSysClockFreq+0x358>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	099b      	lsrs	r3, r3, #6
 80060e0:	461a      	mov	r2, r3
 80060e2:	f04f 0300 	mov.w	r3, #0
 80060e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060ea:	f04f 0100 	mov.w	r1, #0
 80060ee:	ea02 0800 	and.w	r8, r2, r0
 80060f2:	ea03 0901 	and.w	r9, r3, r1
 80060f6:	4640      	mov	r0, r8
 80060f8:	4649      	mov	r1, r9
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	014b      	lsls	r3, r1, #5
 8006104:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006108:	0142      	lsls	r2, r0, #5
 800610a:	4610      	mov	r0, r2
 800610c:	4619      	mov	r1, r3
 800610e:	ebb0 0008 	subs.w	r0, r0, r8
 8006112:	eb61 0109 	sbc.w	r1, r1, r9
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	f04f 0300 	mov.w	r3, #0
 800611e:	018b      	lsls	r3, r1, #6
 8006120:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006124:	0182      	lsls	r2, r0, #6
 8006126:	1a12      	subs	r2, r2, r0
 8006128:	eb63 0301 	sbc.w	r3, r3, r1
 800612c:	f04f 0000 	mov.w	r0, #0
 8006130:	f04f 0100 	mov.w	r1, #0
 8006134:	00d9      	lsls	r1, r3, #3
 8006136:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800613a:	00d0      	lsls	r0, r2, #3
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	eb12 0208 	adds.w	r2, r2, r8
 8006144:	eb43 0309 	adc.w	r3, r3, r9
 8006148:	f04f 0000 	mov.w	r0, #0
 800614c:	f04f 0100 	mov.w	r1, #0
 8006150:	0259      	lsls	r1, r3, #9
 8006152:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006156:	0250      	lsls	r0, r2, #9
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4610      	mov	r0, r2
 800615e:	4619      	mov	r1, r3
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	461a      	mov	r2, r3
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	f7fa fcea 	bl	8000b40 <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4613      	mov	r3, r2
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	e04a      	b.n	800620c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006176:	4b30      	ldr	r3, [pc, #192]	; (8006238 <HAL_RCC_GetSysClockFreq+0x358>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	099b      	lsrs	r3, r3, #6
 800617c:	461a      	mov	r2, r3
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006186:	f04f 0100 	mov.w	r1, #0
 800618a:	ea02 0400 	and.w	r4, r2, r0
 800618e:	ea03 0501 	and.w	r5, r3, r1
 8006192:	4620      	mov	r0, r4
 8006194:	4629      	mov	r1, r5
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	014b      	lsls	r3, r1, #5
 80061a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061a4:	0142      	lsls	r2, r0, #5
 80061a6:	4610      	mov	r0, r2
 80061a8:	4619      	mov	r1, r3
 80061aa:	1b00      	subs	r0, r0, r4
 80061ac:	eb61 0105 	sbc.w	r1, r1, r5
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	018b      	lsls	r3, r1, #6
 80061ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061be:	0182      	lsls	r2, r0, #6
 80061c0:	1a12      	subs	r2, r2, r0
 80061c2:	eb63 0301 	sbc.w	r3, r3, r1
 80061c6:	f04f 0000 	mov.w	r0, #0
 80061ca:	f04f 0100 	mov.w	r1, #0
 80061ce:	00d9      	lsls	r1, r3, #3
 80061d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061d4:	00d0      	lsls	r0, r2, #3
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	1912      	adds	r2, r2, r4
 80061dc:	eb45 0303 	adc.w	r3, r5, r3
 80061e0:	f04f 0000 	mov.w	r0, #0
 80061e4:	f04f 0100 	mov.w	r1, #0
 80061e8:	0299      	lsls	r1, r3, #10
 80061ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80061ee:	0290      	lsls	r0, r2, #10
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4610      	mov	r0, r2
 80061f6:	4619      	mov	r1, r3
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	461a      	mov	r2, r3
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	f7fa fc9e 	bl	8000b40 <__aeabi_uldivmod>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4613      	mov	r3, r2
 800620a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800620c:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <HAL_RCC_GetSysClockFreq+0x358>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	0f1b      	lsrs	r3, r3, #28
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006220:	61bb      	str	r3, [r7, #24]
      break;
 8006222:	e002      	b.n	800622a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006224:	4b05      	ldr	r3, [pc, #20]	; (800623c <HAL_RCC_GetSysClockFreq+0x35c>)
 8006226:	61bb      	str	r3, [r7, #24]
      break;
 8006228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800622a:	69bb      	ldr	r3, [r7, #24]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3720      	adds	r7, #32
 8006230:	46bd      	mov	sp, r7
 8006232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006236:	bf00      	nop
 8006238:	40023800 	.word	0x40023800
 800623c:	00f42400 	.word	0x00f42400
 8006240:	007a1200 	.word	0x007a1200

08006244 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e34b      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b0f      	cmp	r3, #15
 800625c:	d904      	bls.n	8006268 <HAL_RCC_OscConfig+0x24>
 800625e:	f640 5112 	movw	r1, #3346	; 0xd12
 8006262:	48a5      	ldr	r0, [pc, #660]	; (80064f8 <HAL_RCC_OscConfig+0x2b4>)
 8006264:	f7fc fc73 	bl	8002b4e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 8096 	beq.w	80063a2 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00e      	beq.n	800629c <HAL_RCC_OscConfig+0x58>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006286:	d009      	beq.n	800629c <HAL_RCC_OscConfig+0x58>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006290:	d004      	beq.n	800629c <HAL_RCC_OscConfig+0x58>
 8006292:	f640 5117 	movw	r1, #3351	; 0xd17
 8006296:	4898      	ldr	r0, [pc, #608]	; (80064f8 <HAL_RCC_OscConfig+0x2b4>)
 8006298:	f7fc fc59 	bl	8002b4e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800629c:	4b97      	ldr	r3, [pc, #604]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 030c 	and.w	r3, r3, #12
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d019      	beq.n	80062dc <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062a8:	4b94      	ldr	r3, [pc, #592]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d106      	bne.n	80062c2 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062b4:	4b91      	ldr	r3, [pc, #580]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062c0:	d00c      	beq.n	80062dc <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062c2:	4b8e      	ldr	r3, [pc, #568]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062ca:	2b0c      	cmp	r3, #12
 80062cc:	d112      	bne.n	80062f4 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ce:	4b8b      	ldr	r3, [pc, #556]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062da:	d10b      	bne.n	80062f4 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062dc:	4b87      	ldr	r3, [pc, #540]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d05b      	beq.n	80063a0 <HAL_RCC_OscConfig+0x15c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d157      	bne.n	80063a0 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e2fc      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fc:	d106      	bne.n	800630c <HAL_RCC_OscConfig+0xc8>
 80062fe:	4b7f      	ldr	r3, [pc, #508]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a7e      	ldr	r2, [pc, #504]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	e01d      	b.n	8006348 <HAL_RCC_OscConfig+0x104>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006314:	d10c      	bne.n	8006330 <HAL_RCC_OscConfig+0xec>
 8006316:	4b79      	ldr	r3, [pc, #484]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a78      	ldr	r2, [pc, #480]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 800631c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	4b76      	ldr	r3, [pc, #472]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a75      	ldr	r2, [pc, #468]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	e00b      	b.n	8006348 <HAL_RCC_OscConfig+0x104>
 8006330:	4b72      	ldr	r3, [pc, #456]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a71      	ldr	r2, [pc, #452]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	4b6f      	ldr	r3, [pc, #444]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a6e      	ldr	r2, [pc, #440]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d013      	beq.n	8006378 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fd f9b6 	bl	80036c0 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006358:	f7fd f9b2 	bl	80036c0 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	; 0x64
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e2c1      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636a:	4b64      	ldr	r3, [pc, #400]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x114>
 8006376:	e014      	b.n	80063a2 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fd f9a2 	bl	80036c0 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006380:	f7fd f99e 	bl	80036c0 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b64      	cmp	r3, #100	; 0x64
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e2ad      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006392:	4b5a      	ldr	r3, [pc, #360]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCC_OscConfig+0x13c>
 800639e:	e000      	b.n	80063a2 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 8086 	beq.w	80064bc <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d008      	beq.n	80063ca <HAL_RCC_OscConfig+0x186>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d004      	beq.n	80063ca <HAL_RCC_OscConfig+0x186>
 80063c0:	f640 514f 	movw	r1, #3407	; 0xd4f
 80063c4:	484c      	ldr	r0, [pc, #304]	; (80064f8 <HAL_RCC_OscConfig+0x2b4>)
 80063c6:	f7fc fbc2 	bl	8002b4e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b1f      	cmp	r3, #31
 80063d0:	d904      	bls.n	80063dc <HAL_RCC_OscConfig+0x198>
 80063d2:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 80063d6:	4848      	ldr	r0, [pc, #288]	; (80064f8 <HAL_RCC_OscConfig+0x2b4>)
 80063d8:	f7fc fbb9 	bl	8002b4e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063dc:	4b47      	ldr	r3, [pc, #284]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 030c 	and.w	r3, r3, #12
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d017      	beq.n	8006418 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063e8:	4b44      	ldr	r3, [pc, #272]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d105      	bne.n	8006400 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063f4:	4b41      	ldr	r3, [pc, #260]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006400:	4b3e      	ldr	r3, [pc, #248]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006408:	2b0c      	cmp	r3, #12
 800640a:	d11c      	bne.n	8006446 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800640c:	4b3b      	ldr	r3, [pc, #236]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d116      	bne.n	8006446 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006418:	4b38      	ldr	r3, [pc, #224]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <HAL_RCC_OscConfig+0x1ec>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d001      	beq.n	8006430 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e25e      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006430:	4b32      	ldr	r3, [pc, #200]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	492f      	ldr	r1, [pc, #188]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006440:	4313      	orrs	r3, r2
 8006442:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006444:	e03a      	b.n	80064bc <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d020      	beq.n	8006490 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800644e:	4b2c      	ldr	r3, [pc, #176]	; (8006500 <HAL_RCC_OscConfig+0x2bc>)
 8006450:	2201      	movs	r2, #1
 8006452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006454:	f7fd f934 	bl	80036c0 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800645c:	f7fd f930 	bl	80036c0 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e23f      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800646e:	4b23      	ldr	r3, [pc, #140]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0f0      	beq.n	800645c <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800647a:	4b20      	ldr	r3, [pc, #128]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	491c      	ldr	r1, [pc, #112]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 800648a:	4313      	orrs	r3, r2
 800648c:	600b      	str	r3, [r1, #0]
 800648e:	e015      	b.n	80064bc <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006490:	4b1b      	ldr	r3, [pc, #108]	; (8006500 <HAL_RCC_OscConfig+0x2bc>)
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006496:	f7fd f913 	bl	80036c0 <HAL_GetTick>
 800649a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800649c:	e008      	b.n	80064b0 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800649e:	f7fd f90f 	bl	80036c0 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e21e      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b0:	4b12      	ldr	r3, [pc, #72]	; (80064fc <HAL_RCC_OscConfig+0x2b8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1f0      	bne.n	800649e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d045      	beq.n	8006554 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_RCC_OscConfig+0x29e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d004      	beq.n	80064e2 <HAL_RCC_OscConfig+0x29e>
 80064d8:	f640 5196 	movw	r1, #3478	; 0xd96
 80064dc:	4806      	ldr	r0, [pc, #24]	; (80064f8 <HAL_RCC_OscConfig+0x2b4>)
 80064de:	f7fc fb36 	bl	8002b4e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d01e      	beq.n	8006528 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ea:	4b06      	ldr	r3, [pc, #24]	; (8006504 <HAL_RCC_OscConfig+0x2c0>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f0:	f7fd f8e6 	bl	80036c0 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f6:	e010      	b.n	800651a <HAL_RCC_OscConfig+0x2d6>
 80064f8:	080103d4 	.word	0x080103d4
 80064fc:	40023800 	.word	0x40023800
 8006500:	42470000 	.word	0x42470000
 8006504:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006508:	f7fd f8da 	bl	80036c0 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e1e9      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800651a:	4ba4      	ldr	r3, [pc, #656]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 800651c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0f0      	beq.n	8006508 <HAL_RCC_OscConfig+0x2c4>
 8006526:	e015      	b.n	8006554 <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006528:	4ba1      	ldr	r3, [pc, #644]	; (80067b0 <HAL_RCC_OscConfig+0x56c>)
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652e:	f7fd f8c7 	bl	80036c0 <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006534:	e008      	b.n	8006548 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006536:	f7fd f8c3 	bl	80036c0 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e1d2      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006548:	4b98      	ldr	r3, [pc, #608]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 800654a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f0      	bne.n	8006536 <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 80a8 	beq.w	80066b2 <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006562:	2300      	movs	r3, #0
 8006564:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00c      	beq.n	8006588 <HAL_RCC_OscConfig+0x344>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d008      	beq.n	8006588 <HAL_RCC_OscConfig+0x344>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b05      	cmp	r3, #5
 800657c:	d004      	beq.n	8006588 <HAL_RCC_OscConfig+0x344>
 800657e:	f640 51c2 	movw	r1, #3522	; 0xdc2
 8006582:	488c      	ldr	r0, [pc, #560]	; (80067b4 <HAL_RCC_OscConfig+0x570>)
 8006584:	f7fc fae3 	bl	8002b4e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006588:	4b88      	ldr	r3, [pc, #544]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10f      	bne.n	80065b4 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006594:	2300      	movs	r3, #0
 8006596:	60bb      	str	r3, [r7, #8]
 8006598:	4b84      	ldr	r3, [pc, #528]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	4a83      	ldr	r2, [pc, #524]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 800659e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a2:	6413      	str	r3, [r2, #64]	; 0x40
 80065a4:	4b81      	ldr	r3, [pc, #516]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065b0:	2301      	movs	r3, #1
 80065b2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b4:	4b80      	ldr	r3, [pc, #512]	; (80067b8 <HAL_RCC_OscConfig+0x574>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d118      	bne.n	80065f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065c0:	4b7d      	ldr	r3, [pc, #500]	; (80067b8 <HAL_RCC_OscConfig+0x574>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a7c      	ldr	r2, [pc, #496]	; (80067b8 <HAL_RCC_OscConfig+0x574>)
 80065c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065cc:	f7fd f878 	bl	80036c0 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065d4:	f7fd f874 	bl	80036c0 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e183      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e6:	4b74      	ldr	r3, [pc, #464]	; (80067b8 <HAL_RCC_OscConfig+0x574>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0f0      	beq.n	80065d4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d106      	bne.n	8006608 <HAL_RCC_OscConfig+0x3c4>
 80065fa:	4b6c      	ldr	r3, [pc, #432]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 80065fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fe:	4a6b      	ldr	r2, [pc, #428]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 8006600:	f043 0301 	orr.w	r3, r3, #1
 8006604:	6713      	str	r3, [r2, #112]	; 0x70
 8006606:	e01c      	b.n	8006642 <HAL_RCC_OscConfig+0x3fe>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b05      	cmp	r3, #5
 800660e:	d10c      	bne.n	800662a <HAL_RCC_OscConfig+0x3e6>
 8006610:	4b66      	ldr	r3, [pc, #408]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006614:	4a65      	ldr	r2, [pc, #404]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 8006616:	f043 0304 	orr.w	r3, r3, #4
 800661a:	6713      	str	r3, [r2, #112]	; 0x70
 800661c:	4b63      	ldr	r3, [pc, #396]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 800661e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006620:	4a62      	ldr	r2, [pc, #392]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 8006622:	f043 0301 	orr.w	r3, r3, #1
 8006626:	6713      	str	r3, [r2, #112]	; 0x70
 8006628:	e00b      	b.n	8006642 <HAL_RCC_OscConfig+0x3fe>
 800662a:	4b60      	ldr	r3, [pc, #384]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 800662c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662e:	4a5f      	ldr	r2, [pc, #380]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	6713      	str	r3, [r2, #112]	; 0x70
 8006636:	4b5d      	ldr	r3, [pc, #372]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 8006638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663a:	4a5c      	ldr	r2, [pc, #368]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 800663c:	f023 0304 	bic.w	r3, r3, #4
 8006640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d015      	beq.n	8006676 <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664a:	f7fd f839 	bl	80036c0 <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006650:	e00a      	b.n	8006668 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006652:	f7fd f835 	bl	80036c0 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006660:	4293      	cmp	r3, r2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e142      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006668:	4b50      	ldr	r3, [pc, #320]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 800666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0ee      	beq.n	8006652 <HAL_RCC_OscConfig+0x40e>
 8006674:	e014      	b.n	80066a0 <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006676:	f7fd f823 	bl	80036c0 <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800667c:	e00a      	b.n	8006694 <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800667e:	f7fd f81f 	bl	80036c0 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	f241 3288 	movw	r2, #5000	; 0x1388
 800668c:	4293      	cmp	r3, r2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e12c      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006694:	4b45      	ldr	r3, [pc, #276]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 8006696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1ee      	bne.n	800667e <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d105      	bne.n	80066b2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066a6:	4b41      	ldr	r3, [pc, #260]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	4a40      	ldr	r2, [pc, #256]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 80066ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00c      	beq.n	80066d4 <HAL_RCC_OscConfig+0x490>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d008      	beq.n	80066d4 <HAL_RCC_OscConfig+0x490>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d004      	beq.n	80066d4 <HAL_RCC_OscConfig+0x490>
 80066ca:	f640 6105 	movw	r1, #3589	; 0xe05
 80066ce:	4839      	ldr	r0, [pc, #228]	; (80067b4 <HAL_RCC_OscConfig+0x570>)
 80066d0:	f7fc fa3d 	bl	8002b4e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 8107 	beq.w	80068ec <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066de:	4b33      	ldr	r3, [pc, #204]	; (80067ac <HAL_RCC_OscConfig+0x568>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 030c 	and.w	r3, r3, #12
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	f000 80c0 	beq.w	800686c <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	f040 80a4 	bne.w	800683e <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <HAL_RCC_OscConfig+0x4ce>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006706:	d004      	beq.n	8006712 <HAL_RCC_OscConfig+0x4ce>
 8006708:	f640 610e 	movw	r1, #3598	; 0xe0e
 800670c:	4829      	ldr	r0, [pc, #164]	; (80067b4 <HAL_RCC_OscConfig+0x570>)
 800670e:	f7fc fa1e 	bl	8002b4e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	2b3f      	cmp	r3, #63	; 0x3f
 8006718:	d904      	bls.n	8006724 <HAL_RCC_OscConfig+0x4e0>
 800671a:	f640 610f 	movw	r1, #3599	; 0xe0f
 800671e:	4825      	ldr	r0, [pc, #148]	; (80067b4 <HAL_RCC_OscConfig+0x570>)
 8006720:	f7fc fa15 	bl	8002b4e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	2b31      	cmp	r3, #49	; 0x31
 800672a:	d904      	bls.n	8006736 <HAL_RCC_OscConfig+0x4f2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006734:	d904      	bls.n	8006740 <HAL_RCC_OscConfig+0x4fc>
 8006736:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800673a:	481e      	ldr	r0, [pc, #120]	; (80067b4 <HAL_RCC_OscConfig+0x570>)
 800673c:	f7fc fa07 	bl	8002b4e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	2b02      	cmp	r3, #2
 8006746:	d010      	beq.n	800676a <HAL_RCC_OscConfig+0x526>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	2b04      	cmp	r3, #4
 800674e:	d00c      	beq.n	800676a <HAL_RCC_OscConfig+0x526>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	2b06      	cmp	r3, #6
 8006756:	d008      	beq.n	800676a <HAL_RCC_OscConfig+0x526>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675c:	2b08      	cmp	r3, #8
 800675e:	d004      	beq.n	800676a <HAL_RCC_OscConfig+0x526>
 8006760:	f640 6111 	movw	r1, #3601	; 0xe11
 8006764:	4813      	ldr	r0, [pc, #76]	; (80067b4 <HAL_RCC_OscConfig+0x570>)
 8006766:	f7fc f9f2 	bl	8002b4e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	2b01      	cmp	r3, #1
 8006770:	d903      	bls.n	800677a <HAL_RCC_OscConfig+0x536>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	2b0f      	cmp	r3, #15
 8006778:	d904      	bls.n	8006784 <HAL_RCC_OscConfig+0x540>
 800677a:	f640 6112 	movw	r1, #3602	; 0xe12
 800677e:	480d      	ldr	r0, [pc, #52]	; (80067b4 <HAL_RCC_OscConfig+0x570>)
 8006780:	f7fc f9e5 	bl	8002b4e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006788:	2b01      	cmp	r3, #1
 800678a:	d903      	bls.n	8006794 <HAL_RCC_OscConfig+0x550>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	2b07      	cmp	r3, #7
 8006792:	d904      	bls.n	800679e <HAL_RCC_OscConfig+0x55a>
 8006794:	f640 6113 	movw	r1, #3603	; 0xe13
 8006798:	4806      	ldr	r0, [pc, #24]	; (80067b4 <HAL_RCC_OscConfig+0x570>)
 800679a:	f7fc f9d8 	bl	8002b4e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800679e:	4b07      	ldr	r3, [pc, #28]	; (80067bc <HAL_RCC_OscConfig+0x578>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fc ff8c 	bl	80036c0 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067aa:	e012      	b.n	80067d2 <HAL_RCC_OscConfig+0x58e>
 80067ac:	40023800 	.word	0x40023800
 80067b0:	42470e80 	.word	0x42470e80
 80067b4:	080103d4 	.word	0x080103d4
 80067b8:	40007000 	.word	0x40007000
 80067bc:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067c0:	f7fc ff7e 	bl	80036c0 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e08d      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067d2:	4b49      	ldr	r3, [pc, #292]	; (80068f8 <HAL_RCC_OscConfig+0x6b4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69da      	ldr	r2, [r3, #28]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	019b      	lsls	r3, r3, #6
 80067ee:	431a      	orrs	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	3b01      	subs	r3, #1
 80067f8:	041b      	lsls	r3, r3, #16
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	061b      	lsls	r3, r3, #24
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006808:	071b      	lsls	r3, r3, #28
 800680a:	493b      	ldr	r1, [pc, #236]	; (80068f8 <HAL_RCC_OscConfig+0x6b4>)
 800680c:	4313      	orrs	r3, r2
 800680e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006810:	4b3a      	ldr	r3, [pc, #232]	; (80068fc <HAL_RCC_OscConfig+0x6b8>)
 8006812:	2201      	movs	r2, #1
 8006814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006816:	f7fc ff53 	bl	80036c0 <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800681c:	e008      	b.n	8006830 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800681e:	f7fc ff4f 	bl	80036c0 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d901      	bls.n	8006830 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e05e      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006830:	4b31      	ldr	r3, [pc, #196]	; (80068f8 <HAL_RCC_OscConfig+0x6b4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0f0      	beq.n	800681e <HAL_RCC_OscConfig+0x5da>
 800683c:	e056      	b.n	80068ec <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683e:	4b2f      	ldr	r3, [pc, #188]	; (80068fc <HAL_RCC_OscConfig+0x6b8>)
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fc ff3c 	bl	80036c0 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684c:	f7fc ff38 	bl	80036c0 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e047      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800685e:	4b26      	ldr	r3, [pc, #152]	; (80068f8 <HAL_RCC_OscConfig+0x6b4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1f0      	bne.n	800684c <HAL_RCC_OscConfig+0x608>
 800686a:	e03f      	b.n	80068ec <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e03a      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006878:	4b1f      	ldr	r3, [pc, #124]	; (80068f8 <HAL_RCC_OscConfig+0x6b4>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d030      	beq.n	80068e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006890:	429a      	cmp	r2, r3
 8006892:	d129      	bne.n	80068e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800689e:	429a      	cmp	r2, r3
 80068a0:	d122      	bne.n	80068e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068a8:	4013      	ands	r3, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d119      	bne.n	80068e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	3b01      	subs	r3, #1
 80068c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d10f      	bne.n	80068e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d107      	bne.n	80068e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d001      	beq.n	80068ec <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e000      	b.n	80068ee <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	40023800 	.word	0x40023800
 80068fc:	42470060 	.word	0x42470060

08006900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e184      	b.n	8006c1c <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a72      	ldr	r2, [pc, #456]	; (8006ae0 <HAL_SPI_Init+0x1e0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d013      	beq.n	8006944 <HAL_SPI_Init+0x44>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a70      	ldr	r2, [pc, #448]	; (8006ae4 <HAL_SPI_Init+0x1e4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00e      	beq.n	8006944 <HAL_SPI_Init+0x44>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a6f      	ldr	r2, [pc, #444]	; (8006ae8 <HAL_SPI_Init+0x1e8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d009      	beq.n	8006944 <HAL_SPI_Init+0x44>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a6d      	ldr	r2, [pc, #436]	; (8006aec <HAL_SPI_Init+0x1ec>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <HAL_SPI_Init+0x44>
 800693a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800693e:	486c      	ldr	r0, [pc, #432]	; (8006af0 <HAL_SPI_Init+0x1f0>)
 8006940:	f7fc f905 	bl	8002b4e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d009      	beq.n	8006960 <HAL_SPI_Init+0x60>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006954:	d004      	beq.n	8006960 <HAL_SPI_Init+0x60>
 8006956:	f240 1143 	movw	r1, #323	; 0x143
 800695a:	4865      	ldr	r0, [pc, #404]	; (8006af0 <HAL_SPI_Init+0x1f0>)
 800695c:	f7fc f8f7 	bl	8002b4e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00e      	beq.n	8006986 <HAL_SPI_Init+0x86>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006970:	d009      	beq.n	8006986 <HAL_SPI_Init+0x86>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697a:	d004      	beq.n	8006986 <HAL_SPI_Init+0x86>
 800697c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006980:	485b      	ldr	r0, [pc, #364]	; (8006af0 <HAL_SPI_Init+0x1f0>)
 8006982:	f7fc f8e4 	bl	8002b4e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698e:	d008      	beq.n	80069a2 <HAL_SPI_Init+0xa2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d004      	beq.n	80069a2 <HAL_SPI_Init+0xa2>
 8006998:	f240 1145 	movw	r1, #325	; 0x145
 800699c:	4854      	ldr	r0, [pc, #336]	; (8006af0 <HAL_SPI_Init+0x1f0>)
 800699e:	f7fc f8d6 	bl	8002b4e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069aa:	d00d      	beq.n	80069c8 <HAL_SPI_Init+0xc8>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d009      	beq.n	80069c8 <HAL_SPI_Init+0xc8>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069bc:	d004      	beq.n	80069c8 <HAL_SPI_Init+0xc8>
 80069be:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80069c2:	484b      	ldr	r0, [pc, #300]	; (8006af0 <HAL_SPI_Init+0x1f0>)
 80069c4:	f7fc f8c3 	bl	8002b4e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d020      	beq.n	8006a12 <HAL_SPI_Init+0x112>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d01c      	beq.n	8006a12 <HAL_SPI_Init+0x112>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	2b10      	cmp	r3, #16
 80069de:	d018      	beq.n	8006a12 <HAL_SPI_Init+0x112>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	2b18      	cmp	r3, #24
 80069e6:	d014      	beq.n	8006a12 <HAL_SPI_Init+0x112>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	d010      	beq.n	8006a12 <HAL_SPI_Init+0x112>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	2b28      	cmp	r3, #40	; 0x28
 80069f6:	d00c      	beq.n	8006a12 <HAL_SPI_Init+0x112>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	2b30      	cmp	r3, #48	; 0x30
 80069fe:	d008      	beq.n	8006a12 <HAL_SPI_Init+0x112>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	2b38      	cmp	r3, #56	; 0x38
 8006a06:	d004      	beq.n	8006a12 <HAL_SPI_Init+0x112>
 8006a08:	f240 1147 	movw	r1, #327	; 0x147
 8006a0c:	4838      	ldr	r0, [pc, #224]	; (8006af0 <HAL_SPI_Init+0x1f0>)
 8006a0e:	f7fc f89e 	bl	8002b4e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d008      	beq.n	8006a2c <HAL_SPI_Init+0x12c>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	2b80      	cmp	r3, #128	; 0x80
 8006a20:	d004      	beq.n	8006a2c <HAL_SPI_Init+0x12c>
 8006a22:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006a26:	4832      	ldr	r0, [pc, #200]	; (8006af0 <HAL_SPI_Init+0x1f0>)
 8006a28:	f7fc f891 	bl	8002b4e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <HAL_SPI_Init+0x146>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	2b10      	cmp	r3, #16
 8006a3a:	d004      	beq.n	8006a46 <HAL_SPI_Init+0x146>
 8006a3c:	f240 1149 	movw	r1, #329	; 0x149
 8006a40:	482b      	ldr	r0, [pc, #172]	; (8006af0 <HAL_SPI_Init+0x1f0>)
 8006a42:	f7fc f884 	bl	8002b4e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d152      	bne.n	8006af4 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d008      	beq.n	8006a68 <HAL_SPI_Init+0x168>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d004      	beq.n	8006a68 <HAL_SPI_Init+0x168>
 8006a5e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006a62:	4823      	ldr	r0, [pc, #140]	; (8006af0 <HAL_SPI_Init+0x1f0>)
 8006a64:	f7fc f873 	bl	8002b4e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d008      	beq.n	8006a82 <HAL_SPI_Init+0x182>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d004      	beq.n	8006a82 <HAL_SPI_Init+0x182>
 8006a78:	f240 114d 	movw	r1, #333	; 0x14d
 8006a7c:	481c      	ldr	r0, [pc, #112]	; (8006af0 <HAL_SPI_Init+0x1f0>)
 8006a7e:	f7fc f866 	bl	8002b4e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a8a:	d125      	bne.n	8006ad8 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d05a      	beq.n	8006b4a <HAL_SPI_Init+0x24a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d056      	beq.n	8006b4a <HAL_SPI_Init+0x24a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d052      	beq.n	8006b4a <HAL_SPI_Init+0x24a>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	2b18      	cmp	r3, #24
 8006aaa:	d04e      	beq.n	8006b4a <HAL_SPI_Init+0x24a>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d04a      	beq.n	8006b4a <HAL_SPI_Init+0x24a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	2b28      	cmp	r3, #40	; 0x28
 8006aba:	d046      	beq.n	8006b4a <HAL_SPI_Init+0x24a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	2b30      	cmp	r3, #48	; 0x30
 8006ac2:	d042      	beq.n	8006b4a <HAL_SPI_Init+0x24a>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	2b38      	cmp	r3, #56	; 0x38
 8006aca:	d03e      	beq.n	8006b4a <HAL_SPI_Init+0x24a>
 8006acc:	f240 1151 	movw	r1, #337	; 0x151
 8006ad0:	4807      	ldr	r0, [pc, #28]	; (8006af0 <HAL_SPI_Init+0x1f0>)
 8006ad2:	f7fc f83c 	bl	8002b4e <assert_failed>
 8006ad6:	e038      	b.n	8006b4a <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	61da      	str	r2, [r3, #28]
 8006ade:	e034      	b.n	8006b4a <HAL_SPI_Init+0x24a>
 8006ae0:	40013000 	.word	0x40013000
 8006ae4:	40003800 	.word	0x40003800
 8006ae8:	40003c00 	.word	0x40003c00
 8006aec:	40013400 	.word	0x40013400
 8006af0:	08010410 	.word	0x08010410
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d020      	beq.n	8006b3e <HAL_SPI_Init+0x23e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d01c      	beq.n	8006b3e <HAL_SPI_Init+0x23e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d018      	beq.n	8006b3e <HAL_SPI_Init+0x23e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	2b18      	cmp	r3, #24
 8006b12:	d014      	beq.n	8006b3e <HAL_SPI_Init+0x23e>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d010      	beq.n	8006b3e <HAL_SPI_Init+0x23e>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	2b28      	cmp	r3, #40	; 0x28
 8006b22:	d00c      	beq.n	8006b3e <HAL_SPI_Init+0x23e>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	2b30      	cmp	r3, #48	; 0x30
 8006b2a:	d008      	beq.n	8006b3e <HAL_SPI_Init+0x23e>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	2b38      	cmp	r3, #56	; 0x38
 8006b32:	d004      	beq.n	8006b3e <HAL_SPI_Init+0x23e>
 8006b34:	f240 115b 	movw	r1, #347	; 0x15b
 8006b38:	483a      	ldr	r0, [pc, #232]	; (8006c24 <HAL_SPI_Init+0x324>)
 8006b3a:	f7fc f808 	bl	8002b4e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d106      	bne.n	8006b6a <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7fc f919 	bl	8002d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bce:	ea42 0103 	orr.w	r1, r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	0c1b      	lsrs	r3, r3, #16
 8006be8:	f003 0104 	and.w	r1, r3, #4
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	f003 0210 	and.w	r2, r3, #16
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69da      	ldr	r2, [r3, #28]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	08010410 	.word	0x08010410

08006c28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	4613      	mov	r3, r2
 8006c36:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d009      	beq.n	8006c58 <HAL_SPI_Transmit+0x30>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c4c:	d004      	beq.n	8006c58 <HAL_SPI_Transmit+0x30>
 8006c4e:	f240 310a 	movw	r1, #778	; 0x30a
 8006c52:	4893      	ldr	r0, [pc, #588]	; (8006ea0 <HAL_SPI_Transmit+0x278>)
 8006c54:	f7fb ff7b 	bl	8002b4e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_SPI_Transmit+0x3e>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e128      	b.n	8006eb8 <HAL_SPI_Transmit+0x290>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c6e:	f7fc fd27 	bl	80036c0 <HAL_GetTick>
 8006c72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d002      	beq.n	8006c8a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006c84:	2302      	movs	r3, #2
 8006c86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c88:	e10d      	b.n	8006ea6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <HAL_SPI_Transmit+0x6e>
 8006c90:	88fb      	ldrh	r3, [r7, #6]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c9a:	e104      	b.n	8006ea6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	88fa      	ldrh	r2, [r7, #6]
 8006cb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	88fa      	ldrh	r2, [r7, #6]
 8006cba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce2:	d10f      	bne.n	8006d04 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d007      	beq.n	8006d22 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d2a:	d14b      	bne.n	8006dc4 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <HAL_SPI_Transmit+0x112>
 8006d34:	8afb      	ldrh	r3, [r7, #22]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d13e      	bne.n	8006db8 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	881a      	ldrh	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	1c9a      	adds	r2, r3, #2
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d5e:	e02b      	b.n	8006db8 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d112      	bne.n	8006d94 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	881a      	ldrh	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7e:	1c9a      	adds	r2, r3, #2
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d92:	e011      	b.n	8006db8 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d94:	f7fc fc94 	bl	80036c0 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d803      	bhi.n	8006dac <HAL_SPI_Transmit+0x184>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006daa:	d102      	bne.n	8006db2 <HAL_SPI_Transmit+0x18a>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d102      	bne.n	8006db8 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006db6:	e076      	b.n	8006ea6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1ce      	bne.n	8006d60 <HAL_SPI_Transmit+0x138>
 8006dc2:	e04c      	b.n	8006e5e <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <HAL_SPI_Transmit+0x1aa>
 8006dcc:	8afb      	ldrh	r3, [r7, #22]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d140      	bne.n	8006e54 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	330c      	adds	r3, #12
 8006ddc:	7812      	ldrb	r2, [r2, #0]
 8006dde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006df8:	e02c      	b.n	8006e54 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d113      	bne.n	8006e30 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	330c      	adds	r3, #12
 8006e12:	7812      	ldrb	r2, [r2, #0]
 8006e14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e2e:	e011      	b.n	8006e54 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e30:	f7fc fc46 	bl	80036c0 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d803      	bhi.n	8006e48 <HAL_SPI_Transmit+0x220>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e46:	d102      	bne.n	8006e4e <HAL_SPI_Transmit+0x226>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d102      	bne.n	8006e54 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e52:	e028      	b.n	8006ea6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1cd      	bne.n	8006dfa <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 fbda 	bl	800761c <SPI_EndRxTxTransaction>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2220      	movs	r2, #32
 8006e72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	77fb      	strb	r3, [r7, #31]
 8006e9e:	e002      	b.n	8006ea6 <HAL_SPI_Transmit+0x27e>
 8006ea0:	08010410 	.word	0x08010410
  }

error:
 8006ea4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006eb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af02      	add	r7, sp, #8
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006edc:	d112      	bne.n	8006f04 <HAL_SPI_Receive+0x44>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10e      	bne.n	8006f04 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2204      	movs	r2, #4
 8006eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006eee:	88fa      	ldrh	r2, [r7, #6]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	68b9      	ldr	r1, [r7, #8]
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 f8f2 	bl	80070e4 <HAL_SPI_TransmitReceive>
 8006f00:	4603      	mov	r3, r0
 8006f02:	e0ea      	b.n	80070da <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d101      	bne.n	8006f12 <HAL_SPI_Receive+0x52>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e0e3      	b.n	80070da <HAL_SPI_Receive+0x21a>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f1a:	f7fc fbd1 	bl	80036c0 <HAL_GetTick>
 8006f1e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d002      	beq.n	8006f32 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f30:	e0ca      	b.n	80070c8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <HAL_SPI_Receive+0x7e>
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d102      	bne.n	8006f44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f42:	e0c1      	b.n	80070c8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2204      	movs	r2, #4
 8006f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	88fa      	ldrh	r2, [r7, #6]
 8006f62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f8a:	d10f      	bne.n	8006fac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006faa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb6:	2b40      	cmp	r3, #64	; 0x40
 8006fb8:	d007      	beq.n	8006fca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fc8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d162      	bne.n	8007098 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006fd2:	e02e      	b.n	8007032 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d115      	bne.n	800700e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f103 020c 	add.w	r2, r3, #12
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	7812      	ldrb	r2, [r2, #0]
 8006ff0:	b2d2      	uxtb	r2, r2
 8006ff2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b01      	subs	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800700c:	e011      	b.n	8007032 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800700e:	f7fc fb57 	bl	80036c0 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d803      	bhi.n	8007026 <HAL_SPI_Receive+0x166>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d102      	bne.n	800702c <HAL_SPI_Receive+0x16c>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d102      	bne.n	8007032 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007030:	e04a      	b.n	80070c8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1cb      	bne.n	8006fd4 <HAL_SPI_Receive+0x114>
 800703c:	e031      	b.n	80070a2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b01      	cmp	r3, #1
 800704a:	d113      	bne.n	8007074 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	b292      	uxth	r2, r2
 8007058:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705e:	1c9a      	adds	r2, r3, #2
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007072:	e011      	b.n	8007098 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007074:	f7fc fb24 	bl	80036c0 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d803      	bhi.n	800708c <HAL_SPI_Receive+0x1cc>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	d102      	bne.n	8007092 <HAL_SPI_Receive+0x1d2>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d102      	bne.n	8007098 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007096:	e017      	b.n	80070c8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800709c:	b29b      	uxth	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1cd      	bne.n	800703e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 fa52 	bl	8007550 <SPI_EndRxTransaction>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2220      	movs	r2, #32
 80070b6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	75fb      	strb	r3, [r7, #23]
 80070c4:	e000      	b.n	80070c8 <HAL_SPI_Receive+0x208>
  }

error :
 80070c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08c      	sub	sp, #48	; 0x30
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070f2:	2301      	movs	r3, #1
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d004      	beq.n	800710e <HAL_SPI_TransmitReceive+0x2a>
 8007104:	f240 417e 	movw	r1, #1150	; 0x47e
 8007108:	4884      	ldr	r0, [pc, #528]	; (800731c <HAL_SPI_TransmitReceive+0x238>)
 800710a:	f7fb fd20 	bl	8002b4e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007114:	2b01      	cmp	r3, #1
 8007116:	d101      	bne.n	800711c <HAL_SPI_TransmitReceive+0x38>
 8007118:	2302      	movs	r3, #2
 800711a:	e18d      	b.n	8007438 <HAL_SPI_TransmitReceive+0x354>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007124:	f7fc facc 	bl	80036c0 <HAL_GetTick>
 8007128:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800713a:	887b      	ldrh	r3, [r7, #2]
 800713c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800713e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007142:	2b01      	cmp	r3, #1
 8007144:	d00f      	beq.n	8007166 <HAL_SPI_TransmitReceive+0x82>
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800714c:	d107      	bne.n	800715e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d103      	bne.n	800715e <HAL_SPI_TransmitReceive+0x7a>
 8007156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800715a:	2b04      	cmp	r3, #4
 800715c:	d003      	beq.n	8007166 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800715e:	2302      	movs	r3, #2
 8007160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007164:	e15e      	b.n	8007424 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <HAL_SPI_TransmitReceive+0x94>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <HAL_SPI_TransmitReceive+0x94>
 8007172:	887b      	ldrh	r3, [r7, #2]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d103      	bne.n	8007180 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800717e:	e151      	b.n	8007424 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b04      	cmp	r3, #4
 800718a:	d003      	beq.n	8007194 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2205      	movs	r2, #5
 8007190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	887a      	ldrh	r2, [r7, #2]
 80071a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	887a      	ldrh	r2, [r7, #2]
 80071aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	887a      	ldrh	r2, [r7, #2]
 80071b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	887a      	ldrh	r2, [r7, #2]
 80071bc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b40      	cmp	r3, #64	; 0x40
 80071d6:	d007      	beq.n	80071e8 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f0:	d178      	bne.n	80072e4 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <HAL_SPI_TransmitReceive+0x11c>
 80071fa:	8b7b      	ldrh	r3, [r7, #26]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d166      	bne.n	80072ce <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	881a      	ldrh	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007210:	1c9a      	adds	r2, r3, #2
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800721a:	b29b      	uxth	r3, r3
 800721c:	3b01      	subs	r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007224:	e053      	b.n	80072ce <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b02      	cmp	r3, #2
 8007232:	d11b      	bne.n	800726c <HAL_SPI_TransmitReceive+0x188>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007238:	b29b      	uxth	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d016      	beq.n	800726c <HAL_SPI_TransmitReceive+0x188>
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	2b01      	cmp	r3, #1
 8007242:	d113      	bne.n	800726c <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	881a      	ldrh	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	1c9a      	adds	r2, r3, #2
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800725e:	b29b      	uxth	r3, r3
 8007260:	3b01      	subs	r3, #1
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b01      	cmp	r3, #1
 8007278:	d119      	bne.n	80072ae <HAL_SPI_TransmitReceive+0x1ca>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800727e:	b29b      	uxth	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d014      	beq.n	80072ae <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	b292      	uxth	r2, r2
 8007290:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	1c9a      	adds	r2, r3, #2
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072aa:	2301      	movs	r3, #1
 80072ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072ae:	f7fc fa07 	bl	80036c0 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d807      	bhi.n	80072ce <HAL_SPI_TransmitReceive+0x1ea>
 80072be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d003      	beq.n	80072ce <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072cc:	e0aa      	b.n	8007424 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1a6      	bne.n	8007226 <HAL_SPI_TransmitReceive+0x142>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072dc:	b29b      	uxth	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1a1      	bne.n	8007226 <HAL_SPI_TransmitReceive+0x142>
 80072e2:	e07f      	b.n	80073e4 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <HAL_SPI_TransmitReceive+0x20e>
 80072ec:	8b7b      	ldrh	r3, [r7, #26]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d16e      	bne.n	80073d0 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	330c      	adds	r3, #12
 80072fc:	7812      	ldrb	r2, [r2, #0]
 80072fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007318:	e05a      	b.n	80073d0 <HAL_SPI_TransmitReceive+0x2ec>
 800731a:	bf00      	nop
 800731c:	08010410 	.word	0x08010410
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b02      	cmp	r3, #2
 800732c:	d11c      	bne.n	8007368 <HAL_SPI_TransmitReceive+0x284>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007332:	b29b      	uxth	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d017      	beq.n	8007368 <HAL_SPI_TransmitReceive+0x284>
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	2b01      	cmp	r3, #1
 800733c:	d114      	bne.n	8007368 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	330c      	adds	r3, #12
 8007348:	7812      	ldrb	r2, [r2, #0]
 800734a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b01      	cmp	r3, #1
 8007374:	d119      	bne.n	80073aa <HAL_SPI_TransmitReceive+0x2c6>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d014      	beq.n	80073aa <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800739c:	b29b      	uxth	r3, r3
 800739e:	3b01      	subs	r3, #1
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073a6:	2301      	movs	r3, #1
 80073a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073aa:	f7fc f989 	bl	80036c0 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d803      	bhi.n	80073c2 <HAL_SPI_TransmitReceive+0x2de>
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c0:	d102      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x2e4>
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d103      	bne.n	80073d0 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073ce:	e029      	b.n	8007424 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1a2      	bne.n	8007320 <HAL_SPI_TransmitReceive+0x23c>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d19d      	bne.n	8007320 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 f917 	bl	800761c <SPI_EndRxTxTransaction>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d006      	beq.n	8007402 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2220      	movs	r2, #32
 80073fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007400:	e010      	b.n	8007424 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10b      	bne.n	8007422 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	617b      	str	r3, [r7, #20]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	e000      	b.n	8007424 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8007422:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007434:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007438:	4618      	mov	r0, r3
 800743a:	3730      	adds	r7, #48	; 0x30
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	4613      	mov	r3, r2
 800744e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007450:	f7fc f936 	bl	80036c0 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	1a9b      	subs	r3, r3, r2
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	4413      	add	r3, r2
 800745e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007460:	f7fc f92e 	bl	80036c0 <HAL_GetTick>
 8007464:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007466:	4b39      	ldr	r3, [pc, #228]	; (800754c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	015b      	lsls	r3, r3, #5
 800746c:	0d1b      	lsrs	r3, r3, #20
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	fb02 f303 	mul.w	r3, r2, r3
 8007474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007476:	e054      	b.n	8007522 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	d050      	beq.n	8007522 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007480:	f7fc f91e 	bl	80036c0 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	429a      	cmp	r2, r3
 800748e:	d902      	bls.n	8007496 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d13d      	bne.n	8007512 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ae:	d111      	bne.n	80074d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b8:	d004      	beq.n	80074c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c2:	d107      	bne.n	80074d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074dc:	d10f      	bne.n	80074fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e017      	b.n	8007542 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	3b01      	subs	r3, #1
 8007520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4013      	ands	r3, r2
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	429a      	cmp	r2, r3
 8007530:	bf0c      	ite	eq
 8007532:	2301      	moveq	r3, #1
 8007534:	2300      	movne	r3, #0
 8007536:	b2db      	uxtb	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	429a      	cmp	r2, r3
 800753e:	d19b      	bne.n	8007478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3720      	adds	r7, #32
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000144 	.word	0x20000144

08007550 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af02      	add	r7, sp, #8
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007564:	d111      	bne.n	800758a <SPI_EndRxTransaction+0x3a>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800756e:	d004      	beq.n	800757a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007578:	d107      	bne.n	800758a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007588:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007592:	d12a      	bne.n	80075ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800759c:	d012      	beq.n	80075c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2200      	movs	r2, #0
 80075a6:	2180      	movs	r1, #128	; 0x80
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f7ff ff49 	bl	8007440 <SPI_WaitFlagStateUntilTimeout>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d02d      	beq.n	8007610 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b8:	f043 0220 	orr.w	r2, r3, #32
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e026      	b.n	8007612 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2200      	movs	r2, #0
 80075cc:	2101      	movs	r1, #1
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7ff ff36 	bl	8007440 <SPI_WaitFlagStateUntilTimeout>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d01a      	beq.n	8007610 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	f043 0220 	orr.w	r2, r3, #32
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e013      	b.n	8007612 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2200      	movs	r2, #0
 80075f2:	2101      	movs	r1, #1
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f7ff ff23 	bl	8007440 <SPI_WaitFlagStateUntilTimeout>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d007      	beq.n	8007610 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007604:	f043 0220 	orr.w	r2, r3, #32
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e000      	b.n	8007612 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af02      	add	r7, sp, #8
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007628:	4b1b      	ldr	r3, [pc, #108]	; (8007698 <SPI_EndRxTxTransaction+0x7c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a1b      	ldr	r2, [pc, #108]	; (800769c <SPI_EndRxTxTransaction+0x80>)
 800762e:	fba2 2303 	umull	r2, r3, r2, r3
 8007632:	0d5b      	lsrs	r3, r3, #21
 8007634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007638:	fb02 f303 	mul.w	r3, r2, r3
 800763c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007646:	d112      	bne.n	800766e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2200      	movs	r2, #0
 8007650:	2180      	movs	r1, #128	; 0x80
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f7ff fef4 	bl	8007440 <SPI_WaitFlagStateUntilTimeout>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d016      	beq.n	800768c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007662:	f043 0220 	orr.w	r2, r3, #32
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e00f      	b.n	800768e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00a      	beq.n	800768a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	3b01      	subs	r3, #1
 8007678:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007684:	2b80      	cmp	r3, #128	; 0x80
 8007686:	d0f2      	beq.n	800766e <SPI_EndRxTxTransaction+0x52>
 8007688:	e000      	b.n	800768c <SPI_EndRxTxTransaction+0x70>
        break;
 800768a:	bf00      	nop
  }

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20000144 	.word	0x20000144
 800769c:	165e9f81 	.word	0x165e9f81

080076a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e0c5      	b.n	800783e <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a64      	ldr	r2, [pc, #400]	; (8007848 <HAL_TIM_Base_Init+0x1a8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d045      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c4:	d040      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a60      	ldr	r2, [pc, #384]	; (800784c <HAL_TIM_Base_Init+0x1ac>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d03b      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a5e      	ldr	r2, [pc, #376]	; (8007850 <HAL_TIM_Base_Init+0x1b0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d036      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a5d      	ldr	r2, [pc, #372]	; (8007854 <HAL_TIM_Base_Init+0x1b4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d031      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a5b      	ldr	r2, [pc, #364]	; (8007858 <HAL_TIM_Base_Init+0x1b8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d02c      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a5a      	ldr	r2, [pc, #360]	; (800785c <HAL_TIM_Base_Init+0x1bc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d027      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a58      	ldr	r2, [pc, #352]	; (8007860 <HAL_TIM_Base_Init+0x1c0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d022      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a57      	ldr	r2, [pc, #348]	; (8007864 <HAL_TIM_Base_Init+0x1c4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d01d      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a55      	ldr	r2, [pc, #340]	; (8007868 <HAL_TIM_Base_Init+0x1c8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d018      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a54      	ldr	r2, [pc, #336]	; (800786c <HAL_TIM_Base_Init+0x1cc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d013      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a52      	ldr	r2, [pc, #328]	; (8007870 <HAL_TIM_Base_Init+0x1d0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00e      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a51      	ldr	r2, [pc, #324]	; (8007874 <HAL_TIM_Base_Init+0x1d4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d009      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a4f      	ldr	r2, [pc, #316]	; (8007878 <HAL_TIM_Base_Init+0x1d8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d004      	beq.n	8007748 <HAL_TIM_Base_Init+0xa8>
 800773e:	f240 1113 	movw	r1, #275	; 0x113
 8007742:	484e      	ldr	r0, [pc, #312]	; (800787c <HAL_TIM_Base_Init+0x1dc>)
 8007744:	f7fb fa03 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d014      	beq.n	800777a <HAL_TIM_Base_Init+0xda>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	2b10      	cmp	r3, #16
 8007756:	d010      	beq.n	800777a <HAL_TIM_Base_Init+0xda>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	2b20      	cmp	r3, #32
 800775e:	d00c      	beq.n	800777a <HAL_TIM_Base_Init+0xda>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b40      	cmp	r3, #64	; 0x40
 8007766:	d008      	beq.n	800777a <HAL_TIM_Base_Init+0xda>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	2b60      	cmp	r3, #96	; 0x60
 800776e:	d004      	beq.n	800777a <HAL_TIM_Base_Init+0xda>
 8007770:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007774:	4841      	ldr	r0, [pc, #260]	; (800787c <HAL_TIM_Base_Init+0x1dc>)
 8007776:	f7fb f9ea 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00e      	beq.n	80077a0 <HAL_TIM_Base_Init+0x100>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778a:	d009      	beq.n	80077a0 <HAL_TIM_Base_Init+0x100>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007794:	d004      	beq.n	80077a0 <HAL_TIM_Base_Init+0x100>
 8007796:	f240 1115 	movw	r1, #277	; 0x115
 800779a:	4838      	ldr	r0, [pc, #224]	; (800787c <HAL_TIM_Base_Init+0x1dc>)
 800779c:	f7fb f9d7 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d008      	beq.n	80077ba <HAL_TIM_Base_Init+0x11a>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	2b80      	cmp	r3, #128	; 0x80
 80077ae:	d004      	beq.n	80077ba <HAL_TIM_Base_Init+0x11a>
 80077b0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80077b4:	4831      	ldr	r0, [pc, #196]	; (800787c <HAL_TIM_Base_Init+0x1dc>)
 80077b6:	f7fb f9ca 	bl	8002b4e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d106      	bne.n	80077d4 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fb fc36 	bl	8003040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f001 fbb8 	bl	8008f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	40010000 	.word	0x40010000
 800784c:	40000400 	.word	0x40000400
 8007850:	40000800 	.word	0x40000800
 8007854:	40000c00 	.word	0x40000c00
 8007858:	40001000 	.word	0x40001000
 800785c:	40001400 	.word	0x40001400
 8007860:	40010400 	.word	0x40010400
 8007864:	40014000 	.word	0x40014000
 8007868:	40014400 	.word	0x40014400
 800786c:	40014800 	.word	0x40014800
 8007870:	40001800 	.word	0x40001800
 8007874:	40001c00 	.word	0x40001c00
 8007878:	40002000 	.word	0x40002000
 800787c:	08010448 	.word	0x08010448

08007880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a51      	ldr	r2, [pc, #324]	; (80079d4 <HAL_TIM_Base_Start_IT+0x154>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d045      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789a:	d040      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a4d      	ldr	r2, [pc, #308]	; (80079d8 <HAL_TIM_Base_Start_IT+0x158>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d03b      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a4c      	ldr	r2, [pc, #304]	; (80079dc <HAL_TIM_Base_Start_IT+0x15c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d036      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a4a      	ldr	r2, [pc, #296]	; (80079e0 <HAL_TIM_Base_Start_IT+0x160>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d031      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a49      	ldr	r2, [pc, #292]	; (80079e4 <HAL_TIM_Base_Start_IT+0x164>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d02c      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a47      	ldr	r2, [pc, #284]	; (80079e8 <HAL_TIM_Base_Start_IT+0x168>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d027      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a46      	ldr	r2, [pc, #280]	; (80079ec <HAL_TIM_Base_Start_IT+0x16c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d022      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a44      	ldr	r2, [pc, #272]	; (80079f0 <HAL_TIM_Base_Start_IT+0x170>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d01d      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a43      	ldr	r2, [pc, #268]	; (80079f4 <HAL_TIM_Base_Start_IT+0x174>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d018      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a41      	ldr	r2, [pc, #260]	; (80079f8 <HAL_TIM_Base_Start_IT+0x178>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d013      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a40      	ldr	r2, [pc, #256]	; (80079fc <HAL_TIM_Base_Start_IT+0x17c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00e      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a3e      	ldr	r2, [pc, #248]	; (8007a00 <HAL_TIM_Base_Start_IT+0x180>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d009      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a3d      	ldr	r2, [pc, #244]	; (8007a04 <HAL_TIM_Base_Start_IT+0x184>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d004      	beq.n	800791e <HAL_TIM_Base_Start_IT+0x9e>
 8007914:	f240 11cf 	movw	r1, #463	; 0x1cf
 8007918:	483b      	ldr	r0, [pc, #236]	; (8007a08 <HAL_TIM_Base_Start_IT+0x188>)
 800791a:	f7fb f918 	bl	8002b4e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b01      	cmp	r3, #1
 8007928:	d001      	beq.n	800792e <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e04e      	b.n	80079cc <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2202      	movs	r2, #2
 8007932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f042 0201 	orr.w	r2, r2, #1
 8007944:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a22      	ldr	r2, [pc, #136]	; (80079d4 <HAL_TIM_Base_Start_IT+0x154>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d022      	beq.n	8007996 <HAL_TIM_Base_Start_IT+0x116>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007958:	d01d      	beq.n	8007996 <HAL_TIM_Base_Start_IT+0x116>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a1e      	ldr	r2, [pc, #120]	; (80079d8 <HAL_TIM_Base_Start_IT+0x158>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d018      	beq.n	8007996 <HAL_TIM_Base_Start_IT+0x116>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1c      	ldr	r2, [pc, #112]	; (80079dc <HAL_TIM_Base_Start_IT+0x15c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <HAL_TIM_Base_Start_IT+0x116>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1b      	ldr	r2, [pc, #108]	; (80079e0 <HAL_TIM_Base_Start_IT+0x160>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00e      	beq.n	8007996 <HAL_TIM_Base_Start_IT+0x116>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1b      	ldr	r2, [pc, #108]	; (80079ec <HAL_TIM_Base_Start_IT+0x16c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d009      	beq.n	8007996 <HAL_TIM_Base_Start_IT+0x116>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1a      	ldr	r2, [pc, #104]	; (80079f0 <HAL_TIM_Base_Start_IT+0x170>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d004      	beq.n	8007996 <HAL_TIM_Base_Start_IT+0x116>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a1a      	ldr	r2, [pc, #104]	; (80079fc <HAL_TIM_Base_Start_IT+0x17c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d111      	bne.n	80079ba <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b06      	cmp	r3, #6
 80079a6:	d010      	beq.n	80079ca <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f042 0201 	orr.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b8:	e007      	b.n	80079ca <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f042 0201 	orr.w	r2, r2, #1
 80079c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	40010000 	.word	0x40010000
 80079d8:	40000400 	.word	0x40000400
 80079dc:	40000800 	.word	0x40000800
 80079e0:	40000c00 	.word	0x40000c00
 80079e4:	40001000 	.word	0x40001000
 80079e8:	40001400 	.word	0x40001400
 80079ec:	40010400 	.word	0x40010400
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40014400 	.word	0x40014400
 80079f8:	40014800 	.word	0x40014800
 80079fc:	40001800 	.word	0x40001800
 8007a00:	40001c00 	.word	0x40001c00
 8007a04:	40002000 	.word	0x40002000
 8007a08:	08010448 	.word	0x08010448

08007a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e0c5      	b.n	8007baa <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a64      	ldr	r2, [pc, #400]	; (8007bb4 <HAL_TIM_PWM_Init+0x1a8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d045      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a30:	d040      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a60      	ldr	r2, [pc, #384]	; (8007bb8 <HAL_TIM_PWM_Init+0x1ac>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d03b      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a5e      	ldr	r2, [pc, #376]	; (8007bbc <HAL_TIM_PWM_Init+0x1b0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d036      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a5d      	ldr	r2, [pc, #372]	; (8007bc0 <HAL_TIM_PWM_Init+0x1b4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d031      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a5b      	ldr	r2, [pc, #364]	; (8007bc4 <HAL_TIM_PWM_Init+0x1b8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d02c      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a5a      	ldr	r2, [pc, #360]	; (8007bc8 <HAL_TIM_PWM_Init+0x1bc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d027      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a58      	ldr	r2, [pc, #352]	; (8007bcc <HAL_TIM_PWM_Init+0x1c0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d022      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a57      	ldr	r2, [pc, #348]	; (8007bd0 <HAL_TIM_PWM_Init+0x1c4>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d01d      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a55      	ldr	r2, [pc, #340]	; (8007bd4 <HAL_TIM_PWM_Init+0x1c8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d018      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a54      	ldr	r2, [pc, #336]	; (8007bd8 <HAL_TIM_PWM_Init+0x1cc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d013      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a52      	ldr	r2, [pc, #328]	; (8007bdc <HAL_TIM_PWM_Init+0x1d0>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00e      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a51      	ldr	r2, [pc, #324]	; (8007be0 <HAL_TIM_PWM_Init+0x1d4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d009      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a4f      	ldr	r2, [pc, #316]	; (8007be4 <HAL_TIM_PWM_Init+0x1d8>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d004      	beq.n	8007ab4 <HAL_TIM_PWM_Init+0xa8>
 8007aaa:	f240 5129 	movw	r1, #1321	; 0x529
 8007aae:	484e      	ldr	r0, [pc, #312]	; (8007be8 <HAL_TIM_PWM_Init+0x1dc>)
 8007ab0:	f7fb f84d 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d014      	beq.n	8007ae6 <HAL_TIM_PWM_Init+0xda>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	2b10      	cmp	r3, #16
 8007ac2:	d010      	beq.n	8007ae6 <HAL_TIM_PWM_Init+0xda>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d00c      	beq.n	8007ae6 <HAL_TIM_PWM_Init+0xda>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2b40      	cmp	r3, #64	; 0x40
 8007ad2:	d008      	beq.n	8007ae6 <HAL_TIM_PWM_Init+0xda>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2b60      	cmp	r3, #96	; 0x60
 8007ada:	d004      	beq.n	8007ae6 <HAL_TIM_PWM_Init+0xda>
 8007adc:	f240 512a 	movw	r1, #1322	; 0x52a
 8007ae0:	4841      	ldr	r0, [pc, #260]	; (8007be8 <HAL_TIM_PWM_Init+0x1dc>)
 8007ae2:	f7fb f834 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00e      	beq.n	8007b0c <HAL_TIM_PWM_Init+0x100>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af6:	d009      	beq.n	8007b0c <HAL_TIM_PWM_Init+0x100>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b00:	d004      	beq.n	8007b0c <HAL_TIM_PWM_Init+0x100>
 8007b02:	f240 512b 	movw	r1, #1323	; 0x52b
 8007b06:	4838      	ldr	r0, [pc, #224]	; (8007be8 <HAL_TIM_PWM_Init+0x1dc>)
 8007b08:	f7fb f821 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d008      	beq.n	8007b26 <HAL_TIM_PWM_Init+0x11a>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	2b80      	cmp	r3, #128	; 0x80
 8007b1a:	d004      	beq.n	8007b26 <HAL_TIM_PWM_Init+0x11a>
 8007b1c:	f240 512c 	movw	r1, #1324	; 0x52c
 8007b20:	4831      	ldr	r0, [pc, #196]	; (8007be8 <HAL_TIM_PWM_Init+0x1dc>)
 8007b22:	f7fb f814 	bl	8002b4e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d106      	bne.n	8007b40 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7fb fae2 	bl	8003104 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3304      	adds	r3, #4
 8007b50:	4619      	mov	r1, r3
 8007b52:	4610      	mov	r0, r2
 8007b54:	f001 fa02 	bl	8008f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40010000 	.word	0x40010000
 8007bb8:	40000400 	.word	0x40000400
 8007bbc:	40000800 	.word	0x40000800
 8007bc0:	40000c00 	.word	0x40000c00
 8007bc4:	40001000 	.word	0x40001000
 8007bc8:	40001400 	.word	0x40001400
 8007bcc:	40010400 	.word	0x40010400
 8007bd0:	40014000 	.word	0x40014000
 8007bd4:	40014400 	.word	0x40014400
 8007bd8:	40014800 	.word	0x40014800
 8007bdc:	40001800 	.word	0x40001800
 8007be0:	40001c00 	.word	0x40001c00
 8007be4:	40002000 	.word	0x40002000
 8007be8:	08010448 	.word	0x08010448

08007bec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a84      	ldr	r2, [pc, #528]	; (8007e0c <HAL_TIM_PWM_Start+0x220>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d10f      	bne.n	8007c20 <HAL_TIM_PWM_Start+0x34>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 809f 	beq.w	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	f000 809b 	beq.w	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	f000 8097 	beq.w	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b0c      	cmp	r3, #12
 8007c1c:	f000 8093 	beq.w	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c28:	d10e      	bne.n	8007c48 <HAL_TIM_PWM_Start+0x5c>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 808a 	beq.w	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	f000 8086 	beq.w	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b08      	cmp	r3, #8
 8007c3e:	f000 8082 	beq.w	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b0c      	cmp	r3, #12
 8007c46:	d07e      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a70      	ldr	r2, [pc, #448]	; (8007e10 <HAL_TIM_PWM_Start+0x224>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d10b      	bne.n	8007c6a <HAL_TIM_PWM_Start+0x7e>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d076      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d073      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d070      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b0c      	cmp	r3, #12
 8007c68:	d06d      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a69      	ldr	r2, [pc, #420]	; (8007e14 <HAL_TIM_PWM_Start+0x228>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d10b      	bne.n	8007c8c <HAL_TIM_PWM_Start+0xa0>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d065      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d062      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b08      	cmp	r3, #8
 8007c84:	d05f      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b0c      	cmp	r3, #12
 8007c8a:	d05c      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a61      	ldr	r2, [pc, #388]	; (8007e18 <HAL_TIM_PWM_Start+0x22c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d10b      	bne.n	8007cae <HAL_TIM_PWM_Start+0xc2>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d054      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d051      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d04e      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b0c      	cmp	r3, #12
 8007cac:	d04b      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a5a      	ldr	r2, [pc, #360]	; (8007e1c <HAL_TIM_PWM_Start+0x230>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d10b      	bne.n	8007cd0 <HAL_TIM_PWM_Start+0xe4>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d043      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d040      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d03d      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b0c      	cmp	r3, #12
 8007cce:	d03a      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a52      	ldr	r2, [pc, #328]	; (8007e20 <HAL_TIM_PWM_Start+0x234>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d105      	bne.n	8007ce6 <HAL_TIM_PWM_Start+0xfa>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d032      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d02f      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a4e      	ldr	r2, [pc, #312]	; (8007e24 <HAL_TIM_PWM_Start+0x238>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d102      	bne.n	8007cf6 <HAL_TIM_PWM_Start+0x10a>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d027      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a4b      	ldr	r2, [pc, #300]	; (8007e28 <HAL_TIM_PWM_Start+0x23c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d102      	bne.n	8007d06 <HAL_TIM_PWM_Start+0x11a>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01f      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a48      	ldr	r2, [pc, #288]	; (8007e2c <HAL_TIM_PWM_Start+0x240>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d105      	bne.n	8007d1c <HAL_TIM_PWM_Start+0x130>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d017      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d014      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a43      	ldr	r2, [pc, #268]	; (8007e30 <HAL_TIM_PWM_Start+0x244>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d102      	bne.n	8007d2c <HAL_TIM_PWM_Start+0x140>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00c      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a40      	ldr	r2, [pc, #256]	; (8007e34 <HAL_TIM_PWM_Start+0x248>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d102      	bne.n	8007d3c <HAL_TIM_PWM_Start+0x150>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
 8007d3c:	f240 51af 	movw	r1, #1455	; 0x5af
 8007d40:	483d      	ldr	r0, [pc, #244]	; (8007e38 <HAL_TIM_PWM_Start+0x24c>)
 8007d42:	f7fa ff04 	bl	8002b4e <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d109      	bne.n	8007d60 <HAL_TIM_PWM_Start+0x174>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	bf14      	ite	ne
 8007d58:	2301      	movne	r3, #1
 8007d5a:	2300      	moveq	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	e022      	b.n	8007da6 <HAL_TIM_PWM_Start+0x1ba>
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d109      	bne.n	8007d7a <HAL_TIM_PWM_Start+0x18e>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	bf14      	ite	ne
 8007d72:	2301      	movne	r3, #1
 8007d74:	2300      	moveq	r3, #0
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	e015      	b.n	8007da6 <HAL_TIM_PWM_Start+0x1ba>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	d109      	bne.n	8007d94 <HAL_TIM_PWM_Start+0x1a8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	bf14      	ite	ne
 8007d8c:	2301      	movne	r3, #1
 8007d8e:	2300      	moveq	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	e008      	b.n	8007da6 <HAL_TIM_PWM_Start+0x1ba>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	bf14      	ite	ne
 8007da0:	2301      	movne	r3, #1
 8007da2:	2300      	moveq	r3, #0
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e094      	b.n	8007ed8 <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d104      	bne.n	8007dbe <HAL_TIM_PWM_Start+0x1d2>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dbc:	e013      	b.n	8007de6 <HAL_TIM_PWM_Start+0x1fa>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d104      	bne.n	8007dce <HAL_TIM_PWM_Start+0x1e2>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dcc:	e00b      	b.n	8007de6 <HAL_TIM_PWM_Start+0x1fa>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d104      	bne.n	8007dde <HAL_TIM_PWM_Start+0x1f2>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ddc:	e003      	b.n	8007de6 <HAL_TIM_PWM_Start+0x1fa>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2202      	movs	r2, #2
 8007de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2201      	movs	r2, #1
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f001 fc28 	bl	8009644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a04      	ldr	r2, [pc, #16]	; (8007e0c <HAL_TIM_PWM_Start+0x220>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d004      	beq.n	8007e08 <HAL_TIM_PWM_Start+0x21c>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a06      	ldr	r2, [pc, #24]	; (8007e1c <HAL_TIM_PWM_Start+0x230>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d119      	bne.n	8007e3c <HAL_TIM_PWM_Start+0x250>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e018      	b.n	8007e3e <HAL_TIM_PWM_Start+0x252>
 8007e0c:	40010000 	.word	0x40010000
 8007e10:	40000400 	.word	0x40000400
 8007e14:	40000800 	.word	0x40000800
 8007e18:	40000c00 	.word	0x40000c00
 8007e1c:	40010400 	.word	0x40010400
 8007e20:	40014000 	.word	0x40014000
 8007e24:	40014400 	.word	0x40014400
 8007e28:	40014800 	.word	0x40014800
 8007e2c:	40001800 	.word	0x40001800
 8007e30:	40001c00 	.word	0x40001c00
 8007e34:	40002000 	.word	0x40002000
 8007e38:	08010448 	.word	0x08010448
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d007      	beq.n	8007e52 <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a22      	ldr	r2, [pc, #136]	; (8007ee0 <HAL_TIM_PWM_Start+0x2f4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d022      	beq.n	8007ea2 <HAL_TIM_PWM_Start+0x2b6>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e64:	d01d      	beq.n	8007ea2 <HAL_TIM_PWM_Start+0x2b6>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a1e      	ldr	r2, [pc, #120]	; (8007ee4 <HAL_TIM_PWM_Start+0x2f8>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d018      	beq.n	8007ea2 <HAL_TIM_PWM_Start+0x2b6>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a1c      	ldr	r2, [pc, #112]	; (8007ee8 <HAL_TIM_PWM_Start+0x2fc>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d013      	beq.n	8007ea2 <HAL_TIM_PWM_Start+0x2b6>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a1b      	ldr	r2, [pc, #108]	; (8007eec <HAL_TIM_PWM_Start+0x300>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00e      	beq.n	8007ea2 <HAL_TIM_PWM_Start+0x2b6>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a19      	ldr	r2, [pc, #100]	; (8007ef0 <HAL_TIM_PWM_Start+0x304>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d009      	beq.n	8007ea2 <HAL_TIM_PWM_Start+0x2b6>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a18      	ldr	r2, [pc, #96]	; (8007ef4 <HAL_TIM_PWM_Start+0x308>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d004      	beq.n	8007ea2 <HAL_TIM_PWM_Start+0x2b6>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a16      	ldr	r2, [pc, #88]	; (8007ef8 <HAL_TIM_PWM_Start+0x30c>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d111      	bne.n	8007ec6 <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f003 0307 	and.w	r3, r3, #7
 8007eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b06      	cmp	r3, #6
 8007eb2:	d010      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0201 	orr.w	r2, r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec4:	e007      	b.n	8007ed6 <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f042 0201 	orr.w	r2, r2, #1
 8007ed4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	40010000 	.word	0x40010000
 8007ee4:	40000400 	.word	0x40000400
 8007ee8:	40000800 	.word	0x40000800
 8007eec:	40000c00 	.word	0x40000c00
 8007ef0:	40010400 	.word	0x40010400
 8007ef4:	40014000 	.word	0x40014000
 8007ef8:	40001800 	.word	0x40001800

08007efc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e198      	b.n	8008242 <HAL_TIM_Encoder_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a7d      	ldr	r2, [pc, #500]	; (800810c <HAL_TIM_Encoder_Init+0x210>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d027      	beq.n	8007f6a <HAL_TIM_Encoder_Init+0x6e>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f22:	d022      	beq.n	8007f6a <HAL_TIM_Encoder_Init+0x6e>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a79      	ldr	r2, [pc, #484]	; (8008110 <HAL_TIM_Encoder_Init+0x214>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d01d      	beq.n	8007f6a <HAL_TIM_Encoder_Init+0x6e>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a78      	ldr	r2, [pc, #480]	; (8008114 <HAL_TIM_Encoder_Init+0x218>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d018      	beq.n	8007f6a <HAL_TIM_Encoder_Init+0x6e>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a76      	ldr	r2, [pc, #472]	; (8008118 <HAL_TIM_Encoder_Init+0x21c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d013      	beq.n	8007f6a <HAL_TIM_Encoder_Init+0x6e>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a75      	ldr	r2, [pc, #468]	; (800811c <HAL_TIM_Encoder_Init+0x220>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d00e      	beq.n	8007f6a <HAL_TIM_Encoder_Init+0x6e>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a73      	ldr	r2, [pc, #460]	; (8008120 <HAL_TIM_Encoder_Init+0x224>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d009      	beq.n	8007f6a <HAL_TIM_Encoder_Init+0x6e>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a72      	ldr	r2, [pc, #456]	; (8008124 <HAL_TIM_Encoder_Init+0x228>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d004      	beq.n	8007f6a <HAL_TIM_Encoder_Init+0x6e>
 8007f60:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8007f64:	4870      	ldr	r0, [pc, #448]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 8007f66:	f7fa fdf2 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d014      	beq.n	8007f9c <HAL_TIM_Encoder_Init+0xa0>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	2b10      	cmp	r3, #16
 8007f78:	d010      	beq.n	8007f9c <HAL_TIM_Encoder_Init+0xa0>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	2b20      	cmp	r3, #32
 8007f80:	d00c      	beq.n	8007f9c <HAL_TIM_Encoder_Init+0xa0>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	2b40      	cmp	r3, #64	; 0x40
 8007f88:	d008      	beq.n	8007f9c <HAL_TIM_Encoder_Init+0xa0>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	2b60      	cmp	r3, #96	; 0x60
 8007f90:	d004      	beq.n	8007f9c <HAL_TIM_Encoder_Init+0xa0>
 8007f92:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8007f96:	4864      	ldr	r0, [pc, #400]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 8007f98:	f7fa fdd9 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00e      	beq.n	8007fc2 <HAL_TIM_Encoder_Init+0xc6>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fac:	d009      	beq.n	8007fc2 <HAL_TIM_Encoder_Init+0xc6>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fb6:	d004      	beq.n	8007fc2 <HAL_TIM_Encoder_Init+0xc6>
 8007fb8:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8007fbc:	485a      	ldr	r0, [pc, #360]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 8007fbe:	f7fa fdc6 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d008      	beq.n	8007fdc <HAL_TIM_Encoder_Init+0xe0>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	2b80      	cmp	r3, #128	; 0x80
 8007fd0:	d004      	beq.n	8007fdc <HAL_TIM_Encoder_Init+0xe0>
 8007fd2:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8007fd6:	4854      	ldr	r0, [pc, #336]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 8007fd8:	f7fa fdb9 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d00c      	beq.n	8007ffe <HAL_TIM_Encoder_Init+0x102>
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d008      	beq.n	8007ffe <HAL_TIM_Encoder_Init+0x102>
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b03      	cmp	r3, #3
 8007ff2:	d004      	beq.n	8007ffe <HAL_TIM_Encoder_Init+0x102>
 8007ff4:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8007ff8:	484b      	ldr	r0, [pc, #300]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 8007ffa:	f7fa fda8 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d00c      	beq.n	8008020 <HAL_TIM_Encoder_Init+0x124>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	2b02      	cmp	r3, #2
 800800c:	d008      	beq.n	8008020 <HAL_TIM_Encoder_Init+0x124>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	2b03      	cmp	r3, #3
 8008014:	d004      	beq.n	8008020 <HAL_TIM_Encoder_Init+0x124>
 8008016:	f640 31d6 	movw	r1, #3030	; 0xbd6
 800801a:	4843      	ldr	r0, [pc, #268]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 800801c:	f7fa fd97 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d00c      	beq.n	8008042 <HAL_TIM_Encoder_Init+0x146>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d008      	beq.n	8008042 <HAL_TIM_Encoder_Init+0x146>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	2b03      	cmp	r3, #3
 8008036:	d004      	beq.n	8008042 <HAL_TIM_Encoder_Init+0x146>
 8008038:	f640 31d7 	movw	r1, #3031	; 0xbd7
 800803c:	483a      	ldr	r0, [pc, #232]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 800803e:	f7fa fd86 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d008      	beq.n	800805c <HAL_TIM_Encoder_Init+0x160>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d004      	beq.n	800805c <HAL_TIM_Encoder_Init+0x160>
 8008052:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8008056:	4834      	ldr	r0, [pc, #208]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 8008058:	f7fa fd79 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d008      	beq.n	8008076 <HAL_TIM_Encoder_Init+0x17a>
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d004      	beq.n	8008076 <HAL_TIM_Encoder_Init+0x17a>
 800806c:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8008070:	482d      	ldr	r0, [pc, #180]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 8008072:	f7fa fd6c 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d010      	beq.n	80080a0 <HAL_TIM_Encoder_Init+0x1a4>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	2b04      	cmp	r3, #4
 8008084:	d00c      	beq.n	80080a0 <HAL_TIM_Encoder_Init+0x1a4>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	2b08      	cmp	r3, #8
 800808c:	d008      	beq.n	80080a0 <HAL_TIM_Encoder_Init+0x1a4>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	2b0c      	cmp	r3, #12
 8008094:	d004      	beq.n	80080a0 <HAL_TIM_Encoder_Init+0x1a4>
 8008096:	f640 31da 	movw	r1, #3034	; 0xbda
 800809a:	4823      	ldr	r0, [pc, #140]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 800809c:	f7fa fd57 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d010      	beq.n	80080ca <HAL_TIM_Encoder_Init+0x1ce>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d00c      	beq.n	80080ca <HAL_TIM_Encoder_Init+0x1ce>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d008      	beq.n	80080ca <HAL_TIM_Encoder_Init+0x1ce>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	2b0c      	cmp	r3, #12
 80080be:	d004      	beq.n	80080ca <HAL_TIM_Encoder_Init+0x1ce>
 80080c0:	f640 31db 	movw	r1, #3035	; 0xbdb
 80080c4:	4818      	ldr	r0, [pc, #96]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 80080c6:	f7fa fd42 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b0f      	cmp	r3, #15
 80080d0:	d904      	bls.n	80080dc <HAL_TIM_Encoder_Init+0x1e0>
 80080d2:	f640 31dc 	movw	r1, #3036	; 0xbdc
 80080d6:	4814      	ldr	r0, [pc, #80]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 80080d8:	f7fa fd39 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	2b0f      	cmp	r3, #15
 80080e2:	d904      	bls.n	80080ee <HAL_TIM_Encoder_Init+0x1f2>
 80080e4:	f640 31dd 	movw	r1, #3037	; 0xbdd
 80080e8:	480f      	ldr	r0, [pc, #60]	; (8008128 <HAL_TIM_Encoder_Init+0x22c>)
 80080ea:	f7fa fd30 	bl	8002b4e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d118      	bne.n	800812c <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7fb f826 	bl	8003154 <HAL_TIM_Encoder_MspInit>
 8008108:	e010      	b.n	800812c <HAL_TIM_Encoder_Init+0x230>
 800810a:	bf00      	nop
 800810c:	40010000 	.word	0x40010000
 8008110:	40000400 	.word	0x40000400
 8008114:	40000800 	.word	0x40000800
 8008118:	40000c00 	.word	0x40000c00
 800811c:	40010400 	.word	0x40010400
 8008120:	40014000 	.word	0x40014000
 8008124:	40001800 	.word	0x40001800
 8008128:	08010448 	.word	0x08010448
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6812      	ldr	r2, [r2, #0]
 800813e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008142:	f023 0307 	bic.w	r3, r3, #7
 8008146:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3304      	adds	r3, #4
 8008150:	4619      	mov	r1, r3
 8008152:	4610      	mov	r0, r2
 8008154:	f000 ff02 	bl	8008f5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	4313      	orrs	r3, r2
 8008178:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008180:	f023 0303 	bic.w	r3, r3, #3
 8008184:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	689a      	ldr	r2, [r3, #8]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	4313      	orrs	r3, r2
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	4313      	orrs	r3, r2
 8008196:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800819e:	f023 030c 	bic.w	r3, r3, #12
 80081a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	4313      	orrs	r3, r2
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	011a      	lsls	r2, r3, #4
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	031b      	lsls	r3, r3, #12
 80081ce:	4313      	orrs	r3, r2
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80081dc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80081e4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	4313      	orrs	r3, r2
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop

0800824c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b02      	cmp	r3, #2
 8008260:	d122      	bne.n	80082a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b02      	cmp	r3, #2
 800826e:	d11b      	bne.n	80082a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0202 	mvn.w	r2, #2
 8008278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	f003 0303 	and.w	r3, r3, #3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fe46 	bl	8008f20 <HAL_TIM_IC_CaptureCallback>
 8008294:	e005      	b.n	80082a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fe38 	bl	8008f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fe49 	bl	8008f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f003 0304 	and.w	r3, r3, #4
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d122      	bne.n	80082fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d11b      	bne.n	80082fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f06f 0204 	mvn.w	r2, #4
 80082cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2202      	movs	r2, #2
 80082d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fe1c 	bl	8008f20 <HAL_TIM_IC_CaptureCallback>
 80082e8:	e005      	b.n	80082f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fe0e 	bl	8008f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fe1f 	bl	8008f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	2b08      	cmp	r3, #8
 8008308:	d122      	bne.n	8008350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b08      	cmp	r3, #8
 8008316:	d11b      	bne.n	8008350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f06f 0208 	mvn.w	r2, #8
 8008320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2204      	movs	r2, #4
 8008326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	f003 0303 	and.w	r3, r3, #3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fdf2 	bl	8008f20 <HAL_TIM_IC_CaptureCallback>
 800833c:	e005      	b.n	800834a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fde4 	bl	8008f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fdf5 	bl	8008f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	f003 0310 	and.w	r3, r3, #16
 800835a:	2b10      	cmp	r3, #16
 800835c:	d122      	bne.n	80083a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f003 0310 	and.w	r3, r3, #16
 8008368:	2b10      	cmp	r3, #16
 800836a:	d11b      	bne.n	80083a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f06f 0210 	mvn.w	r2, #16
 8008374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2208      	movs	r2, #8
 800837a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fdc8 	bl	8008f20 <HAL_TIM_IC_CaptureCallback>
 8008390:	e005      	b.n	800839e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fdba 	bl	8008f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fdcb 	bl	8008f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d10e      	bne.n	80083d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d107      	bne.n	80083d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f06f 0201 	mvn.w	r2, #1
 80083c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7f8 ff1e 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083da:	2b80      	cmp	r3, #128	; 0x80
 80083dc:	d10e      	bne.n	80083fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e8:	2b80      	cmp	r3, #128	; 0x80
 80083ea:	d107      	bne.n	80083fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 fb5c 	bl	8009ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008406:	2b40      	cmp	r3, #64	; 0x40
 8008408:	d10e      	bne.n	8008428 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008414:	2b40      	cmp	r3, #64	; 0x40
 8008416:	d107      	bne.n	8008428 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fd90 	bl	8008f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f003 0320 	and.w	r3, r3, #32
 8008432:	2b20      	cmp	r3, #32
 8008434:	d10e      	bne.n	8008454 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f003 0320 	and.w	r3, r3, #32
 8008440:	2b20      	cmp	r3, #32
 8008442:	d107      	bne.n	8008454 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f06f 0220 	mvn.w	r2, #32
 800844c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 fb26 	bl	8009aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d010      	beq.n	8008494 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b04      	cmp	r3, #4
 8008476:	d00d      	beq.n	8008494 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b08      	cmp	r3, #8
 800847c:	d00a      	beq.n	8008494 <HAL_TIM_PWM_ConfigChannel+0x38>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b0c      	cmp	r3, #12
 8008482:	d007      	beq.n	8008494 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b3c      	cmp	r3, #60	; 0x3c
 8008488:	d004      	beq.n	8008494 <HAL_TIM_PWM_ConfigChannel+0x38>
 800848a:	f241 0177 	movw	r1, #4215	; 0x1077
 800848e:	4883      	ldr	r0, [pc, #524]	; (800869c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008490:	f7fa fb5d 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b60      	cmp	r3, #96	; 0x60
 800849a:	d008      	beq.n	80084ae <HAL_TIM_PWM_ConfigChannel+0x52>
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b70      	cmp	r3, #112	; 0x70
 80084a2:	d004      	beq.n	80084ae <HAL_TIM_PWM_ConfigChannel+0x52>
 80084a4:	f241 0178 	movw	r1, #4216	; 0x1078
 80084a8:	487c      	ldr	r0, [pc, #496]	; (800869c <HAL_TIM_PWM_ConfigChannel+0x240>)
 80084aa:	f7fa fb50 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d008      	beq.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d004      	beq.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80084be:	f241 0179 	movw	r1, #4217	; 0x1079
 80084c2:	4876      	ldr	r0, [pc, #472]	; (800869c <HAL_TIM_PWM_ConfigChannel+0x240>)
 80084c4:	f7fa fb43 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d008      	beq.n	80084e2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	d004      	beq.n	80084e2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80084d8:	f241 017a 	movw	r1, #4218	; 0x107a
 80084dc:	486f      	ldr	r0, [pc, #444]	; (800869c <HAL_TIM_PWM_ConfigChannel+0x240>)
 80084de:	f7fa fb36 	bl	8002b4e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d101      	bne.n	80084f0 <HAL_TIM_PWM_ConfigChannel+0x94>
 80084ec:	2302      	movs	r3, #2
 80084ee:	e17c      	b.n	80087ea <HAL_TIM_PWM_ConfigChannel+0x38e>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b0c      	cmp	r3, #12
 80084fc:	f200 816d 	bhi.w	80087da <HAL_TIM_PWM_ConfigChannel+0x37e>
 8008500:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8008502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008506:	bf00      	nop
 8008508:	0800853d 	.word	0x0800853d
 800850c:	080087db 	.word	0x080087db
 8008510:	080087db 	.word	0x080087db
 8008514:	080087db 	.word	0x080087db
 8008518:	080085ff 	.word	0x080085ff
 800851c:	080087db 	.word	0x080087db
 8008520:	080087db 	.word	0x080087db
 8008524:	080087db 	.word	0x080087db
 8008528:	080086cd 	.word	0x080086cd
 800852c:	080087db 	.word	0x080087db
 8008530:	080087db 	.word	0x080087db
 8008534:	080087db 	.word	0x080087db
 8008538:	08008753 	.word	0x08008753
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a57      	ldr	r2, [pc, #348]	; (80086a0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d03b      	beq.n	80085be <HAL_TIM_PWM_ConfigChannel+0x162>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800854e:	d036      	beq.n	80085be <HAL_TIM_PWM_ConfigChannel+0x162>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a53      	ldr	r2, [pc, #332]	; (80086a4 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d031      	beq.n	80085be <HAL_TIM_PWM_ConfigChannel+0x162>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a52      	ldr	r2, [pc, #328]	; (80086a8 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d02c      	beq.n	80085be <HAL_TIM_PWM_ConfigChannel+0x162>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a50      	ldr	r2, [pc, #320]	; (80086ac <HAL_TIM_PWM_ConfigChannel+0x250>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d027      	beq.n	80085be <HAL_TIM_PWM_ConfigChannel+0x162>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a4f      	ldr	r2, [pc, #316]	; (80086b0 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d022      	beq.n	80085be <HAL_TIM_PWM_ConfigChannel+0x162>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a4d      	ldr	r2, [pc, #308]	; (80086b4 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d01d      	beq.n	80085be <HAL_TIM_PWM_ConfigChannel+0x162>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a4c      	ldr	r2, [pc, #304]	; (80086b8 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d018      	beq.n	80085be <HAL_TIM_PWM_ConfigChannel+0x162>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a4a      	ldr	r2, [pc, #296]	; (80086bc <HAL_TIM_PWM_ConfigChannel+0x260>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d013      	beq.n	80085be <HAL_TIM_PWM_ConfigChannel+0x162>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a49      	ldr	r2, [pc, #292]	; (80086c0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00e      	beq.n	80085be <HAL_TIM_PWM_ConfigChannel+0x162>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a47      	ldr	r2, [pc, #284]	; (80086c4 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d009      	beq.n	80085be <HAL_TIM_PWM_ConfigChannel+0x162>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a46      	ldr	r2, [pc, #280]	; (80086c8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d004      	beq.n	80085be <HAL_TIM_PWM_ConfigChannel+0x162>
 80085b4:	f241 0184 	movw	r1, #4228	; 0x1084
 80085b8:	4838      	ldr	r0, [pc, #224]	; (800869c <HAL_TIM_PWM_ConfigChannel+0x240>)
 80085ba:	f7fa fac8 	bl	8002b4e <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68b9      	ldr	r1, [r7, #8]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 fd69 	bl	800909c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	699a      	ldr	r2, [r3, #24]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f042 0208 	orr.w	r2, r2, #8
 80085d8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	699a      	ldr	r2, [r3, #24]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 0204 	bic.w	r2, r2, #4
 80085e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6999      	ldr	r1, [r3, #24]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	691a      	ldr	r2, [r3, #16]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	619a      	str	r2, [r3, #24]
      break;
 80085fc:	e0f0      	b.n	80087e0 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a27      	ldr	r2, [pc, #156]	; (80086a0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d027      	beq.n	8008658 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008610:	d022      	beq.n	8008658 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a23      	ldr	r2, [pc, #140]	; (80086a4 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d01d      	beq.n	8008658 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a21      	ldr	r2, [pc, #132]	; (80086a8 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d018      	beq.n	8008658 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a20      	ldr	r2, [pc, #128]	; (80086ac <HAL_TIM_PWM_ConfigChannel+0x250>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d013      	beq.n	8008658 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1e      	ldr	r2, [pc, #120]	; (80086b0 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00e      	beq.n	8008658 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a1d      	ldr	r2, [pc, #116]	; (80086b4 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d009      	beq.n	8008658 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a1d      	ldr	r2, [pc, #116]	; (80086c0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d004      	beq.n	8008658 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800864e:	f241 0195 	movw	r1, #4245	; 0x1095
 8008652:	4812      	ldr	r0, [pc, #72]	; (800869c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008654:	f7fa fa7b 	bl	8002b4e <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68b9      	ldr	r1, [r7, #8]
 800865e:	4618      	mov	r0, r3
 8008660:	f000 fdb6 	bl	80091d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	699a      	ldr	r2, [r3, #24]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699a      	ldr	r2, [r3, #24]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6999      	ldr	r1, [r3, #24]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	021a      	lsls	r2, r3, #8
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	430a      	orrs	r2, r1
 8008696:	619a      	str	r2, [r3, #24]
      break;
 8008698:	e0a2      	b.n	80087e0 <HAL_TIM_PWM_ConfigChannel+0x384>
 800869a:	bf00      	nop
 800869c:	08010448 	.word	0x08010448
 80086a0:	40010000 	.word	0x40010000
 80086a4:	40000400 	.word	0x40000400
 80086a8:	40000800 	.word	0x40000800
 80086ac:	40000c00 	.word	0x40000c00
 80086b0:	40010400 	.word	0x40010400
 80086b4:	40014000 	.word	0x40014000
 80086b8:	40014400 	.word	0x40014400
 80086bc:	40014800 	.word	0x40014800
 80086c0:	40001800 	.word	0x40001800
 80086c4:	40001c00 	.word	0x40001c00
 80086c8:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a48      	ldr	r2, [pc, #288]	; (80087f4 <HAL_TIM_PWM_ConfigChannel+0x398>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d01d      	beq.n	8008712 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086de:	d018      	beq.n	8008712 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a44      	ldr	r2, [pc, #272]	; (80087f8 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d013      	beq.n	8008712 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a43      	ldr	r2, [pc, #268]	; (80087fc <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d00e      	beq.n	8008712 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a41      	ldr	r2, [pc, #260]	; (8008800 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d009      	beq.n	8008712 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a40      	ldr	r2, [pc, #256]	; (8008804 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d004      	beq.n	8008712 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008708:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800870c:	483e      	ldr	r0, [pc, #248]	; (8008808 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800870e:	f7fa fa1e 	bl	8002b4e <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fdf7 	bl	800930c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	69da      	ldr	r2, [r3, #28]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f042 0208 	orr.w	r2, r2, #8
 800872c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	69da      	ldr	r2, [r3, #28]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 0204 	bic.w	r2, r2, #4
 800873c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	69d9      	ldr	r1, [r3, #28]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	691a      	ldr	r2, [r3, #16]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	61da      	str	r2, [r3, #28]
      break;
 8008750:	e046      	b.n	80087e0 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a27      	ldr	r2, [pc, #156]	; (80087f4 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d01d      	beq.n	8008798 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008764:	d018      	beq.n	8008798 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a23      	ldr	r2, [pc, #140]	; (80087f8 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d013      	beq.n	8008798 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a21      	ldr	r2, [pc, #132]	; (80087fc <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00e      	beq.n	8008798 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a20      	ldr	r2, [pc, #128]	; (8008800 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d009      	beq.n	8008798 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a1e      	ldr	r2, [pc, #120]	; (8008804 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d004      	beq.n	8008798 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800878e:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8008792:	481d      	ldr	r0, [pc, #116]	; (8008808 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8008794:	f7fa f9db 	bl	8002b4e <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 fe52 	bl	8009448 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69da      	ldr	r2, [r3, #28]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	69da      	ldr	r2, [r3, #28]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	69d9      	ldr	r1, [r3, #28]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	021a      	lsls	r2, r3, #8
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	61da      	str	r2, [r3, #28]
      break;
 80087d8:	e002      	b.n	80087e0 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	75fb      	strb	r3, [r7, #23]
      break;
 80087de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	40010000 	.word	0x40010000
 80087f8:	40000400 	.word	0x40000400
 80087fc:	40000800 	.word	0x40000800
 8008800:	40000c00 	.word	0x40000c00
 8008804:	40010400 	.word	0x40010400
 8008808:	08010448 	.word	0x08010448

0800880c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008820:	2b01      	cmp	r3, #1
 8008822:	d101      	bne.n	8008828 <HAL_TIM_ConfigClockSource+0x1c>
 8008824:	2302      	movs	r3, #2
 8008826:	e35c      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x6d6>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008840:	d029      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x8a>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800884a:	d024      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x8a>
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d020      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x8a>
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b10      	cmp	r3, #16
 800885a:	d01c      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x8a>
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b20      	cmp	r3, #32
 8008862:	d018      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x8a>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b30      	cmp	r3, #48	; 0x30
 800886a:	d014      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x8a>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b40      	cmp	r3, #64	; 0x40
 8008872:	d010      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x8a>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b50      	cmp	r3, #80	; 0x50
 800887a:	d00c      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x8a>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b60      	cmp	r3, #96	; 0x60
 8008882:	d008      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x8a>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b70      	cmp	r3, #112	; 0x70
 800888a:	d004      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x8a>
 800888c:	f241 41bb 	movw	r1, #5307	; 0x14bb
 8008890:	4893      	ldr	r0, [pc, #588]	; (8008ae0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008892:	f7fa f95c 	bl	8002b4e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80088a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088be:	f000 812b 	beq.w	8008b18 <HAL_TIM_ConfigClockSource+0x30c>
 80088c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c6:	f200 82ff 	bhi.w	8008ec8 <HAL_TIM_ConfigClockSource+0x6bc>
 80088ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ce:	d02e      	beq.n	800892e <HAL_TIM_ConfigClockSource+0x122>
 80088d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d4:	f200 82f8 	bhi.w	8008ec8 <HAL_TIM_ConfigClockSource+0x6bc>
 80088d8:	2b70      	cmp	r3, #112	; 0x70
 80088da:	f000 8082 	beq.w	80089e2 <HAL_TIM_ConfigClockSource+0x1d6>
 80088de:	2b70      	cmp	r3, #112	; 0x70
 80088e0:	f200 82f2 	bhi.w	8008ec8 <HAL_TIM_ConfigClockSource+0x6bc>
 80088e4:	2b60      	cmp	r3, #96	; 0x60
 80088e6:	f000 81e8 	beq.w	8008cba <HAL_TIM_ConfigClockSource+0x4ae>
 80088ea:	2b60      	cmp	r3, #96	; 0x60
 80088ec:	f200 82ec 	bhi.w	8008ec8 <HAL_TIM_ConfigClockSource+0x6bc>
 80088f0:	2b50      	cmp	r3, #80	; 0x50
 80088f2:	f000 8182 	beq.w	8008bfa <HAL_TIM_ConfigClockSource+0x3ee>
 80088f6:	2b50      	cmp	r3, #80	; 0x50
 80088f8:	f200 82e6 	bhi.w	8008ec8 <HAL_TIM_ConfigClockSource+0x6bc>
 80088fc:	2b40      	cmp	r3, #64	; 0x40
 80088fe:	f000 824d 	beq.w	8008d9c <HAL_TIM_ConfigClockSource+0x590>
 8008902:	2b40      	cmp	r3, #64	; 0x40
 8008904:	f200 82e0 	bhi.w	8008ec8 <HAL_TIM_ConfigClockSource+0x6bc>
 8008908:	2b30      	cmp	r3, #48	; 0x30
 800890a:	f000 82a7 	beq.w	8008e5c <HAL_TIM_ConfigClockSource+0x650>
 800890e:	2b30      	cmp	r3, #48	; 0x30
 8008910:	f200 82da 	bhi.w	8008ec8 <HAL_TIM_ConfigClockSource+0x6bc>
 8008914:	2b20      	cmp	r3, #32
 8008916:	f000 82a1 	beq.w	8008e5c <HAL_TIM_ConfigClockSource+0x650>
 800891a:	2b20      	cmp	r3, #32
 800891c:	f200 82d4 	bhi.w	8008ec8 <HAL_TIM_ConfigClockSource+0x6bc>
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 829b 	beq.w	8008e5c <HAL_TIM_ConfigClockSource+0x650>
 8008926:	2b10      	cmp	r3, #16
 8008928:	f000 8298 	beq.w	8008e5c <HAL_TIM_ConfigClockSource+0x650>
 800892c:	e2cc      	b.n	8008ec8 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a6c      	ldr	r2, [pc, #432]	; (8008ae4 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	f000 82ca 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008942:	f000 82c4 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a67      	ldr	r2, [pc, #412]	; (8008ae8 <HAL_TIM_ConfigClockSource+0x2dc>)
 800894c:	4293      	cmp	r3, r2
 800894e:	f000 82be 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a65      	ldr	r2, [pc, #404]	; (8008aec <HAL_TIM_ConfigClockSource+0x2e0>)
 8008958:	4293      	cmp	r3, r2
 800895a:	f000 82b8 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a63      	ldr	r2, [pc, #396]	; (8008af0 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008964:	4293      	cmp	r3, r2
 8008966:	f000 82b2 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a61      	ldr	r2, [pc, #388]	; (8008af4 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	f000 82ac 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a5f      	ldr	r2, [pc, #380]	; (8008af8 <HAL_TIM_ConfigClockSource+0x2ec>)
 800897c:	4293      	cmp	r3, r2
 800897e:	f000 82a6 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a5d      	ldr	r2, [pc, #372]	; (8008afc <HAL_TIM_ConfigClockSource+0x2f0>)
 8008988:	4293      	cmp	r3, r2
 800898a:	f000 82a0 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a5b      	ldr	r2, [pc, #364]	; (8008b00 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	f000 829a 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a59      	ldr	r2, [pc, #356]	; (8008b04 <HAL_TIM_ConfigClockSource+0x2f8>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	f000 8294 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a57      	ldr	r2, [pc, #348]	; (8008b08 <HAL_TIM_ConfigClockSource+0x2fc>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	f000 828e 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a55      	ldr	r2, [pc, #340]	; (8008b0c <HAL_TIM_ConfigClockSource+0x300>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	f000 8288 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a53      	ldr	r2, [pc, #332]	; (8008b10 <HAL_TIM_ConfigClockSource+0x304>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	f000 8282 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a51      	ldr	r2, [pc, #324]	; (8008b14 <HAL_TIM_ConfigClockSource+0x308>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	f000 827c 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
 80089d6:	f241 41c7 	movw	r1, #5319	; 0x14c7
 80089da:	4841      	ldr	r0, [pc, #260]	; (8008ae0 <HAL_TIM_ConfigClockSource+0x2d4>)
 80089dc:	f7fa f8b7 	bl	8002b4e <assert_failed>
      break;
 80089e0:	e275      	b.n	8008ece <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a3f      	ldr	r2, [pc, #252]	; (8008ae4 <HAL_TIM_ConfigClockSource+0x2d8>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d027      	beq.n	8008a3c <HAL_TIM_ConfigClockSource+0x230>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f4:	d022      	beq.n	8008a3c <HAL_TIM_ConfigClockSource+0x230>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a3b      	ldr	r2, [pc, #236]	; (8008ae8 <HAL_TIM_ConfigClockSource+0x2dc>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d01d      	beq.n	8008a3c <HAL_TIM_ConfigClockSource+0x230>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a39      	ldr	r2, [pc, #228]	; (8008aec <HAL_TIM_ConfigClockSource+0x2e0>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d018      	beq.n	8008a3c <HAL_TIM_ConfigClockSource+0x230>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a38      	ldr	r2, [pc, #224]	; (8008af0 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d013      	beq.n	8008a3c <HAL_TIM_ConfigClockSource+0x230>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a38      	ldr	r2, [pc, #224]	; (8008afc <HAL_TIM_ConfigClockSource+0x2f0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00e      	beq.n	8008a3c <HAL_TIM_ConfigClockSource+0x230>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a37      	ldr	r2, [pc, #220]	; (8008b00 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d009      	beq.n	8008a3c <HAL_TIM_ConfigClockSource+0x230>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a37      	ldr	r2, [pc, #220]	; (8008b0c <HAL_TIM_ConfigClockSource+0x300>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d004      	beq.n	8008a3c <HAL_TIM_ConfigClockSource+0x230>
 8008a32:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8008a36:	482a      	ldr	r0, [pc, #168]	; (8008ae0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008a38:	f7fa f889 	bl	8002b4e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d013      	beq.n	8008a6c <HAL_TIM_ConfigClockSource+0x260>
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4c:	d00e      	beq.n	8008a6c <HAL_TIM_ConfigClockSource+0x260>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a56:	d009      	beq.n	8008a6c <HAL_TIM_ConfigClockSource+0x260>
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a60:	d004      	beq.n	8008a6c <HAL_TIM_ConfigClockSource+0x260>
 8008a62:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8008a66:	481e      	ldr	r0, [pc, #120]	; (8008ae0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008a68:	f7fa f871 	bl	8002b4e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a74:	d014      	beq.n	8008aa0 <HAL_TIM_ConfigClockSource+0x294>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d010      	beq.n	8008aa0 <HAL_TIM_ConfigClockSource+0x294>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00c      	beq.n	8008aa0 <HAL_TIM_ConfigClockSource+0x294>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d008      	beq.n	8008aa0 <HAL_TIM_ConfigClockSource+0x294>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	2b0a      	cmp	r3, #10
 8008a94:	d004      	beq.n	8008aa0 <HAL_TIM_ConfigClockSource+0x294>
 8008a96:	f241 41d2 	movw	r1, #5330	; 0x14d2
 8008a9a:	4811      	ldr	r0, [pc, #68]	; (8008ae0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008a9c:	f7fa f857 	bl	8002b4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	2b0f      	cmp	r3, #15
 8008aa6:	d904      	bls.n	8008ab2 <HAL_TIM_ConfigClockSource+0x2a6>
 8008aa8:	f241 41d3 	movw	r1, #5331	; 0x14d3
 8008aac:	480c      	ldr	r0, [pc, #48]	; (8008ae0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008aae:	f7fa f84e 	bl	8002b4e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6818      	ldr	r0, [r3, #0]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	6899      	ldr	r1, [r3, #8]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	f000 fd9f 	bl	8009604 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ad4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	609a      	str	r2, [r3, #8]
      break;
 8008ade:	e1f7      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x6c4>
 8008ae0:	08010448 	.word	0x08010448
 8008ae4:	40010000 	.word	0x40010000
 8008ae8:	40000400 	.word	0x40000400
 8008aec:	40000800 	.word	0x40000800
 8008af0:	40000c00 	.word	0x40000c00
 8008af4:	40001000 	.word	0x40001000
 8008af8:	40001400 	.word	0x40001400
 8008afc:	40010400 	.word	0x40010400
 8008b00:	40014000 	.word	0x40014000
 8008b04:	40014400 	.word	0x40014400
 8008b08:	40014800 	.word	0x40014800
 8008b0c:	40001800 	.word	0x40001800
 8008b10:	40001c00 	.word	0x40001c00
 8008b14:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a97      	ldr	r2, [pc, #604]	; (8008d7c <HAL_TIM_ConfigClockSource+0x570>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d01d      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0x352>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b2a:	d018      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0x352>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a93      	ldr	r2, [pc, #588]	; (8008d80 <HAL_TIM_ConfigClockSource+0x574>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d013      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0x352>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a92      	ldr	r2, [pc, #584]	; (8008d84 <HAL_TIM_ConfigClockSource+0x578>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00e      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0x352>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a90      	ldr	r2, [pc, #576]	; (8008d88 <HAL_TIM_ConfigClockSource+0x57c>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d009      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0x352>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a8f      	ldr	r2, [pc, #572]	; (8008d8c <HAL_TIM_ConfigClockSource+0x580>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d004      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0x352>
 8008b54:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8008b58:	488d      	ldr	r0, [pc, #564]	; (8008d90 <HAL_TIM_ConfigClockSource+0x584>)
 8008b5a:	f7f9 fff8 	bl	8002b4e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d013      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0x382>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b6e:	d00e      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0x382>
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b78:	d009      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0x382>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b82:	d004      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0x382>
 8008b84:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8008b88:	4881      	ldr	r0, [pc, #516]	; (8008d90 <HAL_TIM_ConfigClockSource+0x584>)
 8008b8a:	f7f9 ffe0 	bl	8002b4e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b96:	d014      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x3b6>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d010      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x3b6>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00c      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x3b6>
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d008      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x3b6>
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	2b0a      	cmp	r3, #10
 8008bb6:	d004      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x3b6>
 8008bb8:	f241 41ea 	movw	r1, #5354	; 0x14ea
 8008bbc:	4874      	ldr	r0, [pc, #464]	; (8008d90 <HAL_TIM_ConfigClockSource+0x584>)
 8008bbe:	f7f9 ffc6 	bl	8002b4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	2b0f      	cmp	r3, #15
 8008bc8:	d904      	bls.n	8008bd4 <HAL_TIM_ConfigClockSource+0x3c8>
 8008bca:	f241 41eb 	movw	r1, #5355	; 0x14eb
 8008bce:	4870      	ldr	r0, [pc, #448]	; (8008d90 <HAL_TIM_ConfigClockSource+0x584>)
 8008bd0:	f7f9 ffbd 	bl	8002b4e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6818      	ldr	r0, [r3, #0]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	6899      	ldr	r1, [r3, #8]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f000 fd0e 	bl	8009604 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bf6:	609a      	str	r2, [r3, #8]
      break;
 8008bf8:	e16a      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a5f      	ldr	r2, [pc, #380]	; (8008d7c <HAL_TIM_ConfigClockSource+0x570>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d027      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x448>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c0c:	d022      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x448>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a5b      	ldr	r2, [pc, #364]	; (8008d80 <HAL_TIM_ConfigClockSource+0x574>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d01d      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x448>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a59      	ldr	r2, [pc, #356]	; (8008d84 <HAL_TIM_ConfigClockSource+0x578>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d018      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x448>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a58      	ldr	r2, [pc, #352]	; (8008d88 <HAL_TIM_ConfigClockSource+0x57c>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d013      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x448>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a56      	ldr	r2, [pc, #344]	; (8008d8c <HAL_TIM_ConfigClockSource+0x580>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d00e      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x448>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a56      	ldr	r2, [pc, #344]	; (8008d94 <HAL_TIM_ConfigClockSource+0x588>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d009      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x448>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a54      	ldr	r2, [pc, #336]	; (8008d98 <HAL_TIM_ConfigClockSource+0x58c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d004      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x448>
 8008c4a:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8008c4e:	4850      	ldr	r0, [pc, #320]	; (8008d90 <HAL_TIM_ConfigClockSource+0x584>)
 8008c50:	f7f9 ff7d 	bl	8002b4e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c5c:	d014      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x47c>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d010      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x47c>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00c      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x47c>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d008      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x47c>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	2b0a      	cmp	r3, #10
 8008c7c:	d004      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x47c>
 8008c7e:	f241 41fd 	movw	r1, #5373	; 0x14fd
 8008c82:	4843      	ldr	r0, [pc, #268]	; (8008d90 <HAL_TIM_ConfigClockSource+0x584>)
 8008c84:	f7f9 ff63 	bl	8002b4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	2b0f      	cmp	r3, #15
 8008c8e:	d904      	bls.n	8008c9a <HAL_TIM_ConfigClockSource+0x48e>
 8008c90:	f241 41fe 	movw	r1, #5374	; 0x14fe
 8008c94:	483e      	ldr	r0, [pc, #248]	; (8008d90 <HAL_TIM_ConfigClockSource+0x584>)
 8008c96:	f7f9 ff5a 	bl	8002b4e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6818      	ldr	r0, [r3, #0]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	6859      	ldr	r1, [r3, #4]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f000 fc32 	bl	8009510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2150      	movs	r1, #80	; 0x50
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 fc8b 	bl	80095ce <TIM_ITRx_SetConfig>
      break;
 8008cb8:	e10a      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a2f      	ldr	r2, [pc, #188]	; (8008d7c <HAL_TIM_ConfigClockSource+0x570>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d027      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x508>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ccc:	d022      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x508>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a2b      	ldr	r2, [pc, #172]	; (8008d80 <HAL_TIM_ConfigClockSource+0x574>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d01d      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x508>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a29      	ldr	r2, [pc, #164]	; (8008d84 <HAL_TIM_ConfigClockSource+0x578>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d018      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x508>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a28      	ldr	r2, [pc, #160]	; (8008d88 <HAL_TIM_ConfigClockSource+0x57c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d013      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x508>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a26      	ldr	r2, [pc, #152]	; (8008d8c <HAL_TIM_ConfigClockSource+0x580>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00e      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x508>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a26      	ldr	r2, [pc, #152]	; (8008d94 <HAL_TIM_ConfigClockSource+0x588>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d009      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x508>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a24      	ldr	r2, [pc, #144]	; (8008d98 <HAL_TIM_ConfigClockSource+0x58c>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d004      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x508>
 8008d0a:	f241 510a 	movw	r1, #5386	; 0x150a
 8008d0e:	4820      	ldr	r0, [pc, #128]	; (8008d90 <HAL_TIM_ConfigClockSource+0x584>)
 8008d10:	f7f9 ff1d 	bl	8002b4e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d1c:	d014      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x53c>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d010      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x53c>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00c      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x53c>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d008      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x53c>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	2b0a      	cmp	r3, #10
 8008d3c:	d004      	beq.n	8008d48 <HAL_TIM_ConfigClockSource+0x53c>
 8008d3e:	f241 510d 	movw	r1, #5389	; 0x150d
 8008d42:	4813      	ldr	r0, [pc, #76]	; (8008d90 <HAL_TIM_ConfigClockSource+0x584>)
 8008d44:	f7f9 ff03 	bl	8002b4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	2b0f      	cmp	r3, #15
 8008d4e:	d904      	bls.n	8008d5a <HAL_TIM_ConfigClockSource+0x54e>
 8008d50:	f241 510e 	movw	r1, #5390	; 0x150e
 8008d54:	480e      	ldr	r0, [pc, #56]	; (8008d90 <HAL_TIM_ConfigClockSource+0x584>)
 8008d56:	f7f9 fefa 	bl	8002b4e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	6859      	ldr	r1, [r3, #4]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f000 fc01 	bl	800956e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2160      	movs	r1, #96	; 0x60
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fc2b 	bl	80095ce <TIM_ITRx_SetConfig>
      break;
 8008d78:	e0aa      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x6c4>
 8008d7a:	bf00      	nop
 8008d7c:	40010000 	.word	0x40010000
 8008d80:	40000400 	.word	0x40000400
 8008d84:	40000800 	.word	0x40000800
 8008d88:	40000c00 	.word	0x40000c00
 8008d8c:	40010400 	.word	0x40010400
 8008d90:	08010448 	.word	0x08010448
 8008d94:	40014000 	.word	0x40014000
 8008d98:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a52      	ldr	r2, [pc, #328]	; (8008eec <HAL_TIM_ConfigClockSource+0x6e0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d027      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dae:	d022      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a4e      	ldr	r2, [pc, #312]	; (8008ef0 <HAL_TIM_ConfigClockSource+0x6e4>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d01d      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a4d      	ldr	r2, [pc, #308]	; (8008ef4 <HAL_TIM_ConfigClockSource+0x6e8>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d018      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a4b      	ldr	r2, [pc, #300]	; (8008ef8 <HAL_TIM_ConfigClockSource+0x6ec>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d013      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a4a      	ldr	r2, [pc, #296]	; (8008efc <HAL_TIM_ConfigClockSource+0x6f0>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00e      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a48      	ldr	r2, [pc, #288]	; (8008f00 <HAL_TIM_ConfigClockSource+0x6f4>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d009      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a47      	ldr	r2, [pc, #284]	; (8008f04 <HAL_TIM_ConfigClockSource+0x6f8>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d004      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008dec:	f241 511a 	movw	r1, #5402	; 0x151a
 8008df0:	4845      	ldr	r0, [pc, #276]	; (8008f08 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008df2:	f7f9 feac 	bl	8002b4e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dfe:	d014      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x61e>
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d010      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x61e>
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00c      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x61e>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d008      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x61e>
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	2b0a      	cmp	r3, #10
 8008e1e:	d004      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x61e>
 8008e20:	f241 511d 	movw	r1, #5405	; 0x151d
 8008e24:	4838      	ldr	r0, [pc, #224]	; (8008f08 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008e26:	f7f9 fe92 	bl	8002b4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	2b0f      	cmp	r3, #15
 8008e30:	d904      	bls.n	8008e3c <HAL_TIM_ConfigClockSource+0x630>
 8008e32:	f241 511e 	movw	r1, #5406	; 0x151e
 8008e36:	4834      	ldr	r0, [pc, #208]	; (8008f08 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008e38:	f7f9 fe89 	bl	8002b4e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6818      	ldr	r0, [r3, #0]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	6859      	ldr	r1, [r3, #4]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	f000 fb61 	bl	8009510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2140      	movs	r1, #64	; 0x40
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fbba 	bl	80095ce <TIM_ITRx_SetConfig>
      break;
 8008e5a:	e039      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a22      	ldr	r2, [pc, #136]	; (8008eec <HAL_TIM_ConfigClockSource+0x6e0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d027      	beq.n	8008eb6 <HAL_TIM_ConfigClockSource+0x6aa>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e6e:	d022      	beq.n	8008eb6 <HAL_TIM_ConfigClockSource+0x6aa>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a1e      	ldr	r2, [pc, #120]	; (8008ef0 <HAL_TIM_ConfigClockSource+0x6e4>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d01d      	beq.n	8008eb6 <HAL_TIM_ConfigClockSource+0x6aa>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a1d      	ldr	r2, [pc, #116]	; (8008ef4 <HAL_TIM_ConfigClockSource+0x6e8>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d018      	beq.n	8008eb6 <HAL_TIM_ConfigClockSource+0x6aa>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a1b      	ldr	r2, [pc, #108]	; (8008ef8 <HAL_TIM_ConfigClockSource+0x6ec>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d013      	beq.n	8008eb6 <HAL_TIM_ConfigClockSource+0x6aa>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1a      	ldr	r2, [pc, #104]	; (8008efc <HAL_TIM_ConfigClockSource+0x6f0>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d00e      	beq.n	8008eb6 <HAL_TIM_ConfigClockSource+0x6aa>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a18      	ldr	r2, [pc, #96]	; (8008f00 <HAL_TIM_ConfigClockSource+0x6f4>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d009      	beq.n	8008eb6 <HAL_TIM_ConfigClockSource+0x6aa>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a17      	ldr	r2, [pc, #92]	; (8008f04 <HAL_TIM_ConfigClockSource+0x6f8>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d004      	beq.n	8008eb6 <HAL_TIM_ConfigClockSource+0x6aa>
 8008eac:	f241 512d 	movw	r1, #5421	; 0x152d
 8008eb0:	4815      	ldr	r0, [pc, #84]	; (8008f08 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008eb2:	f7f9 fe4c 	bl	8002b4e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	f000 fb84 	bl	80095ce <TIM_ITRx_SetConfig>
      break;
 8008ec6:	e003      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	73fb      	strb	r3, [r7, #15]
      break;
 8008ecc:	e000      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 8008ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	40010000 	.word	0x40010000
 8008ef0:	40000400 	.word	0x40000400
 8008ef4:	40000800 	.word	0x40000800
 8008ef8:	40000c00 	.word	0x40000c00
 8008efc:	40010400 	.word	0x40010400
 8008f00:	40014000 	.word	0x40014000
 8008f04:	40001800 	.word	0x40001800
 8008f08:	08010448 	.word	0x08010448

08008f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a40      	ldr	r2, [pc, #256]	; (8009070 <TIM_Base_SetConfig+0x114>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d013      	beq.n	8008f9c <TIM_Base_SetConfig+0x40>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f7a:	d00f      	beq.n	8008f9c <TIM_Base_SetConfig+0x40>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a3d      	ldr	r2, [pc, #244]	; (8009074 <TIM_Base_SetConfig+0x118>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d00b      	beq.n	8008f9c <TIM_Base_SetConfig+0x40>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a3c      	ldr	r2, [pc, #240]	; (8009078 <TIM_Base_SetConfig+0x11c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d007      	beq.n	8008f9c <TIM_Base_SetConfig+0x40>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a3b      	ldr	r2, [pc, #236]	; (800907c <TIM_Base_SetConfig+0x120>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d003      	beq.n	8008f9c <TIM_Base_SetConfig+0x40>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a3a      	ldr	r2, [pc, #232]	; (8009080 <TIM_Base_SetConfig+0x124>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d108      	bne.n	8008fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a2f      	ldr	r2, [pc, #188]	; (8009070 <TIM_Base_SetConfig+0x114>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d02b      	beq.n	800900e <TIM_Base_SetConfig+0xb2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fbc:	d027      	beq.n	800900e <TIM_Base_SetConfig+0xb2>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a2c      	ldr	r2, [pc, #176]	; (8009074 <TIM_Base_SetConfig+0x118>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d023      	beq.n	800900e <TIM_Base_SetConfig+0xb2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a2b      	ldr	r2, [pc, #172]	; (8009078 <TIM_Base_SetConfig+0x11c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d01f      	beq.n	800900e <TIM_Base_SetConfig+0xb2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a2a      	ldr	r2, [pc, #168]	; (800907c <TIM_Base_SetConfig+0x120>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d01b      	beq.n	800900e <TIM_Base_SetConfig+0xb2>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a29      	ldr	r2, [pc, #164]	; (8009080 <TIM_Base_SetConfig+0x124>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d017      	beq.n	800900e <TIM_Base_SetConfig+0xb2>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a28      	ldr	r2, [pc, #160]	; (8009084 <TIM_Base_SetConfig+0x128>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d013      	beq.n	800900e <TIM_Base_SetConfig+0xb2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a27      	ldr	r2, [pc, #156]	; (8009088 <TIM_Base_SetConfig+0x12c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d00f      	beq.n	800900e <TIM_Base_SetConfig+0xb2>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a26      	ldr	r2, [pc, #152]	; (800908c <TIM_Base_SetConfig+0x130>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d00b      	beq.n	800900e <TIM_Base_SetConfig+0xb2>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a25      	ldr	r2, [pc, #148]	; (8009090 <TIM_Base_SetConfig+0x134>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d007      	beq.n	800900e <TIM_Base_SetConfig+0xb2>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a24      	ldr	r2, [pc, #144]	; (8009094 <TIM_Base_SetConfig+0x138>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d003      	beq.n	800900e <TIM_Base_SetConfig+0xb2>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a23      	ldr	r2, [pc, #140]	; (8009098 <TIM_Base_SetConfig+0x13c>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d108      	bne.n	8009020 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	4313      	orrs	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	4313      	orrs	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a0a      	ldr	r2, [pc, #40]	; (8009070 <TIM_Base_SetConfig+0x114>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d003      	beq.n	8009054 <TIM_Base_SetConfig+0xf8>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a0c      	ldr	r2, [pc, #48]	; (8009080 <TIM_Base_SetConfig+0x124>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d103      	bne.n	800905c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	691a      	ldr	r2, [r3, #16]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	615a      	str	r2, [r3, #20]
}
 8009062:	bf00      	nop
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	40010000 	.word	0x40010000
 8009074:	40000400 	.word	0x40000400
 8009078:	40000800 	.word	0x40000800
 800907c:	40000c00 	.word	0x40000c00
 8009080:	40010400 	.word	0x40010400
 8009084:	40014000 	.word	0x40014000
 8009088:	40014400 	.word	0x40014400
 800908c:	40014800 	.word	0x40014800
 8009090:	40001800 	.word	0x40001800
 8009094:	40001c00 	.word	0x40001c00
 8009098:	40002000 	.word	0x40002000

0800909c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	f023 0201 	bic.w	r2, r3, #1
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f023 0303 	bic.w	r3, r3, #3
 80090d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	4313      	orrs	r3, r2
 80090dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f023 0302 	bic.w	r3, r3, #2
 80090e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a34      	ldr	r2, [pc, #208]	; (80091c4 <TIM_OC1_SetConfig+0x128>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d003      	beq.n	8009100 <TIM_OC1_SetConfig+0x64>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a33      	ldr	r2, [pc, #204]	; (80091c8 <TIM_OC1_SetConfig+0x12c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d119      	bne.n	8009134 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d008      	beq.n	800911a <TIM_OC1_SetConfig+0x7e>
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	2b08      	cmp	r3, #8
 800910e:	d004      	beq.n	800911a <TIM_OC1_SetConfig+0x7e>
 8009110:	f641 21cb 	movw	r1, #6859	; 0x1acb
 8009114:	482d      	ldr	r0, [pc, #180]	; (80091cc <TIM_OC1_SetConfig+0x130>)
 8009116:	f7f9 fd1a 	bl	8002b4e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f023 0308 	bic.w	r3, r3, #8
 8009120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	4313      	orrs	r3, r2
 800912a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f023 0304 	bic.w	r3, r3, #4
 8009132:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a23      	ldr	r2, [pc, #140]	; (80091c4 <TIM_OC1_SetConfig+0x128>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d003      	beq.n	8009144 <TIM_OC1_SetConfig+0xa8>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a22      	ldr	r2, [pc, #136]	; (80091c8 <TIM_OC1_SetConfig+0x12c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d12d      	bne.n	80091a0 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800914c:	d008      	beq.n	8009160 <TIM_OC1_SetConfig+0xc4>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d004      	beq.n	8009160 <TIM_OC1_SetConfig+0xc4>
 8009156:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800915a:	481c      	ldr	r0, [pc, #112]	; (80091cc <TIM_OC1_SetConfig+0x130>)
 800915c:	f7f9 fcf7 	bl	8002b4e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009168:	d008      	beq.n	800917c <TIM_OC1_SetConfig+0xe0>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d004      	beq.n	800917c <TIM_OC1_SetConfig+0xe0>
 8009172:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 8009176:	4815      	ldr	r0, [pc, #84]	; (80091cc <TIM_OC1_SetConfig+0x130>)
 8009178:	f7f9 fce9 	bl	8002b4e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800918a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	4313      	orrs	r3, r2
 8009194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	4313      	orrs	r3, r2
 800919e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	621a      	str	r2, [r3, #32]
}
 80091ba:	bf00      	nop
 80091bc:	3718      	adds	r7, #24
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	40010000 	.word	0x40010000
 80091c8:	40010400 	.word	0x40010400
 80091cc:	08010448 	.word	0x08010448

080091d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	f023 0210 	bic.w	r2, r3, #16
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	021b      	lsls	r3, r3, #8
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	4313      	orrs	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	f023 0320 	bic.w	r3, r3, #32
 800921a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	011b      	lsls	r3, r3, #4
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	4313      	orrs	r3, r2
 8009226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a35      	ldr	r2, [pc, #212]	; (8009300 <TIM_OC2_SetConfig+0x130>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d003      	beq.n	8009238 <TIM_OC2_SetConfig+0x68>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a34      	ldr	r2, [pc, #208]	; (8009304 <TIM_OC2_SetConfig+0x134>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d11a      	bne.n	800926e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d008      	beq.n	8009252 <TIM_OC2_SetConfig+0x82>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	2b08      	cmp	r3, #8
 8009246:	d004      	beq.n	8009252 <TIM_OC2_SetConfig+0x82>
 8009248:	f641 3116 	movw	r1, #6934	; 0x1b16
 800924c:	482e      	ldr	r0, [pc, #184]	; (8009308 <TIM_OC2_SetConfig+0x138>)
 800924e:	f7f9 fc7e 	bl	8002b4e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	011b      	lsls	r3, r3, #4
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800926c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a23      	ldr	r2, [pc, #140]	; (8009300 <TIM_OC2_SetConfig+0x130>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d003      	beq.n	800927e <TIM_OC2_SetConfig+0xae>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a22      	ldr	r2, [pc, #136]	; (8009304 <TIM_OC2_SetConfig+0x134>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d12f      	bne.n	80092de <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009286:	d008      	beq.n	800929a <TIM_OC2_SetConfig+0xca>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d004      	beq.n	800929a <TIM_OC2_SetConfig+0xca>
 8009290:	f641 3124 	movw	r1, #6948	; 0x1b24
 8009294:	481c      	ldr	r0, [pc, #112]	; (8009308 <TIM_OC2_SetConfig+0x138>)
 8009296:	f7f9 fc5a 	bl	8002b4e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092a2:	d008      	beq.n	80092b6 <TIM_OC2_SetConfig+0xe6>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d004      	beq.n	80092b6 <TIM_OC2_SetConfig+0xe6>
 80092ac:	f641 3125 	movw	r1, #6949	; 0x1b25
 80092b0:	4815      	ldr	r0, [pc, #84]	; (8009308 <TIM_OC2_SetConfig+0x138>)
 80092b2:	f7f9 fc4c 	bl	8002b4e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	4313      	orrs	r3, r2
 80092dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	621a      	str	r2, [r3, #32]
}
 80092f8:	bf00      	nop
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	40010000 	.word	0x40010000
 8009304:	40010400 	.word	0x40010400
 8009308:	08010448 	.word	0x08010448

0800930c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800933a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 0303 	bic.w	r3, r3, #3
 8009342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	021b      	lsls	r3, r3, #8
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	4313      	orrs	r3, r2
 8009360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a35      	ldr	r2, [pc, #212]	; (800943c <TIM_OC3_SetConfig+0x130>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d003      	beq.n	8009372 <TIM_OC3_SetConfig+0x66>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a34      	ldr	r2, [pc, #208]	; (8009440 <TIM_OC3_SetConfig+0x134>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d11a      	bne.n	80093a8 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d008      	beq.n	800938c <TIM_OC3_SetConfig+0x80>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	2b08      	cmp	r3, #8
 8009380:	d004      	beq.n	800938c <TIM_OC3_SetConfig+0x80>
 8009382:	f641 3161 	movw	r1, #7009	; 0x1b61
 8009386:	482f      	ldr	r0, [pc, #188]	; (8009444 <TIM_OC3_SetConfig+0x138>)
 8009388:	f7f9 fbe1 	bl	8002b4e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	021b      	lsls	r3, r3, #8
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	4313      	orrs	r3, r2
 800939e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a24      	ldr	r2, [pc, #144]	; (800943c <TIM_OC3_SetConfig+0x130>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d003      	beq.n	80093b8 <TIM_OC3_SetConfig+0xac>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a23      	ldr	r2, [pc, #140]	; (8009440 <TIM_OC3_SetConfig+0x134>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d12f      	bne.n	8009418 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093c0:	d008      	beq.n	80093d4 <TIM_OC3_SetConfig+0xc8>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d004      	beq.n	80093d4 <TIM_OC3_SetConfig+0xc8>
 80093ca:	f641 316e 	movw	r1, #7022	; 0x1b6e
 80093ce:	481d      	ldr	r0, [pc, #116]	; (8009444 <TIM_OC3_SetConfig+0x138>)
 80093d0:	f7f9 fbbd 	bl	8002b4e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093dc:	d008      	beq.n	80093f0 <TIM_OC3_SetConfig+0xe4>
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d004      	beq.n	80093f0 <TIM_OC3_SetConfig+0xe4>
 80093e6:	f641 316f 	movw	r1, #7023	; 0x1b6f
 80093ea:	4816      	ldr	r0, [pc, #88]	; (8009444 <TIM_OC3_SetConfig+0x138>)
 80093ec:	f7f9 fbaf 	bl	8002b4e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	011b      	lsls	r3, r3, #4
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	4313      	orrs	r3, r2
 800940a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	4313      	orrs	r3, r2
 8009416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	621a      	str	r2, [r3, #32]
}
 8009432:	bf00      	nop
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	40010000 	.word	0x40010000
 8009440:	40010400 	.word	0x40010400
 8009444:	08010448 	.word	0x08010448

08009448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800947e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	021b      	lsls	r3, r3, #8
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	4313      	orrs	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	031b      	lsls	r3, r3, #12
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	4313      	orrs	r3, r2
 800949e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a18      	ldr	r2, [pc, #96]	; (8009504 <TIM_OC4_SetConfig+0xbc>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d003      	beq.n	80094b0 <TIM_OC4_SetConfig+0x68>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a17      	ldr	r2, [pc, #92]	; (8009508 <TIM_OC4_SetConfig+0xc0>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d117      	bne.n	80094e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	695b      	ldr	r3, [r3, #20]
 80094b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094b8:	d008      	beq.n	80094cc <TIM_OC4_SetConfig+0x84>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <TIM_OC4_SetConfig+0x84>
 80094c2:	f641 31ad 	movw	r1, #7085	; 0x1bad
 80094c6:	4811      	ldr	r0, [pc, #68]	; (800950c <TIM_OC4_SetConfig+0xc4>)
 80094c8:	f7f9 fb41 	bl	8002b4e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	019b      	lsls	r3, r3, #6
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	4313      	orrs	r3, r2
 80094de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	621a      	str	r2, [r3, #32]
}
 80094fa:	bf00      	nop
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	40010000 	.word	0x40010000
 8009508:	40010400 	.word	0x40010400
 800950c:	08010448 	.word	0x08010448

08009510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6a1b      	ldr	r3, [r3, #32]
 8009520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	f023 0201 	bic.w	r2, r3, #1
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800953a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	011b      	lsls	r3, r3, #4
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	4313      	orrs	r3, r2
 8009544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f023 030a 	bic.w	r3, r3, #10
 800954c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	4313      	orrs	r3, r2
 8009554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	621a      	str	r2, [r3, #32]
}
 8009562:	bf00      	nop
 8009564:	371c      	adds	r7, #28
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800956e:	b480      	push	{r7}
 8009570:	b087      	sub	sp, #28
 8009572:	af00      	add	r7, sp, #0
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	f023 0210 	bic.w	r2, r3, #16
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	031b      	lsls	r3, r3, #12
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	011b      	lsls	r3, r3, #4
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	621a      	str	r2, [r3, #32]
}
 80095c2:	bf00      	nop
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b085      	sub	sp, #20
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f043 0307 	orr.w	r3, r3, #7
 80095f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	609a      	str	r2, [r3, #8]
}
 80095f8:	bf00      	nop
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800961e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	021a      	lsls	r2, r3, #8
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	431a      	orrs	r2, r3
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	4313      	orrs	r3, r2
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	4313      	orrs	r3, r2
 8009630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	609a      	str	r2, [r3, #8]
}
 8009638:	bf00      	nop
 800963a:	371c      	adds	r7, #28
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	4a32      	ldr	r2, [pc, #200]	; (800971c <TIM_CCxChannelCmd+0xd8>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d030      	beq.n	80096ba <TIM_CCxChannelCmd+0x76>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965e:	d02c      	beq.n	80096ba <TIM_CCxChannelCmd+0x76>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4a2f      	ldr	r2, [pc, #188]	; (8009720 <TIM_CCxChannelCmd+0xdc>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d028      	beq.n	80096ba <TIM_CCxChannelCmd+0x76>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4a2e      	ldr	r2, [pc, #184]	; (8009724 <TIM_CCxChannelCmd+0xe0>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d024      	beq.n	80096ba <TIM_CCxChannelCmd+0x76>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4a2d      	ldr	r2, [pc, #180]	; (8009728 <TIM_CCxChannelCmd+0xe4>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d020      	beq.n	80096ba <TIM_CCxChannelCmd+0x76>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	4a2c      	ldr	r2, [pc, #176]	; (800972c <TIM_CCxChannelCmd+0xe8>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d01c      	beq.n	80096ba <TIM_CCxChannelCmd+0x76>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4a2b      	ldr	r2, [pc, #172]	; (8009730 <TIM_CCxChannelCmd+0xec>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d018      	beq.n	80096ba <TIM_CCxChannelCmd+0x76>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4a2a      	ldr	r2, [pc, #168]	; (8009734 <TIM_CCxChannelCmd+0xf0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d014      	beq.n	80096ba <TIM_CCxChannelCmd+0x76>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4a29      	ldr	r2, [pc, #164]	; (8009738 <TIM_CCxChannelCmd+0xf4>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d010      	beq.n	80096ba <TIM_CCxChannelCmd+0x76>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	4a28      	ldr	r2, [pc, #160]	; (800973c <TIM_CCxChannelCmd+0xf8>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d00c      	beq.n	80096ba <TIM_CCxChannelCmd+0x76>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4a27      	ldr	r2, [pc, #156]	; (8009740 <TIM_CCxChannelCmd+0xfc>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d008      	beq.n	80096ba <TIM_CCxChannelCmd+0x76>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4a26      	ldr	r2, [pc, #152]	; (8009744 <TIM_CCxChannelCmd+0x100>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d004      	beq.n	80096ba <TIM_CCxChannelCmd+0x76>
 80096b0:	f641 5198 	movw	r1, #7576	; 0x1d98
 80096b4:	4824      	ldr	r0, [pc, #144]	; (8009748 <TIM_CCxChannelCmd+0x104>)
 80096b6:	f7f9 fa4a 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d010      	beq.n	80096e2 <TIM_CCxChannelCmd+0x9e>
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b04      	cmp	r3, #4
 80096c4:	d00d      	beq.n	80096e2 <TIM_CCxChannelCmd+0x9e>
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	2b08      	cmp	r3, #8
 80096ca:	d00a      	beq.n	80096e2 <TIM_CCxChannelCmd+0x9e>
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2b0c      	cmp	r3, #12
 80096d0:	d007      	beq.n	80096e2 <TIM_CCxChannelCmd+0x9e>
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2b3c      	cmp	r3, #60	; 0x3c
 80096d6:	d004      	beq.n	80096e2 <TIM_CCxChannelCmd+0x9e>
 80096d8:	f641 5199 	movw	r1, #7577	; 0x1d99
 80096dc:	481a      	ldr	r0, [pc, #104]	; (8009748 <TIM_CCxChannelCmd+0x104>)
 80096de:	f7f9 fa36 	bl	8002b4e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	f003 031f 	and.w	r3, r3, #31
 80096e8:	2201      	movs	r2, #1
 80096ea:	fa02 f303 	lsl.w	r3, r2, r3
 80096ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a1a      	ldr	r2, [r3, #32]
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	43db      	mvns	r3, r3
 80096f8:	401a      	ands	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a1a      	ldr	r2, [r3, #32]
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f003 031f 	and.w	r3, r3, #31
 8009708:	6879      	ldr	r1, [r7, #4]
 800970a:	fa01 f303 	lsl.w	r3, r1, r3
 800970e:	431a      	orrs	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	621a      	str	r2, [r3, #32]
}
 8009714:	bf00      	nop
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	40010000 	.word	0x40010000
 8009720:	40000400 	.word	0x40000400
 8009724:	40000800 	.word	0x40000800
 8009728:	40000c00 	.word	0x40000c00
 800972c:	40010400 	.word	0x40010400
 8009730:	40014000 	.word	0x40014000
 8009734:	40014400 	.word	0x40014400
 8009738:	40014800 	.word	0x40014800
 800973c:	40001800 	.word	0x40001800
 8009740:	40001c00 	.word	0x40001c00
 8009744:	40002000 	.word	0x40002000
 8009748:	08010448 	.word	0x08010448

0800974c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a61      	ldr	r2, [pc, #388]	; (80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d027      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009768:	d022      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a5d      	ldr	r2, [pc, #372]	; (80098e4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d01d      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a5b      	ldr	r2, [pc, #364]	; (80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d018      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a5a      	ldr	r2, [pc, #360]	; (80098ec <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d013      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a58      	ldr	r2, [pc, #352]	; (80098f0 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d00e      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a57      	ldr	r2, [pc, #348]	; (80098f4 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d009      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a55      	ldr	r2, [pc, #340]	; (80098f8 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d004      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80097a6:	f240 71b1 	movw	r1, #1969	; 0x7b1
 80097aa:	4854      	ldr	r0, [pc, #336]	; (80098fc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80097ac:	f7f9 f9cf 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d020      	beq.n	80097fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b10      	cmp	r3, #16
 80097be:	d01c      	beq.n	80097fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b20      	cmp	r3, #32
 80097c6:	d018      	beq.n	80097fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b30      	cmp	r3, #48	; 0x30
 80097ce:	d014      	beq.n	80097fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b40      	cmp	r3, #64	; 0x40
 80097d6:	d010      	beq.n	80097fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b50      	cmp	r3, #80	; 0x50
 80097de:	d00c      	beq.n	80097fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b60      	cmp	r3, #96	; 0x60
 80097e6:	d008      	beq.n	80097fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b70      	cmp	r3, #112	; 0x70
 80097ee:	d004      	beq.n	80097fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097f0:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80097f4:	4841      	ldr	r0, [pc, #260]	; (80098fc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80097f6:	f7f9 f9aa 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	2b80      	cmp	r3, #128	; 0x80
 8009800:	d008      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d004      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800980a:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800980e:	483b      	ldr	r0, [pc, #236]	; (80098fc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009810:	f7f9 f99d 	bl	8002b4e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800981a:	2b01      	cmp	r3, #1
 800981c:	d101      	bne.n	8009822 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800981e:	2302      	movs	r3, #2
 8009820:	e05a      	b.n	80098d8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2202      	movs	r2, #2
 800982e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009848:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	4313      	orrs	r3, r2
 8009852:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a1f      	ldr	r2, [pc, #124]	; (80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d022      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800986e:	d01d      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a1b      	ldr	r2, [pc, #108]	; (80098e4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d018      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a1a      	ldr	r2, [pc, #104]	; (80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d013      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a18      	ldr	r2, [pc, #96]	; (80098ec <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d00e      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a19      	ldr	r2, [pc, #100]	; (80098f8 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d009      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a18      	ldr	r2, [pc, #96]	; (8009900 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d004      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a17      	ldr	r2, [pc, #92]	; (8009904 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d10c      	bne.n	80098c6 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	40010000 	.word	0x40010000
 80098e4:	40000400 	.word	0x40000400
 80098e8:	40000800 	.word	0x40000800
 80098ec:	40000c00 	.word	0x40000c00
 80098f0:	40001000 	.word	0x40001000
 80098f4:	40001400 	.word	0x40001400
 80098f8:	40010400 	.word	0x40010400
 80098fc:	08010480 	.word	0x08010480
 8009900:	40014000 	.word	0x40014000
 8009904:	40001800 	.word	0x40001800

08009908 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a5e      	ldr	r2, [pc, #376]	; (8009a94 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d009      	beq.n	8009934 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a5c      	ldr	r2, [pc, #368]	; (8009a98 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d004      	beq.n	8009934 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800992a:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800992e:	485b      	ldr	r0, [pc, #364]	; (8009a9c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009930:	f7f9 f90d 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800993c:	d008      	beq.n	8009950 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d004      	beq.n	8009950 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8009946:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800994a:	4854      	ldr	r0, [pc, #336]	; (8009a9c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800994c:	f7f9 f8ff 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009958:	d008      	beq.n	800996c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d004      	beq.n	800996c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009962:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8009966:	484d      	ldr	r0, [pc, #308]	; (8009a9c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009968:	f7f9 f8f1 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d013      	beq.n	800999c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800997c:	d00e      	beq.n	800999c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009986:	d009      	beq.n	800999c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009990:	d004      	beq.n	800999c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009992:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8009996:	4841      	ldr	r0, [pc, #260]	; (8009a9c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009998:	f7f9 f8d9 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	2bff      	cmp	r3, #255	; 0xff
 80099a2:	d904      	bls.n	80099ae <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80099a4:	f240 71f2 	movw	r1, #2034	; 0x7f2
 80099a8:	483c      	ldr	r0, [pc, #240]	; (8009a9c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80099aa:	f7f9 f8d0 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b6:	d008      	beq.n	80099ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d004      	beq.n	80099ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80099c0:	f240 71f3 	movw	r1, #2035	; 0x7f3
 80099c4:	4835      	ldr	r0, [pc, #212]	; (8009a9c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80099c6:	f7f9 f8c2 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d009      	beq.n	80099e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099da:	d004      	beq.n	80099e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80099dc:	f240 71f4 	movw	r1, #2036	; 0x7f4
 80099e0:	482e      	ldr	r0, [pc, #184]	; (8009a9c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80099e2:	f7f9 f8b4 	bl	8002b4e <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099ee:	d008      	beq.n	8009a02 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80099f8:	f240 71f5 	movw	r1, #2037	; 0x7f5
 80099fc:	4827      	ldr	r0, [pc, #156]	; (8009a9c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80099fe:	f7f9 f8a6 	bl	8002b4e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d101      	bne.n	8009a10 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	e03d      	b.n	8009a8c <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	695b      	ldr	r3, [r3, #20]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	40010000 	.word	0x40010000
 8009a98:	40010400 	.word	0x40010400
 8009a9c:	08010480 	.word	0x08010480

08009aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e0be      	b.n	8009c58 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d03b      	beq.n	8009b5a <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a5e      	ldr	r2, [pc, #376]	; (8009c60 <HAL_UART_Init+0x198>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d01d      	beq.n	8009b28 <HAL_UART_Init+0x60>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a5c      	ldr	r2, [pc, #368]	; (8009c64 <HAL_UART_Init+0x19c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d018      	beq.n	8009b28 <HAL_UART_Init+0x60>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a5b      	ldr	r2, [pc, #364]	; (8009c68 <HAL_UART_Init+0x1a0>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d013      	beq.n	8009b28 <HAL_UART_Init+0x60>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a59      	ldr	r2, [pc, #356]	; (8009c6c <HAL_UART_Init+0x1a4>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d00e      	beq.n	8009b28 <HAL_UART_Init+0x60>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a58      	ldr	r2, [pc, #352]	; (8009c70 <HAL_UART_Init+0x1a8>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d009      	beq.n	8009b28 <HAL_UART_Init+0x60>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a56      	ldr	r2, [pc, #344]	; (8009c74 <HAL_UART_Init+0x1ac>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d004      	beq.n	8009b28 <HAL_UART_Init+0x60>
 8009b1e:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8009b22:	4855      	ldr	r0, [pc, #340]	; (8009c78 <HAL_UART_Init+0x1b0>)
 8009b24:	f7f9 f813 	bl	8002b4e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d037      	beq.n	8009ba0 <HAL_UART_Init+0xd8>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b38:	d032      	beq.n	8009ba0 <HAL_UART_Init+0xd8>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b42:	d02d      	beq.n	8009ba0 <HAL_UART_Init+0xd8>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b4c:	d028      	beq.n	8009ba0 <HAL_UART_Init+0xd8>
 8009b4e:	f240 1173 	movw	r1, #371	; 0x173
 8009b52:	4849      	ldr	r0, [pc, #292]	; (8009c78 <HAL_UART_Init+0x1b0>)
 8009b54:	f7f8 fffb 	bl	8002b4e <assert_failed>
 8009b58:	e022      	b.n	8009ba0 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a40      	ldr	r2, [pc, #256]	; (8009c60 <HAL_UART_Init+0x198>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d01d      	beq.n	8009ba0 <HAL_UART_Init+0xd8>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a3e      	ldr	r2, [pc, #248]	; (8009c64 <HAL_UART_Init+0x19c>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d018      	beq.n	8009ba0 <HAL_UART_Init+0xd8>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a3d      	ldr	r2, [pc, #244]	; (8009c68 <HAL_UART_Init+0x1a0>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d013      	beq.n	8009ba0 <HAL_UART_Init+0xd8>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a3b      	ldr	r2, [pc, #236]	; (8009c6c <HAL_UART_Init+0x1a4>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d00e      	beq.n	8009ba0 <HAL_UART_Init+0xd8>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a3a      	ldr	r2, [pc, #232]	; (8009c70 <HAL_UART_Init+0x1a8>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d009      	beq.n	8009ba0 <HAL_UART_Init+0xd8>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a38      	ldr	r2, [pc, #224]	; (8009c74 <HAL_UART_Init+0x1ac>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d004      	beq.n	8009ba0 <HAL_UART_Init+0xd8>
 8009b96:	f240 1177 	movw	r1, #375	; 0x177
 8009b9a:	4837      	ldr	r0, [pc, #220]	; (8009c78 <HAL_UART_Init+0x1b0>)
 8009b9c:	f7f8 ffd7 	bl	8002b4e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d009      	beq.n	8009bbc <HAL_UART_Init+0xf4>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bb0:	d004      	beq.n	8009bbc <HAL_UART_Init+0xf4>
 8009bb2:	f240 1179 	movw	r1, #377	; 0x179
 8009bb6:	4830      	ldr	r0, [pc, #192]	; (8009c78 <HAL_UART_Init+0x1b0>)
 8009bb8:	f7f8 ffc9 	bl	8002b4e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	69db      	ldr	r3, [r3, #28]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d009      	beq.n	8009bd8 <HAL_UART_Init+0x110>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bcc:	d004      	beq.n	8009bd8 <HAL_UART_Init+0x110>
 8009bce:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8009bd2:	4829      	ldr	r0, [pc, #164]	; (8009c78 <HAL_UART_Init+0x1b0>)
 8009bd4:	f7f8 ffbb 	bl	8002b4e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d106      	bne.n	8009bf2 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7f9 fb83 	bl	80032f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2224      	movs	r2, #36	; 0x24
 8009bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68da      	ldr	r2, [r3, #12]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c08:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fc7e 	bl	800a50c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	691a      	ldr	r2, [r3, #16]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c1e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	695a      	ldr	r2, [r3, #20]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c2e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c3e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2220      	movs	r2, #32
 8009c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	40011000 	.word	0x40011000
 8009c64:	40004400 	.word	0x40004400
 8009c68:	40004800 	.word	0x40004800
 8009c6c:	40004c00 	.word	0x40004c00
 8009c70:	40005000 	.word	0x40005000
 8009c74:	40011400 	.word	0x40011400
 8009c78:	080104bc 	.word	0x080104bc

08009c7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b0ba      	sub	sp, #232	; 0xe8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cb2:	f003 030f 	and.w	r3, r3, #15
 8009cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10f      	bne.n	8009ce2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d009      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x66>
 8009cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cd2:	f003 0320 	and.w	r3, r3, #32
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fb5b 	bl	800a396 <UART_Receive_IT>
      return;
 8009ce0:	e256      	b.n	800a190 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 80de 	beq.w	8009ea8 <HAL_UART_IRQHandler+0x22c>
 8009cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d106      	bne.n	8009d06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 80d1 	beq.w	8009ea8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00b      	beq.n	8009d2a <HAL_UART_IRQHandler+0xae>
 8009d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d005      	beq.n	8009d2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d22:	f043 0201 	orr.w	r2, r3, #1
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d2e:	f003 0304 	and.w	r3, r3, #4
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00b      	beq.n	8009d4e <HAL_UART_IRQHandler+0xd2>
 8009d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	f043 0202 	orr.w	r2, r3, #2
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d52:	f003 0302 	and.w	r3, r3, #2
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00b      	beq.n	8009d72 <HAL_UART_IRQHandler+0xf6>
 8009d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d005      	beq.n	8009d72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6a:	f043 0204 	orr.w	r2, r3, #4
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d76:	f003 0308 	and.w	r3, r3, #8
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d011      	beq.n	8009da2 <HAL_UART_IRQHandler+0x126>
 8009d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d82:	f003 0320 	and.w	r3, r3, #32
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d105      	bne.n	8009d96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d005      	beq.n	8009da2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9a:	f043 0208 	orr.w	r2, r3, #8
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 81ed 	beq.w	800a186 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009db0:	f003 0320 	and.w	r3, r3, #32
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d008      	beq.n	8009dca <HAL_UART_IRQHandler+0x14e>
 8009db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dbc:	f003 0320 	and.w	r3, r3, #32
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d002      	beq.n	8009dca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fae6 	bl	800a396 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd4:	2b40      	cmp	r3, #64	; 0x40
 8009dd6:	bf0c      	ite	eq
 8009dd8:	2301      	moveq	r3, #1
 8009dda:	2300      	movne	r3, #0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de6:	f003 0308 	and.w	r3, r3, #8
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d103      	bne.n	8009df6 <HAL_UART_IRQHandler+0x17a>
 8009dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d04f      	beq.n	8009e96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f9ee 	bl	800a1d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e06:	2b40      	cmp	r3, #64	; 0x40
 8009e08:	d141      	bne.n	8009e8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3314      	adds	r3, #20
 8009e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e18:	e853 3f00 	ldrex	r3, [r3]
 8009e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3314      	adds	r3, #20
 8009e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e46:	e841 2300 	strex	r3, r2, [r1]
 8009e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1d9      	bne.n	8009e0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d013      	beq.n	8009e86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e62:	4a7d      	ldr	r2, [pc, #500]	; (800a058 <HAL_UART_IRQHandler+0x3dc>)
 8009e64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fa f824 	bl	8003eb8 <HAL_DMA_Abort_IT>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d016      	beq.n	8009ea4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e80:	4610      	mov	r0, r2
 8009e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e84:	e00e      	b.n	8009ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f990 	bl	800a1ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e8c:	e00a      	b.n	8009ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f98c 	bl	800a1ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e94:	e006      	b.n	8009ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f988 	bl	800a1ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009ea2:	e170      	b.n	800a186 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea4:	bf00      	nop
    return;
 8009ea6:	e16e      	b.n	800a186 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	f040 814a 	bne.w	800a146 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eb6:	f003 0310 	and.w	r3, r3, #16
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f000 8143 	beq.w	800a146 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 813c 	beq.w	800a146 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60bb      	str	r3, [r7, #8]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60bb      	str	r3, [r7, #8]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	60bb      	str	r3, [r7, #8]
 8009ee2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eee:	2b40      	cmp	r3, #64	; 0x40
 8009ef0:	f040 80b4 	bne.w	800a05c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 8140 	beq.w	800a18a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f12:	429a      	cmp	r2, r3
 8009f14:	f080 8139 	bcs.w	800a18a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f2a:	f000 8088 	beq.w	800a03e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	330c      	adds	r3, #12
 8009f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f3c:	e853 3f00 	ldrex	r3, [r3]
 8009f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	330c      	adds	r3, #12
 8009f56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009f5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1d9      	bne.n	8009f2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3314      	adds	r3, #20
 8009f80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f84:	e853 3f00 	ldrex	r3, [r3]
 8009f88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f8c:	f023 0301 	bic.w	r3, r3, #1
 8009f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3314      	adds	r3, #20
 8009f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009f9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009fa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e1      	bne.n	8009f7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	3314      	adds	r3, #20
 8009fbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fc0:	e853 3f00 	ldrex	r3, [r3]
 8009fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3314      	adds	r3, #20
 8009fd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009fda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009fdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009fe0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009fe2:	e841 2300 	strex	r3, r2, [r1]
 8009fe6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1e3      	bne.n	8009fb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2220      	movs	r2, #32
 8009ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	330c      	adds	r3, #12
 800a002:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a00c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a00e:	f023 0310 	bic.w	r3, r3, #16
 800a012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	330c      	adds	r3, #12
 800a01c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a020:	65ba      	str	r2, [r7, #88]	; 0x58
 800a022:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a028:	e841 2300 	strex	r3, r2, [r1]
 800a02c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1e3      	bne.n	8009ffc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a038:	4618      	mov	r0, r3
 800a03a:	f7f9 fecd 	bl	8003dd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a046:	b29b      	uxth	r3, r3
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f8b6 	bl	800a1c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a054:	e099      	b.n	800a18a <HAL_UART_IRQHandler+0x50e>
 800a056:	bf00      	nop
 800a058:	0800a29f 	.word	0x0800a29f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a064:	b29b      	uxth	r3, r3
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a070:	b29b      	uxth	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 808b 	beq.w	800a18e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 8086 	beq.w	800a18e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	330c      	adds	r3, #12
 800a088:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	e853 3f00 	ldrex	r3, [r3]
 800a090:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	330c      	adds	r3, #12
 800a0a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a0a6:	647a      	str	r2, [r7, #68]	; 0x44
 800a0a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0ae:	e841 2300 	strex	r3, r2, [r1]
 800a0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1e3      	bne.n	800a082 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	3314      	adds	r3, #20
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c4:	e853 3f00 	ldrex	r3, [r3]
 800a0c8:	623b      	str	r3, [r7, #32]
   return(result);
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	f023 0301 	bic.w	r3, r3, #1
 800a0d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3314      	adds	r3, #20
 800a0da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a0de:	633a      	str	r2, [r7, #48]	; 0x30
 800a0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0e6:	e841 2300 	strex	r3, r2, [r1]
 800a0ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1e3      	bne.n	800a0ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2220      	movs	r2, #32
 800a0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	330c      	adds	r3, #12
 800a106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	e853 3f00 	ldrex	r3, [r3]
 800a10e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f023 0310 	bic.w	r3, r3, #16
 800a116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	330c      	adds	r3, #12
 800a120:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a124:	61fa      	str	r2, [r7, #28]
 800a126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a128:	69b9      	ldr	r1, [r7, #24]
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	e841 2300 	strex	r3, r2, [r1]
 800a130:	617b      	str	r3, [r7, #20]
   return(result);
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1e3      	bne.n	800a100 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f83e 	bl	800a1c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a144:	e023      	b.n	800a18e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d009      	beq.n	800a166 <HAL_UART_IRQHandler+0x4ea>
 800a152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f8b1 	bl	800a2c6 <UART_Transmit_IT>
    return;
 800a164:	e014      	b.n	800a190 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00e      	beq.n	800a190 <HAL_UART_IRQHandler+0x514>
 800a172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d008      	beq.n	800a190 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f8f1 	bl	800a366 <UART_EndTransmit_IT>
    return;
 800a184:	e004      	b.n	800a190 <HAL_UART_IRQHandler+0x514>
    return;
 800a186:	bf00      	nop
 800a188:	e002      	b.n	800a190 <HAL_UART_IRQHandler+0x514>
      return;
 800a18a:	bf00      	nop
 800a18c:	e000      	b.n	800a190 <HAL_UART_IRQHandler+0x514>
      return;
 800a18e:	bf00      	nop
  }
}
 800a190:	37e8      	adds	r7, #232	; 0xe8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop

0800a198 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b095      	sub	sp, #84	; 0x54
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	330c      	adds	r3, #12
 800a1e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	330c      	adds	r3, #12
 800a1fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a200:	643a      	str	r2, [r7, #64]	; 0x40
 800a202:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a204:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a206:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a208:	e841 2300 	strex	r3, r2, [r1]
 800a20c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e5      	bne.n	800a1e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3314      	adds	r3, #20
 800a21a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	6a3b      	ldr	r3, [r7, #32]
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	61fb      	str	r3, [r7, #28]
   return(result);
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	f023 0301 	bic.w	r3, r3, #1
 800a22a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3314      	adds	r3, #20
 800a232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a234:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a23a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a23c:	e841 2300 	strex	r3, r2, [r1]
 800a240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e5      	bne.n	800a214 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d119      	bne.n	800a284 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	330c      	adds	r3, #12
 800a256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	e853 3f00 	ldrex	r3, [r3]
 800a25e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	f023 0310 	bic.w	r3, r3, #16
 800a266:	647b      	str	r3, [r7, #68]	; 0x44
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	330c      	adds	r3, #12
 800a26e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a270:	61ba      	str	r2, [r7, #24]
 800a272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a274:	6979      	ldr	r1, [r7, #20]
 800a276:	69ba      	ldr	r2, [r7, #24]
 800a278:	e841 2300 	strex	r3, r2, [r1]
 800a27c:	613b      	str	r3, [r7, #16]
   return(result);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e5      	bne.n	800a250 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2220      	movs	r2, #32
 800a288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a292:	bf00      	nop
 800a294:	3754      	adds	r7, #84	; 0x54
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f7ff ff77 	bl	800a1ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2be:	bf00      	nop
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b085      	sub	sp, #20
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b21      	cmp	r3, #33	; 0x21
 800a2d8:	d13e      	bne.n	800a358 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e2:	d114      	bne.n	800a30e <UART_Transmit_IT+0x48>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d110      	bne.n	800a30e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a1b      	ldr	r3, [r3, #32]
 800a2f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a300:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	1c9a      	adds	r2, r3, #2
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	621a      	str	r2, [r3, #32]
 800a30c:	e008      	b.n	800a320 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	1c59      	adds	r1, r3, #1
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	6211      	str	r1, [r2, #32]
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a324:	b29b      	uxth	r3, r3
 800a326:	3b01      	subs	r3, #1
 800a328:	b29b      	uxth	r3, r3
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	4619      	mov	r1, r3
 800a32e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10f      	bne.n	800a354 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68da      	ldr	r2, [r3, #12]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a342:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68da      	ldr	r2, [r3, #12]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a352:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	e000      	b.n	800a35a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a358:	2302      	movs	r3, #2
  }
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68da      	ldr	r2, [r3, #12]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a37c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2220      	movs	r2, #32
 800a382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff ff06 	bl	800a198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b08c      	sub	sp, #48	; 0x30
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b22      	cmp	r3, #34	; 0x22
 800a3a8:	f040 80ab 	bne.w	800a502 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3b4:	d117      	bne.n	800a3e6 <UART_Receive_IT+0x50>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d113      	bne.n	800a3e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3de:	1c9a      	adds	r2, r3, #2
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	629a      	str	r2, [r3, #40]	; 0x28
 800a3e4:	e026      	b.n	800a434 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3f8:	d007      	beq.n	800a40a <UART_Receive_IT+0x74>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d10a      	bne.n	800a418 <UART_Receive_IT+0x82>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	b2da      	uxtb	r2, r3
 800a412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a414:	701a      	strb	r2, [r3, #0]
 800a416:	e008      	b.n	800a42a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a424:	b2da      	uxtb	r2, r3
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a438:	b29b      	uxth	r3, r3
 800a43a:	3b01      	subs	r3, #1
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	4619      	mov	r1, r3
 800a442:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a444:	2b00      	cmp	r3, #0
 800a446:	d15a      	bne.n	800a4fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68da      	ldr	r2, [r3, #12]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f022 0220 	bic.w	r2, r2, #32
 800a456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695a      	ldr	r2, [r3, #20]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f022 0201 	bic.w	r2, r2, #1
 800a476:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2220      	movs	r2, #32
 800a47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a484:	2b01      	cmp	r3, #1
 800a486:	d135      	bne.n	800a4f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	330c      	adds	r3, #12
 800a494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	613b      	str	r3, [r7, #16]
   return(result);
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	f023 0310 	bic.w	r3, r3, #16
 800a4a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	330c      	adds	r3, #12
 800a4ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ae:	623a      	str	r2, [r7, #32]
 800a4b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	69f9      	ldr	r1, [r7, #28]
 800a4b4:	6a3a      	ldr	r2, [r7, #32]
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e5      	bne.n	800a48e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 0310 	and.w	r3, r3, #16
 800a4cc:	2b10      	cmp	r3, #16
 800a4ce:	d10a      	bne.n	800a4e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff fe67 	bl	800a1c0 <HAL_UARTEx_RxEventCallback>
 800a4f2:	e002      	b.n	800a4fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7f6 fe7f 	bl	80011f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	e002      	b.n	800a504 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	e000      	b.n	800a504 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a502:	2302      	movs	r3, #2
  }
}
 800a504:	4618      	mov	r0, r3
 800a506:	3730      	adds	r7, #48	; 0x30
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a510:	b09f      	sub	sp, #124	; 0x7c
 800a512:	af00      	add	r7, sp, #0
 800a514:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a518:	685a      	ldr	r2, [r3, #4]
 800a51a:	4b9b      	ldr	r3, [pc, #620]	; (800a788 <UART_SetConfig+0x27c>)
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d904      	bls.n	800a52a <UART_SetConfig+0x1e>
 800a520:	f640 6156 	movw	r1, #3670	; 0xe56
 800a524:	4899      	ldr	r0, [pc, #612]	; (800a78c <UART_SetConfig+0x280>)
 800a526:	f7f8 fb12 	bl	8002b4e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a52a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d009      	beq.n	800a546 <UART_SetConfig+0x3a>
 800a532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a53a:	d004      	beq.n	800a546 <UART_SetConfig+0x3a>
 800a53c:	f640 6157 	movw	r1, #3671	; 0xe57
 800a540:	4892      	ldr	r0, [pc, #584]	; (800a78c <UART_SetConfig+0x280>)
 800a542:	f7f8 fb04 	bl	8002b4e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00e      	beq.n	800a56c <UART_SetConfig+0x60>
 800a54e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a556:	d009      	beq.n	800a56c <UART_SetConfig+0x60>
 800a558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a560:	d004      	beq.n	800a56c <UART_SetConfig+0x60>
 800a562:	f640 6158 	movw	r1, #3672	; 0xe58
 800a566:	4889      	ldr	r0, [pc, #548]	; (800a78c <UART_SetConfig+0x280>)
 800a568:	f7f8 faf1 	bl	8002b4e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a56e:	695a      	ldr	r2, [r3, #20]
 800a570:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800a574:	4013      	ands	r3, r2
 800a576:	2b00      	cmp	r3, #0
 800a578:	d103      	bne.n	800a582 <UART_SetConfig+0x76>
 800a57a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d104      	bne.n	800a58c <UART_SetConfig+0x80>
 800a582:	f640 6159 	movw	r1, #3673	; 0xe59
 800a586:	4881      	ldr	r0, [pc, #516]	; (800a78c <UART_SetConfig+0x280>)
 800a588:	f7f8 fae1 	bl	8002b4e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a58c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a598:	68d9      	ldr	r1, [r3, #12]
 800a59a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	ea40 0301 	orr.w	r3, r0, r1
 800a5a2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	431a      	orrs	r2, r3
 800a5ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	431a      	orrs	r2, r3
 800a5b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a5bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a5c6:	f021 010c 	bic.w	r1, r1, #12
 800a5ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5d0:	430b      	orrs	r3, r1
 800a5d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a5de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5e0:	6999      	ldr	r1, [r3, #24]
 800a5e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	ea40 0301 	orr.w	r3, r0, r1
 800a5ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a5ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	4b67      	ldr	r3, [pc, #412]	; (800a790 <UART_SetConfig+0x284>)
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d004      	beq.n	800a600 <UART_SetConfig+0xf4>
 800a5f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	4b66      	ldr	r3, [pc, #408]	; (800a794 <UART_SetConfig+0x288>)
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d103      	bne.n	800a608 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a600:	f7fb fc5a 	bl	8005eb8 <HAL_RCC_GetPCLK2Freq>
 800a604:	6778      	str	r0, [r7, #116]	; 0x74
 800a606:	e002      	b.n	800a60e <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a608:	f7fb fc42 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 800a60c:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a60e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a616:	f040 80c1 	bne.w	800a79c <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a61a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a61c:	461c      	mov	r4, r3
 800a61e:	f04f 0500 	mov.w	r5, #0
 800a622:	4622      	mov	r2, r4
 800a624:	462b      	mov	r3, r5
 800a626:	1891      	adds	r1, r2, r2
 800a628:	6439      	str	r1, [r7, #64]	; 0x40
 800a62a:	415b      	adcs	r3, r3
 800a62c:	647b      	str	r3, [r7, #68]	; 0x44
 800a62e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a632:	1912      	adds	r2, r2, r4
 800a634:	eb45 0303 	adc.w	r3, r5, r3
 800a638:	f04f 0000 	mov.w	r0, #0
 800a63c:	f04f 0100 	mov.w	r1, #0
 800a640:	00d9      	lsls	r1, r3, #3
 800a642:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a646:	00d0      	lsls	r0, r2, #3
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	1911      	adds	r1, r2, r4
 800a64e:	6639      	str	r1, [r7, #96]	; 0x60
 800a650:	416b      	adcs	r3, r5
 800a652:	667b      	str	r3, [r7, #100]	; 0x64
 800a654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	461a      	mov	r2, r3
 800a65a:	f04f 0300 	mov.w	r3, #0
 800a65e:	1891      	adds	r1, r2, r2
 800a660:	63b9      	str	r1, [r7, #56]	; 0x38
 800a662:	415b      	adcs	r3, r3
 800a664:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a666:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a66a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a66e:	f7f6 fa67 	bl	8000b40 <__aeabi_uldivmod>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4b48      	ldr	r3, [pc, #288]	; (800a798 <UART_SetConfig+0x28c>)
 800a678:	fba3 2302 	umull	r2, r3, r3, r2
 800a67c:	095b      	lsrs	r3, r3, #5
 800a67e:	011e      	lsls	r6, r3, #4
 800a680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a682:	461c      	mov	r4, r3
 800a684:	f04f 0500 	mov.w	r5, #0
 800a688:	4622      	mov	r2, r4
 800a68a:	462b      	mov	r3, r5
 800a68c:	1891      	adds	r1, r2, r2
 800a68e:	6339      	str	r1, [r7, #48]	; 0x30
 800a690:	415b      	adcs	r3, r3
 800a692:	637b      	str	r3, [r7, #52]	; 0x34
 800a694:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a698:	1912      	adds	r2, r2, r4
 800a69a:	eb45 0303 	adc.w	r3, r5, r3
 800a69e:	f04f 0000 	mov.w	r0, #0
 800a6a2:	f04f 0100 	mov.w	r1, #0
 800a6a6:	00d9      	lsls	r1, r3, #3
 800a6a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a6ac:	00d0      	lsls	r0, r2, #3
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	1911      	adds	r1, r2, r4
 800a6b4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a6b6:	416b      	adcs	r3, r5
 800a6b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f04f 0300 	mov.w	r3, #0
 800a6c4:	1891      	adds	r1, r2, r2
 800a6c6:	62b9      	str	r1, [r7, #40]	; 0x28
 800a6c8:	415b      	adcs	r3, r3
 800a6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a6d0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a6d4:	f7f6 fa34 	bl	8000b40 <__aeabi_uldivmod>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4b2e      	ldr	r3, [pc, #184]	; (800a798 <UART_SetConfig+0x28c>)
 800a6de:	fba3 1302 	umull	r1, r3, r3, r2
 800a6e2:	095b      	lsrs	r3, r3, #5
 800a6e4:	2164      	movs	r1, #100	; 0x64
 800a6e6:	fb01 f303 	mul.w	r3, r1, r3
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	00db      	lsls	r3, r3, #3
 800a6ee:	3332      	adds	r3, #50	; 0x32
 800a6f0:	4a29      	ldr	r2, [pc, #164]	; (800a798 <UART_SetConfig+0x28c>)
 800a6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f6:	095b      	lsrs	r3, r3, #5
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a6fe:	441e      	add	r6, r3
 800a700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a702:	4618      	mov	r0, r3
 800a704:	f04f 0100 	mov.w	r1, #0
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	1894      	adds	r4, r2, r2
 800a70e:	623c      	str	r4, [r7, #32]
 800a710:	415b      	adcs	r3, r3
 800a712:	627b      	str	r3, [r7, #36]	; 0x24
 800a714:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a718:	1812      	adds	r2, r2, r0
 800a71a:	eb41 0303 	adc.w	r3, r1, r3
 800a71e:	f04f 0400 	mov.w	r4, #0
 800a722:	f04f 0500 	mov.w	r5, #0
 800a726:	00dd      	lsls	r5, r3, #3
 800a728:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a72c:	00d4      	lsls	r4, r2, #3
 800a72e:	4622      	mov	r2, r4
 800a730:	462b      	mov	r3, r5
 800a732:	1814      	adds	r4, r2, r0
 800a734:	653c      	str	r4, [r7, #80]	; 0x50
 800a736:	414b      	adcs	r3, r1
 800a738:	657b      	str	r3, [r7, #84]	; 0x54
 800a73a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	461a      	mov	r2, r3
 800a740:	f04f 0300 	mov.w	r3, #0
 800a744:	1891      	adds	r1, r2, r2
 800a746:	61b9      	str	r1, [r7, #24]
 800a748:	415b      	adcs	r3, r3
 800a74a:	61fb      	str	r3, [r7, #28]
 800a74c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a750:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a754:	f7f6 f9f4 	bl	8000b40 <__aeabi_uldivmod>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4b0e      	ldr	r3, [pc, #56]	; (800a798 <UART_SetConfig+0x28c>)
 800a75e:	fba3 1302 	umull	r1, r3, r3, r2
 800a762:	095b      	lsrs	r3, r3, #5
 800a764:	2164      	movs	r1, #100	; 0x64
 800a766:	fb01 f303 	mul.w	r3, r1, r3
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	00db      	lsls	r3, r3, #3
 800a76e:	3332      	adds	r3, #50	; 0x32
 800a770:	4a09      	ldr	r2, [pc, #36]	; (800a798 <UART_SetConfig+0x28c>)
 800a772:	fba2 2303 	umull	r2, r3, r2, r3
 800a776:	095b      	lsrs	r3, r3, #5
 800a778:	f003 0207 	and.w	r2, r3, #7
 800a77c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4432      	add	r2, r6
 800a782:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a784:	e0c4      	b.n	800a910 <UART_SetConfig+0x404>
 800a786:	bf00      	nop
 800a788:	00a037a0 	.word	0x00a037a0
 800a78c:	080104bc 	.word	0x080104bc
 800a790:	40011000 	.word	0x40011000
 800a794:	40011400 	.word	0x40011400
 800a798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a79c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a79e:	461c      	mov	r4, r3
 800a7a0:	f04f 0500 	mov.w	r5, #0
 800a7a4:	4622      	mov	r2, r4
 800a7a6:	462b      	mov	r3, r5
 800a7a8:	1891      	adds	r1, r2, r2
 800a7aa:	6139      	str	r1, [r7, #16]
 800a7ac:	415b      	adcs	r3, r3
 800a7ae:	617b      	str	r3, [r7, #20]
 800a7b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a7b4:	1912      	adds	r2, r2, r4
 800a7b6:	eb45 0303 	adc.w	r3, r5, r3
 800a7ba:	f04f 0000 	mov.w	r0, #0
 800a7be:	f04f 0100 	mov.w	r1, #0
 800a7c2:	00d9      	lsls	r1, r3, #3
 800a7c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a7c8:	00d0      	lsls	r0, r2, #3
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	eb12 0804 	adds.w	r8, r2, r4
 800a7d2:	eb43 0905 	adc.w	r9, r3, r5
 800a7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f04f 0100 	mov.w	r1, #0
 800a7e0:	f04f 0200 	mov.w	r2, #0
 800a7e4:	f04f 0300 	mov.w	r3, #0
 800a7e8:	008b      	lsls	r3, r1, #2
 800a7ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a7ee:	0082      	lsls	r2, r0, #2
 800a7f0:	4640      	mov	r0, r8
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	f7f6 f9a4 	bl	8000b40 <__aeabi_uldivmod>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4b47      	ldr	r3, [pc, #284]	; (800a91c <UART_SetConfig+0x410>)
 800a7fe:	fba3 2302 	umull	r2, r3, r3, r2
 800a802:	095b      	lsrs	r3, r3, #5
 800a804:	011e      	lsls	r6, r3, #4
 800a806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a808:	4618      	mov	r0, r3
 800a80a:	f04f 0100 	mov.w	r1, #0
 800a80e:	4602      	mov	r2, r0
 800a810:	460b      	mov	r3, r1
 800a812:	1894      	adds	r4, r2, r2
 800a814:	60bc      	str	r4, [r7, #8]
 800a816:	415b      	adcs	r3, r3
 800a818:	60fb      	str	r3, [r7, #12]
 800a81a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a81e:	1812      	adds	r2, r2, r0
 800a820:	eb41 0303 	adc.w	r3, r1, r3
 800a824:	f04f 0400 	mov.w	r4, #0
 800a828:	f04f 0500 	mov.w	r5, #0
 800a82c:	00dd      	lsls	r5, r3, #3
 800a82e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a832:	00d4      	lsls	r4, r2, #3
 800a834:	4622      	mov	r2, r4
 800a836:	462b      	mov	r3, r5
 800a838:	1814      	adds	r4, r2, r0
 800a83a:	64bc      	str	r4, [r7, #72]	; 0x48
 800a83c:	414b      	adcs	r3, r1
 800a83e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	4618      	mov	r0, r3
 800a846:	f04f 0100 	mov.w	r1, #0
 800a84a:	f04f 0200 	mov.w	r2, #0
 800a84e:	f04f 0300 	mov.w	r3, #0
 800a852:	008b      	lsls	r3, r1, #2
 800a854:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a858:	0082      	lsls	r2, r0, #2
 800a85a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a85e:	f7f6 f96f 	bl	8000b40 <__aeabi_uldivmod>
 800a862:	4602      	mov	r2, r0
 800a864:	460b      	mov	r3, r1
 800a866:	4b2d      	ldr	r3, [pc, #180]	; (800a91c <UART_SetConfig+0x410>)
 800a868:	fba3 1302 	umull	r1, r3, r3, r2
 800a86c:	095b      	lsrs	r3, r3, #5
 800a86e:	2164      	movs	r1, #100	; 0x64
 800a870:	fb01 f303 	mul.w	r3, r1, r3
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	011b      	lsls	r3, r3, #4
 800a878:	3332      	adds	r3, #50	; 0x32
 800a87a:	4a28      	ldr	r2, [pc, #160]	; (800a91c <UART_SetConfig+0x410>)
 800a87c:	fba2 2303 	umull	r2, r3, r2, r3
 800a880:	095b      	lsrs	r3, r3, #5
 800a882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a886:	441e      	add	r6, r3
 800a888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a88a:	4618      	mov	r0, r3
 800a88c:	f04f 0100 	mov.w	r1, #0
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	1894      	adds	r4, r2, r2
 800a896:	603c      	str	r4, [r7, #0]
 800a898:	415b      	adcs	r3, r3
 800a89a:	607b      	str	r3, [r7, #4]
 800a89c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8a0:	1812      	adds	r2, r2, r0
 800a8a2:	eb41 0303 	adc.w	r3, r1, r3
 800a8a6:	f04f 0400 	mov.w	r4, #0
 800a8aa:	f04f 0500 	mov.w	r5, #0
 800a8ae:	00dd      	lsls	r5, r3, #3
 800a8b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a8b4:	00d4      	lsls	r4, r2, #3
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	462b      	mov	r3, r5
 800a8ba:	eb12 0a00 	adds.w	sl, r2, r0
 800a8be:	eb43 0b01 	adc.w	fp, r3, r1
 800a8c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f04f 0100 	mov.w	r1, #0
 800a8cc:	f04f 0200 	mov.w	r2, #0
 800a8d0:	f04f 0300 	mov.w	r3, #0
 800a8d4:	008b      	lsls	r3, r1, #2
 800a8d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a8da:	0082      	lsls	r2, r0, #2
 800a8dc:	4650      	mov	r0, sl
 800a8de:	4659      	mov	r1, fp
 800a8e0:	f7f6 f92e 	bl	8000b40 <__aeabi_uldivmod>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4b0c      	ldr	r3, [pc, #48]	; (800a91c <UART_SetConfig+0x410>)
 800a8ea:	fba3 1302 	umull	r1, r3, r3, r2
 800a8ee:	095b      	lsrs	r3, r3, #5
 800a8f0:	2164      	movs	r1, #100	; 0x64
 800a8f2:	fb01 f303 	mul.w	r3, r1, r3
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	011b      	lsls	r3, r3, #4
 800a8fa:	3332      	adds	r3, #50	; 0x32
 800a8fc:	4a07      	ldr	r2, [pc, #28]	; (800a91c <UART_SetConfig+0x410>)
 800a8fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a902:	095b      	lsrs	r3, r3, #5
 800a904:	f003 020f 	and.w	r2, r3, #15
 800a908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4432      	add	r2, r6
 800a90e:	609a      	str	r2, [r3, #8]
}
 800a910:	bf00      	nop
 800a912:	377c      	adds	r7, #124	; 0x7c
 800a914:	46bd      	mov	sp, r7
 800a916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91a:	bf00      	nop
 800a91c:	51eb851f 	.word	0x51eb851f

0800a920 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a928:	2300      	movs	r3, #0
 800a92a:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800a92c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d105      	bne.n	800a940 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800a934:	2101      	movs	r1, #1
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f001 f824 	bl	800b984 <VL53L1_data_init>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 800a940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d103      	bne.n	800a950 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a950:	2300      	movs	r3, #0
 800a952:	73bb      	strb	r3, [r7, #14]
 800a954:	e012      	b.n	800a97c <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 800a956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d112      	bne.n	800a984 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
 800a960:	b29b      	uxth	r3, r3
 800a962:	2201      	movs	r2, #1
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fbd3 	bl	800b112 <VL53L1_SetLimitCheckEnable>
 800a96c:	4603      	mov	r3, r0
 800a96e:	461a      	mov	r2, r3
 800a970:	7bfb      	ldrb	r3, [r7, #15]
 800a972:	4313      	orrs	r3, r2
 800a974:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	3301      	adds	r3, #1
 800a97a:	73bb      	strb	r3, [r7, #14]
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d9e9      	bls.n	800a956 <VL53L1_DataInit+0x36>
 800a982:	e000      	b.n	800a986 <VL53L1_DataInit+0x66>
		else
			break;
 800a984:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a986:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b084      	sub	sp, #16
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a99a:	2300      	movs	r3, #0
 800a99c:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2203      	movs	r2, #3
 800a9a2:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800a9a6:	2320      	movs	r3, #32
 800a9a8:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	7bba      	ldrb	r2, [r7, #14]
 800a9ae:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800a9b0:	2108      	movs	r1, #8
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f8f9 	bl	800abaa <VL53L1_SetPresetMode>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2208      	movs	r2, #8
 800a9c0:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800a9c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800a9dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f004 ffe0 	bl	800f9a6 <VL53L1_poll_for_boot_completion>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800a9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	603a      	str	r2, [r7, #0]
 800aa02:	71fb      	strb	r3, [r7, #7]
 800aa04:	460b      	mov	r3, r1
 800aa06:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800aa0c:	4a2c      	ldr	r2, [pc, #176]	; (800aac0 <ComputeDevicePresetMode+0xc8>)
 800aa0e:	f107 0310 	add.w	r3, r7, #16
 800aa12:	6812      	ldr	r2, [r2, #0]
 800aa14:	4611      	mov	r1, r2
 800aa16:	8019      	strh	r1, [r3, #0]
 800aa18:	3302      	adds	r3, #2
 800aa1a:	0c12      	lsrs	r2, r2, #16
 800aa1c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800aa1e:	4a29      	ldr	r2, [pc, #164]	; (800aac4 <ComputeDevicePresetMode+0xcc>)
 800aa20:	f107 030c 	add.w	r3, r7, #12
 800aa24:	6812      	ldr	r2, [r2, #0]
 800aa26:	4611      	mov	r1, r2
 800aa28:	8019      	strh	r1, [r3, #0]
 800aa2a:	3302      	adds	r3, #2
 800aa2c:	0c12      	lsrs	r2, r2, #16
 800aa2e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800aa30:	4a25      	ldr	r2, [pc, #148]	; (800aac8 <ComputeDevicePresetMode+0xd0>)
 800aa32:	f107 0308 	add.w	r3, r7, #8
 800aa36:	6812      	ldr	r2, [r2, #0]
 800aa38:	4611      	mov	r1, r2
 800aa3a:	8019      	strh	r1, [r3, #0]
 800aa3c:	3302      	adds	r3, #2
 800aa3e:	0c12      	lsrs	r2, r2, #16
 800aa40:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2201      	movs	r2, #1
 800aa46:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800aa48:	79bb      	ldrb	r3, [r7, #6]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d002      	beq.n	800aa54 <ComputeDevicePresetMode+0x5c>
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d003      	beq.n	800aa5a <ComputeDevicePresetMode+0x62>
 800aa52:	e005      	b.n	800aa60 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800aa54:	2300      	movs	r3, #0
 800aa56:	75bb      	strb	r3, [r7, #22]
		break;
 800aa58:	e004      	b.n	800aa64 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	75bb      	strb	r3, [r7, #22]
		break;
 800aa5e:	e001      	b.n	800aa64 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 800aa60:	2302      	movs	r3, #2
 800aa62:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800aa64:	79fb      	ldrb	r3, [r7, #7]
 800aa66:	2b08      	cmp	r3, #8
 800aa68:	d017      	beq.n	800aa9a <ComputeDevicePresetMode+0xa2>
 800aa6a:	2b08      	cmp	r3, #8
 800aa6c:	dc1e      	bgt.n	800aaac <ComputeDevicePresetMode+0xb4>
 800aa6e:	2b03      	cmp	r3, #3
 800aa70:	d00a      	beq.n	800aa88 <ComputeDevicePresetMode+0x90>
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d11a      	bne.n	800aaac <ComputeDevicePresetMode+0xb4>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800aa76:	7dbb      	ldrb	r3, [r7, #22]
 800aa78:	f107 0218 	add.w	r2, r7, #24
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	701a      	strb	r2, [r3, #0]
		break;
 800aa86:	e013      	b.n	800aab0 <ComputeDevicePresetMode+0xb8>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800aa88:	7dbb      	ldrb	r3, [r7, #22]
 800aa8a:	f107 0218 	add.w	r2, r7, #24
 800aa8e:	4413      	add	r3, r2
 800aa90:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	701a      	strb	r2, [r3, #0]
		break;
 800aa98:	e00a      	b.n	800aab0 <ComputeDevicePresetMode+0xb8>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800aa9a:	7dbb      	ldrb	r3, [r7, #22]
 800aa9c:	f107 0218 	add.w	r2, r7, #24
 800aaa0:	4413      	add	r3, r2
 800aaa2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	701a      	strb	r2, [r3, #0]
		break;
 800aaaa:	e001      	b.n	800aab0 <ComputeDevicePresetMode+0xb8>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800aaac:	23f8      	movs	r3, #248	; 0xf8
 800aaae:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800aab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	371c      	adds	r7, #28
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	08010524 	.word	0x08010524
 800aac4:	08010528 	.word	0x08010528
 800aac8:	0801052c 	.word	0x0801052c

0800aacc <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800aacc:	b5b0      	push	{r4, r5, r7, lr}
 800aace:	b08e      	sub	sp, #56	; 0x38
 800aad0:	af04      	add	r7, sp, #16
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	607b      	str	r3, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	72fb      	strb	r3, [r7, #11]
 800aada:	4613      	mov	r3, r2
 800aadc:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aade:	2300      	movs	r3, #0
 800aae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800aaf4:	7afb      	ldrb	r3, [r7, #11]
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d002      	beq.n	800ab00 <SetPresetMode+0x34>
 800aafa:	7afb      	ldrb	r3, [r7, #11]
 800aafc:	2b08      	cmp	r3, #8
 800aafe:	d103      	bne.n	800ab08 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800ab00:	2340      	movs	r3, #64	; 0x40
 800ab02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab06:	e002      	b.n	800ab0e <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800ab08:	2320      	movs	r3, #32
 800ab0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800ab0e:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800ab12:	7ab9      	ldrb	r1, [r7, #10]
 800ab14:	7afb      	ldrb	r3, [r7, #11]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff ff6e 	bl	800a9f8 <ComputeDevicePresetMode>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800ab22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d112      	bne.n	800ab50 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800ab2a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800ab2e:	f107 001c 	add.w	r0, r7, #28
 800ab32:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800ab36:	f107 0314 	add.w	r3, r7, #20
 800ab3a:	9301      	str	r3, [sp, #4]
 800ab3c:	f107 0318 	add.w	r3, r7, #24
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	4603      	mov	r3, r0
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f001 f9dd 	bl	800bf04 <VL53L1_get_preset_mode_timing_cfg>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800ab50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d112      	bne.n	800ab7e <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 800ab58:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800ab5c:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800ab5e:	69fd      	ldr	r5, [r7, #28]
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	9102      	str	r1, [sp, #8]
 800ab68:	9201      	str	r2, [sp, #4]
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	462b      	mov	r3, r5
 800ab6e:	4622      	mov	r2, r4
 800ab70:	4601      	mov	r1, r0
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f001 fa70 	bl	800c058 <VL53L1_set_preset_mode>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800ab7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d103      	bne.n	800ab8e <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ab8c:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800ab8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d103      	bne.n	800ab9e <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	7afa      	ldrb	r2, [r7, #11]
 800ab9a:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800ab9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3728      	adds	r7, #40	; 0x28
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bdb0      	pop	{r4, r5, r7, pc}

0800abaa <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b084      	sub	sp, #16
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	460b      	mov	r3, r1
 800abb4:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800abba:	2303      	movs	r3, #3
 800abbc:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f003 fd2c 	bl	800e61c <VL53L1_low_power_auto_data_init>
 800abc4:	4603      	mov	r3, r0
 800abc6:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 800abc8:	7bba      	ldrb	r2, [r7, #14]
 800abca:	78f9      	ldrb	r1, [r7, #3]
 800abcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff ff7b 	bl	800aacc <SetPresetMode>
 800abd6:	4603      	mov	r3, r0
 800abd8:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800abda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d117      	bne.n	800ac12 <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800abe2:	78fb      	ldrb	r3, [r7, #3]
 800abe4:	2b04      	cmp	r3, #4
 800abe6:	d005      	beq.n	800abf4 <VL53L1_SetPresetMode+0x4a>
 800abe8:	78fb      	ldrb	r3, [r7, #3]
 800abea:	2b03      	cmp	r3, #3
 800abec:	d002      	beq.n	800abf4 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800abee:	78fb      	ldrb	r3, [r7, #3]
 800abf0:	2b08      	cmp	r3, #8
 800abf2:	d107      	bne.n	800ac04 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800abf4:	f24a 0128 	movw	r1, #41000	; 0xa028
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 f891 	bl	800ad20 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800abfe:	4603      	mov	r3, r0
 800ac00:	73fb      	strb	r3, [r7, #15]
 800ac02:	e006      	b.n	800ac12 <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800ac04:	f248 2135 	movw	r1, #33333	; 0x8235
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 f889 	bl	800ad20 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ac12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d106      	bne.n	800ac28 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800ac1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fa0a 	bl	800b038 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800ac24:	4603      	mov	r3, r0
 800ac26:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b088      	sub	sp, #32
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ac40:	2300      	movs	r3, #0
 800ac42:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800ac56:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800ac58:	78fb      	ldrb	r3, [r7, #3]
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d008      	beq.n	800ac70 <VL53L1_SetDistanceMode+0x3c>
 800ac5e:	78fb      	ldrb	r3, [r7, #3]
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d005      	beq.n	800ac70 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800ac64:	78fb      	ldrb	r3, [r7, #3]
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d002      	beq.n	800ac70 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800ac6a:	f06f 0303 	mvn.w	r3, #3
 800ac6e:	e052      	b.n	800ad16 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 800ac70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d107      	bne.n	800ac88 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800ac78:	f107 0308 	add.w	r3, r7, #8
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f001 f8e9 	bl	800be56 <VL53L1_get_user_zone>
 800ac84:	4603      	mov	r3, r0
 800ac86:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	695b      	ldr	r3, [r3, #20]
 800ac8c:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800ac8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10a      	bne.n	800acac <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800ac96:	f107 0314 	add.w	r3, r7, #20
 800ac9a:	f107 0210 	add.w	r2, r7, #16
 800ac9e:	f107 010c 	add.w	r1, r7, #12
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f001 f812 	bl	800bccc <VL53L1_get_timeouts_us>
 800aca8:	4603      	mov	r3, r0
 800acaa:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800acac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d107      	bne.n	800acc4 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 800acb4:	78fa      	ldrb	r2, [r7, #3]
 800acb6:	7fb9      	ldrb	r1, [r7, #30]
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff ff06 	bl	800aacc <SetPresetMode>
 800acc0:	4603      	mov	r3, r0
 800acc2:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800acc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d103      	bne.n	800acd4 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	78fa      	ldrb	r2, [r7, #3]
 800acd0:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800acd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10e      	bne.n	800acfa <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800acdc:	68f9      	ldr	r1, [r7, #12]
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 ffba 	bl	800bc5c <VL53L1_set_timeouts_us>
 800ace8:	4603      	mov	r3, r0
 800acea:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800acec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d102      	bne.n	800acfa <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800acfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d107      	bne.n	800ad12 <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800ad02:	f107 0308 	add.w	r3, r7, #8
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 f881 	bl	800be10 <VL53L1_set_user_zone>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800ad12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3720      	adds	r7, #32
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
	...

0800ad20 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b08c      	sub	sp, #48	; 0x30
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800ad44:	4b64      	ldr	r3, [pc, #400]	; (800aed8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 800ad46:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	4a64      	ldr	r2, [pc, #400]	; (800aedc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d902      	bls.n	800ad56 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ad50:	23fc      	movs	r3, #252	; 0xfc
 800ad52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800ad56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d109      	bne.n	800ad72 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800ad5e:	f107 031a 	add.w	r3, r7, #26
 800ad62:	461a      	mov	r2, r3
 800ad64:	2105      	movs	r1, #5
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa8d 	bl	800b286 <VL53L1_GetSequenceStepEnable>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ad72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d109      	bne.n	800ad8e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800ad7a:	f107 0319 	add.w	r3, r7, #25
 800ad7e:	461a      	mov	r2, r3
 800ad80:	2106      	movs	r1, #6
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fa7f 	bl	800b286 <VL53L1_GetSequenceStepEnable>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800ad8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10b      	bne.n	800adae <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800ad96:	f107 0314 	add.w	r3, r7, #20
 800ad9a:	f107 0210 	add.w	r2, r7, #16
 800ad9e:	f107 010c 	add.w	r1, r7, #12
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 ff92 	bl	800bccc <VL53L1_get_timeouts_us>
 800ada8:	4603      	mov	r3, r0
 800adaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800adae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f040 8081 	bne.w	800aeba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800adbe:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800adc4:	2301      	movs	r3, #1
 800adc6:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800adc8:	7efb      	ldrb	r3, [r7, #27]
 800adca:	2b08      	cmp	r3, #8
 800adcc:	d026      	beq.n	800ae1c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800adce:	2b08      	cmp	r3, #8
 800add0:	dc43      	bgt.n	800ae5a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800add2:	2b03      	cmp	r3, #3
 800add4:	d00f      	beq.n	800adf6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 800add6:	2b04      	cmp	r3, #4
 800add8:	d13f      	bne.n	800ae5a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800adda:	7ebb      	ldrb	r3, [r7, #26]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d002      	beq.n	800ade6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800ade0:	7e7b      	ldrb	r3, [r7, #25]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d103      	bne.n	800adee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 800ade6:	f241 3388 	movw	r3, #5000	; 0x1388
 800adea:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800adec:	e038      	b.n	800ae60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800adee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800adf2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800adf4:	e034      	b.n	800ae60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	005b      	lsls	r3, r3, #1
 800adfa:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800adfc:	7ebb      	ldrb	r3, [r7, #26]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d002      	beq.n	800ae08 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800ae02:	7e7b      	ldrb	r3, [r7, #25]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d103      	bne.n	800ae10 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 800ae08:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800ae0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae0e:	e002      	b.n	800ae16 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800ae10:	f245 4360 	movw	r3, #21600	; 0x5460
 800ae14:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800ae16:	2302      	movs	r3, #2
 800ae18:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800ae1a:	e021      	b.n	800ae60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	005b      	lsls	r3, r3, #1
 800ae20:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800ae22:	23f5      	movs	r3, #245	; 0xf5
 800ae24:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800ae26:	f107 0308 	add.w	r3, r7, #8
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	f248 0136 	movw	r1, #32822	; 0x8036
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f001 ff75 	bl	800cd20 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	dd07      	ble.n	800ae4c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	22f5      	movs	r2, #245	; 0xf5
 800ae40:	fb02 f303 	mul.w	r3, r2, r3
 800ae44:	461a      	mov	r2, r3
 800ae46:	6a3b      	ldr	r3, [r7, #32]
 800ae48:	4413      	add	r3, r2
 800ae4a:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800ae52:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800ae54:	2302      	movs	r3, #2
 800ae56:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800ae58:	e002      	b.n	800ae60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800ae5a:	23f8      	movs	r3, #248	; 0xf8
 800ae5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d803      	bhi.n	800ae70 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800ae68:	23fc      	movs	r3, #252	; 0xfc
 800ae6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ae6e:	e003      	b.n	800ae78 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae74:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800ae76:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800ae78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d11c      	bne.n	800aeba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	69fa      	ldr	r2, [r7, #28]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d203      	bcs.n	800ae90 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800ae88:	23fc      	movs	r3, #252	; 0xfc
 800ae8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ae8e:	e00d      	b.n	800aeac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae98:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800ae9a:	68f9      	ldr	r1, [r7, #12]
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fedb 	bl	800bc5c <VL53L1_set_timeouts_us>
 800aea6:	4603      	mov	r3, r0
 800aea8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800aeac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d102      	bne.n	800aeba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800aeba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d103      	bne.n	800aeca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aeca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3730      	adds	r7, #48	; 0x30
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	00086470 	.word	0x00086470
 800aedc:	00989680 	.word	0x00989680

0800aee0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b08c      	sub	sp, #48	; 0x30
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800aef4:	2300      	movs	r3, #0
 800aef6:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800aef8:	2300      	movs	r3, #0
 800aefa:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800aefc:	2300      	movs	r3, #0
 800aefe:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800af00:	2300      	movs	r3, #0
 800af02:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800af04:	2300      	movs	r3, #0
 800af06:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2200      	movs	r2, #0
 800af0c:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800af0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af12:	2b00      	cmp	r3, #0
 800af14:	d109      	bne.n	800af2a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800af16:	f107 031b 	add.w	r3, r7, #27
 800af1a:	461a      	mov	r2, r3
 800af1c:	2105      	movs	r1, #5
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f9b1 	bl	800b286 <VL53L1_GetSequenceStepEnable>
 800af24:	4603      	mov	r3, r0
 800af26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800af2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d109      	bne.n	800af46 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800af32:	f107 031a 	add.w	r3, r7, #26
 800af36:	461a      	mov	r2, r3
 800af38:	2106      	movs	r1, #6
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f9a3 	bl	800b286 <VL53L1_GetSequenceStepEnable>
 800af40:	4603      	mov	r3, r0
 800af42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800af46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10b      	bne.n	800af66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800af4e:	f107 0310 	add.w	r3, r7, #16
 800af52:	f107 0214 	add.w	r2, r7, #20
 800af56:	f107 010c 	add.w	r1, r7, #12
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 feb6 	bl	800bccc <VL53L1_get_timeouts_us>
 800af60:	4603      	mov	r3, r0
 800af62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800af66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d156      	bne.n	800b01c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800af74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 800af78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af7c:	2b08      	cmp	r3, #8
 800af7e:	d02a      	beq.n	800afd6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 800af80:	2b08      	cmp	r3, #8
 800af82:	dc47      	bgt.n	800b014 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 800af84:	2b03      	cmp	r3, #3
 800af86:	d012      	beq.n	800afae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 800af88:	2b04      	cmp	r3, #4
 800af8a:	d143      	bne.n	800b014 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800af8c:	7efb      	ldrb	r3, [r7, #27]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d002      	beq.n	800af98 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800af92:	7ebb      	ldrb	r3, [r7, #26]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d105      	bne.n	800afa4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800af9e:	3308      	adds	r3, #8
 800afa0:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800afa2:	e03c      	b.n	800b01e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800afaa:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800afac:	e037      	b.n	800b01e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800afae:	7efb      	ldrb	r3, [r7, #27]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d002      	beq.n	800afba <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 800afb4:	7ebb      	ldrb	r3, [r7, #26]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d106      	bne.n	800afc8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800afc0:	3334      	adds	r3, #52	; 0x34
 800afc2:	005b      	lsls	r3, r3, #1
 800afc4:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800afc6:	e02a      	b.n	800b01e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800afce:	3330      	adds	r3, #48	; 0x30
 800afd0:	005b      	lsls	r3, r3, #1
 800afd2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800afd4:	e023      	b.n	800b01e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800afd6:	23f5      	movs	r3, #245	; 0xf5
 800afd8:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800afda:	f107 0308 	add.w	r3, r7, #8
 800afde:	461a      	mov	r2, r3
 800afe0:	f248 0136 	movw	r1, #32822	; 0x8036
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f001 fe9b 	bl	800cd20 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	2b00      	cmp	r3, #0
 800afee:	dd07      	ble.n	800b000 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	22f5      	movs	r2, #245	; 0xf5
 800aff4:	fb02 f303 	mul.w	r3, r2, r3
 800aff8:	461a      	mov	r2, r3
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	4413      	add	r3, r2
 800affe:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b002:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800b006:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	005b      	lsls	r3, r3, #1
 800b00c:	69fa      	ldr	r2, [r7, #28]
 800b00e:	4413      	add	r3, r2
 800b010:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b012:	e004      	b.n	800b01e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800b014:	23f8      	movs	r3, #248	; 0xf8
 800b016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b01a:	e000      	b.n	800b01e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 800b01c:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800b01e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b022:	2b00      	cmp	r3, #0
 800b024:	d102      	bne.n	800b02c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b02a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b02c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b030:	4618      	mov	r0, r3
 800b032:	3730      	adds	r7, #48	; 0x30
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b042:	2300      	movs	r3, #0
 800b044:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	019b      	lsls	r3, r3, #6
 800b04e:	4a09      	ldr	r2, [pc, #36]	; (800b074 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800b050:	fba2 2303 	umull	r2, r3, r2, r3
 800b054:	099b      	lsrs	r3, r3, #6
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	4413      	add	r3, r2
 800b05a:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800b05c:	68b9      	ldr	r1, [r7, #8]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fdad 	bl	800bbbe <VL53L1_set_inter_measurement_period_ms>
 800b064:	4603      	mov	r3, r0
 800b066:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800b068:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	10624dd3 	.word	0x10624dd3

0800b078 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800b086:	f107 0308 	add.w	r3, r7, #8
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fdbf 	bl	800bc10 <VL53L1_get_inter_measurement_period_ms>
 800b092:	4603      	mov	r3, r0
 800b094:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	019b      	lsls	r3, r3, #6
 800b09c:	4907      	ldr	r1, [pc, #28]	; (800b0bc <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800b09e:	fba1 1303 	umull	r1, r3, r1, r3
 800b0a2:	099b      	lsrs	r3, r3, #6
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800b0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	10624dd3 	.word	0x10624dd3

0800b0c0 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	607a      	str	r2, [r7, #4]
 800b0cc:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b0d2:	897b      	ldrh	r3, [r7, #10]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <SetLimitValue+0x1e>
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d009      	beq.n	800b0f0 <SetLimitValue+0x30>
 800b0dc:	e011      	b.n	800b102 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	0b9b      	lsrs	r3, r3, #14
 800b0e2:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800b0e4:	8abb      	ldrh	r3, [r7, #20]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f001 f941 	bl	800c370 <VL53L1_set_lite_sigma_threshold>
		break;
 800b0ee:	e00a      	b.n	800b106 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	0a5b      	lsrs	r3, r3, #9
 800b0f4:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800b0f6:	8abb      	ldrh	r3, [r7, #20]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f001 f964 	bl	800c3c8 <VL53L1_set_lite_min_count_rate>
		break;
 800b100:	e001      	b.n	800b106 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b102:	23fc      	movs	r3, #252	; 0xfc
 800b104:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b106:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	460b      	mov	r3, r1
 800b11c:	807b      	strh	r3, [r7, #2]
 800b11e:	4613      	mov	r3, r2
 800b120:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b122:	2300      	movs	r3, #0
 800b124:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b12a:	887b      	ldrh	r3, [r7, #2]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d902      	bls.n	800b136 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b130:	23fc      	movs	r3, #252	; 0xfc
 800b132:	73fb      	strb	r3, [r7, #15]
 800b134:	e014      	b.n	800b160 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800b136:	787b      	ldrb	r3, [r7, #1]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d102      	bne.n	800b142 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	60bb      	str	r3, [r7, #8]
 800b140:	e006      	b.n	800b150 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b142:	887b      	ldrh	r3, [r7, #2]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	33e0      	adds	r3, #224	; 0xe0
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4413      	add	r3, r2
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800b150:	887b      	ldrh	r3, [r7, #2]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7ff ffb2 	bl	800b0c0 <SetLimitValue>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800b160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10c      	bne.n	800b182 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b168:	787b      	ldrb	r3, [r7, #1]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	bf14      	ite	ne
 800b16e:	2301      	movne	r3, #1
 800b170:	2300      	moveq	r3, #0
 800b172:	b2da      	uxtb	r2, r3
 800b174:	887b      	ldrh	r3, [r7, #2]
 800b176:	4611      	mov	r1, r2
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	4413      	add	r3, r2
 800b17c:	460a      	mov	r2, r1
 800b17e:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800b182:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800b18e:	b480      	push	{r7}
 800b190:	b087      	sub	sp, #28
 800b192:	af00      	add	r7, sp, #0
 800b194:	60f8      	str	r0, [r7, #12]
 800b196:	460b      	mov	r3, r1
 800b198:	607a      	str	r2, [r7, #4]
 800b19a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b19c:	2300      	movs	r3, #0
 800b19e:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b1a0:	897b      	ldrh	r3, [r7, #10]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d905      	bls.n	800b1b2 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b1a6:	23fc      	movs	r3, #252	; 0xfc
 800b1a8:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	701a      	strb	r2, [r3, #0]
 800b1b0:	e008      	b.n	800b1c4 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b1b2:	897b      	ldrh	r3, [r7, #10]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800b1bc:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	7dba      	ldrb	r2, [r7, #22]
 800b1c2:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b1c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	371c      	adds	r7, #28
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b088      	sub	sp, #32
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	607a      	str	r2, [r7, #4]
 800b1e0:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b1ea:	897b      	ldrh	r3, [r7, #10]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <VL53L1_GetLimitCheckValue+0x22>
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d00c      	beq.n	800b20e <VL53L1_GetLimitCheckValue+0x3a>
 800b1f4:	e017      	b.n	800b226 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800b1f6:	f107 0314 	add.w	r3, r7, #20
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f001 f8a1 	bl	800c344 <VL53L1_get_lite_sigma_threshold>
 800b202:	4603      	mov	r3, r0
 800b204:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800b206:	8abb      	ldrh	r3, [r7, #20]
 800b208:	039b      	lsls	r3, r3, #14
 800b20a:	61bb      	str	r3, [r7, #24]
		break;
 800b20c:	e00d      	b.n	800b22a <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800b20e:	f107 0316 	add.w	r3, r7, #22
 800b212:	4619      	mov	r1, r3
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f001 f8c1 	bl	800c39c <VL53L1_get_lite_min_count_rate>
 800b21a:	4603      	mov	r3, r0
 800b21c:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800b21e:	8afb      	ldrh	r3, [r7, #22]
 800b220:	025b      	lsls	r3, r3, #9
 800b222:	61bb      	str	r3, [r7, #24]
		break;
 800b224:	e001      	b.n	800b22a <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b226:	23fc      	movs	r3, #252	; 0xfc
 800b228:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800b22a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d123      	bne.n	800b27a <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d110      	bne.n	800b25a <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800b238:	897b      	ldrh	r3, [r7, #10]
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	33e0      	adds	r3, #224	; 0xe0
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4413      	add	r3, r2
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	69ba      	ldr	r2, [r7, #24]
 800b24a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b24c:	897b      	ldrh	r3, [r7, #10]
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	4413      	add	r3, r2
 800b252:	2200      	movs	r2, #0
 800b254:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800b258:	e00f      	b.n	800b27a <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	69ba      	ldr	r2, [r7, #24]
 800b25e:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b260:	897b      	ldrh	r3, [r7, #10]
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	33e0      	adds	r3, #224	; 0xe0
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4413      	add	r3, r2
 800b26a:	69ba      	ldr	r2, [r7, #24]
 800b26c:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b26e:	897b      	ldrh	r3, [r7, #10]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	4413      	add	r3, r2
 800b274:	2201      	movs	r2, #1
 800b276:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800b27a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b27e:	4618      	mov	r0, r3
 800b280:	3720      	adds	r7, #32
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b086      	sub	sp, #24
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	60f8      	str	r0, [r7, #12]
 800b28e:	460b      	mov	r3, r1
 800b290:	607a      	str	r2, [r7, #4]
 800b292:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b294:	2300      	movs	r3, #0
 800b296:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800b298:	7afb      	ldrb	r3, [r7, #11]
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	4619      	mov	r1, r3
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f000 fd7f 	bl	800bda2 <VL53L1_get_sequence_config_bit>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800b2a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	789b      	ldrb	r3, [r3, #2]
 800b2c4:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800b2c6:	7dbb      	ldrb	r3, [r7, #22]
 800b2c8:	2b40      	cmp	r3, #64	; 0x40
 800b2ca:	d002      	beq.n	800b2d2 <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 fa6b 	bl	800b7a8 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800b2d8:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 800b2da:	7d7b      	ldrb	r3, [r7, #21]
 800b2dc:	2b63      	cmp	r3, #99	; 0x63
 800b2de:	dc12      	bgt.n	800b306 <VL53L1_StartMeasurement+0x52>
 800b2e0:	2b62      	cmp	r3, #98	; 0x62
 800b2e2:	da0d      	bge.n	800b300 <VL53L1_StartMeasurement+0x4c>
 800b2e4:	2b05      	cmp	r3, #5
 800b2e6:	dc0e      	bgt.n	800b306 <VL53L1_StartMeasurement+0x52>
 800b2e8:	2b04      	cmp	r3, #4
 800b2ea:	da09      	bge.n	800b300 <VL53L1_StartMeasurement+0x4c>
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	dc02      	bgt.n	800b2f6 <VL53L1_StartMeasurement+0x42>
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	da05      	bge.n	800b300 <VL53L1_StartMeasurement+0x4c>
 800b2f4:	e007      	b.n	800b306 <VL53L1_StartMeasurement+0x52>
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d105      	bne.n	800b306 <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	75fb      	strb	r3, [r7, #23]
		break;
 800b2fe:	e004      	b.n	800b30a <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800b300:	23f2      	movs	r3, #242	; 0xf2
 800b302:	75fb      	strb	r3, [r7, #23]
		break;
 800b304:	e001      	b.n	800b30a <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800b306:	23fd      	movs	r3, #253	; 0xfd
 800b308:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800b30a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d11f      	bne.n	800b352 <VL53L1_StartMeasurement+0x9e>
 800b312:	7dbb      	ldrb	r3, [r7, #22]
 800b314:	2b40      	cmp	r3, #64	; 0x40
 800b316:	d11c      	bne.n	800b352 <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b318:	f107 0310 	add.w	r3, r7, #16
 800b31c:	4619      	mov	r1, r3
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f7ff fdde 	bl	800aee0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800b324:	4603      	mov	r3, r0
 800b326:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	4a17      	ldr	r2, [pc, #92]	; (800b388 <VL53L1_StartMeasurement+0xd4>)
 800b32c:	fba2 2303 	umull	r2, r3, r2, r3
 800b330:	099b      	lsrs	r3, r3, #6
 800b332:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b334:	f107 030c 	add.w	r3, r7, #12
 800b338:	4619      	mov	r1, r3
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7ff fe9c 	bl	800b078 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800b340:	4603      	mov	r3, r0
 800b342:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	1d1a      	adds	r2, r3, #4
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d901      	bls.n	800b352 <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800b34e:	23fc      	movs	r3, #252	; 0xfc
 800b350:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800b352:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d107      	bne.n	800b36a <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 800b35a:	7dbb      	ldrb	r3, [r7, #22]
 800b35c:	2206      	movs	r2, #6
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f001 f867 	bl	800c434 <VL53L1_init_and_start_range>
 800b366:	4603      	mov	r3, r0
 800b368:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800b36a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d103      	bne.n	800b37a <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2204      	movs	r2, #4
 800b376:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800b37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	10624dd3 	.word	0x10624dd3

0800b38c <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b394:	2300      	movs	r3, #0
 800b396:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	789b      	ldrb	r3, [r3, #2]
 800b39c:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800b39e:	7bbb      	ldrb	r3, [r7, #14]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f001 fb87 	bl	800cab6 <VL53L1_clear_interrupt_and_enable_next_range>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800b3ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800b3c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f004 fb18 	bl	800f9fe <VL53L1_poll_for_range_completion>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800b3d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
	...

0800b3e0 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b08d      	sub	sp, #52	; 0x34
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	603a      	str	r2, [r7, #0]
 800b3ea:	71fb      	strb	r3, [r7, #7]
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800b3f0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800b3f4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800b3f6:	231e      	movs	r3, #30
 800b3f8:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800b3fa:	4b33      	ldr	r3, [pc, #204]	; (800b4c8 <ComputeRQL+0xe8>)
 800b3fc:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800b3fe:	4b33      	ldr	r3, [pc, #204]	; (800b4cc <ComputeRQL+0xec>)
 800b400:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800b402:	f641 139a 	movw	r3, #6554	; 0x199a
 800b406:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d103      	bne.n	800b416 <ComputeRQL+0x36>
		returnvalue = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b414:	e04f      	b.n	800b4b6 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800b416:	79bb      	ldrb	r3, [r7, #6]
 800b418:	2b07      	cmp	r3, #7
 800b41a:	d103      	bne.n	800b424 <ComputeRQL+0x44>
		returnvalue = 50;
 800b41c:	2332      	movs	r3, #50	; 0x32
 800b41e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b422:	e048      	b.n	800b4b6 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b42a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800b42e:	429a      	cmp	r2, r3
 800b430:	dd03      	ble.n	800b43a <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800b432:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b434:	041b      	lsls	r3, r3, #16
 800b436:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b438:	e007      	b.n	800b44a <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b440:	461a      	mov	r2, r3
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	fb02 f303 	mul.w	r3, r2, r3
 800b448:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800b44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d020      	beq.n	800b492 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b454:	461a      	mov	r2, r3
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	fb02 f303 	mul.w	r3, r2, r3
 800b45c:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b460:	085b      	lsrs	r3, r3, #1
 800b462:	693a      	ldr	r2, [r7, #16]
 800b464:	4413      	add	r3, r2
 800b466:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800b468:	693a      	ldr	r2, [r7, #16]
 800b46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b470:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	041b      	lsls	r3, r3, #16
 800b476:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d804      	bhi.n	800b48a <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800b480:	69fa      	ldr	r2, [r7, #28]
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	62bb      	str	r3, [r7, #40]	; 0x28
 800b488:	e006      	b.n	800b498 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800b48a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b48e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b490:	e002      	b.n	800b498 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800b492:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800b496:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800b498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49a:	0c1b      	lsrs	r3, r3, #16
 800b49c:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800b49e:	7bfb      	ldrb	r3, [r7, #15]
 800b4a0:	2b32      	cmp	r3, #50	; 0x32
 800b4a2:	d905      	bls.n	800b4b0 <ComputeRQL+0xd0>
 800b4a4:	7bfb      	ldrb	r3, [r7, #15]
 800b4a6:	2b64      	cmp	r3, #100	; 0x64
 800b4a8:	bf28      	it	cs
 800b4aa:	2364      	movcs	r3, #100	; 0x64
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	e000      	b.n	800b4b2 <ComputeRQL+0xd2>
 800b4b0:	2332      	movs	r3, #50	; 0x32
 800b4b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800b4b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3734      	adds	r7, #52	; 0x34
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	0075b333 	.word	0x0075b333
 800b4cc:	0030cccd 	.word	0x0030cccd

0800b4d0 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800b4da:	79fb      	ldrb	r3, [r7, #7]
 800b4dc:	3b04      	subs	r3, #4
 800b4de:	2b0f      	cmp	r3, #15
 800b4e0:	d83d      	bhi.n	800b55e <ConvertStatusLite+0x8e>
 800b4e2:	a201      	add	r2, pc, #4	; (adr r2, 800b4e8 <ConvertStatusLite+0x18>)
 800b4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e8:	0800b53b 	.word	0x0800b53b
 800b4ec:	0800b535 	.word	0x0800b535
 800b4f0:	0800b541 	.word	0x0800b541
 800b4f4:	0800b547 	.word	0x0800b547
 800b4f8:	0800b553 	.word	0x0800b553
 800b4fc:	0800b559 	.word	0x0800b559
 800b500:	0800b55f 	.word	0x0800b55f
 800b504:	0800b55f 	.word	0x0800b55f
 800b508:	0800b54d 	.word	0x0800b54d
 800b50c:	0800b55f 	.word	0x0800b55f
 800b510:	0800b55f 	.word	0x0800b55f
 800b514:	0800b55f 	.word	0x0800b55f
 800b518:	0800b55f 	.word	0x0800b55f
 800b51c:	0800b55f 	.word	0x0800b55f
 800b520:	0800b529 	.word	0x0800b529
 800b524:	0800b52f 	.word	0x0800b52f
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800b528:	230a      	movs	r3, #10
 800b52a:	73fb      	strb	r3, [r7, #15]
		break;
 800b52c:	e019      	b.n	800b562 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800b52e:	2306      	movs	r3, #6
 800b530:	73fb      	strb	r3, [r7, #15]
		break;
 800b532:	e016      	b.n	800b562 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800b534:	2304      	movs	r3, #4
 800b536:	73fb      	strb	r3, [r7, #15]
		break;
 800b538:	e013      	b.n	800b562 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800b53a:	2302      	movs	r3, #2
 800b53c:	73fb      	strb	r3, [r7, #15]
		break;
 800b53e:	e010      	b.n	800b562 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800b540:	2301      	movs	r3, #1
 800b542:	73fb      	strb	r3, [r7, #15]
		break;
 800b544:	e00d      	b.n	800b562 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800b546:	2307      	movs	r3, #7
 800b548:	73fb      	strb	r3, [r7, #15]
		break;
 800b54a:	e00a      	b.n	800b562 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800b54c:	2309      	movs	r3, #9
 800b54e:	73fb      	strb	r3, [r7, #15]
		break;
 800b550:	e007      	b.n	800b562 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800b552:	2303      	movs	r3, #3
 800b554:	73fb      	strb	r3, [r7, #15]
		break;
 800b556:	e004      	b.n	800b562 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b558:	2300      	movs	r3, #0
 800b55a:	73fb      	strb	r3, [r7, #15]
		break;
 800b55c:	e001      	b.n	800b562 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800b55e:	23ff      	movs	r3, #255	; 0xff
 800b560:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800b562:	7bfb      	ldrb	r3, [r7, #15]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b08c      	sub	sp, #48	; 0x30
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	607b      	str	r3, [r7, #4]
 800b57a:	460b      	mov	r3, r1
 800b57c:	72fb      	strb	r3, [r7, #11]
 800b57e:	4613      	mov	r3, r2
 800b580:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b582:	2300      	movs	r3, #0
 800b584:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58e:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b596:	f003 031f 	and.w	r3, r3, #31
 800b59a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800b59e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800b5a2:	7afb      	ldrb	r3, [r7, #11]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7ff ff1a 	bl	800b3e0 <ComputeRQL>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b2:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5b8:	025b      	lsls	r3, r3, #9
 800b5ba:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5c0:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b5c6:	025b      	lsls	r3, r3, #9
 800b5c8:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ce:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b5dc:	025b      	lsls	r3, r3, #9
 800b5de:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800b5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e2:	6a3a      	ldr	r2, [r7, #32]
 800b5e4:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800b5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ee:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800b5f6:	7abb      	ldrb	r3, [r7, #10]
 800b5f8:	2b11      	cmp	r3, #17
 800b5fa:	d009      	beq.n	800b610 <SetSimpleData+0xa0>
 800b5fc:	2b11      	cmp	r3, #17
 800b5fe:	dc0f      	bgt.n	800b620 <SetSimpleData+0xb0>
 800b600:	2b03      	cmp	r3, #3
 800b602:	dc02      	bgt.n	800b60a <SetSimpleData+0x9a>
 800b604:	2b00      	cmp	r3, #0
 800b606:	dc03      	bgt.n	800b610 <SetSimpleData+0xa0>
 800b608:	e00a      	b.n	800b620 <SetSimpleData+0xb0>
 800b60a:	2b0d      	cmp	r3, #13
 800b60c:	d004      	beq.n	800b618 <SetSimpleData+0xa8>
 800b60e:	e007      	b.n	800b620 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800b610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b612:	2205      	movs	r2, #5
 800b614:	76da      	strb	r2, [r3, #27]
		break;
 800b616:	e006      	b.n	800b626 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800b618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61a:	220d      	movs	r2, #13
 800b61c:	76da      	strb	r2, [r3, #27]
		break;
 800b61e:	e002      	b.n	800b626 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	2200      	movs	r2, #0
 800b624:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800b626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b628:	7edb      	ldrb	r3, [r3, #27]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d108      	bne.n	800b640 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800b62e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b632:	4618      	mov	r0, r3
 800b634:	f7ff ff4c 	bl	800b4d0 <ConvertStatusLite>
 800b638:	4603      	mov	r3, r0
 800b63a:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800b63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63e:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b644:	025b      	lsls	r3, r3, #9
 800b646:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6a3a      	ldr	r2, [r7, #32]
 800b64c:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b654:	025b      	lsls	r3, r3, #9
 800b656:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6a3a      	ldr	r2, [r7, #32]
 800b65c:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800b660:	f107 0314 	add.w	r3, r7, #20
 800b664:	461a      	mov	r2, r3
 800b666:	2100      	movs	r1, #0
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f7ff fdb3 	bl	800b1d4 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800b66e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b672:	2b06      	cmp	r3, #6
 800b674:	bf0c      	ite	eq
 800b676:	2301      	moveq	r3, #1
 800b678:	2300      	movne	r3, #0
 800b67a:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800b67c:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800b67e:	f107 0319 	add.w	r3, r7, #25
 800b682:	461a      	mov	r2, r3
 800b684:	2100      	movs	r1, #0
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f7ff fd81 	bl	800b18e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800b68c:	7e7b      	ldrb	r3, [r7, #25]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d104      	bne.n	800b69c <SetSimpleData+0x12c>
 800b692:	7ffb      	ldrb	r3, [r7, #31]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d101      	bne.n	800b69c <SetSimpleData+0x12c>
 800b698:	2301      	movs	r3, #1
 800b69a:	e000      	b.n	800b69e <SetSimpleData+0x12e>
 800b69c:	2300      	movs	r3, #0
 800b69e:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	7fba      	ldrb	r2, [r7, #30]
 800b6a4:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800b6a8:	f107 0314 	add.w	r3, r7, #20
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f7ff fd8f 	bl	800b1d4 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800b6b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b6ba:	2b04      	cmp	r3, #4
 800b6bc:	bf0c      	ite	eq
 800b6be:	2301      	moveq	r3, #1
 800b6c0:	2300      	movne	r3, #0
 800b6c2:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800b6c4:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800b6c6:	f107 0319 	add.w	r3, r7, #25
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f7ff fd5d 	bl	800b18e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800b6d4:	7e7b      	ldrb	r3, [r7, #25]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d104      	bne.n	800b6e4 <SetSimpleData+0x174>
 800b6da:	7f7b      	ldrb	r3, [r7, #29]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d101      	bne.n	800b6e4 <SetSimpleData+0x174>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e000      	b.n	800b6e6 <SetSimpleData+0x176>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	7fba      	ldrb	r2, [r7, #30]
 800b6ec:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f2:	8b1b      	ldrh	r3, [r3, #24]
 800b6f4:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800b6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f8:	7edb      	ldrb	r3, [r3, #27]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d110      	bne.n	800b720 <SetSimpleData+0x1b0>
 800b6fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b702:	2b00      	cmp	r3, #0
 800b704:	da0c      	bge.n	800b720 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800b706:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b70a:	4b08      	ldr	r3, [pc, #32]	; (800b72c <SetSimpleData+0x1bc>)
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	429a      	cmp	r2, r3
 800b710:	da03      	bge.n	800b71a <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800b712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b714:	220e      	movs	r2, #14
 800b716:	76da      	strb	r2, [r3, #27]
 800b718:	e002      	b.n	800b720 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800b71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71c:	2200      	movs	r2, #0
 800b71e:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800b720:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b724:	4618      	mov	r0, r3
 800b726:	3730      	adds	r7, #48	; 0x30
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	20000150 	.word	0x20000150

0800b730 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b0a8      	sub	sp, #160	; 0xa0
 800b734:	af02      	add	r7, sp, #8
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b73a:	2300      	movs	r3, #0
 800b73c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 800b740:	f107 0308 	add.w	r3, r7, #8
 800b744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800b748:	221c      	movs	r2, #28
 800b74a:	21ff      	movs	r1, #255	; 0xff
 800b74c:	6838      	ldr	r0, [r7, #0]
 800b74e:	f004 fd89 	bl	8010264 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800b752:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b756:	2102      	movs	r1, #2
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f001 f93c 	bl	800c9d6 <VL53L1_get_device_results>
 800b75e:	4603      	mov	r3, r0
 800b760:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800b764:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d117      	bne.n	800b79c <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800b76c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b770:	789a      	ldrb	r2, [r3, #2]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800b776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b77a:	3304      	adds	r3, #4
 800b77c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800b780:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b784:	78da      	ldrb	r2, [r3, #3]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b78e:	2101      	movs	r1, #1
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7ff feed 	bl	800b570 <SetSimpleData>
 800b796:	4603      	mov	r3, r0
 800b798:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b79c:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3798      	adds	r7, #152	; 0x98
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b0c6      	sub	sp, #280	; 0x118
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	1d3b      	adds	r3, r7, #4
 800b7b0:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800b7be:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d108      	bne.n	800b7d8 <VL53L1_LoadPatch+0x30>
		status = VL53L1_WrByte(
 800b7c6:	1d3b      	adds	r3, r7, #4
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	2185      	movs	r1, #133	; 0x85
 800b7cc:	6818      	ldr	r0, [r3, #0]
 800b7ce:	f004 f9f1 	bl	800fbb4 <VL53L1_WrByte>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 800b7d8:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d103      	bne.n	800b7e8 <VL53L1_LoadPatch+0x40>
		VL53L1_enable_powerforce(Dev);
 800b7e0:	1d3b      	adds	r3, r7, #4
 800b7e2:	6818      	ldr	r0, [r3, #0]
 800b7e4:	f002 fce1 	bl	800e1aa <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800b7e8:	4b65      	ldr	r3, [pc, #404]	; (800b980 <VL53L1_LoadPatch+0x1d8>)
 800b7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b7f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7f4:	2b03      	cmp	r3, #3
 800b7f6:	d81b      	bhi.n	800b830 <VL53L1_LoadPatch+0x88>
 800b7f8:	a201      	add	r2, pc, #4	; (adr r2, 800b800 <VL53L1_LoadPatch+0x58>)
 800b7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7fe:	bf00      	nop
 800b800:	0800b811 	.word	0x0800b811
 800b804:	0800b819 	.word	0x0800b819
 800b808:	0800b821 	.word	0x0800b821
 800b80c:	0800b829 	.word	0x0800b829

	switch(patch_tuning) {
	case 0:
		patch_power = 0x00;
 800b810:	2300      	movs	r3, #0
 800b812:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b816:	e00e      	b.n	800b836 <VL53L1_LoadPatch+0x8e>
	case 1:
		patch_power = 0x10;
 800b818:	2310      	movs	r3, #16
 800b81a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b81e:	e00a      	b.n	800b836 <VL53L1_LoadPatch+0x8e>
	case 2:
		patch_power = 0x20;
 800b820:	2320      	movs	r3, #32
 800b822:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b826:	e006      	b.n	800b836 <VL53L1_LoadPatch+0x8e>
	case 3:
		patch_power = 0x40;
 800b828:	2340      	movs	r3, #64	; 0x40
 800b82a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b82e:	e002      	b.n	800b836 <VL53L1_LoadPatch+0x8e>
	default:
		patch_power = 0x00;
 800b830:	2300      	movs	r3, #0
 800b832:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800b836:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d125      	bne.n	800b88a <VL53L1_LoadPatch+0xe2>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 800b83e:	f107 030c 	add.w	r3, r7, #12
 800b842:	2229      	movs	r2, #41	; 0x29
 800b844:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800b846:	f107 030c 	add.w	r3, r7, #12
 800b84a:	22c9      	movs	r2, #201	; 0xc9
 800b84c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800b84e:	f107 030c 	add.w	r3, r7, #12
 800b852:	220e      	movs	r2, #14
 800b854:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800b856:	f107 030c 	add.w	r3, r7, #12
 800b85a:	2240      	movs	r2, #64	; 0x40
 800b85c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800b85e:	f107 030c 	add.w	r3, r7, #12
 800b862:	2228      	movs	r2, #40	; 0x28
 800b864:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800b866:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	f107 030c 	add.w	r3, r7, #12
 800b870:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800b872:	f107 020c 	add.w	r2, r7, #12
 800b876:	1d38      	adds	r0, r7, #4
 800b878:	2306      	movs	r3, #6
 800b87a:	f240 4176 	movw	r1, #1142	; 0x476
 800b87e:	6800      	ldr	r0, [r0, #0]
 800b880:	f004 f92c 	bl	800fadc <VL53L1_WriteMulti>
 800b884:	4603      	mov	r3, r0
 800b886:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 800b88a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d123      	bne.n	800b8da <VL53L1_LoadPatch+0x132>
		comms_buffer[0] = 0x03;
 800b892:	f107 030c 	add.w	r3, r7, #12
 800b896:	2203      	movs	r2, #3
 800b898:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800b89a:	f107 030c 	add.w	r3, r7, #12
 800b89e:	226d      	movs	r2, #109	; 0x6d
 800b8a0:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800b8a2:	f107 030c 	add.w	r3, r7, #12
 800b8a6:	2203      	movs	r2, #3
 800b8a8:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800b8aa:	f107 030c 	add.w	r3, r7, #12
 800b8ae:	226f      	movs	r2, #111	; 0x6f
 800b8b0:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800b8b2:	f107 030c 	add.w	r3, r7, #12
 800b8b6:	2207      	movs	r2, #7
 800b8b8:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800b8ba:	f107 030c 	add.w	r3, r7, #12
 800b8be:	2229      	movs	r2, #41	; 0x29
 800b8c0:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 800b8c2:	f107 020c 	add.w	r2, r7, #12
 800b8c6:	1d38      	adds	r0, r7, #4
 800b8c8:	2306      	movs	r3, #6
 800b8ca:	f240 4196 	movw	r1, #1174	; 0x496
 800b8ce:	6800      	ldr	r0, [r0, #0]
 800b8d0:	f004 f904 	bl	800fadc <VL53L1_WriteMulti>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800b8da:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d113      	bne.n	800b90a <VL53L1_LoadPatch+0x162>
		comms_buffer[0] = 0x00;
 800b8e2:	f107 030c 	add.w	r3, r7, #12
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800b8ea:	f107 030c 	add.w	r3, r7, #12
 800b8ee:	2207      	movs	r2, #7
 800b8f0:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800b8f2:	f107 020c 	add.w	r2, r7, #12
 800b8f6:	1d38      	adds	r0, r7, #4
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	f240 4172 	movw	r1, #1138	; 0x472
 800b8fe:	6800      	ldr	r0, [r0, #0]
 800b900:	f004 f8ec 	bl	800fadc <VL53L1_WriteMulti>
 800b904:	4603      	mov	r3, r0
 800b906:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 800b90a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d113      	bne.n	800b93a <VL53L1_LoadPatch+0x192>
		comms_buffer[0] = 0x00;
 800b912:	f107 030c 	add.w	r3, r7, #12
 800b916:	2200      	movs	r2, #0
 800b918:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800b91a:	f107 030c 	add.w	r3, r7, #12
 800b91e:	2207      	movs	r2, #7
 800b920:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800b922:	f107 020c 	add.w	r2, r7, #12
 800b926:	1d38      	adds	r0, r7, #4
 800b928:	2302      	movs	r3, #2
 800b92a:	f240 4174 	movw	r1, #1140	; 0x474
 800b92e:	6800      	ldr	r0, [r0, #0]
 800b930:	f004 f8d4 	bl	800fadc <VL53L1_WriteMulti>
 800b934:	4603      	mov	r3, r0
 800b936:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800b93a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d109      	bne.n	800b956 <VL53L1_LoadPatch+0x1ae>
		status = VL53L1_WrByte(
 800b942:	1d3b      	adds	r3, r7, #4
 800b944:	2201      	movs	r2, #1
 800b946:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800b94a:	6818      	ldr	r0, [r3, #0]
 800b94c:	f004 f932 	bl	800fbb4 <VL53L1_WrByte>
 800b950:	4603      	mov	r3, r0
 800b952:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 800b956:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d108      	bne.n	800b970 <VL53L1_LoadPatch+0x1c8>
		status = VL53L1_WrByte(
 800b95e:	1d3b      	adds	r3, r7, #4
 800b960:	2201      	movs	r2, #1
 800b962:	2185      	movs	r1, #133	; 0x85
 800b964:	6818      	ldr	r0, [r3, #0]
 800b966:	f004 f925 	bl	800fbb4 <VL53L1_WrByte>
 800b96a:	4603      	mov	r3, r0
 800b96c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 800b970:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 800b974:	4618      	mov	r0, r3
 800b976:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	20000150 	.word	0x20000150

0800b984 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800b984:	b5b0      	push	{r4, r5, r7, lr}
 800b986:	b088      	sub	sp, #32
 800b988:	af04      	add	r7, sp, #16
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800b998:	2162      	movs	r1, #98	; 0x62
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f002 f8bf 	bl	800db1e <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b9c4:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b9cc:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b9d4:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2264      	movs	r2, #100	; 0x64
 800b9da:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b9e2:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	f240 72db 	movw	r2, #2011	; 0x7db
 800b9f2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f002 f875 	bl	800dae6 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800b9fc:	78fb      	ldrb	r3, [r7, #3]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d008      	beq.n	800ba14 <VL53L1_data_init+0x90>
 800ba02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d104      	bne.n	800ba14 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f857 	bl	800babe <VL53L1_read_p2p_data>
 800ba10:	4603      	mov	r3, r0
 800ba12:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f001 fba4 	bl	800d168 <VL53L1_init_refspadchar_config_struct>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f001 fbc0 	bl	800d1b0 <VL53L1_init_ssc_config_struct>
 800ba30:	4603      	mov	r3, r0
 800ba32:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ba40:	4619      	mov	r1, r3
 800ba42:	4610      	mov	r0, r2
 800ba44:	f001 fbd5 	bl	800d1f2 <VL53L1_init_xtalk_config_struct>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ba52:	4618      	mov	r0, r3
 800ba54:	f001 fc2f 	bl	800d2b6 <VL53L1_init_offset_cal_config_struct>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	33a4      	adds	r3, #164	; 0xa4
 800ba60:	4618      	mov	r0, r3
 800ba62:	f001 fc4f 	bl	800d304 <VL53L1_init_tuning_parm_storage_struct>
 800ba66:	4603      	mov	r3, r0
 800ba68:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800ba6a:	2120      	movs	r1, #32
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 fcc1 	bl	800c3f4 <VL53L1_set_vhv_loopbound>
 800ba72:	4603      	mov	r3, r0
 800ba74:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800ba76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d116      	bne.n	800baac <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	7858      	ldrb	r0, [r3, #1]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	8b1c      	ldrh	r4, [r3, #24]
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	689d      	ldr	r5, [r3, #8]
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	6912      	ldr	r2, [r2, #16]
 800ba92:	68b9      	ldr	r1, [r7, #8]
 800ba94:	6949      	ldr	r1, [r1, #20]
 800ba96:	9102      	str	r1, [sp, #8]
 800ba98:	9201      	str	r2, [sp, #4]
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	462b      	mov	r3, r5
 800ba9e:	4622      	mov	r2, r4
 800baa0:	4601      	mov	r1, r0
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 fad8 	bl	800c058 <VL53L1_set_preset_mode>
 800baa8:	4603      	mov	r3, r0
 800baaa:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f002 fdb5 	bl	800e61c <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800bab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bdb0      	pop	{r4, r5, r7, pc}

0800babe <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800bac6:	2300      	movs	r3, #0
 800bac8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800bace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d108      	bne.n	800bae8 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800badc:	4619      	mov	r1, r3
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f002 ff39 	bl	800e956 <VL53L1_get_static_nvm_managed>
 800bae4:	4603      	mov	r3, r0
 800bae6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800bae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d107      	bne.n	800bb00 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	3342      	adds	r3, #66	; 0x42
 800baf4:	4619      	mov	r1, r3
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f003 f86b 	bl	800ebd2 <VL53L1_get_customer_nvm_managed>
 800bafc:	4603      	mov	r3, r0
 800bafe:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800bb00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d115      	bne.n	800bb34 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800bb0e:	4619      	mov	r1, r3
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f003 ff1d 	bl	800f950 <VL53L1_get_nvm_copy_data>
 800bb16:	4603      	mov	r3, r0
 800bb18:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800bb1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d108      	bne.n	800bb34 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	33f0      	adds	r3, #240	; 0xf0
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4610      	mov	r0, r2
 800bb30:	f002 f957 	bl	800dde2 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800bb34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d109      	bne.n	800bb50 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800bb42:	461a      	mov	r2, r3
 800bb44:	21de      	movs	r1, #222	; 0xde
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f004 f892 	bl	800fc70 <VL53L1_RdWord>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bb56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb5a:	d204      	bcs.n	800bb66 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800bb62:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800bb66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d107      	bne.n	800bb7e <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	339e      	adds	r3, #158	; 0x9e
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 f990 	bl	800be9a <VL53L1_get_mode_mitigation_roi>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d114      	bne.n	800bbb2 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10f      	bne.n	800bbb2 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800bb98:	011b      	lsls	r3, r3, #4
 800bb9a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bba8:	011b      	lsls	r3, r3, #4
 800bbaa:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800bbb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b085      	sub	sp, #20
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bbda:	23f1      	movs	r3, #241	; 0xf1
 800bbdc:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800bbde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10c      	bne.n	800bc00 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	683a      	ldr	r2, [r7, #0]
 800bbea:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800bbf2:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800bc00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bc2c:	23f1      	movs	r3, #241	; 0xf1
 800bc2e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800bc30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d109      	bne.n	800bc4c <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800bc44:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800bc4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b088      	sub	sp, #32
 800bc60:	af02      	add	r7, sp, #8
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
 800bc68:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d101      	bne.n	800bc80 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bc7c:	23f1      	movs	r3, #241	; 0xf1
 800bc7e:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800bc80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d11b      	bne.n	800bcc0 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	683a      	ldr	r2, [r7, #0]
 800bc98:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800bca6:	693a      	ldr	r2, [r7, #16]
 800bca8:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 800bcac:	9201      	str	r2, [sp, #4]
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	683a      	ldr	r2, [r7, #0]
 800bcb4:	6879      	ldr	r1, [r7, #4]
 800bcb6:	68b8      	ldr	r0, [r7, #8]
 800bcb8:	f002 fbe2 	bl	800e480 <VL53L1_calc_timeout_register_values>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800bcc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3718      	adds	r7, #24
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b088      	sub	sp, #32
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bcf4:	23f1      	movs	r3, #241	; 0xf1
 800bcf6:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800bcf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d14a      	bne.n	800bd96 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	4610      	mov	r0, r2
 800bd10:	f002 fa5d 	bl	800e1ce <VL53L1_calc_macro_period_us>
 800bd14:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800bd1c:	6979      	ldr	r1, [r7, #20]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f002 fb15 	bl	800e34e <VL53L1_calc_timeout_us>
 800bd24:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800bd30:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800bd32:	8a7b      	ldrh	r3, [r7, #18]
 800bd34:	021b      	lsls	r3, r3, #8
 800bd36:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800bd3e:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800bd40:	4413      	add	r3, r2
 800bd42:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800bd44:	8a7b      	ldrh	r3, [r7, #18]
 800bd46:	6979      	ldr	r1, [r7, #20]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f002 fb3e 	bl	800e3ca <VL53L1_calc_decoded_timeout_us>
 800bd4e:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800bd5a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800bd5c:	8a7b      	ldrh	r3, [r7, #18]
 800bd5e:	021b      	lsls	r3, r3, #8
 800bd60:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800bd68:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800bd6a:	4413      	add	r3, r2
 800bd6c:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800bd6e:	8a7b      	ldrh	r3, [r7, #18]
 800bd70:	6979      	ldr	r1, [r7, #20]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f002 fb29 	bl	800e3ca <VL53L1_calc_decoded_timeout_us>
 800bd78:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800bd96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3720      	adds	r7, #32
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800bda2:	b480      	push	{r7}
 800bda4:	b087      	sub	sp, #28
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	60f8      	str	r0, [r7, #12]
 800bdaa:	460b      	mov	r3, r1
 800bdac:	607a      	str	r2, [r7, #4]
 800bdae:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800bdbc:	7afb      	ldrb	r3, [r7, #11]
 800bdbe:	2b07      	cmp	r3, #7
 800bdc0:	d81c      	bhi.n	800bdfc <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800bdc2:	7afb      	ldrb	r3, [r7, #11]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d004      	beq.n	800bdd2 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800bdc8:	7afb      	ldrb	r3, [r7, #11]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd0:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800bdd8:	7dbb      	ldrb	r3, [r7, #22]
 800bdda:	4013      	ands	r3, r2
 800bddc:	b2da      	uxtb	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800bde2:	7afb      	ldrb	r3, [r7, #11]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00b      	beq.n	800be00 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	461a      	mov	r2, r3
 800bdee:	7afb      	ldrb	r3, [r7, #11]
 800bdf0:	fa42 f303 	asr.w	r3, r2, r3
 800bdf4:	b2da      	uxtb	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	701a      	strb	r2, [r3, #0]
 800bdfa:	e001      	b.n	800be00 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800bdfc:	23fc      	movs	r3, #252	; 0xfc
 800bdfe:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800be00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be04:	4618      	mov	r0, r3
 800be06:	371c      	adds	r7, #28
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be1a:	2300      	movs	r3, #0
 800be1c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	7858      	ldrb	r0, [r3, #1]
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	7819      	ldrb	r1, [r3, #0]
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800be30:	461a      	mov	r2, r3
 800be32:	f002 fb9e 	bl	800e572 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	7898      	ldrb	r0, [r3, #2]
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	78d9      	ldrb	r1, [r3, #3]
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800be44:	461a      	mov	r2, r3
 800be46:	f002 fbd3 	bl	800e5f0 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800be4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800be56:	b580      	push	{r7, lr}
 800be58:	b084      	sub	sp, #16
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be60:	2300      	movs	r3, #0
 800be62:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	3301      	adds	r3, #1
 800be72:	683a      	ldr	r2, [r7, #0]
 800be74:	4619      	mov	r1, r3
 800be76:	f002 fc8a 	bl	800e78e <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	1c99      	adds	r1, r3, #2
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	3303      	adds	r3, #3
 800be88:	461a      	mov	r2, r3
 800be8a:	f002 fb99 	bl	800e5c0 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800be8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b086      	sub	sp, #24
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bea4:	2300      	movs	r3, #0
 800bea6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800beac:	2300      	movs	r3, #0
 800beae:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800bebe:	f107 020e 	add.w	r2, r7, #14
 800bec2:	f107 010d 	add.w	r1, r7, #13
 800bec6:	4618      	mov	r0, r3
 800bec8:	f002 fc61 	bl	800e78e <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800becc:	7bba      	ldrb	r2, [r7, #14]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800bed2:	7b7a      	ldrb	r2, [r7, #13]
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800bede:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
 800bee2:	091b      	lsrs	r3, r3, #4
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800beea:	7bfb      	ldrb	r3, [r7, #15]
 800beec:	f003 030f 	and.w	r3, r3, #15
 800bef0:	b2da      	uxtb	r2, r3
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800bef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3718      	adds	r7, #24
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
	...

0800bf04 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b087      	sub	sp, #28
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	607a      	str	r2, [r7, #4]
 800bf0e:	603b      	str	r3, [r7, #0]
 800bf10:	460b      	mov	r3, r1
 800bf12:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800bf1c:	7afb      	ldrb	r3, [r7, #11]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	2b25      	cmp	r3, #37	; 0x25
 800bf22:	f200 808e 	bhi.w	800c042 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800bf26:	a201      	add	r2, pc, #4	; (adr r2, 800bf2c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800bf28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2c:	0800bfc5 	.word	0x0800bfc5
 800bf30:	0800bfc5 	.word	0x0800bfc5
 800bf34:	0800bfc5 	.word	0x0800bfc5
 800bf38:	0800bfc5 	.word	0x0800bfc5
 800bf3c:	0800bfc5 	.word	0x0800bfc5
 800bf40:	0800bfef 	.word	0x0800bfef
 800bf44:	0800bfef 	.word	0x0800bfef
 800bf48:	0800bfef 	.word	0x0800bfef
 800bf4c:	0800c043 	.word	0x0800c043
 800bf50:	0800c043 	.word	0x0800c043
 800bf54:	0800c043 	.word	0x0800c043
 800bf58:	0800c043 	.word	0x0800c043
 800bf5c:	0800c043 	.word	0x0800c043
 800bf60:	0800c043 	.word	0x0800c043
 800bf64:	0800c043 	.word	0x0800c043
 800bf68:	0800c043 	.word	0x0800c043
 800bf6c:	0800bfc5 	.word	0x0800bfc5
 800bf70:	0800bfef 	.word	0x0800bfef
 800bf74:	0800c043 	.word	0x0800c043
 800bf78:	0800c043 	.word	0x0800c043
 800bf7c:	0800c043 	.word	0x0800c043
 800bf80:	0800c043 	.word	0x0800c043
 800bf84:	0800c043 	.word	0x0800c043
 800bf88:	0800c043 	.word	0x0800c043
 800bf8c:	0800c043 	.word	0x0800c043
 800bf90:	0800c043 	.word	0x0800c043
 800bf94:	0800c043 	.word	0x0800c043
 800bf98:	0800c043 	.word	0x0800c043
 800bf9c:	0800c043 	.word	0x0800c043
 800bfa0:	0800c043 	.word	0x0800c043
 800bfa4:	0800c043 	.word	0x0800c043
 800bfa8:	0800c043 	.word	0x0800c043
 800bfac:	0800c043 	.word	0x0800c043
 800bfb0:	0800c043 	.word	0x0800c043
 800bfb4:	0800c043 	.word	0x0800c043
 800bfb8:	0800c019 	.word	0x0800c019
 800bfbc:	0800c019 	.word	0x0800c019
 800bfc0:	0800c019 	.word	0x0800c019
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	601a      	str	r2, [r3, #0]
	break;
 800bfec:	e02c      	b.n	800c048 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800c008:	6a3b      	ldr	r3, [r7, #32]
 800c00a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c014:	601a      	str	r2, [r3, #0]
	break;
 800c016:	e017      	b.n	800c048 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800c03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03e:	601a      	str	r2, [r3, #0]
	break;
 800c040:	e002      	b.n	800c048 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c042:	23fc      	movs	r3, #252	; 0xfc
 800c044:	75fb      	strb	r3, [r7, #23]
		break;
 800c046:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800c048:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	371c      	adds	r7, #28
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b092      	sub	sp, #72	; 0x48
 800c05c:	af04      	add	r7, sp, #16
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	607b      	str	r3, [r7, #4]
 800c062:	460b      	mov	r3, r1
 800c064:	72fb      	strb	r3, [r7, #11]
 800c066:	4613      	mov	r3, r2
 800c068:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c06a:	2300      	movs	r3, #0
 800c06c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800c074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c076:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c07a:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800c07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c082:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800c08a:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800c08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c092:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800c094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c096:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c09a:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	33a4      	adds	r3, #164	; 0xa4
 800c0a0:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a4:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800c0a8:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	7afa      	ldrb	r2, [r7, #11]
 800c0ae:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800c0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0b4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0ba:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800c0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0c0:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800c0c2:	2103      	movs	r1, #3
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f001 fd2a 	bl	800db1e <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800c0ca:	7afb      	ldrb	r3, [r7, #11]
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	2b25      	cmp	r3, #37	; 0x25
 800c0d0:	f200 810c 	bhi.w	800c2ec <VL53L1_set_preset_mode+0x294>
 800c0d4:	a201      	add	r2, pc, #4	; (adr r2, 800c0dc <VL53L1_set_preset_mode+0x84>)
 800c0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0da:	bf00      	nop
 800c0dc:	0800c175 	.word	0x0800c175
 800c0e0:	0800c191 	.word	0x0800c191
 800c0e4:	0800c1ad 	.word	0x0800c1ad
 800c0e8:	0800c1c9 	.word	0x0800c1c9
 800c0ec:	0800c1e5 	.word	0x0800c1e5
 800c0f0:	0800c201 	.word	0x0800c201
 800c0f4:	0800c21d 	.word	0x0800c21d
 800c0f8:	0800c239 	.word	0x0800c239
 800c0fc:	0800c2ed 	.word	0x0800c2ed
 800c100:	0800c2ed 	.word	0x0800c2ed
 800c104:	0800c2ed 	.word	0x0800c2ed
 800c108:	0800c2ed 	.word	0x0800c2ed
 800c10c:	0800c2ed 	.word	0x0800c2ed
 800c110:	0800c2ed 	.word	0x0800c2ed
 800c114:	0800c2ed 	.word	0x0800c2ed
 800c118:	0800c2ed 	.word	0x0800c2ed
 800c11c:	0800c255 	.word	0x0800c255
 800c120:	0800c271 	.word	0x0800c271
 800c124:	0800c2ed 	.word	0x0800c2ed
 800c128:	0800c2ed 	.word	0x0800c2ed
 800c12c:	0800c2ed 	.word	0x0800c2ed
 800c130:	0800c2ed 	.word	0x0800c2ed
 800c134:	0800c2ed 	.word	0x0800c2ed
 800c138:	0800c2ed 	.word	0x0800c2ed
 800c13c:	0800c2ed 	.word	0x0800c2ed
 800c140:	0800c2ed 	.word	0x0800c2ed
 800c144:	0800c2ed 	.word	0x0800c2ed
 800c148:	0800c2ed 	.word	0x0800c2ed
 800c14c:	0800c2ed 	.word	0x0800c2ed
 800c150:	0800c2ed 	.word	0x0800c2ed
 800c154:	0800c2ed 	.word	0x0800c2ed
 800c158:	0800c2ed 	.word	0x0800c2ed
 800c15c:	0800c2ed 	.word	0x0800c2ed
 800c160:	0800c2ed 	.word	0x0800c2ed
 800c164:	0800c2ed 	.word	0x0800c2ed
 800c168:	0800c28d 	.word	0x0800c28d
 800c16c:	0800c2ad 	.word	0x0800c2ad
 800c170:	0800c2cd 	.word	0x0800c2cd

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c182:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c184:	f001 f94d 	bl	800d422 <VL53L1_preset_mode_standard_ranging>
 800c188:	4603      	mov	r3, r0
 800c18a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c18e:	e0b1      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	9301      	str	r3, [sp, #4]
 800c194:	69fb      	ldr	r3, [r7, #28]
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c19c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c19e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1a0:	f001 fa5d 	bl	800d65e <VL53L1_preset_mode_standard_ranging_short_range>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c1aa:	e0a3      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	9301      	str	r3, [sp, #4]
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	9300      	str	r3, [sp, #0]
 800c1b4:	6a3b      	ldr	r3, [r7, #32]
 800c1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1bc:	f001 fa90 	bl	800d6e0 <VL53L1_preset_mode_standard_ranging_long_range>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c1c6:	e095      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	9301      	str	r3, [sp, #4]
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	6a3b      	ldr	r3, [r7, #32]
 800c1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1d8:	f001 fac3 	bl	800d762 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c1e2:	e087      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	9301      	str	r3, [sp, #4]
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	6a3b      	ldr	r3, [r7, #32]
 800c1ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1f4:	f001 fada 	bl	800d7ac <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c1fe:	e079      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	9301      	str	r3, [sp, #4]
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	6a3b      	ldr	r3, [r7, #32]
 800c20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c20c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c20e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c210:	f001 faf1 	bl	800d7f6 <VL53L1_preset_mode_timed_ranging>
 800c214:	4603      	mov	r3, r0
 800c216:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c21a:	e06b      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	9301      	str	r3, [sp, #4]
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	6a3b      	ldr	r3, [r7, #32]
 800c226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c22a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c22c:	f001 fb1d 	bl	800d86a <VL53L1_preset_mode_timed_ranging_short_range>
 800c230:	4603      	mov	r3, r0
 800c232:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c236:	e05d      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	9301      	str	r3, [sp, #4]
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c246:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c248:	f001 fb49 	bl	800d8de <VL53L1_preset_mode_timed_ranging_long_range>
 800c24c:	4603      	mov	r3, r0
 800c24e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c252:	e04f      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	9301      	str	r3, [sp, #4]
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	6a3b      	ldr	r3, [r7, #32]
 800c25e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c264:	f001 fc1d 	bl	800daa2 <VL53L1_preset_mode_olt>
 800c268:	4603      	mov	r3, r0
 800c26a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c26e:	e041      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	9301      	str	r3, [sp, #4]
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	6a3b      	ldr	r3, [r7, #32]
 800c27a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c27c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c27e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c280:	f001 fbd9 	bl	800da36 <VL53L1_preset_mode_singleshot_ranging>
 800c284:	4603      	mov	r3, r0
 800c286:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c28a:	e033      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	9302      	str	r3, [sp, #8]
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	6a3b      	ldr	r3, [r7, #32]
 800c29a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c29c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c29e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2a0:	f001 fb7d 	bl	800d99e <VL53L1_preset_mode_low_power_auto_short_ranging>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c2aa:	e023      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	9302      	str	r3, [sp, #8]
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	6a3b      	ldr	r3, [r7, #32]
 800c2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2c0:	f001 fb47 	bl	800d952 <VL53L1_preset_mode_low_power_auto_ranging>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c2ca:	e013      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	9302      	str	r3, [sp, #8]
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	9301      	str	r3, [sp, #4]
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	6a3b      	ldr	r3, [r7, #32]
 800c2da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2e0:	f001 fb83 	bl	800d9ea <VL53L1_preset_mode_low_power_auto_long_ranging>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c2ea:	e003      	b.n	800c2f4 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c2ec:	23fc      	movs	r3, #252	; 0xfc
 800c2ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800c2f2:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800c2f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d105      	bne.n	800c308 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800c2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fe:	893a      	ldrh	r2, [r7, #8]
 800c300:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	893a      	ldrh	r2, [r7, #8]
 800c306:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800c308:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d108      	bne.n	800c322 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800c310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c312:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f7ff fca0 	bl	800bc5c <VL53L1_set_timeouts_us>
 800c31c:	4603      	mov	r3, r0
 800c31e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800c322:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c326:	2b00      	cmp	r3, #0
 800c328:	d106      	bne.n	800c338 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800c32a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f7ff fc46 	bl	800bbbe <VL53L1_set_inter_measurement_period_ms>
 800c332:	4603      	mov	r3, r0
 800c334:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800c338:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3738      	adds	r7, #56	; 0x38
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c34e:	2300      	movs	r3, #0
 800c350:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c360:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c364:	4618      	mov	r0, r3
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	460b      	mov	r3, r1
 800c37a:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c37c:	2300      	movs	r3, #0
 800c37e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	887a      	ldrh	r2, [r7, #2]
 800c388:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800c38c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c390:	4618      	mov	r0, r3
 800c392:	3714      	adds	r7, #20
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3714      	adds	r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	887a      	ldrh	r2, [r7, #2]
 800c3e0:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800c3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3714      	adds	r7, #20
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c400:	2300      	movs	r3, #0
 800c402:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c40e:	f003 0303 	and.w	r3, r3, #3
 800c412:	b2da      	uxtb	r2, r3
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	4413      	add	r3, r2
 800c41c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800c424:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c428:	4618      	mov	r0, r3
 800c42a:	3714      	adds	r7, #20
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b0d0      	sub	sp, #320	; 0x140
 800c438:	af00      	add	r7, sp, #0
 800c43a:	1d3b      	adds	r3, r7, #4
 800c43c:	6018      	str	r0, [r3, #0]
 800c43e:	4608      	mov	r0, r1
 800c440:	4611      	mov	r1, r2
 800c442:	1cfb      	adds	r3, r7, #3
 800c444:	4602      	mov	r2, r0
 800c446:	701a      	strb	r2, [r3, #0]
 800c448:	1cbb      	adds	r3, r7, #2
 800c44a:	460a      	mov	r2, r1
 800c44c:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c44e:	2300      	movs	r3, #0
 800c450:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c454:	1d3b      	adds	r3, r7, #4
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800c45c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c460:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c464:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800c468:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c46c:	3342      	adds	r3, #66	; 0x42
 800c46e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800c472:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c476:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c47a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800c47e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c482:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c486:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800c48a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c48e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800c492:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800c496:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c49a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c49e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800c4a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4a6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c4aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800c4ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4b2:	332c      	adds	r3, #44	; 0x2c
 800c4b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800c4b8:	f107 030c 	add.w	r3, r7, #12
 800c4bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800c4d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4dc:	1cfa      	adds	r2, r7, #3
 800c4de:	7812      	ldrb	r2, [r2, #0]
 800c4e0:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800c4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4e6:	791b      	ldrb	r3, [r3, #4]
 800c4e8:	b25b      	sxtb	r3, r3
 800c4ea:	f003 030f 	and.w	r3, r3, #15
 800c4ee:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800c4f0:	1cfb      	adds	r3, r7, #3
 800c4f2:	f993 3000 	ldrsb.w	r3, [r3]
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	b25b      	sxtb	r3, r3
 800c4fa:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800c4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c500:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800c502:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c506:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800c50a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c50e:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800c512:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c516:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800c51a:	2bff      	cmp	r3, #255	; 0xff
 800c51c:	d104      	bne.n	800c528 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800c51e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c522:	2200      	movs	r2, #0
 800c524:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c528:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c52c:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c530:	2b01      	cmp	r3, #1
 800c532:	d133      	bne.n	800c59c <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800c534:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c538:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d12d      	bne.n	800c59c <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800c540:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c544:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800c548:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c54c:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800c550:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c554:	2220      	movs	r2, #32
 800c556:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800c55a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c55e:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800c562:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10c      	bne.n	800c584 <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800c56a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c56e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800c572:	b29b      	uxth	r3, r3
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	b29b      	uxth	r3, r3
 800c578:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800c57a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c57e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800c582:	e004      	b.n	800c58e <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800c584:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c588:	2200      	movs	r2, #0
 800c58a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800c58e:	1cbb      	adds	r3, r7, #2
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	2b04      	cmp	r3, #4
 800c594:	d802      	bhi.n	800c59c <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800c596:	1cbb      	adds	r3, r7, #2
 800c598:	2205      	movs	r2, #5
 800c59a:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c59c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5a0:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d110      	bne.n	800c5ca <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800c5a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5ac:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d10a      	bne.n	800c5ca <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800c5b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5b8:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800c5bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5c0:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800c5c4:	1cbb      	adds	r3, r7, #2
 800c5c6:	2206      	movs	r2, #6
 800c5c8:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800c5ca:	1cbb      	adds	r3, r7, #2
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	2b05      	cmp	r3, #5
 800c5d2:	d827      	bhi.n	800c624 <VL53L1_init_and_start_range+0x1f0>
 800c5d4:	a201      	add	r2, pc, #4	; (adr r2, 800c5dc <VL53L1_init_and_start_range+0x1a8>)
 800c5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5da:	bf00      	nop
 800c5dc:	0800c61d 	.word	0x0800c61d
 800c5e0:	0800c615 	.word	0x0800c615
 800c5e4:	0800c60d 	.word	0x0800c60d
 800c5e8:	0800c605 	.word	0x0800c605
 800c5ec:	0800c5fd 	.word	0x0800c5fd
 800c5f0:	0800c5f5 	.word	0x0800c5f5
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c5fa:	e017      	b.n	800c62c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800c5fc:	230d      	movs	r3, #13
 800c5fe:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c602:	e013      	b.n	800c62c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800c604:	2324      	movs	r3, #36	; 0x24
 800c606:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c60a:	e00f      	b.n	800c62c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800c60c:	2344      	movs	r3, #68	; 0x44
 800c60e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c612:	e00b      	b.n	800c62c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800c614:	235a      	movs	r3, #90	; 0x5a
 800c616:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c61a:	e007      	b.n	800c62c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800c61c:	2371      	movs	r3, #113	; 0x71
 800c61e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c622:	e003      	b.n	800c62c <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800c624:	2383      	movs	r3, #131	; 0x83
 800c626:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c62a:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800c62c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c630:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800c634:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800c638:	f107 030c 	add.w	r3, r7, #12
 800c63c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c640:	2300      	movs	r3, #0
 800c642:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c646:	e00b      	b.n	800c660 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800c648:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c64c:	1c5a      	adds	r2, r3, #1
 800c64e:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800c652:	2200      	movs	r2, #0
 800c654:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c656:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800c65a:	3301      	adds	r3, #1
 800c65c:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c660:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800c664:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c668:	429a      	cmp	r2, r3
 800c66a:	d3ed      	bcc.n	800c648 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800c66c:	1cbb      	adds	r3, r7, #2
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b05      	cmp	r3, #5
 800c672:	d917      	bls.n	800c6a4 <VL53L1_init_and_start_range+0x270>
 800c674:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d113      	bne.n	800c6a4 <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c67c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c680:	f1c3 0301 	rsb	r3, r3, #1
 800c684:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c688:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800c68c:	f107 020c 	add.w	r2, r7, #12
 800c690:	4413      	add	r3, r2
 800c692:	461a      	mov	r2, r3
 800c694:	210b      	movs	r1, #11
 800c696:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800c69a:	f002 f8a7 	bl	800e7ec <VL53L1_i2c_encode_static_nvm_managed>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800c6a4:	1cbb      	adds	r3, r7, #2
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2b04      	cmp	r3, #4
 800c6aa:	d917      	bls.n	800c6dc <VL53L1_init_and_start_range+0x2a8>
 800c6ac:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d113      	bne.n	800c6dc <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c6b4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c6b8:	f1c3 030d 	rsb	r3, r3, #13
 800c6bc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c6c0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800c6c4:	f107 020c 	add.w	r2, r7, #12
 800c6c8:	4413      	add	r3, r2
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	2117      	movs	r1, #23
 800c6ce:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c6d2:	f002 f967 	bl	800e9a4 <VL53L1_i2c_encode_customer_nvm_managed>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800c6dc:	1cbb      	adds	r3, r7, #2
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	2b03      	cmp	r3, #3
 800c6e2:	d917      	bls.n	800c714 <VL53L1_init_and_start_range+0x2e0>
 800c6e4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d113      	bne.n	800c714 <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c6ec:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c6f0:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800c6f4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c6f8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800c6fc:	f107 020c 	add.w	r2, r7, #12
 800c700:	4413      	add	r3, r2
 800c702:	461a      	mov	r2, r3
 800c704:	2120      	movs	r1, #32
 800c706:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c70a:	f002 fa89 	bl	800ec20 <VL53L1_i2c_encode_static_config>
 800c70e:	4603      	mov	r3, r0
 800c710:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800c714:	1cbb      	adds	r3, r7, #2
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d917      	bls.n	800c74c <VL53L1_init_and_start_range+0x318>
 800c71c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c720:	2b00      	cmp	r3, #0
 800c722:	d113      	bne.n	800c74c <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c724:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c728:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800c72c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c730:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800c734:	f107 020c 	add.w	r2, r7, #12
 800c738:	4413      	add	r3, r2
 800c73a:	461a      	mov	r2, r3
 800c73c:	2116      	movs	r1, #22
 800c73e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800c742:	f002 fb50 	bl	800ede6 <VL53L1_i2c_encode_general_config>
 800c746:	4603      	mov	r3, r0
 800c748:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800c74c:	1cbb      	adds	r3, r7, #2
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d917      	bls.n	800c784 <VL53L1_init_and_start_range+0x350>
 800c754:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d113      	bne.n	800c784 <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c75c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c760:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800c764:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c768:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800c76c:	f107 020c 	add.w	r2, r7, #12
 800c770:	4413      	add	r3, r2
 800c772:	461a      	mov	r2, r3
 800c774:	2117      	movs	r1, #23
 800c776:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c77a:	f002 fbb8 	bl	800eeee <VL53L1_i2c_encode_timing_config>
 800c77e:	4603      	mov	r3, r0
 800c780:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800c784:	1cbb      	adds	r3, r7, #2
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d036      	beq.n	800c7fa <VL53L1_init_and_start_range+0x3c6>
 800c78c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c790:	2b00      	cmp	r3, #0
 800c792:	d132      	bne.n	800c7fa <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c794:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c798:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800c79c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800c7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7a4:	791b      	ldrb	r3, [r3, #4]
 800c7a6:	f003 0320 	and.w	r3, r3, #32
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d017      	beq.n	800c7de <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800c7ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c7b2:	789b      	ldrb	r3, [r3, #2]
 800c7b4:	f043 0301 	orr.w	r3, r3, #1
 800c7b8:	b2da      	uxtb	r2, r3
 800c7ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c7be:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800c7c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c7c4:	789b      	ldrb	r3, [r3, #2]
 800c7c6:	f043 0301 	orr.w	r3, r3, #1
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c7d0:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800c7d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c7d6:	789a      	ldrb	r2, [r3, #2]
 800c7d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c7dc:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c7de:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800c7e2:	f107 020c 	add.w	r2, r7, #12
 800c7e6:	4413      	add	r3, r2
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	2112      	movs	r1, #18
 800c7ec:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800c7f0:	f002 fbff 	bl	800eff2 <VL53L1_i2c_encode_dynamic_config>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800c7fa:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d113      	bne.n	800c82a <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800c802:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c806:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800c80a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c80e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800c812:	f107 020c 	add.w	r2, r7, #12
 800c816:	4413      	add	r3, r2
 800c818:	461a      	mov	r2, r3
 800c81a:	2105      	movs	r1, #5
 800c81c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800c820:	f002 fc6c 	bl	800f0fc <VL53L1_i2c_encode_system_control>
 800c824:	4603      	mov	r3, r0
 800c826:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800c82a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10c      	bne.n	800c84c <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800c832:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c836:	f107 020c 	add.w	r2, r7, #12
 800c83a:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800c83e:	1d38      	adds	r0, r7, #4
 800c840:	6800      	ldr	r0, [r0, #0]
 800c842:	f003 f94b 	bl	800fadc <VL53L1_WriteMulti>
 800c846:	4603      	mov	r3, r0
 800c848:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800c84c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c850:	2b00      	cmp	r3, #0
 800c852:	d106      	bne.n	800c862 <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800c854:	1d3b      	adds	r3, r7, #4
 800c856:	6818      	ldr	r0, [r3, #0]
 800c858:	f001 f98a 	bl	800db70 <VL53L1_update_ll_driver_rd_state>
 800c85c:	4603      	mov	r3, r0
 800c85e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800c862:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c866:	2b00      	cmp	r3, #0
 800c868:	d106      	bne.n	800c878 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800c86a:	1d3b      	adds	r3, r7, #4
 800c86c:	6818      	ldr	r0, [r3, #0]
 800c86e:	f001 fa52 	bl	800dd16 <VL53L1_update_ll_driver_cfg_state>
 800c872:	4603      	mov	r3, r0
 800c874:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800c878:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop

0800c888 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b0c8      	sub	sp, #288	; 0x120
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	1d3b      	adds	r3, r7, #4
 800c890:	6018      	str	r0, [r3, #0]
 800c892:	460a      	mov	r2, r1
 800c894:	1cfb      	adds	r3, r7, #3
 800c896:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c898:	2300      	movs	r3, #0
 800c89a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c89e:	1d3b      	adds	r3, r7, #4
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800c8a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c8aa:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800c8ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800c8b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c8b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c8ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800c8be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c8c2:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800c8c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800c8ca:	2388      	movs	r3, #136	; 0x88
 800c8cc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800c8dc:	1cfb      	adds	r3, r7, #3
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d008      	beq.n	800c8f6 <VL53L1_get_measurement_results+0x6e>
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d10d      	bne.n	800c904 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800c8e8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c8ec:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800c8f0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800c8f4:	e00a      	b.n	800c90c <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800c8f6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c8fa:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800c8fe:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800c902:	e003      	b.n	800c90c <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800c904:	232c      	movs	r3, #44	; 0x2c
 800c906:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800c90a:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c90c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10c      	bne.n	800c92e <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800c914:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800c918:	f107 0208 	add.w	r2, r7, #8
 800c91c:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800c920:	1d38      	adds	r0, r7, #4
 800c922:	6800      	ldr	r0, [r0, #0]
 800c924:	f003 f910 	bl	800fb48 <VL53L1_ReadMulti>
 800c928:	4603      	mov	r3, r0
 800c92a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800c92e:	1cfb      	adds	r3, r7, #3
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d917      	bls.n	800c966 <VL53L1_get_measurement_results+0xde>
 800c936:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d113      	bne.n	800c966 <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c93e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c942:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800c946:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c94a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800c94e:	f107 0208 	add.w	r2, r7, #8
 800c952:	4413      	add	r3, r2
 800c954:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800c958:	4619      	mov	r1, r3
 800c95a:	2038      	movs	r0, #56	; 0x38
 800c95c:	f002 fd60 	bl	800f420 <VL53L1_i2c_decode_debug_results>
 800c960:	4603      	mov	r3, r0
 800c962:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800c966:	1cfb      	adds	r3, r7, #3
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d017      	beq.n	800c99e <VL53L1_get_measurement_results+0x116>
 800c96e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c972:	2b00      	cmp	r3, #0
 800c974:	d113      	bne.n	800c99e <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c976:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c97a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800c97e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c982:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800c986:	f107 0208 	add.w	r2, r7, #8
 800c98a:	4413      	add	r3, r2
 800c98c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800c990:	4619      	mov	r1, r3
 800c992:	2021      	movs	r0, #33	; 0x21
 800c994:	f002 fce3 	bl	800f35e <VL53L1_i2c_decode_core_results>
 800c998:	4603      	mov	r3, r0
 800c99a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800c99e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d110      	bne.n	800c9c8 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c9ac:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800c9b0:	f107 0208 	add.w	r2, r7, #8
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	202c      	movs	r0, #44	; 0x2c
 800c9be:	f002 fbd8 	bl	800f172 <VL53L1_i2c_decode_system_results>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c9c8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b088      	sub	sp, #32
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	60f8      	str	r0, [r7, #12]
 800c9de:	460b      	mov	r3, r1
 800c9e0:	607a      	str	r2, [r7, #4]
 800c9e2:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800c9f2:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c9f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d106      	bne.n	800ca0e <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800ca00:	7afb      	ldrb	r3, [r7, #11]
 800ca02:	4619      	mov	r1, r3
 800ca04:	68f8      	ldr	r0, [r7, #12]
 800ca06:	f7ff ff3f 	bl	800c888 <VL53L1_get_measurement_results>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800ca0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d10c      	bne.n	800ca30 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f000 f85e 	bl	800caec <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d11f      	bne.n	800ca7a <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800ca3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d10e      	bne.n	800ca60 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d109      	bne.n	800ca60 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f001 fe32 	bl	800e6b6 <VL53L1_low_power_auto_setup_manual_calibration>
 800ca52:	4603      	mov	r3, r0
 800ca54:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800ca5e:	e00c      	b.n	800ca7a <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800ca60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d108      	bne.n	800ca7a <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d103      	bne.n	800ca7a <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	2202      	movs	r2, #2
 800ca76:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800ca8e:	2284      	movs	r2, #132	; 0x84
 800ca90:	6939      	ldr	r1, [r7, #16]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f003 fbd8 	bl	8010248 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800ca98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d104      	bne.n	800caaa <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f001 f8ed 	bl	800dc80 <VL53L1_check_ll_driver_rd_state>
 800caa6:	4603      	mov	r3, r0
 800caa8:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800caaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3720      	adds	r7, #32
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b084      	sub	sp, #16
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
 800cabe:	460b      	mov	r3, r1
 800cac0:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cac2:	2300      	movs	r3, #0
 800cac4:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800cac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d107      	bne.n	800cade <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800cace:	78fb      	ldrb	r3, [r7, #3]
 800cad0:	2203      	movs	r2, #3
 800cad2:	4619      	mov	r1, r3
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f7ff fcad 	bl	800c434 <VL53L1_init_and_start_range>
 800cada:	4603      	mov	r3, r0
 800cadc:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800cade:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
	...

0800caec <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800caec:	b480      	push	{r7}
 800caee:	b089      	sub	sp, #36	; 0x24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
 800caf8:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800cafa:	2300      	movs	r3, #0
 800cafc:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800cafe:	2300      	movs	r3, #0
 800cb00:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	78da      	ldrb	r2, [r3, #3]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	3304      	adds	r3, #4
 800cb12:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800cb14:	2300      	movs	r3, #0
 800cb16:	77fb      	strb	r3, [r7, #31]
 800cb18:	e0d0      	b.n	800ccbc <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	7ffa      	ldrb	r2, [r7, #31]
 800cb1e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	2200      	movs	r2, #0
 800cb24:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	78db      	ldrb	r3, [r3, #3]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d10a      	bne.n	800cb44 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	785b      	ldrb	r3, [r3, #1]
 800cb32:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800cb36:	2b09      	cmp	r3, #9
 800cb38:	d104      	bne.n	800cb44 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	2213      	movs	r2, #19
 800cb3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb42:	e007      	b.n	800cb54 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	785b      	ldrb	r3, [r3, #1]
 800cb48:	f003 031f 	and.w	r3, r3, #31
 800cb4c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800cb54:	7ffb      	ldrb	r3, [r7, #31]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d002      	beq.n	800cb60 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d05d      	beq.n	800cc1a <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800cb5e:	e0a7      	b.n	800ccb0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	789b      	ldrb	r3, [r3, #2]
 800cb64:	2b07      	cmp	r3, #7
 800cb66:	d104      	bne.n	800cb72 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	821a      	strh	r2, [r3, #16]
 800cb70:	e00c      	b.n	800cb8c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	789b      	ldrb	r3, [r3, #2]
 800cb76:	2b08      	cmp	r3, #8
 800cb78:	d104      	bne.n	800cb84 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	821a      	strh	r2, [r3, #16]
 800cb82:	e003      	b.n	800cb8c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800cba0:	69bb      	ldr	r3, [r7, #24]
 800cba2:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	895b      	ldrh	r3, [r3, #10]
 800cba8:	015b      	lsls	r3, r3, #5
 800cbaa:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbb2:	d302      	bcc.n	800cbba <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800cbb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbb8:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	b29a      	uxth	r2, r3
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800cbce:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	fb02 f303 	mul.w	r3, r2, r3
 800cbd8:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbe0:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	da01      	bge.n	800cbec <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800cbe8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800cbec:	12db      	asrs	r3, r3, #11
 800cbee:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	b21a      	sxth	r2, r3
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800cc04:	69bb      	ldr	r3, [r7, #24]
 800cc06:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	621a      	str	r2, [r3, #32]

			break;
 800cc18:	e04a      	b.n	800ccb0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc30:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	8bdb      	ldrh	r3, [r3, #30]
 800cc3e:	015b      	lsls	r3, r3, #5
 800cc40:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc48:	d302      	bcc.n	800cc50 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800cc4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc4e:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800cc64:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	fb02 f303 	mul.w	r3, r2, r3
 800cc6e:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc76:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	da01      	bge.n	800cc82 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800cc7e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800cc82:	12db      	asrs	r3, r3, #11
 800cc84:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	b21a      	sxth	r2, r3
 800cc8a:	69bb      	ldr	r3, [r7, #24]
 800cc8c:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	621a      	str	r2, [r3, #32]

			break;
 800ccae:	bf00      	nop
		}

		pdata++;
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	3340      	adds	r3, #64	; 0x40
 800ccb4:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800ccb6:	7ffb      	ldrb	r3, [r7, #31]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	77fb      	strb	r3, [r7, #31]
 800ccbc:	7ffb      	ldrb	r3, [r7, #31]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	f67f af2b 	bls.w	800cb1a <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	785b      	ldrb	r3, [r3, #1]
 800ccce:	f003 031f 	and.w	r3, r3, #31
 800ccd2:	2b11      	cmp	r3, #17
 800ccd4:	bf8c      	ite	hi
 800ccd6:	2201      	movhi	r2, #1
 800ccd8:	2200      	movls	r2, #0
 800ccda:	b2d2      	uxtb	r2, r2
 800ccdc:	2a00      	cmp	r2, #0
 800ccde:	d116      	bne.n	800cd0e <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800cce0:	2201      	movs	r2, #1
 800cce2:	409a      	lsls	r2, r3
 800cce4:	4b0d      	ldr	r3, [pc, #52]	; (800cd1c <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800cce6:	4013      	ands	r3, r2
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	bf14      	ite	ne
 800ccec:	2301      	movne	r3, #1
 800ccee:	2300      	moveq	r3, #0
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00b      	beq.n	800cd0e <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	785b      	ldrb	r3, [r3, #1]
 800ccfa:	f003 031f 	and.w	r3, r3, #31
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800cd0c:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800cd0e:	bf00      	nop
 800cd10:	3724      	adds	r7, #36	; 0x24
 800cd12:	46bd      	mov	sp, r7
 800cd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd18:	4770      	bx	lr
 800cd1a:	bf00      	nop
 800cd1c:	0002200e 	.word	0x0002200e

0800cd20 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	607a      	str	r2, [r7, #4]
 800cd2c:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800cd36:	897b      	ldrh	r3, [r7, #10]
 800cd38:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800cd3c:	2b38      	cmp	r3, #56	; 0x38
 800cd3e:	f200 8204 	bhi.w	800d14a <VL53L1_get_tuning_parm+0x42a>
 800cd42:	a201      	add	r2, pc, #4	; (adr r2, 800cd48 <VL53L1_get_tuning_parm+0x28>)
 800cd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd48:	0800ce2d 	.word	0x0800ce2d
 800cd4c:	0800ce3b 	.word	0x0800ce3b
 800cd50:	0800ce49 	.word	0x0800ce49
 800cd54:	0800ce57 	.word	0x0800ce57
 800cd58:	0800ce65 	.word	0x0800ce65
 800cd5c:	0800ce73 	.word	0x0800ce73
 800cd60:	0800ce81 	.word	0x0800ce81
 800cd64:	0800ce8f 	.word	0x0800ce8f
 800cd68:	0800ce9d 	.word	0x0800ce9d
 800cd6c:	0800ceab 	.word	0x0800ceab
 800cd70:	0800ceb9 	.word	0x0800ceb9
 800cd74:	0800cec7 	.word	0x0800cec7
 800cd78:	0800ced5 	.word	0x0800ced5
 800cd7c:	0800cee3 	.word	0x0800cee3
 800cd80:	0800cef1 	.word	0x0800cef1
 800cd84:	0800ceff 	.word	0x0800ceff
 800cd88:	0800cf0d 	.word	0x0800cf0d
 800cd8c:	0800cf1b 	.word	0x0800cf1b
 800cd90:	0800cf29 	.word	0x0800cf29
 800cd94:	0800cf37 	.word	0x0800cf37
 800cd98:	0800cf45 	.word	0x0800cf45
 800cd9c:	0800cf53 	.word	0x0800cf53
 800cda0:	0800cf61 	.word	0x0800cf61
 800cda4:	0800cf6f 	.word	0x0800cf6f
 800cda8:	0800cf7d 	.word	0x0800cf7d
 800cdac:	0800cf8b 	.word	0x0800cf8b
 800cdb0:	0800cf99 	.word	0x0800cf99
 800cdb4:	0800cfa7 	.word	0x0800cfa7
 800cdb8:	0800cfb5 	.word	0x0800cfb5
 800cdbc:	0800cfc3 	.word	0x0800cfc3
 800cdc0:	0800cfd1 	.word	0x0800cfd1
 800cdc4:	0800cfdf 	.word	0x0800cfdf
 800cdc8:	0800cfed 	.word	0x0800cfed
 800cdcc:	0800cffb 	.word	0x0800cffb
 800cdd0:	0800d009 	.word	0x0800d009
 800cdd4:	0800d017 	.word	0x0800d017
 800cdd8:	0800d025 	.word	0x0800d025
 800cddc:	0800d033 	.word	0x0800d033
 800cde0:	0800d041 	.word	0x0800d041
 800cde4:	0800d04f 	.word	0x0800d04f
 800cde8:	0800d05d 	.word	0x0800d05d
 800cdec:	0800d06b 	.word	0x0800d06b
 800cdf0:	0800d079 	.word	0x0800d079
 800cdf4:	0800d087 	.word	0x0800d087
 800cdf8:	0800d095 	.word	0x0800d095
 800cdfc:	0800d0a3 	.word	0x0800d0a3
 800ce00:	0800d0b1 	.word	0x0800d0b1
 800ce04:	0800d0bf 	.word	0x0800d0bf
 800ce08:	0800d0cd 	.word	0x0800d0cd
 800ce0c:	0800d0db 	.word	0x0800d0db
 800ce10:	0800d0e9 	.word	0x0800d0e9
 800ce14:	0800d0f7 	.word	0x0800d0f7
 800ce18:	0800d105 	.word	0x0800d105
 800ce1c:	0800d113 	.word	0x0800d113
 800ce20:	0800d121 	.word	0x0800d121
 800ce24:	0800d12f 	.word	0x0800d12f
 800ce28:	0800d13d 	.word	0x0800d13d

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800ce32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	601a      	str	r2, [r3, #0]
	break;
 800ce38:	e18e      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800ce40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	601a      	str	r2, [r3, #0]
	break;
 800ce46:	e187      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800ce4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	601a      	str	r2, [r3, #0]
	break;
 800ce54:	e180      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800ce5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	601a      	str	r2, [r3, #0]
	break;
 800ce62:	e179      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ce6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	601a      	str	r2, [r3, #0]
	break;
 800ce70:	e172      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800ce78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	601a      	str	r2, [r3, #0]
	break;
 800ce7e:	e16b      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ce86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	601a      	str	r2, [r3, #0]
	break;
 800ce8c:	e164      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800ce94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	601a      	str	r2, [r3, #0]
	break;
 800ce9a:	e15d      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800cea2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	601a      	str	r2, [r3, #0]
	break;
 800cea8:	e156      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800ceb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	601a      	str	r2, [r3, #0]
	break;
 800ceb6:	e14f      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800cebe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	601a      	str	r2, [r3, #0]
	break;
 800cec4:	e148      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800cecc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	601a      	str	r2, [r3, #0]
	break;
 800ced2:	e141      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800ceda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	601a      	str	r2, [r3, #0]
	break;
 800cee0:	e13a      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800cee8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	601a      	str	r2, [r3, #0]
	break;
 800ceee:	e133      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800cef6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	601a      	str	r2, [r3, #0]
	break;
 800cefc:	e12c      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800cf04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	601a      	str	r2, [r3, #0]
	break;
 800cf0a:	e125      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800cf12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	601a      	str	r2, [r3, #0]
	break;
 800cf18:	e11e      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800cf20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	601a      	str	r2, [r3, #0]
	break;
 800cf26:	e117      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800cf2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	601a      	str	r2, [r3, #0]
	break;
 800cf34:	e110      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800cf3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	601a      	str	r2, [r3, #0]
	break;
 800cf42:	e109      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cf4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	601a      	str	r2, [r3, #0]
	break;
 800cf50:	e102      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800cf58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	601a      	str	r2, [r3, #0]
	break;
 800cf5e:	e0fb      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800cf66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	601a      	str	r2, [r3, #0]
	break;
 800cf6c:	e0f4      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800cf74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	601a      	str	r2, [r3, #0]
	break;
 800cf7a:	e0ed      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800cf82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	601a      	str	r2, [r3, #0]
	break;
 800cf88:	e0e6      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800cf90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	601a      	str	r2, [r3, #0]
	break;
 800cf96:	e0df      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800cf9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	601a      	str	r2, [r3, #0]
	break;
 800cfa4:	e0d8      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800cfac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	601a      	str	r2, [r3, #0]
	break;
 800cfb2:	e0d1      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800cfba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	601a      	str	r2, [r3, #0]
	break;
 800cfc0:	e0ca      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800cfc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	601a      	str	r2, [r3, #0]
	break;
 800cfce:	e0c3      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800cfd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	601a      	str	r2, [r3, #0]
	break;
 800cfdc:	e0bc      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800cfe4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	601a      	str	r2, [r3, #0]
	break;
 800cfea:	e0b5      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cff2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	601a      	str	r2, [r3, #0]
	break;
 800cff8:	e0ae      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800d000:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	601a      	str	r2, [r3, #0]
	break;
 800d006:	e0a7      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800d00e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	601a      	str	r2, [r3, #0]
	break;
 800d014:	e0a0      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800d01c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	601a      	str	r2, [r3, #0]
	break;
 800d022:	e099      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800d02a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	601a      	str	r2, [r3, #0]
	break;
 800d030:	e092      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800d038:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	601a      	str	r2, [r3, #0]
	break;
 800d03e:	e08b      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d046:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	601a      	str	r2, [r3, #0]
	break;
 800d04c:	e084      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d054:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	601a      	str	r2, [r3, #0]
	break;
 800d05a:	e07d      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d062:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	601a      	str	r2, [r3, #0]
	break;
 800d068:	e076      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800d070:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	601a      	str	r2, [r3, #0]
	break;
 800d076:	e06f      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800d07e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	601a      	str	r2, [r3, #0]
	break;
 800d084:	e068      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800d08c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	601a      	str	r2, [r3, #0]
	break;
 800d092:	e061      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800d09a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	601a      	str	r2, [r3, #0]
	break;
 800d0a0:	e05a      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800d0a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	601a      	str	r2, [r3, #0]
	break;
 800d0ae:	e053      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800d0b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	601a      	str	r2, [r3, #0]
	break;
 800d0bc:	e04c      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800d0c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	601a      	str	r2, [r3, #0]
	break;
 800d0ca:	e045      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d0d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	601a      	str	r2, [r3, #0]
	break;
 800d0d8:	e03e      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d0e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	601a      	str	r2, [r3, #0]
	break;
 800d0e6:	e037      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d0ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	601a      	str	r2, [r3, #0]
	break;
 800d0f4:	e030      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d0fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	601a      	str	r2, [r3, #0]
	break;
 800d102:	e029      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d10a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	601a      	str	r2, [r3, #0]
	break;
 800d110:	e022      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d118:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	601a      	str	r2, [r3, #0]
	break;
 800d11e:	e01b      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800d126:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	601a      	str	r2, [r3, #0]
	break;
 800d12c:	e014      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d134:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	601a      	str	r2, [r3, #0]
	break;
 800d13a:	e00d      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d142:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	601a      	str	r2, [r3, #0]
	break;
 800d148:	e006      	b.n	800d158 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d150:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800d152:	23fc      	movs	r3, #252	; 0xfc
 800d154:	75fb      	strb	r3, [r7, #23]
	break;
 800d156:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800d158:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	371c      	adds	r7, #28
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d170:	2300      	movs	r3, #0
 800d172:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2208      	movs	r2, #8
 800d178:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	220b      	movs	r2, #11
 800d17e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d186:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d18e:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800d196:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800d19e:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d1a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3714      	adds	r7, #20
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2212      	movs	r2, #18
 800d1c6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	220f      	movs	r2, #15
 800d1cc:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2202      	movs	r2, #2
 800d1d2:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800d1da:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	220c      	movs	r2, #12
 800d1e0:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d1e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3714      	adds	r7, #20
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr

0800d1f2 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b084      	sub	sp, #16
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	895b      	ldrh	r3, [r3, #10]
 800d204:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	895b      	ldrh	r3, [r3, #10]
 800d222:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	2200      	movs	r2, #0
 800d240:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	2240      	movs	r2, #64	; 0x40
 800d246:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10d      	bne.n	800d26c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d108      	bne.n	800d26c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d103      	bne.n	800d26c <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	2200      	movs	r2, #0
 800d268:	741a      	strb	r2, [r3, #16]
 800d26a:	e002      	b.n	800d272 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	2201      	movs	r2, #1
 800d270:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800d272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d114      	bne.n	800d2a4 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d110      	bne.n	800d2a4 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	6818      	ldr	r0, [r3, #0]
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	7d1b      	ldrb	r3, [r3, #20]
 800d296:	f000 ffc9 	bl	800e22c <VL53L1_calc_range_ignore_threshold>
 800d29a:	4603      	mov	r3, r0
 800d29c:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	82da      	strh	r2, [r3, #22]
 800d2a2:	e002      	b.n	800d2aa <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d2aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800d2b6:	b480      	push	{r7}
 800d2b8:	b085      	sub	sp, #20
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d2c8:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d2d0:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d2d8:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d2e0:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2208      	movs	r2, #8
 800d2e6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2228      	movs	r2, #40	; 0x28
 800d2ec:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2209      	movs	r2, #9
 800d2f2:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d2f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3714      	adds	r7, #20
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d30c:	2300      	movs	r3, #0
 800d30e:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f248 0203 	movw	r2, #32771	; 0x8003
 800d316:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f248 0201 	movw	r2, #32769	; 0x8001
 800d31e:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f248 0241 	movw	r2, #32833	; 0x8041
 800d326:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	220e      	movs	r2, #14
 800d32c:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	220a      	movs	r2, #10
 800d332:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2206      	movs	r2, #6
 800d338:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	220e      	movs	r2, #14
 800d33e:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	220a      	movs	r2, #10
 800d344:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2206      	movs	r2, #6
 800d34a:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2202      	movs	r2, #2
 800d350:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2221      	movs	r2, #33	; 0x21
 800d356:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d36a:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d372:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d37a:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	22c0      	movs	r2, #192	; 0xc0
 800d380:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	22c0      	movs	r2, #192	; 0xc0
 800d386:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	22c0      	movs	r2, #192	; 0xc0
 800d38c:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2208      	movs	r2, #8
 800d392:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2210      	movs	r2, #16
 800d398:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2201      	movs	r2, #1
 800d39e:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2202      	movs	r2, #2
 800d3a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d3c8:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d3d0:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f248 0230 	movw	r2, #32816	; 0x8030
 800d3d8:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3e0:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d3e8:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d3f0:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f24f 6218 	movw	r2, #63000	; 0xf618
 800d3f8:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d400:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800d408:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d410:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800d412:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3714      	adds	r7, #20
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr

0800d422 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d422:	b480      	push	{r7}
 800d424:	b087      	sub	sp, #28
 800d426:	af00      	add	r7, sp, #0
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	607a      	str	r2, [r7, #4]
 800d42e:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d430:	2300      	movs	r3, #0
 800d432:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d43a:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2200      	movs	r2, #0
 800d440:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2200      	movs	r2, #0
 800d44c:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2200      	movs	r2, #0
 800d452:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2200      	movs	r2, #0
 800d458:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2200      	movs	r2, #0
 800d45e:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2200      	movs	r2, #0
 800d464:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2200      	movs	r2, #0
 800d46a:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2200      	movs	r2, #0
 800d470:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2200      	movs	r2, #0
 800d476:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2211      	movs	r2, #17
 800d47c:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2202      	movs	r2, #2
 800d482:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2200      	movs	r2, #0
 800d488:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2202      	movs	r2, #2
 800d48e:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2208      	movs	r2, #8
 800d494:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2200      	movs	r2, #0
 800d49a:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800d49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49e:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a6:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800d4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ae:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	22ff      	movs	r2, #255	; 0xff
 800d4d2:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d6:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	2200      	movs	r2, #0
 800d500:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	2220      	movs	r2, #32
 800d506:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	220b      	movs	r2, #11
 800d50c:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	2202      	movs	r2, #2
 800d51a:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	220d      	movs	r2, #13
 800d520:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800d522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d524:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	2200      	movs	r2, #0
 800d52e:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2201      	movs	r2, #1
 800d534:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2200      	movs	r2, #0
 800d53a:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	2200      	movs	r2, #0
 800d540:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800d548:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	2200      	movs	r2, #0
 800d54e:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	2238      	movs	r2, #56	; 0x38
 800d554:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	22ff      	movs	r2, #255	; 0xff
 800d55a:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	2201      	movs	r2, #1
 800d560:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	221a      	movs	r2, #26
 800d56c:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2220      	movs	r2, #32
 800d578:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	22cc      	movs	r2, #204	; 0xcc
 800d584:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	220b      	movs	r2, #11
 800d58a:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	22f5      	movs	r2, #245	; 0xf5
 800d596:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2209      	movs	r2, #9
 800d59c:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800d59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a0:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a8:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2208      	movs	r2, #8
 800d5b2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2278      	movs	r2, #120	; 0x78
 800d5b8:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800d5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	220b      	movs	r2, #11
 800d5ec:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	2209      	movs	r2, #9
 800d5f2:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f6:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2201      	movs	r2, #1
 800d608:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d616:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	22c7      	movs	r2, #199	; 0xc7
 800d622:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	22ff      	movs	r2, #255	; 0xff
 800d628:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	22db      	movs	r2, #219	; 0xdb
 800d62e:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	2202      	movs	r2, #2
 800d634:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800d636:	6a3b      	ldr	r3, [r7, #32]
 800d638:	2200      	movs	r2, #0
 800d63a:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800d63c:	6a3b      	ldr	r3, [r7, #32]
 800d63e:	2201      	movs	r2, #1
 800d640:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800d642:	6a3b      	ldr	r3, [r7, #32]
 800d644:	2201      	movs	r2, #1
 800d646:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800d648:	6a3b      	ldr	r3, [r7, #32]
 800d64a:	2221      	movs	r2, #33	; 0x21
 800d64c:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800d64e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d652:	4618      	mov	r0, r3
 800d654:	371c      	adds	r7, #28
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr

0800d65e <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b088      	sub	sp, #32
 800d662:	af02      	add	r7, sp, #8
 800d664:	60f8      	str	r0, [r7, #12]
 800d666:	60b9      	str	r1, [r7, #8]
 800d668:	607a      	str	r2, [r7, #4]
 800d66a:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d66c:	2300      	movs	r3, #0
 800d66e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	9301      	str	r3, [sp, #4]
 800d674:	6a3b      	ldr	r3, [r7, #32]
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	68b9      	ldr	r1, [r7, #8]
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f7ff fecf 	bl	800d422 <VL53L1_preset_mode_standard_ranging>
 800d684:	4603      	mov	r3, r0
 800d686:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d688:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d121      	bne.n	800d6d4 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2207      	movs	r2, #7
 800d694:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2205      	movs	r2, #5
 800d69a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69e:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a6:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2208      	movs	r2, #8
 800d6b0:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2238      	movs	r2, #56	; 0x38
 800d6b6:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	2207      	movs	r2, #7
 800d6bc:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	2205      	movs	r2, #5
 800d6c2:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c6:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800d6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ce:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d6d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3718      	adds	r7, #24
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b088      	sub	sp, #32
 800d6e4:	af02      	add	r7, sp, #8
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	607a      	str	r2, [r7, #4]
 800d6ec:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	6a3b      	ldr	r3, [r7, #32]
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	68b9      	ldr	r1, [r7, #8]
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f7ff fe8e 	bl	800d422 <VL53L1_preset_mode_standard_ranging>
 800d706:	4603      	mov	r3, r0
 800d708:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d70a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d121      	bne.n	800d756 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	220f      	movs	r2, #15
 800d716:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	220d      	movs	r2, #13
 800d71c:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800d71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d720:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800d726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d728:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2208      	movs	r2, #8
 800d732:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	22b8      	movs	r2, #184	; 0xb8
 800d738:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	220f      	movs	r2, #15
 800d73e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	220d      	movs	r2, #13
 800d744:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800d746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d748:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800d74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d750:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d756:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3718      	adds	r7, #24
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b088      	sub	sp, #32
 800d766:	af02      	add	r7, sp, #8
 800d768:	60f8      	str	r0, [r7, #12]
 800d76a:	60b9      	str	r1, [r7, #8]
 800d76c:	607a      	str	r2, [r7, #4]
 800d76e:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d770:	2300      	movs	r3, #0
 800d772:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d776:	9301      	str	r3, [sp, #4]
 800d778:	6a3b      	ldr	r3, [r7, #32]
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	68b9      	ldr	r1, [r7, #8]
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f7ff fe4d 	bl	800d422 <VL53L1_preset_mode_standard_ranging>
 800d788:	4603      	mov	r3, r0
 800d78a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d78c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d105      	bne.n	800d7a0 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	2202      	movs	r2, #2
 800d798:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	223b      	movs	r2, #59	; 0x3b
 800d79e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d7a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3718      	adds	r7, #24
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b088      	sub	sp, #32
 800d7b0:	af02      	add	r7, sp, #8
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
 800d7b8:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	6a3b      	ldr	r3, [r7, #32]
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	68b9      	ldr	r1, [r7, #8]
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f7ff fe28 	bl	800d422 <VL53L1_preset_mode_standard_ranging>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d7d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d105      	bne.n	800d7ea <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	2202      	movs	r2, #2
 800d7e2:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	225b      	movs	r2, #91	; 0x5b
 800d7e8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d7ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3718      	adds	r7, #24
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}

0800d7f6 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b088      	sub	sp, #32
 800d7fa:	af02      	add	r7, sp, #8
 800d7fc:	60f8      	str	r0, [r7, #12]
 800d7fe:	60b9      	str	r1, [r7, #8]
 800d800:	607a      	str	r2, [r7, #4]
 800d802:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d804:	2300      	movs	r3, #0
 800d806:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800d808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80a:	9301      	str	r3, [sp, #4]
 800d80c:	6a3b      	ldr	r3, [r7, #32]
 800d80e:	9300      	str	r3, [sp, #0]
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	68b9      	ldr	r1, [r7, #8]
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f7ff fe03 	bl	800d422 <VL53L1_preset_mode_standard_ranging>
 800d81c:	4603      	mov	r3, r0
 800d81e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d820:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d11a      	bne.n	800d85e <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	2200      	movs	r2, #0
 800d82c:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	22b1      	movs	r2, #177	; 0xb1
 800d838:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2200      	movs	r2, #0
 800d83e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	22d4      	movs	r2, #212	; 0xd4
 800d844:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d84c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d850:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	2240      	movs	r2, #64	; 0x40
 800d85c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d85e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3718      	adds	r7, #24
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}

0800d86a <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b088      	sub	sp, #32
 800d86e:	af02      	add	r7, sp, #8
 800d870:	60f8      	str	r0, [r7, #12]
 800d872:	60b9      	str	r1, [r7, #8]
 800d874:	607a      	str	r2, [r7, #4]
 800d876:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d878:	2300      	movs	r3, #0
 800d87a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800d87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87e:	9301      	str	r3, [sp, #4]
 800d880:	6a3b      	ldr	r3, [r7, #32]
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	68b9      	ldr	r1, [r7, #8]
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	f7ff fee7 	bl	800d65e <VL53L1_preset_mode_standard_ranging_short_range>
 800d890:	4603      	mov	r3, r0
 800d892:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d894:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d11a      	bne.n	800d8d2 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2284      	movs	r2, #132	; 0x84
 800d8ac:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	22b1      	movs	r2, #177	; 0xb1
 800d8b8:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d8c0:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d8cc:	6a3b      	ldr	r3, [r7, #32]
 800d8ce:	2240      	movs	r2, #64	; 0x40
 800d8d0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d8d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3718      	adds	r7, #24
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b088      	sub	sp, #32
 800d8e2:	af02      	add	r7, sp, #8
 800d8e4:	60f8      	str	r0, [r7, #12]
 800d8e6:	60b9      	str	r1, [r7, #8]
 800d8e8:	607a      	str	r2, [r7, #4]
 800d8ea:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800d8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f2:	9301      	str	r3, [sp, #4]
 800d8f4:	6a3b      	ldr	r3, [r7, #32]
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	68b9      	ldr	r1, [r7, #8]
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f7ff feee 	bl	800d6e0 <VL53L1_preset_mode_standard_ranging_long_range>
 800d904:	4603      	mov	r3, r0
 800d906:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d908:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d11a      	bne.n	800d946 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	2200      	movs	r2, #0
 800d914:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2297      	movs	r2, #151	; 0x97
 800d920:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	22b1      	movs	r2, #177	; 0xb1
 800d92c:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d934:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d938:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d940:	6a3b      	ldr	r3, [r7, #32]
 800d942:	2240      	movs	r2, #64	; 0x40
 800d944:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d946:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3718      	adds	r7, #24
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d952:	b580      	push	{r7, lr}
 800d954:	b088      	sub	sp, #32
 800d956:	af02      	add	r7, sp, #8
 800d958:	60f8      	str	r0, [r7, #12]
 800d95a:	60b9      	str	r1, [r7, #8]
 800d95c:	607a      	str	r2, [r7, #4]
 800d95e:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d960:	2300      	movs	r3, #0
 800d962:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800d964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d966:	9301      	str	r3, [sp, #4]
 800d968:	6a3b      	ldr	r3, [r7, #32]
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	68b9      	ldr	r1, [r7, #8]
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f7ff ff3f 	bl	800d7f6 <VL53L1_preset_mode_timed_ranging>
 800d978:	4603      	mov	r3, r0
 800d97a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d97c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d106      	bne.n	800d992 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800d984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d986:	6839      	ldr	r1, [r7, #0]
 800d988:	68b8      	ldr	r0, [r7, #8]
 800d98a:	f000 fe7b 	bl	800e684 <VL53L1_config_low_power_auto_mode>
 800d98e:	4603      	mov	r3, r0
 800d990:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3718      	adds	r7, #24
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b088      	sub	sp, #32
 800d9a2:	af02      	add	r7, sp, #8
 800d9a4:	60f8      	str	r0, [r7, #12]
 800d9a6:	60b9      	str	r1, [r7, #8]
 800d9a8:	607a      	str	r2, [r7, #4]
 800d9aa:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	9301      	str	r3, [sp, #4]
 800d9b4:	6a3b      	ldr	r3, [r7, #32]
 800d9b6:	9300      	str	r3, [sp, #0]
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	68b9      	ldr	r1, [r7, #8]
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f7ff ff53 	bl	800d86a <VL53L1_preset_mode_timed_ranging_short_range>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d9c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d106      	bne.n	800d9de <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800d9d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9d2:	6839      	ldr	r1, [r7, #0]
 800d9d4:	68b8      	ldr	r0, [r7, #8]
 800d9d6:	f000 fe55 	bl	800e684 <VL53L1_config_low_power_auto_mode>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d9de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b088      	sub	sp, #32
 800d9ee:	af02      	add	r7, sp, #8
 800d9f0:	60f8      	str	r0, [r7, #12]
 800d9f2:	60b9      	str	r1, [r7, #8]
 800d9f4:	607a      	str	r2, [r7, #4]
 800d9f6:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	9301      	str	r3, [sp, #4]
 800da00:	6a3b      	ldr	r3, [r7, #32]
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	68b9      	ldr	r1, [r7, #8]
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f7ff ff67 	bl	800d8de <VL53L1_preset_mode_timed_ranging_long_range>
 800da10:	4603      	mov	r3, r0
 800da12:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800da14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d106      	bne.n	800da2a <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800da1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da1e:	6839      	ldr	r1, [r7, #0]
 800da20:	68b8      	ldr	r0, [r7, #8]
 800da22:	f000 fe2f 	bl	800e684 <VL53L1_config_low_power_auto_mode>
 800da26:	4603      	mov	r3, r0
 800da28:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800da2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3718      	adds	r7, #24
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b088      	sub	sp, #32
 800da3a:	af02      	add	r7, sp, #8
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	60b9      	str	r1, [r7, #8]
 800da40:	607a      	str	r2, [r7, #4]
 800da42:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da44:	2300      	movs	r3, #0
 800da46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800da48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4a:	9301      	str	r3, [sp, #4]
 800da4c:	6a3b      	ldr	r3, [r7, #32]
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	68b9      	ldr	r1, [r7, #8]
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f7ff fce3 	bl	800d422 <VL53L1_preset_mode_standard_ranging>
 800da5c:	4603      	mov	r3, r0
 800da5e:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800da60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d116      	bne.n	800da96 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	2200      	movs	r2, #0
 800da6c:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	22b1      	movs	r2, #177	; 0xb1
 800da78:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	22d4      	movs	r2, #212	; 0xd4
 800da84:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800da86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da88:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800da90:	6a3b      	ldr	r3, [r7, #32]
 800da92:	2210      	movs	r2, #16
 800da94:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800da96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3718      	adds	r7, #24
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b088      	sub	sp, #32
 800daa6:	af02      	add	r7, sp, #8
 800daa8:	60f8      	str	r0, [r7, #12]
 800daaa:	60b9      	str	r1, [r7, #8]
 800daac:	607a      	str	r2, [r7, #4]
 800daae:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dab0:	2300      	movs	r3, #0
 800dab2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab6:	9301      	str	r3, [sp, #4]
 800dab8:	6a3b      	ldr	r3, [r7, #32]
 800daba:	9300      	str	r3, [sp, #0]
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	68b9      	ldr	r1, [r7, #8]
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f7ff fcad 	bl	800d422 <VL53L1_preset_mode_standard_ranging>
 800dac8:	4603      	mov	r3, r0
 800daca:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800dacc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d102      	bne.n	800dada <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800dad4:	6a3b      	ldr	r3, [r7, #32]
 800dad6:	2201      	movs	r2, #1
 800dad8:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800dada:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800dae6:	b480      	push	{r7}
 800dae8:	b085      	sub	sp, #20
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2202      	movs	r2, #2
 800dafe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	220d      	movs	r2, #13
 800db06:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f640 028e 	movw	r2, #2190	; 0x88e
 800db10:	625a      	str	r2, [r3, #36]	; 0x24
}
 800db12:	bf00      	nop
 800db14:	3714      	adds	r7, #20
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800db1e:	b480      	push	{r7}
 800db20:	b085      	sub	sp, #20
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	460b      	mov	r3, r1
 800db28:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	332c      	adds	r3, #44	; 0x2c
 800db32:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	78fa      	ldrb	r2, [r7, #3]
 800db38:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	2200      	movs	r2, #0
 800db3e:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	2202      	movs	r2, #2
 800db44:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	2200      	movs	r2, #0
 800db4a:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	78fa      	ldrb	r2, [r7, #3]
 800db50:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	2200      	movs	r2, #0
 800db56:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	2202      	movs	r2, #2
 800db5c:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	2200      	movs	r2, #0
 800db62:	71da      	strb	r2, [r3, #7]

}
 800db64:	bf00      	nop
 800db66:	3714      	adds	r7, #20
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800db70:	b480      	push	{r7}
 800db72:	b087      	sub	sp, #28
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800db78:	2300      	movs	r3, #0
 800db7a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	332c      	adds	r3, #44	; 0x2c
 800db84:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800db8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d10c      	bne.n	800dbae <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2203      	movs	r2, #3
 800db98:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2200      	movs	r2, #0
 800db9e:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2202      	movs	r2, #2
 800dba4:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	71da      	strb	r2, [r3, #7]
 800dbac:	e060      	b.n	800dc70 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	795b      	ldrb	r3, [r3, #5]
 800dbb2:	2bff      	cmp	r3, #255	; 0xff
 800dbb4:	d103      	bne.n	800dbbe <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2280      	movs	r2, #128	; 0x80
 800dbba:	715a      	strb	r2, [r3, #5]
 800dbbc:	e005      	b.n	800dbca <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	795b      	ldrb	r3, [r3, #5]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	799b      	ldrb	r3, [r3, #6]
 800dbce:	f083 0302 	eor.w	r3, r3, #2
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	791b      	ldrb	r3, [r3, #4]
 800dbdc:	3b03      	subs	r3, #3
 800dbde:	2b05      	cmp	r3, #5
 800dbe0:	d839      	bhi.n	800dc56 <VL53L1_update_ll_driver_rd_state+0xe6>
 800dbe2:	a201      	add	r2, pc, #4	; (adr r2, 800dbe8 <VL53L1_update_ll_driver_rd_state+0x78>)
 800dbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe8:	0800dc01 	.word	0x0800dc01
 800dbec:	0800dc57 	.word	0x0800dc57
 800dbf0:	0800dc57 	.word	0x0800dc57
 800dbf4:	0800dc2b 	.word	0x0800dc2b
 800dbf8:	0800dc39 	.word	0x0800dc39
 800dbfc:	0800dc41 	.word	0x0800dc41

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800dc06:	f003 0302 	and.w	r3, r3, #2
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	dd03      	ble.n	800dc16 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2206      	movs	r2, #6
 800dc12:	711a      	strb	r2, [r3, #4]
 800dc14:	e002      	b.n	800dc1c <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2208      	movs	r2, #8
 800dc1a:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	71da      	strb	r2, [r3, #7]

		break;
 800dc28:	e022      	b.n	800dc70 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2208      	movs	r2, #8
 800dc34:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800dc36:	e01b      	b.n	800dc70 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2208      	movs	r2, #8
 800dc3c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800dc3e:	e017      	b.n	800dc70 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	79db      	ldrb	r3, [r3, #7]
 800dc44:	f083 0301 	eor.w	r3, r3, #1
 800dc48:	b2da      	uxtb	r2, r3
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2208      	movs	r2, #8
 800dc52:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800dc54:	e00c      	b.n	800dc70 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2203      	movs	r2, #3
 800dc5a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2202      	movs	r2, #2
 800dc66:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	71da      	strb	r2, [r3, #7]

		break;
 800dc6e:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800dc70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	371c      	adds	r7, #28
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b089      	sub	sp, #36	; 0x24
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	332c      	adds	r3, #44	; 0x2c
 800dc94:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800dc9c:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800dcae:	f003 031f 	and.w	r3, r3, #31
 800dcb2:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	78db      	ldrb	r3, [r3, #3]
 800dcb8:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800dcbe:	111b      	asrs	r3, r3, #4
 800dcc0:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800dcc2:	f003 0302 	and.w	r3, r3, #2
 800dcc6:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800dcce:	f003 0320 	and.w	r3, r3, #32
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d017      	beq.n	800dd06 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	791b      	ldrb	r3, [r3, #4]
 800dcda:	2b06      	cmp	r3, #6
 800dcdc:	d105      	bne.n	800dcea <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800dcde:	7bfb      	ldrb	r3, [r7, #15]
 800dce0:	2b12      	cmp	r3, #18
 800dce2:	d010      	beq.n	800dd06 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800dce4:	23ef      	movs	r3, #239	; 0xef
 800dce6:	77fb      	strb	r3, [r7, #31]
 800dce8:	e00d      	b.n	800dd06 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	795b      	ldrb	r3, [r3, #5]
 800dcee:	7bba      	ldrb	r2, [r7, #14]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d001      	beq.n	800dcf8 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800dcf4:	23ee      	movs	r3, #238	; 0xee
 800dcf6:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	799b      	ldrb	r3, [r3, #6]
 800dcfc:	7b7a      	ldrb	r2, [r7, #13]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d001      	beq.n	800dd06 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800dd02:	23ed      	movs	r3, #237	; 0xed
 800dd04:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800dd06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3724      	adds	r7, #36	; 0x24
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr

0800dd16 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800dd16:	b480      	push	{r7}
 800dd18:	b087      	sub	sp, #28
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	332c      	adds	r3, #44	; 0x2c
 800dd2a:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800dd32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d10c      	bne.n	800dd54 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2203      	movs	r2, #3
 800dd3e:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2200      	movs	r2, #0
 800dd44:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2202      	movs	r2, #2
 800dd4a:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	70da      	strb	r2, [r3, #3]
 800dd52:	e03e      	b.n	800ddd2 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	785b      	ldrb	r3, [r3, #1]
 800dd58:	2bff      	cmp	r3, #255	; 0xff
 800dd5a:	d103      	bne.n	800dd64 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2280      	movs	r2, #128	; 0x80
 800dd60:	705a      	strb	r2, [r3, #1]
 800dd62:	e005      	b.n	800dd70 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	785b      	ldrb	r3, [r3, #1]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	b2da      	uxtb	r2, r3
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	789b      	ldrb	r3, [r3, #2]
 800dd74:	f083 0302 	eor.w	r3, r3, #2
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	2b03      	cmp	r3, #3
 800dd84:	d002      	beq.n	800dd8c <VL53L1_update_ll_driver_cfg_state+0x76>
 800dd86:	2b04      	cmp	r3, #4
 800dd88:	d00e      	beq.n	800dda8 <VL53L1_update_ll_driver_cfg_state+0x92>
 800dd8a:	e015      	b.n	800ddb8 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	78db      	ldrb	r3, [r3, #3]
 800dd90:	f083 0301 	eor.w	r3, r3, #1
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2204      	movs	r2, #4
 800dda4:	701a      	strb	r2, [r3, #0]
		break;
 800dda6:	e014      	b.n	800ddd2 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	78db      	ldrb	r3, [r3, #3]
 800ddac:	f083 0301 	eor.w	r3, r3, #1
 800ddb0:	b2da      	uxtb	r2, r3
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	70da      	strb	r2, [r3, #3]

		break;
 800ddb6:	e00c      	b.n	800ddd2 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2203      	movs	r2, #3
 800ddbc:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2202      	movs	r2, #2
 800ddc8:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	70da      	strb	r2, [r3, #3]

		break;
 800ddd0:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800ddd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	371c      	adds	r7, #28
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr

0800dde2 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800dde2:	b480      	push	{r7}
 800dde4:	b083      	sub	sp, #12
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
 800ddea:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	7c1a      	ldrb	r2, [r3, #16]
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	7c52      	ldrb	r2, [r2, #17]
 800ddfc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	3302      	adds	r3, #2
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	7c92      	ldrb	r2, [r2, #18]
 800de06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	3303      	adds	r3, #3
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	7cd2      	ldrb	r2, [r2, #19]
 800de10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	3304      	adds	r3, #4
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	7d12      	ldrb	r2, [r2, #20]
 800de1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	3305      	adds	r3, #5
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	7d52      	ldrb	r2, [r2, #21]
 800de24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	3306      	adds	r3, #6
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	7d92      	ldrb	r2, [r2, #22]
 800de2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	3307      	adds	r3, #7
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	7dd2      	ldrb	r2, [r2, #23]
 800de38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	3308      	adds	r3, #8
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	7e12      	ldrb	r2, [r2, #24]
 800de42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	3309      	adds	r3, #9
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	7e52      	ldrb	r2, [r2, #25]
 800de4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	330a      	adds	r3, #10
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	7e92      	ldrb	r2, [r2, #26]
 800de56:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	330b      	adds	r3, #11
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	7ed2      	ldrb	r2, [r2, #27]
 800de60:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	330c      	adds	r3, #12
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	7f12      	ldrb	r2, [r2, #28]
 800de6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	330d      	adds	r3, #13
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	7f52      	ldrb	r2, [r2, #29]
 800de74:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	330e      	adds	r3, #14
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	7f92      	ldrb	r2, [r2, #30]
 800de7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	330f      	adds	r3, #15
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	7fd2      	ldrb	r2, [r2, #31]
 800de88:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	3310      	adds	r3, #16
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	f892 2020 	ldrb.w	r2, [r2, #32]
 800de94:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	3311      	adds	r3, #17
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800dea0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	3312      	adds	r3, #18
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800deac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	3313      	adds	r3, #19
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800deb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	3314      	adds	r3, #20
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800dec4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	3315      	adds	r3, #21
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ded0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	3316      	adds	r3, #22
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800dedc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	3317      	adds	r3, #23
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800dee8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	3318      	adds	r3, #24
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800def4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	3319      	adds	r3, #25
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800df00:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	331a      	adds	r3, #26
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800df0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	331b      	adds	r3, #27
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800df18:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	331c      	adds	r3, #28
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800df24:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	331d      	adds	r3, #29
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800df30:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	331e      	adds	r3, #30
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800df3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	331f      	adds	r3, #31
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800df48:	701a      	strb	r2, [r3, #0]
}
 800df4a:	bf00      	nop
 800df4c:	370c      	adds	r7, #12
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr

0800df56 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800df56:	b480      	push	{r7}
 800df58:	b085      	sub	sp, #20
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	4603      	mov	r3, r0
 800df5e:	603a      	str	r2, [r7, #0]
 800df60:	80fb      	strh	r3, [r7, #6]
 800df62:	460b      	mov	r3, r1
 800df64:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800df66:	2300      	movs	r3, #0
 800df68:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800df6e:	88fb      	ldrh	r3, [r7, #6]
 800df70:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800df72:	2300      	movs	r3, #0
 800df74:	81fb      	strh	r3, [r7, #14]
 800df76:	e00e      	b.n	800df96 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800df78:	88ba      	ldrh	r2, [r7, #4]
 800df7a:	89fb      	ldrh	r3, [r7, #14]
 800df7c:	1ad3      	subs	r3, r2, r3
 800df7e:	3b01      	subs	r3, #1
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	4413      	add	r3, r2
 800df84:	89ba      	ldrh	r2, [r7, #12]
 800df86:	b2d2      	uxtb	r2, r2
 800df88:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800df8a:	89bb      	ldrh	r3, [r7, #12]
 800df8c:	0a1b      	lsrs	r3, r3, #8
 800df8e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800df90:	89fb      	ldrh	r3, [r7, #14]
 800df92:	3301      	adds	r3, #1
 800df94:	81fb      	strh	r3, [r7, #14]
 800df96:	89fa      	ldrh	r2, [r7, #14]
 800df98:	88bb      	ldrh	r3, [r7, #4]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d3ec      	bcc.n	800df78 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800df9e:	bf00      	nop
 800dfa0:	bf00      	nop
 800dfa2:	3714      	adds	r7, #20
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	6039      	str	r1, [r7, #0]
 800dfb6:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800dfbc:	e00a      	b.n	800dfd4 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800dfbe:	89fb      	ldrh	r3, [r7, #14]
 800dfc0:	021b      	lsls	r3, r3, #8
 800dfc2:	b21a      	sxth	r2, r3
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	1c59      	adds	r1, r3, #1
 800dfc8:	6039      	str	r1, [r7, #0]
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	b21b      	sxth	r3, r3
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	b21b      	sxth	r3, r3
 800dfd2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800dfd4:	88fb      	ldrh	r3, [r7, #6]
 800dfd6:	1e5a      	subs	r2, r3, #1
 800dfd8:	80fa      	strh	r2, [r7, #6]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1ef      	bne.n	800dfbe <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800dfde:	89fb      	ldrh	r3, [r7, #14]
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3714      	adds	r7, #20
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr

0800dfec <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	4603      	mov	r3, r0
 800dff4:	603a      	str	r2, [r7, #0]
 800dff6:	80fb      	strh	r3, [r7, #6]
 800dff8:	460b      	mov	r3, r1
 800dffa:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800dffc:	2300      	movs	r3, #0
 800dffe:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800e000:	2300      	movs	r3, #0
 800e002:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800e004:	88fb      	ldrh	r3, [r7, #6]
 800e006:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800e008:	2300      	movs	r3, #0
 800e00a:	81fb      	strh	r3, [r7, #14]
 800e00c:	e00f      	b.n	800e02e <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e00e:	88ba      	ldrh	r2, [r7, #4]
 800e010:	89fb      	ldrh	r3, [r7, #14]
 800e012:	1ad3      	subs	r3, r2, r3
 800e014:	3b01      	subs	r3, #1
 800e016:	683a      	ldr	r2, [r7, #0]
 800e018:	4413      	add	r3, r2
 800e01a:	89ba      	ldrh	r2, [r7, #12]
 800e01c:	b2d2      	uxtb	r2, r2
 800e01e:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e020:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e024:	121b      	asrs	r3, r3, #8
 800e026:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800e028:	89fb      	ldrh	r3, [r7, #14]
 800e02a:	3301      	adds	r3, #1
 800e02c:	81fb      	strh	r3, [r7, #14]
 800e02e:	89fa      	ldrh	r2, [r7, #14]
 800e030:	88bb      	ldrh	r3, [r7, #4]
 800e032:	429a      	cmp	r2, r3
 800e034:	d3eb      	bcc.n	800e00e <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800e036:	bf00      	nop
 800e038:	bf00      	nop
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e044:	b480      	push	{r7}
 800e046:	b085      	sub	sp, #20
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	6039      	str	r1, [r7, #0]
 800e04e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800e050:	2300      	movs	r3, #0
 800e052:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	b25b      	sxtb	r3, r3
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	da0e      	bge.n	800e07c <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800e05e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e062:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800e064:	e00a      	b.n	800e07c <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800e066:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e06a:	021b      	lsls	r3, r3, #8
 800e06c:	b21a      	sxth	r2, r3
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	1c59      	adds	r1, r3, #1
 800e072:	6039      	str	r1, [r7, #0]
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	b21b      	sxth	r3, r3
 800e078:	4313      	orrs	r3, r2
 800e07a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800e07c:	88fb      	ldrh	r3, [r7, #6]
 800e07e:	1e5a      	subs	r2, r3, #1
 800e080:	80fa      	strh	r2, [r7, #6]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d1ef      	bne.n	800e066 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800e086:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3714      	adds	r7, #20
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e096:	b480      	push	{r7}
 800e098:	b087      	sub	sp, #28
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	60f8      	str	r0, [r7, #12]
 800e09e:	460b      	mov	r3, r1
 800e0a0:	607a      	str	r2, [r7, #4]
 800e0a2:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	82fb      	strh	r3, [r7, #22]
 800e0b4:	e00e      	b.n	800e0d4 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e0b6:	897a      	ldrh	r2, [r7, #10]
 800e0b8:	8afb      	ldrh	r3, [r7, #22]
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	693a      	ldr	r2, [r7, #16]
 800e0c4:	b2d2      	uxtb	r2, r2
 800e0c6:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	0a1b      	lsrs	r3, r3, #8
 800e0cc:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800e0ce:	8afb      	ldrh	r3, [r7, #22]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	82fb      	strh	r3, [r7, #22]
 800e0d4:	8afa      	ldrh	r2, [r7, #22]
 800e0d6:	897b      	ldrh	r3, [r7, #10]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d3ec      	bcc.n	800e0b6 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800e0dc:	bf00      	nop
 800e0de:	bf00      	nop
 800e0e0:	371c      	adds	r7, #28
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr

0800e0ea <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e0ea:	b480      	push	{r7}
 800e0ec:	b085      	sub	sp, #20
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	6039      	str	r1, [r7, #0]
 800e0f4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800e0fa:	e007      	b.n	800e10c <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	021a      	lsls	r2, r3, #8
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	1c59      	adds	r1, r3, #1
 800e104:	6039      	str	r1, [r7, #0]
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	4313      	orrs	r3, r2
 800e10a:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800e10c:	88fb      	ldrh	r3, [r7, #6]
 800e10e:	1e5a      	subs	r2, r3, #1
 800e110:	80fa      	strh	r2, [r7, #6]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1f2      	bne.n	800e0fc <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800e116:	68fb      	ldr	r3, [r7, #12]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3714      	adds	r7, #20
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e124:	b480      	push	{r7}
 800e126:	b085      	sub	sp, #20
 800e128:	af00      	add	r7, sp, #0
 800e12a:	4603      	mov	r3, r0
 800e12c:	6039      	str	r1, [r7, #0]
 800e12e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800e130:	2300      	movs	r3, #0
 800e132:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	b25b      	sxtb	r3, r3
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	da0b      	bge.n	800e156 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800e13e:	f04f 33ff 	mov.w	r3, #4294967295
 800e142:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800e144:	e007      	b.n	800e156 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	021a      	lsls	r2, r3, #8
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	1c59      	adds	r1, r3, #1
 800e14e:	6039      	str	r1, [r7, #0]
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	4313      	orrs	r3, r2
 800e154:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800e156:	88fb      	ldrh	r3, [r7, #6]
 800e158:	1e5a      	subs	r2, r3, #1
 800e15a:	80fa      	strh	r2, [r7, #6]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1f2      	bne.n	800e146 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800e160:	68fb      	ldr	r3, [r7, #12]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3714      	adds	r7, #20
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr

0800e16e <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b084      	sub	sp, #16
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
 800e176:	460b      	mov	r3, r1
 800e178:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	78fa      	ldrb	r2, [r7, #3]
 800e186:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800e190:	461a      	mov	r2, r3
 800e192:	2183      	movs	r1, #131	; 0x83
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f001 fd0d 	bl	800fbb4 <VL53L1_WrByte>
 800e19a:	4603      	mov	r3, r0
 800e19c:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800e19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b084      	sub	sp, #16
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800e1b6:	2101      	movs	r1, #1
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7ff ffd8 	bl	800e16e <VL53L1_set_powerforce_register>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800e1c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}

0800e1ce <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b086      	sub	sp, #24
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	460a      	mov	r2, r1
 800e1d8:	80fb      	strh	r3, [r7, #6]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800e1ea:	88fb      	ldrh	r3, [r7, #6]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f000 faa7 	bl	800e740 <VL53L1_calc_pll_period_us>
 800e1f2:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800e1f4:	797b      	ldrb	r3, [r7, #5]
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f000 fab6 	bl	800e768 <VL53L1_decode_vcsel_period>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800e200:	697a      	ldr	r2, [r7, #20]
 800e202:	4613      	mov	r3, r2
 800e204:	00db      	lsls	r3, r3, #3
 800e206:	4413      	add	r3, r2
 800e208:	021b      	lsls	r3, r3, #8
 800e20a:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	099b      	lsrs	r3, r3, #6
 800e210:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800e212:	7cfa      	ldrb	r2, [r7, #19]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	fb02 f303 	mul.w	r3, r2, r3
 800e21a:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	099b      	lsrs	r3, r3, #6
 800e220:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800e222:	68fb      	ldr	r3, [r7, #12]
}
 800e224:	4618      	mov	r0, r3
 800e226:	3718      	adds	r7, #24
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b089      	sub	sp, #36	; 0x24
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	4608      	mov	r0, r1
 800e236:	4611      	mov	r1, r2
 800e238:	461a      	mov	r2, r3
 800e23a:	4603      	mov	r3, r0
 800e23c:	817b      	strh	r3, [r7, #10]
 800e23e:	460b      	mov	r3, r1
 800e240:	813b      	strh	r3, [r7, #8]
 800e242:	4613      	mov	r3, r2
 800e244:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800e246:	2300      	movs	r3, #0
 800e248:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800e24a:	2300      	movs	r3, #0
 800e24c:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800e24e:	2300      	movs	r3, #0
 800e250:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800e252:	2300      	movs	r3, #0
 800e254:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800e256:	2300      	movs	r3, #0
 800e258:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	011b      	lsls	r3, r3, #4
 800e25e:	4a23      	ldr	r2, [pc, #140]	; (800e2ec <VL53L1_calc_range_ignore_threshold+0xc0>)
 800e260:	fb82 1203 	smull	r1, r2, r2, r3
 800e264:	1192      	asrs	r2, r2, #6
 800e266:	17db      	asrs	r3, r3, #31
 800e268:	1ad3      	subs	r3, r2, r3
 800e26a:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800e26c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e270:	2b00      	cmp	r3, #0
 800e272:	da03      	bge.n	800e27c <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800e274:	897b      	ldrh	r3, [r7, #10]
 800e276:	425b      	negs	r3, r3
 800e278:	b29b      	uxth	r3, r3
 800e27a:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800e27c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e280:	2b00      	cmp	r3, #0
 800e282:	da03      	bge.n	800e28c <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800e284:	893b      	ldrh	r3, [r7, #8]
 800e286:	425b      	negs	r3, r3
 800e288:	b29b      	uxth	r3, r3
 800e28a:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800e28c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e290:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e294:	4413      	add	r3, r2
 800e296:	015b      	lsls	r3, r3, #5
 800e298:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	4a13      	ldr	r2, [pc, #76]	; (800e2ec <VL53L1_calc_range_ignore_threshold+0xc0>)
 800e29e:	fb82 1203 	smull	r1, r2, r2, r3
 800e2a2:	1192      	asrs	r2, r2, #6
 800e2a4:	17db      	asrs	r3, r3, #31
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800e2aa:	697a      	ldr	r2, [r7, #20]
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800e2b2:	79fa      	ldrb	r2, [r7, #7]
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	fb02 f303 	mul.w	r3, r2, r3
 800e2ba:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	3310      	adds	r3, #16
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	da00      	bge.n	800e2c6 <VL53L1_calc_range_ignore_threshold+0x9a>
 800e2c4:	331f      	adds	r3, #31
 800e2c6:	115b      	asrs	r3, r3, #5
 800e2c8:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2d0:	db03      	blt.n	800e2da <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800e2d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2d6:	83fb      	strh	r3, [r7, #30]
 800e2d8:	e001      	b.n	800e2de <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800e2de:	8bfb      	ldrh	r3, [r7, #30]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3724      	adds	r7, #36	; 0x24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr
 800e2ec:	10624dd3 	.word	0x10624dd3

0800e2f0 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	031a      	lsls	r2, r3, #12
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	085b      	lsrs	r3, r3, #1
 800e306:	441a      	add	r2, r3
	timeout_mclks   =
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e30e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800e310:	68fb      	ldr	r3, [r7, #12]
}
 800e312:	4618      	mov	r0, r3
 800e314:	3714      	adds	r7, #20
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr

0800e31e <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e31e:	b580      	push	{r7, lr}
 800e320:	b084      	sub	sp, #16
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
 800e326:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e328:	2300      	movs	r3, #0
 800e32a:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800e32c:	2300      	movs	r3, #0
 800e32e:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800e330:	6839      	ldr	r1, [r7, #0]
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f7ff ffdc 	bl	800e2f0 <VL53L1_calc_timeout_mclks>
 800e338:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f000 f85e 	bl	800e3fc <VL53L1_encode_timeout>
 800e340:	4603      	mov	r3, r0
 800e342:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800e344:	897b      	ldrh	r3, [r7, #10]
}
 800e346:	4618      	mov	r0, r3
 800e348:	3710      	adds	r7, #16
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800e34e:	b4f0      	push	{r4, r5, r6, r7}
 800e350:	b086      	sub	sp, #24
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
 800e356:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800e358:	2300      	movs	r3, #0
 800e35a:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 800e35c:	f04f 0200 	mov.w	r2, #0
 800e360:	f04f 0300 	mov.w	r3, #0
 800e364:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f04f 0100 	mov.w	r1, #0
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	461a      	mov	r2, r3
 800e374:	f04f 0300 	mov.w	r3, #0
 800e378:	fb02 fc01 	mul.w	ip, r2, r1
 800e37c:	fb00 f603 	mul.w	r6, r0, r3
 800e380:	4466      	add	r6, ip
 800e382:	fba0 2302 	umull	r2, r3, r0, r2
 800e386:	18f1      	adds	r1, r6, r3
 800e388:	460b      	mov	r3, r1
 800e38a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800e38e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800e392:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e396:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800e39a:	f143 0500 	adc.w	r5, r3, #0
 800e39e:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800e3a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e3a6:	f04f 0200 	mov.w	r2, #0
 800e3aa:	f04f 0300 	mov.w	r3, #0
 800e3ae:	0b02      	lsrs	r2, r0, #12
 800e3b0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e3b4:	0b0b      	lsrs	r3, r1, #12
 800e3b6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e3be:	697b      	ldr	r3, [r7, #20]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3718      	adds	r7, #24
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bcf0      	pop	{r4, r5, r6, r7}
 800e3c8:	4770      	bx	lr

0800e3ca <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b084      	sub	sp, #16
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	6039      	str	r1, [r7, #0]
 800e3d4:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800e3de:	88fb      	ldrh	r3, [r7, #6]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f000 f837 	bl	800e454 <VL53L1_decode_timeout>
 800e3e6:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	f7ff ffaf 	bl	800e34e <VL53L1_calc_timeout_us>
 800e3f0:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e3f2:	68bb      	ldr	r3, [r7, #8]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b087      	sub	sp, #28
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e404:	2300      	movs	r3, #0
 800e406:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e408:	2300      	movs	r3, #0
 800e40a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e40c:	2300      	movs	r3, #0
 800e40e:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d017      	beq.n	800e446 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	3b01      	subs	r3, #1
 800e41a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e41c:	e005      	b.n	800e42a <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	085b      	lsrs	r3, r3, #1
 800e422:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e424:	89fb      	ldrh	r3, [r7, #14]
 800e426:	3301      	adds	r3, #1
 800e428:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e430:	2b00      	cmp	r3, #0
 800e432:	d1f4      	bne.n	800e41e <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e434:	89fb      	ldrh	r3, [r7, #14]
 800e436:	021b      	lsls	r3, r3, #8
 800e438:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	b2db      	uxtb	r3, r3
 800e440:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e442:	4413      	add	r3, r2
 800e444:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e446:	8afb      	ldrh	r3, [r7, #22]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	371c      	adds	r7, #28
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	4603      	mov	r3, r0
 800e45c:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e462:	88fb      	ldrh	r3, [r7, #6]
 800e464:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e466:	88fa      	ldrh	r2, [r7, #6]
 800e468:	0a12      	lsrs	r2, r2, #8
 800e46a:	b292      	uxth	r2, r2
 800e46c:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e46e:	3301      	adds	r3, #1
 800e470:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e472:	68fb      	ldr	r3, [r7, #12]
}
 800e474:	4618      	mov	r0, r3
 800e476:	3714      	adds	r7, #20
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr

0800e480 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b088      	sub	sp, #32
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	607a      	str	r2, [r7, #4]
 800e48c:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e48e:	2300      	movs	r3, #0
 800e490:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800e496:	2300      	movs	r3, #0
 800e498:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800e49e:	887b      	ldrh	r3, [r7, #2]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d102      	bne.n	800e4aa <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800e4a4:	23f1      	movs	r3, #241	; 0xf1
 800e4a6:	77fb      	strb	r3, [r7, #31]
 800e4a8:	e05d      	b.n	800e566 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ac:	799a      	ldrb	r2, [r3, #6]
 800e4ae:	887b      	ldrh	r3, [r7, #2]
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7ff fe8b 	bl	800e1ce <VL53L1_calc_macro_period_us>
 800e4b8:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800e4ba:	6979      	ldr	r1, [r7, #20]
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f7ff ff17 	bl	800e2f0 <VL53L1_calc_timeout_mclks>
 800e4c2:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	2bff      	cmp	r3, #255	; 0xff
 800e4c8:	d901      	bls.n	800e4ce <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800e4ca:	23ff      	movs	r3, #255	; 0xff
 800e4cc:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e4ce:	69bb      	ldr	r3, [r7, #24]
 800e4d0:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800e4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d4:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e4d6:	6979      	ldr	r1, [r7, #20]
 800e4d8:	68b8      	ldr	r0, [r7, #8]
 800e4da:	f7ff ff20 	bl	800e31e <VL53L1_calc_encoded_timeout>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e4e2:	8a7b      	ldrh	r3, [r7, #18]
 800e4e4:	0a1b      	lsrs	r3, r3, #8
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800e4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ec:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e4ee:	8a7b      	ldrh	r3, [r7, #18]
 800e4f0:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f4:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e4f6:	6979      	ldr	r1, [r7, #20]
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7ff ff10 	bl	800e31e <VL53L1_calc_encoded_timeout>
 800e4fe:	4603      	mov	r3, r0
 800e500:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e502:	8a7b      	ldrh	r3, [r7, #18]
 800e504:	0a1b      	lsrs	r3, r3, #8
 800e506:	b29b      	uxth	r3, r3
 800e508:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e50e:	8a7b      	ldrh	r3, [r7, #18]
 800e510:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800e512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e514:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e518:	7a5a      	ldrb	r2, [r3, #9]
 800e51a:	887b      	ldrh	r3, [r7, #2]
 800e51c:	4611      	mov	r1, r2
 800e51e:	4618      	mov	r0, r3
 800e520:	f7ff fe55 	bl	800e1ce <VL53L1_calc_macro_period_us>
 800e524:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800e526:	6979      	ldr	r1, [r7, #20]
 800e528:	68b8      	ldr	r0, [r7, #8]
 800e52a:	f7ff fef8 	bl	800e31e <VL53L1_calc_encoded_timeout>
 800e52e:	4603      	mov	r3, r0
 800e530:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e532:	8a7b      	ldrh	r3, [r7, #18]
 800e534:	0a1b      	lsrs	r3, r3, #8
 800e536:	b29b      	uxth	r3, r3
 800e538:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800e53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53c:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e53e:	8a7b      	ldrh	r3, [r7, #18]
 800e540:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800e542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e544:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800e546:	6979      	ldr	r1, [r7, #20]
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7ff fee8 	bl	800e31e <VL53L1_calc_encoded_timeout>
 800e54e:	4603      	mov	r3, r0
 800e550:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e552:	8a7b      	ldrh	r3, [r7, #18]
 800e554:	0a1b      	lsrs	r3, r3, #8
 800e556:	b29b      	uxth	r3, r3
 800e558:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800e55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e55e:	8a7b      	ldrh	r3, [r7, #18]
 800e560:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800e562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e564:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800e566:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3720      	adds	r7, #32
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800e572:	b480      	push	{r7}
 800e574:	b083      	sub	sp, #12
 800e576:	af00      	add	r7, sp, #0
 800e578:	4603      	mov	r3, r0
 800e57a:	603a      	str	r2, [r7, #0]
 800e57c:	71fb      	strb	r3, [r7, #7]
 800e57e:	460b      	mov	r3, r1
 800e580:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800e582:	79fb      	ldrb	r3, [r7, #7]
 800e584:	2b07      	cmp	r3, #7
 800e586:	d90a      	bls.n	800e59e <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800e588:	79bb      	ldrb	r3, [r7, #6]
 800e58a:	00db      	lsls	r3, r3, #3
 800e58c:	b2da      	uxtb	r2, r3
 800e58e:	79fb      	ldrb	r3, [r7, #7]
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	b2db      	uxtb	r3, r3
 800e594:	3b71      	subs	r3, #113	; 0x71
 800e596:	b2da      	uxtb	r2, r3
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800e59c:	e00a      	b.n	800e5b4 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800e59e:	79bb      	ldrb	r3, [r7, #6]
 800e5a0:	f1c3 030f 	rsb	r3, r3, #15
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	00db      	lsls	r3, r3, #3
 800e5a8:	b2da      	uxtb	r2, r3
 800e5aa:	79fb      	ldrb	r3, [r7, #7]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	701a      	strb	r2, [r3, #0]
}
 800e5b4:	bf00      	nop
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
 800e5cc:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800e5ce:	7bfb      	ldrb	r3, [r7, #15]
 800e5d0:	091b      	lsrs	r3, r3, #4
 800e5d2:	b2da      	uxtb	r2, r3
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800e5d8:	7bfb      	ldrb	r3, [r7, #15]
 800e5da:	f003 030f 	and.w	r3, r3, #15
 800e5de:	b2da      	uxtb	r2, r3
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	701a      	strb	r2, [r3, #0]

}
 800e5e4:	bf00      	nop
 800e5e6:	3714      	adds	r7, #20
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr

0800e5f0 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	603a      	str	r2, [r7, #0]
 800e5fa:	71fb      	strb	r3, [r7, #7]
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800e600:	79bb      	ldrb	r3, [r7, #6]
 800e602:	011b      	lsls	r3, r3, #4
 800e604:	b2da      	uxtb	r2, r3
 800e606:	79fb      	ldrb	r3, [r7, #7]
 800e608:	4413      	add	r3, r2
 800e60a:	b2da      	uxtb	r2, r3
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	701a      	strb	r2, [r3, #0]

}
 800e610:	bf00      	nop
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e624:	2300      	movs	r3, #0
 800e626:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	2203      	movs	r2, #3
 800e630:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	2200      	movs	r2, #0
 800e638:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	2200      	movs	r2, #0
 800e648:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	2200      	movs	r2, #0
 800e650:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	2200      	movs	r2, #0
 800e658:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	2200      	movs	r2, #0
 800e660:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	2200      	movs	r2, #0
 800e668:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	2200      	movs	r2, #0
 800e670:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800e674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3714      	adds	r7, #20
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr

0800e684 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e684:	b480      	push	{r7}
 800e686:	b087      	sub	sp, #28
 800e688:	af00      	add	r7, sp, #0
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e690:	2300      	movs	r3, #0
 800e692:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2201      	movs	r2, #1
 800e698:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2200      	movs	r2, #0
 800e69e:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	229b      	movs	r2, #155	; 0x9b
 800e6a4:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e6a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	371c      	adds	r7, #28
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr

0800e6b6 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e6b6:	b480      	push	{r7}
 800e6b8:	b085      	sub	sp, #20
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800e6e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6e8:	b2da      	uxtb	r2, r3
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e6f6:	f003 0303 	and.w	r3, r3, #3
 800e6fa:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e706:	4413      	add	r3, r2
 800e708:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2201      	movs	r2, #1
 800e714:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800e730:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e734:	4618      	mov	r0, r3
 800e736:	3714      	adds	r7, #20
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e740:	b480      	push	{r7}
 800e742:	b085      	sub	sp, #20
 800e744:	af00      	add	r7, sp, #0
 800e746:	4603      	mov	r3, r0
 800e748:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800e74a:	2300      	movs	r3, #0
 800e74c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e74e:	88fb      	ldrh	r3, [r7, #6]
 800e750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e754:	fb92 f3f3 	sdiv	r3, r2, r3
 800e758:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e75a:	68fb      	ldr	r3, [r7, #12]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3714      	adds	r7, #20
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800e768:	b480      	push	{r7}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	4603      	mov	r3, r0
 800e770:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800e772:	2300      	movs	r3, #0
 800e774:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800e776:	79fb      	ldrb	r3, [r7, #7]
 800e778:	3301      	adds	r3, #1
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	005b      	lsls	r3, r3, #1
 800e77e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800e780:	7bfb      	ldrb	r3, [r7, #15]
}
 800e782:	4618      	mov	r0, r3
 800e784:	3714      	adds	r7, #20
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr

0800e78e <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800e78e:	b480      	push	{r7}
 800e790:	b085      	sub	sp, #20
 800e792:	af00      	add	r7, sp, #0
 800e794:	4603      	mov	r3, r0
 800e796:	60b9      	str	r1, [r7, #8]
 800e798:	607a      	str	r2, [r7, #4]
 800e79a:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800e79c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	da10      	bge.n	800e7c6 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800e7a4:	7bfb      	ldrb	r3, [r7, #15]
 800e7a6:	43db      	mvns	r3, r3
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	f003 0307 	and.w	r3, r3, #7
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	3308      	adds	r3, #8
 800e7b2:	b2da      	uxtb	r2, r3
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800e7b8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ba:	3b80      	subs	r3, #128	; 0x80
 800e7bc:	10db      	asrs	r3, r3, #3
 800e7be:	b2da      	uxtb	r2, r3
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800e7c4:	e00c      	b.n	800e7e0 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800e7c6:	7bfb      	ldrb	r3, [r7, #15]
 800e7c8:	f003 0307 	and.w	r3, r3, #7
 800e7cc:	b2da      	uxtb	r2, r3
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800e7d2:	7bfb      	ldrb	r3, [r7, #15]
 800e7d4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800e7d8:	10db      	asrs	r3, r3, #3
 800e7da:	b2da      	uxtb	r2, r3
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	701a      	strb	r2, [r3, #0]
}
 800e7e0:	bf00      	nop
 800e7e2:	3714      	adds	r7, #20
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr

0800e7ec <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b086      	sub	sp, #24
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	607a      	str	r2, [r7, #4]
 800e7f8:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e7fe:	897b      	ldrh	r3, [r7, #10]
 800e800:	2b0a      	cmp	r3, #10
 800e802:	d802      	bhi.n	800e80a <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e804:	f06f 0309 	mvn.w	r3, #9
 800e808:	e047      	b.n	800e89a <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e812:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e820:	f002 020f 	and.w	r2, r2, #15
 800e824:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800e826:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e830:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e834:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e836:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e840:	f002 0203 	and.w	r2, r2, #3
 800e844:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e846:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e850:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e854:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e856:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	88d8      	ldrh	r0, [r3, #6]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	3305      	adds	r3, #5
 800e860:	461a      	mov	r2, r3
 800e862:	2102      	movs	r1, #2
 800e864:	f7ff fb77 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e870:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800e876:	68fa      	ldr	r2, [r7, #12]
 800e878:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e87a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800e884:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e888:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e88a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800e890:	68fa      	ldr	r2, [r7, #12]
 800e892:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800e894:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e896:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3718      	adds	r7, #24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b086      	sub	sp, #24
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	60b9      	str	r1, [r7, #8]
 800e8ac:	607a      	str	r2, [r7, #4]
 800e8ae:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e8b4:	89fb      	ldrh	r3, [r7, #14]
 800e8b6:	2b0a      	cmp	r3, #10
 800e8b8:	d802      	bhi.n	800e8c0 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e8ba:	f06f 0309 	mvn.w	r3, #9
 800e8be:	e046      	b.n	800e94e <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8c8:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	f003 030f 	and.w	r3, r3, #15
 800e8d8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	3302      	adds	r3, #2
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8e8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	3303      	adds	r3, #3
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	f003 0303 	and.w	r3, r3, #3
 800e8f8:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	3304      	adds	r3, #4
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e908:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	3305      	adds	r3, #5
 800e912:	4619      	mov	r1, r3
 800e914:	2002      	movs	r0, #2
 800e916:	f7ff fb49 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800e91a:	4603      	mov	r3, r0
 800e91c:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	79da      	ldrb	r2, [r3, #7]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	7a1a      	ldrb	r2, [r3, #8]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	3309      	adds	r3, #9
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e93c:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	7a9a      	ldrb	r2, [r3, #10]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800e94a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3718      	adds	r7, #24
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}

0800e956 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e956:	b580      	push	{r7, lr}
 800e958:	b086      	sub	sp, #24
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
 800e95e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e960:	2300      	movs	r3, #0
 800e962:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d108      	bne.n	800e97e <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e96c:	f107 020c 	add.w	r2, r7, #12
 800e970:	230b      	movs	r3, #11
 800e972:	2101      	movs	r1, #1
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f001 f8e7 	bl	800fb48 <VL53L1_ReadMulti>
 800e97a:	4603      	mov	r3, r0
 800e97c:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e97e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d108      	bne.n	800e998 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800e986:	f107 030c 	add.w	r3, r7, #12
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	4619      	mov	r1, r3
 800e98e:	200b      	movs	r0, #11
 800e990:	f7ff ff87 	bl	800e8a2 <VL53L1_i2c_decode_static_nvm_managed>
 800e994:	4603      	mov	r3, r0
 800e996:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e998:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3718      	adds	r7, #24
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	607a      	str	r2, [r7, #4]
 800e9b0:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e9b6:	897b      	ldrh	r3, [r7, #10]
 800e9b8:	2b16      	cmp	r3, #22
 800e9ba:	d802      	bhi.n	800e9c2 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e9bc:	f06f 0309 	mvn.w	r3, #9
 800e9c0:	e076      	b.n	800eab0 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e9d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800e9d8:	68fa      	ldr	r2, [r7, #12]
 800e9da:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800e9dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800e9e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800e9f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e9fa:	f002 020f 	and.w	r2, r2, #15
 800e9fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ea00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800ea06:	68fa      	ldr	r2, [r7, #12]
 800ea08:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800ea0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ea14:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ea18:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ea1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800ea24:	f002 0203 	and.w	r2, r2, #3
 800ea28:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ea2a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	8958      	ldrh	r0, [r3, #10]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	3309      	adds	r3, #9
 800ea34:	461a      	mov	r2, r3
 800ea36:	2102      	movs	r1, #2
 800ea38:	f7ff fa8d 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	330b      	adds	r3, #11
 800ea46:	461a      	mov	r2, r3
 800ea48:	2102      	movs	r1, #2
 800ea4a:	f7ff facf 	bl	800dfec <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	330d      	adds	r3, #13
 800ea58:	461a      	mov	r2, r3
 800ea5a:	2102      	movs	r1, #2
 800ea5c:	f7ff fac6 	bl	800dfec <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	8a18      	ldrh	r0, [r3, #16]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	330f      	adds	r3, #15
 800ea68:	461a      	mov	r2, r3
 800ea6a:	2102      	movs	r1, #2
 800ea6c:	f7ff fa73 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800ea76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea7a:	b218      	sxth	r0, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	3311      	adds	r3, #17
 800ea80:	461a      	mov	r2, r3
 800ea82:	2102      	movs	r1, #2
 800ea84:	f7ff fab2 	bl	800dfec <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	3313      	adds	r3, #19
 800ea92:	461a      	mov	r2, r3
 800ea94:	2102      	movs	r1, #2
 800ea96:	f7ff faa9 	bl	800dfec <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	3315      	adds	r3, #21
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	2102      	movs	r1, #2
 800eaa8:	f7ff faa0 	bl	800dfec <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800eaac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3718      	adds	r7, #24
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b086      	sub	sp, #24
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	4603      	mov	r3, r0
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]
 800eac4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800eac6:	2300      	movs	r3, #0
 800eac8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800eaca:	89fb      	ldrh	r3, [r7, #14]
 800eacc:	2b16      	cmp	r3, #22
 800eace:	d802      	bhi.n	800ead6 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ead0:	f06f 0309 	mvn.w	r3, #9
 800ead4:	e079      	b.n	800ebca <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	785a      	ldrb	r2, [r3, #1]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	789a      	ldrb	r2, [r3, #2]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	78da      	ldrb	r2, [r3, #3]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	791a      	ldrb	r2, [r3, #4]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	3305      	adds	r3, #5
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	f003 030f 	and.w	r3, r3, #15
 800eb08:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	799a      	ldrb	r2, [r3, #6]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	3307      	adds	r3, #7
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb20:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	3308      	adds	r3, #8
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	f003 0303 	and.w	r3, r3, #3
 800eb30:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	3309      	adds	r3, #9
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	2002      	movs	r0, #2
 800eb3e:	f7ff fa35 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800eb42:	4603      	mov	r3, r0
 800eb44:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	330b      	adds	r3, #11
 800eb4e:	4619      	mov	r1, r3
 800eb50:	2002      	movs	r0, #2
 800eb52:	f7ff fa77 	bl	800e044 <VL53L1_i2c_decode_int16_t>
 800eb56:	4603      	mov	r3, r0
 800eb58:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	330d      	adds	r3, #13
 800eb62:	4619      	mov	r1, r3
 800eb64:	2002      	movs	r0, #2
 800eb66:	f7ff fa6d 	bl	800e044 <VL53L1_i2c_decode_int16_t>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	330f      	adds	r3, #15
 800eb76:	4619      	mov	r1, r3
 800eb78:	2002      	movs	r0, #2
 800eb7a:	f7ff fa17 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	3311      	adds	r3, #17
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	2002      	movs	r0, #2
 800eb8e:	f7ff fa59 	bl	800e044 <VL53L1_i2c_decode_int16_t>
 800eb92:	4603      	mov	r3, r0
 800eb94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb98:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	3313      	adds	r3, #19
 800eba2:	4619      	mov	r1, r3
 800eba4:	2002      	movs	r0, #2
 800eba6:	f7ff fa4d 	bl	800e044 <VL53L1_i2c_decode_int16_t>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	3315      	adds	r3, #21
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	2002      	movs	r0, #2
 800ebba:	f7ff fa43 	bl	800e044 <VL53L1_i2c_decode_int16_t>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800ebc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3718      	adds	r7, #24
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b088      	sub	sp, #32
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
 800ebda:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ebe0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d108      	bne.n	800ebfa <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800ebe8:	f107 0208 	add.w	r2, r7, #8
 800ebec:	2317      	movs	r3, #23
 800ebee:	210d      	movs	r1, #13
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f000 ffa9 	bl	800fb48 <VL53L1_ReadMulti>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800ebfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d108      	bne.n	800ec14 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800ec02:	f107 0308 	add.w	r3, r7, #8
 800ec06:	683a      	ldr	r2, [r7, #0]
 800ec08:	4619      	mov	r1, r3
 800ec0a:	2017      	movs	r0, #23
 800ec0c:	f7ff ff54 	bl	800eab8 <VL53L1_i2c_decode_customer_nvm_managed>
 800ec10:	4603      	mov	r3, r0
 800ec12:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ec14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3720      	adds	r7, #32
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b086      	sub	sp, #24
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	607a      	str	r2, [r7, #4]
 800ec2c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ec32:	897b      	ldrh	r3, [r7, #10]
 800ec34:	2b1f      	cmp	r3, #31
 800ec36:	d802      	bhi.n	800ec3e <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ec38:	f06f 0309 	mvn.w	r3, #9
 800ec3c:	e0cf      	b.n	800edde <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	881b      	ldrh	r3, [r3, #0]
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	2102      	movs	r1, #2
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7ff f985 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800ec54:	f002 0201 	and.w	r2, r2, #1
 800ec58:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ec5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800ec64:	f002 020f 	and.w	r2, r2, #15
 800ec68:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ec6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800ec74:	f002 020f 	and.w	r2, r2, #15
 800ec78:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ec7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800ec84:	f002 021f 	and.w	r2, r2, #31
 800ec88:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ec8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ec94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ec98:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ec9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800eca4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eca8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ecaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800ecb4:	f002 0201 	and.w	r2, r2, #1
 800ecb8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ecba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800ecc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ecce:	f002 0201 	and.w	r2, r2, #1
 800ecd2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ecd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ecde:	f002 0203 	and.w	r2, r2, #3
 800ece2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ece4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800ecee:	f002 021f 	and.w	r2, r2, #31
 800ecf2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800ecf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800ecfe:	f002 0203 	and.w	r2, r2, #3
 800ed02:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800ed04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800ed0e:	f002 0203 	and.w	r2, r2, #3
 800ed12:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800ed14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800ed1e:	f002 0207 	and.w	r2, r2, #7
 800ed22:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800ed24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800ed2e:	f002 021f 	and.w	r2, r2, #31
 800ed32:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800ed34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800ed3e:	f002 0201 	and.w	r2, r2, #1
 800ed42:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800ed44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800ed4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800ed58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800ed5e:	68fa      	ldr	r2, [r7, #12]
 800ed60:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800ed62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800ed68:	68fa      	ldr	r2, [r7, #12]
 800ed6a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800ed6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800ed72:	68fa      	ldr	r2, [r7, #12]
 800ed74:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800ed76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800ed7c:	68fa      	ldr	r2, [r7, #12]
 800ed7e:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800ed80:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	8b18      	ldrh	r0, [r3, #24]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	3318      	adds	r3, #24
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	2102      	movs	r1, #2
 800ed8e:	f7ff f8e2 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800ed9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800eda4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800edae:	f002 020f 	and.w	r2, r2, #15
 800edb2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800edb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800edba:	68fa      	ldr	r2, [r7, #12]
 800edbc:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800edbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800edc8:	f002 020f 	and.w	r2, r2, #15
 800edcc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800edce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800edd4:	68fa      	ldr	r2, [r7, #12]
 800edd6:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800edd8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800edda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3718      	adds	r7, #24
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b086      	sub	sp, #24
 800edea:	af00      	add	r7, sp, #0
 800edec:	60f8      	str	r0, [r7, #12]
 800edee:	460b      	mov	r3, r1
 800edf0:	607a      	str	r2, [r7, #4]
 800edf2:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800edf4:	2300      	movs	r3, #0
 800edf6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800edf8:	897b      	ldrh	r3, [r7, #10]
 800edfa:	2b15      	cmp	r3, #21
 800edfc:	d802      	bhi.n	800ee04 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800edfe:	f06f 0309 	mvn.w	r3, #9
 800ee02:	e070      	b.n	800eee6 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800ee10:	68fa      	ldr	r2, [r7, #12]
 800ee12:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ee14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800ee1a:	68fa      	ldr	r2, [r7, #12]
 800ee1c:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800ee1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800ee28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ee2c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ee2e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800ee34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee38:	b298      	uxth	r0, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	3304      	adds	r3, #4
 800ee3e:	461a      	mov	r2, r3
 800ee40:	2102      	movs	r1, #2
 800ee42:	f7ff f888 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800ee4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ee52:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ee54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800ee5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800ee64:	68fa      	ldr	r2, [r7, #12]
 800ee66:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800ee68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800ee72:	f002 0201 	and.w	r2, r2, #1
 800ee76:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ee78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800ee82:	f002 0207 	and.w	r2, r2, #7
 800ee86:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ee88:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	8998      	ldrh	r0, [r3, #12]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	330c      	adds	r3, #12
 800ee92:	461a      	mov	r2, r3
 800ee94:	2102      	movs	r1, #2
 800ee96:	f7ff f85e 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	89d8      	ldrh	r0, [r3, #14]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	330e      	adds	r3, #14
 800eea2:	461a      	mov	r2, r3
 800eea4:	2102      	movs	r1, #2
 800eea6:	f7ff f856 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	8a18      	ldrh	r0, [r3, #16]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	3310      	adds	r3, #16
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	2102      	movs	r1, #2
 800eeb6:	f7ff f84e 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800eebe:	68fa      	ldr	r2, [r7, #12]
 800eec0:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800eec2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800eec8:	68fa      	ldr	r2, [r7, #12]
 800eeca:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800eecc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800eed2:	68fa      	ldr	r2, [r7, #12]
 800eed4:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800eed6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800eedc:	68fa      	ldr	r2, [r7, #12]
 800eede:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800eee0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800eee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3718      	adds	r7, #24
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800eeee:	b580      	push	{r7, lr}
 800eef0:	b086      	sub	sp, #24
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	60f8      	str	r0, [r7, #12]
 800eef6:	460b      	mov	r3, r1
 800eef8:	607a      	str	r2, [r7, #4]
 800eefa:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800eefc:	2300      	movs	r3, #0
 800eefe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ef00:	897b      	ldrh	r3, [r7, #10]
 800ef02:	2b16      	cmp	r3, #22
 800ef04:	d802      	bhi.n	800ef0c <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ef06:	f06f 0309 	mvn.w	r3, #9
 800ef0a:	e06e      	b.n	800efea <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	f003 030f 	and.w	r3, r3, #15
 800ef14:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ef22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ef2c:	f002 020f 	and.w	r2, r2, #15
 800ef30:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ef32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800ef38:	68fa      	ldr	r2, [r7, #12]
 800ef3a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ef3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ef46:	f002 020f 	and.w	r2, r2, #15
 800ef4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ef4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800ef56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800ef60:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ef64:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ef66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800ef70:	f002 020f 	and.w	r2, r2, #15
 800ef74:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ef76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800ef80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800ef8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ef8e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ef90:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	8958      	ldrh	r0, [r3, #10]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	330a      	adds	r3, #10
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	2102      	movs	r1, #2
 800ef9e:	f7fe ffda 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	8998      	ldrh	r0, [r3, #12]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	330c      	adds	r3, #12
 800efaa:	461a      	mov	r2, r3
 800efac:	2102      	movs	r1, #2
 800efae:	f7fe ffd2 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800efb6:	68fa      	ldr	r2, [r7, #12]
 800efb8:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800efba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800efc4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	6918      	ldr	r0, [r3, #16]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	3312      	adds	r3, #18
 800efce:	461a      	mov	r2, r3
 800efd0:	2104      	movs	r1, #4
 800efd2:	f7ff f860 	bl	800e096 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800efde:	f002 0201 	and.w	r2, r2, #1
 800efe2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800efe4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800efe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800efea:	4618      	mov	r0, r3
 800efec:	3718      	adds	r7, #24
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800eff2:	b580      	push	{r7, lr}
 800eff4:	b086      	sub	sp, #24
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	60f8      	str	r0, [r7, #12]
 800effa:	460b      	mov	r3, r1
 800effc:	607a      	str	r2, [r7, #4]
 800effe:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f000:	2300      	movs	r3, #0
 800f002:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800f004:	897b      	ldrh	r3, [r7, #10]
 800f006:	2b11      	cmp	r3, #17
 800f008:	d802      	bhi.n	800f010 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f00a:	f06f 0309 	mvn.w	r3, #9
 800f00e:	e071      	b.n	800f0f4 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	f003 0303 	and.w	r3, r3, #3
 800f018:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	8858      	ldrh	r0, [r3, #2]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	3301      	adds	r3, #1
 800f026:	461a      	mov	r2, r3
 800f028:	2102      	movs	r1, #2
 800f02a:	f7fe ff94 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	8898      	ldrh	r0, [r3, #4]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	3303      	adds	r3, #3
 800f036:	461a      	mov	r2, r3
 800f038:	2102      	movs	r1, #2
 800f03a:	f7fe ff8c 	bl	800df56 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f046:	f002 0201 	and.w	r2, r2, #1
 800f04a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f04c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800f056:	f002 0207 	and.w	r2, r2, #7
 800f05a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f05c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800f062:	68fa      	ldr	r2, [r7, #12]
 800f064:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f066:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f070:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f07a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f07e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f080:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f08a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f08e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f090:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f09a:	f002 0203 	and.w	r2, r2, #3
 800f09e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f0a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800f0aa:	f002 0203 	and.w	r2, r2, #3
 800f0ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f0b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800f0ba:	f002 020f 	and.w	r2, r2, #15
 800f0be:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f0c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800f0ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800f0d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800f0da:	68fa      	ldr	r2, [r7, #12]
 800f0dc:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800f0de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800f0e8:	f002 0203 	and.w	r2, r2, #3
 800f0ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f0ee:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f0f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3718      	adds	r7, #24
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b087      	sub	sp, #28
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	460b      	mov	r3, r1
 800f106:	607a      	str	r2, [r7, #4]
 800f108:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f10a:	2300      	movs	r3, #0
 800f10c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800f10e:	897b      	ldrh	r3, [r7, #10]
 800f110:	2b04      	cmp	r3, #4
 800f112:	d802      	bhi.n	800f11a <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f114:	f06f 0309 	mvn.w	r3, #9
 800f118:	e025      	b.n	800f166 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	f003 0301 	and.w	r3, r3, #1
 800f122:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800f130:	f002 0201 	and.w	r2, r2, #1
 800f134:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f136:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800f140:	f002 0201 	and.w	r2, r2, #1
 800f144:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f146:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800f150:	f002 0203 	and.w	r2, r2, #3
 800f154:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f156:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800f15c:	68fa      	ldr	r2, [r7, #12]
 800f15e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f160:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f166:	4618      	mov	r0, r3
 800f168:	371c      	adds	r7, #28
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr

0800f172 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800f172:	b580      	push	{r7, lr}
 800f174:	b086      	sub	sp, #24
 800f176:	af00      	add	r7, sp, #0
 800f178:	4603      	mov	r3, r0
 800f17a:	60b9      	str	r1, [r7, #8]
 800f17c:	607a      	str	r2, [r7, #4]
 800f17e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f180:	2300      	movs	r3, #0
 800f182:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f184:	89fb      	ldrh	r3, [r7, #14]
 800f186:	2b2b      	cmp	r3, #43	; 0x2b
 800f188:	d802      	bhi.n	800f190 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f18a:	f06f 0309 	mvn.w	r3, #9
 800f18e:	e0e2      	b.n	800f356 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f198:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	785a      	ldrb	r2, [r3, #1]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	3302      	adds	r3, #2
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	f003 030f 	and.w	r3, r3, #15
 800f1b0:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	78da      	ldrb	r2, [r3, #3]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	3304      	adds	r3, #4
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	2002      	movs	r0, #2
 800f1c6:	f7fe fef1 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	3306      	adds	r3, #6
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	2002      	movs	r0, #2
 800f1da:	f7fe fee7 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	3308      	adds	r3, #8
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	2002      	movs	r0, #2
 800f1ee:	f7fe fedd 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	330a      	adds	r3, #10
 800f1fe:	4619      	mov	r1, r3
 800f200:	2002      	movs	r0, #2
 800f202:	f7fe fed3 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f206:	4603      	mov	r3, r0
 800f208:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	330c      	adds	r3, #12
 800f212:	4619      	mov	r1, r3
 800f214:	2002      	movs	r0, #2
 800f216:	f7fe fec9 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f21a:	4603      	mov	r3, r0
 800f21c:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	330e      	adds	r3, #14
 800f226:	4619      	mov	r1, r3
 800f228:	2002      	movs	r0, #2
 800f22a:	f7fe febf 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f22e:	4603      	mov	r3, r0
 800f230:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	3310      	adds	r3, #16
 800f23a:	4619      	mov	r1, r3
 800f23c:	2002      	movs	r0, #2
 800f23e:	f7fe feb5 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f242:	4603      	mov	r3, r0
 800f244:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	3312      	adds	r3, #18
 800f24e:	4619      	mov	r1, r3
 800f250:	2002      	movs	r0, #2
 800f252:	f7fe feab 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f256:	4603      	mov	r3, r0
 800f258:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	3314      	adds	r3, #20
 800f262:	4619      	mov	r1, r3
 800f264:	2002      	movs	r0, #2
 800f266:	f7fe fea1 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f26a:	4603      	mov	r3, r0
 800f26c:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	3316      	adds	r3, #22
 800f276:	4619      	mov	r1, r3
 800f278:	2002      	movs	r0, #2
 800f27a:	f7fe fe97 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f27e:	4603      	mov	r3, r0
 800f280:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	3318      	adds	r3, #24
 800f28a:	4619      	mov	r1, r3
 800f28c:	2002      	movs	r0, #2
 800f28e:	f7fe fe8d 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f292:	4603      	mov	r3, r0
 800f294:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	331a      	adds	r3, #26
 800f29e:	4619      	mov	r1, r3
 800f2a0:	2002      	movs	r0, #2
 800f2a2:	f7fe fe83 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	331c      	adds	r3, #28
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	2002      	movs	r0, #2
 800f2b6:	f7fe fe79 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	331e      	adds	r3, #30
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	2002      	movs	r0, #2
 800f2ca:	f7fe fe6f 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	3320      	adds	r3, #32
 800f2da:	4619      	mov	r1, r3
 800f2dc:	2002      	movs	r0, #2
 800f2de:	f7fe fe65 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	3322      	adds	r3, #34	; 0x22
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	2002      	movs	r0, #2
 800f2f2:	f7fe fe5b 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	3324      	adds	r3, #36	; 0x24
 800f302:	4619      	mov	r1, r3
 800f304:	2002      	movs	r0, #2
 800f306:	f7fe fe51 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f30a:	4603      	mov	r3, r0
 800f30c:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	3326      	adds	r3, #38	; 0x26
 800f316:	4619      	mov	r1, r3
 800f318:	2002      	movs	r0, #2
 800f31a:	f7fe fe47 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f31e:	4603      	mov	r3, r0
 800f320:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	3328      	adds	r3, #40	; 0x28
 800f32a:	4619      	mov	r1, r3
 800f32c:	2002      	movs	r0, #2
 800f32e:	f7fe fe3d 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f332:	4603      	mov	r3, r0
 800f334:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800f352:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f356:	4618      	mov	r0, r3
 800f358:	3718      	adds	r7, #24
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b086      	sub	sp, #24
 800f362:	af00      	add	r7, sp, #0
 800f364:	4603      	mov	r3, r0
 800f366:	60b9      	str	r1, [r7, #8]
 800f368:	607a      	str	r2, [r7, #4]
 800f36a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f36c:	2300      	movs	r3, #0
 800f36e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f370:	89fb      	ldrh	r3, [r7, #14]
 800f372:	2b20      	cmp	r3, #32
 800f374:	d802      	bhi.n	800f37c <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f376:	f06f 0309 	mvn.w	r3, #9
 800f37a:	e04d      	b.n	800f418 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800f37c:	68b9      	ldr	r1, [r7, #8]
 800f37e:	2004      	movs	r0, #4
 800f380:	f7fe feb3 	bl	800e0ea <VL53L1_i2c_decode_uint32_t>
 800f384:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	3304      	adds	r3, #4
 800f38e:	4619      	mov	r1, r3
 800f390:	2004      	movs	r0, #4
 800f392:	f7fe feaa 	bl	800e0ea <VL53L1_i2c_decode_uint32_t>
 800f396:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	3308      	adds	r3, #8
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	2004      	movs	r0, #4
 800f3a4:	f7fe febe 	bl	800e124 <VL53L1_i2c_decode_int32_t>
 800f3a8:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	330c      	adds	r3, #12
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	2004      	movs	r0, #4
 800f3b6:	f7fe fe98 	bl	800e0ea <VL53L1_i2c_decode_uint32_t>
 800f3ba:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	3310      	adds	r3, #16
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	2004      	movs	r0, #4
 800f3c8:	f7fe fe8f 	bl	800e0ea <VL53L1_i2c_decode_uint32_t>
 800f3cc:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	3314      	adds	r3, #20
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	2004      	movs	r0, #4
 800f3da:	f7fe fe86 	bl	800e0ea <VL53L1_i2c_decode_uint32_t>
 800f3de:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	3318      	adds	r3, #24
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	2004      	movs	r0, #4
 800f3ec:	f7fe fe9a 	bl	800e124 <VL53L1_i2c_decode_int32_t>
 800f3f0:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	331c      	adds	r3, #28
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	2004      	movs	r0, #4
 800f3fe:	f7fe fe74 	bl	800e0ea <VL53L1_i2c_decode_uint32_t>
 800f402:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800f414:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3718      	adds	r7, #24
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b086      	sub	sp, #24
 800f424:	af00      	add	r7, sp, #0
 800f426:	4603      	mov	r3, r0
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	607a      	str	r2, [r7, #4]
 800f42c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f42e:	2300      	movs	r3, #0
 800f430:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f432:	89fb      	ldrh	r3, [r7, #14]
 800f434:	2b37      	cmp	r3, #55	; 0x37
 800f436:	d802      	bhi.n	800f43e <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f438:	f06f 0309 	mvn.w	r3, #9
 800f43c:	e15e      	b.n	800f6fc <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800f43e:	68b9      	ldr	r1, [r7, #8]
 800f440:	2002      	movs	r0, #2
 800f442:	f7fe fdb3 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f446:	4603      	mov	r3, r0
 800f448:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	3302      	adds	r3, #2
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f458:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	3303      	adds	r3, #3
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f468:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	3304      	adds	r3, #4
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	f003 0303 	and.w	r3, r3, #3
 800f478:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	3305      	adds	r3, #5
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	f003 0301 	and.w	r3, r3, #1
 800f488:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	3306      	adds	r3, #6
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f498:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	3307      	adds	r3, #7
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4a8:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	3308      	adds	r3, #8
 800f4b2:	4619      	mov	r1, r3
 800f4b4:	2002      	movs	r0, #2
 800f4b6:	f7fe fd79 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f4c0:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	330a      	adds	r3, #10
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	f003 0303 	and.w	r3, r3, #3
 800f4d0:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	330b      	adds	r3, #11
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	f003 0303 	and.w	r3, r3, #3
 800f4e0:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	330c      	adds	r3, #12
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	f003 030f 	and.w	r3, r3, #15
 800f4f0:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	330d      	adds	r3, #13
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	f003 0307 	and.w	r3, r3, #7
 800f500:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	330e      	adds	r3, #14
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	f003 0301 	and.w	r3, r3, #1
 800f510:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	330f      	adds	r3, #15
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	f003 0303 	and.w	r3, r3, #3
 800f520:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	7c1a      	ldrb	r2, [r3, #16]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	7c5a      	ldrb	r2, [r3, #17]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	3312      	adds	r3, #18
 800f53a:	4619      	mov	r1, r3
 800f53c:	2002      	movs	r0, #2
 800f53e:	f7fe fd35 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f542:	4603      	mov	r3, r0
 800f544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f548:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	3316      	adds	r3, #22
 800f552:	4619      	mov	r1, r3
 800f554:	2002      	movs	r0, #2
 800f556:	f7fe fd29 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f55a:	4603      	mov	r3, r0
 800f55c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	3318      	adds	r3, #24
 800f566:	4619      	mov	r1, r3
 800f568:	2002      	movs	r0, #2
 800f56a:	f7fe fd1f 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f56e:	4603      	mov	r3, r0
 800f570:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	331a      	adds	r3, #26
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	f003 0301 	and.w	r3, r3, #1
 800f580:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	331b      	adds	r3, #27
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	f003 0307 	and.w	r3, r3, #7
 800f590:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	7f1a      	ldrb	r2, [r3, #28]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	7f5a      	ldrb	r2, [r3, #29]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	331e      	adds	r3, #30
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5b0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	331f      	adds	r3, #31
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5c0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	3320      	adds	r3, #32
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	f003 0303 	and.w	r3, r3, #3
 800f5d0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	3321      	adds	r3, #33	; 0x21
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	f003 030f 	and.w	r3, r3, #15
 800f5e0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	3325      	adds	r3, #37	; 0x25
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	f003 0301 	and.w	r3, r3, #1
 800f614:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	3326      	adds	r3, #38	; 0x26
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	f003 0303 	and.w	r3, r3, #3
 800f626:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	3327      	adds	r3, #39	; 0x27
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	f003 031f 	and.w	r3, r3, #31
 800f638:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	3328      	adds	r3, #40	; 0x28
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	f003 031f 	and.w	r3, r3, #31
 800f64a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	3329      	adds	r3, #41	; 0x29
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	f003 031f 	and.w	r3, r3, #31
 800f65c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	332a      	adds	r3, #42	; 0x2a
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	f003 0301 	and.w	r3, r3, #1
 800f66e:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	332b      	adds	r3, #43	; 0x2b
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	f003 0301 	and.w	r3, r3, #1
 800f680:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	332c      	adds	r3, #44	; 0x2c
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	f003 0303 	and.w	r3, r3, #3
 800f692:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	332d      	adds	r3, #45	; 0x2d
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6a4:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	332e      	adds	r3, #46	; 0x2e
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	2004      	movs	r0, #4
 800f6b4:	f7fe fd19 	bl	800e0ea <VL53L1_i2c_decode_uint32_t>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	3332      	adds	r3, #50	; 0x32
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	2004      	movs	r0, #4
 800f6ca:	f7fe fd0e 	bl	800e0ea <VL53L1_i2c_decode_uint32_t>
 800f6ce:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	3336      	adds	r3, #54	; 0x36
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	f003 0301 	and.w	r3, r3, #1
 800f6de:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	3337      	adds	r3, #55	; 0x37
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	f003 0301 	and.w	r3, r3, #1
 800f6f0:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800f6f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3718      	adds	r7, #24
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b086      	sub	sp, #24
 800f708:	af00      	add	r7, sp, #0
 800f70a:	4603      	mov	r3, r0
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	607a      	str	r2, [r7, #4]
 800f710:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f712:	2300      	movs	r3, #0
 800f714:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800f716:	89fb      	ldrh	r3, [r7, #14]
 800f718:	2b30      	cmp	r3, #48	; 0x30
 800f71a:	d802      	bhi.n	800f722 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f71c:	f06f 0309 	mvn.w	r3, #9
 800f720:	e112      	b.n	800f948 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	785a      	ldrb	r2, [r3, #1]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	789a      	ldrb	r2, [r3, #2]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	3303      	adds	r3, #3
 800f73e:	4619      	mov	r1, r3
 800f740:	2002      	movs	r0, #2
 800f742:	f7fe fc33 	bl	800dfac <VL53L1_i2c_decode_uint16_t>
 800f746:	4603      	mov	r3, r0
 800f748:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	3305      	adds	r3, #5
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f758:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	3306      	adds	r3, #6
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	f003 0307 	and.w	r3, r3, #7
 800f768:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	3307      	adds	r3, #7
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	f003 0307 	and.w	r3, r3, #7
 800f778:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	3308      	adds	r3, #8
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f788:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	3309      	adds	r3, #9
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f798:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	330a      	adds	r3, #10
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	f003 0301 	and.w	r3, r3, #1
 800f7a8:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	330b      	adds	r3, #11
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7b8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	330c      	adds	r3, #12
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	f003 0301 	and.w	r3, r3, #1
 800f7c8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	330d      	adds	r3, #13
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7d8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	330e      	adds	r3, #14
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7e8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	7bda      	ldrb	r2, [r3, #15]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	7c1a      	ldrb	r2, [r3, #16]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	7c5a      	ldrb	r2, [r3, #17]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	7c9a      	ldrb	r2, [r3, #18]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	7cda      	ldrb	r2, [r3, #19]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	7d1a      	ldrb	r2, [r3, #20]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	7d5a      	ldrb	r2, [r3, #21]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	7d9a      	ldrb	r2, [r3, #22]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	7dda      	ldrb	r2, [r3, #23]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	7e1a      	ldrb	r2, [r3, #24]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	7e5a      	ldrb	r2, [r3, #25]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	7e9a      	ldrb	r2, [r3, #26]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	7eda      	ldrb	r2, [r3, #27]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	7f1a      	ldrb	r2, [r3, #28]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	7f5a      	ldrb	r2, [r3, #29]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	7f9a      	ldrb	r2, [r3, #30]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	7fda      	ldrb	r2, [r3, #31]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800f944:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3718      	adds	r7, #24
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b090      	sub	sp, #64	; 0x40
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f95a:	2300      	movs	r3, #0
 800f95c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800f960:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f964:	2b00      	cmp	r3, #0
 800f966:	d10a      	bne.n	800f97e <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800f968:	f107 020c 	add.w	r2, r7, #12
 800f96c:	2331      	movs	r3, #49	; 0x31
 800f96e:	f240 110f 	movw	r1, #271	; 0x10f
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f000 f8e8 	bl	800fb48 <VL53L1_ReadMulti>
 800f978:	4603      	mov	r3, r0
 800f97a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800f97e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f982:	2b00      	cmp	r3, #0
 800f984:	d109      	bne.n	800f99a <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800f986:	f107 030c 	add.w	r3, r7, #12
 800f98a:	683a      	ldr	r2, [r7, #0]
 800f98c:	4619      	mov	r1, r3
 800f98e:	2031      	movs	r0, #49	; 0x31
 800f990:	f7ff feb8 	bl	800f704 <VL53L1_i2c_decode_nvm_copy_data>
 800f994:	4603      	mov	r3, r0
 800f996:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f99a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3740      	adds	r7, #64	; 0x40
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b086      	sub	sp, #24
 800f9aa:	af02      	add	r7, sp, #8
 800f9ac:	6078      	str	r0, [r7, #4]
 800f9ae:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800f9b4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 f9b9 	bl	800fd30 <VL53L1_WaitUs>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800f9c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d10b      	bne.n	800f9e2 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	9301      	str	r3, [sp, #4]
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	9300      	str	r3, [sp, #0]
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	22e5      	movs	r2, #229	; 0xe5
 800f9d6:	6839      	ldr	r1, [r7, #0]
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f000 f9bf 	bl	800fd5c <VL53L1_WaitValueMaskEx>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800f9e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d103      	bne.n	800f9f2 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800f9ea:	2103      	movs	r1, #3
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f7fe f896 	bl	800db1e <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800f9f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3710      	adds	r7, #16
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}

0800f9fe <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800f9fe:	b580      	push	{r7, lr}
 800fa00:	b088      	sub	sp, #32
 800fa02:	af02      	add	r7, sp, #8
 800fa04:	6078      	str	r0, [r7, #4]
 800fa06:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800fa10:	2300      	movs	r3, #0
 800fa12:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 800fa14:	2300      	movs	r3, #0
 800fa16:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800fa1e:	f003 0310 	and.w	r3, r3, #16
 800fa22:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d102      	bne.n	800fa30 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	75fb      	strb	r3, [r7, #23]
 800fa2e:	e001      	b.n	800fa34 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 800fa30:	2300      	movs	r3, #0
 800fa32:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 800fa34:	7dfb      	ldrb	r3, [r7, #23]
 800fa36:	2201      	movs	r2, #1
 800fa38:	9201      	str	r2, [sp, #4]
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	9200      	str	r2, [sp, #0]
 800fa3e:	2231      	movs	r2, #49	; 0x31
 800fa40:	6839      	ldr	r1, [r7, #0]
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 f98a 	bl	800fd5c <VL53L1_WaitValueMaskEx>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800fa4c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3718      	adds	r7, #24
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b088      	sub	sp, #32
 800fa5c:	af02      	add	r7, sp, #8
 800fa5e:	60f8      	str	r0, [r7, #12]
 800fa60:	60b9      	str	r1, [r7, #8]
 800fa62:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	330a      	adds	r3, #10
 800fa68:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800fa76:	b299      	uxth	r1, r3
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	b29a      	uxth	r2, r3
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	9300      	str	r3, [sp, #0]
 800fa80:	4613      	mov	r3, r2
 800fa82:	68ba      	ldr	r2, [r7, #8]
 800fa84:	f7f5 f9b0 	bl	8004de8 <HAL_I2C_Master_Transmit>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fa8c:	693b      	ldr	r3, [r7, #16]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3718      	adds	r7, #24
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}

0800fa96 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fa96:	b580      	push	{r7, lr}
 800fa98:	b088      	sub	sp, #32
 800fa9a:	af02      	add	r7, sp, #8
 800fa9c:	60f8      	str	r0, [r7, #12]
 800fa9e:	60b9      	str	r1, [r7, #8]
 800faa0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	330a      	adds	r3, #10
 800faa6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800fab4:	f043 0301 	orr.w	r3, r3, #1
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	b299      	uxth	r1, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	9300      	str	r3, [sp, #0]
 800fac4:	4613      	mov	r3, r2
 800fac6:	68ba      	ldr	r2, [r7, #8]
 800fac8:	f7f5 fa8c 	bl	8004fe4 <HAL_I2C_Master_Receive>
 800facc:	4603      	mov	r3, r0
 800face:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fad0:	693b      	ldr	r3, [r7, #16]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3718      	adds	r7, #24
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
	...

0800fadc <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800fadc:	b580      	push	{r7, lr}
 800fade:	b086      	sub	sp, #24
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	607a      	str	r2, [r7, #4]
 800fae6:	603b      	str	r3, [r7, #0]
 800fae8:	460b      	mov	r3, r1
 800faea:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800faec:	2300      	movs	r3, #0
 800faee:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	2bff      	cmp	r3, #255	; 0xff
 800faf4:	d902      	bls.n	800fafc <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800faf6:	f06f 0303 	mvn.w	r3, #3
 800fafa:	e01d      	b.n	800fb38 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800fafc:	897b      	ldrh	r3, [r7, #10]
 800fafe:	0a1b      	lsrs	r3, r3, #8
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	b2da      	uxtb	r2, r3
 800fb04:	4b0e      	ldr	r3, [pc, #56]	; (800fb40 <VL53L1_WriteMulti+0x64>)
 800fb06:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fb08:	897b      	ldrh	r3, [r7, #10]
 800fb0a:	b2da      	uxtb	r2, r3
 800fb0c:	4b0c      	ldr	r3, [pc, #48]	; (800fb40 <VL53L1_WriteMulti+0x64>)
 800fb0e:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800fb10:	683a      	ldr	r2, [r7, #0]
 800fb12:	6879      	ldr	r1, [r7, #4]
 800fb14:	480b      	ldr	r0, [pc, #44]	; (800fb44 <VL53L1_WriteMulti+0x68>)
 800fb16:	f000 fb97 	bl	8010248 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	3302      	adds	r3, #2
 800fb1e:	461a      	mov	r2, r3
 800fb20:	4907      	ldr	r1, [pc, #28]	; (800fb40 <VL53L1_WriteMulti+0x64>)
 800fb22:	68f8      	ldr	r0, [r7, #12]
 800fb24:	f7ff ff98 	bl	800fa58 <_I2CWrite>
 800fb28:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d001      	beq.n	800fb34 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fb30:	23f3      	movs	r3, #243	; 0xf3
 800fb32:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800fb34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3718      	adds	r7, #24
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	20000698 	.word	0x20000698
 800fb44:	2000069a 	.word	0x2000069a

0800fb48 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	607a      	str	r2, [r7, #4]
 800fb52:	603b      	str	r3, [r7, #0]
 800fb54:	460b      	mov	r3, r1
 800fb56:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fb5c:	897b      	ldrh	r3, [r7, #10]
 800fb5e:	0a1b      	lsrs	r3, r3, #8
 800fb60:	b29b      	uxth	r3, r3
 800fb62:	b2da      	uxtb	r2, r3
 800fb64:	4b12      	ldr	r3, [pc, #72]	; (800fbb0 <VL53L1_ReadMulti+0x68>)
 800fb66:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fb68:	897b      	ldrh	r3, [r7, #10]
 800fb6a:	b2da      	uxtb	r2, r3
 800fb6c:	4b10      	ldr	r3, [pc, #64]	; (800fbb0 <VL53L1_ReadMulti+0x68>)
 800fb6e:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fb70:	2202      	movs	r2, #2
 800fb72:	490f      	ldr	r1, [pc, #60]	; (800fbb0 <VL53L1_ReadMulti+0x68>)
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f7ff ff6f 	bl	800fa58 <_I2CWrite>
 800fb7a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d002      	beq.n	800fb88 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fb82:	23f3      	movs	r3, #243	; 0xf3
 800fb84:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fb86:	e00c      	b.n	800fba2 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800fb88:	683a      	ldr	r2, [r7, #0]
 800fb8a:	6879      	ldr	r1, [r7, #4]
 800fb8c:	68f8      	ldr	r0, [r7, #12]
 800fb8e:	f7ff ff82 	bl	800fa96 <_I2CRead>
 800fb92:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d002      	beq.n	800fba0 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fb9a:	23f3      	movs	r3, #243	; 0xf3
 800fb9c:	75fb      	strb	r3, [r7, #23]
 800fb9e:	e000      	b.n	800fba2 <VL53L1_ReadMulti+0x5a>
    }
done:
 800fba0:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800fba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3718      	adds	r7, #24
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	20000698 	.word	0x20000698

0800fbb4 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	807b      	strh	r3, [r7, #2]
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fbc8:	887b      	ldrh	r3, [r7, #2]
 800fbca:	0a1b      	lsrs	r3, r3, #8
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	b2da      	uxtb	r2, r3
 800fbd0:	4b0c      	ldr	r3, [pc, #48]	; (800fc04 <VL53L1_WrByte+0x50>)
 800fbd2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fbd4:	887b      	ldrh	r3, [r7, #2]
 800fbd6:	b2da      	uxtb	r2, r3
 800fbd8:	4b0a      	ldr	r3, [pc, #40]	; (800fc04 <VL53L1_WrByte+0x50>)
 800fbda:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800fbdc:	4a09      	ldr	r2, [pc, #36]	; (800fc04 <VL53L1_WrByte+0x50>)
 800fbde:	787b      	ldrb	r3, [r7, #1]
 800fbe0:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800fbe2:	2203      	movs	r2, #3
 800fbe4:	4907      	ldr	r1, [pc, #28]	; (800fc04 <VL53L1_WrByte+0x50>)
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f7ff ff36 	bl	800fa58 <_I2CWrite>
 800fbec:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d001      	beq.n	800fbf8 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fbf4:	23f3      	movs	r3, #243	; 0xf3
 800fbf6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800fbf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3710      	adds	r7, #16
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}
 800fc04:	20000698 	.word	0x20000698

0800fc08 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b086      	sub	sp, #24
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	460b      	mov	r3, r1
 800fc12:	607a      	str	r2, [r7, #4]
 800fc14:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fc16:	2300      	movs	r3, #0
 800fc18:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800fc1a:	897b      	ldrh	r3, [r7, #10]
 800fc1c:	0a1b      	lsrs	r3, r3, #8
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	b2da      	uxtb	r2, r3
 800fc22:	4b12      	ldr	r3, [pc, #72]	; (800fc6c <VL53L1_RdByte+0x64>)
 800fc24:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fc26:	897b      	ldrh	r3, [r7, #10]
 800fc28:	b2da      	uxtb	r2, r3
 800fc2a:	4b10      	ldr	r3, [pc, #64]	; (800fc6c <VL53L1_RdByte+0x64>)
 800fc2c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fc2e:	2202      	movs	r2, #2
 800fc30:	490e      	ldr	r1, [pc, #56]	; (800fc6c <VL53L1_RdByte+0x64>)
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	f7ff ff10 	bl	800fa58 <_I2CWrite>
 800fc38:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d002      	beq.n	800fc46 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fc40:	23f3      	movs	r3, #243	; 0xf3
 800fc42:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fc44:	e00c      	b.n	800fc60 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800fc46:	2201      	movs	r2, #1
 800fc48:	6879      	ldr	r1, [r7, #4]
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f7ff ff23 	bl	800fa96 <_I2CRead>
 800fc50:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d002      	beq.n	800fc5e <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fc58:	23f3      	movs	r3, #243	; 0xf3
 800fc5a:	75fb      	strb	r3, [r7, #23]
 800fc5c:	e000      	b.n	800fc60 <VL53L1_RdByte+0x58>
    }
done:
 800fc5e:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800fc60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3718      	adds	r7, #24
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	20000698 	.word	0x20000698

0800fc70 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	460b      	mov	r3, r1
 800fc7a:	607a      	str	r2, [r7, #4]
 800fc7c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fc82:	897b      	ldrh	r3, [r7, #10]
 800fc84:	0a1b      	lsrs	r3, r3, #8
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	b2da      	uxtb	r2, r3
 800fc8a:	4b18      	ldr	r3, [pc, #96]	; (800fcec <VL53L1_RdWord+0x7c>)
 800fc8c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fc8e:	897b      	ldrh	r3, [r7, #10]
 800fc90:	b2da      	uxtb	r2, r3
 800fc92:	4b16      	ldr	r3, [pc, #88]	; (800fcec <VL53L1_RdWord+0x7c>)
 800fc94:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fc96:	2202      	movs	r2, #2
 800fc98:	4914      	ldr	r1, [pc, #80]	; (800fcec <VL53L1_RdWord+0x7c>)
 800fc9a:	68f8      	ldr	r0, [r7, #12]
 800fc9c:	f7ff fedc 	bl	800fa58 <_I2CWrite>
 800fca0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d002      	beq.n	800fcae <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fca8:	23f3      	movs	r3, #243	; 0xf3
 800fcaa:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fcac:	e017      	b.n	800fcde <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800fcae:	2202      	movs	r2, #2
 800fcb0:	490e      	ldr	r1, [pc, #56]	; (800fcec <VL53L1_RdWord+0x7c>)
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f7ff feef 	bl	800fa96 <_I2CRead>
 800fcb8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d002      	beq.n	800fcc6 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fcc0:	23f3      	movs	r3, #243	; 0xf3
 800fcc2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fcc4:	e00b      	b.n	800fcde <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800fcc6:	4b09      	ldr	r3, [pc, #36]	; (800fcec <VL53L1_RdWord+0x7c>)
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	021b      	lsls	r3, r3, #8
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	4b06      	ldr	r3, [pc, #24]	; (800fcec <VL53L1_RdWord+0x7c>)
 800fcd2:	785b      	ldrb	r3, [r3, #1]
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	4413      	add	r3, r2
 800fcd8:	b29a      	uxth	r2, r3
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800fcde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3718      	adds	r7, #24
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	20000698 	.word	0x20000698

0800fcf0 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b085      	sub	sp, #20
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800fd02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3714      	adds	r7, #20
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr

0800fd12 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800fd12:	b580      	push	{r7, lr}
 800fd14:	b082      	sub	sp, #8
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
 800fd1a:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7f3 fcda 	bl	80036d8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3708      	adds	r7, #8
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
	...

0800fd30 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	4a06      	ldr	r2, [pc, #24]	; (800fd58 <VL53L1_WaitUs+0x28>)
 800fd3e:	fb82 1203 	smull	r1, r2, r2, r3
 800fd42:	1192      	asrs	r2, r2, #6
 800fd44:	17db      	asrs	r3, r3, #31
 800fd46:	1ad3      	subs	r3, r2, r3
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7f3 fcc5 	bl	80036d8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800fd4e:	2300      	movs	r3, #0
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	3708      	adds	r7, #8
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	10624dd3 	.word	0x10624dd3

0800fd5c <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800fd5c:	b590      	push	{r4, r7, lr}
 800fd5e:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	f107 040c 	add.w	r4, r7, #12
 800fd68:	6020      	str	r0, [r4, #0]
 800fd6a:	f107 0008 	add.w	r0, r7, #8
 800fd6e:	6001      	str	r1, [r0, #0]
 800fd70:	4619      	mov	r1, r3
 800fd72:	1dbb      	adds	r3, r7, #6
 800fd74:	801a      	strh	r2, [r3, #0]
 800fd76:	1d7b      	adds	r3, r7, #5
 800fd78:	460a      	mov	r2, r1
 800fd7a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800fd82:	2300      	movs	r3, #0
 800fd84:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800fd94:	2300      	movs	r3, #0
 800fd96:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800fda0:	f107 0310 	add.w	r3, r7, #16
 800fda4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fda8:	4935      	ldr	r1, [pc, #212]	; (800fe80 <VL53L1_WaitValueMaskEx+0x124>)
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 fa62 	bl	8010274 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800fdb0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7ff ff9b 	bl	800fcf0 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800fdba:	e03f      	b.n	800fe3c <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800fdbc:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d10b      	bne.n	800fddc <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 800fdc4:	f207 2213 	addw	r2, r7, #531	; 0x213
 800fdc8:	1dbb      	adds	r3, r7, #6
 800fdca:	8819      	ldrh	r1, [r3, #0]
 800fdcc:	f107 030c 	add.w	r3, r7, #12
 800fdd0:	6818      	ldr	r0, [r3, #0]
 800fdd2:	f7ff ff19 	bl	800fc08 <VL53L1_RdByte>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800fddc:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800fde0:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800fde4:	4013      	ands	r3, r2
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	1d7a      	adds	r2, r7, #5
 800fdea:	7812      	ldrb	r2, [r2, #0]
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d102      	bne.n	800fdf6 <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800fdf6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d112      	bne.n	800fe24 <VL53L1_WaitValueMaskEx+0xc8>
 800fdfe:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d10e      	bne.n	800fe24 <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 800fe06:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d00a      	beq.n	800fe24 <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800fe0e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800fe12:	f107 030c 	add.w	r3, r7, #12
 800fe16:	4611      	mov	r1, r2
 800fe18:	6818      	ldr	r0, [r3, #0]
 800fe1a:	f7ff ff7a 	bl	800fd12 <VL53L1_WaitMs>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800fe24:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7ff ff61 	bl	800fcf0 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800fe2e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800fe32:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800fe36:	1ad3      	subs	r3, r2, r3
 800fe38:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800fe3c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d10a      	bne.n	800fe5a <VL53L1_WaitValueMaskEx+0xfe>
 800fe44:	f107 0308 	add.w	r3, r7, #8
 800fe48:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d203      	bcs.n	800fe5a <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 800fe52:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d0b0      	beq.n	800fdbc <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800fe5a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d106      	bne.n	800fe70 <VL53L1_WaitValueMaskEx+0x114>
 800fe62:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d102      	bne.n	800fe70 <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 800fe6a:	23f9      	movs	r3, #249	; 0xf9
 800fe6c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800fe70:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd90      	pop	{r4, r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	08010530 	.word	0x08010530

0800fe84 <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b0a4      	sub	sp, #144	; 0x90
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fe8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fe92:	2200      	movs	r2, #0
 800fe94:	601a      	str	r2, [r3, #0]
 800fe96:	605a      	str	r2, [r3, #4]
 800fe98:	609a      	str	r2, [r3, #8]
 800fe9a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fe9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fea0:	2200      	movs	r2, #0
 800fea2:	601a      	str	r2, [r3, #0]
 800fea4:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800fea6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800feaa:	2200      	movs	r2, #0
 800feac:	601a      	str	r2, [r3, #0]
 800feae:	605a      	str	r2, [r3, #4]
 800feb0:	609a      	str	r2, [r3, #8]
 800feb2:	60da      	str	r2, [r3, #12]
 800feb4:	611a      	str	r2, [r3, #16]
 800feb6:	615a      	str	r2, [r3, #20]
 800feb8:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 800feba:	2300      	movs	r3, #0
 800febc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 800fec0:	2300      	movs	r3, #0
 800fec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 800fec6:	2300      	movs	r3, #0
 800fec8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 800fecc:	2301      	movs	r3, #1
 800fece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800fed2:	2300      	movs	r3, #0
 800fed4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800fed8:	e009      	b.n	800feee <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 800feda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fede:	005b      	lsls	r3, r3, #1
 800fee0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800fee4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800fee8:	3301      	adds	r3, #1
 800feea:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800feee:	79fa      	ldrb	r2, [r7, #7]
 800fef0:	494d      	ldr	r1, [pc, #308]	; (8010028 <DC_MOTOR_Init+0x1a4>)
 800fef2:	4613      	mov	r3, r2
 800fef4:	009b      	lsls	r3, r3, #2
 800fef6:	4413      	add	r3, r2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	440b      	add	r3, r1
 800fefc:	3310      	adds	r3, #16
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d3e8      	bcc.n	800feda <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 800ff08:	79fa      	ldrb	r2, [r7, #7]
 800ff0a:	4947      	ldr	r1, [pc, #284]	; (8010028 <DC_MOTOR_Init+0x1a4>)
 800ff0c:	4613      	mov	r3, r2
 800ff0e:	009b      	lsls	r3, r3, #2
 800ff10:	4413      	add	r3, r2
 800ff12:	009b      	lsls	r3, r3, #2
 800ff14:	440b      	add	r3, r1
 800ff16:	3308      	adds	r3, #8
 800ff18:	881b      	ldrh	r3, [r3, #0]
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	4b43      	ldr	r3, [pc, #268]	; (801002c <DC_MOTOR_Init+0x1a8>)
 800ff1e:	fb03 f302 	mul.w	r3, r3, r2
 800ff22:	4618      	mov	r0, r3
 800ff24:	79fa      	ldrb	r2, [r7, #7]
 800ff26:	4940      	ldr	r1, [pc, #256]	; (8010028 <DC_MOTOR_Init+0x1a4>)
 800ff28:	4613      	mov	r3, r2
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	4413      	add	r3, r2
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	440b      	add	r3, r1
 800ff32:	330c      	adds	r3, #12
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ff3a:	fb02 f303 	mul.w	r3, r2, r3
 800ff3e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ff42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 800ff46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff4a:	3b01      	subs	r3, #1
 800ff4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 800ff50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff54:	3b02      	subs	r3, #2
 800ff56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 800ff5a:	79fa      	ldrb	r2, [r7, #7]
 800ff5c:	4932      	ldr	r1, [pc, #200]	; (8010028 <DC_MOTOR_Init+0x1a4>)
 800ff5e:	4613      	mov	r3, r2
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	4413      	add	r3, r2
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	440b      	add	r3, r1
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 800ff6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff70:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800ff72:	2360      	movs	r3, #96	; 0x60
 800ff74:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 800ff76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff7a:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ff80:	2380      	movs	r3, #128	; 0x80
 800ff82:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 800ff84:	f107 0308 	add.w	r3, r7, #8
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7f7 fb89 	bl	80076a0 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ff8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff92:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800ff94:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800ff98:	f107 0308 	add.w	r3, r7, #8
 800ff9c:	4611      	mov	r1, r2
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7f8 fc34 	bl	800880c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800ffa4:	f107 0308 	add.w	r3, r7, #8
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7f7 fd2f 	bl	8007a0c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 800ffb6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ffba:	f107 0308 	add.w	r3, r7, #8
 800ffbe:	4611      	mov	r1, r2
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7f9 fbc3 	bl	800974c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ffc6:	2360      	movs	r3, #96	; 0x60
 800ffc8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800ffd6:	79fa      	ldrb	r2, [r7, #7]
 800ffd8:	4913      	ldr	r1, [pc, #76]	; (8010028 <DC_MOTOR_Init+0x1a4>)
 800ffda:	4613      	mov	r3, r2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	4413      	add	r3, r2
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	440b      	add	r3, r1
 800ffe4:	3304      	adds	r3, #4
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ffec:	f107 0308 	add.w	r3, r7, #8
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7f8 fa33 	bl	800845c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 800fff6:	f107 0308 	add.w	r3, r7, #8
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7f3 f8f2 	bl	80031e4 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8010000:	79fa      	ldrb	r2, [r7, #7]
 8010002:	4909      	ldr	r1, [pc, #36]	; (8010028 <DC_MOTOR_Init+0x1a4>)
 8010004:	4613      	mov	r3, r2
 8010006:	009b      	lsls	r3, r3, #2
 8010008:	4413      	add	r3, r2
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	440b      	add	r3, r1
 801000e:	3304      	adds	r3, #4
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	f107 0308 	add.w	r3, r7, #8
 8010016:	4611      	mov	r1, r2
 8010018:	4618      	mov	r0, r3
 801001a:	f7f7 fde7 	bl	8007bec <HAL_TIM_PWM_Start>
}
 801001e:	bf00      	nop
 8010020:	3790      	adds	r7, #144	; 0x90
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	08010574 	.word	0x08010574
 801002c:	000f4240 	.word	0x000f4240

08010030 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 8010030:	b480      	push	{r7}
 8010032:	b083      	sub	sp, #12
 8010034:	af00      	add	r7, sp, #0
 8010036:	4603      	mov	r3, r0
 8010038:	460a      	mov	r2, r1
 801003a:	71fb      	strb	r3, [r7, #7]
 801003c:	4613      	mov	r3, r2
 801003e:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8010040:	79fa      	ldrb	r2, [r7, #7]
 8010042:	4928      	ldr	r1, [pc, #160]	; (80100e4 <DC_MOTOR_Start+0xb4>)
 8010044:	4613      	mov	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4413      	add	r3, r2
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	440b      	add	r3, r1
 801004e:	3304      	adds	r3, #4
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d10a      	bne.n	801006c <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8010056:	79fa      	ldrb	r2, [r7, #7]
 8010058:	4922      	ldr	r1, [pc, #136]	; (80100e4 <DC_MOTOR_Start+0xb4>)
 801005a:	4613      	mov	r3, r2
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	4413      	add	r3, r2
 8010060:	009b      	lsls	r3, r3, #2
 8010062:	440b      	add	r3, r1
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	88ba      	ldrh	r2, [r7, #4]
 8010068:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 801006a:	e035      	b.n	80100d8 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 801006c:	79fa      	ldrb	r2, [r7, #7]
 801006e:	491d      	ldr	r1, [pc, #116]	; (80100e4 <DC_MOTOR_Start+0xb4>)
 8010070:	4613      	mov	r3, r2
 8010072:	009b      	lsls	r3, r3, #2
 8010074:	4413      	add	r3, r2
 8010076:	009b      	lsls	r3, r3, #2
 8010078:	440b      	add	r3, r1
 801007a:	3304      	adds	r3, #4
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2b04      	cmp	r3, #4
 8010080:	d10a      	bne.n	8010098 <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 8010082:	79fa      	ldrb	r2, [r7, #7]
 8010084:	4917      	ldr	r1, [pc, #92]	; (80100e4 <DC_MOTOR_Start+0xb4>)
 8010086:	4613      	mov	r3, r2
 8010088:	009b      	lsls	r3, r3, #2
 801008a:	4413      	add	r3, r2
 801008c:	009b      	lsls	r3, r3, #2
 801008e:	440b      	add	r3, r1
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	88ba      	ldrh	r2, [r7, #4]
 8010094:	639a      	str	r2, [r3, #56]	; 0x38
}
 8010096:	e01f      	b.n	80100d8 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8010098:	79fa      	ldrb	r2, [r7, #7]
 801009a:	4912      	ldr	r1, [pc, #72]	; (80100e4 <DC_MOTOR_Start+0xb4>)
 801009c:	4613      	mov	r3, r2
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	4413      	add	r3, r2
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	440b      	add	r3, r1
 80100a6:	3304      	adds	r3, #4
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2b08      	cmp	r3, #8
 80100ac:	d10a      	bne.n	80100c4 <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 80100ae:	79fa      	ldrb	r2, [r7, #7]
 80100b0:	490c      	ldr	r1, [pc, #48]	; (80100e4 <DC_MOTOR_Start+0xb4>)
 80100b2:	4613      	mov	r3, r2
 80100b4:	009b      	lsls	r3, r3, #2
 80100b6:	4413      	add	r3, r2
 80100b8:	009b      	lsls	r3, r3, #2
 80100ba:	440b      	add	r3, r1
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	88ba      	ldrh	r2, [r7, #4]
 80100c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80100c2:	e009      	b.n	80100d8 <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 80100c4:	79fa      	ldrb	r2, [r7, #7]
 80100c6:	4907      	ldr	r1, [pc, #28]	; (80100e4 <DC_MOTOR_Start+0xb4>)
 80100c8:	4613      	mov	r3, r2
 80100ca:	009b      	lsls	r3, r3, #2
 80100cc:	4413      	add	r3, r2
 80100ce:	009b      	lsls	r3, r3, #2
 80100d0:	440b      	add	r3, r1
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	88ba      	ldrh	r2, [r7, #4]
 80100d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80100d8:	bf00      	nop
 80100da:	370c      	adds	r7, #12
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr
 80100e4:	08010574 	.word	0x08010574

080100e8 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b083      	sub	sp, #12
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	4603      	mov	r3, r0
 80100f0:	460a      	mov	r2, r1
 80100f2:	71fb      	strb	r3, [r7, #7]
 80100f4:	4613      	mov	r3, r2
 80100f6:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80100f8:	79fa      	ldrb	r2, [r7, #7]
 80100fa:	4928      	ldr	r1, [pc, #160]	; (801019c <DC_MOTOR_Set_Speed+0xb4>)
 80100fc:	4613      	mov	r3, r2
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	4413      	add	r3, r2
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	440b      	add	r3, r1
 8010106:	3304      	adds	r3, #4
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d10a      	bne.n	8010124 <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 801010e:	79fa      	ldrb	r2, [r7, #7]
 8010110:	4922      	ldr	r1, [pc, #136]	; (801019c <DC_MOTOR_Set_Speed+0xb4>)
 8010112:	4613      	mov	r3, r2
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	4413      	add	r3, r2
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	440b      	add	r3, r1
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	88ba      	ldrh	r2, [r7, #4]
 8010120:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8010122:	e035      	b.n	8010190 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8010124:	79fa      	ldrb	r2, [r7, #7]
 8010126:	491d      	ldr	r1, [pc, #116]	; (801019c <DC_MOTOR_Set_Speed+0xb4>)
 8010128:	4613      	mov	r3, r2
 801012a:	009b      	lsls	r3, r3, #2
 801012c:	4413      	add	r3, r2
 801012e:	009b      	lsls	r3, r3, #2
 8010130:	440b      	add	r3, r1
 8010132:	3304      	adds	r3, #4
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	2b04      	cmp	r3, #4
 8010138:	d10a      	bne.n	8010150 <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 801013a:	79fa      	ldrb	r2, [r7, #7]
 801013c:	4917      	ldr	r1, [pc, #92]	; (801019c <DC_MOTOR_Set_Speed+0xb4>)
 801013e:	4613      	mov	r3, r2
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	4413      	add	r3, r2
 8010144:	009b      	lsls	r3, r3, #2
 8010146:	440b      	add	r3, r1
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	88ba      	ldrh	r2, [r7, #4]
 801014c:	639a      	str	r2, [r3, #56]	; 0x38
}
 801014e:	e01f      	b.n	8010190 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8010150:	79fa      	ldrb	r2, [r7, #7]
 8010152:	4912      	ldr	r1, [pc, #72]	; (801019c <DC_MOTOR_Set_Speed+0xb4>)
 8010154:	4613      	mov	r3, r2
 8010156:	009b      	lsls	r3, r3, #2
 8010158:	4413      	add	r3, r2
 801015a:	009b      	lsls	r3, r3, #2
 801015c:	440b      	add	r3, r1
 801015e:	3304      	adds	r3, #4
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	2b08      	cmp	r3, #8
 8010164:	d10a      	bne.n	801017c <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8010166:	79fa      	ldrb	r2, [r7, #7]
 8010168:	490c      	ldr	r1, [pc, #48]	; (801019c <DC_MOTOR_Set_Speed+0xb4>)
 801016a:	4613      	mov	r3, r2
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	4413      	add	r3, r2
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	440b      	add	r3, r1
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	88ba      	ldrh	r2, [r7, #4]
 8010178:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801017a:	e009      	b.n	8010190 <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 801017c:	79fa      	ldrb	r2, [r7, #7]
 801017e:	4907      	ldr	r1, [pc, #28]	; (801019c <DC_MOTOR_Set_Speed+0xb4>)
 8010180:	4613      	mov	r3, r2
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	4413      	add	r3, r2
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	440b      	add	r3, r1
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	88ba      	ldrh	r2, [r7, #4]
 801018e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8010190:	bf00      	nop
 8010192:	370c      	adds	r7, #12
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr
 801019c:	08010574 	.word	0x08010574

080101a0 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80101a0:	b480      	push	{r7}
 80101a2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80101a4:	4b14      	ldr	r3, [pc, #80]	; (80101f8 <DWT_Delay_Init+0x58>)
 80101a6:	68db      	ldr	r3, [r3, #12]
 80101a8:	4a13      	ldr	r2, [pc, #76]	; (80101f8 <DWT_Delay_Init+0x58>)
 80101aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80101ae:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80101b0:	4b11      	ldr	r3, [pc, #68]	; (80101f8 <DWT_Delay_Init+0x58>)
 80101b2:	68db      	ldr	r3, [r3, #12]
 80101b4:	4a10      	ldr	r2, [pc, #64]	; (80101f8 <DWT_Delay_Init+0x58>)
 80101b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80101ba:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80101bc:	4b0f      	ldr	r3, [pc, #60]	; (80101fc <DWT_Delay_Init+0x5c>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4a0e      	ldr	r2, [pc, #56]	; (80101fc <DWT_Delay_Init+0x5c>)
 80101c2:	f023 0301 	bic.w	r3, r3, #1
 80101c6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80101c8:	4b0c      	ldr	r3, [pc, #48]	; (80101fc <DWT_Delay_Init+0x5c>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	4a0b      	ldr	r2, [pc, #44]	; (80101fc <DWT_Delay_Init+0x5c>)
 80101ce:	f043 0301 	orr.w	r3, r3, #1
 80101d2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80101d4:	4b09      	ldr	r3, [pc, #36]	; (80101fc <DWT_Delay_Init+0x5c>)
 80101d6:	2200      	movs	r2, #0
 80101d8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80101da:	bf00      	nop
    __ASM volatile ("NOP");
 80101dc:	bf00      	nop
    __ASM volatile ("NOP");
 80101de:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80101e0:	4b06      	ldr	r3, [pc, #24]	; (80101fc <DWT_Delay_Init+0x5c>)
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d001      	beq.n	80101ec <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80101e8:	2300      	movs	r3, #0
 80101ea:	e000      	b.n	80101ee <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80101ec:	2301      	movs	r3, #1
    }
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr
 80101f8:	e000edf0 	.word	0xe000edf0
 80101fc:	e0001000 	.word	0xe0001000

08010200 <__libc_init_array>:
 8010200:	b570      	push	{r4, r5, r6, lr}
 8010202:	4d0d      	ldr	r5, [pc, #52]	; (8010238 <__libc_init_array+0x38>)
 8010204:	4c0d      	ldr	r4, [pc, #52]	; (801023c <__libc_init_array+0x3c>)
 8010206:	1b64      	subs	r4, r4, r5
 8010208:	10a4      	asrs	r4, r4, #2
 801020a:	2600      	movs	r6, #0
 801020c:	42a6      	cmp	r6, r4
 801020e:	d109      	bne.n	8010224 <__libc_init_array+0x24>
 8010210:	4d0b      	ldr	r5, [pc, #44]	; (8010240 <__libc_init_array+0x40>)
 8010212:	4c0c      	ldr	r4, [pc, #48]	; (8010244 <__libc_init_array+0x44>)
 8010214:	f000 f842 	bl	801029c <_init>
 8010218:	1b64      	subs	r4, r4, r5
 801021a:	10a4      	asrs	r4, r4, #2
 801021c:	2600      	movs	r6, #0
 801021e:	42a6      	cmp	r6, r4
 8010220:	d105      	bne.n	801022e <__libc_init_array+0x2e>
 8010222:	bd70      	pop	{r4, r5, r6, pc}
 8010224:	f855 3b04 	ldr.w	r3, [r5], #4
 8010228:	4798      	blx	r3
 801022a:	3601      	adds	r6, #1
 801022c:	e7ee      	b.n	801020c <__libc_init_array+0xc>
 801022e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010232:	4798      	blx	r3
 8010234:	3601      	adds	r6, #1
 8010236:	e7f2      	b.n	801021e <__libc_init_array+0x1e>
 8010238:	080105a4 	.word	0x080105a4
 801023c:	080105a4 	.word	0x080105a4
 8010240:	080105a4 	.word	0x080105a4
 8010244:	080105a8 	.word	0x080105a8

08010248 <memcpy>:
 8010248:	440a      	add	r2, r1
 801024a:	4291      	cmp	r1, r2
 801024c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010250:	d100      	bne.n	8010254 <memcpy+0xc>
 8010252:	4770      	bx	lr
 8010254:	b510      	push	{r4, lr}
 8010256:	f811 4b01 	ldrb.w	r4, [r1], #1
 801025a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801025e:	4291      	cmp	r1, r2
 8010260:	d1f9      	bne.n	8010256 <memcpy+0xe>
 8010262:	bd10      	pop	{r4, pc}

08010264 <memset>:
 8010264:	4402      	add	r2, r0
 8010266:	4603      	mov	r3, r0
 8010268:	4293      	cmp	r3, r2
 801026a:	d100      	bne.n	801026e <memset+0xa>
 801026c:	4770      	bx	lr
 801026e:	f803 1b01 	strb.w	r1, [r3], #1
 8010272:	e7f9      	b.n	8010268 <memset+0x4>

08010274 <strncpy>:
 8010274:	b510      	push	{r4, lr}
 8010276:	3901      	subs	r1, #1
 8010278:	4603      	mov	r3, r0
 801027a:	b132      	cbz	r2, 801028a <strncpy+0x16>
 801027c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010280:	f803 4b01 	strb.w	r4, [r3], #1
 8010284:	3a01      	subs	r2, #1
 8010286:	2c00      	cmp	r4, #0
 8010288:	d1f7      	bne.n	801027a <strncpy+0x6>
 801028a:	441a      	add	r2, r3
 801028c:	2100      	movs	r1, #0
 801028e:	4293      	cmp	r3, r2
 8010290:	d100      	bne.n	8010294 <strncpy+0x20>
 8010292:	bd10      	pop	{r4, pc}
 8010294:	f803 1b01 	strb.w	r1, [r3], #1
 8010298:	e7f9      	b.n	801028e <strncpy+0x1a>
	...

0801029c <_init>:
 801029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801029e:	bf00      	nop
 80102a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102a2:	bc08      	pop	{r3}
 80102a4:	469e      	mov	lr, r3
 80102a6:	4770      	bx	lr

080102a8 <_fini>:
 80102a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102aa:	bf00      	nop
 80102ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102ae:	bc08      	pop	{r3}
 80102b0:	469e      	mov	lr, r3
 80102b2:	4770      	bx	lr
