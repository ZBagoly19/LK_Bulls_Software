
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006d3c  08006d3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e1c  08006e1c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006e1c  08006e1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e24  08006e24  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e24  08006e24  00016e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e28  08006e28  00016e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000078  08006ea4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08006ea4  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018834  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a37  00000000  00000000  000388dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0003b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003c600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026357  00000000  00000000  0003d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017eb1  00000000  00000000  00063b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee464  00000000  00000000  0007b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169e5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000552c  00000000  00000000  00169eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d24 	.word	0x08006d24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006d24 	.word	0x08006d24

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b96e 	b.w	8000d90 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468c      	mov	ip, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8083 	bne.w	8000be2 <__udivmoddi4+0x116>
 8000adc:	428a      	cmp	r2, r1
 8000ade:	4617      	mov	r7, r2
 8000ae0:	d947      	bls.n	8000b72 <__udivmoddi4+0xa6>
 8000ae2:	fab2 f282 	clz	r2, r2
 8000ae6:	b142      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae8:	f1c2 0020 	rsb	r0, r2, #32
 8000aec:	fa24 f000 	lsr.w	r0, r4, r0
 8000af0:	4091      	lsls	r1, r2
 8000af2:	4097      	lsls	r7, r2
 8000af4:	ea40 0c01 	orr.w	ip, r0, r1
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbbc f6f8 	udiv	r6, ip, r8
 8000b04:	fa1f fe87 	uxth.w	lr, r7
 8000b08:	fb08 c116 	mls	r1, r8, r6, ip
 8000b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b10:	fb06 f10e 	mul.w	r1, r6, lr
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b1e:	f080 8119 	bcs.w	8000d54 <__udivmoddi4+0x288>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8116 	bls.w	8000d54 <__udivmoddi4+0x288>
 8000b28:	3e02      	subs	r6, #2
 8000b2a:	443b      	add	r3, r7
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3310 	mls	r3, r8, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b40:	45a6      	cmp	lr, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	193c      	adds	r4, r7, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8105 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b4e:	45a6      	cmp	lr, r4
 8000b50:	f240 8102 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b54:	3802      	subs	r0, #2
 8000b56:	443c      	add	r4, r7
 8000b58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5c:	eba4 040e 	sub.w	r4, r4, lr
 8000b60:	2600      	movs	r6, #0
 8000b62:	b11d      	cbz	r5, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c5 4300 	strd	r4, r3, [r5]
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	b902      	cbnz	r2, 8000b76 <__udivmoddi4+0xaa>
 8000b74:	deff      	udf	#255	; 0xff
 8000b76:	fab2 f282 	clz	r2, r2
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d150      	bne.n	8000c20 <__udivmoddi4+0x154>
 8000b7e:	1bcb      	subs	r3, r1, r7
 8000b80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b84:	fa1f f887 	uxth.w	r8, r7
 8000b88:	2601      	movs	r6, #1
 8000b8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b8e:	0c21      	lsrs	r1, r4, #16
 8000b90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b98:	fb08 f30c 	mul.w	r3, r8, ip
 8000b9c:	428b      	cmp	r3, r1
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ba0:	1879      	adds	r1, r7, r1
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0xe2>
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	f200 80e9 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1ac9      	subs	r1, r1, r3
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bbc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x10c>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x10a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80d9 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e7bf      	b.n	8000b62 <__udivmoddi4+0x96>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0x12e>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	f000 80b1 	beq.w	8000d4e <__udivmoddi4+0x282>
 8000bec:	2600      	movs	r6, #0
 8000bee:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	4631      	mov	r1, r6
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f683 	clz	r6, r3
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d14a      	bne.n	8000c98 <__udivmoddi4+0x1cc>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0x140>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80b8 	bhi.w	8000d7c <__udivmoddi4+0x2b0>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	468c      	mov	ip, r1
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d0a8      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000c1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c1e:	e7a5      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000c20:	f1c2 0320 	rsb	r3, r2, #32
 8000c24:	fa20 f603 	lsr.w	r6, r0, r3
 8000c28:	4097      	lsls	r7, r2
 8000c2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c32:	40d9      	lsrs	r1, r3
 8000c34:	4330      	orrs	r0, r6
 8000c36:	0c03      	lsrs	r3, r0, #16
 8000c38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c3c:	fa1f f887 	uxth.w	r8, r7
 8000c40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb06 f108 	mul.w	r1, r6, r8
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x19c>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c5a:	f080 808d 	bcs.w	8000d78 <__udivmoddi4+0x2ac>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 808a 	bls.w	8000d78 <__udivmoddi4+0x2ac>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b281      	uxth	r1, r0
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb00 f308 	mul.w	r3, r0, r8
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x1c4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c86:	d273      	bcs.n	8000d70 <__udivmoddi4+0x2a4>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d971      	bls.n	8000d70 <__udivmoddi4+0x2a4>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4439      	add	r1, r7
 8000c90:	1acb      	subs	r3, r1, r3
 8000c92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c96:	e778      	b.n	8000b8a <__udivmoddi4+0xbe>
 8000c98:	f1c6 0c20 	rsb	ip, r6, #32
 8000c9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ca4:	431c      	orrs	r4, r3
 8000ca6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000caa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cb2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	0c3b      	lsrs	r3, r7, #16
 8000cba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cbe:	fa1f f884 	uxth.w	r8, r4
 8000cc2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cca:	fb09 fa08 	mul.w	sl, r9, r8
 8000cce:	458a      	cmp	sl, r1
 8000cd0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x220>
 8000cda:	1861      	adds	r1, r4, r1
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce0:	d248      	bcs.n	8000d74 <__udivmoddi4+0x2a8>
 8000ce2:	458a      	cmp	sl, r1
 8000ce4:	d946      	bls.n	8000d74 <__udivmoddi4+0x2a8>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4421      	add	r1, r4
 8000cec:	eba1 010a 	sub.w	r1, r1, sl
 8000cf0:	b2bf      	uxth	r7, r7
 8000cf2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cfe:	fb00 f808 	mul.w	r8, r0, r8
 8000d02:	45b8      	cmp	r8, r7
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x24a>
 8000d06:	19e7      	adds	r7, r4, r7
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d22e      	bcs.n	8000d6c <__udivmoddi4+0x2a0>
 8000d0e:	45b8      	cmp	r8, r7
 8000d10:	d92c      	bls.n	8000d6c <__udivmoddi4+0x2a0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4427      	add	r7, r4
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	eba7 0708 	sub.w	r7, r7, r8
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	454f      	cmp	r7, r9
 8000d24:	46c6      	mov	lr, r8
 8000d26:	4649      	mov	r1, r9
 8000d28:	d31a      	bcc.n	8000d60 <__udivmoddi4+0x294>
 8000d2a:	d017      	beq.n	8000d5c <__udivmoddi4+0x290>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x27a>
 8000d2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d32:	eb67 0701 	sbc.w	r7, r7, r1
 8000d36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d3a:	40f2      	lsrs	r2, r6
 8000d3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d40:	40f7      	lsrs	r7, r6
 8000d42:	e9c5 2700 	strd	r2, r7, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e70b      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6fd      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d5c:	4543      	cmp	r3, r8
 8000d5e:	d2e5      	bcs.n	8000d2c <__udivmoddi4+0x260>
 8000d60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d64:	eb69 0104 	sbc.w	r1, r9, r4
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7df      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e7d2      	b.n	8000d16 <__udivmoddi4+0x24a>
 8000d70:	4660      	mov	r0, ip
 8000d72:	e78d      	b.n	8000c90 <__udivmoddi4+0x1c4>
 8000d74:	4681      	mov	r9, r0
 8000d76:	e7b9      	b.n	8000cec <__udivmoddi4+0x220>
 8000d78:	4666      	mov	r6, ip
 8000d7a:	e775      	b.n	8000c68 <__udivmoddi4+0x19c>
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0x14a>
 8000d80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d84:	4439      	add	r1, r7
 8000d86:	e713      	b.n	8000bb0 <__udivmoddi4+0xe4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	e724      	b.n	8000bd8 <__udivmoddi4+0x10c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000d94:	b5b0      	push	{r4, r5, r7, lr}
 8000d96:	b0a8      	sub	sp, #160	; 0xa0
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000db6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
 8000dc6:	615a      	str	r2, [r3, #20]
 8000dc8:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000dd6:	f005 fb15 	bl	8006404 <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	4aab      	ldr	r2, [pc, #684]	; (800108c <SERVO_Init+0x2f8>)
 8000dde:	015b      	lsls	r3, r3, #5
 8000de0:	4413      	add	r3, r2
 8000de2:	3314      	adds	r3, #20
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fbac 	bl	8000544 <__aeabi_ui2d>
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	4ba7      	ldr	r3, [pc, #668]	; (8001090 <SERVO_Init+0x2fc>)
 8000df2:	f7ff fd4b 	bl	800088c <__aeabi_ddiv>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f7ff fe2d 	bl	8000a5c <__aeabi_d2uiz>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	4aa0      	ldr	r2, [pc, #640]	; (800108c <SERVO_Init+0x2f8>)
 8000e0c:	015b      	lsls	r3, r3, #5
 8000e0e:	4413      	add	r3, r2
 8000e10:	3314      	adds	r3, #20
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fb95 	bl	8000544 <__aeabi_ui2d>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	460d      	mov	r5, r1
 8000e1e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000e22:	f7ff fb8f 	bl	8000544 <__aeabi_ui2d>
 8000e26:	f04f 0200 	mov.w	r2, #0
 8000e2a:	4b9a      	ldr	r3, [pc, #616]	; (8001094 <SERVO_Init+0x300>)
 8000e2c:	f7ff fa4e 	bl	80002cc <__adddf3>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	4610      	mov	r0, r2
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	4b96      	ldr	r3, [pc, #600]	; (8001098 <SERVO_Init+0x304>)
 8000e3e:	f7ff fbfb 	bl	8000638 <__aeabi_dmul>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4620      	mov	r0, r4
 8000e48:	4629      	mov	r1, r5
 8000e4a:	f7ff fd1f 	bl	800088c <__aeabi_ddiv>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	4610      	mov	r0, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	4b8e      	ldr	r3, [pc, #568]	; (8001094 <SERVO_Init+0x300>)
 8000e5c:	f7ff fa34 	bl	80002c8 <__aeabi_dsub>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	4610      	mov	r0, r2
 8000e66:	4619      	mov	r1, r3
 8000e68:	f7ff fdf8 	bl	8000a5c <__aeabi_d2uiz>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000e72:	2313      	movs	r3, #19
 8000e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000e78:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	4a82      	ldr	r2, [pc, #520]	; (800108c <SERVO_Init+0x2f8>)
 8000e84:	015b      	lsls	r3, r3, #5
 8000e86:	4413      	add	r3, r2
 8000e88:	3308      	adds	r3, #8
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a83      	ldr	r2, [pc, #524]	; (800109c <SERVO_Init+0x308>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d10e      	bne.n	8000eb0 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	4b82      	ldr	r3, [pc, #520]	; (80010a0 <SERVO_Init+0x30c>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a81      	ldr	r2, [pc, #516]	; (80010a0 <SERVO_Init+0x30c>)
 8000e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b7f      	ldr	r3, [pc, #508]	; (80010a0 <SERVO_Init+0x30c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	e046      	b.n	8000f3e <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4a76      	ldr	r2, [pc, #472]	; (800108c <SERVO_Init+0x2f8>)
 8000eb4:	015b      	lsls	r3, r3, #5
 8000eb6:	4413      	add	r3, r2
 8000eb8:	3308      	adds	r3, #8
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec0:	d10e      	bne.n	8000ee0 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <SERVO_Init+0x30c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a75      	ldr	r2, [pc, #468]	; (80010a0 <SERVO_Init+0x30c>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <SERVO_Init+0x30c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	e02e      	b.n	8000f3e <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	4a6a      	ldr	r2, [pc, #424]	; (800108c <SERVO_Init+0x2f8>)
 8000ee4:	015b      	lsls	r3, r3, #5
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3308      	adds	r3, #8
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a6d      	ldr	r2, [pc, #436]	; (80010a4 <SERVO_Init+0x310>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d10e      	bne.n	8000f10 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b6a      	ldr	r3, [pc, #424]	; (80010a0 <SERVO_Init+0x30c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a69      	ldr	r2, [pc, #420]	; (80010a0 <SERVO_Init+0x30c>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b67      	ldr	r3, [pc, #412]	; (80010a0 <SERVO_Init+0x30c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	e016      	b.n	8000f3e <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	4a5e      	ldr	r2, [pc, #376]	; (800108c <SERVO_Init+0x2f8>)
 8000f14:	015b      	lsls	r3, r3, #5
 8000f16:	4413      	add	r3, r2
 8000f18:	3308      	adds	r3, #8
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a62      	ldr	r2, [pc, #392]	; (80010a8 <SERVO_Init+0x314>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10d      	bne.n	8000f3e <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b5e      	ldr	r3, [pc, #376]	; (80010a0 <SERVO_Init+0x30c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a5d      	ldr	r2, [pc, #372]	; (80010a0 <SERVO_Init+0x30c>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b5b      	ldr	r3, [pc, #364]	; (80010a0 <SERVO_Init+0x30c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	4a52      	ldr	r2, [pc, #328]	; (800108c <SERVO_Init+0x2f8>)
 8000f42:	015b      	lsls	r3, r3, #5
 8000f44:	4413      	add	r3, r2
 8000f46:	3308      	adds	r3, #8
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8000f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f50:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 8000f56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 ffcc 	bl	8003f06 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8000f76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f003 fc07 	bl	8004794 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 f87a 	bl	8004084 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000f9c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 fff4 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fac:	2360      	movs	r3, #96	; 0x60
 8000fae:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4a33      	ldr	r2, [pc, #204]	; (800108c <SERVO_Init+0x2f8>)
 8000fc0:	015b      	lsls	r3, r3, #5
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3310      	adds	r3, #16
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 fb1d 	bl	8004610 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 8000fd6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000fda:	f7ff fab3 	bl	8000544 <__aeabi_ui2d>
 8000fde:	4604      	mov	r4, r0
 8000fe0:	460d      	mov	r5, r1
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4a29      	ldr	r2, [pc, #164]	; (800108c <SERVO_Init+0x2f8>)
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	4413      	add	r3, r2
 8000fea:	3318      	adds	r3, #24
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff faca 	bl	8000588 <__aeabi_f2d>
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <SERVO_Init+0x318>)
 8000ffa:	f7ff fc47 	bl	800088c <__aeabi_ddiv>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4620      	mov	r0, r4
 8001004:	4629      	mov	r1, r5
 8001006:	f7ff fb17 	bl	8000638 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	88fc      	ldrh	r4, [r7, #6]
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fd22 	bl	8000a5c <__aeabi_d2uiz>
 8001018:	4603      	mov	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <SERVO_Init+0x31c>)
 800101e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 8001022:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001026:	f7ff fa8d 	bl	8000544 <__aeabi_ui2d>
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff faa8 	bl	8000588 <__aeabi_f2d>
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <SERVO_Init+0x318>)
 800103e:	f7ff fc25 	bl	800088c <__aeabi_ddiv>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4620      	mov	r0, r4
 8001048:	4629      	mov	r1, r5
 800104a:	f7ff faf5 	bl	8000638 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	88fc      	ldrh	r4, [r7, #6]
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd00 	bl	8000a5c <__aeabi_d2uiz>
 800105c:	4603      	mov	r3, r0
 800105e:	b299      	uxth	r1, r3
 8001060:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <SERVO_Init+0x31c>)
 8001062:	00a3      	lsls	r3, r4, #2
 8001064:	4413      	add	r3, r2
 8001066:	460a      	mov	r2, r1
 8001068:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <SERVO_Init+0x2f8>)
 800106e:	015b      	lsls	r3, r3, #5
 8001070:	4413      	add	r3, r2
 8001072:	3310      	adds	r3, #16
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f003 f851 	bl	8004124 <HAL_TIM_PWM_Start>

}
 8001082:	bf00      	nop
 8001084:	37a0      	adds	r7, #160	; 0xa0
 8001086:	46bd      	mov	sp, r7
 8001088:	bdb0      	pop	{r4, r5, r7, pc}
 800108a:	bf00      	nop
 800108c:	08006d88 	.word	0x08006d88
 8001090:	41490000 	.word	0x41490000
 8001094:	3ff00000 	.word	0x3ff00000
 8001098:	40490000 	.word	0x40490000
 800109c:	40001800 	.word	0x40001800
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40000400 	.word	0x40000400
 80010a8:	40000800 	.word	0x40000800
 80010ac:	40340000 	.word	0x40340000
 80010b0:	20000094 	.word	0x20000094

080010b4 <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	ed87 0a00 	vstr	s0, [r7]
 80010c0:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <SERVO_MoveTo+0x94>)
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	885b      	ldrh	r3, [r3, #2]
 80010d0:	4619      	mov	r1, r3
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <SERVO_MoveTo+0x94>)
 80010d6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80010da:	1acb      	subs	r3, r1, r3
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e4:	edd7 7a00 	vldr	s15, [r7]
 80010e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ec:	ee17 0a90 	vmov	r0, s15
 80010f0:	f7ff fa4a 	bl	8000588 <__aeabi_f2d>
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <SERVO_MoveTo+0x98>)
 80010fa:	f7ff fbc7 	bl	800088c <__aeabi_ddiv>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4614      	mov	r4, r2
 8001104:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <SERVO_MoveTo+0x94>)
 800110a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa28 	bl	8000564 <__aeabi_i2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4620      	mov	r0, r4
 800111a:	4629      	mov	r1, r5
 800111c:	f7ff f8d6 	bl	80002cc <__adddf3>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fc98 	bl	8000a5c <__aeabi_d2uiz>
 800112c:	4603      	mov	r3, r0
 800112e:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	4a07      	ldr	r2, [pc, #28]	; (8001150 <SERVO_MoveTo+0x9c>)
 8001134:	015b      	lsls	r3, r3, #5
 8001136:	4413      	add	r3, r2
 8001138:	330c      	adds	r3, #12
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	89fa      	ldrh	r2, [r7, #14]
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bdb0      	pop	{r4, r5, r7, pc}
 8001148:	20000094 	.word	0x20000094
 800114c:	40668000 	.word	0x40668000
 8001150:	08006d88 	.word	0x08006d88

08001154 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_UART_RxCpltCallback+0x48>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d111      	bne.n	8001188 <HAL_UART_RxCpltCallback+0x34>
	{
		//erosen kerdeses
		if(bluetooth_rx == 0x0A)
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_UART_RxCpltCallback+0x4c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b0a      	cmp	r3, #10
 800116a:	d102      	bne.n	8001172 <HAL_UART_RxCpltCallback+0x1e>
			bluetooth_flag = 1;
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_UART_RxCpltCallback+0x50>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_UART_RxCpltCallback+0x54>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <HAL_UART_RxCpltCallback+0x4c>)
 8001178:	7811      	ldrb	r1, [r2, #0]
 800117a:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <HAL_UART_RxCpltCallback+0x58>)
 800117c:	54d1      	strb	r1, [r2, r3]
		bluetooth_a++;
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_UART_RxCpltCallback+0x54>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_UART_RxCpltCallback+0x54>)
 8001186:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(&huart2, &bluetooth_rx, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	4905      	ldr	r1, [pc, #20]	; (80011a0 <HAL_UART_RxCpltCallback+0x4c>)
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <HAL_UART_RxCpltCallback+0x48>)
 800118e:	f004 f8c2 	bl	8005316 <HAL_UART_Receive_IT>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000508 	.word	0x20000508
 80011a0:	20000158 	.word	0x20000158
 80011a4:	20000098 	.word	0x20000098
 80011a8:	2000009c 	.word	0x2000009c
 80011ac:	200000a4 	.word	0x200000a4

080011b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	6078      	str	r0, [r7, #4]

	if(htim == &htim2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a15      	ldr	r2, [pc, #84]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d122      	bne.n	8001206 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		//itt kell kiirni amire kivancsiak vagyunk a stringben
		sprintf(bluetooth_buffer, "%i -edik uzenet \t kivant sebesseg: %i \t allapot: %c kanyar/egyenes: %c \r\n",
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4914      	ldr	r1, [pc, #80]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80011ca:	7809      	ldrb	r1, [r1, #0]
 80011cc:	4608      	mov	r0, r1
 80011ce:	4914      	ldr	r1, [pc, #80]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80011d0:	7809      	ldrb	r1, [r1, #0]
 80011d2:	9101      	str	r1, [sp, #4]
 80011d4:	9000      	str	r0, [sp, #0]
 80011d6:	4913      	ldr	r1, [pc, #76]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011d8:	4813      	ldr	r0, [pc, #76]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80011da:	f005 f983 	bl	80064e4 <siprintf>
				bluetooth_i, kivant_sebesseg, sc_vagy_gyorskor, kanyarban_vagy_egyenes);
		bluetooth_i++;
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3301      	adds	r3, #1
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011e6:	6013      	str	r3, [r2, #0]
		bluetooth_len = strlen(bluetooth_buffer);
 80011e8:	480f      	ldr	r0, [pc, #60]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80011ea:	f7ff f811 	bl	8000210 <strlen>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80011f4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	490a      	ldr	r1, [pc, #40]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001202:	f003 fff6 	bl	80051f2 <HAL_UART_Transmit>
	}
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200004c0 	.word	0x200004c0
 8001214:	20000148 	.word	0x20000148
 8001218:	20000000 	.word	0x20000000
 800121c:	20000005 	.word	0x20000005
 8001220:	20000004 	.word	0x20000004
 8001224:	08006d3c 	.word	0x08006d3c
 8001228:	200000e4 	.word	0x200000e4
 800122c:	200000e0 	.word	0x200000e0
 8001230:	20000508 	.word	0x20000508

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t buff[50];
  VL53L1_RangingMeasurementData_t RangingData;
  VL53L1_Dev_t  vl53l1_c; // center module
  VL53L1_DEV    Dev = &vl53l1_c;
 800123c:	463b      	mov	r3, r7
 800123e:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001242:	f001 fad9 	bl	80027f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001246:	f000 f875 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124a:	f000 fca7 	bl	8001b9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800124e:	f000 fc7b 	bl	8001b48 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001252:	f000 f8e1 	bl	8001418 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001256:	f000 f90d 	bl	8001474 <MX_I2C2_Init>
  MX_SPI2_Init();
 800125a:	f000 f99d 	bl	8001598 <MX_SPI2_Init>
  MX_SPI3_Init();
 800125e:	f000 f9d1 	bl	8001604 <MX_SPI3_Init>
  MX_TIM3_Init();
 8001262:	f000 fa53 	bl	800170c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001266:	f000 faab 	bl	80017c0 <MX_TIM4_Init>
  MX_UART4_Init();
 800126a:	f000 fc19 	bl	8001aa0 <MX_UART4_Init>
  MX_TIM8_Init();
 800126e:	f000 fafb 	bl	8001868 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001272:	f000 fc3f 	bl	8001af4 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001276:	f000 f92b 	bl	80014d0 <MX_I2C3_Init>
  MX_TIM12_Init();
 800127a:	f000 fba1 	bl	80019c0 <MX_TIM12_Init>
  MX_TIM2_Init();
 800127e:	f000 f9f7 	bl	8001670 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001282:	f000 f953 	bl	800152c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SERVO_Init(SZERVO);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fd84 	bl	8000d94 <SERVO_Init>
  DC_MOTOR_Init(DC_MOTOR_PWM1);
 800128c:	2000      	movs	r0, #0
 800128e:	f004 ff2b 	bl	80060e8 <DC_MOTOR_Init>
  DC_MOTOR_Init(DC_MOTOR_PWM2);
 8001292:	2001      	movs	r0, #1
 8001294:	f004 ff28 	bl	80060e8 <DC_MOTOR_Init>
  DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 8001298:	2100      	movs	r1, #0
 800129a:	2000      	movs	r0, #0
 800129c:	f004 fffa 	bl	8006294 <DC_MOTOR_Start>
  DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 80012a0:	2100      	movs	r1, #0
 80012a2:	2001      	movs	r0, #1
 80012a4:	f004 fff6 	bl	8006294 <DC_MOTOR_Start>

  HAL_UART_Receive_IT(&huart2, &bluetooth_rx, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	491a      	ldr	r1, [pc, #104]	; (8001314 <main+0xe0>)
 80012ac:	481a      	ldr	r0, [pc, #104]	; (8001318 <main+0xe4>)
 80012ae:	f004 f832 	bl	8005316 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80012b2:	481a      	ldr	r0, [pc, #104]	; (800131c <main+0xe8>)
 80012b4:	f002 fe76 	bl	8003fa4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 80012b8:	2104      	movs	r1, #4
 80012ba:	4819      	ldr	r0, [pc, #100]	; (8001320 <main+0xec>)
 80012bc:	f002 ff32 	bl	8004124 <HAL_TIM_PWM_Start>


  // initialize vl53l1x communication parameters
  Dev->I2cHandle = &hi2c1;
 80012c0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80012c4:	4a17      	ldr	r2, [pc, #92]	; (8001324 <main+0xf0>)
 80012c6:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  Dev->I2cDevAddr = 0x52;
 80012ca:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80012ce:	2252      	movs	r2, #82	; 0x52
 80012d0:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Szervo
	  if(szervoEnable == 1)
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <main+0xf4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d1fb      	bne.n	80012d4 <main+0xa0>
	  {
		  SERVO_MoveTo(SZERVO, 50);
 80012dc:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800132c <main+0xf8>
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fee7 	bl	80010b4 <SERVO_MoveTo>
		  HAL_Delay(2000);
 80012e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012ea:	f001 faf7 	bl	80028dc <HAL_Delay>
		  SERVO_MoveTo(SZERVO, 130);
 80012ee:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001330 <main+0xfc>
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff fede 	bl	80010b4 <SERVO_MoveTo>
		  HAL_Delay(2000);
 80012f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012fc:	f001 faee 	bl	80028dc <HAL_Delay>


		  DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, 500); //ha pwm1 nagyobb, előremenet
 8001300:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001304:	2000      	movs	r0, #0
 8001306:	f005 f821 	bl	800634c <DC_MOTOR_Set_Speed>
		  DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, 100);
 800130a:	2164      	movs	r1, #100	; 0x64
 800130c:	2001      	movs	r0, #1
 800130e:	f005 f81d 	bl	800634c <DC_MOTOR_Set_Speed>
	  if(szervoEnable == 1)
 8001312:	e7df      	b.n	80012d4 <main+0xa0>
 8001314:	20000158 	.word	0x20000158
 8001318:	20000508 	.word	0x20000508
 800131c:	200004c0 	.word	0x200004c0
 8001320:	2000054c 	.word	0x2000054c
 8001324:	20000298 	.word	0x20000298
 8001328:	200000a0 	.word	0x200000a0
 800132c:	42480000 	.word	0x42480000
 8001330:	43020000 	.word	0x43020000

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	; 0x50
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	2234      	movs	r2, #52	; 0x34
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f005 f8c6 	bl	80064d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <SystemClock_Config+0xdc>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	4a2b      	ldr	r2, [pc, #172]	; (8001410 <SystemClock_Config+0xdc>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <SystemClock_Config+0xdc>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001374:	2300      	movs	r3, #0
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <SystemClock_Config+0xe0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a25      	ldr	r2, [pc, #148]	; (8001414 <SystemClock_Config+0xe0>)
 800137e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <SystemClock_Config+0xe0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001390:	2301      	movs	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001398:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139a:	2302      	movs	r3, #2
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013a4:	2304      	movs	r3, #4
 80013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013a8:	23b4      	movs	r3, #180	; 0xb4
 80013aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fa7b 	bl	80038b8 <HAL_RCC_OscConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013c8:	f000 fcce 	bl	8001d68 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013cc:	f001 ff58 	bl	8003280 <HAL_PWREx_EnableOverDrive>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013d6:	f000 fcc7 	bl	8001d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013da:	230f      	movs	r3, #15
 80013dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013de:	2302      	movs	r3, #2
 80013e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80013e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	2105      	movs	r1, #5
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 ff91 	bl	8003320 <HAL_RCC_ClockConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001404:	f000 fcb0 	bl	8001d68 <Error_Handler>
  }
}
 8001408:	bf00      	nop
 800140a:	3750      	adds	r7, #80	; 0x50
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000

08001418 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C1_Init+0x50>)
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <MX_I2C1_Init+0x54>)
 8001420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C1_Init+0x50>)
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_I2C1_Init+0x58>)
 8001426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_I2C1_Init+0x50>)
 8001436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_I2C1_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_I2C1_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_I2C1_Init+0x50>)
 8001456:	f001 fdcf 	bl	8002ff8 <HAL_I2C_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001460:	f000 fc82 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000298 	.word	0x20000298
 800146c:	40005400 	.word	0x40005400
 8001470:	000186a0 	.word	0x000186a0

08001474 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_I2C2_Init+0x50>)
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <MX_I2C2_Init+0x54>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_I2C2_Init+0x50>)
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_I2C2_Init+0x58>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_I2C2_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_I2C2_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_I2C2_Init+0x50>)
 8001492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001496:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_I2C2_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_I2C2_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_I2C2_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_I2C2_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_I2C2_Init+0x50>)
 80014b2:	f001 fda1 	bl	8002ff8 <HAL_I2C_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014bc:	f000 fc54 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200002ec 	.word	0x200002ec
 80014c8:	40005800 	.word	0x40005800
 80014cc:	000186a0 	.word	0x000186a0

080014d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_I2C3_Init+0x50>)
 80014d6:	4a13      	ldr	r2, [pc, #76]	; (8001524 <MX_I2C3_Init+0x54>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_I2C3_Init+0x50>)
 80014dc:	4a12      	ldr	r2, [pc, #72]	; (8001528 <MX_I2C3_Init+0x58>)
 80014de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_I2C3_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_I2C3_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_I2C3_Init+0x50>)
 80014ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_I2C3_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_I2C3_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <MX_I2C3_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_I2C3_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_I2C3_Init+0x50>)
 800150e:	f001 fd73 	bl	8002ff8 <HAL_I2C_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001518:	f000 fc26 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000015c 	.word	0x2000015c
 8001524:	40005c00 	.word	0x40005c00
 8001528:	000186a0 	.word	0x000186a0

0800152c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_SPI1_Init+0x64>)
 8001532:	4a18      	ldr	r2, [pc, #96]	; (8001594 <MX_SPI1_Init+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_SPI1_Init+0x64>)
 8001538:	f44f 7282 	mov.w	r2, #260	; 0x104
 800153c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_SPI1_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_SPI1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_SPI1_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_SPI1_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_SPI1_Init+0x64>)
 8001558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800155c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_SPI1_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <MX_SPI1_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_SPI1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_SPI1_Init+0x64>)
 8001578:	220a      	movs	r2, #10
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_SPI1_Init+0x64>)
 800157e:	f002 fc39 	bl	8003df4 <HAL_SPI_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001588:	f000 fbee 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000468 	.word	0x20000468
 8001594:	40013000 	.word	0x40013000

08001598 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <MX_SPI2_Init+0x64>)
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <MX_SPI2_Init+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <MX_SPI2_Init+0x64>)
 80015a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_SPI2_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_SPI2_Init+0x64>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_SPI2_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_SPI2_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_SPI2_Init+0x64>)
 80015c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_SPI2_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <MX_SPI2_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_SPI2_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <MX_SPI2_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_SPI2_Init+0x64>)
 80015e4:	220a      	movs	r2, #10
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <MX_SPI2_Init+0x64>)
 80015ea:	f002 fc03 	bl	8003df4 <HAL_SPI_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015f4:	f000 fbb8 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200001b0 	.word	0x200001b0
 8001600:	40003800 	.word	0x40003800

08001604 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <MX_SPI3_Init+0x64>)
 800160a:	4a18      	ldr	r2, [pc, #96]	; (800166c <MX_SPI3_Init+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_SPI3_Init+0x64>)
 8001610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001614:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_SPI3_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_SPI3_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_SPI3_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_SPI3_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_SPI3_Init+0x64>)
 8001630:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001634:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_SPI3_Init+0x64>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <MX_SPI3_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_SPI3_Init+0x64>)
 8001644:	2200      	movs	r2, #0
 8001646:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <MX_SPI3_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_SPI3_Init+0x64>)
 8001650:	220a      	movs	r2, #10
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <MX_SPI3_Init+0x64>)
 8001656:	f002 fbcd 	bl	8003df4 <HAL_SPI_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001660:	f000 fb82 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000388 	.word	0x20000388
 800166c:	40003c00 	.word	0x40003c00

08001670 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <MX_TIM2_Init+0x98>)
 800168e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001692:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_TIM2_Init+0x98>)
 8001696:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800169a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_TIM2_Init+0x98>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_TIM2_Init+0x98>)
 80016a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_TIM2_Init+0x98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_TIM2_Init+0x98>)
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016b6:	4814      	ldr	r0, [pc, #80]	; (8001708 <MX_TIM2_Init+0x98>)
 80016b8:	f002 fc25 	bl	8003f06 <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016c2:	f000 fb51 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4619      	mov	r1, r3
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_TIM2_Init+0x98>)
 80016d4:	f003 f85e 	bl	8004794 <HAL_TIM_ConfigClockSource>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016de:	f000 fb43 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ea:	463b      	mov	r3, r7
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <MX_TIM2_Init+0x98>)
 80016f0:	f003 fc50 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016fa:	f000 fb35 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200004c0 	.word	0x200004c0

0800170c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001712:	f107 0320 	add.w	r3, r7, #32
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
 800172a:	615a      	str	r2, [r3, #20]
 800172c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <MX_TIM3_Init+0xac>)
 8001730:	4a22      	ldr	r2, [pc, #136]	; (80017bc <MX_TIM3_Init+0xb0>)
 8001732:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001734:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <MX_TIM3_Init+0xac>)
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <MX_TIM3_Init+0xac>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <MX_TIM3_Init+0xac>)
 8001742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001746:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <MX_TIM3_Init+0xac>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <MX_TIM3_Init+0xac>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001754:	4818      	ldr	r0, [pc, #96]	; (80017b8 <MX_TIM3_Init+0xac>)
 8001756:	f002 fc95 	bl	8004084 <HAL_TIM_PWM_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001760:	f000 fb02 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800176c:	f107 0320 	add.w	r3, r7, #32
 8001770:	4619      	mov	r1, r3
 8001772:	4811      	ldr	r0, [pc, #68]	; (80017b8 <MX_TIM3_Init+0xac>)
 8001774:	f003 fc0e 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800177e:	f000 faf3 	bl	8001d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001782:	2360      	movs	r3, #96	; 0x60
 8001784:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2200      	movs	r2, #0
 8001796:	4619      	mov	r1, r3
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <MX_TIM3_Init+0xac>)
 800179a:	f002 ff39 	bl	8004610 <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80017a4:	f000 fae0 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <MX_TIM3_Init+0xac>)
 80017aa:	f000 fdf1 	bl	8002390 <HAL_TIM_MspPostInit>

}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000340 	.word	0x20000340
 80017bc:	40000400 	.word	0x40000400

080017c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2224      	movs	r2, #36	; 0x24
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f004 fe80 	bl	80064d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017dc:	4b20      	ldr	r3, [pc, #128]	; (8001860 <MX_TIM4_Init+0xa0>)
 80017de:	4a21      	ldr	r2, [pc, #132]	; (8001864 <MX_TIM4_Init+0xa4>)
 80017e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <MX_TIM4_Init+0xa0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_TIM4_Init+0xa0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_TIM4_Init+0xa0>)
 80017f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_TIM4_Init+0xa0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_TIM4_Init+0xa0>)
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001802:	2301      	movs	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800180a:	2301      	movs	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800181a:	2301      	movs	r3, #1
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4619      	mov	r1, r3
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <MX_TIM4_Init+0xa0>)
 800182e:	f002 fd41 	bl	80042b4 <HAL_TIM_Encoder_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001838:	f000 fa96 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_TIM4_Init+0xa0>)
 800184a:	f003 fba3 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001854:	f000 fa88 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3730      	adds	r7, #48	; 0x30
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000250 	.word	0x20000250
 8001864:	40000800 	.word	0x40000800

08001868 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b096      	sub	sp, #88	; 0x58
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
 8001896:	615a      	str	r2, [r3, #20]
 8001898:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2220      	movs	r2, #32
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f004 fe17 	bl	80064d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018a6:	4b44      	ldr	r3, [pc, #272]	; (80019b8 <MX_TIM8_Init+0x150>)
 80018a8:	4a44      	ldr	r2, [pc, #272]	; (80019bc <MX_TIM8_Init+0x154>)
 80018aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018ac:	4b42      	ldr	r3, [pc, #264]	; (80019b8 <MX_TIM8_Init+0x150>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80018b2:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <MX_TIM8_Init+0x150>)
 80018b4:	2260      	movs	r2, #96	; 0x60
 80018b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80018b8:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <MX_TIM8_Init+0x150>)
 80018ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018be:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c0:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <MX_TIM8_Init+0x150>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018c6:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <MX_TIM8_Init+0x150>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018cc:	4b3a      	ldr	r3, [pc, #232]	; (80019b8 <MX_TIM8_Init+0x150>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018d2:	4839      	ldr	r0, [pc, #228]	; (80019b8 <MX_TIM8_Init+0x150>)
 80018d4:	f002 fb17 	bl	8003f06 <HAL_TIM_Base_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80018de:	f000 fa43 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ec:	4619      	mov	r1, r3
 80018ee:	4832      	ldr	r0, [pc, #200]	; (80019b8 <MX_TIM8_Init+0x150>)
 80018f0:	f002 ff50 	bl	8004794 <HAL_TIM_ConfigClockSource>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80018fa:	f000 fa35 	bl	8001d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80018fe:	482e      	ldr	r0, [pc, #184]	; (80019b8 <MX_TIM8_Init+0x150>)
 8001900:	f002 fbc0 	bl	8004084 <HAL_TIM_PWM_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800190a:	f000 fa2d 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001916:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800191a:	4619      	mov	r1, r3
 800191c:	4826      	ldr	r0, [pc, #152]	; (80019b8 <MX_TIM8_Init+0x150>)
 800191e:	f003 fb39 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001928:	f000 fa1e 	bl	8001d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800192c:	2360      	movs	r3, #96	; 0x60
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194c:	2204      	movs	r2, #4
 800194e:	4619      	mov	r1, r3
 8001950:	4819      	ldr	r0, [pc, #100]	; (80019b8 <MX_TIM8_Init+0x150>)
 8001952:	f002 fe5d 	bl	8004610 <HAL_TIM_PWM_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800195c:	f000 fa04 	bl	8001d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001964:	2208      	movs	r2, #8
 8001966:	4619      	mov	r1, r3
 8001968:	4813      	ldr	r0, [pc, #76]	; (80019b8 <MX_TIM8_Init+0x150>)
 800196a:	f002 fe51 	bl	8004610 <HAL_TIM_PWM_ConfigChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001974:	f000 f9f8 	bl	8001d68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800198c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001990:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4807      	ldr	r0, [pc, #28]	; (80019b8 <MX_TIM8_Init+0x150>)
 800199c:	f003 fb76 	bl	800508c <HAL_TIMEx_ConfigBreakDeadTime>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80019a6:	f000 f9df 	bl	8001d68 <Error_Handler>
  /* USER CODE BEGIN TIM8_Init 2 */

  //Itt kell megivni a DC_MOTOR_Init() -et

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80019aa:	4803      	ldr	r0, [pc, #12]	; (80019b8 <MX_TIM8_Init+0x150>)
 80019ac:	f000 fcf0 	bl	8002390 <HAL_TIM_MspPostInit>

}
 80019b0:	bf00      	nop
 80019b2:	3758      	adds	r7, #88	; 0x58
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000208 	.word	0x20000208
 80019bc:	40010400 	.word	0x40010400

080019c0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	; 0x30
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0320 	add.w	r3, r7, #32
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]
 80019e2:	615a      	str	r2, [r3, #20]
 80019e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80019e6:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <MX_TIM12_Init+0xd8>)
 80019e8:	4a2c      	ldr	r2, [pc, #176]	; (8001a9c <MX_TIM12_Init+0xdc>)
 80019ea:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <MX_TIM12_Init+0xd8>)
 80019ee:	2213      	movs	r2, #19
 80019f0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <MX_TIM12_Init+0xd8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <MX_TIM12_Init+0xd8>)
 80019fa:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80019fe:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <MX_TIM12_Init+0xd8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <MX_TIM12_Init+0xd8>)
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001a0c:	4822      	ldr	r0, [pc, #136]	; (8001a98 <MX_TIM12_Init+0xd8>)
 8001a0e:	f002 fa7a 	bl	8003f06 <HAL_TIM_Base_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001a18:	f000 f9a6 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a20:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	4619      	mov	r1, r3
 8001a28:	481b      	ldr	r0, [pc, #108]	; (8001a98 <MX_TIM12_Init+0xd8>)
 8001a2a:	f002 feb3 	bl	8004794 <HAL_TIM_ConfigClockSource>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001a34:	f000 f998 	bl	8001d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001a38:	4817      	ldr	r0, [pc, #92]	; (8001a98 <MX_TIM12_Init+0xd8>)
 8001a3a:	f002 fb23 	bl	8004084 <HAL_TIM_PWM_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001a44:	f000 f990 	bl	8001d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a48:	2360      	movs	r3, #96	; 0x60
 8001a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480e      	ldr	r0, [pc, #56]	; (8001a98 <MX_TIM12_Init+0xd8>)
 8001a60:	f002 fdd6 	bl	8004610 <HAL_TIM_PWM_ConfigChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001a6a:	f000 f97d 	bl	8001d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	2204      	movs	r2, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4808      	ldr	r0, [pc, #32]	; (8001a98 <MX_TIM12_Init+0xd8>)
 8001a76:	f002 fdcb 	bl	8004610 <HAL_TIM_PWM_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001a80:	f000 f972 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
  HAL_TIM_Base_Start_IT(&htim12);
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_TIM12_Init+0xd8>)
 8001a86:	f002 fa8d 	bl	8003fa4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <MX_TIM12_Init+0xd8>)
 8001a8c:	f000 fc80 	bl	8002390 <HAL_TIM_MspPostInit>

}
 8001a90:	bf00      	nop
 8001a92:	3730      	adds	r7, #48	; 0x30
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000054c 	.word	0x2000054c
 8001a9c:	40001800 	.word	0x40001800

08001aa0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_UART4_Init+0x4c>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <MX_UART4_Init+0x50>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <MX_UART4_Init+0x4c>)
 8001aac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ab0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_UART4_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_UART4_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_UART4_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_UART4_Init+0x4c>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <MX_UART4_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_UART4_Init+0x4c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_UART4_Init+0x4c>)
 8001ad8:	f003 fb3e 	bl	8005158 <HAL_UART_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001ae2:	f000 f941 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000424 	.word	0x20000424
 8001af0:	40004c00 	.word	0x40004c00

08001af4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <MX_USART1_UART_Init+0x50>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b2c:	f003 fb14 	bl	8005158 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b36:	f000 f917 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200003e0 	.word	0x200003e0
 8001b44:	40011000 	.word	0x40011000

08001b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b80:	f003 faea 	bl	8005158 <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b8a:	f000 f8ed 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000508 	.word	0x20000508
 8001b98:	40004400 	.word	0x40004400

08001b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a58      	ldr	r2, [pc, #352]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b52      	ldr	r3, [pc, #328]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a51      	ldr	r2, [pc, #324]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b4f      	ldr	r3, [pc, #316]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a4a      	ldr	r2, [pc, #296]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b48      	ldr	r3, [pc, #288]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a43      	ldr	r2, [pc, #268]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b41      	ldr	r3, [pc, #260]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a3c      	ldr	r2, [pc, #240]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <MX_GPIO_Init+0x180>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001c3e:	2200      	movs	r2, #0
 8001c40:	213d      	movs	r1, #61	; 0x3d
 8001c42:	4837      	ldr	r0, [pc, #220]	; (8001d20 <MX_GPIO_Init+0x184>)
 8001c44:	f001 f9a6 	bl	8002f94 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f641 0102 	movw	r1, #6146	; 0x1802
 8001c4e:	4835      	ldr	r0, [pc, #212]	; (8001d24 <MX_GPIO_Init+0x188>)
 8001c50:	f001 f9a0 	bl	8002f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	f241 0126 	movw	r1, #4134	; 0x1026
 8001c5a:	4833      	ldr	r0, [pc, #204]	; (8001d28 <MX_GPIO_Init+0x18c>)
 8001c5c:	f001 f99a 	bl	8002f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	482a      	ldr	r0, [pc, #168]	; (8001d20 <MX_GPIO_Init+0x184>)
 8001c78:	f000 fff8 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001c7c:	233d      	movs	r3, #61	; 0x3d
 8001c7e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c80:	2301      	movs	r3, #1
 8001c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	4823      	ldr	r0, [pc, #140]	; (8001d20 <MX_GPIO_Init+0x184>)
 8001c94:	f000 ffea 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001c98:	f641 0302 	movw	r3, #6146	; 0x1802
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	481c      	ldr	r0, [pc, #112]	; (8001d24 <MX_GPIO_Init+0x188>)
 8001cb2:	f000 ffdb 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4816      	ldr	r0, [pc, #88]	; (8001d24 <MX_GPIO_Init+0x188>)
 8001cca:	f000 ffcf 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 8001cce:	f241 0326 	movw	r3, #4134	; 0x1026
 8001cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4810      	ldr	r0, [pc, #64]	; (8001d28 <MX_GPIO_Init+0x18c>)
 8001ce8:	f000 ffc0 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cec:	2304      	movs	r3, #4
 8001cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480b      	ldr	r0, [pc, #44]	; (8001d2c <MX_GPIO_Init+0x190>)
 8001d00:	f000 ffb4 	bl	8002c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8001d04:	2201      	movs	r2, #1
 8001d06:	2100      	movs	r1, #0
 8001d08:	2028      	movs	r0, #40	; 0x28
 8001d0a:	f000 fee6 	bl	8002ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d0e:	2028      	movs	r0, #40	; 0x28
 8001d10:	f000 feff 	bl	8002b12 <HAL_NVIC_EnableIRQ>

}
 8001d14:	bf00      	nop
 8001d16:	3728      	adds	r7, #40	; 0x28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40020c00 	.word	0x40020c00

08001d30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == B1_Pin)
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d40:	d109      	bne.n	8001d56 <HAL_GPIO_EXTI_Callback+0x26>
	{
		szervoEnable =!szervoEnable;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_GPIO_EXTI_Callback+0x34>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	bf0c      	ite	eq
 8001d4a:	2301      	moveq	r3, #1
 8001d4c:	2300      	movne	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <HAL_GPIO_EXTI_Callback+0x34>)
 8001d54:	701a      	strb	r2, [r3, #0]

	}
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	200000a0 	.word	0x200000a0

08001d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6c:	b672      	cpsid	i
}
 8001d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <Error_Handler+0x8>
	...

08001d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a0f      	ldr	r2, [pc, #60]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001db2:	2007      	movs	r0, #7
 8001db4:	f000 fe86 	bl	8002ac4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b090      	sub	sp, #64	; 0x40
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a6b      	ldr	r2, [pc, #428]	; (8001f90 <HAL_I2C_MspInit+0x1cc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12d      	bne.n	8001e42 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dea:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e08:	2312      	movs	r3, #18
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e14:	2304      	movs	r3, #4
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	485e      	ldr	r0, [pc, #376]	; (8001f98 <HAL_I2C_MspInit+0x1d4>)
 8001e20:	f000 ff24 	bl	8002c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
 8001e28:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	4a59      	ldr	r2, [pc, #356]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e32:	6413      	str	r3, [r2, #64]	; 0x40
 8001e34:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e40:	e0a2      	b.n	8001f88 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a55      	ldr	r2, [pc, #340]	; (8001f9c <HAL_I2C_MspInit+0x1d8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d14c      	bne.n	8001ee6 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
 8001e50:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	4a4f      	ldr	r2, [pc, #316]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001e56:	f043 0302 	orr.w	r3, r3, #2
 8001e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	623b      	str	r3, [r7, #32]
 8001e66:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	6313      	str	r3, [r2, #48]	; 0x30
 8001e78:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8a:	2312      	movs	r3, #18
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e96:	2304      	movs	r3, #4
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	483d      	ldr	r0, [pc, #244]	; (8001f98 <HAL_I2C_MspInit+0x1d4>)
 8001ea2:	f000 fee3 	bl	8002c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eac:	2312      	movs	r3, #18
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4837      	ldr	r0, [pc, #220]	; (8001fa0 <HAL_I2C_MspInit+0x1dc>)
 8001ec4:	f000 fed2 	bl	8002c6c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	4a30      	ldr	r2, [pc, #192]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001ed2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed8:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
}
 8001ee4:	e050      	b.n	8001f88 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2e      	ldr	r2, [pc, #184]	; (8001fa4 <HAL_I2C_MspInit+0x1e0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d14b      	bne.n	8001f88 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6313      	str	r3, [r2, #48]	; 0x30
 8001f00:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f2e:	2312      	movs	r3, #18
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f42:	4619      	mov	r1, r3
 8001f44:	4816      	ldr	r0, [pc, #88]	; (8001fa0 <HAL_I2C_MspInit+0x1dc>)
 8001f46:	f000 fe91 	bl	8002c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f50:	2312      	movs	r3, #18
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f64:	4619      	mov	r1, r3
 8001f66:	4810      	ldr	r0, [pc, #64]	; (8001fa8 <HAL_I2C_MspInit+0x1e4>)
 8001f68:	f000 fe80 	bl	8002c6c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001f76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_I2C_MspInit+0x1d0>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3740      	adds	r7, #64	; 0x40
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40005400 	.word	0x40005400
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40005800 	.word	0x40005800
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40005c00 	.word	0x40005c00
 8001fa8:	40020000 	.word	0x40020000

08001fac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b090      	sub	sp, #64	; 0x40
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a81      	ldr	r2, [pc, #516]	; (80021d0 <HAL_SPI_MspInit+0x224>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d12c      	bne.n	8002028 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd2:	4b80      	ldr	r3, [pc, #512]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a7f      	ldr	r2, [pc, #508]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8001fd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
 8001fee:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a78      	ldr	r2, [pc, #480]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002006:	23e0      	movs	r3, #224	; 0xe0
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002016:	2305      	movs	r3, #5
 8002018:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800201e:	4619      	mov	r1, r3
 8002020:	486d      	ldr	r0, [pc, #436]	; (80021d8 <HAL_SPI_MspInit+0x22c>)
 8002022:	f000 fe23 	bl	8002c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002026:	e0cf      	b.n	80021c8 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6b      	ldr	r2, [pc, #428]	; (80021dc <HAL_SPI_MspInit+0x230>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d14b      	bne.n	80020ca <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	4b67      	ldr	r3, [pc, #412]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a66      	ldr	r2, [pc, #408]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 800203c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204a:	623b      	str	r3, [r7, #32]
 800204c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	4b60      	ldr	r3, [pc, #384]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a5f      	ldr	r2, [pc, #380]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a58      	ldr	r2, [pc, #352]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b56      	ldr	r3, [pc, #344]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002086:	2302      	movs	r3, #2
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002096:	2307      	movs	r3, #7
 8002098:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800209e:	4619      	mov	r1, r3
 80020a0:	484f      	ldr	r0, [pc, #316]	; (80021e0 <HAL_SPI_MspInit+0x234>)
 80020a2:	f000 fde3 	bl	8002c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020b8:	2305      	movs	r3, #5
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c0:	4619      	mov	r1, r3
 80020c2:	4848      	ldr	r0, [pc, #288]	; (80021e4 <HAL_SPI_MspInit+0x238>)
 80020c4:	f000 fdd2 	bl	8002c6c <HAL_GPIO_Init>
}
 80020c8:	e07e      	b.n	80021c8 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI3)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a46      	ldr	r2, [pc, #280]	; (80021e8 <HAL_SPI_MspInit+0x23c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d179      	bne.n	80021c8 <HAL_SPI_MspInit+0x21c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	4b3e      	ldr	r3, [pc, #248]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	4a3d      	ldr	r2, [pc, #244]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 80020de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e2:	6413      	str	r3, [r2, #64]	; 0x40
 80020e4:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	4b37      	ldr	r3, [pc, #220]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	4a36      	ldr	r2, [pc, #216]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002100:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6313      	str	r3, [r2, #48]	; 0x30
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 8002132:	f043 0304 	orr.w	r3, r3, #4
 8002136:	6313      	str	r3, [r2, #48]	; 0x30
 8002138:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_SPI_MspInit+0x228>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002144:	2301      	movs	r3, #1
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002154:	2307      	movs	r3, #7
 8002156:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800215c:	4619      	mov	r1, r3
 800215e:	4821      	ldr	r0, [pc, #132]	; (80021e4 <HAL_SPI_MspInit+0x238>)
 8002160:	f000 fd84 	bl	8002c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002172:	2303      	movs	r3, #3
 8002174:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002176:	2306      	movs	r3, #6
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800217e:	4619      	mov	r1, r3
 8002180:	4815      	ldr	r0, [pc, #84]	; (80021d8 <HAL_SPI_MspInit+0x22c>)
 8002182:	f000 fd73 	bl	8002c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002198:	2306      	movs	r3, #6
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021a0:	4619      	mov	r1, r3
 80021a2:	480f      	ldr	r0, [pc, #60]	; (80021e0 <HAL_SPI_MspInit+0x234>)
 80021a4:	f000 fd62 	bl	8002c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021a8:	2310      	movs	r3, #16
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021b8:	2306      	movs	r3, #6
 80021ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c0:	4619      	mov	r1, r3
 80021c2:	4808      	ldr	r0, [pc, #32]	; (80021e4 <HAL_SPI_MspInit+0x238>)
 80021c4:	f000 fd52 	bl	8002c6c <HAL_GPIO_Init>
}
 80021c8:	bf00      	nop
 80021ca:	3740      	adds	r7, #64	; 0x40
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40013000 	.word	0x40013000
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40003800 	.word	0x40003800
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40003c00 	.word	0x40003c00

080021ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fc:	d116      	bne.n	800222c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	201c      	movs	r0, #28
 8002220:	f000 fc5b 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002224:	201c      	movs	r0, #28
 8002226:	f000 fc74 	bl	8002b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800222a:	e036      	b.n	800229a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d116      	bne.n	8002264 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_TIM_Base_MspInit+0xb8>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8002252:	2201      	movs	r2, #1
 8002254:	2100      	movs	r1, #0
 8002256:	202b      	movs	r0, #43	; 0x2b
 8002258:	f000 fc3f 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800225c:	202b      	movs	r0, #43	; 0x2b
 800225e:	f000 fc58 	bl	8002b12 <HAL_NVIC_EnableIRQ>
}
 8002262:	e01a      	b.n	800229a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM12)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_TIM_Base_MspInit+0xc0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d115      	bne.n	800229a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 800228a:	2201      	movs	r2, #1
 800228c:	2100      	movs	r1, #0
 800228e:	202b      	movs	r0, #43	; 0x2b
 8002290:	f000 fc23 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002294:	202b      	movs	r0, #43	; 0x2b
 8002296:	f000 fc3c 	bl	8002b12 <HAL_NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40010400 	.word	0x40010400
 80022ac:	40001800 	.word	0x40001800

080022b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <HAL_TIM_PWM_MspInit+0x48>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d115      	bne.n	80022ee <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_TIM_PWM_MspInit+0x4c>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_TIM_PWM_MspInit+0x4c>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_TIM_PWM_MspInit+0x4c>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	201d      	movs	r0, #29
 80022e4:	f000 fbf9 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022e8:	201d      	movs	r0, #29
 80022ea:	f000 fc12 	bl	8002b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40023800 	.word	0x40023800

08002300 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a19      	ldr	r2, [pc, #100]	; (8002384 <HAL_TIM_Encoder_MspInit+0x84>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d12b      	bne.n	800237a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <HAL_TIM_Encoder_MspInit+0x88>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a17      	ldr	r2, [pc, #92]	; (8002388 <HAL_TIM_Encoder_MspInit+0x88>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <HAL_TIM_Encoder_MspInit+0x88>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_TIM_Encoder_MspInit+0x88>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_TIM_Encoder_MspInit+0x88>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <HAL_TIM_Encoder_MspInit+0x88>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800235a:	23c0      	movs	r3, #192	; 0xc0
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800236a:	2302      	movs	r3, #2
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4805      	ldr	r0, [pc, #20]	; (800238c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002376:	f000 fc79 	bl	8002c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800237a:	bf00      	nop
 800237c:	3728      	adds	r7, #40	; 0x28
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40000800 	.word	0x40000800
 8002388:	40023800 	.word	0x40023800
 800238c:	40020400 	.word	0x40020400

08002390 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_TIM_MspPostInit+0xfc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d11e      	bne.n	80023f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	4b36      	ldr	r3, [pc, #216]	; (8002490 <HAL_TIM_MspPostInit+0x100>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a35      	ldr	r2, [pc, #212]	; (8002490 <HAL_TIM_MspPostInit+0x100>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b33      	ldr	r3, [pc, #204]	; (8002490 <HAL_TIM_MspPostInit+0x100>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023ce:	2340      	movs	r3, #64	; 0x40
 80023d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023de:	2302      	movs	r3, #2
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	482a      	ldr	r0, [pc, #168]	; (8002494 <HAL_TIM_MspPostInit+0x104>)
 80023ea:	f000 fc3f 	bl	8002c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80023ee:	e048      	b.n	8002482 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a28      	ldr	r2, [pc, #160]	; (8002498 <HAL_TIM_MspPostInit+0x108>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d11f      	bne.n	800243a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_TIM_MspPostInit+0x100>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a23      	ldr	r2, [pc, #140]	; (8002490 <HAL_TIM_MspPostInit+0x100>)
 8002404:	f043 0304 	orr.w	r3, r3, #4
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_TIM_MspPostInit+0x100>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002416:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002428:	2303      	movs	r3, #3
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	4818      	ldr	r0, [pc, #96]	; (8002494 <HAL_TIM_MspPostInit+0x104>)
 8002434:	f000 fc1a 	bl	8002c6c <HAL_GPIO_Init>
}
 8002438:	e023      	b.n	8002482 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <HAL_TIM_MspPostInit+0x10c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d11e      	bne.n	8002482 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_TIM_MspPostInit+0x100>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	4a10      	ldr	r2, [pc, #64]	; (8002490 <HAL_TIM_MspPostInit+0x100>)
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	6313      	str	r3, [r2, #48]	; 0x30
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_TIM_MspPostInit+0x100>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002460:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002472:	2309      	movs	r3, #9
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4808      	ldr	r0, [pc, #32]	; (80024a0 <HAL_TIM_MspPostInit+0x110>)
 800247e:	f000 fbf5 	bl	8002c6c <HAL_GPIO_Init>
}
 8002482:	bf00      	nop
 8002484:	3728      	adds	r7, #40	; 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40000400 	.word	0x40000400
 8002490:	40023800 	.word	0x40023800
 8002494:	40020800 	.word	0x40020800
 8002498:	40010400 	.word	0x40010400
 800249c:	40001800 	.word	0x40001800
 80024a0:	40020400 	.word	0x40020400

080024a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08e      	sub	sp, #56	; 0x38
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a5f      	ldr	r2, [pc, #380]	; (8002640 <HAL_UART_MspInit+0x19c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d153      	bne.n	800256e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	4b5e      	ldr	r3, [pc, #376]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a5d      	ldr	r2, [pc, #372]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 80024d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b5b      	ldr	r3, [pc, #364]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024de:	623b      	str	r3, [r7, #32]
 80024e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	4b57      	ldr	r3, [pc, #348]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a56      	ldr	r2, [pc, #344]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b54      	ldr	r3, [pc, #336]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	4b50      	ldr	r3, [pc, #320]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a4f      	ldr	r2, [pc, #316]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b4d      	ldr	r3, [pc, #308]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800251a:	2301      	movs	r3, #1
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800252a:	2308      	movs	r3, #8
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002532:	4619      	mov	r1, r3
 8002534:	4844      	ldr	r0, [pc, #272]	; (8002648 <HAL_UART_MspInit+0x1a4>)
 8002536:	f000 fb99 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800253a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002544:	2301      	movs	r3, #1
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800254c:	2308      	movs	r3, #8
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002554:	4619      	mov	r1, r3
 8002556:	483d      	ldr	r0, [pc, #244]	; (800264c <HAL_UART_MspInit+0x1a8>)
 8002558:	f000 fb88 	bl	8002c6c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800255c:	2200      	movs	r2, #0
 800255e:	2100      	movs	r1, #0
 8002560:	2034      	movs	r0, #52	; 0x34
 8002562:	f000 faba 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002566:	2034      	movs	r0, #52	; 0x34
 8002568:	f000 fad3 	bl	8002b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800256c:	e063      	b.n	8002636 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a37      	ldr	r2, [pc, #220]	; (8002650 <HAL_UART_MspInit+0x1ac>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d12d      	bne.n	80025d4 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	4a30      	ldr	r2, [pc, #192]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 8002582:	f043 0310 	orr.w	r3, r3, #16
 8002586:	6453      	str	r3, [r2, #68]	; 0x44
 8002588:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	4a29      	ldr	r2, [pc, #164]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6313      	str	r3, [r2, #48]	; 0x30
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025c2:	2307      	movs	r3, #7
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ca:	4619      	mov	r1, r3
 80025cc:	481e      	ldr	r0, [pc, #120]	; (8002648 <HAL_UART_MspInit+0x1a4>)
 80025ce:	f000 fb4d 	bl	8002c6c <HAL_GPIO_Init>
}
 80025d2:	e030      	b.n	8002636 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <HAL_UART_MspInit+0x1b0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d12b      	bne.n	8002636 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b18      	ldr	r3, [pc, #96]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a17      	ldr	r2, [pc, #92]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a10      	ldr	r2, [pc, #64]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_UART_MspInit+0x1a0>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002616:	230c      	movs	r3, #12
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002626:	2307      	movs	r3, #7
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262e:	4619      	mov	r1, r3
 8002630:	4805      	ldr	r0, [pc, #20]	; (8002648 <HAL_UART_MspInit+0x1a4>)
 8002632:	f000 fb1b 	bl	8002c6c <HAL_GPIO_Init>
}
 8002636:	bf00      	nop
 8002638:	3738      	adds	r7, #56	; 0x38
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40004c00 	.word	0x40004c00
 8002644:	40023800 	.word	0x40023800
 8002648:	40020000 	.word	0x40020000
 800264c:	40020800 	.word	0x40020800
 8002650:	40011000 	.word	0x40011000
 8002654:	40004400 	.word	0x40004400

08002658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800265c:	e7fe      	b.n	800265c <NMI_Handler+0x4>

0800265e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002662:	e7fe      	b.n	8002662 <HardFault_Handler+0x4>

08002664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <MemManage_Handler+0x4>

0800266a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <BusFault_Handler+0x4>

08002670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <UsageFault_Handler+0x4>

08002676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a4:	f000 f8fa 	bl	800289c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}

080026ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <TIM2_IRQHandler+0x10>)
 80026b2:	f001 fea5 	bl	8004400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200004c0 	.word	0x200004c0

080026c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <TIM3_IRQHandler+0x10>)
 80026c6:	f001 fe9b 	bl	8004400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000340 	.word	0x20000340

080026d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80026d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026dc:	f000 fc74 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80026e8:	4803      	ldr	r0, [pc, #12]	; (80026f8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80026ea:	f001 fe89 	bl	8004400 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80026ee:	4803      	ldr	r0, [pc, #12]	; (80026fc <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80026f0:	f001 fe86 	bl	8004400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000208 	.word	0x20000208
 80026fc:	2000054c 	.word	0x2000054c

08002700 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <UART4_IRQHandler+0x10>)
 8002706:	f002 fe37 	bl	8005378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000424 	.word	0x20000424

08002714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <_sbrk+0x5c>)
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <_sbrk+0x60>)
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <_sbrk+0x64>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <_sbrk+0x64>)
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <_sbrk+0x68>)
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <_sbrk+0x64>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	429a      	cmp	r2, r3
 8002742:	d207      	bcs.n	8002754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002744:	f003 fe8e 	bl	8006464 <__errno>
 8002748:	4603      	mov	r3, r0
 800274a:	220c      	movs	r2, #12
 800274c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
 8002752:	e009      	b.n	8002768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <_sbrk+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <_sbrk+0x64>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <_sbrk+0x64>)
 8002764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002766:	68fb      	ldr	r3, [r7, #12]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20020000 	.word	0x20020000
 8002774:	00000400 	.word	0x00000400
 8002778:	2000014c 	.word	0x2000014c
 800277c:	200005a8 	.word	0x200005a8

08002780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <SystemInit+0x20>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <SystemInit+0x20>)
 800278c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027a8:	480d      	ldr	r0, [pc, #52]	; (80027e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027aa:	490e      	ldr	r1, [pc, #56]	; (80027e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b0:	e002      	b.n	80027b8 <LoopCopyDataInit>

080027b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b6:	3304      	adds	r3, #4

080027b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027bc:	d3f9      	bcc.n	80027b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027c0:	4c0b      	ldr	r4, [pc, #44]	; (80027f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c4:	e001      	b.n	80027ca <LoopFillZerobss>

080027c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c8:	3204      	adds	r2, #4

080027ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027cc:	d3fb      	bcc.n	80027c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027ce:	f7ff ffd7 	bl	8002780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027d2:	f003 fe4d 	bl	8006470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027d6:	f7fe fd2d 	bl	8001234 <main>
  bx  lr    
 80027da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80027e8:	08006e2c 	.word	0x08006e2c
  ldr r2, =_sbss
 80027ec:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80027f0:	200005a8 	.word	0x200005a8

080027f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC_IRQHandler>
	...

080027f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <HAL_Init+0x40>)
 8002802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_Init+0x40>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_Init+0x40>)
 800280e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_Init+0x40>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a07      	ldr	r2, [pc, #28]	; (8002838 <HAL_Init+0x40>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002820:	2003      	movs	r0, #3
 8002822:	f000 f94f 	bl	8002ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002826:	2000      	movs	r0, #0
 8002828:	f000 f808 	bl	800283c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800282c:	f7ff faa2 	bl	8001d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00

0800283c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_InitTick+0x54>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_InitTick+0x58>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002852:	fbb3 f3f1 	udiv	r3, r3, r1
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f967 	bl	8002b2e <HAL_SYSTICK_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e00e      	b.n	8002888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b0f      	cmp	r3, #15
 800286e:	d80a      	bhi.n	8002886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002870:	2200      	movs	r2, #0
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	f000 f92f 	bl	8002ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800287c:	4a06      	ldr	r2, [pc, #24]	; (8002898 <HAL_InitTick+0x5c>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000008 	.word	0x20000008
 8002894:	20000010 	.word	0x20000010
 8002898:	2000000c 	.word	0x2000000c

0800289c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_IncTick+0x20>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x24>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_IncTick+0x24>)
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000010 	.word	0x20000010
 80028c0:	20000594 	.word	0x20000594

080028c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_GetTick+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000594 	.word	0x20000594

080028dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff ffee 	bl	80028c4 <HAL_GetTick>
 80028e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d005      	beq.n	8002902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_Delay+0x44>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002902:	bf00      	nop
 8002904:	f7ff ffde 	bl	80028c4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	429a      	cmp	r2, r3
 8002912:	d8f7      	bhi.n	8002904 <HAL_Delay+0x28>
  {
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000010 	.word	0x20000010

08002924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <__NVIC_SetPriorityGrouping+0x44>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002940:	4013      	ands	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800294c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002956:	4a04      	ldr	r2, [pc, #16]	; (8002968 <__NVIC_SetPriorityGrouping+0x44>)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	60d3      	str	r3, [r2, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <__NVIC_GetPriorityGrouping+0x18>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	f003 0307 	and.w	r3, r3, #7
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	2b00      	cmp	r3, #0
 8002998:	db0b      	blt.n	80029b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	f003 021f 	and.w	r2, r3, #31
 80029a0:	4907      	ldr	r1, [pc, #28]	; (80029c0 <__NVIC_EnableIRQ+0x38>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	2001      	movs	r0, #1
 80029aa:	fa00 f202 	lsl.w	r2, r0, r2
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	e000e100 	.word	0xe000e100

080029c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	db0a      	blt.n	80029ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	490c      	ldr	r1, [pc, #48]	; (8002a10 <__NVIC_SetPriority+0x4c>)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	440b      	add	r3, r1
 80029e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ec:	e00a      	b.n	8002a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4908      	ldr	r1, [pc, #32]	; (8002a14 <__NVIC_SetPriority+0x50>)
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	3b04      	subs	r3, #4
 80029fc:	0112      	lsls	r2, r2, #4
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	440b      	add	r3, r1
 8002a02:	761a      	strb	r2, [r3, #24]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000e100 	.word	0xe000e100
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f1c3 0307 	rsb	r3, r3, #7
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	bf28      	it	cs
 8002a36:	2304      	movcs	r3, #4
 8002a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d902      	bls.n	8002a48 <NVIC_EncodePriority+0x30>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3b03      	subs	r3, #3
 8002a46:	e000      	b.n	8002a4a <NVIC_EncodePriority+0x32>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a60:	f04f 31ff 	mov.w	r1, #4294967295
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	43d9      	mvns	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	4313      	orrs	r3, r2
         );
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3724      	adds	r7, #36	; 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a90:	d301      	bcc.n	8002a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a92:	2301      	movs	r3, #1
 8002a94:	e00f      	b.n	8002ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <SysTick_Config+0x40>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa4:	f7ff ff8e 	bl	80029c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <SysTick_Config+0x40>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aae:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <SysTick_Config+0x40>)
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	e000e010 	.word	0xe000e010

08002ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ff29 	bl	8002924 <__NVIC_SetPriorityGrouping>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aec:	f7ff ff3e 	bl	800296c <__NVIC_GetPriorityGrouping>
 8002af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	6978      	ldr	r0, [r7, #20]
 8002af8:	f7ff ff8e 	bl	8002a18 <NVIC_EncodePriority>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff5d 	bl	80029c4 <__NVIC_SetPriority>
}
 8002b0a:	bf00      	nop
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff31 	bl	8002988 <__NVIC_EnableIRQ>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ffa2 	bl	8002a80 <SysTick_Config>
 8002b3c:	4603      	mov	r3, r0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7ff feb6 	bl	80028c4 <HAL_GetTick>
 8002b58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d008      	beq.n	8002b78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2280      	movs	r2, #128	; 0x80
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e052      	b.n	8002c1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0216 	bic.w	r2, r2, #22
 8002b86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d103      	bne.n	8002ba8 <HAL_DMA_Abort+0x62>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0208 	bic.w	r2, r2, #8
 8002bb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc8:	e013      	b.n	8002bf2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bca:	f7ff fe7b 	bl	80028c4 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d90c      	bls.n	8002bf2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2203      	movs	r2, #3
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e015      	b.n	8002c1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e4      	bne.n	8002bca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	223f      	movs	r2, #63	; 0x3f
 8002c06:	409a      	lsls	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d004      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e00c      	b.n	8002c5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2205      	movs	r2, #5
 8002c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0201 	bic.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	e165      	b.n	8002f54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c88:	2201      	movs	r2, #1
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	f040 8154 	bne.w	8002f4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d005      	beq.n	8002cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d130      	bne.n	8002d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	2203      	movs	r2, #3
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 0201 	and.w	r2, r3, #1
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d017      	beq.n	8002d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	2203      	movs	r2, #3
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d123      	bne.n	8002db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	08da      	lsrs	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3208      	adds	r2, #8
 8002d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	220f      	movs	r2, #15
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	08da      	lsrs	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3208      	adds	r2, #8
 8002daa:	69b9      	ldr	r1, [r7, #24]
 8002dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	2203      	movs	r2, #3
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0203 	and.w	r2, r3, #3
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80ae 	beq.w	8002f4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <HAL_GPIO_Init+0x300>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	4a5c      	ldr	r2, [pc, #368]	; (8002f6c <HAL_GPIO_Init+0x300>)
 8002dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e00:	6453      	str	r3, [r2, #68]	; 0x44
 8002e02:	4b5a      	ldr	r3, [pc, #360]	; (8002f6c <HAL_GPIO_Init+0x300>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e0e:	4a58      	ldr	r2, [pc, #352]	; (8002f70 <HAL_GPIO_Init+0x304>)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	3302      	adds	r3, #2
 8002e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	220f      	movs	r2, #15
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4f      	ldr	r2, [pc, #316]	; (8002f74 <HAL_GPIO_Init+0x308>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d025      	beq.n	8002e86 <HAL_GPIO_Init+0x21a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4e      	ldr	r2, [pc, #312]	; (8002f78 <HAL_GPIO_Init+0x30c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01f      	beq.n	8002e82 <HAL_GPIO_Init+0x216>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4d      	ldr	r2, [pc, #308]	; (8002f7c <HAL_GPIO_Init+0x310>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_GPIO_Init+0x212>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4c      	ldr	r2, [pc, #304]	; (8002f80 <HAL_GPIO_Init+0x314>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_GPIO_Init+0x20e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4b      	ldr	r2, [pc, #300]	; (8002f84 <HAL_GPIO_Init+0x318>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00d      	beq.n	8002e76 <HAL_GPIO_Init+0x20a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4a      	ldr	r2, [pc, #296]	; (8002f88 <HAL_GPIO_Init+0x31c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <HAL_GPIO_Init+0x206>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a49      	ldr	r2, [pc, #292]	; (8002f8c <HAL_GPIO_Init+0x320>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_GPIO_Init+0x202>
 8002e6a:	2306      	movs	r3, #6
 8002e6c:	e00c      	b.n	8002e88 <HAL_GPIO_Init+0x21c>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e00a      	b.n	8002e88 <HAL_GPIO_Init+0x21c>
 8002e72:	2305      	movs	r3, #5
 8002e74:	e008      	b.n	8002e88 <HAL_GPIO_Init+0x21c>
 8002e76:	2304      	movs	r3, #4
 8002e78:	e006      	b.n	8002e88 <HAL_GPIO_Init+0x21c>
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e004      	b.n	8002e88 <HAL_GPIO_Init+0x21c>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e002      	b.n	8002e88 <HAL_GPIO_Init+0x21c>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_GPIO_Init+0x21c>
 8002e86:	2300      	movs	r3, #0
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	f002 0203 	and.w	r2, r2, #3
 8002e8e:	0092      	lsls	r2, r2, #2
 8002e90:	4093      	lsls	r3, r2
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e98:	4935      	ldr	r1, [pc, #212]	; (8002f70 <HAL_GPIO_Init+0x304>)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea6:	4b3a      	ldr	r3, [pc, #232]	; (8002f90 <HAL_GPIO_Init+0x324>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eca:	4a31      	ldr	r2, [pc, #196]	; (8002f90 <HAL_GPIO_Init+0x324>)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ed0:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <HAL_GPIO_Init+0x324>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ef4:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <HAL_GPIO_Init+0x324>)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002efa:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_GPIO_Init+0x324>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <HAL_GPIO_Init+0x324>)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f24:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <HAL_GPIO_Init+0x324>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f48:	4a11      	ldr	r2, [pc, #68]	; (8002f90 <HAL_GPIO_Init+0x324>)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3301      	adds	r3, #1
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2b0f      	cmp	r3, #15
 8002f58:	f67f ae96 	bls.w	8002c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40013800 	.word	0x40013800
 8002f74:	40020000 	.word	0x40020000
 8002f78:	40020400 	.word	0x40020400
 8002f7c:	40020800 	.word	0x40020800
 8002f80:	40020c00 	.word	0x40020c00
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40021400 	.word	0x40021400
 8002f8c:	40021800 	.word	0x40021800
 8002f90:	40013c00 	.word	0x40013c00

08002f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa4:	787b      	ldrb	r3, [r7, #1]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fb0:	e003      	b.n	8002fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fb2:	887b      	ldrh	r3, [r7, #2]
 8002fb4:	041a      	lsls	r2, r3, #16
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	619a      	str	r2, [r3, #24]
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d006      	beq.n	8002fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fde:	4a05      	ldr	r2, [pc, #20]	; (8002ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe fea2 	bl	8001d30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40013c00 	.word	0x40013c00

08002ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e12b      	b.n	8003262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe fed0 	bl	8001dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800305a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800305c:	f000 fa52 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8003060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4a81      	ldr	r2, [pc, #516]	; (800326c <HAL_I2C_Init+0x274>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d807      	bhi.n	800307c <HAL_I2C_Init+0x84>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4a80      	ldr	r2, [pc, #512]	; (8003270 <HAL_I2C_Init+0x278>)
 8003070:	4293      	cmp	r3, r2
 8003072:	bf94      	ite	ls
 8003074:	2301      	movls	r3, #1
 8003076:	2300      	movhi	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e006      	b.n	800308a <HAL_I2C_Init+0x92>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a7d      	ldr	r2, [pc, #500]	; (8003274 <HAL_I2C_Init+0x27c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	bf94      	ite	ls
 8003084:	2301      	movls	r3, #1
 8003086:	2300      	movhi	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e0e7      	b.n	8003262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4a78      	ldr	r2, [pc, #480]	; (8003278 <HAL_I2C_Init+0x280>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	0c9b      	lsrs	r3, r3, #18
 800309c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a6a      	ldr	r2, [pc, #424]	; (800326c <HAL_I2C_Init+0x274>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d802      	bhi.n	80030cc <HAL_I2C_Init+0xd4>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3301      	adds	r3, #1
 80030ca:	e009      	b.n	80030e0 <HAL_I2C_Init+0xe8>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	4a69      	ldr	r2, [pc, #420]	; (800327c <HAL_I2C_Init+0x284>)
 80030d8:	fba2 2303 	umull	r2, r3, r2, r3
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	3301      	adds	r3, #1
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	495c      	ldr	r1, [pc, #368]	; (800326c <HAL_I2C_Init+0x274>)
 80030fc:	428b      	cmp	r3, r1
 80030fe:	d819      	bhi.n	8003134 <HAL_I2C_Init+0x13c>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e59      	subs	r1, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	fbb1 f3f3 	udiv	r3, r1, r3
 800310e:	1c59      	adds	r1, r3, #1
 8003110:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003114:	400b      	ands	r3, r1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_I2C_Init+0x138>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1e59      	subs	r1, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fbb1 f3f3 	udiv	r3, r1, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312e:	e051      	b.n	80031d4 <HAL_I2C_Init+0x1dc>
 8003130:	2304      	movs	r3, #4
 8003132:	e04f      	b.n	80031d4 <HAL_I2C_Init+0x1dc>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d111      	bne.n	8003160 <HAL_I2C_Init+0x168>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1e58      	subs	r0, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	440b      	add	r3, r1
 800314a:	fbb0 f3f3 	udiv	r3, r0, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e012      	b.n	8003186 <HAL_I2C_Init+0x18e>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1e58      	subs	r0, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	0099      	lsls	r1, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	fbb0 f3f3 	udiv	r3, r0, r3
 8003176:	3301      	adds	r3, #1
 8003178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Init+0x196>
 800318a:	2301      	movs	r3, #1
 800318c:	e022      	b.n	80031d4 <HAL_I2C_Init+0x1dc>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10e      	bne.n	80031b4 <HAL_I2C_Init+0x1bc>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1e58      	subs	r0, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	440b      	add	r3, r1
 80031a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b2:	e00f      	b.n	80031d4 <HAL_I2C_Init+0x1dc>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1e58      	subs	r0, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	0099      	lsls	r1, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ca:	3301      	adds	r3, #1
 80031cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	6809      	ldr	r1, [r1, #0]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69da      	ldr	r2, [r3, #28]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6911      	ldr	r1, [r2, #16]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68d2      	ldr	r2, [r2, #12]
 800320e:	4311      	orrs	r1, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	430b      	orrs	r3, r1
 8003216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	000186a0 	.word	0x000186a0
 8003270:	001e847f 	.word	0x001e847f
 8003274:	003d08ff 	.word	0x003d08ff
 8003278:	431bde83 	.word	0x431bde83
 800327c:	10624dd3 	.word	0x10624dd3

08003280 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_PWREx_EnableOverDrive+0x90>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <HAL_PWREx_EnableOverDrive+0x90>)
 8003294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_PWREx_EnableOverDrive+0x90>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_PWREx_EnableOverDrive+0x94>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032ac:	f7ff fb0a 	bl	80028c4 <HAL_GetTick>
 80032b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032b2:	e009      	b.n	80032c8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032b4:	f7ff fb06 	bl	80028c4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032c2:	d901      	bls.n	80032c8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e01f      	b.n	8003308 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032c8:	4b13      	ldr	r3, [pc, #76]	; (8003318 <HAL_PWREx_EnableOverDrive+0x98>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d1ee      	bne.n	80032b4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_PWREx_EnableOverDrive+0x9c>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032dc:	f7ff faf2 	bl	80028c4 <HAL_GetTick>
 80032e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032e2:	e009      	b.n	80032f8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032e4:	f7ff faee 	bl	80028c4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032f2:	d901      	bls.n	80032f8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e007      	b.n	8003308 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032f8:	4b07      	ldr	r3, [pc, #28]	; (8003318 <HAL_PWREx_EnableOverDrive+0x98>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003304:	d1ee      	bne.n	80032e4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800
 8003314:	420e0040 	.word	0x420e0040
 8003318:	40007000 	.word	0x40007000
 800331c:	420e0044 	.word	0x420e0044

08003320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0cc      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003334:	4b68      	ldr	r3, [pc, #416]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d90c      	bls.n	800335c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b65      	ldr	r3, [pc, #404]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334a:	4b63      	ldr	r3, [pc, #396]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0b8      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d020      	beq.n	80033aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003374:	4b59      	ldr	r3, [pc, #356]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4a58      	ldr	r2, [pc, #352]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800337e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800338c:	4b53      	ldr	r3, [pc, #332]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4a52      	ldr	r2, [pc, #328]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003398:	4b50      	ldr	r3, [pc, #320]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	494d      	ldr	r1, [pc, #308]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d044      	beq.n	8003440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d107      	bne.n	80033ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d119      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e07f      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d003      	beq.n	80033de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b3f      	ldr	r3, [pc, #252]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e06f      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e067      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033fe:	4b37      	ldr	r3, [pc, #220]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f023 0203 	bic.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4934      	ldr	r1, [pc, #208]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	4313      	orrs	r3, r2
 800340e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003410:	f7ff fa58 	bl	80028c4 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	e00a      	b.n	800342e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003418:	f7ff fa54 	bl	80028c4 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e04f      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 020c 	and.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	429a      	cmp	r2, r3
 800343e:	d1eb      	bne.n	8003418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003440:	4b25      	ldr	r3, [pc, #148]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d20c      	bcs.n	8003468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e032      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4916      	ldr	r1, [pc, #88]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003492:	4b12      	ldr	r3, [pc, #72]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	490e      	ldr	r1, [pc, #56]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034a6:	f000 f855 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	490a      	ldr	r1, [pc, #40]	; (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 80034b8:	5ccb      	ldrb	r3, [r1, r3]
 80034ba:	fa22 f303 	lsr.w	r3, r2, r3
 80034be:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff f9b8 	bl	800283c <HAL_InitTick>

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023c00 	.word	0x40023c00
 80034dc:	40023800 	.word	0x40023800
 80034e0:	08006da8 	.word	0x08006da8
 80034e4:	20000008 	.word	0x20000008
 80034e8:	2000000c 	.word	0x2000000c

080034ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000008 	.word	0x20000008

08003504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003508:	f7ff fff0 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	0a9b      	lsrs	r3, r3, #10
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4903      	ldr	r1, [pc, #12]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	08006db8 	.word	0x08006db8

0800352c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003530:	f7ff ffdc 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	0b5b      	lsrs	r3, r3, #13
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	4903      	ldr	r1, [pc, #12]	; (8003550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40023800 	.word	0x40023800
 8003550:	08006db8 	.word	0x08006db8

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003558:	b088      	sub	sp, #32
 800355a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003570:	4bce      	ldr	r3, [pc, #824]	; (80038ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b0c      	cmp	r3, #12
 800357a:	f200 818d 	bhi.w	8003898 <HAL_RCC_GetSysClockFreq+0x344>
 800357e:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <HAL_RCC_GetSysClockFreq+0x30>)
 8003580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003584:	080035b9 	.word	0x080035b9
 8003588:	08003899 	.word	0x08003899
 800358c:	08003899 	.word	0x08003899
 8003590:	08003899 	.word	0x08003899
 8003594:	080035bf 	.word	0x080035bf
 8003598:	08003899 	.word	0x08003899
 800359c:	08003899 	.word	0x08003899
 80035a0:	08003899 	.word	0x08003899
 80035a4:	080035c5 	.word	0x080035c5
 80035a8:	08003899 	.word	0x08003899
 80035ac:	08003899 	.word	0x08003899
 80035b0:	08003899 	.word	0x08003899
 80035b4:	08003739 	.word	0x08003739
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4bbd      	ldr	r3, [pc, #756]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80035ba:	61bb      	str	r3, [r7, #24]
       break;
 80035bc:	e16f      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035be:	4bbd      	ldr	r3, [pc, #756]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x360>)
 80035c0:	61bb      	str	r3, [r7, #24]
      break;
 80035c2:	e16c      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c4:	4bb9      	ldr	r3, [pc, #740]	; (80038ac <HAL_RCC_GetSysClockFreq+0x358>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035cc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ce:	4bb7      	ldr	r3, [pc, #732]	; (80038ac <HAL_RCC_GetSysClockFreq+0x358>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d053      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035da:	4bb4      	ldr	r3, [pc, #720]	; (80038ac <HAL_RCC_GetSysClockFreq+0x358>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	099b      	lsrs	r3, r3, #6
 80035e0:	461a      	mov	r2, r3
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035ea:	f04f 0100 	mov.w	r1, #0
 80035ee:	ea02 0400 	and.w	r4, r2, r0
 80035f2:	603c      	str	r4, [r7, #0]
 80035f4:	400b      	ands	r3, r1
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035fc:	4620      	mov	r0, r4
 80035fe:	4629      	mov	r1, r5
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	014b      	lsls	r3, r1, #5
 800360a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800360e:	0142      	lsls	r2, r0, #5
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	4623      	mov	r3, r4
 8003616:	1ac0      	subs	r0, r0, r3
 8003618:	462b      	mov	r3, r5
 800361a:	eb61 0103 	sbc.w	r1, r1, r3
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	018b      	lsls	r3, r1, #6
 8003628:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800362c:	0182      	lsls	r2, r0, #6
 800362e:	1a12      	subs	r2, r2, r0
 8003630:	eb63 0301 	sbc.w	r3, r3, r1
 8003634:	f04f 0000 	mov.w	r0, #0
 8003638:	f04f 0100 	mov.w	r1, #0
 800363c:	00d9      	lsls	r1, r3, #3
 800363e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003642:	00d0      	lsls	r0, r2, #3
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4621      	mov	r1, r4
 800364a:	1852      	adds	r2, r2, r1
 800364c:	4629      	mov	r1, r5
 800364e:	eb43 0101 	adc.w	r1, r3, r1
 8003652:	460b      	mov	r3, r1
 8003654:	f04f 0000 	mov.w	r0, #0
 8003658:	f04f 0100 	mov.w	r1, #0
 800365c:	0259      	lsls	r1, r3, #9
 800365e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003662:	0250      	lsls	r0, r2, #9
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	461a      	mov	r2, r3
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	f7fd fa12 	bl	8000a9c <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4613      	mov	r3, r2
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	e04c      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003682:	4b8a      	ldr	r3, [pc, #552]	; (80038ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	461a      	mov	r2, r3
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003692:	f04f 0100 	mov.w	r1, #0
 8003696:	ea02 0a00 	and.w	sl, r2, r0
 800369a:	ea03 0b01 	and.w	fp, r3, r1
 800369e:	4650      	mov	r0, sl
 80036a0:	4659      	mov	r1, fp
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	014b      	lsls	r3, r1, #5
 80036ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036b0:	0142      	lsls	r2, r0, #5
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	ebb0 000a 	subs.w	r0, r0, sl
 80036ba:	eb61 010b 	sbc.w	r1, r1, fp
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	018b      	lsls	r3, r1, #6
 80036c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036cc:	0182      	lsls	r2, r0, #6
 80036ce:	1a12      	subs	r2, r2, r0
 80036d0:	eb63 0301 	sbc.w	r3, r3, r1
 80036d4:	f04f 0000 	mov.w	r0, #0
 80036d8:	f04f 0100 	mov.w	r1, #0
 80036dc:	00d9      	lsls	r1, r3, #3
 80036de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036e2:	00d0      	lsls	r0, r2, #3
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	eb12 020a 	adds.w	r2, r2, sl
 80036ec:	eb43 030b 	adc.w	r3, r3, fp
 80036f0:	f04f 0000 	mov.w	r0, #0
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	0299      	lsls	r1, r3, #10
 80036fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036fe:	0290      	lsls	r0, r2, #10
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	461a      	mov	r2, r3
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	f7fd f9c4 	bl	8000a9c <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4613      	mov	r3, r2
 800371a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800371c:	4b63      	ldr	r3, [pc, #396]	; (80038ac <HAL_RCC_GetSysClockFreq+0x358>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	3301      	adds	r3, #1
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	61bb      	str	r3, [r7, #24]
      break;
 8003736:	e0b2      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003738:	4b5c      	ldr	r3, [pc, #368]	; (80038ac <HAL_RCC_GetSysClockFreq+0x358>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003740:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003742:	4b5a      	ldr	r3, [pc, #360]	; (80038ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d04d      	beq.n	80037ea <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374e:	4b57      	ldr	r3, [pc, #348]	; (80038ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	099b      	lsrs	r3, r3, #6
 8003754:	461a      	mov	r2, r3
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800375e:	f04f 0100 	mov.w	r1, #0
 8003762:	ea02 0800 	and.w	r8, r2, r0
 8003766:	ea03 0901 	and.w	r9, r3, r1
 800376a:	4640      	mov	r0, r8
 800376c:	4649      	mov	r1, r9
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	014b      	lsls	r3, r1, #5
 8003778:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800377c:	0142      	lsls	r2, r0, #5
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	ebb0 0008 	subs.w	r0, r0, r8
 8003786:	eb61 0109 	sbc.w	r1, r1, r9
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	018b      	lsls	r3, r1, #6
 8003794:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003798:	0182      	lsls	r2, r0, #6
 800379a:	1a12      	subs	r2, r2, r0
 800379c:	eb63 0301 	sbc.w	r3, r3, r1
 80037a0:	f04f 0000 	mov.w	r0, #0
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	00d9      	lsls	r1, r3, #3
 80037aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ae:	00d0      	lsls	r0, r2, #3
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	eb12 0208 	adds.w	r2, r2, r8
 80037b8:	eb43 0309 	adc.w	r3, r3, r9
 80037bc:	f04f 0000 	mov.w	r0, #0
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	0259      	lsls	r1, r3, #9
 80037c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037ca:	0250      	lsls	r0, r2, #9
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	f7fd f95e 	bl	8000a9c <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4613      	mov	r3, r2
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	e04a      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCC_GetSysClockFreq+0x358>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	099b      	lsrs	r3, r3, #6
 80037f0:	461a      	mov	r2, r3
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037fa:	f04f 0100 	mov.w	r1, #0
 80037fe:	ea02 0400 	and.w	r4, r2, r0
 8003802:	ea03 0501 	and.w	r5, r3, r1
 8003806:	4620      	mov	r0, r4
 8003808:	4629      	mov	r1, r5
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	014b      	lsls	r3, r1, #5
 8003814:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003818:	0142      	lsls	r2, r0, #5
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	1b00      	subs	r0, r0, r4
 8003820:	eb61 0105 	sbc.w	r1, r1, r5
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	018b      	lsls	r3, r1, #6
 800382e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003832:	0182      	lsls	r2, r0, #6
 8003834:	1a12      	subs	r2, r2, r0
 8003836:	eb63 0301 	sbc.w	r3, r3, r1
 800383a:	f04f 0000 	mov.w	r0, #0
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	00d9      	lsls	r1, r3, #3
 8003844:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003848:	00d0      	lsls	r0, r2, #3
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	1912      	adds	r2, r2, r4
 8003850:	eb45 0303 	adc.w	r3, r5, r3
 8003854:	f04f 0000 	mov.w	r0, #0
 8003858:	f04f 0100 	mov.w	r1, #0
 800385c:	0299      	lsls	r1, r3, #10
 800385e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003862:	0290      	lsls	r0, r2, #10
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	461a      	mov	r2, r3
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	f7fd f912 	bl	8000a9c <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4613      	mov	r3, r2
 800387e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003880:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	0f1b      	lsrs	r3, r3, #28
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	61bb      	str	r3, [r7, #24]
      break;
 8003896:	e002      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800389a:	61bb      	str	r3, [r7, #24]
      break;
 800389c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389e:	69bb      	ldr	r3, [r7, #24]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3720      	adds	r7, #32
 80038a4:	46bd      	mov	sp, r7
 80038a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800
 80038b0:	00f42400 	.word	0x00f42400
 80038b4:	007a1200 	.word	0x007a1200

080038b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e28d      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8083 	beq.w	80039de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038d8:	4b94      	ldr	r3, [pc, #592]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d019      	beq.n	8003918 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038e4:	4b91      	ldr	r3, [pc, #580]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d106      	bne.n	80038fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038f0:	4b8e      	ldr	r3, [pc, #568]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fc:	d00c      	beq.n	8003918 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fe:	4b8b      	ldr	r3, [pc, #556]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d112      	bne.n	8003930 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800390a:	4b88      	ldr	r3, [pc, #544]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003916:	d10b      	bne.n	8003930 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	4b84      	ldr	r3, [pc, #528]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d05b      	beq.n	80039dc <HAL_RCC_OscConfig+0x124>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d157      	bne.n	80039dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e25a      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003938:	d106      	bne.n	8003948 <HAL_RCC_OscConfig+0x90>
 800393a:	4b7c      	ldr	r3, [pc, #496]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a7b      	ldr	r2, [pc, #492]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e01d      	b.n	8003984 <HAL_RCC_OscConfig+0xcc>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003950:	d10c      	bne.n	800396c <HAL_RCC_OscConfig+0xb4>
 8003952:	4b76      	ldr	r3, [pc, #472]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a75      	ldr	r2, [pc, #468]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b73      	ldr	r3, [pc, #460]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a72      	ldr	r2, [pc, #456]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e00b      	b.n	8003984 <HAL_RCC_OscConfig+0xcc>
 800396c:	4b6f      	ldr	r3, [pc, #444]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a6e      	ldr	r2, [pc, #440]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	4b6c      	ldr	r3, [pc, #432]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a6b      	ldr	r2, [pc, #428]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 800397e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fe ff9a 	bl	80028c4 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003994:	f7fe ff96 	bl	80028c4 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e21f      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	4b61      	ldr	r3, [pc, #388]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0xdc>
 80039b2:	e014      	b.n	80039de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fe ff86 	bl	80028c4 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fe ff82 	bl	80028c4 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e20b      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ce:	4b57      	ldr	r3, [pc, #348]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x104>
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d06f      	beq.n	8003aca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039ea:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d017      	beq.n	8003a26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039f6:	4b4d      	ldr	r3, [pc, #308]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d105      	bne.n	8003a0e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a02:	4b4a      	ldr	r3, [pc, #296]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0e:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d11c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1a:	4b44      	ldr	r3, [pc, #272]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d116      	bne.n	8003a54 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_RCC_OscConfig+0x186>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e1d3      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4937      	ldr	r1, [pc, #220]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	e03a      	b.n	8003aca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5c:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <HAL_RCC_OscConfig+0x278>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fe ff2f 	bl	80028c4 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7fe ff2b 	bl	80028c4 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e1b4      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4925      	ldr	r1, [pc, #148]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
 8003a9c:	e015      	b.n	8003aca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <HAL_RCC_OscConfig+0x278>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fe ff0e 	bl	80028c4 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aac:	f7fe ff0a 	bl	80028c4 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e193      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d036      	beq.n	8003b44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d016      	beq.n	8003b0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ade:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <HAL_RCC_OscConfig+0x27c>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae4:	f7fe feee 	bl	80028c4 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aec:	f7fe feea 	bl	80028c4 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e173      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x234>
 8003b0a:	e01b      	b.n	8003b44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_RCC_OscConfig+0x27c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b12:	f7fe fed7 	bl	80028c4 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	e00e      	b.n	8003b38 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1a:	f7fe fed3 	bl	80028c4 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d907      	bls.n	8003b38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e15c      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	42470000 	.word	0x42470000
 8003b34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	4b8a      	ldr	r3, [pc, #552]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ea      	bne.n	8003b1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8097 	beq.w	8003c80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b83      	ldr	r3, [pc, #524]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	4b7f      	ldr	r3, [pc, #508]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	4a7e      	ldr	r2, [pc, #504]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b70:	6413      	str	r3, [r2, #64]	; 0x40
 8003b72:	4b7c      	ldr	r3, [pc, #496]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b79      	ldr	r3, [pc, #484]	; (8003d68 <HAL_RCC_OscConfig+0x4b0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d118      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8e:	4b76      	ldr	r3, [pc, #472]	; (8003d68 <HAL_RCC_OscConfig+0x4b0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a75      	ldr	r2, [pc, #468]	; (8003d68 <HAL_RCC_OscConfig+0x4b0>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7fe fe93 	bl	80028c4 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba2:	f7fe fe8f 	bl	80028c4 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e118      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	4b6c      	ldr	r3, [pc, #432]	; (8003d68 <HAL_RCC_OscConfig+0x4b0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x31e>
 8003bc8:	4b66      	ldr	r3, [pc, #408]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4a65      	ldr	r2, [pc, #404]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd4:	e01c      	b.n	8003c10 <HAL_RCC_OscConfig+0x358>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x340>
 8003bde:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a60      	ldr	r2, [pc, #384]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003be4:	f043 0304 	orr.w	r3, r3, #4
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bea:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a5d      	ldr	r2, [pc, #372]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0x358>
 8003bf8:	4b5a      	ldr	r3, [pc, #360]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a59      	ldr	r2, [pc, #356]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	4b57      	ldr	r3, [pc, #348]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a56      	ldr	r2, [pc, #344]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003c0a:	f023 0304 	bic.w	r3, r3, #4
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fe fe54 	bl	80028c4 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c20:	f7fe fe50 	bl	80028c4 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e0d7      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	4b4b      	ldr	r3, [pc, #300]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0ee      	beq.n	8003c20 <HAL_RCC_OscConfig+0x368>
 8003c42:	e014      	b.n	8003c6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fe fe3e 	bl	80028c4 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fe fe3a 	bl	80028c4 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e0c1      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c62:	4b40      	ldr	r3, [pc, #256]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ee      	bne.n	8003c4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d105      	bne.n	8003c80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c74:	4b3b      	ldr	r3, [pc, #236]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	4a3a      	ldr	r2, [pc, #232]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80ad 	beq.w	8003de4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c8a:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d060      	beq.n	8003d58 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d145      	bne.n	8003d2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <HAL_RCC_OscConfig+0x4b4>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fe0e 	bl	80028c4 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe fe0a 	bl	80028c4 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e093      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	019b      	lsls	r3, r3, #6
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	071b      	lsls	r3, r3, #28
 8003cf6:	491b      	ldr	r1, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x4b4>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fe fddf 	bl	80028c4 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fe fddb 	bl	80028c4 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e064      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x452>
 8003d28:	e05c      	b.n	8003de4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_RCC_OscConfig+0x4b4>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fe fdc8 	bl	80028c4 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fe fdc4 	bl	80028c4 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e04d      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_OscConfig+0x4ac>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x480>
 8003d56:	e045      	b.n	8003de4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e040      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d70:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <HAL_RCC_OscConfig+0x538>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d030      	beq.n	8003de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d129      	bne.n	8003de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d122      	bne.n	8003de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d119      	bne.n	8003de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	3b01      	subs	r3, #1
 8003dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d10f      	bne.n	8003de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800

08003df4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e07b      	b.n	8003efe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d108      	bne.n	8003e20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e16:	d009      	beq.n	8003e2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	61da      	str	r2, [r3, #28]
 8003e1e:	e005      	b.n	8003e2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fe f8b0 	bl	8001fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb0:	ea42 0103 	orr.w	r1, r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	f003 0104 	and.w	r1, r3, #4
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f003 0210 	and.w	r2, r3, #16
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e041      	b.n	8003f9c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fe f95d 	bl	80021ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2202      	movs	r2, #2
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f000 fd15 	bl	8004974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d001      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e04e      	b.n	800405a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	; (8004068 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d022      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d01d      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1f      	ldr	r2, [pc, #124]	; (800406c <HAL_TIM_Base_Start_IT+0xc8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d018      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <HAL_TIM_Base_Start_IT+0xd0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00e      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1b      	ldr	r2, [pc, #108]	; (8004078 <HAL_TIM_Base_Start_IT+0xd4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_TIM_Base_Start_IT+0xd8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a18      	ldr	r2, [pc, #96]	; (8004080 <HAL_TIM_Base_Start_IT+0xdc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d111      	bne.n	8004048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b06      	cmp	r3, #6
 8004034:	d010      	beq.n	8004058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0201 	orr.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004046:	e007      	b.n	8004058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40010000 	.word	0x40010000
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40010400 	.word	0x40010400
 800407c:	40014000 	.word	0x40014000
 8004080:	40001800 	.word	0x40001800

08004084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e041      	b.n	800411a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fe f900 	bl	80022b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f000 fc56 	bl	8004974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <HAL_TIM_PWM_Start+0x24>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e022      	b.n	800418e <HAL_TIM_PWM_Start+0x6a>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b04      	cmp	r3, #4
 800414c:	d109      	bne.n	8004162 <HAL_TIM_PWM_Start+0x3e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b01      	cmp	r3, #1
 8004158:	bf14      	ite	ne
 800415a:	2301      	movne	r3, #1
 800415c:	2300      	moveq	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	e015      	b.n	800418e <HAL_TIM_PWM_Start+0x6a>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d109      	bne.n	800417c <HAL_TIM_PWM_Start+0x58>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e008      	b.n	800418e <HAL_TIM_PWM_Start+0x6a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e07c      	b.n	8004290 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_PWM_Start+0x82>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a4:	e013      	b.n	80041ce <HAL_TIM_PWM_Start+0xaa>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_PWM_Start+0x92>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b4:	e00b      	b.n	80041ce <HAL_TIM_PWM_Start+0xaa>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_PWM_Start+0xa2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c4:	e003      	b.n	80041ce <HAL_TIM_PWM_Start+0xaa>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 feb6 	bl	8004f48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a2d      	ldr	r2, [pc, #180]	; (8004298 <HAL_TIM_PWM_Start+0x174>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_TIM_PWM_Start+0xcc>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a2c      	ldr	r2, [pc, #176]	; (800429c <HAL_TIM_PWM_Start+0x178>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d101      	bne.n	80041f4 <HAL_TIM_PWM_Start+0xd0>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <HAL_TIM_PWM_Start+0xd2>
 80041f4:	2300      	movs	r3, #0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004208:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a22      	ldr	r2, [pc, #136]	; (8004298 <HAL_TIM_PWM_Start+0x174>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d022      	beq.n	800425a <HAL_TIM_PWM_Start+0x136>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421c:	d01d      	beq.n	800425a <HAL_TIM_PWM_Start+0x136>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <HAL_TIM_PWM_Start+0x17c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d018      	beq.n	800425a <HAL_TIM_PWM_Start+0x136>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <HAL_TIM_PWM_Start+0x180>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_TIM_PWM_Start+0x136>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <HAL_TIM_PWM_Start+0x184>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00e      	beq.n	800425a <HAL_TIM_PWM_Start+0x136>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a16      	ldr	r2, [pc, #88]	; (800429c <HAL_TIM_PWM_Start+0x178>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d009      	beq.n	800425a <HAL_TIM_PWM_Start+0x136>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_TIM_PWM_Start+0x188>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_TIM_PWM_Start+0x136>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a16      	ldr	r2, [pc, #88]	; (80042b0 <HAL_TIM_PWM_Start+0x18c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d111      	bne.n	800427e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b06      	cmp	r3, #6
 800426a:	d010      	beq.n	800428e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427c:	e007      	b.n	800428e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40010000 	.word	0x40010000
 800429c:	40010400 	.word	0x40010400
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40000c00 	.word	0x40000c00
 80042ac:	40014000 	.word	0x40014000
 80042b0:	40001800 	.word	0x40001800

080042b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e097      	b.n	80043f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fe f80f 	bl	8002300 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f8:	f023 0307 	bic.w	r3, r3, #7
 80042fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	4619      	mov	r1, r3
 8004308:	4610      	mov	r0, r2
 800430a:	f000 fb33 	bl	8004974 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004336:	f023 0303 	bic.w	r3, r3, #3
 800433a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	4313      	orrs	r3, r2
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004354:	f023 030c 	bic.w	r3, r3, #12
 8004358:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004360:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	4313      	orrs	r3, r2
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	011a      	lsls	r2, r3, #4
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	031b      	lsls	r3, r3, #12
 8004384:	4313      	orrs	r3, r2
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004392:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	4313      	orrs	r3, r2
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b02      	cmp	r3, #2
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b02      	cmp	r3, #2
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0202 	mvn.w	r2, #2
 800442c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa77 	bl	8004936 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fa69 	bl	8004922 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fa7a 	bl	800494a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b04      	cmp	r3, #4
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b04      	cmp	r3, #4
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0204 	mvn.w	r2, #4
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa4d 	bl	8004936 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fa3f 	bl	8004922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fa50 	bl	800494a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d122      	bne.n	8004504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d11b      	bne.n	8004504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0208 	mvn.w	r2, #8
 80044d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2204      	movs	r2, #4
 80044da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa23 	bl	8004936 <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fa15 	bl	8004922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fa26 	bl	800494a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b10      	cmp	r3, #16
 8004510:	d122      	bne.n	8004558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b10      	cmp	r3, #16
 800451e:	d11b      	bne.n	8004558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0210 	mvn.w	r2, #16
 8004528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2208      	movs	r2, #8
 800452e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f9f9 	bl	8004936 <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f9eb 	bl	8004922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f9fc 	bl	800494a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10e      	bne.n	8004584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d107      	bne.n	8004584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0201 	mvn.w	r2, #1
 800457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc fe16 	bl	80011b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458e:	2b80      	cmp	r3, #128	; 0x80
 8004590:	d10e      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d107      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fdca 	bl	8005144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f9c1 	bl	800495e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0220 	mvn.w	r2, #32
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fd94 	bl	8005130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800462a:	2302      	movs	r3, #2
 800462c:	e0ae      	b.n	800478c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b0c      	cmp	r3, #12
 800463a:	f200 809f 	bhi.w	800477c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004679 	.word	0x08004679
 8004648:	0800477d 	.word	0x0800477d
 800464c:	0800477d 	.word	0x0800477d
 8004650:	0800477d 	.word	0x0800477d
 8004654:	080046b9 	.word	0x080046b9
 8004658:	0800477d 	.word	0x0800477d
 800465c:	0800477d 	.word	0x0800477d
 8004660:	0800477d 	.word	0x0800477d
 8004664:	080046fb 	.word	0x080046fb
 8004668:	0800477d 	.word	0x0800477d
 800466c:	0800477d 	.word	0x0800477d
 8004670:	0800477d 	.word	0x0800477d
 8004674:	0800473b 	.word	0x0800473b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fa18 	bl	8004ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0208 	orr.w	r2, r2, #8
 8004692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0204 	bic.w	r2, r2, #4
 80046a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6999      	ldr	r1, [r3, #24]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	619a      	str	r2, [r3, #24]
      break;
 80046b6:	e064      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fa68 	bl	8004b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6999      	ldr	r1, [r3, #24]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	021a      	lsls	r2, r3, #8
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	619a      	str	r2, [r3, #24]
      break;
 80046f8:	e043      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68b9      	ldr	r1, [r7, #8]
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fabd 	bl	8004c80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0208 	orr.w	r2, r2, #8
 8004714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0204 	bic.w	r2, r2, #4
 8004724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69d9      	ldr	r1, [r3, #28]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	61da      	str	r2, [r3, #28]
      break;
 8004738:	e023      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fb11 	bl	8004d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69d9      	ldr	r1, [r3, #28]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	021a      	lsls	r2, r3, #8
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	61da      	str	r2, [r3, #28]
      break;
 800477a:	e002      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	75fb      	strb	r3, [r7, #23]
      break;
 8004780:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800478a:	7dfb      	ldrb	r3, [r7, #23]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_TIM_ConfigClockSource+0x1c>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e0b4      	b.n	800491a <HAL_TIM_ConfigClockSource+0x186>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e8:	d03e      	beq.n	8004868 <HAL_TIM_ConfigClockSource+0xd4>
 80047ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ee:	f200 8087 	bhi.w	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f6:	f000 8086 	beq.w	8004906 <HAL_TIM_ConfigClockSource+0x172>
 80047fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fe:	d87f      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b70      	cmp	r3, #112	; 0x70
 8004802:	d01a      	beq.n	800483a <HAL_TIM_ConfigClockSource+0xa6>
 8004804:	2b70      	cmp	r3, #112	; 0x70
 8004806:	d87b      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b60      	cmp	r3, #96	; 0x60
 800480a:	d050      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0x11a>
 800480c:	2b60      	cmp	r3, #96	; 0x60
 800480e:	d877      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b50      	cmp	r3, #80	; 0x50
 8004812:	d03c      	beq.n	800488e <HAL_TIM_ConfigClockSource+0xfa>
 8004814:	2b50      	cmp	r3, #80	; 0x50
 8004816:	d873      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004818:	2b40      	cmp	r3, #64	; 0x40
 800481a:	d058      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x13a>
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d86f      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004820:	2b30      	cmp	r3, #48	; 0x30
 8004822:	d064      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x15a>
 8004824:	2b30      	cmp	r3, #48	; 0x30
 8004826:	d86b      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004828:	2b20      	cmp	r3, #32
 800482a:	d060      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x15a>
 800482c:	2b20      	cmp	r3, #32
 800482e:	d867      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d05c      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x15a>
 8004834:	2b10      	cmp	r3, #16
 8004836:	d05a      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x15a>
 8004838:	e062      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6899      	ldr	r1, [r3, #8]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f000 fb5d 	bl	8004f08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800485c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	609a      	str	r2, [r3, #8]
      break;
 8004866:	e04f      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6899      	ldr	r1, [r3, #8]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f000 fb46 	bl	8004f08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800488a:	609a      	str	r2, [r3, #8]
      break;
 800488c:	e03c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	461a      	mov	r2, r3
 800489c:	f000 faba 	bl	8004e14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2150      	movs	r1, #80	; 0x50
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fb13 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 80048ac:	e02c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f000 fad9 	bl	8004e72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2160      	movs	r1, #96	; 0x60
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fb03 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 80048cc:	e01c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6859      	ldr	r1, [r3, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	461a      	mov	r2, r3
 80048dc:	f000 fa9a 	bl	8004e14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2140      	movs	r1, #64	; 0x40
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 faf3 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 80048ec:	e00c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f000 faea 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 80048fe:	e003      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
      break;
 8004904:	e000      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
	...

08004974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a40      	ldr	r2, [pc, #256]	; (8004a88 <TIM_Base_SetConfig+0x114>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d013      	beq.n	80049b4 <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004992:	d00f      	beq.n	80049b4 <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a3d      	ldr	r2, [pc, #244]	; (8004a8c <TIM_Base_SetConfig+0x118>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00b      	beq.n	80049b4 <TIM_Base_SetConfig+0x40>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a3c      	ldr	r2, [pc, #240]	; (8004a90 <TIM_Base_SetConfig+0x11c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <TIM_Base_SetConfig+0x40>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a3b      	ldr	r2, [pc, #236]	; (8004a94 <TIM_Base_SetConfig+0x120>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_Base_SetConfig+0x40>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a3a      	ldr	r2, [pc, #232]	; (8004a98 <TIM_Base_SetConfig+0x124>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d108      	bne.n	80049c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2f      	ldr	r2, [pc, #188]	; (8004a88 <TIM_Base_SetConfig+0x114>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d02b      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d4:	d027      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a2c      	ldr	r2, [pc, #176]	; (8004a8c <TIM_Base_SetConfig+0x118>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d023      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a2b      	ldr	r2, [pc, #172]	; (8004a90 <TIM_Base_SetConfig+0x11c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01f      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a2a      	ldr	r2, [pc, #168]	; (8004a94 <TIM_Base_SetConfig+0x120>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d01b      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a29      	ldr	r2, [pc, #164]	; (8004a98 <TIM_Base_SetConfig+0x124>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d017      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a28      	ldr	r2, [pc, #160]	; (8004a9c <TIM_Base_SetConfig+0x128>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a27      	ldr	r2, [pc, #156]	; (8004aa0 <TIM_Base_SetConfig+0x12c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00f      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <TIM_Base_SetConfig+0x130>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00b      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a25      	ldr	r2, [pc, #148]	; (8004aa8 <TIM_Base_SetConfig+0x134>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d007      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a24      	ldr	r2, [pc, #144]	; (8004aac <TIM_Base_SetConfig+0x138>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d003      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a23      	ldr	r2, [pc, #140]	; (8004ab0 <TIM_Base_SetConfig+0x13c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d108      	bne.n	8004a38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <TIM_Base_SetConfig+0x114>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0xf8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a0c      	ldr	r2, [pc, #48]	; (8004a98 <TIM_Base_SetConfig+0x124>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d103      	bne.n	8004a74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	615a      	str	r2, [r3, #20]
}
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40010000 	.word	0x40010000
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	40000c00 	.word	0x40000c00
 8004a98:	40010400 	.word	0x40010400
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40014400 	.word	0x40014400
 8004aa4:	40014800 	.word	0x40014800
 8004aa8:	40001800 	.word	0x40001800
 8004aac:	40001c00 	.word	0x40001c00
 8004ab0:	40002000 	.word	0x40002000

08004ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0201 	bic.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f023 0302 	bic.w	r3, r3, #2
 8004afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a20      	ldr	r2, [pc, #128]	; (8004b8c <TIM_OC1_SetConfig+0xd8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_OC1_SetConfig+0x64>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <TIM_OC1_SetConfig+0xdc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d10c      	bne.n	8004b32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0308 	bic.w	r3, r3, #8
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 0304 	bic.w	r3, r3, #4
 8004b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <TIM_OC1_SetConfig+0xd8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_OC1_SetConfig+0x8e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a14      	ldr	r2, [pc, #80]	; (8004b90 <TIM_OC1_SetConfig+0xdc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d111      	bne.n	8004b66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	621a      	str	r2, [r3, #32]
}
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40010400 	.word	0x40010400

08004b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f023 0210 	bic.w	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f023 0320 	bic.w	r3, r3, #32
 8004bde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a22      	ldr	r2, [pc, #136]	; (8004c78 <TIM_OC2_SetConfig+0xe4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_OC2_SetConfig+0x68>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a21      	ldr	r2, [pc, #132]	; (8004c7c <TIM_OC2_SetConfig+0xe8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d10d      	bne.n	8004c18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <TIM_OC2_SetConfig+0xe4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_OC2_SetConfig+0x94>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <TIM_OC2_SetConfig+0xe8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d113      	bne.n	8004c50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	621a      	str	r2, [r3, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40010000 	.word	0x40010000
 8004c7c:	40010400 	.word	0x40010400

08004c80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a21      	ldr	r2, [pc, #132]	; (8004d60 <TIM_OC3_SetConfig+0xe0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_OC3_SetConfig+0x66>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a20      	ldr	r2, [pc, #128]	; (8004d64 <TIM_OC3_SetConfig+0xe4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10d      	bne.n	8004d02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <TIM_OC3_SetConfig+0xe0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_OC3_SetConfig+0x92>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <TIM_OC3_SetConfig+0xe4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d113      	bne.n	8004d3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	621a      	str	r2, [r3, #32]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40010400 	.word	0x40010400

08004d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	031b      	lsls	r3, r3, #12
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <TIM_OC4_SetConfig+0xa4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_OC4_SetConfig+0x68>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a11      	ldr	r2, [pc, #68]	; (8004e10 <TIM_OC4_SetConfig+0xa8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d109      	bne.n	8004de4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	019b      	lsls	r3, r3, #6
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	621a      	str	r2, [r3, #32]
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40010000 	.word	0x40010000
 8004e10:	40010400 	.word	0x40010400

08004e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0201 	bic.w	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 030a 	bic.w	r3, r3, #10
 8004e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b087      	sub	sp, #28
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f023 0210 	bic.w	r2, r3, #16
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	031b      	lsls	r3, r3, #12
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f043 0307 	orr.w	r3, r3, #7
 8004ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	609a      	str	r2, [r3, #8]
}
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	021a      	lsls	r2, r3, #8
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	609a      	str	r2, [r3, #8]
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1a      	ldr	r2, [r3, #32]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a1a      	ldr	r2, [r3, #32]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f80:	431a      	orrs	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e05a      	b.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a21      	ldr	r2, [pc, #132]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d022      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff8:	d01d      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d018      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1b      	ldr	r2, [pc, #108]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d013      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1a      	ldr	r2, [pc, #104]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00e      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a18      	ldr	r2, [pc, #96]	; (8005080 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d009      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a17      	ldr	r2, [pc, #92]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d004      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a15      	ldr	r2, [pc, #84]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d10c      	bne.n	8005050 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	4313      	orrs	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40010000 	.word	0x40010000
 8005074:	40000400 	.word	0x40000400
 8005078:	40000800 	.word	0x40000800
 800507c:	40000c00 	.word	0x40000c00
 8005080:	40010400 	.word	0x40010400
 8005084:	40014000 	.word	0x40014000
 8005088:	40001800 	.word	0x40001800

0800508c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e03d      	b.n	8005124 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e03f      	b.n	80051ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fd f990 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2224      	movs	r2, #36	; 0x24
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800519a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fddb 	bl	8005d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695a      	ldr	r2, [r3, #20]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b08a      	sub	sp, #40	; 0x28
 80051f6:	af02      	add	r7, sp, #8
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	603b      	str	r3, [r7, #0]
 80051fe:	4613      	mov	r3, r2
 8005200:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b20      	cmp	r3, #32
 8005210:	d17c      	bne.n	800530c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_UART_Transmit+0x2c>
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e075      	b.n	800530e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_UART_Transmit+0x3e>
 800522c:	2302      	movs	r3, #2
 800522e:	e06e      	b.n	800530e <HAL_UART_Transmit+0x11c>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2221      	movs	r2, #33	; 0x21
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005246:	f7fd fb3d 	bl	80028c4 <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	88fa      	ldrh	r2, [r7, #6]
 8005250:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	88fa      	ldrh	r2, [r7, #6]
 8005256:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005260:	d108      	bne.n	8005274 <HAL_UART_Transmit+0x82>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d104      	bne.n	8005274 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800526a:	2300      	movs	r3, #0
 800526c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	e003      	b.n	800527c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005278:	2300      	movs	r3, #0
 800527a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005284:	e02a      	b.n	80052dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	2180      	movs	r1, #128	; 0x80
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fb1f 	bl	80058d4 <UART_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e036      	b.n	800530e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10b      	bne.n	80052be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	3302      	adds	r3, #2
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	e007      	b.n	80052ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	781a      	ldrb	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	3301      	adds	r3, #1
 80052cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1cf      	bne.n	8005286 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2200      	movs	r2, #0
 80052ee:	2140      	movs	r1, #64	; 0x40
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 faef 	bl	80058d4 <UART_WaitOnFlagUntilTimeout>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e006      	b.n	800530e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	e000      	b.n	800530e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800530c:	2302      	movs	r3, #2
  }
}
 800530e:	4618      	mov	r0, r3
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	4613      	mov	r3, r2
 8005322:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b20      	cmp	r3, #32
 800532e:	d11d      	bne.n	800536c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <HAL_UART_Receive_IT+0x26>
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e016      	b.n	800536e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_UART_Receive_IT+0x38>
 800534a:	2302      	movs	r3, #2
 800534c:	e00f      	b.n	800536e <HAL_UART_Receive_IT+0x58>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800535c:	88fb      	ldrh	r3, [r7, #6]
 800535e:	461a      	mov	r2, r3
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fb24 	bl	80059b0 <UART_Start_Receive_IT>
 8005368:	4603      	mov	r3, r0
 800536a:	e000      	b.n	800536e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800536c:	2302      	movs	r3, #2
  }
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b0ba      	sub	sp, #232	; 0xe8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800539e:	2300      	movs	r3, #0
 80053a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10f      	bne.n	80053de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <HAL_UART_IRQHandler+0x66>
 80053ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fc03 	bl	8005be2 <UART_Receive_IT>
      return;
 80053dc:	e256      	b.n	800588c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 80de 	beq.w	80055a4 <HAL_UART_IRQHandler+0x22c>
 80053e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d106      	bne.n	8005402 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80d1 	beq.w	80055a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <HAL_UART_IRQHandler+0xae>
 800540e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f043 0201 	orr.w	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <HAL_UART_IRQHandler+0xd2>
 8005432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f043 0202 	orr.w	r2, r3, #2
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800544a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <HAL_UART_IRQHandler+0xf6>
 8005456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f043 0204 	orr.w	r2, r3, #4
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d011      	beq.n	800549e <HAL_UART_IRQHandler+0x126>
 800547a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d105      	bne.n	8005492 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	f043 0208 	orr.w	r2, r3, #8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 81ed 	beq.w	8005882 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <HAL_UART_IRQHandler+0x14e>
 80054b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fb8e 	bl	8005be2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	bf0c      	ite	eq
 80054d4:	2301      	moveq	r3, #1
 80054d6:	2300      	movne	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d103      	bne.n	80054f2 <HAL_UART_IRQHandler+0x17a>
 80054ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d04f      	beq.n	8005592 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa96 	bl	8005a24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d141      	bne.n	800558a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3314      	adds	r3, #20
 800550c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800551c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3314      	adds	r3, #20
 800552e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005532:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800553e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005542:	e841 2300 	strex	r3, r2, [r1]
 8005546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800554a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1d9      	bne.n	8005506 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	2b00      	cmp	r3, #0
 8005558:	d013      	beq.n	8005582 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	4a7d      	ldr	r2, [pc, #500]	; (8005754 <HAL_UART_IRQHandler+0x3dc>)
 8005560:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	4618      	mov	r0, r3
 8005568:	f7fd fb5d 	bl	8002c26 <HAL_DMA_Abort_IT>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d016      	beq.n	80055a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800557c:	4610      	mov	r0, r2
 800557e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	e00e      	b.n	80055a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f990 	bl	80058a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	e00a      	b.n	80055a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f98c 	bl	80058a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005590:	e006      	b.n	80055a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f988 	bl	80058a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800559e:	e170      	b.n	8005882 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a0:	bf00      	nop
    return;
 80055a2:	e16e      	b.n	8005882 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	f040 814a 	bne.w	8005842 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 8143 	beq.w	8005842 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 813c 	beq.w	8005842 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ea:	2b40      	cmp	r3, #64	; 0x40
 80055ec:	f040 80b4 	bne.w	8005758 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8140 	beq.w	8005886 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800560a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800560e:	429a      	cmp	r2, r3
 8005610:	f080 8139 	bcs.w	8005886 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800561a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005626:	f000 8088 	beq.w	800573a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005656:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800565a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005662:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800566e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1d9      	bne.n	800562a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3314      	adds	r3, #20
 800567c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800569a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800569e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e1      	bne.n	8005676 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3314      	adds	r3, #20
 80056b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3314      	adds	r3, #20
 80056d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e3      	bne.n	80056b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	330c      	adds	r3, #12
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570a:	f023 0310 	bic.w	r3, r3, #16
 800570e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330c      	adds	r3, #12
 8005718:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800571c:	65ba      	str	r2, [r7, #88]	; 0x58
 800571e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800572a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e3      	bne.n	80056f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	4618      	mov	r0, r3
 8005736:	f7fd fa06 	bl	8002b46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005742:	b29b      	uxth	r3, r3
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	b29b      	uxth	r3, r3
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f8b6 	bl	80058bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005750:	e099      	b.n	8005886 <HAL_UART_IRQHandler+0x50e>
 8005752:	bf00      	nop
 8005754:	08005aeb 	.word	0x08005aeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005760:	b29b      	uxth	r3, r3
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 808b 	beq.w	800588a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8086 	beq.w	800588a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800578e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005790:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005794:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	330c      	adds	r3, #12
 800579e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057a2:	647a      	str	r2, [r7, #68]	; 0x44
 80057a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e3      	bne.n	800577e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3314      	adds	r3, #20
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	623b      	str	r3, [r7, #32]
   return(result);
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3314      	adds	r3, #20
 80057d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057da:	633a      	str	r2, [r7, #48]	; 0x30
 80057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e3      	bne.n	80057b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	e853 3f00 	ldrex	r3, [r3]
 800580a:	60fb      	str	r3, [r7, #12]
   return(result);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0310 	bic.w	r3, r3, #16
 8005812:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005820:	61fa      	str	r2, [r7, #28]
 8005822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	69b9      	ldr	r1, [r7, #24]
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	617b      	str	r3, [r7, #20]
   return(result);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e3      	bne.n	80057fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f83e 	bl	80058bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005840:	e023      	b.n	800588a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_UART_IRQHandler+0x4ea>
 800584e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f959 	bl	8005b12 <UART_Transmit_IT>
    return;
 8005860:	e014      	b.n	800588c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00e      	beq.n	800588c <HAL_UART_IRQHandler+0x514>
 800586e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d008      	beq.n	800588c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f999 	bl	8005bb2 <UART_EndTransmit_IT>
    return;
 8005880:	e004      	b.n	800588c <HAL_UART_IRQHandler+0x514>
    return;
 8005882:	bf00      	nop
 8005884:	e002      	b.n	800588c <HAL_UART_IRQHandler+0x514>
      return;
 8005886:	bf00      	nop
 8005888:	e000      	b.n	800588c <HAL_UART_IRQHandler+0x514>
      return;
 800588a:	bf00      	nop
  }
}
 800588c:	37e8      	adds	r7, #232	; 0xe8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop

08005894 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b090      	sub	sp, #64	; 0x40
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e4:	e050      	b.n	8005988 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d04c      	beq.n	8005988 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d007      	beq.n	8005904 <UART_WaitOnFlagUntilTimeout+0x30>
 80058f4:	f7fc ffe6 	bl	80028c4 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005900:	429a      	cmp	r2, r3
 8005902:	d241      	bcs.n	8005988 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005924:	637a      	str	r2, [r7, #52]	; 0x34
 8005926:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800592a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e5      	bne.n	8005904 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3314      	adds	r3, #20
 800593e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	613b      	str	r3, [r7, #16]
   return(result);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3314      	adds	r3, #20
 8005956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005958:	623a      	str	r2, [r7, #32]
 800595a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	69f9      	ldr	r1, [r7, #28]
 800595e:	6a3a      	ldr	r2, [r7, #32]
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	61bb      	str	r3, [r7, #24]
   return(result);
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e5      	bne.n	8005938 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e00f      	b.n	80059a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4013      	ands	r3, r2
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	429a      	cmp	r2, r3
 8005996:	bf0c      	ite	eq
 8005998:	2301      	moveq	r3, #1
 800599a:	2300      	movne	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d09f      	beq.n	80058e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3740      	adds	r7, #64	; 0x40
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	88fa      	ldrh	r2, [r7, #6]
 80059c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	88fa      	ldrh	r2, [r7, #6]
 80059ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2222      	movs	r2, #34	; 0x22
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695a      	ldr	r2, [r3, #20]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0220 	orr.w	r2, r2, #32
 8005a14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b095      	sub	sp, #84	; 0x54
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	330c      	adds	r3, #12
 8005a4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a4c:	643a      	str	r2, [r7, #64]	; 0x40
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e5      	bne.n	8005a2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3314      	adds	r3, #20
 8005a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f023 0301 	bic.w	r3, r3, #1
 8005a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3314      	adds	r3, #20
 8005a7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e5      	bne.n	8005a60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d119      	bne.n	8005ad0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f023 0310 	bic.w	r3, r3, #16
 8005ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	330c      	adds	r3, #12
 8005aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005abc:	61ba      	str	r2, [r7, #24]
 8005abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6979      	ldr	r1, [r7, #20]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e5      	bne.n	8005a9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ade:	bf00      	nop
 8005ae0:	3754      	adds	r7, #84	; 0x54
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff fecf 	bl	80058a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b085      	sub	sp, #20
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b21      	cmp	r3, #33	; 0x21
 8005b24:	d13e      	bne.n	8005ba4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2e:	d114      	bne.n	8005b5a <UART_Transmit_IT+0x48>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d110      	bne.n	8005b5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	1c9a      	adds	r2, r3, #2
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	621a      	str	r2, [r3, #32]
 8005b58:	e008      	b.n	8005b6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	1c59      	adds	r1, r3, #1
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6211      	str	r1, [r2, #32]
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10f      	bne.n	8005ba0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e000      	b.n	8005ba6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ba4:	2302      	movs	r3, #2
  }
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b082      	sub	sp, #8
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff fe5e 	bl	8005894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b08c      	sub	sp, #48	; 0x30
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b22      	cmp	r3, #34	; 0x22
 8005bf4:	f040 80ab 	bne.w	8005d4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c00:	d117      	bne.n	8005c32 <UART_Receive_IT+0x50>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d113      	bne.n	8005c32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	1c9a      	adds	r2, r3, #2
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c30:	e026      	b.n	8005c80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c44:	d007      	beq.n	8005c56 <UART_Receive_IT+0x74>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <UART_Receive_IT+0x82>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	e008      	b.n	8005c76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d15a      	bne.n	8005d4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0220 	bic.w	r2, r2, #32
 8005ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695a      	ldr	r2, [r3, #20]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d135      	bne.n	8005d40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f023 0310 	bic.w	r3, r3, #16
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	330c      	adds	r3, #12
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfa:	623a      	str	r2, [r7, #32]
 8005cfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	69f9      	ldr	r1, [r7, #28]
 8005d00:	6a3a      	ldr	r2, [r7, #32]
 8005d02:	e841 2300 	strex	r3, r2, [r1]
 8005d06:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1e5      	bne.n	8005cda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d10a      	bne.n	8005d32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fdbf 	bl	80058bc <HAL_UARTEx_RxEventCallback>
 8005d3e:	e002      	b.n	8005d46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7fb fa07 	bl	8001154 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e002      	b.n	8005d50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e000      	b.n	8005d50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d4e:	2302      	movs	r3, #2
  }
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3730      	adds	r7, #48	; 0x30
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	b09f      	sub	sp, #124	; 0x7c
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6e:	68d9      	ldr	r1, [r3, #12]
 8005d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	ea40 0301 	orr.w	r3, r0, r1
 8005d78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d9c:	f021 010c 	bic.w	r1, r1, #12
 8005da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005da6:	430b      	orrs	r3, r1
 8005da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db6:	6999      	ldr	r1, [r3, #24]
 8005db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	ea40 0301 	orr.w	r3, r0, r1
 8005dc0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4bc5      	ldr	r3, [pc, #788]	; (80060dc <UART_SetConfig+0x384>)
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d004      	beq.n	8005dd6 <UART_SetConfig+0x7e>
 8005dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4bc3      	ldr	r3, [pc, #780]	; (80060e0 <UART_SetConfig+0x388>)
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d103      	bne.n	8005dde <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dd6:	f7fd fba9 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 8005dda:	6778      	str	r0, [r7, #116]	; 0x74
 8005ddc:	e002      	b.n	8005de4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dde:	f7fd fb91 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8005de2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dec:	f040 80b6 	bne.w	8005f5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df2:	461c      	mov	r4, r3
 8005df4:	f04f 0500 	mov.w	r5, #0
 8005df8:	4622      	mov	r2, r4
 8005dfa:	462b      	mov	r3, r5
 8005dfc:	1891      	adds	r1, r2, r2
 8005dfe:	6439      	str	r1, [r7, #64]	; 0x40
 8005e00:	415b      	adcs	r3, r3
 8005e02:	647b      	str	r3, [r7, #68]	; 0x44
 8005e04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e08:	1912      	adds	r2, r2, r4
 8005e0a:	eb45 0303 	adc.w	r3, r5, r3
 8005e0e:	f04f 0000 	mov.w	r0, #0
 8005e12:	f04f 0100 	mov.w	r1, #0
 8005e16:	00d9      	lsls	r1, r3, #3
 8005e18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e1c:	00d0      	lsls	r0, r2, #3
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	1911      	adds	r1, r2, r4
 8005e24:	6639      	str	r1, [r7, #96]	; 0x60
 8005e26:	416b      	adcs	r3, r5
 8005e28:	667b      	str	r3, [r7, #100]	; 0x64
 8005e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	1891      	adds	r1, r2, r2
 8005e36:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e38:	415b      	adcs	r3, r3
 8005e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e44:	f7fa fe2a 	bl	8000a9c <__aeabi_uldivmod>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4ba5      	ldr	r3, [pc, #660]	; (80060e4 <UART_SetConfig+0x38c>)
 8005e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	011e      	lsls	r6, r3, #4
 8005e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e58:	461c      	mov	r4, r3
 8005e5a:	f04f 0500 	mov.w	r5, #0
 8005e5e:	4622      	mov	r2, r4
 8005e60:	462b      	mov	r3, r5
 8005e62:	1891      	adds	r1, r2, r2
 8005e64:	6339      	str	r1, [r7, #48]	; 0x30
 8005e66:	415b      	adcs	r3, r3
 8005e68:	637b      	str	r3, [r7, #52]	; 0x34
 8005e6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e6e:	1912      	adds	r2, r2, r4
 8005e70:	eb45 0303 	adc.w	r3, r5, r3
 8005e74:	f04f 0000 	mov.w	r0, #0
 8005e78:	f04f 0100 	mov.w	r1, #0
 8005e7c:	00d9      	lsls	r1, r3, #3
 8005e7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e82:	00d0      	lsls	r0, r2, #3
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	1911      	adds	r1, r2, r4
 8005e8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e8c:	416b      	adcs	r3, r5
 8005e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	461a      	mov	r2, r3
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	1891      	adds	r1, r2, r2
 8005e9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e9e:	415b      	adcs	r3, r3
 8005ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ea6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005eaa:	f7fa fdf7 	bl	8000a9c <__aeabi_uldivmod>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4b8c      	ldr	r3, [pc, #560]	; (80060e4 <UART_SetConfig+0x38c>)
 8005eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	2164      	movs	r1, #100	; 0x64
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	3332      	adds	r3, #50	; 0x32
 8005ec6:	4a87      	ldr	r2, [pc, #540]	; (80060e4 <UART_SetConfig+0x38c>)
 8005ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ecc:	095b      	lsrs	r3, r3, #5
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ed4:	441e      	add	r6, r3
 8005ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f04f 0100 	mov.w	r1, #0
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	1894      	adds	r4, r2, r2
 8005ee4:	623c      	str	r4, [r7, #32]
 8005ee6:	415b      	adcs	r3, r3
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eee:	1812      	adds	r2, r2, r0
 8005ef0:	eb41 0303 	adc.w	r3, r1, r3
 8005ef4:	f04f 0400 	mov.w	r4, #0
 8005ef8:	f04f 0500 	mov.w	r5, #0
 8005efc:	00dd      	lsls	r5, r3, #3
 8005efe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f02:	00d4      	lsls	r4, r2, #3
 8005f04:	4622      	mov	r2, r4
 8005f06:	462b      	mov	r3, r5
 8005f08:	1814      	adds	r4, r2, r0
 8005f0a:	653c      	str	r4, [r7, #80]	; 0x50
 8005f0c:	414b      	adcs	r3, r1
 8005f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	461a      	mov	r2, r3
 8005f16:	f04f 0300 	mov.w	r3, #0
 8005f1a:	1891      	adds	r1, r2, r2
 8005f1c:	61b9      	str	r1, [r7, #24]
 8005f1e:	415b      	adcs	r3, r3
 8005f20:	61fb      	str	r3, [r7, #28]
 8005f22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f2a:	f7fa fdb7 	bl	8000a9c <__aeabi_uldivmod>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4b6c      	ldr	r3, [pc, #432]	; (80060e4 <UART_SetConfig+0x38c>)
 8005f34:	fba3 1302 	umull	r1, r3, r3, r2
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	2164      	movs	r1, #100	; 0x64
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	3332      	adds	r3, #50	; 0x32
 8005f46:	4a67      	ldr	r2, [pc, #412]	; (80060e4 <UART_SetConfig+0x38c>)
 8005f48:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4c:	095b      	lsrs	r3, r3, #5
 8005f4e:	f003 0207 	and.w	r2, r3, #7
 8005f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4432      	add	r2, r6
 8005f58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f5a:	e0b9      	b.n	80060d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f5e:	461c      	mov	r4, r3
 8005f60:	f04f 0500 	mov.w	r5, #0
 8005f64:	4622      	mov	r2, r4
 8005f66:	462b      	mov	r3, r5
 8005f68:	1891      	adds	r1, r2, r2
 8005f6a:	6139      	str	r1, [r7, #16]
 8005f6c:	415b      	adcs	r3, r3
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f74:	1912      	adds	r2, r2, r4
 8005f76:	eb45 0303 	adc.w	r3, r5, r3
 8005f7a:	f04f 0000 	mov.w	r0, #0
 8005f7e:	f04f 0100 	mov.w	r1, #0
 8005f82:	00d9      	lsls	r1, r3, #3
 8005f84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f88:	00d0      	lsls	r0, r2, #3
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	eb12 0804 	adds.w	r8, r2, r4
 8005f92:	eb43 0905 	adc.w	r9, r3, r5
 8005f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	008b      	lsls	r3, r1, #2
 8005faa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fae:	0082      	lsls	r2, r0, #2
 8005fb0:	4640      	mov	r0, r8
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	f7fa fd72 	bl	8000a9c <__aeabi_uldivmod>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4b49      	ldr	r3, [pc, #292]	; (80060e4 <UART_SetConfig+0x38c>)
 8005fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	011e      	lsls	r6, r3, #4
 8005fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f04f 0100 	mov.w	r1, #0
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	1894      	adds	r4, r2, r2
 8005fd4:	60bc      	str	r4, [r7, #8]
 8005fd6:	415b      	adcs	r3, r3
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fde:	1812      	adds	r2, r2, r0
 8005fe0:	eb41 0303 	adc.w	r3, r1, r3
 8005fe4:	f04f 0400 	mov.w	r4, #0
 8005fe8:	f04f 0500 	mov.w	r5, #0
 8005fec:	00dd      	lsls	r5, r3, #3
 8005fee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ff2:	00d4      	lsls	r4, r2, #3
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	462b      	mov	r3, r5
 8005ff8:	1814      	adds	r4, r2, r0
 8005ffa:	64bc      	str	r4, [r7, #72]	; 0x48
 8005ffc:	414b      	adcs	r3, r1
 8005ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	4618      	mov	r0, r3
 8006006:	f04f 0100 	mov.w	r1, #0
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	008b      	lsls	r3, r1, #2
 8006014:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006018:	0082      	lsls	r2, r0, #2
 800601a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800601e:	f7fa fd3d 	bl	8000a9c <__aeabi_uldivmod>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4b2f      	ldr	r3, [pc, #188]	; (80060e4 <UART_SetConfig+0x38c>)
 8006028:	fba3 1302 	umull	r1, r3, r3, r2
 800602c:	095b      	lsrs	r3, r3, #5
 800602e:	2164      	movs	r1, #100	; 0x64
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	3332      	adds	r3, #50	; 0x32
 800603a:	4a2a      	ldr	r2, [pc, #168]	; (80060e4 <UART_SetConfig+0x38c>)
 800603c:	fba2 2303 	umull	r2, r3, r2, r3
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006046:	441e      	add	r6, r3
 8006048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800604a:	4618      	mov	r0, r3
 800604c:	f04f 0100 	mov.w	r1, #0
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	1894      	adds	r4, r2, r2
 8006056:	603c      	str	r4, [r7, #0]
 8006058:	415b      	adcs	r3, r3
 800605a:	607b      	str	r3, [r7, #4]
 800605c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006060:	1812      	adds	r2, r2, r0
 8006062:	eb41 0303 	adc.w	r3, r1, r3
 8006066:	f04f 0400 	mov.w	r4, #0
 800606a:	f04f 0500 	mov.w	r5, #0
 800606e:	00dd      	lsls	r5, r3, #3
 8006070:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006074:	00d4      	lsls	r4, r2, #3
 8006076:	4622      	mov	r2, r4
 8006078:	462b      	mov	r3, r5
 800607a:	eb12 0a00 	adds.w	sl, r2, r0
 800607e:	eb43 0b01 	adc.w	fp, r3, r1
 8006082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	4618      	mov	r0, r3
 8006088:	f04f 0100 	mov.w	r1, #0
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	008b      	lsls	r3, r1, #2
 8006096:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800609a:	0082      	lsls	r2, r0, #2
 800609c:	4650      	mov	r0, sl
 800609e:	4659      	mov	r1, fp
 80060a0:	f7fa fcfc 	bl	8000a9c <__aeabi_uldivmod>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4b0e      	ldr	r3, [pc, #56]	; (80060e4 <UART_SetConfig+0x38c>)
 80060aa:	fba3 1302 	umull	r1, r3, r3, r2
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	2164      	movs	r1, #100	; 0x64
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	3332      	adds	r3, #50	; 0x32
 80060bc:	4a09      	ldr	r2, [pc, #36]	; (80060e4 <UART_SetConfig+0x38c>)
 80060be:	fba2 2303 	umull	r2, r3, r2, r3
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	f003 020f 	and.w	r2, r3, #15
 80060c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4432      	add	r2, r6
 80060ce:	609a      	str	r2, [r3, #8]
}
 80060d0:	bf00      	nop
 80060d2:	377c      	adds	r7, #124	; 0x7c
 80060d4:	46bd      	mov	sp, r7
 80060d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060da:	bf00      	nop
 80060dc:	40011000 	.word	0x40011000
 80060e0:	40011400 	.word	0x40011400
 80060e4:	51eb851f 	.word	0x51eb851f

080060e8 <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b0a4      	sub	sp, #144	; 0x90
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	605a      	str	r2, [r3, #4]
 80060fc:	609a      	str	r2, [r3, #8]
 80060fe:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006100:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800610a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	605a      	str	r2, [r3, #4]
 8006114:	609a      	str	r2, [r3, #8]
 8006116:	60da      	str	r2, [r3, #12]
 8006118:	611a      	str	r2, [r3, #16]
 800611a:	615a      	str	r2, [r3, #20]
 800611c:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 8006130:	2301      	movs	r3, #1
 8006132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8006136:	2300      	movs	r3, #0
 8006138:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800613c:	e009      	b.n	8006152 <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 800613e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8006148:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800614c:	3301      	adds	r3, #1
 800614e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8006152:	79fa      	ldrb	r2, [r7, #7]
 8006154:	494d      	ldr	r1, [pc, #308]	; (800628c <DC_MOTOR_Init+0x1a4>)
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	3310      	adds	r3, #16
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 8006168:	429a      	cmp	r2, r3
 800616a:	d3e8      	bcc.n	800613e <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 800616c:	79fa      	ldrb	r2, [r7, #7]
 800616e:	4947      	ldr	r1, [pc, #284]	; (800628c <DC_MOTOR_Init+0x1a4>)
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	3308      	adds	r3, #8
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	4b43      	ldr	r3, [pc, #268]	; (8006290 <DC_MOTOR_Init+0x1a8>)
 8006182:	fb03 f302 	mul.w	r3, r3, r2
 8006186:	4618      	mov	r0, r3
 8006188:	79fa      	ldrb	r2, [r7, #7]
 800618a:	4940      	ldr	r1, [pc, #256]	; (800628c <DC_MOTOR_Init+0x1a4>)
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	330c      	adds	r3, #12
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 80061aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061ae:	3b01      	subs	r3, #1
 80061b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 80061b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061b8:	3b02      	subs	r3, #2
 80061ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 80061be:	79fa      	ldrb	r2, [r7, #7]
 80061c0:	4932      	ldr	r1, [pc, #200]	; (800628c <DC_MOTOR_Init+0x1a4>)
 80061c2:	4613      	mov	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	440b      	add	r3, r1
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 80061d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061d4:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061d6:	2300      	movs	r3, #0
 80061d8:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 80061da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061de:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80061e4:	2380      	movs	r3, #128	; 0x80
 80061e6:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 80061e8:	f107 0308 	add.w	r3, r7, #8
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fd fe8a 	bl	8003f06 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80061f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061f6:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 80061f8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80061fc:	f107 0308 	add.w	r3, r7, #8
 8006200:	4611      	mov	r1, r2
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fac6 	bl	8004794 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8006208:	f107 0308 	add.w	r3, r7, #8
 800620c:	4618      	mov	r0, r3
 800620e:	f7fd ff39 	bl	8004084 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006212:	2300      	movs	r3, #0
 8006214:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006216:	2300      	movs	r3, #0
 8006218:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 800621a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800621e:	f107 0308 	add.w	r3, r7, #8
 8006222:	4611      	mov	r1, r2
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe feb5 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800622a:	2360      	movs	r3, #96	; 0x60
 800622c:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 800622e:	2300      	movs	r3, #0
 8006230:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006232:	2300      	movs	r3, #0
 8006234:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006236:	2300      	movs	r3, #0
 8006238:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800623a:	79fa      	ldrb	r2, [r7, #7]
 800623c:	4913      	ldr	r1, [pc, #76]	; (800628c <DC_MOTOR_Init+0x1a4>)
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	440b      	add	r3, r1
 8006248:	3304      	adds	r3, #4
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006250:	f107 0308 	add.w	r3, r7, #8
 8006254:	4618      	mov	r0, r3
 8006256:	f7fe f9db 	bl	8004610 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 800625a:	f107 0308 	add.w	r3, r7, #8
 800625e:	4618      	mov	r0, r3
 8006260:	f7fc f896 	bl	8002390 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8006264:	79fa      	ldrb	r2, [r7, #7]
 8006266:	4909      	ldr	r1, [pc, #36]	; (800628c <DC_MOTOR_Init+0x1a4>)
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	3304      	adds	r3, #4
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	f107 0308 	add.w	r3, r7, #8
 800627a:	4611      	mov	r1, r2
 800627c:	4618      	mov	r0, r3
 800627e:	f7fd ff51 	bl	8004124 <HAL_TIM_PWM_Start>
}
 8006282:	bf00      	nop
 8006284:	3790      	adds	r7, #144	; 0x90
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	08006dc0 	.word	0x08006dc0
 8006290:	000f4240 	.word	0x000f4240

08006294 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	460a      	mov	r2, r1
 800629e:	71fb      	strb	r3, [r7, #7]
 80062a0:	4613      	mov	r3, r2
 80062a2:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80062a4:	79fa      	ldrb	r2, [r7, #7]
 80062a6:	4928      	ldr	r1, [pc, #160]	; (8006348 <DC_MOTOR_Start+0xb4>)
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	3304      	adds	r3, #4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 80062ba:	79fa      	ldrb	r2, [r7, #7]
 80062bc:	4922      	ldr	r1, [pc, #136]	; (8006348 <DC_MOTOR_Start+0xb4>)
 80062be:	4613      	mov	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	88ba      	ldrh	r2, [r7, #4]
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 80062ce:	e035      	b.n	800633c <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80062d0:	79fa      	ldrb	r2, [r7, #7]
 80062d2:	491d      	ldr	r1, [pc, #116]	; (8006348 <DC_MOTOR_Start+0xb4>)
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	3304      	adds	r3, #4
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d10a      	bne.n	80062fc <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 80062e6:	79fa      	ldrb	r2, [r7, #7]
 80062e8:	4917      	ldr	r1, [pc, #92]	; (8006348 <DC_MOTOR_Start+0xb4>)
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	88ba      	ldrh	r2, [r7, #4]
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80062fa:	e01f      	b.n	800633c <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 80062fc:	79fa      	ldrb	r2, [r7, #7]
 80062fe:	4912      	ldr	r1, [pc, #72]	; (8006348 <DC_MOTOR_Start+0xb4>)
 8006300:	4613      	mov	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	3304      	adds	r3, #4
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b08      	cmp	r3, #8
 8006310:	d10a      	bne.n	8006328 <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8006312:	79fa      	ldrb	r2, [r7, #7]
 8006314:	490c      	ldr	r1, [pc, #48]	; (8006348 <DC_MOTOR_Start+0xb4>)
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	88ba      	ldrh	r2, [r7, #4]
 8006324:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006326:	e009      	b.n	800633c <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8006328:	79fa      	ldrb	r2, [r7, #7]
 800632a:	4907      	ldr	r1, [pc, #28]	; (8006348 <DC_MOTOR_Start+0xb4>)
 800632c:	4613      	mov	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	440b      	add	r3, r1
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	88ba      	ldrh	r2, [r7, #4]
 800633a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	08006dc0 	.word	0x08006dc0

0800634c <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	4603      	mov	r3, r0
 8006354:	460a      	mov	r2, r1
 8006356:	71fb      	strb	r3, [r7, #7]
 8006358:	4613      	mov	r3, r2
 800635a:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800635c:	79fa      	ldrb	r2, [r7, #7]
 800635e:	4928      	ldr	r1, [pc, #160]	; (8006400 <DC_MOTOR_Set_Speed+0xb4>)
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	3304      	adds	r3, #4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8006372:	79fa      	ldrb	r2, [r7, #7]
 8006374:	4922      	ldr	r1, [pc, #136]	; (8006400 <DC_MOTOR_Set_Speed+0xb4>)
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	440b      	add	r3, r1
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	88ba      	ldrh	r2, [r7, #4]
 8006384:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8006386:	e035      	b.n	80063f4 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8006388:	79fa      	ldrb	r2, [r7, #7]
 800638a:	491d      	ldr	r1, [pc, #116]	; (8006400 <DC_MOTOR_Set_Speed+0xb4>)
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	3304      	adds	r3, #4
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b04      	cmp	r3, #4
 800639c:	d10a      	bne.n	80063b4 <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800639e:	79fa      	ldrb	r2, [r7, #7]
 80063a0:	4917      	ldr	r1, [pc, #92]	; (8006400 <DC_MOTOR_Set_Speed+0xb4>)
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	88ba      	ldrh	r2, [r7, #4]
 80063b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80063b2:	e01f      	b.n	80063f4 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 80063b4:	79fa      	ldrb	r2, [r7, #7]
 80063b6:	4912      	ldr	r1, [pc, #72]	; (8006400 <DC_MOTOR_Set_Speed+0xb4>)
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	3304      	adds	r3, #4
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d10a      	bne.n	80063e0 <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 80063ca:	79fa      	ldrb	r2, [r7, #7]
 80063cc:	490c      	ldr	r1, [pc, #48]	; (8006400 <DC_MOTOR_Set_Speed+0xb4>)
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	440b      	add	r3, r1
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	88ba      	ldrh	r2, [r7, #4]
 80063dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80063de:	e009      	b.n	80063f4 <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 80063e0:	79fa      	ldrb	r2, [r7, #7]
 80063e2:	4907      	ldr	r1, [pc, #28]	; (8006400 <DC_MOTOR_Set_Speed+0xb4>)
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	88ba      	ldrh	r2, [r7, #4]
 80063f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	08006dc0 	.word	0x08006dc0

08006404 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8006408:	4b14      	ldr	r3, [pc, #80]	; (800645c <DWT_Delay_Init+0x58>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	4a13      	ldr	r2, [pc, #76]	; (800645c <DWT_Delay_Init+0x58>)
 800640e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006412:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8006414:	4b11      	ldr	r3, [pc, #68]	; (800645c <DWT_Delay_Init+0x58>)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	4a10      	ldr	r2, [pc, #64]	; (800645c <DWT_Delay_Init+0x58>)
 800641a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800641e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8006420:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <DWT_Delay_Init+0x5c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a0e      	ldr	r2, [pc, #56]	; (8006460 <DWT_Delay_Init+0x5c>)
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800642c:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <DWT_Delay_Init+0x5c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a0b      	ldr	r2, [pc, #44]	; (8006460 <DWT_Delay_Init+0x5c>)
 8006432:	f043 0301 	orr.w	r3, r3, #1
 8006436:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8006438:	4b09      	ldr	r3, [pc, #36]	; (8006460 <DWT_Delay_Init+0x5c>)
 800643a:	2200      	movs	r2, #0
 800643c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800643e:	bf00      	nop
    __ASM volatile ("NOP");
 8006440:	bf00      	nop
    __ASM volatile ("NOP");
 8006442:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <DWT_Delay_Init+0x5c>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800644c:	2300      	movs	r3, #0
 800644e:	e000      	b.n	8006452 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8006450:	2301      	movs	r3, #1
    }
}
 8006452:	4618      	mov	r0, r3
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	e000edf0 	.word	0xe000edf0
 8006460:	e0001000 	.word	0xe0001000

08006464 <__errno>:
 8006464:	4b01      	ldr	r3, [pc, #4]	; (800646c <__errno+0x8>)
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	20000014 	.word	0x20000014

08006470 <__libc_init_array>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	4d0d      	ldr	r5, [pc, #52]	; (80064a8 <__libc_init_array+0x38>)
 8006474:	4c0d      	ldr	r4, [pc, #52]	; (80064ac <__libc_init_array+0x3c>)
 8006476:	1b64      	subs	r4, r4, r5
 8006478:	10a4      	asrs	r4, r4, #2
 800647a:	2600      	movs	r6, #0
 800647c:	42a6      	cmp	r6, r4
 800647e:	d109      	bne.n	8006494 <__libc_init_array+0x24>
 8006480:	4d0b      	ldr	r5, [pc, #44]	; (80064b0 <__libc_init_array+0x40>)
 8006482:	4c0c      	ldr	r4, [pc, #48]	; (80064b4 <__libc_init_array+0x44>)
 8006484:	f000 fc4e 	bl	8006d24 <_init>
 8006488:	1b64      	subs	r4, r4, r5
 800648a:	10a4      	asrs	r4, r4, #2
 800648c:	2600      	movs	r6, #0
 800648e:	42a6      	cmp	r6, r4
 8006490:	d105      	bne.n	800649e <__libc_init_array+0x2e>
 8006492:	bd70      	pop	{r4, r5, r6, pc}
 8006494:	f855 3b04 	ldr.w	r3, [r5], #4
 8006498:	4798      	blx	r3
 800649a:	3601      	adds	r6, #1
 800649c:	e7ee      	b.n	800647c <__libc_init_array+0xc>
 800649e:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a2:	4798      	blx	r3
 80064a4:	3601      	adds	r6, #1
 80064a6:	e7f2      	b.n	800648e <__libc_init_array+0x1e>
 80064a8:	08006e24 	.word	0x08006e24
 80064ac:	08006e24 	.word	0x08006e24
 80064b0:	08006e24 	.word	0x08006e24
 80064b4:	08006e28 	.word	0x08006e28

080064b8 <memcpy>:
 80064b8:	440a      	add	r2, r1
 80064ba:	4291      	cmp	r1, r2
 80064bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80064c0:	d100      	bne.n	80064c4 <memcpy+0xc>
 80064c2:	4770      	bx	lr
 80064c4:	b510      	push	{r4, lr}
 80064c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ce:	4291      	cmp	r1, r2
 80064d0:	d1f9      	bne.n	80064c6 <memcpy+0xe>
 80064d2:	bd10      	pop	{r4, pc}

080064d4 <memset>:
 80064d4:	4402      	add	r2, r0
 80064d6:	4603      	mov	r3, r0
 80064d8:	4293      	cmp	r3, r2
 80064da:	d100      	bne.n	80064de <memset+0xa>
 80064dc:	4770      	bx	lr
 80064de:	f803 1b01 	strb.w	r1, [r3], #1
 80064e2:	e7f9      	b.n	80064d8 <memset+0x4>

080064e4 <siprintf>:
 80064e4:	b40e      	push	{r1, r2, r3}
 80064e6:	b500      	push	{lr}
 80064e8:	b09c      	sub	sp, #112	; 0x70
 80064ea:	ab1d      	add	r3, sp, #116	; 0x74
 80064ec:	9002      	str	r0, [sp, #8]
 80064ee:	9006      	str	r0, [sp, #24]
 80064f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064f4:	4809      	ldr	r0, [pc, #36]	; (800651c <siprintf+0x38>)
 80064f6:	9107      	str	r1, [sp, #28]
 80064f8:	9104      	str	r1, [sp, #16]
 80064fa:	4909      	ldr	r1, [pc, #36]	; (8006520 <siprintf+0x3c>)
 80064fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006500:	9105      	str	r1, [sp, #20]
 8006502:	6800      	ldr	r0, [r0, #0]
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	a902      	add	r1, sp, #8
 8006508:	f000 f868 	bl	80065dc <_svfiprintf_r>
 800650c:	9b02      	ldr	r3, [sp, #8]
 800650e:	2200      	movs	r2, #0
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	b01c      	add	sp, #112	; 0x70
 8006514:	f85d eb04 	ldr.w	lr, [sp], #4
 8006518:	b003      	add	sp, #12
 800651a:	4770      	bx	lr
 800651c:	20000014 	.word	0x20000014
 8006520:	ffff0208 	.word	0xffff0208

08006524 <__ssputs_r>:
 8006524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	688e      	ldr	r6, [r1, #8]
 800652a:	429e      	cmp	r6, r3
 800652c:	4682      	mov	sl, r0
 800652e:	460c      	mov	r4, r1
 8006530:	4690      	mov	r8, r2
 8006532:	461f      	mov	r7, r3
 8006534:	d838      	bhi.n	80065a8 <__ssputs_r+0x84>
 8006536:	898a      	ldrh	r2, [r1, #12]
 8006538:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800653c:	d032      	beq.n	80065a4 <__ssputs_r+0x80>
 800653e:	6825      	ldr	r5, [r4, #0]
 8006540:	6909      	ldr	r1, [r1, #16]
 8006542:	eba5 0901 	sub.w	r9, r5, r1
 8006546:	6965      	ldr	r5, [r4, #20]
 8006548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800654c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006550:	3301      	adds	r3, #1
 8006552:	444b      	add	r3, r9
 8006554:	106d      	asrs	r5, r5, #1
 8006556:	429d      	cmp	r5, r3
 8006558:	bf38      	it	cc
 800655a:	461d      	movcc	r5, r3
 800655c:	0553      	lsls	r3, r2, #21
 800655e:	d531      	bpl.n	80065c4 <__ssputs_r+0xa0>
 8006560:	4629      	mov	r1, r5
 8006562:	f000 fb39 	bl	8006bd8 <_malloc_r>
 8006566:	4606      	mov	r6, r0
 8006568:	b950      	cbnz	r0, 8006580 <__ssputs_r+0x5c>
 800656a:	230c      	movs	r3, #12
 800656c:	f8ca 3000 	str.w	r3, [sl]
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006576:	81a3      	strh	r3, [r4, #12]
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006580:	6921      	ldr	r1, [r4, #16]
 8006582:	464a      	mov	r2, r9
 8006584:	f7ff ff98 	bl	80064b8 <memcpy>
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800658e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	6126      	str	r6, [r4, #16]
 8006596:	6165      	str	r5, [r4, #20]
 8006598:	444e      	add	r6, r9
 800659a:	eba5 0509 	sub.w	r5, r5, r9
 800659e:	6026      	str	r6, [r4, #0]
 80065a0:	60a5      	str	r5, [r4, #8]
 80065a2:	463e      	mov	r6, r7
 80065a4:	42be      	cmp	r6, r7
 80065a6:	d900      	bls.n	80065aa <__ssputs_r+0x86>
 80065a8:	463e      	mov	r6, r7
 80065aa:	4632      	mov	r2, r6
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	4641      	mov	r1, r8
 80065b0:	f000 faa8 	bl	8006b04 <memmove>
 80065b4:	68a3      	ldr	r3, [r4, #8]
 80065b6:	6822      	ldr	r2, [r4, #0]
 80065b8:	1b9b      	subs	r3, r3, r6
 80065ba:	4432      	add	r2, r6
 80065bc:	60a3      	str	r3, [r4, #8]
 80065be:	6022      	str	r2, [r4, #0]
 80065c0:	2000      	movs	r0, #0
 80065c2:	e7db      	b.n	800657c <__ssputs_r+0x58>
 80065c4:	462a      	mov	r2, r5
 80065c6:	f000 fb61 	bl	8006c8c <_realloc_r>
 80065ca:	4606      	mov	r6, r0
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d1e1      	bne.n	8006594 <__ssputs_r+0x70>
 80065d0:	6921      	ldr	r1, [r4, #16]
 80065d2:	4650      	mov	r0, sl
 80065d4:	f000 fab0 	bl	8006b38 <_free_r>
 80065d8:	e7c7      	b.n	800656a <__ssputs_r+0x46>
	...

080065dc <_svfiprintf_r>:
 80065dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e0:	4698      	mov	r8, r3
 80065e2:	898b      	ldrh	r3, [r1, #12]
 80065e4:	061b      	lsls	r3, r3, #24
 80065e6:	b09d      	sub	sp, #116	; 0x74
 80065e8:	4607      	mov	r7, r0
 80065ea:	460d      	mov	r5, r1
 80065ec:	4614      	mov	r4, r2
 80065ee:	d50e      	bpl.n	800660e <_svfiprintf_r+0x32>
 80065f0:	690b      	ldr	r3, [r1, #16]
 80065f2:	b963      	cbnz	r3, 800660e <_svfiprintf_r+0x32>
 80065f4:	2140      	movs	r1, #64	; 0x40
 80065f6:	f000 faef 	bl	8006bd8 <_malloc_r>
 80065fa:	6028      	str	r0, [r5, #0]
 80065fc:	6128      	str	r0, [r5, #16]
 80065fe:	b920      	cbnz	r0, 800660a <_svfiprintf_r+0x2e>
 8006600:	230c      	movs	r3, #12
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	f04f 30ff 	mov.w	r0, #4294967295
 8006608:	e0d1      	b.n	80067ae <_svfiprintf_r+0x1d2>
 800660a:	2340      	movs	r3, #64	; 0x40
 800660c:	616b      	str	r3, [r5, #20]
 800660e:	2300      	movs	r3, #0
 8006610:	9309      	str	r3, [sp, #36]	; 0x24
 8006612:	2320      	movs	r3, #32
 8006614:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006618:	f8cd 800c 	str.w	r8, [sp, #12]
 800661c:	2330      	movs	r3, #48	; 0x30
 800661e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067c8 <_svfiprintf_r+0x1ec>
 8006622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006626:	f04f 0901 	mov.w	r9, #1
 800662a:	4623      	mov	r3, r4
 800662c:	469a      	mov	sl, r3
 800662e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006632:	b10a      	cbz	r2, 8006638 <_svfiprintf_r+0x5c>
 8006634:	2a25      	cmp	r2, #37	; 0x25
 8006636:	d1f9      	bne.n	800662c <_svfiprintf_r+0x50>
 8006638:	ebba 0b04 	subs.w	fp, sl, r4
 800663c:	d00b      	beq.n	8006656 <_svfiprintf_r+0x7a>
 800663e:	465b      	mov	r3, fp
 8006640:	4622      	mov	r2, r4
 8006642:	4629      	mov	r1, r5
 8006644:	4638      	mov	r0, r7
 8006646:	f7ff ff6d 	bl	8006524 <__ssputs_r>
 800664a:	3001      	adds	r0, #1
 800664c:	f000 80aa 	beq.w	80067a4 <_svfiprintf_r+0x1c8>
 8006650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006652:	445a      	add	r2, fp
 8006654:	9209      	str	r2, [sp, #36]	; 0x24
 8006656:	f89a 3000 	ldrb.w	r3, [sl]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 80a2 	beq.w	80067a4 <_svfiprintf_r+0x1c8>
 8006660:	2300      	movs	r3, #0
 8006662:	f04f 32ff 	mov.w	r2, #4294967295
 8006666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800666a:	f10a 0a01 	add.w	sl, sl, #1
 800666e:	9304      	str	r3, [sp, #16]
 8006670:	9307      	str	r3, [sp, #28]
 8006672:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006676:	931a      	str	r3, [sp, #104]	; 0x68
 8006678:	4654      	mov	r4, sl
 800667a:	2205      	movs	r2, #5
 800667c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006680:	4851      	ldr	r0, [pc, #324]	; (80067c8 <_svfiprintf_r+0x1ec>)
 8006682:	f7f9 fdcd 	bl	8000220 <memchr>
 8006686:	9a04      	ldr	r2, [sp, #16]
 8006688:	b9d8      	cbnz	r0, 80066c2 <_svfiprintf_r+0xe6>
 800668a:	06d0      	lsls	r0, r2, #27
 800668c:	bf44      	itt	mi
 800668e:	2320      	movmi	r3, #32
 8006690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006694:	0711      	lsls	r1, r2, #28
 8006696:	bf44      	itt	mi
 8006698:	232b      	movmi	r3, #43	; 0x2b
 800669a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669e:	f89a 3000 	ldrb.w	r3, [sl]
 80066a2:	2b2a      	cmp	r3, #42	; 0x2a
 80066a4:	d015      	beq.n	80066d2 <_svfiprintf_r+0xf6>
 80066a6:	9a07      	ldr	r2, [sp, #28]
 80066a8:	4654      	mov	r4, sl
 80066aa:	2000      	movs	r0, #0
 80066ac:	f04f 0c0a 	mov.w	ip, #10
 80066b0:	4621      	mov	r1, r4
 80066b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066b6:	3b30      	subs	r3, #48	; 0x30
 80066b8:	2b09      	cmp	r3, #9
 80066ba:	d94e      	bls.n	800675a <_svfiprintf_r+0x17e>
 80066bc:	b1b0      	cbz	r0, 80066ec <_svfiprintf_r+0x110>
 80066be:	9207      	str	r2, [sp, #28]
 80066c0:	e014      	b.n	80066ec <_svfiprintf_r+0x110>
 80066c2:	eba0 0308 	sub.w	r3, r0, r8
 80066c6:	fa09 f303 	lsl.w	r3, r9, r3
 80066ca:	4313      	orrs	r3, r2
 80066cc:	9304      	str	r3, [sp, #16]
 80066ce:	46a2      	mov	sl, r4
 80066d0:	e7d2      	b.n	8006678 <_svfiprintf_r+0x9c>
 80066d2:	9b03      	ldr	r3, [sp, #12]
 80066d4:	1d19      	adds	r1, r3, #4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	9103      	str	r1, [sp, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bfbb      	ittet	lt
 80066de:	425b      	neglt	r3, r3
 80066e0:	f042 0202 	orrlt.w	r2, r2, #2
 80066e4:	9307      	strge	r3, [sp, #28]
 80066e6:	9307      	strlt	r3, [sp, #28]
 80066e8:	bfb8      	it	lt
 80066ea:	9204      	strlt	r2, [sp, #16]
 80066ec:	7823      	ldrb	r3, [r4, #0]
 80066ee:	2b2e      	cmp	r3, #46	; 0x2e
 80066f0:	d10c      	bne.n	800670c <_svfiprintf_r+0x130>
 80066f2:	7863      	ldrb	r3, [r4, #1]
 80066f4:	2b2a      	cmp	r3, #42	; 0x2a
 80066f6:	d135      	bne.n	8006764 <_svfiprintf_r+0x188>
 80066f8:	9b03      	ldr	r3, [sp, #12]
 80066fa:	1d1a      	adds	r2, r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	9203      	str	r2, [sp, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	bfb8      	it	lt
 8006704:	f04f 33ff 	movlt.w	r3, #4294967295
 8006708:	3402      	adds	r4, #2
 800670a:	9305      	str	r3, [sp, #20]
 800670c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067d8 <_svfiprintf_r+0x1fc>
 8006710:	7821      	ldrb	r1, [r4, #0]
 8006712:	2203      	movs	r2, #3
 8006714:	4650      	mov	r0, sl
 8006716:	f7f9 fd83 	bl	8000220 <memchr>
 800671a:	b140      	cbz	r0, 800672e <_svfiprintf_r+0x152>
 800671c:	2340      	movs	r3, #64	; 0x40
 800671e:	eba0 000a 	sub.w	r0, r0, sl
 8006722:	fa03 f000 	lsl.w	r0, r3, r0
 8006726:	9b04      	ldr	r3, [sp, #16]
 8006728:	4303      	orrs	r3, r0
 800672a:	3401      	adds	r4, #1
 800672c:	9304      	str	r3, [sp, #16]
 800672e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006732:	4826      	ldr	r0, [pc, #152]	; (80067cc <_svfiprintf_r+0x1f0>)
 8006734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006738:	2206      	movs	r2, #6
 800673a:	f7f9 fd71 	bl	8000220 <memchr>
 800673e:	2800      	cmp	r0, #0
 8006740:	d038      	beq.n	80067b4 <_svfiprintf_r+0x1d8>
 8006742:	4b23      	ldr	r3, [pc, #140]	; (80067d0 <_svfiprintf_r+0x1f4>)
 8006744:	bb1b      	cbnz	r3, 800678e <_svfiprintf_r+0x1b2>
 8006746:	9b03      	ldr	r3, [sp, #12]
 8006748:	3307      	adds	r3, #7
 800674a:	f023 0307 	bic.w	r3, r3, #7
 800674e:	3308      	adds	r3, #8
 8006750:	9303      	str	r3, [sp, #12]
 8006752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006754:	4433      	add	r3, r6
 8006756:	9309      	str	r3, [sp, #36]	; 0x24
 8006758:	e767      	b.n	800662a <_svfiprintf_r+0x4e>
 800675a:	fb0c 3202 	mla	r2, ip, r2, r3
 800675e:	460c      	mov	r4, r1
 8006760:	2001      	movs	r0, #1
 8006762:	e7a5      	b.n	80066b0 <_svfiprintf_r+0xd4>
 8006764:	2300      	movs	r3, #0
 8006766:	3401      	adds	r4, #1
 8006768:	9305      	str	r3, [sp, #20]
 800676a:	4619      	mov	r1, r3
 800676c:	f04f 0c0a 	mov.w	ip, #10
 8006770:	4620      	mov	r0, r4
 8006772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006776:	3a30      	subs	r2, #48	; 0x30
 8006778:	2a09      	cmp	r2, #9
 800677a:	d903      	bls.n	8006784 <_svfiprintf_r+0x1a8>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0c5      	beq.n	800670c <_svfiprintf_r+0x130>
 8006780:	9105      	str	r1, [sp, #20]
 8006782:	e7c3      	b.n	800670c <_svfiprintf_r+0x130>
 8006784:	fb0c 2101 	mla	r1, ip, r1, r2
 8006788:	4604      	mov	r4, r0
 800678a:	2301      	movs	r3, #1
 800678c:	e7f0      	b.n	8006770 <_svfiprintf_r+0x194>
 800678e:	ab03      	add	r3, sp, #12
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	462a      	mov	r2, r5
 8006794:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <_svfiprintf_r+0x1f8>)
 8006796:	a904      	add	r1, sp, #16
 8006798:	4638      	mov	r0, r7
 800679a:	f3af 8000 	nop.w
 800679e:	1c42      	adds	r2, r0, #1
 80067a0:	4606      	mov	r6, r0
 80067a2:	d1d6      	bne.n	8006752 <_svfiprintf_r+0x176>
 80067a4:	89ab      	ldrh	r3, [r5, #12]
 80067a6:	065b      	lsls	r3, r3, #25
 80067a8:	f53f af2c 	bmi.w	8006604 <_svfiprintf_r+0x28>
 80067ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ae:	b01d      	add	sp, #116	; 0x74
 80067b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b4:	ab03      	add	r3, sp, #12
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	462a      	mov	r2, r5
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <_svfiprintf_r+0x1f8>)
 80067bc:	a904      	add	r1, sp, #16
 80067be:	4638      	mov	r0, r7
 80067c0:	f000 f87a 	bl	80068b8 <_printf_i>
 80067c4:	e7eb      	b.n	800679e <_svfiprintf_r+0x1c2>
 80067c6:	bf00      	nop
 80067c8:	08006de8 	.word	0x08006de8
 80067cc:	08006df2 	.word	0x08006df2
 80067d0:	00000000 	.word	0x00000000
 80067d4:	08006525 	.word	0x08006525
 80067d8:	08006dee 	.word	0x08006dee

080067dc <_printf_common>:
 80067dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e0:	4616      	mov	r6, r2
 80067e2:	4699      	mov	r9, r3
 80067e4:	688a      	ldr	r2, [r1, #8]
 80067e6:	690b      	ldr	r3, [r1, #16]
 80067e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067ec:	4293      	cmp	r3, r2
 80067ee:	bfb8      	it	lt
 80067f0:	4613      	movlt	r3, r2
 80067f2:	6033      	str	r3, [r6, #0]
 80067f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067f8:	4607      	mov	r7, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	b10a      	cbz	r2, 8006802 <_printf_common+0x26>
 80067fe:	3301      	adds	r3, #1
 8006800:	6033      	str	r3, [r6, #0]
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	0699      	lsls	r1, r3, #26
 8006806:	bf42      	ittt	mi
 8006808:	6833      	ldrmi	r3, [r6, #0]
 800680a:	3302      	addmi	r3, #2
 800680c:	6033      	strmi	r3, [r6, #0]
 800680e:	6825      	ldr	r5, [r4, #0]
 8006810:	f015 0506 	ands.w	r5, r5, #6
 8006814:	d106      	bne.n	8006824 <_printf_common+0x48>
 8006816:	f104 0a19 	add.w	sl, r4, #25
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	6832      	ldr	r2, [r6, #0]
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	42ab      	cmp	r3, r5
 8006822:	dc26      	bgt.n	8006872 <_printf_common+0x96>
 8006824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006828:	1e13      	subs	r3, r2, #0
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	bf18      	it	ne
 800682e:	2301      	movne	r3, #1
 8006830:	0692      	lsls	r2, r2, #26
 8006832:	d42b      	bmi.n	800688c <_printf_common+0xb0>
 8006834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006838:	4649      	mov	r1, r9
 800683a:	4638      	mov	r0, r7
 800683c:	47c0      	blx	r8
 800683e:	3001      	adds	r0, #1
 8006840:	d01e      	beq.n	8006880 <_printf_common+0xa4>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	68e5      	ldr	r5, [r4, #12]
 8006846:	6832      	ldr	r2, [r6, #0]
 8006848:	f003 0306 	and.w	r3, r3, #6
 800684c:	2b04      	cmp	r3, #4
 800684e:	bf08      	it	eq
 8006850:	1aad      	subeq	r5, r5, r2
 8006852:	68a3      	ldr	r3, [r4, #8]
 8006854:	6922      	ldr	r2, [r4, #16]
 8006856:	bf0c      	ite	eq
 8006858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800685c:	2500      	movne	r5, #0
 800685e:	4293      	cmp	r3, r2
 8006860:	bfc4      	itt	gt
 8006862:	1a9b      	subgt	r3, r3, r2
 8006864:	18ed      	addgt	r5, r5, r3
 8006866:	2600      	movs	r6, #0
 8006868:	341a      	adds	r4, #26
 800686a:	42b5      	cmp	r5, r6
 800686c:	d11a      	bne.n	80068a4 <_printf_common+0xc8>
 800686e:	2000      	movs	r0, #0
 8006870:	e008      	b.n	8006884 <_printf_common+0xa8>
 8006872:	2301      	movs	r3, #1
 8006874:	4652      	mov	r2, sl
 8006876:	4649      	mov	r1, r9
 8006878:	4638      	mov	r0, r7
 800687a:	47c0      	blx	r8
 800687c:	3001      	adds	r0, #1
 800687e:	d103      	bne.n	8006888 <_printf_common+0xac>
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006888:	3501      	adds	r5, #1
 800688a:	e7c6      	b.n	800681a <_printf_common+0x3e>
 800688c:	18e1      	adds	r1, r4, r3
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	2030      	movs	r0, #48	; 0x30
 8006892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006896:	4422      	add	r2, r4
 8006898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800689c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068a0:	3302      	adds	r3, #2
 80068a2:	e7c7      	b.n	8006834 <_printf_common+0x58>
 80068a4:	2301      	movs	r3, #1
 80068a6:	4622      	mov	r2, r4
 80068a8:	4649      	mov	r1, r9
 80068aa:	4638      	mov	r0, r7
 80068ac:	47c0      	blx	r8
 80068ae:	3001      	adds	r0, #1
 80068b0:	d0e6      	beq.n	8006880 <_printf_common+0xa4>
 80068b2:	3601      	adds	r6, #1
 80068b4:	e7d9      	b.n	800686a <_printf_common+0x8e>
	...

080068b8 <_printf_i>:
 80068b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068bc:	460c      	mov	r4, r1
 80068be:	4691      	mov	r9, r2
 80068c0:	7e27      	ldrb	r7, [r4, #24]
 80068c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068c4:	2f78      	cmp	r7, #120	; 0x78
 80068c6:	4680      	mov	r8, r0
 80068c8:	469a      	mov	sl, r3
 80068ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068ce:	d807      	bhi.n	80068e0 <_printf_i+0x28>
 80068d0:	2f62      	cmp	r7, #98	; 0x62
 80068d2:	d80a      	bhi.n	80068ea <_printf_i+0x32>
 80068d4:	2f00      	cmp	r7, #0
 80068d6:	f000 80d8 	beq.w	8006a8a <_printf_i+0x1d2>
 80068da:	2f58      	cmp	r7, #88	; 0x58
 80068dc:	f000 80a3 	beq.w	8006a26 <_printf_i+0x16e>
 80068e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068e8:	e03a      	b.n	8006960 <_printf_i+0xa8>
 80068ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068ee:	2b15      	cmp	r3, #21
 80068f0:	d8f6      	bhi.n	80068e0 <_printf_i+0x28>
 80068f2:	a001      	add	r0, pc, #4	; (adr r0, 80068f8 <_printf_i+0x40>)
 80068f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068f8:	08006951 	.word	0x08006951
 80068fc:	08006965 	.word	0x08006965
 8006900:	080068e1 	.word	0x080068e1
 8006904:	080068e1 	.word	0x080068e1
 8006908:	080068e1 	.word	0x080068e1
 800690c:	080068e1 	.word	0x080068e1
 8006910:	08006965 	.word	0x08006965
 8006914:	080068e1 	.word	0x080068e1
 8006918:	080068e1 	.word	0x080068e1
 800691c:	080068e1 	.word	0x080068e1
 8006920:	080068e1 	.word	0x080068e1
 8006924:	08006a71 	.word	0x08006a71
 8006928:	08006995 	.word	0x08006995
 800692c:	08006a53 	.word	0x08006a53
 8006930:	080068e1 	.word	0x080068e1
 8006934:	080068e1 	.word	0x080068e1
 8006938:	08006a93 	.word	0x08006a93
 800693c:	080068e1 	.word	0x080068e1
 8006940:	08006995 	.word	0x08006995
 8006944:	080068e1 	.word	0x080068e1
 8006948:	080068e1 	.word	0x080068e1
 800694c:	08006a5b 	.word	0x08006a5b
 8006950:	680b      	ldr	r3, [r1, #0]
 8006952:	1d1a      	adds	r2, r3, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	600a      	str	r2, [r1, #0]
 8006958:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800695c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006960:	2301      	movs	r3, #1
 8006962:	e0a3      	b.n	8006aac <_printf_i+0x1f4>
 8006964:	6825      	ldr	r5, [r4, #0]
 8006966:	6808      	ldr	r0, [r1, #0]
 8006968:	062e      	lsls	r6, r5, #24
 800696a:	f100 0304 	add.w	r3, r0, #4
 800696e:	d50a      	bpl.n	8006986 <_printf_i+0xce>
 8006970:	6805      	ldr	r5, [r0, #0]
 8006972:	600b      	str	r3, [r1, #0]
 8006974:	2d00      	cmp	r5, #0
 8006976:	da03      	bge.n	8006980 <_printf_i+0xc8>
 8006978:	232d      	movs	r3, #45	; 0x2d
 800697a:	426d      	negs	r5, r5
 800697c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006980:	485e      	ldr	r0, [pc, #376]	; (8006afc <_printf_i+0x244>)
 8006982:	230a      	movs	r3, #10
 8006984:	e019      	b.n	80069ba <_printf_i+0x102>
 8006986:	f015 0f40 	tst.w	r5, #64	; 0x40
 800698a:	6805      	ldr	r5, [r0, #0]
 800698c:	600b      	str	r3, [r1, #0]
 800698e:	bf18      	it	ne
 8006990:	b22d      	sxthne	r5, r5
 8006992:	e7ef      	b.n	8006974 <_printf_i+0xbc>
 8006994:	680b      	ldr	r3, [r1, #0]
 8006996:	6825      	ldr	r5, [r4, #0]
 8006998:	1d18      	adds	r0, r3, #4
 800699a:	6008      	str	r0, [r1, #0]
 800699c:	0628      	lsls	r0, r5, #24
 800699e:	d501      	bpl.n	80069a4 <_printf_i+0xec>
 80069a0:	681d      	ldr	r5, [r3, #0]
 80069a2:	e002      	b.n	80069aa <_printf_i+0xf2>
 80069a4:	0669      	lsls	r1, r5, #25
 80069a6:	d5fb      	bpl.n	80069a0 <_printf_i+0xe8>
 80069a8:	881d      	ldrh	r5, [r3, #0]
 80069aa:	4854      	ldr	r0, [pc, #336]	; (8006afc <_printf_i+0x244>)
 80069ac:	2f6f      	cmp	r7, #111	; 0x6f
 80069ae:	bf0c      	ite	eq
 80069b0:	2308      	moveq	r3, #8
 80069b2:	230a      	movne	r3, #10
 80069b4:	2100      	movs	r1, #0
 80069b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069ba:	6866      	ldr	r6, [r4, #4]
 80069bc:	60a6      	str	r6, [r4, #8]
 80069be:	2e00      	cmp	r6, #0
 80069c0:	bfa2      	ittt	ge
 80069c2:	6821      	ldrge	r1, [r4, #0]
 80069c4:	f021 0104 	bicge.w	r1, r1, #4
 80069c8:	6021      	strge	r1, [r4, #0]
 80069ca:	b90d      	cbnz	r5, 80069d0 <_printf_i+0x118>
 80069cc:	2e00      	cmp	r6, #0
 80069ce:	d04d      	beq.n	8006a6c <_printf_i+0x1b4>
 80069d0:	4616      	mov	r6, r2
 80069d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80069d6:	fb03 5711 	mls	r7, r3, r1, r5
 80069da:	5dc7      	ldrb	r7, [r0, r7]
 80069dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069e0:	462f      	mov	r7, r5
 80069e2:	42bb      	cmp	r3, r7
 80069e4:	460d      	mov	r5, r1
 80069e6:	d9f4      	bls.n	80069d2 <_printf_i+0x11a>
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d10b      	bne.n	8006a04 <_printf_i+0x14c>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	07df      	lsls	r7, r3, #31
 80069f0:	d508      	bpl.n	8006a04 <_printf_i+0x14c>
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	6861      	ldr	r1, [r4, #4]
 80069f6:	4299      	cmp	r1, r3
 80069f8:	bfde      	ittt	le
 80069fa:	2330      	movle	r3, #48	; 0x30
 80069fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a04:	1b92      	subs	r2, r2, r6
 8006a06:	6122      	str	r2, [r4, #16]
 8006a08:	f8cd a000 	str.w	sl, [sp]
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	aa03      	add	r2, sp, #12
 8006a10:	4621      	mov	r1, r4
 8006a12:	4640      	mov	r0, r8
 8006a14:	f7ff fee2 	bl	80067dc <_printf_common>
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d14c      	bne.n	8006ab6 <_printf_i+0x1fe>
 8006a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a20:	b004      	add	sp, #16
 8006a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a26:	4835      	ldr	r0, [pc, #212]	; (8006afc <_printf_i+0x244>)
 8006a28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	680e      	ldr	r6, [r1, #0]
 8006a30:	061f      	lsls	r7, r3, #24
 8006a32:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a36:	600e      	str	r6, [r1, #0]
 8006a38:	d514      	bpl.n	8006a64 <_printf_i+0x1ac>
 8006a3a:	07d9      	lsls	r1, r3, #31
 8006a3c:	bf44      	itt	mi
 8006a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a42:	6023      	strmi	r3, [r4, #0]
 8006a44:	b91d      	cbnz	r5, 8006a4e <_printf_i+0x196>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	f023 0320 	bic.w	r3, r3, #32
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	2310      	movs	r3, #16
 8006a50:	e7b0      	b.n	80069b4 <_printf_i+0xfc>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	f043 0320 	orr.w	r3, r3, #32
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	2378      	movs	r3, #120	; 0x78
 8006a5c:	4828      	ldr	r0, [pc, #160]	; (8006b00 <_printf_i+0x248>)
 8006a5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a62:	e7e3      	b.n	8006a2c <_printf_i+0x174>
 8006a64:	065e      	lsls	r6, r3, #25
 8006a66:	bf48      	it	mi
 8006a68:	b2ad      	uxthmi	r5, r5
 8006a6a:	e7e6      	b.n	8006a3a <_printf_i+0x182>
 8006a6c:	4616      	mov	r6, r2
 8006a6e:	e7bb      	b.n	80069e8 <_printf_i+0x130>
 8006a70:	680b      	ldr	r3, [r1, #0]
 8006a72:	6826      	ldr	r6, [r4, #0]
 8006a74:	6960      	ldr	r0, [r4, #20]
 8006a76:	1d1d      	adds	r5, r3, #4
 8006a78:	600d      	str	r5, [r1, #0]
 8006a7a:	0635      	lsls	r5, r6, #24
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	d501      	bpl.n	8006a84 <_printf_i+0x1cc>
 8006a80:	6018      	str	r0, [r3, #0]
 8006a82:	e002      	b.n	8006a8a <_printf_i+0x1d2>
 8006a84:	0671      	lsls	r1, r6, #25
 8006a86:	d5fb      	bpl.n	8006a80 <_printf_i+0x1c8>
 8006a88:	8018      	strh	r0, [r3, #0]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	6123      	str	r3, [r4, #16]
 8006a8e:	4616      	mov	r6, r2
 8006a90:	e7ba      	b.n	8006a08 <_printf_i+0x150>
 8006a92:	680b      	ldr	r3, [r1, #0]
 8006a94:	1d1a      	adds	r2, r3, #4
 8006a96:	600a      	str	r2, [r1, #0]
 8006a98:	681e      	ldr	r6, [r3, #0]
 8006a9a:	6862      	ldr	r2, [r4, #4]
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f7f9 fbbe 	bl	8000220 <memchr>
 8006aa4:	b108      	cbz	r0, 8006aaa <_printf_i+0x1f2>
 8006aa6:	1b80      	subs	r0, r0, r6
 8006aa8:	6060      	str	r0, [r4, #4]
 8006aaa:	6863      	ldr	r3, [r4, #4]
 8006aac:	6123      	str	r3, [r4, #16]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab4:	e7a8      	b.n	8006a08 <_printf_i+0x150>
 8006ab6:	6923      	ldr	r3, [r4, #16]
 8006ab8:	4632      	mov	r2, r6
 8006aba:	4649      	mov	r1, r9
 8006abc:	4640      	mov	r0, r8
 8006abe:	47d0      	blx	sl
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d0ab      	beq.n	8006a1c <_printf_i+0x164>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	079b      	lsls	r3, r3, #30
 8006ac8:	d413      	bmi.n	8006af2 <_printf_i+0x23a>
 8006aca:	68e0      	ldr	r0, [r4, #12]
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	4298      	cmp	r0, r3
 8006ad0:	bfb8      	it	lt
 8006ad2:	4618      	movlt	r0, r3
 8006ad4:	e7a4      	b.n	8006a20 <_printf_i+0x168>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4632      	mov	r2, r6
 8006ada:	4649      	mov	r1, r9
 8006adc:	4640      	mov	r0, r8
 8006ade:	47d0      	blx	sl
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d09b      	beq.n	8006a1c <_printf_i+0x164>
 8006ae4:	3501      	adds	r5, #1
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	9903      	ldr	r1, [sp, #12]
 8006aea:	1a5b      	subs	r3, r3, r1
 8006aec:	42ab      	cmp	r3, r5
 8006aee:	dcf2      	bgt.n	8006ad6 <_printf_i+0x21e>
 8006af0:	e7eb      	b.n	8006aca <_printf_i+0x212>
 8006af2:	2500      	movs	r5, #0
 8006af4:	f104 0619 	add.w	r6, r4, #25
 8006af8:	e7f5      	b.n	8006ae6 <_printf_i+0x22e>
 8006afa:	bf00      	nop
 8006afc:	08006df9 	.word	0x08006df9
 8006b00:	08006e0a 	.word	0x08006e0a

08006b04 <memmove>:
 8006b04:	4288      	cmp	r0, r1
 8006b06:	b510      	push	{r4, lr}
 8006b08:	eb01 0402 	add.w	r4, r1, r2
 8006b0c:	d902      	bls.n	8006b14 <memmove+0x10>
 8006b0e:	4284      	cmp	r4, r0
 8006b10:	4623      	mov	r3, r4
 8006b12:	d807      	bhi.n	8006b24 <memmove+0x20>
 8006b14:	1e43      	subs	r3, r0, #1
 8006b16:	42a1      	cmp	r1, r4
 8006b18:	d008      	beq.n	8006b2c <memmove+0x28>
 8006b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b22:	e7f8      	b.n	8006b16 <memmove+0x12>
 8006b24:	4402      	add	r2, r0
 8006b26:	4601      	mov	r1, r0
 8006b28:	428a      	cmp	r2, r1
 8006b2a:	d100      	bne.n	8006b2e <memmove+0x2a>
 8006b2c:	bd10      	pop	{r4, pc}
 8006b2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b36:	e7f7      	b.n	8006b28 <memmove+0x24>

08006b38 <_free_r>:
 8006b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b3a:	2900      	cmp	r1, #0
 8006b3c:	d048      	beq.n	8006bd0 <_free_r+0x98>
 8006b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b42:	9001      	str	r0, [sp, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f1a1 0404 	sub.w	r4, r1, #4
 8006b4a:	bfb8      	it	lt
 8006b4c:	18e4      	addlt	r4, r4, r3
 8006b4e:	f000 f8d3 	bl	8006cf8 <__malloc_lock>
 8006b52:	4a20      	ldr	r2, [pc, #128]	; (8006bd4 <_free_r+0x9c>)
 8006b54:	9801      	ldr	r0, [sp, #4]
 8006b56:	6813      	ldr	r3, [r2, #0]
 8006b58:	4615      	mov	r5, r2
 8006b5a:	b933      	cbnz	r3, 8006b6a <_free_r+0x32>
 8006b5c:	6063      	str	r3, [r4, #4]
 8006b5e:	6014      	str	r4, [r2, #0]
 8006b60:	b003      	add	sp, #12
 8006b62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b66:	f000 b8cd 	b.w	8006d04 <__malloc_unlock>
 8006b6a:	42a3      	cmp	r3, r4
 8006b6c:	d90b      	bls.n	8006b86 <_free_r+0x4e>
 8006b6e:	6821      	ldr	r1, [r4, #0]
 8006b70:	1862      	adds	r2, r4, r1
 8006b72:	4293      	cmp	r3, r2
 8006b74:	bf04      	itt	eq
 8006b76:	681a      	ldreq	r2, [r3, #0]
 8006b78:	685b      	ldreq	r3, [r3, #4]
 8006b7a:	6063      	str	r3, [r4, #4]
 8006b7c:	bf04      	itt	eq
 8006b7e:	1852      	addeq	r2, r2, r1
 8006b80:	6022      	streq	r2, [r4, #0]
 8006b82:	602c      	str	r4, [r5, #0]
 8006b84:	e7ec      	b.n	8006b60 <_free_r+0x28>
 8006b86:	461a      	mov	r2, r3
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	b10b      	cbz	r3, 8006b90 <_free_r+0x58>
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	d9fa      	bls.n	8006b86 <_free_r+0x4e>
 8006b90:	6811      	ldr	r1, [r2, #0]
 8006b92:	1855      	adds	r5, r2, r1
 8006b94:	42a5      	cmp	r5, r4
 8006b96:	d10b      	bne.n	8006bb0 <_free_r+0x78>
 8006b98:	6824      	ldr	r4, [r4, #0]
 8006b9a:	4421      	add	r1, r4
 8006b9c:	1854      	adds	r4, r2, r1
 8006b9e:	42a3      	cmp	r3, r4
 8006ba0:	6011      	str	r1, [r2, #0]
 8006ba2:	d1dd      	bne.n	8006b60 <_free_r+0x28>
 8006ba4:	681c      	ldr	r4, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	6053      	str	r3, [r2, #4]
 8006baa:	4421      	add	r1, r4
 8006bac:	6011      	str	r1, [r2, #0]
 8006bae:	e7d7      	b.n	8006b60 <_free_r+0x28>
 8006bb0:	d902      	bls.n	8006bb8 <_free_r+0x80>
 8006bb2:	230c      	movs	r3, #12
 8006bb4:	6003      	str	r3, [r0, #0]
 8006bb6:	e7d3      	b.n	8006b60 <_free_r+0x28>
 8006bb8:	6825      	ldr	r5, [r4, #0]
 8006bba:	1961      	adds	r1, r4, r5
 8006bbc:	428b      	cmp	r3, r1
 8006bbe:	bf04      	itt	eq
 8006bc0:	6819      	ldreq	r1, [r3, #0]
 8006bc2:	685b      	ldreq	r3, [r3, #4]
 8006bc4:	6063      	str	r3, [r4, #4]
 8006bc6:	bf04      	itt	eq
 8006bc8:	1949      	addeq	r1, r1, r5
 8006bca:	6021      	streq	r1, [r4, #0]
 8006bcc:	6054      	str	r4, [r2, #4]
 8006bce:	e7c7      	b.n	8006b60 <_free_r+0x28>
 8006bd0:	b003      	add	sp, #12
 8006bd2:	bd30      	pop	{r4, r5, pc}
 8006bd4:	20000150 	.word	0x20000150

08006bd8 <_malloc_r>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	1ccd      	adds	r5, r1, #3
 8006bdc:	f025 0503 	bic.w	r5, r5, #3
 8006be0:	3508      	adds	r5, #8
 8006be2:	2d0c      	cmp	r5, #12
 8006be4:	bf38      	it	cc
 8006be6:	250c      	movcc	r5, #12
 8006be8:	2d00      	cmp	r5, #0
 8006bea:	4606      	mov	r6, r0
 8006bec:	db01      	blt.n	8006bf2 <_malloc_r+0x1a>
 8006bee:	42a9      	cmp	r1, r5
 8006bf0:	d903      	bls.n	8006bfa <_malloc_r+0x22>
 8006bf2:	230c      	movs	r3, #12
 8006bf4:	6033      	str	r3, [r6, #0]
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bfa:	f000 f87d 	bl	8006cf8 <__malloc_lock>
 8006bfe:	4921      	ldr	r1, [pc, #132]	; (8006c84 <_malloc_r+0xac>)
 8006c00:	680a      	ldr	r2, [r1, #0]
 8006c02:	4614      	mov	r4, r2
 8006c04:	b99c      	cbnz	r4, 8006c2e <_malloc_r+0x56>
 8006c06:	4f20      	ldr	r7, [pc, #128]	; (8006c88 <_malloc_r+0xb0>)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	b923      	cbnz	r3, 8006c16 <_malloc_r+0x3e>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4630      	mov	r0, r6
 8006c10:	f000 f862 	bl	8006cd8 <_sbrk_r>
 8006c14:	6038      	str	r0, [r7, #0]
 8006c16:	4629      	mov	r1, r5
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f000 f85d 	bl	8006cd8 <_sbrk_r>
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	d123      	bne.n	8006c6a <_malloc_r+0x92>
 8006c22:	230c      	movs	r3, #12
 8006c24:	6033      	str	r3, [r6, #0]
 8006c26:	4630      	mov	r0, r6
 8006c28:	f000 f86c 	bl	8006d04 <__malloc_unlock>
 8006c2c:	e7e3      	b.n	8006bf6 <_malloc_r+0x1e>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	1b5b      	subs	r3, r3, r5
 8006c32:	d417      	bmi.n	8006c64 <_malloc_r+0x8c>
 8006c34:	2b0b      	cmp	r3, #11
 8006c36:	d903      	bls.n	8006c40 <_malloc_r+0x68>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	441c      	add	r4, r3
 8006c3c:	6025      	str	r5, [r4, #0]
 8006c3e:	e004      	b.n	8006c4a <_malloc_r+0x72>
 8006c40:	6863      	ldr	r3, [r4, #4]
 8006c42:	42a2      	cmp	r2, r4
 8006c44:	bf0c      	ite	eq
 8006c46:	600b      	streq	r3, [r1, #0]
 8006c48:	6053      	strne	r3, [r2, #4]
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f000 f85a 	bl	8006d04 <__malloc_unlock>
 8006c50:	f104 000b 	add.w	r0, r4, #11
 8006c54:	1d23      	adds	r3, r4, #4
 8006c56:	f020 0007 	bic.w	r0, r0, #7
 8006c5a:	1ac2      	subs	r2, r0, r3
 8006c5c:	d0cc      	beq.n	8006bf8 <_malloc_r+0x20>
 8006c5e:	1a1b      	subs	r3, r3, r0
 8006c60:	50a3      	str	r3, [r4, r2]
 8006c62:	e7c9      	b.n	8006bf8 <_malloc_r+0x20>
 8006c64:	4622      	mov	r2, r4
 8006c66:	6864      	ldr	r4, [r4, #4]
 8006c68:	e7cc      	b.n	8006c04 <_malloc_r+0x2c>
 8006c6a:	1cc4      	adds	r4, r0, #3
 8006c6c:	f024 0403 	bic.w	r4, r4, #3
 8006c70:	42a0      	cmp	r0, r4
 8006c72:	d0e3      	beq.n	8006c3c <_malloc_r+0x64>
 8006c74:	1a21      	subs	r1, r4, r0
 8006c76:	4630      	mov	r0, r6
 8006c78:	f000 f82e 	bl	8006cd8 <_sbrk_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d1dd      	bne.n	8006c3c <_malloc_r+0x64>
 8006c80:	e7cf      	b.n	8006c22 <_malloc_r+0x4a>
 8006c82:	bf00      	nop
 8006c84:	20000150 	.word	0x20000150
 8006c88:	20000154 	.word	0x20000154

08006c8c <_realloc_r>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	4607      	mov	r7, r0
 8006c90:	4614      	mov	r4, r2
 8006c92:	460e      	mov	r6, r1
 8006c94:	b921      	cbnz	r1, 8006ca0 <_realloc_r+0x14>
 8006c96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	f7ff bf9c 	b.w	8006bd8 <_malloc_r>
 8006ca0:	b922      	cbnz	r2, 8006cac <_realloc_r+0x20>
 8006ca2:	f7ff ff49 	bl	8006b38 <_free_r>
 8006ca6:	4625      	mov	r5, r4
 8006ca8:	4628      	mov	r0, r5
 8006caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cac:	f000 f830 	bl	8006d10 <_malloc_usable_size_r>
 8006cb0:	42a0      	cmp	r0, r4
 8006cb2:	d20f      	bcs.n	8006cd4 <_realloc_r+0x48>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	f7ff ff8e 	bl	8006bd8 <_malloc_r>
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	d0f2      	beq.n	8006ca8 <_realloc_r+0x1c>
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	f7ff fbf7 	bl	80064b8 <memcpy>
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f7ff ff33 	bl	8006b38 <_free_r>
 8006cd2:	e7e9      	b.n	8006ca8 <_realloc_r+0x1c>
 8006cd4:	4635      	mov	r5, r6
 8006cd6:	e7e7      	b.n	8006ca8 <_realloc_r+0x1c>

08006cd8 <_sbrk_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4d06      	ldr	r5, [pc, #24]	; (8006cf4 <_sbrk_r+0x1c>)
 8006cdc:	2300      	movs	r3, #0
 8006cde:	4604      	mov	r4, r0
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	f7fb fd16 	bl	8002714 <_sbrk>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d102      	bne.n	8006cf2 <_sbrk_r+0x1a>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	b103      	cbz	r3, 8006cf2 <_sbrk_r+0x1a>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	20000598 	.word	0x20000598

08006cf8 <__malloc_lock>:
 8006cf8:	4801      	ldr	r0, [pc, #4]	; (8006d00 <__malloc_lock+0x8>)
 8006cfa:	f000 b811 	b.w	8006d20 <__retarget_lock_acquire_recursive>
 8006cfe:	bf00      	nop
 8006d00:	200005a0 	.word	0x200005a0

08006d04 <__malloc_unlock>:
 8006d04:	4801      	ldr	r0, [pc, #4]	; (8006d0c <__malloc_unlock+0x8>)
 8006d06:	f000 b80c 	b.w	8006d22 <__retarget_lock_release_recursive>
 8006d0a:	bf00      	nop
 8006d0c:	200005a0 	.word	0x200005a0

08006d10 <_malloc_usable_size_r>:
 8006d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d14:	1f18      	subs	r0, r3, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	bfbc      	itt	lt
 8006d1a:	580b      	ldrlt	r3, [r1, r0]
 8006d1c:	18c0      	addlt	r0, r0, r3
 8006d1e:	4770      	bx	lr

08006d20 <__retarget_lock_acquire_recursive>:
 8006d20:	4770      	bx	lr

08006d22 <__retarget_lock_release_recursive>:
 8006d22:	4770      	bx	lr

08006d24 <_init>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	bf00      	nop
 8006d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2a:	bc08      	pop	{r3}
 8006d2c:	469e      	mov	lr, r3
 8006d2e:	4770      	bx	lr

08006d30 <_fini>:
 8006d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d32:	bf00      	nop
 8006d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d36:	bc08      	pop	{r3}
 8006d38:	469e      	mov	lr, r3
 8006d3a:	4770      	bx	lr
