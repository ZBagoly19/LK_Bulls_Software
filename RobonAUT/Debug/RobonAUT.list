
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010178  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0801033c  0801033c  0002033c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010624  08010624  00030190  2**0
                  CONTENTS
  4 .ARM          00000008  08010624  08010624  00020624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801062c  0801062c  00030190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801062c  0801062c  0002062c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010630  08010630  00020630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08010634  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  20000190  080107c4  00030190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  080107c4  000307a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032361  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eae  00000000  00000000  00062521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  000663d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a48  00000000  00000000  00067f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029216  00000000  00000000  000699c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026d1f  00000000  00000000  00092bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6362  00000000  00000000  000b98fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001afc5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007924  00000000  00000000  001afcb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000190 	.word	0x20000190
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08010324 	.word	0x08010324

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000194 	.word	0x20000194
 8000200:	08010324 	.word	0x08010324

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__gedf2>:
 80009a0:	f04f 3cff 	mov.w	ip, #4294967295
 80009a4:	e006      	b.n	80009b4 <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__ledf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	e002      	b.n	80009b4 <__cmpdf2+0x4>
 80009ae:	bf00      	nop

080009b0 <__cmpdf2>:
 80009b0:	f04f 0c01 	mov.w	ip, #1
 80009b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ca:	d01b      	beq.n	8000a04 <__cmpdf2+0x54>
 80009cc:	b001      	add	sp, #4
 80009ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d2:	bf0c      	ite	eq
 80009d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d8:	ea91 0f03 	teqne	r1, r3
 80009dc:	bf02      	ittt	eq
 80009de:	ea90 0f02 	teqeq	r0, r2
 80009e2:	2000      	moveq	r0, #0
 80009e4:	4770      	bxeq	lr
 80009e6:	f110 0f00 	cmn.w	r0, #0
 80009ea:	ea91 0f03 	teq	r1, r3
 80009ee:	bf58      	it	pl
 80009f0:	4299      	cmppl	r1, r3
 80009f2:	bf08      	it	eq
 80009f4:	4290      	cmpeq	r0, r2
 80009f6:	bf2c      	ite	cs
 80009f8:	17d8      	asrcs	r0, r3, #31
 80009fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fe:	f040 0001 	orr.w	r0, r0, #1
 8000a02:	4770      	bx	lr
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__cmpdf2+0x64>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d107      	bne.n	8000a24 <__cmpdf2+0x74>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d1d6      	bne.n	80009cc <__cmpdf2+0x1c>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d0d3      	beq.n	80009cc <__cmpdf2+0x1c>
 8000a24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdrcmple>:
 8000a2c:	4684      	mov	ip, r0
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4662      	mov	r2, ip
 8000a32:	468c      	mov	ip, r1
 8000a34:	4619      	mov	r1, r3
 8000a36:	4663      	mov	r3, ip
 8000a38:	e000      	b.n	8000a3c <__aeabi_cdcmpeq>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_cdcmpeq>:
 8000a3c:	b501      	push	{r0, lr}
 8000a3e:	f7ff ffb7 	bl	80009b0 <__cmpdf2>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	bf48      	it	mi
 8000a46:	f110 0f00 	cmnmi.w	r0, #0
 8000a4a:	bd01      	pop	{r0, pc}

08000a4c <__aeabi_dcmpeq>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff fff4 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a54:	bf0c      	ite	eq
 8000a56:	2001      	moveq	r0, #1
 8000a58:	2000      	movne	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmplt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffea 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmple>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffe0 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpge>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffce 	bl	8000a2c <__aeabi_cdrcmple>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpgt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffc4 	bl	8000a2c <__aeabi_cdrcmple>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b0a8      	sub	sp, #160	; 0xa0
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e42:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000e7a:	f00f f9d5 	bl	8010228 <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	4aaa      	ldr	r2, [pc, #680]	; (800112c <SERVO_Init+0x2f4>)
 8000e82:	015b      	lsls	r3, r3, #5
 8000e84:	4413      	add	r3, r2
 8000e86:	3314      	adds	r3, #20
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fafc 	bl	8000488 <__aeabi_ui2d>
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	4ba6      	ldr	r3, [pc, #664]	; (8001130 <SERVO_Init+0x2f8>)
 8000e96:	f7ff fc9b 	bl	80007d0 <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fe2d 	bl	8000b00 <__aeabi_d2uiz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	4a9f      	ldr	r2, [pc, #636]	; (800112c <SERVO_Init+0x2f4>)
 8000eb0:	015b      	lsls	r3, r3, #5
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3314      	adds	r3, #20
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fae5 	bl	8000488 <__aeabi_ui2d>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	460d      	mov	r5, r1
 8000ec2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000ec6:	f7ff fadf 	bl	8000488 <__aeabi_ui2d>
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	4b99      	ldr	r3, [pc, #612]	; (8001134 <SERVO_Init+0x2fc>)
 8000ed0:	f7ff f99e 	bl	8000210 <__adddf3>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b95      	ldr	r3, [pc, #596]	; (8001138 <SERVO_Init+0x300>)
 8000ee2:	f7ff fb4b 	bl	800057c <__aeabi_dmul>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4620      	mov	r0, r4
 8000eec:	4629      	mov	r1, r5
 8000eee:	f7ff fc6f 	bl	80007d0 <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <SERVO_Init+0x2fc>)
 8000f00:	f7ff f984 	bl	800020c <__aeabi_dsub>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f7ff fdf8 	bl	8000b00 <__aeabi_d2uiz>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000f16:	2313      	movs	r3, #19
 8000f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000f1c:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	4a81      	ldr	r2, [pc, #516]	; (800112c <SERVO_Init+0x2f4>)
 8000f28:	015b      	lsls	r3, r3, #5
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3308      	adds	r3, #8
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a82      	ldr	r2, [pc, #520]	; (800113c <SERVO_Init+0x304>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10e      	bne.n	8000f54 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	4b81      	ldr	r3, [pc, #516]	; (8001140 <SERVO_Init+0x308>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a80      	ldr	r2, [pc, #512]	; (8001140 <SERVO_Init+0x308>)
 8000f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b7e      	ldr	r3, [pc, #504]	; (8001140 <SERVO_Init+0x308>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	e046      	b.n	8000fe2 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	4a75      	ldr	r2, [pc, #468]	; (800112c <SERVO_Init+0x2f4>)
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3308      	adds	r3, #8
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f64:	d10e      	bne.n	8000f84 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	4b75      	ldr	r3, [pc, #468]	; (8001140 <SERVO_Init+0x308>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a74      	ldr	r2, [pc, #464]	; (8001140 <SERVO_Init+0x308>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b72      	ldr	r3, [pc, #456]	; (8001140 <SERVO_Init+0x308>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	e02e      	b.n	8000fe2 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	4a69      	ldr	r2, [pc, #420]	; (800112c <SERVO_Init+0x2f4>)
 8000f88:	015b      	lsls	r3, r3, #5
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a6c      	ldr	r2, [pc, #432]	; (8001144 <SERVO_Init+0x30c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10e      	bne.n	8000fb4 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b69      	ldr	r3, [pc, #420]	; (8001140 <SERVO_Init+0x308>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a68      	ldr	r2, [pc, #416]	; (8001140 <SERVO_Init+0x308>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b66      	ldr	r3, [pc, #408]	; (8001140 <SERVO_Init+0x308>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	e016      	b.n	8000fe2 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	4a5d      	ldr	r2, [pc, #372]	; (800112c <SERVO_Init+0x2f4>)
 8000fb8:	015b      	lsls	r3, r3, #5
 8000fba:	4413      	add	r3, r2
 8000fbc:	3308      	adds	r3, #8
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a61      	ldr	r2, [pc, #388]	; (8001148 <SERVO_Init+0x310>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10d      	bne.n	8000fe2 <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b5d      	ldr	r3, [pc, #372]	; (8001140 <SERVO_Init+0x308>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a5c      	ldr	r2, [pc, #368]	; (8001140 <SERVO_Init+0x308>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b5a      	ldr	r3, [pc, #360]	; (8001140 <SERVO_Init+0x308>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4a51      	ldr	r2, [pc, #324]	; (800112c <SERVO_Init+0x2f4>)
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	4413      	add	r3, r2
 8000fea:	3308      	adds	r3, #8
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8000ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ff4:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 8000ffa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4618      	mov	r0, r3
 800100e:	f006 fb8b 	bl	8007728 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800101a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f007 fc35 	bl	8008894 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4618      	mov	r0, r3
 8001030:	f006 fd30 	bl	8007a94 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8001040:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f008 fbc2 	bl	80097d4 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001050:	2360      	movs	r3, #96	; 0x60
 8001052:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001058:	2300      	movs	r3, #0
 800105a:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	4a32      	ldr	r2, [pc, #200]	; (800112c <SERVO_Init+0x2f4>)
 8001064:	015b      	lsls	r3, r3, #5
 8001066:	4413      	add	r3, r2
 8001068:	3310      	adds	r3, #16
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4618      	mov	r0, r3
 8001076:	f007 fa35 	bl	80084e4 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 800107a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800107e:	f7ff fa03 	bl	8000488 <__aeabi_ui2d>
 8001082:	4604      	mov	r4, r0
 8001084:	460d      	mov	r5, r1
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	4a28      	ldr	r2, [pc, #160]	; (800112c <SERVO_Init+0x2f4>)
 800108a:	015b      	lsls	r3, r3, #5
 800108c:	4413      	add	r3, r2
 800108e:	3318      	adds	r3, #24
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa1a 	bl	80004cc <__aeabi_f2d>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <SERVO_Init+0x314>)
 800109e:	f7ff fb97 	bl	80007d0 <__aeabi_ddiv>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4620      	mov	r0, r4
 80010a8:	4629      	mov	r1, r5
 80010aa:	f7ff fa67 	bl	800057c <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	88fc      	ldrh	r4, [r7, #6]
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f7ff fd22 	bl	8000b00 <__aeabi_d2uiz>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <SERVO_Init+0x318>)
 80010c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 80010c6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80010ca:	f7ff f9dd 	bl	8000488 <__aeabi_ui2d>
 80010ce:	4604      	mov	r4, r0
 80010d0:	460d      	mov	r5, r1
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <SERVO_Init+0x31c>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f9f9 	bl	80004cc <__aeabi_f2d>
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <SERVO_Init+0x314>)
 80010e0:	f7ff fb76 	bl	80007d0 <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4620      	mov	r0, r4
 80010ea:	4629      	mov	r1, r5
 80010ec:	f7ff fa46 	bl	800057c <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	88fc      	ldrh	r4, [r7, #6]
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fd01 	bl	8000b00 <__aeabi_d2uiz>
 80010fe:	4603      	mov	r3, r0
 8001100:	b299      	uxth	r1, r3
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <SERVO_Init+0x318>)
 8001104:	00a3      	lsls	r3, r4, #2
 8001106:	4413      	add	r3, r2
 8001108:	460a      	mov	r2, r1
 800110a:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <SERVO_Init+0x2f4>)
 8001110:	015b      	lsls	r3, r3, #5
 8001112:	4413      	add	r3, r2
 8001114:	3310      	adds	r3, #16
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f006 fda8 	bl	8007c74 <HAL_TIM_PWM_Start>

}
 8001124:	bf00      	nop
 8001126:	37a0      	adds	r7, #160	; 0xa0
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	080105bc 	.word	0x080105bc
 8001130:	41490000 	.word	0x41490000
 8001134:	3ff00000 	.word	0x3ff00000
 8001138:	40490000 	.word	0x40490000
 800113c:	40001800 	.word	0x40001800
 8001140:	40023800 	.word	0x40023800
 8001144:	40000400 	.word	0x40000400
 8001148:	40000800 	.word	0x40000800
 800114c:	40340000 	.word	0x40340000
 8001150:	200001ac 	.word	0x200001ac
 8001154:	40066666 	.word	0x40066666

08001158 <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	ed87 0a00 	vstr	s0, [r7]
 8001164:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <SERVO_MoveTo+0x94>)
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	885b      	ldrh	r3, [r3, #2]
 8001174:	4619      	mov	r1, r3
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <SERVO_MoveTo+0x94>)
 800117a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800117e:	1acb      	subs	r3, r1, r3
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	edd7 7a00 	vldr	s15, [r7]
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	ee17 0a90 	vmov	r0, s15
 8001194:	f7ff f99a 	bl	80004cc <__aeabi_f2d>
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <SERVO_MoveTo+0x98>)
 800119e:	f7ff fb17 	bl	80007d0 <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4614      	mov	r4, r2
 80011a8:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <SERVO_MoveTo+0x94>)
 80011ae:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f978 	bl	80004a8 <__aeabi_i2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff f826 	bl	8000210 <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fc98 	bl	8000b00 <__aeabi_d2uiz>
 80011d0:	4603      	mov	r3, r0
 80011d2:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <SERVO_MoveTo+0x9c>)
 80011d8:	015b      	lsls	r3, r3, #5
 80011da:	4413      	add	r3, r2
 80011dc:	330c      	adds	r3, #12
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	89fa      	ldrh	r2, [r7, #14]
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bdb0      	pop	{r4, r5, r7, pc}
 80011ec:	200001ac 	.word	0x200001ac
 80011f0:	40668000 	.word	0x40668000
 80011f4:	080105bc 	.word	0x080105bc

080011f8 <HAL_UART_RxCpltCallback>:
void Kovetendo_vonal_valaszto(int* elso, int* hatso);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
			bluetooth_flag = 1;
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
		bluetooth_a++;
	}
	HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);*/
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
				kanyarban_vagy_egyenes);
		bluetooth_i++;
		bluetooth_len = strlen(bluetooth_buffer);
		//HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);
	}*/
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8001226:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t tavolsag1_buff[50];
	VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_Dev_t vl53l1_c; // center module
	VL53L1_DEV Dev = &vl53l1_c;
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122e:	f002 fa25 	bl	800367c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 fad7 	bl	80017e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f000 ff29 	bl	800208c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800123a:	f000 fedd 	bl	8001ff8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800123e:	f000 fb43 	bl	80018c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001242:	f000 fb6f 	bl	8001924 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001246:	f000 fbff 	bl	8001a48 <MX_SPI2_Init>
  MX_SPI3_Init();
 800124a:	f000 fc33 	bl	8001ab4 <MX_SPI3_Init>
  MX_TIM3_Init();
 800124e:	f000 fcb5 	bl	8001bbc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001252:	f000 fd0d 	bl	8001c70 <MX_TIM4_Init>
  MX_UART4_Init();
 8001256:	f000 fe7b 	bl	8001f50 <MX_UART4_Init>
  MX_TIM8_Init();
 800125a:	f000 fd5d 	bl	8001d18 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800125e:	f000 fea1 	bl	8001fa4 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001262:	f000 fb8d 	bl	8001980 <MX_I2C3_Init>
  MX_TIM12_Init();
 8001266:	f000 fe03 	bl	8001e70 <MX_TIM12_Init>
  MX_DMA_Init();
 800126a:	f000 feef 	bl	800204c <MX_DMA_Init>
  MX_TIM2_Init();
 800126e:	f000 fc57 	bl	8001b20 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001272:	f000 fbb3 	bl	80019dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init(SZERVO);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fdde 	bl	8000e38 <SERVO_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM1);
 800127c:	2000      	movs	r0, #0
 800127e:	f00e fe45 	bl	800ff0c <DC_MOTOR_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM2);
 8001282:	2001      	movs	r0, #1
 8001284:	f00e fe42 	bl	800ff0c <DC_MOTOR_Init>
	DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 8001288:	2100      	movs	r1, #0
 800128a:	2000      	movs	r0, #0
 800128c:	f00e ff14 	bl	80100b8 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 8001290:	2100      	movs	r1, #0
 8001292:	2001      	movs	r0, #1
 8001294:	f00e ff10 	bl	80100b8 <DC_MOTOR_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);		// motvez EN
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129e:	48ba      	ldr	r0, [pc, #744]	; (8001588 <main+0x368>)
 80012a0:	f003 fbd0 	bl	8004a44 <HAL_GPIO_WritePin>

	//HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);
	HAL_TIM_Base_Start_IT(&htim2);
 80012a4:	48b9      	ldr	r0, [pc, #740]	; (800158c <main+0x36c>)
 80012a6:	f006 fb2f 	bl	8007908 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 80012aa:	2104      	movs	r1, #4
 80012ac:	48b8      	ldr	r0, [pc, #736]	; (8001590 <main+0x370>)
 80012ae:	f006 fce1 	bl	8007c74 <HAL_TIM_PWM_Start>

	//Vonalszenzor init
	Vonalszenzor_Init();
 80012b2:	f000 ffb5 	bl	8002220 <Vonalszenzor_Init>


	// initialize vl53l1x communication parameters
	Dev->I2cHandle = &hi2c1;
 80012b6:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80012ba:	4ab6      	ldr	r2, [pc, #728]	; (8001594 <main+0x374>)
 80012bc:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev->I2cDevAddr = 0x52;
 80012c0:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80012c4:	2252      	movs	r2, #82	; 0x52
 80012c6:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	/*** Initialize GPIO expanders ***/
	// Unused GPIO should be configured as outputs to minimize the power consumption
	tavolsag1_buff[0] = 0x14; // GPDR (GPIO set direction register)
 80012ca:	2314      	movs	r3, #20
 80012cc:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	tavolsag1_buff[1] = 0xFF; // GPIO_0 - GPIO_7
 80012d0:	23ff      	movs	r3, #255	; 0xff
 80012d2:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[2] = 0xFF; // GPIO_8 - GPIO_15
 80012d6:	23ff      	movs	r3, #255	; 0xff
 80012d8:	f887 33c6 	strb.w	r3, [r7, #966]	; 0x3c6
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 3, 0xFFFF );
 80012dc:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80012e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2303      	movs	r3, #3
 80012e8:	2184      	movs	r1, #132	; 0x84
 80012ea:	48aa      	ldr	r0, [pc, #680]	; (8001594 <main+0x374>)
 80012ec:	f003 fdc0 	bl	8004e70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_2_ADDR, tavolsag1_buff, 3, 0xFFFF );
 80012f0:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80012f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2303      	movs	r3, #3
 80012fc:	2186      	movs	r1, #134	; 0x86
 80012fe:	48a5      	ldr	r0, [pc, #660]	; (8001594 <main+0x374>)
 8001300:	f003 fdb6 	bl	8004e70 <HAL_I2C_Master_Transmit>

	// clear XSHUT (disable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001304:	2313      	movs	r3, #19
 8001306:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800130a:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800130e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	2184      	movs	r1, #132	; 0x84
 8001318:	489e      	ldr	r0, [pc, #632]	; (8001594 <main+0x374>)
 800131a:	f003 fda9 	bl	8004e70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800131e:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8001322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	2184      	movs	r1, #132	; 0x84
 800132c:	4899      	ldr	r0, [pc, #612]	; (8001594 <main+0x374>)
 800132e:	f003 fe9d 	bl	800506c <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 8001332:	f897 33c4 	ldrb.w	r3, [r7, #964]	; 0x3c4
 8001336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001340:	2313      	movs	r3, #19
 8001342:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 8001346:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800134a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2302      	movs	r3, #2
 8001352:	2184      	movs	r1, #132	; 0x84
 8001354:	488f      	ldr	r0, [pc, #572]	; (8001594 <main+0x374>)
 8001356:	f003 fd8b 	bl	8004e70 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 ); // 2ms reset time
 800135a:	2002      	movs	r0, #2
 800135c:	f002 fa00 	bl	8003760 <HAL_Delay>

	// set XSHUT (enable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state)
 8001360:	2313      	movs	r3, #19
 8001362:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 8001366:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800136a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	2184      	movs	r1, #132	; 0x84
 8001374:	4887      	ldr	r0, [pc, #540]	; (8001594 <main+0x374>)
 8001376:	f003 fd7b 	bl	8004e70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800137a:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800137e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	2184      	movs	r1, #132	; 0x84
 8001388:	4882      	ldr	r0, [pc, #520]	; (8001594 <main+0x374>)
 800138a:	f003 fe6f 	bl	800506c <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 800138e:	f897 33c4 	ldrb.w	r3, [r7, #964]	; 0x3c4
 8001392:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 800139c:	2313      	movs	r3, #19
 800139e:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 80013a2:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80013a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2302      	movs	r3, #2
 80013ae:	2184      	movs	r1, #132	; 0x84
 80013b0:	4878      	ldr	r0, [pc, #480]	; (8001594 <main+0x374>)
 80013b2:	f003 fd5d 	bl	8004e70 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 );
 80013b6:	2002      	movs	r0, #2
 80013b8:	f002 f9d2 	bl	8003760 <HAL_Delay>

	/*** VL53L1X Initialization ***/
	VL53L1_WaitDeviceBooted( Dev );
 80013bc:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013c0:	f009 fb4a 	bl	800aa58 <VL53L1_WaitDeviceBooted>
	VL53L1_DataInit( Dev );
 80013c4:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013c8:	f009 faee 	bl	800a9a8 <VL53L1_DataInit>
	VL53L1_StaticInit( Dev );
 80013cc:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013d0:	f009 fb23 	bl	800aa1a <VL53L1_StaticInit>
	VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 80013d4:	2103      	movs	r1, #3
 80013d6:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013da:	f009 fc6f 	bl	800acbc <VL53L1_SetDistanceMode>
	VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 80013de:	f24c 3150 	movw	r1, #50000	; 0xc350
 80013e2:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013e6:	f009 fcdf 	bl	800ada8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 80013ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013ee:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013f2:	f009 fe65 	bl	800b0c0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
	VL53L1_StartMeasurement( Dev );
 80013f6:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80013fa:	f009 ff9f 	bl	800b33c <VL53L1_StartMeasurement>
		kapu2 = kapuk[2];
		kapu3 = kapuk[3];
		kapu4 = kapuk[4];				ez a resz itt valahogy gebaszt okoz, akasztja a while-t
		kapu5 = kapuk[5];*/

		for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8001404:	e010      	b.n	8001428 <main+0x208>
			vonalak_h[i] = '-';
 8001406:	4a64      	ldr	r2, [pc, #400]	; (8001598 <main+0x378>)
 8001408:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800140c:	4413      	add	r3, r2
 800140e:	222d      	movs	r2, #45	; 0x2d
 8001410:	701a      	strb	r2, [r3, #0]
			vonalak_e[i] = '-';
 8001412:	4a62      	ldr	r2, [pc, #392]	; (800159c <main+0x37c>)
 8001414:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001418:	4413      	add	r3, r2
 800141a:	222d      	movs	r2, #45	; 0x2d
 800141c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 800141e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001422:	3301      	adds	r3, #1
 8001424:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8001428:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800142c:	2b04      	cmp	r3, #4
 800142e:	ddea      	ble.n	8001406 <main+0x1e6>
		}
		for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 8001430:	2301      	movs	r3, #1
 8001432:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8001436:	e010      	b.n	800145a <main+0x23a>
			vonal_eredmeny_h[i] = 0;
 8001438:	4a59      	ldr	r2, [pc, #356]	; (80015a0 <main+0x380>)
 800143a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800143e:	4413      	add	r3, r2
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
			vonal_eredmeny_e[i] = 0;
 8001444:	4a57      	ldr	r2, [pc, #348]	; (80015a4 <main+0x384>)
 8001446:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800144a:	4413      	add	r3, r2
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
		for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 8001450:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001454:	3301      	adds	r3, #1
 8001456:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800145a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800145e:	2b20      	cmp	r3, #32
 8001460:	ddea      	ble.n	8001438 <main+0x218>
		}

		Vonalszenzor_operal(vonal_eredmeny_h, vonal_eredmeny_e);
 8001462:	4950      	ldr	r1, [pc, #320]	; (80015a4 <main+0x384>)
 8001464:	484e      	ldr	r0, [pc, #312]	; (80015a0 <main+0x380>)
 8001466:	f000 feed 	bl	8002244 <Vonalszenzor_operal>
		for(int poz=1; poz < 33-1; poz++) {
 800146a:	2301      	movs	r3, #1
 800146c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001470:	e04d      	b.n	800150e <main+0x2ee>
		// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
			if(vonal_eredmeny_h[poz] > VONAL_THRESHOLD_H) {
 8001472:	4a4b      	ldr	r2, [pc, #300]	; (80015a0 <main+0x380>)
 8001474:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001478:	4413      	add	r3, r2
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f813 	bl	80004a8 <__aeabi_i2d>
 8001482:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <main+0x388>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7ff fb08 	bl	8000a9c <__aeabi_dcmpgt>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d038      	beq.n	8001504 <main+0x2e4>
				if(vonal_eredmeny_h[poz+1] > VONAL_THRESHOLD_H) {
 8001492:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001496:	3301      	adds	r3, #1
 8001498:	4a41      	ldr	r2, [pc, #260]	; (80015a0 <main+0x380>)
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f803 	bl	80004a8 <__aeabi_i2d>
 80014a2:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <main+0x388>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff faf8 	bl	8000a9c <__aeabi_dcmpgt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d028      	beq.n	8001504 <main+0x2e4>
					if(vonal_eredmeny_h[poz-1] < VONAL_THRESHOLD_H) {
 80014b2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80014b6:	3b01      	subs	r3, #1
 80014b8:	4a39      	ldr	r2, [pc, #228]	; (80015a0 <main+0x380>)
 80014ba:	5cd3      	ldrb	r3, [r2, r3]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe fff3 	bl	80004a8 <__aeabi_i2d>
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <main+0x388>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff faca 	bl	8000a60 <__aeabi_dcmplt>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d018      	beq.n	8001504 <main+0x2e4>
						int i = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
						while(vonalak_h[i] != '-') {
 80014d8:	e004      	b.n	80014e4 <main+0x2c4>
							i++;
 80014da:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80014de:	3301      	adds	r3, #1
 80014e0:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
						while(vonalak_h[i] != '-') {
 80014e4:	4a2c      	ldr	r2, [pc, #176]	; (8001598 <main+0x378>)
 80014e6:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b2d      	cmp	r3, #45	; 0x2d
 80014f0:	d1f3      	bne.n	80014da <main+0x2ba>
						}
						vonalak_h[i] = poz;
 80014f2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80014f6:	b2d9      	uxtb	r1, r3
 80014f8:	4a27      	ldr	r2, [pc, #156]	; (8001598 <main+0x378>)
 80014fa:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
		for(int poz=1; poz < 33-1; poz++) {
 8001504:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001508:	3301      	adds	r3, #1
 800150a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800150e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001512:	2b1f      	cmp	r3, #31
 8001514:	ddad      	ble.n	8001472 <main+0x252>
					}
				}
			}
		}
		for(int poz=1; poz < 33-1; poz++) {
 8001516:	2301      	movs	r3, #1
 8001518:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800151c:	e062      	b.n	80015e4 <main+0x3c4>
		// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
			if(vonal_eredmeny_e[poz] > VONAL_THRESHOLD_E) {
 800151e:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <main+0x384>)
 8001520:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe ffbd 	bl	80004a8 <__aeabi_i2d>
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <main+0x38c>)
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	f7ff fab2 	bl	8000a9c <__aeabi_dcmpgt>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d04d      	beq.n	80015da <main+0x3ba>
				if(vonal_eredmeny_e[poz+1] > VONAL_THRESHOLD_E) {
 800153e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001542:	3301      	adds	r3, #1
 8001544:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <main+0x384>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe ffad 	bl	80004a8 <__aeabi_i2d>
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <main+0x38c>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff faa2 	bl	8000a9c <__aeabi_dcmpgt>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d03d      	beq.n	80015da <main+0x3ba>
					if(vonal_eredmeny_e[poz-1] < VONAL_THRESHOLD_E) {
 800155e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001562:	3b01      	subs	r3, #1
 8001564:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <main+0x384>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff9d 	bl	80004a8 <__aeabi_i2d>
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <main+0x38c>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff fa74 	bl	8000a60 <__aeabi_dcmplt>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d02d      	beq.n	80015da <main+0x3ba>
						int i = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
						while(vonalak_e[i] != '-') {
 8001584:	e019      	b.n	80015ba <main+0x39a>
 8001586:	bf00      	nop
 8001588:	40020400 	.word	0x40020400
 800158c:	200005d0 	.word	0x200005d0
 8001590:	2000065c 	.word	0x2000065c
 8001594:	20000348 	.word	0x20000348
 8001598:	20000128 	.word	0x20000128
 800159c:	20000130 	.word	0x20000130
 80015a0:	200001b4 	.word	0x200001b4
 80015a4:	200001d8 	.word	0x200001d8
 80015a8:	20000118 	.word	0x20000118
 80015ac:	20000120 	.word	0x20000120
							i++;
 80015b0:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80015b4:	3301      	adds	r3, #1
 80015b6:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
						while(vonalak_e[i] != '-') {
 80015ba:	4a7d      	ldr	r2, [pc, #500]	; (80017b0 <main+0x590>)
 80015bc:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b2d      	cmp	r3, #45	; 0x2d
 80015c6:	d1f3      	bne.n	80015b0 <main+0x390>
						}
						vonalak_e[i] = poz;
 80015c8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80015cc:	b2d9      	uxtb	r1, r3
 80015ce:	4a78      	ldr	r2, [pc, #480]	; (80017b0 <main+0x590>)
 80015d0:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80015d4:	4413      	add	r3, r2
 80015d6:	460a      	mov	r2, r1
 80015d8:	701a      	strb	r2, [r3, #0]
		for(int poz=1; poz < 33-1; poz++) {
 80015da:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80015de:	3301      	adds	r3, #1
 80015e0:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80015e4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80015e8:	2b1f      	cmp	r3, #31
 80015ea:	dd98      	ble.n	800151e <main+0x2fe>
					}
				}
			}
		}
		Kovetendo_vonal_valaszto(&vonal_kovetni_h, &vonal_kovetni_e);
 80015ec:	4971      	ldr	r1, [pc, #452]	; (80017b4 <main+0x594>)
 80015ee:	4872      	ldr	r0, [pc, #456]	; (80017b8 <main+0x598>)
 80015f0:	f001 faac 	bl	8002b4c <Kovetendo_vonal_valaszto>
		//uint8_t Test[] = "Hello World\r\n"; //Data to send
		/*int size = sizeof(minta1);
		HAL_UART_Transmit(&huart2, minta1, size, 100);// Sending in normal mode
		HAL_Delay(1000);*/

		VL53L1_WaitMeasurementDataReady( Dev );
 80015f4:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80015f8:	f009 ff22 	bl	800b440 <VL53L1_WaitMeasurementDataReady>
		VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 80015fc:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001600:	4619      	mov	r1, r3
 8001602:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001606:	f00a f8d7 	bl	800b7b8 <VL53L1_GetRangingMeasurementData>
		/*sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
				 ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
		HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );*/
		VL53L1_ClearInterruptAndStartMeasurement( Dev );
 800160a:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800160e:	f009 ff01 	bl	800b414 <VL53L1_ClearInterruptAndStartMeasurement>

		//Szervo
		if (btnEnable == 1) {
 8001612:	4b6a      	ldr	r3, [pc, #424]	; (80017bc <main+0x59c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b01      	cmp	r3, #1
 8001618:	f040 80aa 	bne.w	8001770 <main+0x550>
			if (szervoEnable == 1) {
 800161c:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <main+0x5a0>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d17d      	bne.n	8001720 <main+0x500>
				cel = (vonal_kovetni_e) + 	(((vonal_kovetni_e) - (vonal_kovetni_h)) *kormanyzas_agresszivitas);
 8001624:	4b63      	ldr	r3, [pc, #396]	; (80017b4 <main+0x594>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff3d 	bl	80004a8 <__aeabi_i2d>
 800162e:	4604      	mov	r4, r0
 8001630:	460d      	mov	r5, r1
 8001632:	4b60      	ldr	r3, [pc, #384]	; (80017b4 <main+0x594>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b60      	ldr	r3, [pc, #384]	; (80017b8 <main+0x598>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff33 	bl	80004a8 <__aeabi_i2d>
 8001642:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <main+0x5a4>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe ff98 	bl	800057c <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4620      	mov	r0, r4
 8001652:	4629      	mov	r1, r5
 8001654:	f7fe fddc 	bl	8000210 <__adddf3>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff fa26 	bl	8000ab0 <__aeabi_d2iz>
 8001664:	4603      	mov	r3, r0
 8001666:	4a58      	ldr	r2, [pc, #352]	; (80017c8 <main+0x5a8>)
 8001668:	6013      	str	r3, [r2, #0]
				//fel auto tavolsagra vetit ki. ezt novelni kell (?) hogy agresszivabban kanyarodjon
				if(cel < -30) {
 800166a:	4b57      	ldr	r3, [pc, #348]	; (80017c8 <main+0x5a8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f113 0f1e 	cmn.w	r3, #30
 8001672:	da06      	bge.n	8001682 <main+0x462>
					szervoSzog = 0;
 8001674:	4b55      	ldr	r3, [pc, #340]	; (80017cc <main+0x5ac>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
					szervoTeszt = 0;
 800167a:	4b55      	ldr	r3, [pc, #340]	; (80017d0 <main+0x5b0>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e030      	b.n	80016e4 <main+0x4c4>
				}
				else if(30 < cel) {
 8001682:	4b51      	ldr	r3, [pc, #324]	; (80017c8 <main+0x5a8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b1e      	cmp	r3, #30
 8001688:	dd06      	ble.n	8001698 <main+0x478>
					szervoSzog = 180;
 800168a:	4b50      	ldr	r3, [pc, #320]	; (80017cc <main+0x5ac>)
 800168c:	22b4      	movs	r2, #180	; 0xb4
 800168e:	601a      	str	r2, [r3, #0]
					szervoTeszt = 180;
 8001690:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <main+0x5b0>)
 8001692:	22b4      	movs	r2, #180	; 0xb4
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e025      	b.n	80016e4 <main+0x4c4>
				}
				else if(vonal_kovetni_e < 4) {
 8001698:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <main+0x594>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b03      	cmp	r3, #3
 800169e:	dc06      	bgt.n	80016ae <main+0x48e>
					szervoSzog = 0;
 80016a0:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <main+0x5ac>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
					szervoTeszt = 0;
 80016a6:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <main+0x5b0>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e01a      	b.n	80016e4 <main+0x4c4>
				}
				else if(29 < vonal_kovetni_e) {
 80016ae:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <main+0x594>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b1d      	cmp	r3, #29
 80016b4:	dd06      	ble.n	80016c4 <main+0x4a4>
					szervoSzog = 180;
 80016b6:	4b45      	ldr	r3, [pc, #276]	; (80017cc <main+0x5ac>)
 80016b8:	22b4      	movs	r2, #180	; 0xb4
 80016ba:	601a      	str	r2, [r3, #0]
					szervoTeszt = 180;
 80016bc:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <main+0x5b0>)
 80016be:	22b4      	movs	r2, #180	; 0xb4
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e00f      	b.n	80016e4 <main+0x4c4>
				}
				else {
					szervoSzog = 90 + cel *3;
 80016c4:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <main+0x5a8>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	335a      	adds	r3, #90	; 0x5a
 80016d0:	4a3e      	ldr	r2, [pc, #248]	; (80017cc <main+0x5ac>)
 80016d2:	6013      	str	r3, [r2, #0]
					szervoTeszt = 90 + cel *3;
 80016d4:	4b3c      	ldr	r3, [pc, #240]	; (80017c8 <main+0x5a8>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	335a      	adds	r3, #90	; 0x5a
 80016e0:	4a3b      	ldr	r2, [pc, #236]	; (80017d0 <main+0x5b0>)
 80016e2:	6013      	str	r3, [r2, #0]
				}
				if(szervoSzog - szervoSzog_emlek < 30 && szervoSzog - szervoSzog_emlek > -30) {
 80016e4:	4b39      	ldr	r3, [pc, #228]	; (80017cc <main+0x5ac>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <main+0x5b4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b1d      	cmp	r3, #29
 80016f0:	dc0b      	bgt.n	800170a <main+0x4ea>
 80016f2:	4b36      	ldr	r3, [pc, #216]	; (80017cc <main+0x5ac>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <main+0x5b4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f113 0f1d 	cmn.w	r3, #29
 8001700:	db03      	blt.n	800170a <main+0x4ea>
					szervoSzog_emlek = szervoSzog;
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <main+0x5ac>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a33      	ldr	r2, [pc, #204]	; (80017d4 <main+0x5b4>)
 8001708:	6013      	str	r3, [r2, #0]
				}
				SERVO_MoveTo(SZERVO, szervoSzog);
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <main+0x5ac>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001716:	eeb0 0a67 	vmov.f32	s0, s15
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fd1c 	bl	8001158 <SERVO_MoveTo>
					SERVO_MoveTo(SZERVO, 180);
					//motornak nagyon lassu megadas
				}*/
			}

			if (motvezEnable == 1) {
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <main+0x5b8>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	f47f ae6a 	bne.w	80013fe <main+0x1de>
				for(int k = 250; k < 500; k+=5) {
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, k); // ha pwm1 nagyobb, hatramenet
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - k);
					HAL_Delay(200);
				}*/
				int k = 420;		// 0 - 1023-ig 410 a minimum, az alatt karos a motornak
 800172a:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800172e:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
				if (k < motvez_d / 2) {						// motvez_d / 2 -nel nagyobb a hatramenet, pl. 900: gyors tolatás
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <main+0x5bc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0fda      	lsrs	r2, r3, #31
 8001738:	4413      	add	r3, r2
 800173a:	105b      	asrs	r3, r3, #1
 800173c:	461a      	mov	r2, r3
 800173e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001742:	4293      	cmp	r3, r2
 8001744:	f6bf ae5b 	bge.w	80013fe <main+0x1de>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, k); 	// ha pwm1 nagyobb, hatramenet
 8001748:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800174c:	b29b      	uxth	r3, r3
 800174e:	4619      	mov	r1, r3
 8001750:	2000      	movs	r0, #0
 8001752:	f00e fd0d 	bl	8010170 <DC_MOTOR_Set_Speed>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - k);
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <main+0x5bc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b29a      	uxth	r2, r3
 800175c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001760:	b29b      	uxth	r3, r3
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b29b      	uxth	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	2001      	movs	r0, #1
 800176a:	f00e fd01 	bl	8010170 <DC_MOTOR_Set_Speed>
 800176e:	e646      	b.n	80013fe <main+0x1de>
				}
			}
		} else {
			SERVO_MoveTo(SZERVO, 90);
 8001770:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80017e0 <main+0x5c0>
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fcef 	bl	8001158 <SERVO_MoveTo>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_d / 2);// elvileg ez a ketto a megallas
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <main+0x5bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0fda      	lsrs	r2, r3, #31
 8001780:	4413      	add	r3, r2
 8001782:	105b      	asrs	r3, r3, #1
 8001784:	b29b      	uxth	r3, r3
 8001786:	4619      	mov	r1, r3
 8001788:	2000      	movs	r0, #0
 800178a:	f00e fcf1 	bl	8010170 <DC_MOTOR_Set_Speed>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - (motvez_d / 2));
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <main+0x5bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	0fda      	lsrs	r2, r3, #31
 8001794:	4413      	add	r3, r2
 8001796:	105b      	asrs	r3, r3, #1
 8001798:	425b      	negs	r3, r3
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <main+0x5bc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	4619      	mov	r1, r3
 80017a8:	2001      	movs	r0, #1
 80017aa:	f00e fce1 	bl	8010170 <DC_MOTOR_Set_Speed>
		for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 80017ae:	e626      	b.n	80013fe <main+0x1de>
 80017b0:	20000130 	.word	0x20000130
 80017b4:	20000200 	.word	0x20000200
 80017b8:	200001fc 	.word	0x200001fc
 80017bc:	200001b0 	.word	0x200001b0
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000148 	.word	0x20000148
 80017c8:	20000204 	.word	0x20000204
 80017cc:	2000013c 	.word	0x2000013c
 80017d0:	20000138 	.word	0x20000138
 80017d4:	20000140 	.word	0x20000140
 80017d8:	20000001 	.word	0x20000001
 80017dc:	20000150 	.word	0x20000150
 80017e0:	42b40000 	.word	0x42b40000

080017e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b094      	sub	sp, #80	; 0x50
 80017e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	2234      	movs	r2, #52	; 0x34
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f00e fd7a 	bl	80102ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <SystemClock_Config+0xdc>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a2b      	ldr	r2, [pc, #172]	; (80018c0 <SystemClock_Config+0xdc>)
 8001812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
 8001818:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <SystemClock_Config+0xdc>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001824:	2300      	movs	r3, #0
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <SystemClock_Config+0xe0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <SystemClock_Config+0xe0>)
 800182e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <SystemClock_Config+0xe0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001840:	2301      	movs	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001848:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184a:	2302      	movs	r3, #2
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001854:	2304      	movs	r3, #4
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001858:	23b4      	movs	r3, #180	; 0xb4
 800185a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800185c:	2302      	movs	r3, #2
 800185e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001860:	2302      	movs	r3, #2
 8001862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001864:	2302      	movs	r3, #2
 8001866:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4618      	mov	r0, r3
 800186e:	f004 fd2d 	bl	80062cc <HAL_RCC_OscConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001878:	f001 f9a8 	bl	8002bcc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800187c:	f004 f94a 	bl	8005b14 <HAL_PWREx_EnableOverDrive>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001886:	f001 f9a1 	bl	8002bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188a:	230f      	movs	r3, #15
 800188c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188e:	2302      	movs	r3, #2
 8001890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001896:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800189a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800189c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	2105      	movs	r1, #5
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 f983 	bl	8005bb4 <HAL_RCC_ClockConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80018b4:	f001 f98a 	bl	8002bcc <Error_Handler>
  }
}
 80018b8:	bf00      	nop
 80018ba:	3750      	adds	r7, #80	; 0x50
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40007000 	.word	0x40007000

080018c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_I2C1_Init+0x50>)
 80018ce:	4a13      	ldr	r2, [pc, #76]	; (800191c <MX_I2C1_Init+0x54>)
 80018d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_I2C1_Init+0x50>)
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <MX_I2C1_Init+0x58>)
 80018d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_I2C1_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_I2C1_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_I2C1_Init+0x50>)
 80018e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <MX_I2C1_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_I2C1_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <MX_I2C1_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_I2C1_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_I2C1_Init+0x50>)
 8001906:	f003 f8e7 	bl	8004ad8 <HAL_I2C_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001910:	f001 f95c 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000348 	.word	0x20000348
 800191c:	40005400 	.word	0x40005400
 8001920:	000186a0 	.word	0x000186a0

08001924 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_I2C2_Init+0x50>)
 800192a:	4a13      	ldr	r2, [pc, #76]	; (8001978 <MX_I2C2_Init+0x54>)
 800192c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_I2C2_Init+0x50>)
 8001930:	4a12      	ldr	r2, [pc, #72]	; (800197c <MX_I2C2_Init+0x58>)
 8001932:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_I2C2_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_I2C2_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_I2C2_Init+0x50>)
 8001942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001946:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <MX_I2C2_Init+0x50>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_I2C2_Init+0x50>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <MX_I2C2_Init+0x50>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_I2C2_Init+0x50>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <MX_I2C2_Init+0x50>)
 8001962:	f003 f8b9 	bl	8004ad8 <HAL_I2C_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800196c:	f001 f92e 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000039c 	.word	0x2000039c
 8001978:	40005800 	.word	0x40005800
 800197c:	000186a0 	.word	0x000186a0

08001980 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_I2C3_Init+0x50>)
 8001986:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <MX_I2C3_Init+0x54>)
 8001988:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_I2C3_Init+0x50>)
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <MX_I2C3_Init+0x58>)
 800198e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_I2C3_Init+0x50>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_I2C3_Init+0x50>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_I2C3_Init+0x50>)
 800199e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019a2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <MX_I2C3_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_I2C3_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <MX_I2C3_Init+0x50>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_I2C3_Init+0x50>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_I2C3_Init+0x50>)
 80019be:	f003 f88b 	bl	8004ad8 <HAL_I2C_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80019c8:	f001 f900 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2000020c 	.word	0x2000020c
 80019d4:	40005c00 	.word	0x40005c00
 80019d8:	000186a0 	.word	0x000186a0

080019dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_SPI1_Init+0x64>)
 80019e2:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <MX_SPI1_Init+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <MX_SPI1_Init+0x64>)
 80019e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_SPI1_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MX_SPI1_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_SPI1_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a10:	2220      	movs	r2, #32
 8001a12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a28:	220a      	movs	r2, #10
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a2e:	f004 ffab 	bl	8006988 <HAL_SPI_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a38:	f001 f8c8 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000578 	.word	0x20000578
 8001a44:	40013000 	.word	0x40013000

08001a48 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a4e:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <MX_SPI2_Init+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a7c:	2218      	movs	r2, #24
 8001a7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a94:	220a      	movs	r2, #10
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a9a:	f004 ff75 	bl	8006988 <HAL_SPI_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001aa4:	f001 f892 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000260 	.word	0x20000260
 8001ab0:	40003800 	.word	0x40003800

08001ab4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001aba:	4a18      	ldr	r2, [pc, #96]	; (8001b1c <MX_SPI3_Init+0x68>)
 8001abc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ac4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001ae0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ae4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001b00:	220a      	movs	r2, #10
 8001b02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b04:	4804      	ldr	r0, [pc, #16]	; (8001b18 <MX_SPI3_Init+0x64>)
 8001b06:	f004 ff3f 	bl	8006988 <HAL_SPI_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001b10:	f001 f85c 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000438 	.word	0x20000438
 8001b1c:	40003c00 	.word	0x40003c00

08001b20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b46:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001b4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b62:	2280      	movs	r2, #128	; 0x80
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b66:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b68:	f005 fdde 	bl	8007728 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b72:	f001 f82b 	bl	8002bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b84:	f006 fe86 	bl	8008894 <HAL_TIM_ConfigClockSource>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b8e:	f001 f81d 	bl	8002bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001ba0:	f007 fe18 	bl	80097d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001baa:	f001 f80f 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200005d0 	.word	0x200005d0

08001bbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc2:	f107 0320 	add.w	r3, r7, #32
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	615a      	str	r2, [r3, #20]
 8001bdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <MX_TIM3_Init+0xac>)
 8001be0:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <MX_TIM3_Init+0xb0>)
 8001be2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001be4:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <MX_TIM3_Init+0xac>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <MX_TIM3_Init+0xac>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_TIM3_Init+0xac>)
 8001bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_TIM3_Init+0xac>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_TIM3_Init+0xac>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c04:	4818      	ldr	r0, [pc, #96]	; (8001c68 <MX_TIM3_Init+0xac>)
 8001c06:	f005 ff45 	bl	8007a94 <HAL_TIM_PWM_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c10:	f000 ffdc 	bl	8002bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c1c:	f107 0320 	add.w	r3, r7, #32
 8001c20:	4619      	mov	r1, r3
 8001c22:	4811      	ldr	r0, [pc, #68]	; (8001c68 <MX_TIM3_Init+0xac>)
 8001c24:	f007 fdd6 	bl	80097d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c2e:	f000 ffcd 	bl	8002bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c32:	2360      	movs	r3, #96	; 0x60
 8001c34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	2200      	movs	r2, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	4807      	ldr	r0, [pc, #28]	; (8001c68 <MX_TIM3_Init+0xac>)
 8001c4a:	f006 fc4b 	bl	80084e4 <HAL_TIM_PWM_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c54:	f000 ffba 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c58:	4803      	ldr	r0, [pc, #12]	; (8001c68 <MX_TIM3_Init+0xac>)
 8001c5a:	f001 fb07 	bl	800326c <HAL_TIM_MspPostInit>

}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	; 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200003f0 	.word	0x200003f0
 8001c6c:	40000400 	.word	0x40000400

08001c70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	; 0x30
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	2224      	movs	r2, #36	; 0x24
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00e fb34 	bl	80102ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c8c:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <MX_TIM4_Init+0xa0>)
 8001c8e:	4a21      	ldr	r2, [pc, #132]	; (8001d14 <MX_TIM4_Init+0xa4>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c92:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <MX_TIM4_Init+0xa0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <MX_TIM4_Init+0xa0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_TIM4_Init+0xa0>)
 8001ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_TIM4_Init+0xa0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_TIM4_Init+0xa0>)
 8001cae:	2280      	movs	r2, #128	; 0x80
 8001cb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <MX_TIM4_Init+0xa0>)
 8001cde:	f006 f951 	bl	8007f84 <HAL_TIM_Encoder_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ce8:	f000 ff70 	bl	8002bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_TIM4_Init+0xa0>)
 8001cfa:	f007 fd6b 	bl	80097d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001d04:	f000 ff62 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3730      	adds	r7, #48	; 0x30
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000300 	.word	0x20000300
 8001d14:	40000800 	.word	0x40000800

08001d18 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b096      	sub	sp, #88	; 0x58
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
 8001d46:	615a      	str	r2, [r3, #20]
 8001d48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f00e facb 	bl	80102ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d56:	4b44      	ldr	r3, [pc, #272]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001d58:	4a44      	ldr	r2, [pc, #272]	; (8001e6c <MX_TIM8_Init+0x154>)
 8001d5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d5c:	4b42      	ldr	r3, [pc, #264]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001d62:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001d64:	2260      	movs	r2, #96	; 0x60
 8001d66:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d68:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d6e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d70:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001d76:	4b3c      	ldr	r3, [pc, #240]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7c:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d82:	4839      	ldr	r0, [pc, #228]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001d84:	f005 fcd0 	bl	8007728 <HAL_TIM_Base_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001d8e:	f000 ff1d 	bl	8002bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4832      	ldr	r0, [pc, #200]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001da0:	f006 fd78 	bl	8008894 <HAL_TIM_ConfigClockSource>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001daa:	f000 ff0f 	bl	8002bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001dae:	482e      	ldr	r0, [pc, #184]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001db0:	f005 fe70 	bl	8007a94 <HAL_TIM_PWM_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001dba:	f000 ff07 	bl	8002bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4826      	ldr	r0, [pc, #152]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001dce:	f007 fd01 	bl	80097d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001dd8:	f000 fef8 	bl	8002bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ddc:	2360      	movs	r3, #96	; 0x60
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de8:	2300      	movs	r3, #0
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4819      	ldr	r0, [pc, #100]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001e02:	f006 fb6f 	bl	80084e4 <HAL_TIM_PWM_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001e0c:	f000 fede 	bl	8002bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e14:	2208      	movs	r2, #8
 8001e16:	4619      	mov	r1, r3
 8001e18:	4813      	ldr	r0, [pc, #76]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001e1a:	f006 fb63 	bl	80084e4 <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001e24:	f000 fed2 	bl	8002bcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4807      	ldr	r0, [pc, #28]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001e4c:	f007 fda0 	bl	8009990 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001e56:	f000 feb9 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

	//Itt kell megivni a DC_MOTOR_Init() -et
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e5a:	4803      	ldr	r0, [pc, #12]	; (8001e68 <MX_TIM8_Init+0x150>)
 8001e5c:	f001 fa06 	bl	800326c <HAL_TIM_MspPostInit>

}
 8001e60:	bf00      	nop
 8001e62:	3758      	adds	r7, #88	; 0x58
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200002b8 	.word	0x200002b8
 8001e6c:	40010400 	.word	0x40010400

08001e70 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	; 0x30
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e76:	f107 0320 	add.w	r3, r7, #32
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]
 8001e92:	615a      	str	r2, [r3, #20]
 8001e94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001e98:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <MX_TIM12_Init+0xdc>)
 8001e9a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001e9e:	2213      	movs	r2, #19
 8001ea0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001eaa:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001eae:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001ebc:	4822      	ldr	r0, [pc, #136]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001ebe:	f005 fc33 	bl	8007728 <HAL_TIM_Base_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001ec8:	f000 fe80 	bl	8002bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	481b      	ldr	r0, [pc, #108]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001eda:	f006 fcdb 	bl	8008894 <HAL_TIM_ConfigClockSource>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001ee4:	f000 fe72 	bl	8002bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001ee8:	4817      	ldr	r0, [pc, #92]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001eea:	f005 fdd3 	bl	8007a94 <HAL_TIM_PWM_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001ef4:	f000 fe6a 	bl	8002bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ef8:	2360      	movs	r3, #96	; 0x60
 8001efa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	480e      	ldr	r0, [pc, #56]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001f10:	f006 fae8 	bl	80084e4 <HAL_TIM_PWM_ConfigChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001f1a:	f000 fe57 	bl	8002bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2204      	movs	r2, #4
 8001f22:	4619      	mov	r1, r3
 8001f24:	4808      	ldr	r0, [pc, #32]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001f26:	f006 fadd 	bl	80084e4 <HAL_TIM_PWM_ConfigChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001f30:	f000 fe4c 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	HAL_TIM_Base_Start_IT(&htim12);
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001f36:	f005 fce7 	bl	8007908 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001f3a:	4803      	ldr	r0, [pc, #12]	; (8001f48 <MX_TIM12_Init+0xd8>)
 8001f3c:	f001 f996 	bl	800326c <HAL_TIM_MspPostInit>

}
 8001f40:	bf00      	nop
 8001f42:	3730      	adds	r7, #48	; 0x30
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	2000065c 	.word	0x2000065c
 8001f4c:	40001800 	.word	0x40001800

08001f50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_UART4_Init+0x4c>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <MX_UART4_Init+0x50>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <MX_UART4_Init+0x4c>)
 8001f5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_UART4_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_UART4_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <MX_UART4_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_UART4_Init+0x4c>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <MX_UART4_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_UART4_Init+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_UART4_Init+0x4c>)
 8001f88:	f007 fde2 	bl	8009b50 <HAL_UART_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001f92:	f000 fe1b 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000534 	.word	0x20000534
 8001fa0:	40004c00 	.word	0x40004c00

08001fa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <MX_USART1_UART_Init+0x50>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fca:	2204      	movs	r2, #4
 8001fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fdc:	f007 fdb8 	bl	8009b50 <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fe6:	f000 fdf1 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200004f0 	.word	0x200004f0
 8001ff4:	40011000 	.word	0x40011000

08001ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <MX_USART2_UART_Init+0x50>)
 8002000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002030:	f007 fd8e 	bl	8009b50 <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800203a:	f000 fdc7 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000618 	.word	0x20000618
 8002048:	40004400 	.word	0x40004400

0800204c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <MX_DMA_Init+0x3c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <MX_DMA_Init+0x3c>)
 800205c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <MX_DMA_Init+0x3c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2010      	movs	r0, #16
 8002074:	f001 fc88 	bl	8003988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002078:	2010      	movs	r0, #16
 800207a:	f001 fcb1 	bl	80039e0 <HAL_NVIC_EnableIRQ>

}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800

0800208c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	4b59      	ldr	r3, [pc, #356]	; (800220c <MX_GPIO_Init+0x180>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a58      	ldr	r2, [pc, #352]	; (800220c <MX_GPIO_Init+0x180>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b56      	ldr	r3, [pc, #344]	; (800220c <MX_GPIO_Init+0x180>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b52      	ldr	r3, [pc, #328]	; (800220c <MX_GPIO_Init+0x180>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a51      	ldr	r2, [pc, #324]	; (800220c <MX_GPIO_Init+0x180>)
 80020c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b4f      	ldr	r3, [pc, #316]	; (800220c <MX_GPIO_Init+0x180>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b4b      	ldr	r3, [pc, #300]	; (800220c <MX_GPIO_Init+0x180>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a4a      	ldr	r2, [pc, #296]	; (800220c <MX_GPIO_Init+0x180>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b48      	ldr	r3, [pc, #288]	; (800220c <MX_GPIO_Init+0x180>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	4b44      	ldr	r3, [pc, #272]	; (800220c <MX_GPIO_Init+0x180>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a43      	ldr	r2, [pc, #268]	; (800220c <MX_GPIO_Init+0x180>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b41      	ldr	r3, [pc, #260]	; (800220c <MX_GPIO_Init+0x180>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4b3d      	ldr	r3, [pc, #244]	; (800220c <MX_GPIO_Init+0x180>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a3c      	ldr	r2, [pc, #240]	; (800220c <MX_GPIO_Init+0x180>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b3a      	ldr	r3, [pc, #232]	; (800220c <MX_GPIO_Init+0x180>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800212e:	2200      	movs	r2, #0
 8002130:	213d      	movs	r1, #61	; 0x3d
 8002132:	4837      	ldr	r0, [pc, #220]	; (8002210 <MX_GPIO_Init+0x184>)
 8002134:	f002 fc86 	bl	8004a44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	f641 0102 	movw	r1, #6146	; 0x1802
 800213e:	4835      	ldr	r0, [pc, #212]	; (8002214 <MX_GPIO_Init+0x188>)
 8002140:	f002 fc80 	bl	8004a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	f241 0126 	movw	r1, #4134	; 0x1026
 800214a:	4833      	ldr	r0, [pc, #204]	; (8002218 <MX_GPIO_Init+0x18c>)
 800214c:	f002 fc7a 	bl	8004a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002156:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800215a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4619      	mov	r1, r3
 8002166:	482a      	ldr	r0, [pc, #168]	; (8002210 <MX_GPIO_Init+0x184>)
 8002168:	f002 f948 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800216c:	233d      	movs	r3, #61	; 0x3d
 800216e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	4823      	ldr	r0, [pc, #140]	; (8002210 <MX_GPIO_Init+0x184>)
 8002184:	f002 f93a 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002188:	f641 0302 	movw	r3, #6146	; 0x1802
 800218c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218e:	2301      	movs	r3, #1
 8002190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	481c      	ldr	r0, [pc, #112]	; (8002214 <MX_GPIO_Init+0x188>)
 80021a2:	f002 f92b 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021a6:	2310      	movs	r3, #16
 80021a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4816      	ldr	r0, [pc, #88]	; (8002214 <MX_GPIO_Init+0x188>)
 80021ba:	f002 f91f 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 80021be:	f241 0326 	movw	r3, #4134	; 0x1026
 80021c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	4810      	ldr	r0, [pc, #64]	; (8002218 <MX_GPIO_Init+0x18c>)
 80021d8:	f002 f910 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021dc:	2304      	movs	r3, #4
 80021de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	480b      	ldr	r0, [pc, #44]	; (800221c <MX_GPIO_Init+0x190>)
 80021f0:	f002 f904 	bl	80043fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 80021f4:	2201      	movs	r2, #1
 80021f6:	2100      	movs	r1, #0
 80021f8:	2028      	movs	r0, #40	; 0x28
 80021fa:	f001 fbc5 	bl	8003988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021fe:	2028      	movs	r0, #40	; 0x28
 8002200:	f001 fbee 	bl	80039e0 <HAL_NVIC_EnableIRQ>

}
 8002204:	bf00      	nop
 8002206:	3728      	adds	r7, #40	; 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	40020800 	.word	0x40020800
 8002214:	40020000 	.word	0x40020000
 8002218:	40020400 	.word	0x40020400
 800221c:	40020c00 	.word	0x40020c00

08002220 <Vonalszenzor_Init>:

/* USER CODE BEGIN 4 */
static void Vonalszenzor_Init(void) {
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);	// PCB2: Von_OE1  0
 8002224:	2200      	movs	r2, #0
 8002226:	2104      	movs	r1, #4
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <Vonalszenzor_Init+0x1c>)
 800222a:	f002 fc0b 	bl	8004a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	// PCB2: Von_OE2  0
 800222e:	2200      	movs	r2, #0
 8002230:	2120      	movs	r1, #32
 8002232:	4803      	ldr	r0, [pc, #12]	; (8002240 <Vonalszenzor_Init+0x20>)
 8002234:	f002 fc06 	bl	8004a44 <HAL_GPIO_WritePin>
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40020400 	.word	0x40020400
 8002240:	40020800 	.word	0x40020800

08002244 <Vonalszenzor_operal>:

static void Vonalszenzor_operal(uint8_t* teljes_kiolvasott_h, uint8_t* teljes_kiolvasott_e) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800224e:	48be      	ldr	r0, [pc, #760]	; (8002548 <Vonalszenzor_operal+0x304>)
 8002250:	f000 fc36 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	uint8_t eredmeny_16bit_temp[2] = {0b1110000, 0b00000000};
 8002254:	2370      	movs	r3, #112	; 0x70
 8002256:	81bb      	strh	r3, [r7, #12]
	//hatso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1h);
 8002258:	48bc      	ldr	r0, [pc, #752]	; (800254c <Vonalszenzor_operal+0x308>)
 800225a:	f000 fc31 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800225e:	4bbc      	ldr	r3, [pc, #752]	; (8002550 <Vonalszenzor_operal+0x30c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f107 020c 	add.w	r2, r7, #12
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fc51 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[32] = (uint8_t) eredmeny_16bit_temp[0];
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3320      	adds	r3, #32
 8002272:	7b3a      	ldrb	r2, [r7, #12]
 8002274:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002276:	4bb7      	ldr	r3, [pc, #732]	; (8002554 <Vonalszenzor_operal+0x310>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	f107 020c 	add.w	r2, r7, #12
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fc45 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[28] = (uint8_t) eredmeny_16bit_temp[0];
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	331c      	adds	r3, #28
 800228a:	7b3a      	ldrb	r2, [r7, #12]
 800228c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800228e:	48ae      	ldr	r0, [pc, #696]	; (8002548 <Vonalszenzor_operal+0x304>)
 8002290:	f000 fc16 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2h);
 8002294:	48b0      	ldr	r0, [pc, #704]	; (8002558 <Vonalszenzor_operal+0x314>)
 8002296:	f000 fc13 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800229a:	4bad      	ldr	r3, [pc, #692]	; (8002550 <Vonalszenzor_operal+0x30c>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	f107 020c 	add.w	r2, r7, #12
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fc33 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[24] = (uint8_t) eredmeny_16bit_temp[0];
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3318      	adds	r3, #24
 80022ae:	7b3a      	ldrb	r2, [r7, #12]
 80022b0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80022b2:	4ba8      	ldr	r3, [pc, #672]	; (8002554 <Vonalszenzor_operal+0x310>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f107 020c 	add.w	r2, r7, #12
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fc27 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[20] = (uint8_t) eredmeny_16bit_temp[0];
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3314      	adds	r3, #20
 80022c6:	7b3a      	ldrb	r2, [r7, #12]
 80022c8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80022ca:	489f      	ldr	r0, [pc, #636]	; (8002548 <Vonalszenzor_operal+0x304>)
 80022cc:	f000 fbf8 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3h);
 80022d0:	48a2      	ldr	r0, [pc, #648]	; (800255c <Vonalszenzor_operal+0x318>)
 80022d2:	f000 fbf5 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80022d6:	4b9e      	ldr	r3, [pc, #632]	; (8002550 <Vonalszenzor_operal+0x30c>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	f107 020c 	add.w	r2, r7, #12
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fc15 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[16] = (uint8_t) eredmeny_16bit_temp[0];
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3310      	adds	r3, #16
 80022ea:	7b3a      	ldrb	r2, [r7, #12]
 80022ec:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80022ee:	4b99      	ldr	r3, [pc, #612]	; (8002554 <Vonalszenzor_operal+0x310>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	f107 020c 	add.w	r2, r7, #12
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fc09 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[12] = (uint8_t) eredmeny_16bit_temp[0];
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	330c      	adds	r3, #12
 8002302:	7b3a      	ldrb	r2, [r7, #12]
 8002304:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002306:	4890      	ldr	r0, [pc, #576]	; (8002548 <Vonalszenzor_operal+0x304>)
 8002308:	f000 fbda 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4h);
 800230c:	4894      	ldr	r0, [pc, #592]	; (8002560 <Vonalszenzor_operal+0x31c>)
 800230e:	f000 fbd7 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002312:	4b8f      	ldr	r3, [pc, #572]	; (8002550 <Vonalszenzor_operal+0x30c>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f107 020c 	add.w	r2, r7, #12
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fbf7 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[8] = (uint8_t) eredmeny_16bit_temp[0];
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3308      	adds	r3, #8
 8002326:	7b3a      	ldrb	r2, [r7, #12]
 8002328:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800232a:	4b8a      	ldr	r3, [pc, #552]	; (8002554 <Vonalszenzor_operal+0x310>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f107 020c 	add.w	r2, r7, #12
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fbeb 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[4] = (uint8_t) eredmeny_16bit_temp[0];
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3304      	adds	r3, #4
 800233e:	7b3a      	ldrb	r2, [r7, #12]
 8002340:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002342:	4881      	ldr	r0, [pc, #516]	; (8002548 <Vonalszenzor_operal+0x304>)
 8002344:	f000 fbbc 	bl	8002ac0 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1h);
 8002348:	4886      	ldr	r0, [pc, #536]	; (8002564 <Vonalszenzor_operal+0x320>)
 800234a:	f000 fbb9 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800234e:	4b86      	ldr	r3, [pc, #536]	; (8002568 <Vonalszenzor_operal+0x324>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	f107 020c 	add.w	r2, r7, #12
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fbd9 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[31] = (uint8_t) eredmeny_16bit_temp[0];
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	331f      	adds	r3, #31
 8002362:	7b3a      	ldrb	r2, [r7, #12]
 8002364:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002366:	4b81      	ldr	r3, [pc, #516]	; (800256c <Vonalszenzor_operal+0x328>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f107 020c 	add.w	r2, r7, #12
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fbcd 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[27] = (uint8_t) eredmeny_16bit_temp[0];
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	331b      	adds	r3, #27
 800237a:	7b3a      	ldrb	r2, [r7, #12]
 800237c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800237e:	4872      	ldr	r0, [pc, #456]	; (8002548 <Vonalszenzor_operal+0x304>)
 8002380:	f000 fb9e 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2h);
 8002384:	487a      	ldr	r0, [pc, #488]	; (8002570 <Vonalszenzor_operal+0x32c>)
 8002386:	f000 fb9b 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800238a:	4b77      	ldr	r3, [pc, #476]	; (8002568 <Vonalszenzor_operal+0x324>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f107 020c 	add.w	r2, r7, #12
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fbbb 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[23] = (uint8_t) eredmeny_16bit_temp[0];
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3317      	adds	r3, #23
 800239e:	7b3a      	ldrb	r2, [r7, #12]
 80023a0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80023a2:	4b72      	ldr	r3, [pc, #456]	; (800256c <Vonalszenzor_operal+0x328>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f107 020c 	add.w	r2, r7, #12
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fbaf 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[19] = (uint8_t) eredmeny_16bit_temp[0];
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3313      	adds	r3, #19
 80023b6:	7b3a      	ldrb	r2, [r7, #12]
 80023b8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023ba:	4863      	ldr	r0, [pc, #396]	; (8002548 <Vonalszenzor_operal+0x304>)
 80023bc:	f000 fb80 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3h);
 80023c0:	486c      	ldr	r0, [pc, #432]	; (8002574 <Vonalszenzor_operal+0x330>)
 80023c2:	f000 fb7d 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80023c6:	4b68      	ldr	r3, [pc, #416]	; (8002568 <Vonalszenzor_operal+0x324>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	f107 020c 	add.w	r2, r7, #12
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fb9d 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[15] = (uint8_t) eredmeny_16bit_temp[0];
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	330f      	adds	r3, #15
 80023da:	7b3a      	ldrb	r2, [r7, #12]
 80023dc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80023de:	4b63      	ldr	r3, [pc, #396]	; (800256c <Vonalszenzor_operal+0x328>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	f107 020c 	add.w	r2, r7, #12
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fb91 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[11] = (uint8_t) eredmeny_16bit_temp[0];
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	330b      	adds	r3, #11
 80023f2:	7b3a      	ldrb	r2, [r7, #12]
 80023f4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023f6:	4854      	ldr	r0, [pc, #336]	; (8002548 <Vonalszenzor_operal+0x304>)
 80023f8:	f000 fb62 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4h);
 80023fc:	485e      	ldr	r0, [pc, #376]	; (8002578 <Vonalszenzor_operal+0x334>)
 80023fe:	f000 fb5f 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002402:	4b59      	ldr	r3, [pc, #356]	; (8002568 <Vonalszenzor_operal+0x324>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	f107 020c 	add.w	r2, r7, #12
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fb7f 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[7] = (uint8_t) eredmeny_16bit_temp[0];
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3307      	adds	r3, #7
 8002416:	7b3a      	ldrb	r2, [r7, #12]
 8002418:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800241a:	4b54      	ldr	r3, [pc, #336]	; (800256c <Vonalszenzor_operal+0x328>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	f107 020c 	add.w	r2, r7, #12
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fb73 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[3] = (uint8_t) eredmeny_16bit_temp[0];
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3303      	adds	r3, #3
 800242e:	7b3a      	ldrb	r2, [r7, #12]
 8002430:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002432:	4845      	ldr	r0, [pc, #276]	; (8002548 <Vonalszenzor_operal+0x304>)
 8002434:	f000 fb44 	bl	8002ac0 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1h);
 8002438:	4850      	ldr	r0, [pc, #320]	; (800257c <Vonalszenzor_operal+0x338>)
 800243a:	f000 fb41 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800243e:	4b50      	ldr	r3, [pc, #320]	; (8002580 <Vonalszenzor_operal+0x33c>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	f107 020c 	add.w	r2, r7, #12
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fb61 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[30] = (uint8_t) eredmeny_16bit_temp[0];
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	331e      	adds	r3, #30
 8002452:	7b3a      	ldrb	r2, [r7, #12]
 8002454:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002456:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <Vonalszenzor_operal+0x340>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	f107 020c 	add.w	r2, r7, #12
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fb55 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[26] = (uint8_t) eredmeny_16bit_temp[0];
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	331a      	adds	r3, #26
 800246a:	7b3a      	ldrb	r2, [r7, #12]
 800246c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800246e:	4836      	ldr	r0, [pc, #216]	; (8002548 <Vonalszenzor_operal+0x304>)
 8002470:	f000 fb26 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2h);
 8002474:	4844      	ldr	r0, [pc, #272]	; (8002588 <Vonalszenzor_operal+0x344>)
 8002476:	f000 fb23 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <Vonalszenzor_operal+0x33c>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	f107 020c 	add.w	r2, r7, #12
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fb43 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[22] = (uint8_t) eredmeny_16bit_temp[0];
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3316      	adds	r3, #22
 800248e:	7b3a      	ldrb	r2, [r7, #12]
 8002490:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002492:	4b3c      	ldr	r3, [pc, #240]	; (8002584 <Vonalszenzor_operal+0x340>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	f107 020c 	add.w	r2, r7, #12
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fb37 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[18] = (uint8_t) eredmeny_16bit_temp[0];
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3312      	adds	r3, #18
 80024a6:	7b3a      	ldrb	r2, [r7, #12]
 80024a8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80024aa:	4827      	ldr	r0, [pc, #156]	; (8002548 <Vonalszenzor_operal+0x304>)
 80024ac:	f000 fb08 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3h);
 80024b0:	4836      	ldr	r0, [pc, #216]	; (800258c <Vonalszenzor_operal+0x348>)
 80024b2:	f000 fb05 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80024b6:	4b32      	ldr	r3, [pc, #200]	; (8002580 <Vonalszenzor_operal+0x33c>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	f107 020c 	add.w	r2, r7, #12
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fb25 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[14] = (uint8_t) eredmeny_16bit_temp[0];
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	330e      	adds	r3, #14
 80024ca:	7b3a      	ldrb	r2, [r7, #12]
 80024cc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80024ce:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <Vonalszenzor_operal+0x340>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	f107 020c 	add.w	r2, r7, #12
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fb19 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[10] = (uint8_t) eredmeny_16bit_temp[0];
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	330a      	adds	r3, #10
 80024e2:	7b3a      	ldrb	r2, [r7, #12]
 80024e4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80024e6:	4818      	ldr	r0, [pc, #96]	; (8002548 <Vonalszenzor_operal+0x304>)
 80024e8:	f000 faea 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4h);
 80024ec:	4828      	ldr	r0, [pc, #160]	; (8002590 <Vonalszenzor_operal+0x34c>)
 80024ee:	f000 fae7 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <Vonalszenzor_operal+0x33c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	f107 020c 	add.w	r2, r7, #12
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fb07 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[6] = (uint8_t) eredmeny_16bit_temp[0];
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3306      	adds	r3, #6
 8002506:	7b3a      	ldrb	r2, [r7, #12]
 8002508:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <Vonalszenzor_operal+0x340>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	f107 020c 	add.w	r2, r7, #12
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fafb 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[2] = (uint8_t) eredmeny_16bit_temp[0];
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3302      	adds	r3, #2
 800251e:	7b3a      	ldrb	r2, [r7, #12]
 8002520:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002522:	4809      	ldr	r0, [pc, #36]	; (8002548 <Vonalszenzor_operal+0x304>)
 8002524:	f000 facc 	bl	8002ac0 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1h);
 8002528:	481a      	ldr	r0, [pc, #104]	; (8002594 <Vonalszenzor_operal+0x350>)
 800252a:	f000 fac9 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <Vonalszenzor_operal+0x354>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	f107 020c 	add.w	r2, r7, #12
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fae9 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[29] = (uint8_t) eredmeny_16bit_temp[0];
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	331d      	adds	r3, #29
 8002542:	7b3a      	ldrb	r2, [r7, #12]
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e029      	b.n	800259c <Vonalszenzor_operal+0x358>
 8002548:	20000004 	.word	0x20000004
 800254c:	20000084 	.word	0x20000084
 8002550:	200001b1 	.word	0x200001b1
 8002554:	2000010d 	.word	0x2000010d
 8002558:	2000007c 	.word	0x2000007c
 800255c:	20000074 	.word	0x20000074
 8002560:	2000006c 	.word	0x2000006c
 8002564:	20000064 	.word	0x20000064
 8002568:	2000010a 	.word	0x2000010a
 800256c:	2000010e 	.word	0x2000010e
 8002570:	2000005c 	.word	0x2000005c
 8002574:	20000054 	.word	0x20000054
 8002578:	2000004c 	.word	0x2000004c
 800257c:	20000044 	.word	0x20000044
 8002580:	2000010b 	.word	0x2000010b
 8002584:	2000010f 	.word	0x2000010f
 8002588:	2000003c 	.word	0x2000003c
 800258c:	20000034 	.word	0x20000034
 8002590:	2000002c 	.word	0x2000002c
 8002594:	20000024 	.word	0x20000024
 8002598:	2000010c 	.word	0x2000010c
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800259c:	4bbe      	ldr	r3, [pc, #760]	; (8002898 <Vonalszenzor_operal+0x654>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	f107 020c 	add.w	r2, r7, #12
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fab2 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[25] = (uint8_t) eredmeny_16bit_temp[0];
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3319      	adds	r3, #25
 80025b0:	7b3a      	ldrb	r2, [r7, #12]
 80025b2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80025b4:	48b9      	ldr	r0, [pc, #740]	; (800289c <Vonalszenzor_operal+0x658>)
 80025b6:	f000 fa83 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2h);
 80025ba:	48b9      	ldr	r0, [pc, #740]	; (80028a0 <Vonalszenzor_operal+0x65c>)
 80025bc:	f000 fa80 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80025c0:	4bb8      	ldr	r3, [pc, #736]	; (80028a4 <Vonalszenzor_operal+0x660>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	f107 020c 	add.w	r2, r7, #12
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 faa0 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[21] = (uint8_t) eredmeny_16bit_temp[0];
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3315      	adds	r3, #21
 80025d4:	7b3a      	ldrb	r2, [r7, #12]
 80025d6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80025d8:	4baf      	ldr	r3, [pc, #700]	; (8002898 <Vonalszenzor_operal+0x654>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	f107 020c 	add.w	r2, r7, #12
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fa94 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[17] = (uint8_t) eredmeny_16bit_temp[0];
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3311      	adds	r3, #17
 80025ec:	7b3a      	ldrb	r2, [r7, #12]
 80025ee:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80025f0:	48aa      	ldr	r0, [pc, #680]	; (800289c <Vonalszenzor_operal+0x658>)
 80025f2:	f000 fa65 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3h);
 80025f6:	48ac      	ldr	r0, [pc, #688]	; (80028a8 <Vonalszenzor_operal+0x664>)
 80025f8:	f000 fa62 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80025fc:	4ba9      	ldr	r3, [pc, #676]	; (80028a4 <Vonalszenzor_operal+0x660>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	f107 020c 	add.w	r2, r7, #12
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fa82 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[13] = (uint8_t) eredmeny_16bit_temp[0];
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	330d      	adds	r3, #13
 8002610:	7b3a      	ldrb	r2, [r7, #12]
 8002612:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002614:	4ba0      	ldr	r3, [pc, #640]	; (8002898 <Vonalszenzor_operal+0x654>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f107 020c 	add.w	r2, r7, #12
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fa76 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[9] = (uint8_t) eredmeny_16bit_temp[0];
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3309      	adds	r3, #9
 8002628:	7b3a      	ldrb	r2, [r7, #12]
 800262a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800262c:	489b      	ldr	r0, [pc, #620]	; (800289c <Vonalszenzor_operal+0x658>)
 800262e:	f000 fa47 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4h);
 8002632:	489e      	ldr	r0, [pc, #632]	; (80028ac <Vonalszenzor_operal+0x668>)
 8002634:	f000 fa44 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002638:	4b9a      	ldr	r3, [pc, #616]	; (80028a4 <Vonalszenzor_operal+0x660>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	f107 020c 	add.w	r2, r7, #12
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fa64 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3305      	adds	r3, #5
 800264c:	7b3a      	ldrb	r2, [r7, #12]
 800264e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002650:	4b91      	ldr	r3, [pc, #580]	; (8002898 <Vonalszenzor_operal+0x654>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	f107 020c 	add.w	r2, r7, #12
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fa58 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[1] = (uint8_t) eredmeny_16bit_temp[0];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3301      	adds	r3, #1
 8002664:	7b3a      	ldrb	r2, [r7, #12]
 8002666:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002668:	488c      	ldr	r0, [pc, #560]	; (800289c <Vonalszenzor_operal+0x658>)
 800266a:	f000 fa29 	bl	8002ac0 <Vonalszenzor_minta_kuldes>

	//elso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1e);
 800266e:	4890      	ldr	r0, [pc, #576]	; (80028b0 <Vonalszenzor_operal+0x66c>)
 8002670:	f000 fa26 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002674:	4b8f      	ldr	r3, [pc, #572]	; (80028b4 <Vonalszenzor_operal+0x670>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	f107 020c 	add.w	r2, r7, #12
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fa46 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[1] = (uint8_t) eredmeny_16bit_temp[0];
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	7b3a      	ldrb	r2, [r7, #12]
 800268a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800268c:	4b8a      	ldr	r3, [pc, #552]	; (80028b8 <Vonalszenzor_operal+0x674>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	f107 020c 	add.w	r2, r7, #12
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fa3a 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[5] = (uint8_t) eredmeny_16bit_temp[0];
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	3305      	adds	r3, #5
 80026a0:	7b3a      	ldrb	r2, [r7, #12]
 80026a2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80026a4:	487d      	ldr	r0, [pc, #500]	; (800289c <Vonalszenzor_operal+0x658>)
 80026a6:	f000 fa0b 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2e);
 80026aa:	4884      	ldr	r0, [pc, #528]	; (80028bc <Vonalszenzor_operal+0x678>)
 80026ac:	f000 fa08 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80026b0:	4b80      	ldr	r3, [pc, #512]	; (80028b4 <Vonalszenzor_operal+0x670>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f107 020c 	add.w	r2, r7, #12
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fa28 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[9] = (uint8_t) eredmeny_16bit_temp[0];
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	3309      	adds	r3, #9
 80026c4:	7b3a      	ldrb	r2, [r7, #12]
 80026c6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80026c8:	4b7b      	ldr	r3, [pc, #492]	; (80028b8 <Vonalszenzor_operal+0x674>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f107 020c 	add.w	r2, r7, #12
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fa1c 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[13] = (uint8_t) eredmeny_16bit_temp[0];
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	330d      	adds	r3, #13
 80026dc:	7b3a      	ldrb	r2, [r7, #12]
 80026de:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80026e0:	486e      	ldr	r0, [pc, #440]	; (800289c <Vonalszenzor_operal+0x658>)
 80026e2:	f000 f9ed 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3e);
 80026e6:	4876      	ldr	r0, [pc, #472]	; (80028c0 <Vonalszenzor_operal+0x67c>)
 80026e8:	f000 f9ea 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80026ec:	4b71      	ldr	r3, [pc, #452]	; (80028b4 <Vonalszenzor_operal+0x670>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	f107 020c 	add.w	r2, r7, #12
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fa0a 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[17] = (uint8_t) eredmeny_16bit_temp[0];
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	3311      	adds	r3, #17
 8002700:	7b3a      	ldrb	r2, [r7, #12]
 8002702:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002704:	4b6c      	ldr	r3, [pc, #432]	; (80028b8 <Vonalszenzor_operal+0x674>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	f107 020c 	add.w	r2, r7, #12
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f9fe 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[21] = (uint8_t) eredmeny_16bit_temp[0];
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3315      	adds	r3, #21
 8002718:	7b3a      	ldrb	r2, [r7, #12]
 800271a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800271c:	485f      	ldr	r0, [pc, #380]	; (800289c <Vonalszenzor_operal+0x658>)
 800271e:	f000 f9cf 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4e);
 8002722:	4868      	ldr	r0, [pc, #416]	; (80028c4 <Vonalszenzor_operal+0x680>)
 8002724:	f000 f9cc 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002728:	4b62      	ldr	r3, [pc, #392]	; (80028b4 <Vonalszenzor_operal+0x670>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	f107 020c 	add.w	r2, r7, #12
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f9ec 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[25] = (uint8_t) eredmeny_16bit_temp[0];
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	3319      	adds	r3, #25
 800273c:	7b3a      	ldrb	r2, [r7, #12]
 800273e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002740:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <Vonalszenzor_operal+0x674>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	f107 020c 	add.w	r2, r7, #12
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f9e0 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[29] = (uint8_t) eredmeny_16bit_temp[0];
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	331d      	adds	r3, #29
 8002754:	7b3a      	ldrb	r2, [r7, #12]
 8002756:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002758:	4850      	ldr	r0, [pc, #320]	; (800289c <Vonalszenzor_operal+0x658>)
 800275a:	f000 f9b1 	bl	8002ac0 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1e);
 800275e:	485a      	ldr	r0, [pc, #360]	; (80028c8 <Vonalszenzor_operal+0x684>)
 8002760:	f000 f9ae 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <Vonalszenzor_operal+0x688>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	f107 020c 	add.w	r2, r7, #12
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f9ce 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[2] = (uint8_t) eredmeny_16bit_temp[0];
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	3302      	adds	r3, #2
 8002778:	7b3a      	ldrb	r2, [r7, #12]
 800277a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800277c:	4b54      	ldr	r3, [pc, #336]	; (80028d0 <Vonalszenzor_operal+0x68c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	f107 020c 	add.w	r2, r7, #12
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f9c2 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[6] = (uint8_t) eredmeny_16bit_temp[0];
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	3306      	adds	r3, #6
 8002790:	7b3a      	ldrb	r2, [r7, #12]
 8002792:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002794:	4841      	ldr	r0, [pc, #260]	; (800289c <Vonalszenzor_operal+0x658>)
 8002796:	f000 f993 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2e);
 800279a:	484e      	ldr	r0, [pc, #312]	; (80028d4 <Vonalszenzor_operal+0x690>)
 800279c:	f000 f990 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80027a0:	4b4a      	ldr	r3, [pc, #296]	; (80028cc <Vonalszenzor_operal+0x688>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	f107 020c 	add.w	r2, r7, #12
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f9b0 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[10] = (uint8_t) eredmeny_16bit_temp[0];
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	330a      	adds	r3, #10
 80027b4:	7b3a      	ldrb	r2, [r7, #12]
 80027b6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80027b8:	4b45      	ldr	r3, [pc, #276]	; (80028d0 <Vonalszenzor_operal+0x68c>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f107 020c 	add.w	r2, r7, #12
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f9a4 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[14] = (uint8_t) eredmeny_16bit_temp[0];
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	330e      	adds	r3, #14
 80027cc:	7b3a      	ldrb	r2, [r7, #12]
 80027ce:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027d0:	4832      	ldr	r0, [pc, #200]	; (800289c <Vonalszenzor_operal+0x658>)
 80027d2:	f000 f975 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3e);
 80027d6:	4840      	ldr	r0, [pc, #256]	; (80028d8 <Vonalszenzor_operal+0x694>)
 80027d8:	f000 f972 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80027dc:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <Vonalszenzor_operal+0x688>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	f107 020c 	add.w	r2, r7, #12
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f992 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[18] = (uint8_t) eredmeny_16bit_temp[0];
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	3312      	adds	r3, #18
 80027f0:	7b3a      	ldrb	r2, [r7, #12]
 80027f2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <Vonalszenzor_operal+0x68c>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	f107 020c 	add.w	r2, r7, #12
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f986 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[22] = (uint8_t) eredmeny_16bit_temp[0];
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	3316      	adds	r3, #22
 8002808:	7b3a      	ldrb	r2, [r7, #12]
 800280a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800280c:	4823      	ldr	r0, [pc, #140]	; (800289c <Vonalszenzor_operal+0x658>)
 800280e:	f000 f957 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4e);
 8002812:	4832      	ldr	r0, [pc, #200]	; (80028dc <Vonalszenzor_operal+0x698>)
 8002814:	f000 f954 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002818:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <Vonalszenzor_operal+0x688>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	f107 020c 	add.w	r2, r7, #12
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f974 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[26] = (uint8_t) eredmeny_16bit_temp[0];
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	331a      	adds	r3, #26
 800282c:	7b3a      	ldrb	r2, [r7, #12]
 800282e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <Vonalszenzor_operal+0x68c>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	f107 020c 	add.w	r2, r7, #12
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f968 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[30] = (uint8_t) eredmeny_16bit_temp[0];
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	331e      	adds	r3, #30
 8002844:	7b3a      	ldrb	r2, [r7, #12]
 8002846:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002848:	4814      	ldr	r0, [pc, #80]	; (800289c <Vonalszenzor_operal+0x658>)
 800284a:	f000 f939 	bl	8002ac0 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1e);
 800284e:	4824      	ldr	r0, [pc, #144]	; (80028e0 <Vonalszenzor_operal+0x69c>)
 8002850:	f000 f936 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002854:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <Vonalszenzor_operal+0x6a0>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	f107 020c 	add.w	r2, r7, #12
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f956 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[3] = (uint8_t) eredmeny_16bit_temp[0];
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	3303      	adds	r3, #3
 8002868:	7b3a      	ldrb	r2, [r7, #12]
 800286a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800286c:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <Vonalszenzor_operal+0x6a4>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	f107 020c 	add.w	r2, r7, #12
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f94a 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[7] = (uint8_t) eredmeny_16bit_temp[0];
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	3307      	adds	r3, #7
 8002880:	7b3a      	ldrb	r2, [r7, #12]
 8002882:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002884:	4805      	ldr	r0, [pc, #20]	; (800289c <Vonalszenzor_operal+0x658>)
 8002886:	f000 f91b 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2e);
 800288a:	4818      	ldr	r0, [pc, #96]	; (80028ec <Vonalszenzor_operal+0x6a8>)
 800288c:	f000 f918 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <Vonalszenzor_operal+0x6a0>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	e02c      	b.n	80028f0 <Vonalszenzor_operal+0x6ac>
 8002896:	bf00      	nop
 8002898:	20000110 	.word	0x20000110
 800289c:	20000004 	.word	0x20000004
 80028a0:	2000001c 	.word	0x2000001c
 80028a4:	2000010c 	.word	0x2000010c
 80028a8:	20000014 	.word	0x20000014
 80028ac:	2000000c 	.word	0x2000000c
 80028b0:	20000104 	.word	0x20000104
 80028b4:	200001b1 	.word	0x200001b1
 80028b8:	2000010d 	.word	0x2000010d
 80028bc:	200000fc 	.word	0x200000fc
 80028c0:	200000f4 	.word	0x200000f4
 80028c4:	200000ec 	.word	0x200000ec
 80028c8:	200000e4 	.word	0x200000e4
 80028cc:	2000010a 	.word	0x2000010a
 80028d0:	2000010e 	.word	0x2000010e
 80028d4:	200000dc 	.word	0x200000dc
 80028d8:	200000d4 	.word	0x200000d4
 80028dc:	200000cc 	.word	0x200000cc
 80028e0:	200000c4 	.word	0x200000c4
 80028e4:	2000010b 	.word	0x2000010b
 80028e8:	2000010f 	.word	0x2000010f
 80028ec:	200000bc 	.word	0x200000bc
 80028f0:	f107 020c 	add.w	r2, r7, #12
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f90a 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[11] = (uint8_t) eredmeny_16bit_temp[0];
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	330b      	adds	r3, #11
 8002900:	7b3a      	ldrb	r2, [r7, #12]
 8002902:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002904:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <Vonalszenzor_operal+0x850>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	f107 020c 	add.w	r2, r7, #12
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f8fe 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[15] = (uint8_t) eredmeny_16bit_temp[0];
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	330f      	adds	r3, #15
 8002918:	7b3a      	ldrb	r2, [r7, #12]
 800291a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800291c:	485e      	ldr	r0, [pc, #376]	; (8002a98 <Vonalszenzor_operal+0x854>)
 800291e:	f000 f8cf 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3e);
 8002922:	485e      	ldr	r0, [pc, #376]	; (8002a9c <Vonalszenzor_operal+0x858>)
 8002924:	f000 f8cc 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002928:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <Vonalszenzor_operal+0x85c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	f107 020c 	add.w	r2, r7, #12
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f8ec 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[19] = (uint8_t) eredmeny_16bit_temp[0];
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	3313      	adds	r3, #19
 800293c:	7b3a      	ldrb	r2, [r7, #12]
 800293e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002940:	4b54      	ldr	r3, [pc, #336]	; (8002a94 <Vonalszenzor_operal+0x850>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	f107 020c 	add.w	r2, r7, #12
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f8e0 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[23] = (uint8_t) eredmeny_16bit_temp[0];
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	3317      	adds	r3, #23
 8002954:	7b3a      	ldrb	r2, [r7, #12]
 8002956:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002958:	484f      	ldr	r0, [pc, #316]	; (8002a98 <Vonalszenzor_operal+0x854>)
 800295a:	f000 f8b1 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4e);
 800295e:	4851      	ldr	r0, [pc, #324]	; (8002aa4 <Vonalszenzor_operal+0x860>)
 8002960:	f000 f8ae 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002964:	4b4e      	ldr	r3, [pc, #312]	; (8002aa0 <Vonalszenzor_operal+0x85c>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	f107 020c 	add.w	r2, r7, #12
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f8ce 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[27] = (uint8_t) eredmeny_16bit_temp[0];
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	331b      	adds	r3, #27
 8002978:	7b3a      	ldrb	r2, [r7, #12]
 800297a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800297c:	4b45      	ldr	r3, [pc, #276]	; (8002a94 <Vonalszenzor_operal+0x850>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	f107 020c 	add.w	r2, r7, #12
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f8c2 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[31] = (uint8_t) eredmeny_16bit_temp[0];
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	331f      	adds	r3, #31
 8002990:	7b3a      	ldrb	r2, [r7, #12]
 8002992:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002994:	4840      	ldr	r0, [pc, #256]	; (8002a98 <Vonalszenzor_operal+0x854>)
 8002996:	f000 f893 	bl	8002ac0 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1e);
 800299a:	4843      	ldr	r0, [pc, #268]	; (8002aa8 <Vonalszenzor_operal+0x864>)
 800299c:	f000 f890 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80029a0:	4b42      	ldr	r3, [pc, #264]	; (8002aac <Vonalszenzor_operal+0x868>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	f107 020c 	add.w	r2, r7, #12
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f8b0 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[4] = (uint8_t) eredmeny_16bit_temp[0];
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	3304      	adds	r3, #4
 80029b4:	7b3a      	ldrb	r2, [r7, #12]
 80029b6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80029b8:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <Vonalszenzor_operal+0x86c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	f107 020c 	add.w	r2, r7, #12
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f8a4 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[8] = (uint8_t) eredmeny_16bit_temp[0];
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	3308      	adds	r3, #8
 80029cc:	7b3a      	ldrb	r2, [r7, #12]
 80029ce:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80029d0:	4831      	ldr	r0, [pc, #196]	; (8002a98 <Vonalszenzor_operal+0x854>)
 80029d2:	f000 f875 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2e);
 80029d6:	4837      	ldr	r0, [pc, #220]	; (8002ab4 <Vonalszenzor_operal+0x870>)
 80029d8:	f000 f872 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <Vonalszenzor_operal+0x868>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f107 020c 	add.w	r2, r7, #12
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f892 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[12] = (uint8_t) eredmeny_16bit_temp[0];
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	7b3a      	ldrb	r2, [r7, #12]
 80029f2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80029f4:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <Vonalszenzor_operal+0x86c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	f107 020c 	add.w	r2, r7, #12
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f886 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[16] = (uint8_t) eredmeny_16bit_temp[0];
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	3310      	adds	r3, #16
 8002a08:	7b3a      	ldrb	r2, [r7, #12]
 8002a0a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002a0c:	4822      	ldr	r0, [pc, #136]	; (8002a98 <Vonalszenzor_operal+0x854>)
 8002a0e:	f000 f857 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3e);
 8002a12:	4829      	ldr	r0, [pc, #164]	; (8002ab8 <Vonalszenzor_operal+0x874>)
 8002a14:	f000 f854 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002a18:	4b24      	ldr	r3, [pc, #144]	; (8002aac <Vonalszenzor_operal+0x868>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	f107 020c 	add.w	r2, r7, #12
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f874 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[20] = (uint8_t) eredmeny_16bit_temp[0];
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	3314      	adds	r3, #20
 8002a2c:	7b3a      	ldrb	r2, [r7, #12]
 8002a2e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002a30:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <Vonalszenzor_operal+0x86c>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	f107 020c 	add.w	r2, r7, #12
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f868 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[24] = (uint8_t) eredmeny_16bit_temp[0];
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	3318      	adds	r3, #24
 8002a44:	7b3a      	ldrb	r2, [r7, #12]
 8002a46:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002a48:	4813      	ldr	r0, [pc, #76]	; (8002a98 <Vonalszenzor_operal+0x854>)
 8002a4a:	f000 f839 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4e);
 8002a4e:	481b      	ldr	r0, [pc, #108]	; (8002abc <Vonalszenzor_operal+0x878>)
 8002a50:	f000 f836 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <Vonalszenzor_operal+0x868>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	f107 020c 	add.w	r2, r7, #12
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 f856 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[28] = (uint8_t) eredmeny_16bit_temp[0];
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	331c      	adds	r3, #28
 8002a68:	7b3a      	ldrb	r2, [r7, #12]
 8002a6a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <Vonalszenzor_operal+0x86c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	f107 020c 	add.w	r2, r7, #12
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f84a 	bl	8002b10 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[32] = (uint8_t) eredmeny_16bit_temp[0];
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	3320      	adds	r3, #32
 8002a80:	7b3a      	ldrb	r2, [r7, #12]
 8002a82:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002a84:	4804      	ldr	r0, [pc, #16]	; (8002a98 <Vonalszenzor_operal+0x854>)
 8002a86:	f000 f81b 	bl	8002ac0 <Vonalszenzor_minta_kuldes>
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000010f 	.word	0x2000010f
 8002a98:	20000004 	.word	0x20000004
 8002a9c:	200000b4 	.word	0x200000b4
 8002aa0:	2000010b 	.word	0x2000010b
 8002aa4:	200000ac 	.word	0x200000ac
 8002aa8:	200000a4 	.word	0x200000a4
 8002aac:	2000010c 	.word	0x2000010c
 8002ab0:	20000110 	.word	0x20000110
 8002ab4:	2000009c 	.word	0x2000009c
 8002ab8:	20000094 	.word	0x20000094
 8002abc:	2000008c 	.word	0x2000008c

08002ac0 <Vonalszenzor_minta_kuldes>:

void Vonalszenzor_minta_kuldes(uint8_t* minta) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	// PC4: Von_latch1  0
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2110      	movs	r1, #16
 8002acc:	480d      	ldr	r0, [pc, #52]	; (8002b04 <Vonalszenzor_minta_kuldes+0x44>)
 8002ace:	f001 ffb9 	bl	8004a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// PB1: Von_latch2  0
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	480c      	ldr	r0, [pc, #48]	; (8002b08 <Vonalszenzor_minta_kuldes+0x48>)
 8002ad8:	f001 ffb4 	bl	8004a44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, minta, 6, 100);				// minta kikuldes
 8002adc:	2364      	movs	r3, #100	; 0x64
 8002ade:	2206      	movs	r2, #6
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	480a      	ldr	r0, [pc, #40]	; (8002b0c <Vonalszenzor_minta_kuldes+0x4c>)
 8002ae4:	f004 f8e4 	bl	8006cb0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		// PC4: Von_latch1  1
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2110      	movs	r1, #16
 8002aec:	4805      	ldr	r0, [pc, #20]	; (8002b04 <Vonalszenzor_minta_kuldes+0x44>)
 8002aee:	f001 ffa9 	bl	8004a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// PB1: Von_latch2  1
 8002af2:	2201      	movs	r2, #1
 8002af4:	2102      	movs	r1, #2
 8002af6:	4804      	ldr	r0, [pc, #16]	; (8002b08 <Vonalszenzor_minta_kuldes+0x48>)
 8002af8:	f001 ffa4 	bl	8004a44 <HAL_GPIO_WritePin>
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40020400 	.word	0x40020400
 8002b0c:	20000260 	.word	0x20000260

08002b10 <Vonalszenzor_meres_kiolvasas>:

void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[2]= {chanel,0};
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	733b      	strb	r3, [r7, #12]
 8002b20:	2300      	movs	r3, #0
 8002b22:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, temp1, 2, 100);
 8002b24:	f107 010c 	add.w	r1, r7, #12
 8002b28:	2364      	movs	r3, #100	; 0x64
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	4806      	ldr	r0, [pc, #24]	; (8002b48 <Vonalszenzor_meres_kiolvasas+0x38>)
 8002b2e:	f004 f8bf 	bl	8006cb0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, eredmeny, 2, 100);
 8002b32:	2364      	movs	r3, #100	; 0x64
 8002b34:	2202      	movs	r2, #2
 8002b36:	6839      	ldr	r1, [r7, #0]
 8002b38:	4803      	ldr	r0, [pc, #12]	; (8002b48 <Vonalszenzor_meres_kiolvasas+0x38>)
 8002b3a:	f004 fa05 	bl	8006f48 <HAL_SPI_Receive>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000578 	.word	0x20000578

08002b4c <Kovetendo_vonal_valaszto>:

void Kovetendo_vonal_valaszto(int* elso, int* hatso) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
	if(vonalak_h[0] < 33)				//kulonben '-' van benne, ami 45
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <Kovetendo_vonal_valaszto+0x40>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d805      	bhi.n	8002b6a <Kovetendo_vonal_valaszto+0x1e>
		*elso = vonalak_h[0] - 16;		//ez elvileg jo 1 - 1 erzekelt vonalra
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <Kovetendo_vonal_valaszto+0x40>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	f1a3 0210 	sub.w	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	601a      	str	r2, [r3, #0]
	if(vonalak_e[0] < 33)
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <Kovetendo_vonal_valaszto+0x44>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d805      	bhi.n	8002b7e <Kovetendo_vonal_valaszto+0x32>
		*hatso = vonalak_e[0] - 16;
 8002b72:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <Kovetendo_vonal_valaszto+0x44>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	f1a3 0210 	sub.w	r2, r3, #16
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	601a      	str	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000128 	.word	0x20000128
 8002b90:	20000130 	.word	0x20000130

08002b94 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba4:	d109      	bne.n	8002bba <HAL_GPIO_EXTI_Callback+0x26>
		btnEnable = !btnEnable;
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_GPIO_EXTI_Callback+0x34>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <HAL_GPIO_EXTI_Callback+0x34>)
 8002bb8:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	//LED felvilagitasa
	}
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	200001b0 	.word	0x200001b0

08002bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd0:	b672      	cpsid	i
}
 8002bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002bd4:	e7fe      	b.n	8002bd4 <Error_Handler+0x8>

08002bd6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <HAL_MspInit+0x4c>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4a0f      	ldr	r2, [pc, #60]	; (8002c38 <HAL_MspInit+0x4c>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <HAL_MspInit+0x4c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_MspInit+0x4c>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4a08      	ldr	r2, [pc, #32]	; (8002c38 <HAL_MspInit+0x4c>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_MspInit+0x4c>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c2a:	2007      	movs	r0, #7
 8002c2c:	f000 fe8c 	bl	8003948 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800

08002c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b090      	sub	sp, #64	; 0x40
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6b      	ldr	r2, [pc, #428]	; (8002e08 <HAL_I2C_MspInit+0x1cc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d12d      	bne.n	8002cba <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c62:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a69      	ldr	r2, [pc, #420]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c80:	2312      	movs	r3, #18
 8002c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c8c:	2304      	movs	r3, #4
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c94:	4619      	mov	r1, r3
 8002c96:	485e      	ldr	r0, [pc, #376]	; (8002e10 <HAL_I2C_MspInit+0x1d4>)
 8002c98:	f001 fbb0 	bl	80043fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca0:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	4a59      	ldr	r2, [pc, #356]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002ca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002caa:	6413      	str	r3, [r2, #64]	; 0x40
 8002cac:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002cb8:	e0a2      	b.n	8002e00 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a55      	ldr	r2, [pc, #340]	; (8002e14 <HAL_I2C_MspInit+0x1d8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d14c      	bne.n	8002d5e <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4a4f      	ldr	r2, [pc, #316]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002cce:	f043 0302 	orr.w	r3, r3, #2
 8002cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd4:	4b4d      	ldr	r3, [pc, #308]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	4b49      	ldr	r3, [pc, #292]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	4a48      	ldr	r2, [pc, #288]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002cea:	f043 0304 	orr.w	r3, r3, #4
 8002cee:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf0:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d02:	2312      	movs	r3, #18
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d0e:	2304      	movs	r3, #4
 8002d10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d16:	4619      	mov	r1, r3
 8002d18:	483d      	ldr	r0, [pc, #244]	; (8002e10 <HAL_I2C_MspInit+0x1d4>)
 8002d1a:	f001 fb6f 	bl	80043fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d24:	2312      	movs	r3, #18
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d30:	2304      	movs	r3, #4
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4837      	ldr	r0, [pc, #220]	; (8002e18 <HAL_I2C_MspInit+0x1dc>)
 8002d3c:	f001 fb5e 	bl	80043fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d40:	2300      	movs	r3, #0
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a30      	ldr	r2, [pc, #192]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002d4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d50:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
}
 8002d5c:	e050      	b.n	8002e00 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a2e      	ldr	r2, [pc, #184]	; (8002e1c <HAL_I2C_MspInit+0x1e0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d14b      	bne.n	8002e00 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	4a26      	ldr	r2, [pc, #152]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	6313      	str	r3, [r2, #48]	; 0x30
 8002d78:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	4a1f      	ldr	r2, [pc, #124]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6313      	str	r3, [r2, #48]	; 0x30
 8002d94:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da6:	2312      	movs	r3, #18
 8002da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dae:	2303      	movs	r3, #3
 8002db0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002db2:	2304      	movs	r3, #4
 8002db4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4816      	ldr	r0, [pc, #88]	; (8002e18 <HAL_I2C_MspInit+0x1dc>)
 8002dbe:	f001 fb1d 	bl	80043fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dc8:	2312      	movs	r3, #18
 8002dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4810      	ldr	r0, [pc, #64]	; (8002e20 <HAL_I2C_MspInit+0x1e4>)
 8002de0:	f001 fb0c 	bl	80043fc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	4a07      	ldr	r2, [pc, #28]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002dee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002df2:	6413      	str	r3, [r2, #64]	; 0x40
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_I2C_MspInit+0x1d0>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3740      	adds	r7, #64	; 0x40
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40005400 	.word	0x40005400
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40020400 	.word	0x40020400
 8002e14:	40005800 	.word	0x40005800
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40005c00 	.word	0x40005c00
 8002e20:	40020000 	.word	0x40020000

08002e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b090      	sub	sp, #64	; 0x40
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a98      	ldr	r2, [pc, #608]	; (80030a4 <HAL_SPI_MspInit+0x280>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d12c      	bne.n	8002ea0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4a:	4b97      	ldr	r3, [pc, #604]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	4a96      	ldr	r2, [pc, #600]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e54:	6453      	str	r3, [r2, #68]	; 0x44
 8002e56:	4b94      	ldr	r3, [pc, #592]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e60:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	4b90      	ldr	r3, [pc, #576]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a8f      	ldr	r2, [pc, #572]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b8d      	ldr	r3, [pc, #564]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e7e:	23e0      	movs	r3, #224	; 0xe0
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e8e:	2305      	movs	r3, #5
 8002e90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e96:	4619      	mov	r1, r3
 8002e98:	4884      	ldr	r0, [pc, #528]	; (80030ac <HAL_SPI_MspInit+0x288>)
 8002e9a:	f001 faaf 	bl	80043fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e9e:	e0fd      	b.n	800309c <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a82      	ldr	r2, [pc, #520]	; (80030b0 <HAL_SPI_MspInit+0x28c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d14b      	bne.n	8002f42 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
 8002eae:	4b7e      	ldr	r3, [pc, #504]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4a7d      	ldr	r2, [pc, #500]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eba:	4b7b      	ldr	r3, [pc, #492]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec2:	623b      	str	r3, [r7, #32]
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	4b77      	ldr	r3, [pc, #476]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	4a76      	ldr	r2, [pc, #472]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed6:	4b74      	ldr	r3, [pc, #464]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	4b70      	ldr	r3, [pc, #448]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	4a6f      	ldr	r2, [pc, #444]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef2:	4b6d      	ldr	r3, [pc, #436]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002efe:	2302      	movs	r3, #2
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f02:	2302      	movs	r3, #2
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002f0e:	2307      	movs	r3, #7
 8002f10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f16:	4619      	mov	r1, r3
 8002f18:	4866      	ldr	r0, [pc, #408]	; (80030b4 <HAL_SPI_MspInit+0x290>)
 8002f1a:	f001 fa6f 	bl	80043fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f30:	2305      	movs	r3, #5
 8002f32:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f38:	4619      	mov	r1, r3
 8002f3a:	485f      	ldr	r0, [pc, #380]	; (80030b8 <HAL_SPI_MspInit+0x294>)
 8002f3c:	f001 fa5e 	bl	80043fc <HAL_GPIO_Init>
}
 8002f40:	e0ac      	b.n	800309c <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI3)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a5d      	ldr	r2, [pc, #372]	; (80030bc <HAL_SPI_MspInit+0x298>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	f040 80a7 	bne.w	800309c <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	4b55      	ldr	r3, [pc, #340]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4a54      	ldr	r2, [pc, #336]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5e:	4b52      	ldr	r3, [pc, #328]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	4b4e      	ldr	r3, [pc, #312]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a4d      	ldr	r2, [pc, #308]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002f74:	f043 0302 	orr.w	r3, r3, #2
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b4b      	ldr	r3, [pc, #300]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a46      	ldr	r2, [pc, #280]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b44      	ldr	r3, [pc, #272]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a3f      	ldr	r2, [pc, #252]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002fac:	f043 0304 	orr.w	r3, r3, #4
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b3d      	ldr	r3, [pc, #244]	; (80030a8 <HAL_SPI_MspInit+0x284>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002fce:	2307      	movs	r3, #7
 8002fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4837      	ldr	r0, [pc, #220]	; (80030b8 <HAL_SPI_MspInit+0x294>)
 8002fda:	f001 fa0f 	bl	80043fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fec:	2303      	movs	r3, #3
 8002fee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ff0:	2306      	movs	r3, #6
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	482c      	ldr	r0, [pc, #176]	; (80030ac <HAL_SPI_MspInit+0x288>)
 8002ffc:	f001 f9fe 	bl	80043fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003006:	2302      	movs	r3, #2
 8003008:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003012:	2306      	movs	r3, #6
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800301a:	4619      	mov	r1, r3
 800301c:	4825      	ldr	r0, [pc, #148]	; (80030b4 <HAL_SPI_MspInit+0x290>)
 800301e:	f001 f9ed 	bl	80043fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003022:	2310      	movs	r3, #16
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003026:	2302      	movs	r3, #2
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302e:	2303      	movs	r3, #3
 8003030:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003032:	2306      	movs	r3, #6
 8003034:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800303a:	4619      	mov	r1, r3
 800303c:	481e      	ldr	r0, [pc, #120]	; (80030b8 <HAL_SPI_MspInit+0x294>)
 800303e:	f001 f9dd 	bl	80043fc <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8003042:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 8003044:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_SPI_MspInit+0x2a0>)
 8003046:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 800304a:	2200      	movs	r2, #0
 800304c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 8003050:	2240      	movs	r2, #64	; 0x40
 8003052:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 8003056:	2200      	movs	r2, #0
 8003058:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800305a:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 800305c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003060:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 8003064:	2200      	movs	r2, #0
 8003066:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 800306a:	2200      	movs	r2, #0
 800306c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 8003070:	2200      	movs	r2, #0
 8003072:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 8003076:	2200      	movs	r2, #0
 8003078:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 800307c:	2200      	movs	r2, #0
 800307e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003080:	480f      	ldr	r0, [pc, #60]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 8003082:	f000 fcd1 	bl	8003a28 <HAL_DMA_Init>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 800308c:	f7ff fd9e 	bl	8002bcc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 8003094:	649a      	str	r2, [r3, #72]	; 0x48
 8003096:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_SPI_MspInit+0x29c>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800309c:	bf00      	nop
 800309e:	3740      	adds	r7, #64	; 0x40
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40013000 	.word	0x40013000
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40020000 	.word	0x40020000
 80030b0:	40003800 	.word	0x40003800
 80030b4:	40020800 	.word	0x40020800
 80030b8:	40020400 	.word	0x40020400
 80030bc:	40003c00 	.word	0x40003c00
 80030c0:	20000490 	.word	0x20000490
 80030c4:	40026088 	.word	0x40026088

080030c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d8:	d116      	bne.n	8003108 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HAL_TIM_Base_MspInit+0xb8>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a27      	ldr	r2, [pc, #156]	; (8003180 <HAL_TIM_Base_MspInit+0xb8>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_TIM_Base_MspInit+0xb8>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2100      	movs	r1, #0
 80030fa:	201c      	movs	r0, #28
 80030fc:	f000 fc44 	bl	8003988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003100:	201c      	movs	r0, #28
 8003102:	f000 fc6d 	bl	80039e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003106:	e036      	b.n	8003176 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <HAL_TIM_Base_MspInit+0xbc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d116      	bne.n	8003140 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <HAL_TIM_Base_MspInit+0xb8>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	4a19      	ldr	r2, [pc, #100]	; (8003180 <HAL_TIM_Base_MspInit+0xb8>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	6453      	str	r3, [r2, #68]	; 0x44
 8003122:	4b17      	ldr	r3, [pc, #92]	; (8003180 <HAL_TIM_Base_MspInit+0xb8>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 800312e:	2201      	movs	r2, #1
 8003130:	2100      	movs	r1, #0
 8003132:	202b      	movs	r0, #43	; 0x2b
 8003134:	f000 fc28 	bl	8003988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003138:	202b      	movs	r0, #43	; 0x2b
 800313a:	f000 fc51 	bl	80039e0 <HAL_NVIC_EnableIRQ>
}
 800313e:	e01a      	b.n	8003176 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM12)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a10      	ldr	r2, [pc, #64]	; (8003188 <HAL_TIM_Base_MspInit+0xc0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d115      	bne.n	8003176 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <HAL_TIM_Base_MspInit+0xb8>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <HAL_TIM_Base_MspInit+0xb8>)
 8003154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_TIM_Base_MspInit+0xb8>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8003166:	2201      	movs	r2, #1
 8003168:	2100      	movs	r1, #0
 800316a:	202b      	movs	r0, #43	; 0x2b
 800316c:	f000 fc0c 	bl	8003988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003170:	202b      	movs	r0, #43	; 0x2b
 8003172:	f000 fc35 	bl	80039e0 <HAL_NVIC_EnableIRQ>
}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	40010400 	.word	0x40010400
 8003188:	40001800 	.word	0x40001800

0800318c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <HAL_TIM_PWM_MspInit+0x48>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d115      	bne.n	80031ca <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <HAL_TIM_PWM_MspInit+0x4c>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <HAL_TIM_PWM_MspInit+0x4c>)
 80031a8:	f043 0302 	orr.w	r3, r3, #2
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_TIM_PWM_MspInit+0x4c>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	201d      	movs	r0, #29
 80031c0:	f000 fbe2 	bl	8003988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031c4:	201d      	movs	r0, #29
 80031c6:	f000 fc0b 	bl	80039e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40023800 	.word	0x40023800

080031dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a19      	ldr	r2, [pc, #100]	; (8003260 <HAL_TIM_Encoder_MspInit+0x84>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d12b      	bne.n	8003256 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	4b18      	ldr	r3, [pc, #96]	; (8003264 <HAL_TIM_Encoder_MspInit+0x88>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4a17      	ldr	r2, [pc, #92]	; (8003264 <HAL_TIM_Encoder_MspInit+0x88>)
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	6413      	str	r3, [r2, #64]	; 0x40
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <HAL_TIM_Encoder_MspInit+0x88>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_TIM_Encoder_MspInit+0x88>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <HAL_TIM_Encoder_MspInit+0x88>)
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <HAL_TIM_Encoder_MspInit+0x88>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003236:	23c0      	movs	r3, #192	; 0xc0
 8003238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323a:	2302      	movs	r3, #2
 800323c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003242:	2300      	movs	r3, #0
 8003244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003246:	2302      	movs	r3, #2
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324a:	f107 0314 	add.w	r3, r7, #20
 800324e:	4619      	mov	r1, r3
 8003250:	4805      	ldr	r0, [pc, #20]	; (8003268 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003252:	f001 f8d3 	bl	80043fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003256:	bf00      	nop
 8003258:	3728      	adds	r7, #40	; 0x28
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40000800 	.word	0x40000800
 8003264:	40023800 	.word	0x40023800
 8003268:	40020400 	.word	0x40020400

0800326c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a37      	ldr	r2, [pc, #220]	; (8003368 <HAL_TIM_MspPostInit+0xfc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d11e      	bne.n	80032cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <HAL_TIM_MspPostInit+0x100>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a35      	ldr	r2, [pc, #212]	; (800336c <HAL_TIM_MspPostInit+0x100>)
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b33      	ldr	r3, [pc, #204]	; (800336c <HAL_TIM_MspPostInit+0x100>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032aa:	2340      	movs	r3, #64	; 0x40
 80032ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2300      	movs	r3, #0
 80032b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032ba:	2302      	movs	r3, #2
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032be:	f107 0314 	add.w	r3, r7, #20
 80032c2:	4619      	mov	r1, r3
 80032c4:	482a      	ldr	r0, [pc, #168]	; (8003370 <HAL_TIM_MspPostInit+0x104>)
 80032c6:	f001 f899 	bl	80043fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80032ca:	e048      	b.n	800335e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a28      	ldr	r2, [pc, #160]	; (8003374 <HAL_TIM_MspPostInit+0x108>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d11f      	bne.n	8003316 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_TIM_MspPostInit+0x100>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a23      	ldr	r2, [pc, #140]	; (800336c <HAL_TIM_MspPostInit+0x100>)
 80032e0:	f043 0304 	orr.w	r3, r3, #4
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b21      	ldr	r3, [pc, #132]	; (800336c <HAL_TIM_MspPostInit+0x100>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80032f2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80032f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f8:	2302      	movs	r3, #2
 80032fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003304:	2303      	movs	r3, #3
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	4619      	mov	r1, r3
 800330e:	4818      	ldr	r0, [pc, #96]	; (8003370 <HAL_TIM_MspPostInit+0x104>)
 8003310:	f001 f874 	bl	80043fc <HAL_GPIO_Init>
}
 8003314:	e023      	b.n	800335e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a17      	ldr	r2, [pc, #92]	; (8003378 <HAL_TIM_MspPostInit+0x10c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d11e      	bne.n	800335e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_TIM_MspPostInit+0x100>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	4a10      	ldr	r2, [pc, #64]	; (800336c <HAL_TIM_MspPostInit+0x100>)
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	6313      	str	r3, [r2, #48]	; 0x30
 8003330:	4b0e      	ldr	r3, [pc, #56]	; (800336c <HAL_TIM_MspPostInit+0x100>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800333c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	2302      	movs	r3, #2
 8003344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334a:	2300      	movs	r3, #0
 800334c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800334e:	2309      	movs	r3, #9
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003352:	f107 0314 	add.w	r3, r7, #20
 8003356:	4619      	mov	r1, r3
 8003358:	4808      	ldr	r0, [pc, #32]	; (800337c <HAL_TIM_MspPostInit+0x110>)
 800335a:	f001 f84f 	bl	80043fc <HAL_GPIO_Init>
}
 800335e:	bf00      	nop
 8003360:	3728      	adds	r7, #40	; 0x28
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40000400 	.word	0x40000400
 800336c:	40023800 	.word	0x40023800
 8003370:	40020800 	.word	0x40020800
 8003374:	40010400 	.word	0x40010400
 8003378:	40001800 	.word	0x40001800
 800337c:	40020400 	.word	0x40020400

08003380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08e      	sub	sp, #56	; 0x38
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a5f      	ldr	r2, [pc, #380]	; (800351c <HAL_UART_MspInit+0x19c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d153      	bne.n	800344a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	623b      	str	r3, [r7, #32]
 80033a6:	4b5e      	ldr	r3, [pc, #376]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a5d      	ldr	r2, [pc, #372]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80033ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
 80033b2:	4b5b      	ldr	r3, [pc, #364]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	4b57      	ldr	r3, [pc, #348]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	4a56      	ldr	r2, [pc, #344]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6313      	str	r3, [r2, #48]	; 0x30
 80033ce:	4b54      	ldr	r3, [pc, #336]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	4b50      	ldr	r3, [pc, #320]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a4f      	ldr	r2, [pc, #316]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b4d      	ldr	r3, [pc, #308]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033f6:	2301      	movs	r3, #1
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003402:	2303      	movs	r3, #3
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003406:	2308      	movs	r3, #8
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340e:	4619      	mov	r1, r3
 8003410:	4844      	ldr	r0, [pc, #272]	; (8003524 <HAL_UART_MspInit+0x1a4>)
 8003412:	f000 fff3 	bl	80043fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003416:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003420:	2301      	movs	r3, #1
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003424:	2303      	movs	r3, #3
 8003426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003428:	2308      	movs	r3, #8
 800342a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003430:	4619      	mov	r1, r3
 8003432:	483d      	ldr	r0, [pc, #244]	; (8003528 <HAL_UART_MspInit+0x1a8>)
 8003434:	f000 ffe2 	bl	80043fc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003438:	2200      	movs	r2, #0
 800343a:	2100      	movs	r1, #0
 800343c:	2034      	movs	r0, #52	; 0x34
 800343e:	f000 faa3 	bl	8003988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003442:	2034      	movs	r0, #52	; 0x34
 8003444:	f000 facc 	bl	80039e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003448:	e063      	b.n	8003512 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a37      	ldr	r2, [pc, #220]	; (800352c <HAL_UART_MspInit+0x1ac>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d12d      	bne.n	80034b0 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	4b31      	ldr	r3, [pc, #196]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 800345a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345c:	4a30      	ldr	r2, [pc, #192]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 800345e:	f043 0310 	orr.w	r3, r3, #16
 8003462:	6453      	str	r3, [r2, #68]	; 0x44
 8003464:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003470:	2300      	movs	r3, #0
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	4a29      	ldr	r2, [pc, #164]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6313      	str	r3, [r2, #48]	; 0x30
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800348c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349a:	2303      	movs	r3, #3
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800349e:	2307      	movs	r3, #7
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a6:	4619      	mov	r1, r3
 80034a8:	481e      	ldr	r0, [pc, #120]	; (8003524 <HAL_UART_MspInit+0x1a4>)
 80034aa:	f000 ffa7 	bl	80043fc <HAL_GPIO_Init>
}
 80034ae:	e030      	b.n	8003512 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <HAL_UART_MspInit+0x1b0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d12b      	bne.n	8003512 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	4b18      	ldr	r3, [pc, #96]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	4a17      	ldr	r2, [pc, #92]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ca:	4b15      	ldr	r3, [pc, #84]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	4b11      	ldr	r3, [pc, #68]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	4a10      	ldr	r2, [pc, #64]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6313      	str	r3, [r2, #48]	; 0x30
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_UART_MspInit+0x1a0>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80034f2:	230c      	movs	r3, #12
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fe:	2303      	movs	r3, #3
 8003500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003502:	2307      	movs	r3, #7
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800350a:	4619      	mov	r1, r3
 800350c:	4805      	ldr	r0, [pc, #20]	; (8003524 <HAL_UART_MspInit+0x1a4>)
 800350e:	f000 ff75 	bl	80043fc <HAL_GPIO_Init>
}
 8003512:	bf00      	nop
 8003514:	3738      	adds	r7, #56	; 0x38
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40004c00 	.word	0x40004c00
 8003520:	40023800 	.word	0x40023800
 8003524:	40020000 	.word	0x40020000
 8003528:	40020800 	.word	0x40020800
 800352c:	40011000 	.word	0x40011000
 8003530:	40004400 	.word	0x40004400

08003534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003538:	e7fe      	b.n	8003538 <NMI_Handler+0x4>

0800353a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800353e:	e7fe      	b.n	800353e <HardFault_Handler+0x4>

08003540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003544:	e7fe      	b.n	8003544 <MemManage_Handler+0x4>

08003546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003546:	b480      	push	{r7}
 8003548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800354a:	e7fe      	b.n	800354a <BusFault_Handler+0x4>

0800354c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003550:	e7fe      	b.n	8003550 <UsageFault_Handler+0x4>

08003552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003580:	f000 f8ce 	bl	8003720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	bd80      	pop	{r7, pc}

08003588 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800358c:	4802      	ldr	r0, [pc, #8]	; (8003598 <DMA1_Stream5_IRQHandler+0x10>)
 800358e:	f000 fcf9 	bl	8003f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000490 	.word	0x20000490

0800359c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <TIM2_IRQHandler+0x10>)
 80035a2:	f004 fe97 	bl	80082d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200005d0 	.word	0x200005d0

080035b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <TIM3_IRQHandler+0x10>)
 80035b6:	f004 fe8d 	bl	80082d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200003f0 	.word	0x200003f0

080035c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80035c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80035cc:	f001 fa6c 	bl	8004aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80035d8:	4803      	ldr	r0, [pc, #12]	; (80035e8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80035da:	f004 fe7b 	bl	80082d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80035de:	4803      	ldr	r0, [pc, #12]	; (80035ec <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80035e0:	f004 fe78 	bl	80082d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200002b8 	.word	0x200002b8
 80035ec:	2000065c 	.word	0x2000065c

080035f0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80035f4:	4802      	ldr	r0, [pc, #8]	; (8003600 <UART4_IRQHandler+0x10>)
 80035f6:	f006 fb85 	bl	8009d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000534 	.word	0x20000534

08003604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <SystemInit+0x20>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	4a05      	ldr	r2, [pc, #20]	; (8003624 <SystemInit+0x20>)
 8003610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003660 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800362c:	480d      	ldr	r0, [pc, #52]	; (8003664 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800362e:	490e      	ldr	r1, [pc, #56]	; (8003668 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003630:	4a0e      	ldr	r2, [pc, #56]	; (800366c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003634:	e002      	b.n	800363c <LoopCopyDataInit>

08003636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800363a:	3304      	adds	r3, #4

0800363c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800363c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003640:	d3f9      	bcc.n	8003636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003642:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003644:	4c0b      	ldr	r4, [pc, #44]	; (8003674 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003648:	e001      	b.n	800364e <LoopFillZerobss>

0800364a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800364a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800364c:	3204      	adds	r2, #4

0800364e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003650:	d3fb      	bcc.n	800364a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003652:	f7ff ffd7 	bl	8003604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003656:	f00c fe17 	bl	8010288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800365a:	f7fd fde1 	bl	8001220 <main>
  bx  lr    
 800365e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003668:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800366c:	08010634 	.word	0x08010634
  ldr r2, =_sbss
 8003670:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003674:	200007a8 	.word	0x200007a8

08003678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003678:	e7fe      	b.n	8003678 <ADC_IRQHandler>
	...

0800367c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <HAL_Init+0x40>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <HAL_Init+0x40>)
 8003686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800368a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_Init+0x40>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <HAL_Init+0x40>)
 8003692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <HAL_Init+0x40>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a07      	ldr	r2, [pc, #28]	; (80036bc <HAL_Init+0x40>)
 800369e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a4:	2003      	movs	r0, #3
 80036a6:	f000 f94f 	bl	8003948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036aa:	2000      	movs	r0, #0
 80036ac:	f000 f808 	bl	80036c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036b0:	f7ff fa9c 	bl	8002bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023c00 	.word	0x40023c00

080036c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_InitTick+0x54>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_InitTick+0x58>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4619      	mov	r1, r3
 80036d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f996 	bl	8003a10 <HAL_SYSTICK_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00e      	b.n	800370c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b0f      	cmp	r3, #15
 80036f2:	d80a      	bhi.n	800370a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036f4:	2200      	movs	r2, #0
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	f000 f944 	bl	8003988 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003700:	4a06      	ldr	r2, [pc, #24]	; (800371c <HAL_InitTick+0x5c>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	e000      	b.n	800370c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000154 	.word	0x20000154
 8003718:	2000015c 	.word	0x2000015c
 800371c:	20000158 	.word	0x20000158

08003720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_IncTick+0x20>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_IncTick+0x24>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4413      	add	r3, r2
 8003730:	4a04      	ldr	r2, [pc, #16]	; (8003744 <HAL_IncTick+0x24>)
 8003732:	6013      	str	r3, [r2, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	2000015c 	.word	0x2000015c
 8003744:	200006a4 	.word	0x200006a4

08003748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return uwTick;
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_GetTick+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	200006a4 	.word	0x200006a4

08003760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003768:	f7ff ffee 	bl	8003748 <HAL_GetTick>
 800376c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d005      	beq.n	8003786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_Delay+0x44>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003786:	bf00      	nop
 8003788:	f7ff ffde 	bl	8003748 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d8f7      	bhi.n	8003788 <HAL_Delay+0x28>
  {
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	2000015c 	.word	0x2000015c

080037a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c4:	4013      	ands	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037da:	4a04      	ldr	r2, [pc, #16]	; (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	60d3      	str	r3, [r2, #12]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <__NVIC_GetPriorityGrouping+0x18>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	f003 0307 	and.w	r3, r3, #7
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	2b00      	cmp	r3, #0
 800381c:	db0b      	blt.n	8003836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4907      	ldr	r1, [pc, #28]	; (8003844 <__NVIC_EnableIRQ+0x38>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2001      	movs	r0, #1
 800382e:	fa00 f202 	lsl.w	r2, r0, r2
 8003832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000e100 	.word	0xe000e100

08003848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	2b00      	cmp	r3, #0
 800385a:	db0a      	blt.n	8003872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	490c      	ldr	r1, [pc, #48]	; (8003894 <__NVIC_SetPriority+0x4c>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	440b      	add	r3, r1
 800386c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003870:	e00a      	b.n	8003888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4908      	ldr	r1, [pc, #32]	; (8003898 <__NVIC_SetPriority+0x50>)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	3b04      	subs	r3, #4
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	440b      	add	r3, r1
 8003886:	761a      	strb	r2, [r3, #24]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000e100 	.word	0xe000e100
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f1c3 0307 	rsb	r3, r3, #7
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	bf28      	it	cs
 80038ba:	2304      	movcs	r3, #4
 80038bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d902      	bls.n	80038cc <NVIC_EncodePriority+0x30>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3b03      	subs	r3, #3
 80038ca:	e000      	b.n	80038ce <NVIC_EncodePriority+0x32>
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	401a      	ands	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	43d9      	mvns	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	4313      	orrs	r3, r2
         );
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	; 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003914:	d301      	bcc.n	800391a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003916:	2301      	movs	r3, #1
 8003918:	e00f      	b.n	800393a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391a:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <SysTick_Config+0x40>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003922:	210f      	movs	r1, #15
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f7ff ff8e 	bl	8003848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <SysTick_Config+0x40>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003932:	4b04      	ldr	r3, [pc, #16]	; (8003944 <SysTick_Config+0x40>)
 8003934:	2207      	movs	r2, #7
 8003936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	e000e010 	.word	0xe000e010

08003948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b07      	cmp	r3, #7
 8003954:	d00f      	beq.n	8003976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b06      	cmp	r3, #6
 800395a:	d00c      	beq.n	8003976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b05      	cmp	r3, #5
 8003960:	d009      	beq.n	8003976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d006      	beq.n	8003976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d003      	beq.n	8003976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800396e:	2192      	movs	r1, #146	; 0x92
 8003970:	4804      	ldr	r0, [pc, #16]	; (8003984 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003972:	f7ff f930 	bl	8002bd6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ff16 	bl	80037a8 <__NVIC_SetPriorityGrouping>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	0801033c 	.word	0x0801033c

08003988 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b0f      	cmp	r3, #15
 800399e:	d903      	bls.n	80039a8 <HAL_NVIC_SetPriority+0x20>
 80039a0:	21aa      	movs	r1, #170	; 0xaa
 80039a2:	480e      	ldr	r0, [pc, #56]	; (80039dc <HAL_NVIC_SetPriority+0x54>)
 80039a4:	f7ff f917 	bl	8002bd6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b0f      	cmp	r3, #15
 80039ac:	d903      	bls.n	80039b6 <HAL_NVIC_SetPriority+0x2e>
 80039ae:	21ab      	movs	r1, #171	; 0xab
 80039b0:	480a      	ldr	r0, [pc, #40]	; (80039dc <HAL_NVIC_SetPriority+0x54>)
 80039b2:	f7ff f910 	bl	8002bd6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039b6:	f7ff ff1b 	bl	80037f0 <__NVIC_GetPriorityGrouping>
 80039ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	6978      	ldr	r0, [r7, #20]
 80039c2:	f7ff ff6b 	bl	800389c <NVIC_EncodePriority>
 80039c6:	4602      	mov	r2, r0
 80039c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ff3a 	bl	8003848 <__NVIC_SetPriority>
}
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	0801033c 	.word	0x0801033c

080039e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	da03      	bge.n	80039fa <HAL_NVIC_EnableIRQ+0x1a>
 80039f2:	21be      	movs	r1, #190	; 0xbe
 80039f4:	4805      	ldr	r0, [pc, #20]	; (8003a0c <HAL_NVIC_EnableIRQ+0x2c>)
 80039f6:	f7ff f8ee 	bl	8002bd6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff ff04 	bl	800380c <__NVIC_EnableIRQ>
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	0801033c 	.word	0x0801033c

08003a10 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ff73 	bl	8003904 <SysTick_Config>
 8003a1e:	4603      	mov	r3, r0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a34:	f7ff fe88 	bl	8003748 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e204      	b.n	8003e4e <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a97      	ldr	r2, [pc, #604]	; (8003ca8 <HAL_DMA_Init+0x280>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d04e      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a96      	ldr	r2, [pc, #600]	; (8003cac <HAL_DMA_Init+0x284>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d049      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a94      	ldr	r2, [pc, #592]	; (8003cb0 <HAL_DMA_Init+0x288>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d044      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a93      	ldr	r2, [pc, #588]	; (8003cb4 <HAL_DMA_Init+0x28c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d03f      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a91      	ldr	r2, [pc, #580]	; (8003cb8 <HAL_DMA_Init+0x290>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d03a      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a90      	ldr	r2, [pc, #576]	; (8003cbc <HAL_DMA_Init+0x294>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d035      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a8e      	ldr	r2, [pc, #568]	; (8003cc0 <HAL_DMA_Init+0x298>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d030      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a8d      	ldr	r2, [pc, #564]	; (8003cc4 <HAL_DMA_Init+0x29c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d02b      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a8b      	ldr	r2, [pc, #556]	; (8003cc8 <HAL_DMA_Init+0x2a0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d026      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a8a      	ldr	r2, [pc, #552]	; (8003ccc <HAL_DMA_Init+0x2a4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d021      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a88      	ldr	r2, [pc, #544]	; (8003cd0 <HAL_DMA_Init+0x2a8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d01c      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a87      	ldr	r2, [pc, #540]	; (8003cd4 <HAL_DMA_Init+0x2ac>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d017      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a85      	ldr	r2, [pc, #532]	; (8003cd8 <HAL_DMA_Init+0x2b0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d012      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a84      	ldr	r2, [pc, #528]	; (8003cdc <HAL_DMA_Init+0x2b4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00d      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a82      	ldr	r2, [pc, #520]	; (8003ce0 <HAL_DMA_Init+0x2b8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d008      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a81      	ldr	r2, [pc, #516]	; (8003ce4 <HAL_DMA_Init+0x2bc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <HAL_DMA_Init+0xc4>
 8003ae4:	21b8      	movs	r1, #184	; 0xb8
 8003ae6:	4880      	ldr	r0, [pc, #512]	; (8003ce8 <HAL_DMA_Init+0x2c0>)
 8003ae8:	f7ff f875 	bl	8002bd6 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d026      	beq.n	8003b42 <HAL_DMA_Init+0x11a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003afc:	d021      	beq.n	8003b42 <HAL_DMA_Init+0x11a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b06:	d01c      	beq.n	8003b42 <HAL_DMA_Init+0x11a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003b10:	d017      	beq.n	8003b42 <HAL_DMA_Init+0x11a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b1a:	d012      	beq.n	8003b42 <HAL_DMA_Init+0x11a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003b24:	d00d      	beq.n	8003b42 <HAL_DMA_Init+0x11a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003b2e:	d008      	beq.n	8003b42 <HAL_DMA_Init+0x11a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003b38:	d003      	beq.n	8003b42 <HAL_DMA_Init+0x11a>
 8003b3a:	21b9      	movs	r1, #185	; 0xb9
 8003b3c:	486a      	ldr	r0, [pc, #424]	; (8003ce8 <HAL_DMA_Init+0x2c0>)
 8003b3e:	f7ff f84a 	bl	8002bd6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_DMA_Init+0x13a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d007      	beq.n	8003b62 <HAL_DMA_Init+0x13a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d003      	beq.n	8003b62 <HAL_DMA_Init+0x13a>
 8003b5a:	21ba      	movs	r1, #186	; 0xba
 8003b5c:	4862      	ldr	r0, [pc, #392]	; (8003ce8 <HAL_DMA_Init+0x2c0>)
 8003b5e:	f7ff f83a 	bl	8002bd6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6a:	d007      	beq.n	8003b7c <HAL_DMA_Init+0x154>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_DMA_Init+0x154>
 8003b74:	21bb      	movs	r1, #187	; 0xbb
 8003b76:	485c      	ldr	r0, [pc, #368]	; (8003ce8 <HAL_DMA_Init+0x2c0>)
 8003b78:	f7ff f82d 	bl	8002bd6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b84:	d007      	beq.n	8003b96 <HAL_DMA_Init+0x16e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_DMA_Init+0x16e>
 8003b8e:	21bc      	movs	r1, #188	; 0xbc
 8003b90:	4855      	ldr	r0, [pc, #340]	; (8003ce8 <HAL_DMA_Init+0x2c0>)
 8003b92:	f7ff f820 	bl	8002bd6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <HAL_DMA_Init+0x192>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba6:	d008      	beq.n	8003bba <HAL_DMA_Init+0x192>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb0:	d003      	beq.n	8003bba <HAL_DMA_Init+0x192>
 8003bb2:	21bd      	movs	r1, #189	; 0xbd
 8003bb4:	484c      	ldr	r0, [pc, #304]	; (8003ce8 <HAL_DMA_Init+0x2c0>)
 8003bb6:	f7ff f80e 	bl	8002bd6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <HAL_DMA_Init+0x1b6>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bca:	d008      	beq.n	8003bde <HAL_DMA_Init+0x1b6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd4:	d003      	beq.n	8003bde <HAL_DMA_Init+0x1b6>
 8003bd6:	21be      	movs	r1, #190	; 0xbe
 8003bd8:	4843      	ldr	r0, [pc, #268]	; (8003ce8 <HAL_DMA_Init+0x2c0>)
 8003bda:	f7fe fffc 	bl	8002bd6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00c      	beq.n	8003c00 <HAL_DMA_Init+0x1d8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bee:	d007      	beq.n	8003c00 <HAL_DMA_Init+0x1d8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d003      	beq.n	8003c00 <HAL_DMA_Init+0x1d8>
 8003bf8:	21bf      	movs	r1, #191	; 0xbf
 8003bfa:	483b      	ldr	r0, [pc, #236]	; (8003ce8 <HAL_DMA_Init+0x2c0>)
 8003bfc:	f7fe ffeb 	bl	8002bd6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d012      	beq.n	8003c2e <HAL_DMA_Init+0x206>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c10:	d00d      	beq.n	8003c2e <HAL_DMA_Init+0x206>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c1a:	d008      	beq.n	8003c2e <HAL_DMA_Init+0x206>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c24:	d003      	beq.n	8003c2e <HAL_DMA_Init+0x206>
 8003c26:	21c0      	movs	r1, #192	; 0xc0
 8003c28:	482f      	ldr	r0, [pc, #188]	; (8003ce8 <HAL_DMA_Init+0x2c0>)
 8003c2a:	f7fe ffd4 	bl	8002bd6 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_DMA_Init+0x21e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d003      	beq.n	8003c46 <HAL_DMA_Init+0x21e>
 8003c3e:	21c1      	movs	r1, #193	; 0xc1
 8003c40:	4829      	ldr	r0, [pc, #164]	; (8003ce8 <HAL_DMA_Init+0x2c0>)
 8003c42:	f7fe ffc8 	bl	8002bd6 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d065      	beq.n	8003d1a <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00f      	beq.n	8003c76 <HAL_DMA_Init+0x24e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d00b      	beq.n	8003c76 <HAL_DMA_Init+0x24e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d007      	beq.n	8003c76 <HAL_DMA_Init+0x24e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d003      	beq.n	8003c76 <HAL_DMA_Init+0x24e>
 8003c6e:	21c6      	movs	r1, #198	; 0xc6
 8003c70:	481d      	ldr	r0, [pc, #116]	; (8003ce8 <HAL_DMA_Init+0x2c0>)
 8003c72:	f7fe ffb0 	bl	8002bd6 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d036      	beq.n	8003cec <HAL_DMA_Init+0x2c4>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c86:	d031      	beq.n	8003cec <HAL_DMA_Init+0x2c4>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c90:	d02c      	beq.n	8003cec <HAL_DMA_Init+0x2c4>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c9a:	d027      	beq.n	8003cec <HAL_DMA_Init+0x2c4>
 8003c9c:	21c7      	movs	r1, #199	; 0xc7
 8003c9e:	4812      	ldr	r0, [pc, #72]	; (8003ce8 <HAL_DMA_Init+0x2c0>)
 8003ca0:	f7fe ff99 	bl	8002bd6 <assert_failed>
 8003ca4:	e022      	b.n	8003cec <HAL_DMA_Init+0x2c4>
 8003ca6:	bf00      	nop
 8003ca8:	40026010 	.word	0x40026010
 8003cac:	40026028 	.word	0x40026028
 8003cb0:	40026040 	.word	0x40026040
 8003cb4:	40026058 	.word	0x40026058
 8003cb8:	40026070 	.word	0x40026070
 8003cbc:	40026088 	.word	0x40026088
 8003cc0:	400260a0 	.word	0x400260a0
 8003cc4:	400260b8 	.word	0x400260b8
 8003cc8:	40026410 	.word	0x40026410
 8003ccc:	40026428 	.word	0x40026428
 8003cd0:	40026440 	.word	0x40026440
 8003cd4:	40026458 	.word	0x40026458
 8003cd8:	40026470 	.word	0x40026470
 8003cdc:	40026488 	.word	0x40026488
 8003ce0:	400264a0 	.word	0x400264a0
 8003ce4:	400264b8 	.word	0x400264b8
 8003ce8:	08010378 	.word	0x08010378
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d012      	beq.n	8003d1a <HAL_DMA_Init+0x2f2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cfc:	d00d      	beq.n	8003d1a <HAL_DMA_Init+0x2f2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d06:	d008      	beq.n	8003d1a <HAL_DMA_Init+0x2f2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d10:	d003      	beq.n	8003d1a <HAL_DMA_Init+0x2f2>
 8003d12:	21c8      	movs	r1, #200	; 0xc8
 8003d14:	4850      	ldr	r0, [pc, #320]	; (8003e58 <HAL_DMA_Init+0x430>)
 8003d16:	f7fe ff5e 	bl	8002bd6 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d3a:	e00f      	b.n	8003d5c <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d3c:	f7ff fd04 	bl	8003748 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b05      	cmp	r3, #5
 8003d48:	d908      	bls.n	8003d5c <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2203      	movs	r2, #3
 8003d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e078      	b.n	8003e4e <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e8      	bne.n	8003d3c <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4b39      	ldr	r3, [pc, #228]	; (8003e5c <HAL_DMA_Init+0x434>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d107      	bne.n	8003dc6 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f023 0307 	bic.w	r3, r3, #7
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d117      	bne.n	8003e20 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00e      	beq.n	8003e20 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa7e 	bl	8004304 <DMA_CheckFifoParam>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2240      	movs	r2, #64	; 0x40
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e016      	b.n	8003e4e <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fa35 	bl	8004298 <DMA_CalcBaseAndBitshift>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e36:	223f      	movs	r2, #63	; 0x3f
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	08010378 	.word	0x08010378
 8003e5c:	f010803f 	.word	0xf010803f

08003e60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e6e:	f7ff fc6b 	bl	8003748 <HAL_GetTick>
 8003e72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d008      	beq.n	8003e92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e052      	b.n	8003f38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0216 	bic.w	r2, r2, #22
 8003ea0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <HAL_DMA_Abort+0x62>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0208 	bic.w	r2, r2, #8
 8003ed0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ee2:	e013      	b.n	8003f0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ee4:	f7ff fc30 	bl	8003748 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d90c      	bls.n	8003f0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2203      	movs	r2, #3
 8003efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e015      	b.n	8003f38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e4      	bne.n	8003ee4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	223f      	movs	r2, #63	; 0x3f
 8003f20:	409a      	lsls	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d004      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e00c      	b.n	8003f78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2205      	movs	r2, #5
 8003f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f90:	4b92      	ldr	r3, [pc, #584]	; (80041dc <HAL_DMA_IRQHandler+0x258>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a92      	ldr	r2, [pc, #584]	; (80041e0 <HAL_DMA_IRQHandler+0x25c>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	0a9b      	lsrs	r3, r3, #10
 8003f9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	2208      	movs	r2, #8
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01a      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d013      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0204 	bic.w	r2, r2, #4
 8003fd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	2208      	movs	r2, #8
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	f043 0201 	orr.w	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d012      	beq.n	8004026 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00b      	beq.n	8004026 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	2201      	movs	r2, #1
 8004014:	409a      	lsls	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	f043 0202 	orr.w	r2, r3, #2
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402a:	2204      	movs	r2, #4
 800402c:	409a      	lsls	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d012      	beq.n	800405c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004048:	2204      	movs	r2, #4
 800404a:	409a      	lsls	r2, r3
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	f043 0204 	orr.w	r2, r3, #4
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004060:	2210      	movs	r2, #16
 8004062:	409a      	lsls	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4013      	ands	r3, r2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d043      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d03c      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407e:	2210      	movs	r2, #16
 8004080:	409a      	lsls	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d018      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d108      	bne.n	80040b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d024      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	4798      	blx	r3
 80040b2:	e01f      	b.n	80040f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01b      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
 80040c4:	e016      	b.n	80040f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0208 	bic.w	r2, r2, #8
 80040e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	2220      	movs	r2, #32
 80040fa:	409a      	lsls	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 808e 	beq.w	8004222 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8086 	beq.w	8004222 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411a:	2220      	movs	r2, #32
 800411c:	409a      	lsls	r2, r3
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b05      	cmp	r3, #5
 800412c:	d136      	bne.n	800419c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0216 	bic.w	r2, r2, #22
 800413c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800414c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <HAL_DMA_IRQHandler+0x1da>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0208 	bic.w	r2, r2, #8
 800416c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004172:	223f      	movs	r2, #63	; 0x3f
 8004174:	409a      	lsls	r2, r3
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418e:	2b00      	cmp	r3, #0
 8004190:	d07d      	beq.n	800428e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	4798      	blx	r3
        }
        return;
 800419a:	e078      	b.n	800428e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01c      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d108      	bne.n	80041ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d030      	beq.n	8004222 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
 80041c8:	e02b      	b.n	8004222 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d027      	beq.n	8004222 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
 80041da:	e022      	b.n	8004222 <HAL_DMA_IRQHandler+0x29e>
 80041dc:	20000154 	.word	0x20000154
 80041e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10f      	bne.n	8004212 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0210 	bic.w	r2, r2, #16
 8004200:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	2b00      	cmp	r3, #0
 8004228:	d032      	beq.n	8004290 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d022      	beq.n	800427c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2205      	movs	r2, #5
 800423a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	3301      	adds	r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	429a      	cmp	r2, r3
 8004258:	d307      	bcc.n	800426a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f2      	bne.n	800424e <HAL_DMA_IRQHandler+0x2ca>
 8004268:	e000      	b.n	800426c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800426a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
 800428c:	e000      	b.n	8004290 <HAL_DMA_IRQHandler+0x30c>
        return;
 800428e:	bf00      	nop
    }
  }
}
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop

08004298 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	3b10      	subs	r3, #16
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <DMA_CalcBaseAndBitshift+0x64>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	091b      	lsrs	r3, r3, #4
 80042b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042b2:	4a13      	ldr	r2, [pc, #76]	; (8004300 <DMA_CalcBaseAndBitshift+0x68>)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d909      	bls.n	80042da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	1d1a      	adds	r2, r3, #4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	659a      	str	r2, [r3, #88]	; 0x58
 80042d8:	e007      	b.n	80042ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	aaaaaaab 	.word	0xaaaaaaab
 8004300:	080105f4 	.word	0x080105f4

08004304 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d11f      	bne.n	800435e <DMA_CheckFifoParam+0x5a>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d856      	bhi.n	80043d2 <DMA_CheckFifoParam+0xce>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <DMA_CheckFifoParam+0x28>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	0800433d 	.word	0x0800433d
 8004330:	0800434f 	.word	0x0800434f
 8004334:	0800433d 	.word	0x0800433d
 8004338:	080043d3 	.word	0x080043d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d046      	beq.n	80043d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800434c:	e043      	b.n	80043d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004356:	d140      	bne.n	80043da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435c:	e03d      	b.n	80043da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004366:	d121      	bne.n	80043ac <DMA_CheckFifoParam+0xa8>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d837      	bhi.n	80043de <DMA_CheckFifoParam+0xda>
 800436e:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <DMA_CheckFifoParam+0x70>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	08004385 	.word	0x08004385
 8004378:	0800438b 	.word	0x0800438b
 800437c:	08004385 	.word	0x08004385
 8004380:	0800439d 	.word	0x0800439d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      break;
 8004388:	e030      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d025      	beq.n	80043e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800439a:	e022      	b.n	80043e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043a4:	d11f      	bne.n	80043e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043aa:	e01c      	b.n	80043e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d903      	bls.n	80043ba <DMA_CheckFifoParam+0xb6>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d003      	beq.n	80043c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043b8:	e018      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
      break;
 80043be:	e015      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00e      	beq.n	80043ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
      break;
 80043d0:	e00b      	b.n	80043ea <DMA_CheckFifoParam+0xe6>
      break;
 80043d2:	bf00      	nop
 80043d4:	e00a      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      break;
 80043d6:	bf00      	nop
 80043d8:	e008      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      break;
 80043da:	bf00      	nop
 80043dc:	e006      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      break;
 80043de:	bf00      	nop
 80043e0:	e004      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      break;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      break;   
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      break;
 80043ea:	bf00      	nop
    }
  } 
  
  return status; 
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop

080043fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a37      	ldr	r2, [pc, #220]	; (80044f4 <HAL_GPIO_Init+0xf8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01f      	beq.n	800445a <HAL_GPIO_Init+0x5e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a36      	ldr	r2, [pc, #216]	; (80044f8 <HAL_GPIO_Init+0xfc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01b      	beq.n	800445a <HAL_GPIO_Init+0x5e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a35      	ldr	r2, [pc, #212]	; (80044fc <HAL_GPIO_Init+0x100>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d017      	beq.n	800445a <HAL_GPIO_Init+0x5e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a34      	ldr	r2, [pc, #208]	; (8004500 <HAL_GPIO_Init+0x104>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <HAL_GPIO_Init+0x5e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a33      	ldr	r2, [pc, #204]	; (8004504 <HAL_GPIO_Init+0x108>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00f      	beq.n	800445a <HAL_GPIO_Init+0x5e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a32      	ldr	r2, [pc, #200]	; (8004508 <HAL_GPIO_Init+0x10c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00b      	beq.n	800445a <HAL_GPIO_Init+0x5e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a31      	ldr	r2, [pc, #196]	; (800450c <HAL_GPIO_Init+0x110>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <HAL_GPIO_Init+0x5e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a30      	ldr	r2, [pc, #192]	; (8004510 <HAL_GPIO_Init+0x114>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <HAL_GPIO_Init+0x5e>
 8004452:	21ac      	movs	r1, #172	; 0xac
 8004454:	482f      	ldr	r0, [pc, #188]	; (8004514 <HAL_GPIO_Init+0x118>)
 8004456:	f7fe fbbe 	bl	8002bd6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_GPIO_Init+0x74>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_GPIO_Init+0x7c>
 8004470:	21ad      	movs	r1, #173	; 0xad
 8004472:	4828      	ldr	r0, [pc, #160]	; (8004514 <HAL_GPIO_Init+0x118>)
 8004474:	f7fe fbaf 	bl	8002bd6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d035      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d031      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b11      	cmp	r3, #17
 800448e:	d02d      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d029      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b12      	cmp	r3, #18
 800449e:	d025      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80044a8:	d020      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80044b2:	d01b      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80044bc:	d016      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80044c6:	d011      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80044d0:	d00c      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80044da:	d007      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d003      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
 80044e4:	21ae      	movs	r1, #174	; 0xae
 80044e6:	480b      	ldr	r0, [pc, #44]	; (8004514 <HAL_GPIO_Init+0x118>)
 80044e8:	f7fe fb75 	bl	8002bd6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	e289      	b.n	8004a06 <HAL_GPIO_Init+0x60a>
 80044f2:	bf00      	nop
 80044f4:	40020000 	.word	0x40020000
 80044f8:	40020400 	.word	0x40020400
 80044fc:	40020800 	.word	0x40020800
 8004500:	40020c00 	.word	0x40020c00
 8004504:	40021000 	.word	0x40021000
 8004508:	40021400 	.word	0x40021400
 800450c:	40021800 	.word	0x40021800
 8004510:	40021c00 	.word	0x40021c00
 8004514:	080103b0 	.word	0x080103b0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004518:	2201      	movs	r2, #1
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4013      	ands	r3, r2
 800452a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	429a      	cmp	r2, r3
 8004532:	f040 8265 	bne.w	8004a00 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d005      	beq.n	800454e <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800454a:	2b02      	cmp	r3, #2
 800454c:	d144      	bne.n	80045d8 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00f      	beq.n	8004576 <HAL_GPIO_Init+0x17a>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d00b      	beq.n	8004576 <HAL_GPIO_Init+0x17a>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d007      	beq.n	8004576 <HAL_GPIO_Init+0x17a>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_Init+0x17a>
 800456e:	21c0      	movs	r1, #192	; 0xc0
 8004570:	4831      	ldr	r0, [pc, #196]	; (8004638 <HAL_GPIO_Init+0x23c>)
 8004572:	f7fe fb30 	bl	8002bd6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	2203      	movs	r2, #3
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045ac:	2201      	movs	r2, #1
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 0201 	and.w	r2, r3, #1
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d02b      	beq.n	800463c <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00b      	beq.n	8004604 <HAL_GPIO_Init+0x208>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d007      	beq.n	8004604 <HAL_GPIO_Init+0x208>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x208>
 80045fc:	21d1      	movs	r1, #209	; 0xd1
 80045fe:	480e      	ldr	r0, [pc, #56]	; (8004638 <HAL_GPIO_Init+0x23c>)
 8004600:	f7fe fae9 	bl	8002bd6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	2203      	movs	r2, #3
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	60da      	str	r2, [r3, #12]
 8004634:	e002      	b.n	800463c <HAL_GPIO_Init+0x240>
 8004636:	bf00      	nop
 8004638:	080103b0 	.word	0x080103b0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b02      	cmp	r3, #2
 8004646:	f040 810c 	bne.w	8004862 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80e3 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b09      	cmp	r3, #9
 800465a:	f000 80de 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 80d9 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80d4 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80cf 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80ca 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b01      	cmp	r3, #1
 800468c:	f000 80c5 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b01      	cmp	r3, #1
 8004696:	f000 80c0 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	f000 80bb 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	f000 80b6 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	f000 80b1 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	f000 80ac 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	f000 80a7 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	f000 80a2 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	f000 809d 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b05      	cmp	r3, #5
 80046e6:	f000 8098 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	f000 8093 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b09      	cmp	r3, #9
 80046fa:	f000 808e 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b06      	cmp	r3, #6
 8004704:	f000 8089 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b09      	cmp	r3, #9
 800470e:	f000 8084 	beq.w	800481a <HAL_GPIO_Init+0x41e>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b07      	cmp	r3, #7
 8004718:	d07f      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b07      	cmp	r3, #7
 8004720:	d07b      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b07      	cmp	r3, #7
 8004728:	d077      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b08      	cmp	r3, #8
 8004730:	d073      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b08      	cmp	r3, #8
 8004738:	d06f      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b08      	cmp	r3, #8
 8004740:	d06b      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b09      	cmp	r3, #9
 8004748:	d067      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b09      	cmp	r3, #9
 8004750:	d063      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b0a      	cmp	r3, #10
 8004758:	d05f      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b0a      	cmp	r3, #10
 8004760:	d05b      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b0b      	cmp	r3, #11
 8004768:	d057      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d053      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b0c      	cmp	r3, #12
 8004778:	d04f      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b0d      	cmp	r3, #13
 8004780:	d04b      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b0f      	cmp	r3, #15
 8004788:	d047      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b05      	cmp	r3, #5
 8004790:	d043      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d03f      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d03b      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d037      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d033      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b05      	cmp	r3, #5
 80047b8:	d02f      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b06      	cmp	r3, #6
 80047c0:	d02b      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b06      	cmp	r3, #6
 80047c8:	d027      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b07      	cmp	r3, #7
 80047d0:	d023      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b07      	cmp	r3, #7
 80047d8:	d01f      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b07      	cmp	r3, #7
 80047e0:	d01b      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b07      	cmp	r3, #7
 80047e8:	d017      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d013      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d00f      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b09      	cmp	r3, #9
 8004800:	d00b      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b0a      	cmp	r3, #10
 8004808:	d007      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b0a      	cmp	r3, #10
 8004810:	d003      	beq.n	800481a <HAL_GPIO_Init+0x41e>
 8004812:	21de      	movs	r1, #222	; 0xde
 8004814:	4880      	ldr	r0, [pc, #512]	; (8004a18 <HAL_GPIO_Init+0x61c>)
 8004816:	f7fe f9de 	bl	8002bd6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	08da      	lsrs	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3208      	adds	r2, #8
 8004822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	220f      	movs	r2, #15
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43db      	mvns	r3, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4013      	ands	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	08da      	lsrs	r2, r3, #3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3208      	adds	r2, #8
 800485c:	69b9      	ldr	r1, [r7, #24]
 800485e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	2203      	movs	r2, #3
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43db      	mvns	r3, r3
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4013      	ands	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 0203 	and.w	r2, r3, #3
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80ae 	beq.w	8004a00 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	4b5c      	ldr	r3, [pc, #368]	; (8004a1c <HAL_GPIO_Init+0x620>)
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	4a5b      	ldr	r2, [pc, #364]	; (8004a1c <HAL_GPIO_Init+0x620>)
 80048ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048b2:	6453      	str	r3, [r2, #68]	; 0x44
 80048b4:	4b59      	ldr	r3, [pc, #356]	; (8004a1c <HAL_GPIO_Init+0x620>)
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048c0:	4a57      	ldr	r2, [pc, #348]	; (8004a20 <HAL_GPIO_Init+0x624>)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	089b      	lsrs	r3, r3, #2
 80048c6:	3302      	adds	r3, #2
 80048c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	220f      	movs	r2, #15
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	43db      	mvns	r3, r3
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4013      	ands	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a4f      	ldr	r2, [pc, #316]	; (8004a24 <HAL_GPIO_Init+0x628>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d025      	beq.n	8004938 <HAL_GPIO_Init+0x53c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a4e      	ldr	r2, [pc, #312]	; (8004a28 <HAL_GPIO_Init+0x62c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d01f      	beq.n	8004934 <HAL_GPIO_Init+0x538>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a4d      	ldr	r2, [pc, #308]	; (8004a2c <HAL_GPIO_Init+0x630>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d019      	beq.n	8004930 <HAL_GPIO_Init+0x534>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a4c      	ldr	r2, [pc, #304]	; (8004a30 <HAL_GPIO_Init+0x634>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <HAL_GPIO_Init+0x530>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a4b      	ldr	r2, [pc, #300]	; (8004a34 <HAL_GPIO_Init+0x638>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00d      	beq.n	8004928 <HAL_GPIO_Init+0x52c>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a4a      	ldr	r2, [pc, #296]	; (8004a38 <HAL_GPIO_Init+0x63c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d007      	beq.n	8004924 <HAL_GPIO_Init+0x528>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a49      	ldr	r2, [pc, #292]	; (8004a3c <HAL_GPIO_Init+0x640>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d101      	bne.n	8004920 <HAL_GPIO_Init+0x524>
 800491c:	2306      	movs	r3, #6
 800491e:	e00c      	b.n	800493a <HAL_GPIO_Init+0x53e>
 8004920:	2307      	movs	r3, #7
 8004922:	e00a      	b.n	800493a <HAL_GPIO_Init+0x53e>
 8004924:	2305      	movs	r3, #5
 8004926:	e008      	b.n	800493a <HAL_GPIO_Init+0x53e>
 8004928:	2304      	movs	r3, #4
 800492a:	e006      	b.n	800493a <HAL_GPIO_Init+0x53e>
 800492c:	2303      	movs	r3, #3
 800492e:	e004      	b.n	800493a <HAL_GPIO_Init+0x53e>
 8004930:	2302      	movs	r3, #2
 8004932:	e002      	b.n	800493a <HAL_GPIO_Init+0x53e>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_GPIO_Init+0x53e>
 8004938:	2300      	movs	r3, #0
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	f002 0203 	and.w	r2, r2, #3
 8004940:	0092      	lsls	r2, r2, #2
 8004942:	4093      	lsls	r3, r2
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800494a:	4935      	ldr	r1, [pc, #212]	; (8004a20 <HAL_GPIO_Init+0x624>)
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	089b      	lsrs	r3, r3, #2
 8004950:	3302      	adds	r3, #2
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004958:	4b39      	ldr	r3, [pc, #228]	; (8004a40 <HAL_GPIO_Init+0x644>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800497c:	4a30      	ldr	r2, [pc, #192]	; (8004a40 <HAL_GPIO_Init+0x644>)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004982:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <HAL_GPIO_Init+0x644>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	43db      	mvns	r3, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4013      	ands	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049a6:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <HAL_GPIO_Init+0x644>)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049ac:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <HAL_GPIO_Init+0x644>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4013      	ands	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049d0:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <HAL_GPIO_Init+0x644>)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049d6:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <HAL_GPIO_Init+0x644>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	43db      	mvns	r3, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4013      	ands	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049fa:	4a11      	ldr	r2, [pc, #68]	; (8004a40 <HAL_GPIO_Init+0x644>)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3301      	adds	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	2b0f      	cmp	r3, #15
 8004a0a:	f67f ad85 	bls.w	8004518 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	080103b0 	.word	0x080103b0
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	40013800 	.word	0x40013800
 8004a24:	40020000 	.word	0x40020000
 8004a28:	40020400 	.word	0x40020400
 8004a2c:	40020800 	.word	0x40020800
 8004a30:	40020c00 	.word	0x40020c00
 8004a34:	40021000 	.word	0x40021000
 8004a38:	40021400 	.word	0x40021400
 8004a3c:	40021800 	.word	0x40021800
 8004a40:	40013c00 	.word	0x40013c00

08004a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	807b      	strh	r3, [r7, #2]
 8004a50:	4613      	mov	r3, r2
 8004a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004a54:	887b      	ldrh	r3, [r7, #2]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d004      	beq.n	8004a64 <HAL_GPIO_WritePin+0x20>
 8004a5a:	887b      	ldrh	r3, [r7, #2]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d004      	beq.n	8004a6e <HAL_GPIO_WritePin+0x2a>
 8004a64:	f240 119d 	movw	r1, #413	; 0x19d
 8004a68:	480e      	ldr	r0, [pc, #56]	; (8004aa4 <HAL_GPIO_WritePin+0x60>)
 8004a6a:	f7fe f8b4 	bl	8002bd6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004a6e:	787b      	ldrb	r3, [r7, #1]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <HAL_GPIO_WritePin+0x40>
 8004a74:	787b      	ldrb	r3, [r7, #1]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d004      	beq.n	8004a84 <HAL_GPIO_WritePin+0x40>
 8004a7a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8004a7e:	4809      	ldr	r0, [pc, #36]	; (8004aa4 <HAL_GPIO_WritePin+0x60>)
 8004a80:	f7fe f8a9 	bl	8002bd6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004a84:	787b      	ldrb	r3, [r7, #1]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a8a:	887a      	ldrh	r2, [r7, #2]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a90:	e003      	b.n	8004a9a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a92:	887b      	ldrh	r3, [r7, #2]
 8004a94:	041a      	lsls	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	619a      	str	r2, [r3, #24]
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	080103b0 	.word	0x080103b0

08004aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ab2:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d006      	beq.n	8004acc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004abe:	4a05      	ldr	r2, [pc, #20]	; (8004ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe f864 	bl	8002b94 <HAL_GPIO_EXTI_Callback>
  }
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40013c00 	.word	0x40013c00

08004ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e1be      	b.n	8004e68 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a9f      	ldr	r2, [pc, #636]	; (8004d6c <HAL_I2C_Init+0x294>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00e      	beq.n	8004b12 <HAL_I2C_Init+0x3a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a9d      	ldr	r2, [pc, #628]	; (8004d70 <HAL_I2C_Init+0x298>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d009      	beq.n	8004b12 <HAL_I2C_Init+0x3a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a9c      	ldr	r2, [pc, #624]	; (8004d74 <HAL_I2C_Init+0x29c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_I2C_Init+0x3a>
 8004b08:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004b0c:	489a      	ldr	r0, [pc, #616]	; (8004d78 <HAL_I2C_Init+0x2a0>)
 8004b0e:	f7fe f862 	bl	8002bd6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d004      	beq.n	8004b24 <HAL_I2C_Init+0x4c>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4a97      	ldr	r2, [pc, #604]	; (8004d7c <HAL_I2C_Init+0x2a4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d904      	bls.n	8004b2e <HAL_I2C_Init+0x56>
 8004b24:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004b28:	4893      	ldr	r0, [pc, #588]	; (8004d78 <HAL_I2C_Init+0x2a0>)
 8004b2a:	f7fe f854 	bl	8002bd6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_I2C_Init+0x72>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b3e:	d004      	beq.n	8004b4a <HAL_I2C_Init+0x72>
 8004b40:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004b44:	488c      	ldr	r0, [pc, #560]	; (8004d78 <HAL_I2C_Init+0x2a0>)
 8004b46:	f7fe f846 	bl	8002bd6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b52:	f023 0303 	bic.w	r3, r3, #3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d004      	beq.n	8004b64 <HAL_I2C_Init+0x8c>
 8004b5a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004b5e:	4886      	ldr	r0, [pc, #536]	; (8004d78 <HAL_I2C_Init+0x2a0>)
 8004b60:	f7fe f839 	bl	8002bd6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b6c:	d009      	beq.n	8004b82 <HAL_I2C_Init+0xaa>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b76:	d004      	beq.n	8004b82 <HAL_I2C_Init+0xaa>
 8004b78:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004b7c:	487e      	ldr	r0, [pc, #504]	; (8004d78 <HAL_I2C_Init+0x2a0>)
 8004b7e:	f7fe f82a 	bl	8002bd6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <HAL_I2C_Init+0xc4>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d004      	beq.n	8004b9c <HAL_I2C_Init+0xc4>
 8004b92:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004b96:	4878      	ldr	r0, [pc, #480]	; (8004d78 <HAL_I2C_Init+0x2a0>)
 8004b98:	f7fe f81d 	bl	8002bd6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d004      	beq.n	8004bb2 <HAL_I2C_Init+0xda>
 8004ba8:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004bac:	4872      	ldr	r0, [pc, #456]	; (8004d78 <HAL_I2C_Init+0x2a0>)
 8004bae:	f7fe f812 	bl	8002bd6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_I2C_Init+0xf4>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	2b40      	cmp	r3, #64	; 0x40
 8004bc0:	d004      	beq.n	8004bcc <HAL_I2C_Init+0xf4>
 8004bc2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004bc6:	486c      	ldr	r0, [pc, #432]	; (8004d78 <HAL_I2C_Init+0x2a0>)
 8004bc8:	f7fe f805 	bl	8002bd6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_I2C_Init+0x10e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d004      	beq.n	8004be6 <HAL_I2C_Init+0x10e>
 8004bdc:	f240 11c7 	movw	r1, #455	; 0x1c7
 8004be0:	4865      	ldr	r0, [pc, #404]	; (8004d78 <HAL_I2C_Init+0x2a0>)
 8004be2:	f7fd fff8 	bl	8002bd6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fe f81e 	bl	8002c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2224      	movs	r2, #36	; 0x24
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0201 	bic.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c38:	f001 f96e 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 8004c3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	4a4f      	ldr	r2, [pc, #316]	; (8004d80 <HAL_I2C_Init+0x2a8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d807      	bhi.n	8004c58 <HAL_I2C_Init+0x180>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4a4e      	ldr	r2, [pc, #312]	; (8004d84 <HAL_I2C_Init+0x2ac>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	bf94      	ite	ls
 8004c50:	2301      	movls	r3, #1
 8004c52:	2300      	movhi	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	e006      	b.n	8004c66 <HAL_I2C_Init+0x18e>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a4b      	ldr	r2, [pc, #300]	; (8004d88 <HAL_I2C_Init+0x2b0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	bf94      	ite	ls
 8004c60:	2301      	movls	r3, #1
 8004c62:	2300      	movhi	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e0fc      	b.n	8004e68 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a46      	ldr	r2, [pc, #280]	; (8004d8c <HAL_I2C_Init+0x2b4>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	0c9b      	lsrs	r3, r3, #18
 8004c78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4a38      	ldr	r2, [pc, #224]	; (8004d80 <HAL_I2C_Init+0x2a8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d802      	bhi.n	8004ca8 <HAL_I2C_Init+0x1d0>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	e009      	b.n	8004cbc <HAL_I2C_Init+0x1e4>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	4a37      	ldr	r2, [pc, #220]	; (8004d90 <HAL_I2C_Init+0x2b8>)
 8004cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb8:	099b      	lsrs	r3, r3, #6
 8004cba:	3301      	adds	r3, #1
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	492a      	ldr	r1, [pc, #168]	; (8004d80 <HAL_I2C_Init+0x2a8>)
 8004cd8:	428b      	cmp	r3, r1
 8004cda:	d819      	bhi.n	8004d10 <HAL_I2C_Init+0x238>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	1e59      	subs	r1, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cea:	1c59      	adds	r1, r3, #1
 8004cec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cf0:	400b      	ands	r3, r1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_I2C_Init+0x234>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1e59      	subs	r1, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d04:	3301      	adds	r3, #1
 8004d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0a:	e066      	b.n	8004dda <HAL_I2C_Init+0x302>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	e064      	b.n	8004dda <HAL_I2C_Init+0x302>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d111      	bne.n	8004d3c <HAL_I2C_Init+0x264>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	1e58      	subs	r0, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6859      	ldr	r1, [r3, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	440b      	add	r3, r1
 8004d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	e012      	b.n	8004d62 <HAL_I2C_Init+0x28a>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1e58      	subs	r0, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	0099      	lsls	r1, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d52:	3301      	adds	r3, #1
 8004d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d016      	beq.n	8004d94 <HAL_I2C_Init+0x2bc>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e037      	b.n	8004dda <HAL_I2C_Init+0x302>
 8004d6a:	bf00      	nop
 8004d6c:	40005400 	.word	0x40005400
 8004d70:	40005800 	.word	0x40005800
 8004d74:	40005c00 	.word	0x40005c00
 8004d78:	080103ec 	.word	0x080103ec
 8004d7c:	00061a80 	.word	0x00061a80
 8004d80:	000186a0 	.word	0x000186a0
 8004d84:	001e847f 	.word	0x001e847f
 8004d88:	003d08ff 	.word	0x003d08ff
 8004d8c:	431bde83 	.word	0x431bde83
 8004d90:	10624dd3 	.word	0x10624dd3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10e      	bne.n	8004dba <HAL_I2C_Init+0x2e2>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1e58      	subs	r0, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	440b      	add	r3, r1
 8004daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dae:	3301      	adds	r3, #1
 8004db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db8:	e00f      	b.n	8004dda <HAL_I2C_Init+0x302>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1e58      	subs	r0, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6859      	ldr	r1, [r3, #4]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	0099      	lsls	r1, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	6809      	ldr	r1, [r1, #0]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6911      	ldr	r1, [r2, #16]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	68d2      	ldr	r2, [r2, #12]
 8004e14:	4311      	orrs	r1, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	817b      	strh	r3, [r7, #10]
 8004e80:	4613      	mov	r3, r2
 8004e82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e84:	f7fe fc60 	bl	8003748 <HAL_GetTick>
 8004e88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	f040 80e0 	bne.w	8005058 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2319      	movs	r3, #25
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	4970      	ldr	r1, [pc, #448]	; (8005064 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fc58 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e0d3      	b.n	800505a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_I2C_Master_Transmit+0x50>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e0cc      	b.n	800505a <HAL_I2C_Master_Transmit+0x1ea>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d007      	beq.n	8004ee6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0201 	orr.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2221      	movs	r2, #33	; 0x21
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2210      	movs	r2, #16
 8004f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	893a      	ldrh	r2, [r7, #8]
 8004f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a50      	ldr	r2, [pc, #320]	; (8005068 <HAL_I2C_Master_Transmit+0x1f8>)
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f28:	8979      	ldrh	r1, [r7, #10]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	6a3a      	ldr	r2, [r7, #32]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fac2 	bl	80054b8 <I2C_MasterRequestWrite>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e08d      	b.n	800505a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f54:	e066      	b.n	8005024 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	6a39      	ldr	r1, [r7, #32]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fcd2 	bl	8005904 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00d      	beq.n	8004f82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d107      	bne.n	8004f7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e06b      	b.n	800505a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	781a      	ldrb	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d11b      	bne.n	8004ff8 <HAL_I2C_Master_Transmit+0x188>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d017      	beq.n	8004ff8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	781a      	ldrb	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	6a39      	ldr	r1, [r7, #32]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fcc2 	bl	8005986 <I2C_WaitOnBTFFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	2b04      	cmp	r3, #4
 800500e:	d107      	bne.n	8005020 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e01a      	b.n	800505a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	d194      	bne.n	8004f56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e000      	b.n	800505a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	00100002 	.word	0x00100002
 8005068:	ffff0000 	.word	0xffff0000

0800506c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08c      	sub	sp, #48	; 0x30
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	461a      	mov	r2, r3
 8005078:	460b      	mov	r3, r1
 800507a:	817b      	strh	r3, [r7, #10]
 800507c:	4613      	mov	r3, r2
 800507e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005080:	f7fe fb62 	bl	8003748 <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b20      	cmp	r3, #32
 8005090:	f040 820b 	bne.w	80054aa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	2319      	movs	r3, #25
 800509a:	2201      	movs	r2, #1
 800509c:	497c      	ldr	r1, [pc, #496]	; (8005290 <HAL_I2C_Master_Receive+0x224>)
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fb5a 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
 80050ac:	e1fe      	b.n	80054ac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_I2C_Master_Receive+0x50>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e1f7      	b.n	80054ac <HAL_I2C_Master_Receive+0x440>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d007      	beq.n	80050e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2222      	movs	r2, #34	; 0x22
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2210      	movs	r2, #16
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	893a      	ldrh	r2, [r7, #8]
 8005112:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4a5c      	ldr	r2, [pc, #368]	; (8005294 <HAL_I2C_Master_Receive+0x228>)
 8005122:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005124:	8979      	ldrh	r1, [r7, #10]
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fa46 	bl	80055bc <I2C_MasterRequestRead>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e1b8      	b.n	80054ac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513e:	2b00      	cmp	r3, #0
 8005140:	d113      	bne.n	800516a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005142:	2300      	movs	r3, #0
 8005144:	623b      	str	r3, [r7, #32]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	623b      	str	r3, [r7, #32]
 8005156:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e18c      	b.n	8005484 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516e:	2b01      	cmp	r3, #1
 8005170:	d11b      	bne.n	80051aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	e16c      	b.n	8005484 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d11b      	bne.n	80051ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d2:	2300      	movs	r3, #0
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	e14c      	b.n	8005484 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005210:	e138      	b.n	8005484 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005216:	2b03      	cmp	r3, #3
 8005218:	f200 80f1 	bhi.w	80053fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005220:	2b01      	cmp	r3, #1
 8005222:	d123      	bne.n	800526c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005226:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fbed 	bl	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e139      	b.n	80054ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	855a      	strh	r2, [r3, #42]	; 0x2a
 800526a:	e10b      	b.n	8005484 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005270:	2b02      	cmp	r3, #2
 8005272:	d14e      	bne.n	8005312 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	2200      	movs	r2, #0
 800527c:	4906      	ldr	r1, [pc, #24]	; (8005298 <HAL_I2C_Master_Receive+0x22c>)
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 fa6a 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e10e      	b.n	80054ac <HAL_I2C_Master_Receive+0x440>
 800528e:	bf00      	nop
 8005290:	00100002 	.word	0x00100002
 8005294:	ffff0000 	.word	0xffff0000
 8005298:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005310:	e0b8      	b.n	8005484 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	2200      	movs	r2, #0
 800531a:	4966      	ldr	r1, [pc, #408]	; (80054b4 <HAL_I2C_Master_Receive+0x448>)
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 fa1b 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0bf      	b.n	80054ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	2200      	movs	r2, #0
 8005376:	494f      	ldr	r1, [pc, #316]	; (80054b4 <HAL_I2C_Master_Receive+0x448>)
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f9ed 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e091      	b.n	80054ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053fc:	e042      	b.n	8005484 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fb00 	bl	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e04c      	b.n	80054ac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b04      	cmp	r3, #4
 8005450:	d118      	bne.n	8005484 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005488:	2b00      	cmp	r3, #0
 800548a:	f47f aec2 	bne.w	8005212 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e000      	b.n	80054ac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80054aa:	2302      	movs	r3, #2
  }
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3728      	adds	r7, #40	; 0x28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	00010004 	.word	0x00010004

080054b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	460b      	mov	r3, r1
 80054c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d006      	beq.n	80054e2 <I2C_MasterRequestWrite+0x2a>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d003      	beq.n	80054e2 <I2C_MasterRequestWrite+0x2a>
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054e0:	d108      	bne.n	80054f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e00b      	b.n	800550c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	2b12      	cmp	r3, #18
 80054fa:	d107      	bne.n	800550c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800550a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f91d 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00d      	beq.n	8005540 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005532:	d103      	bne.n	800553c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800553a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e035      	b.n	80055ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005548:	d108      	bne.n	800555c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800554a:	897b      	ldrh	r3, [r7, #10]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005558:	611a      	str	r2, [r3, #16]
 800555a:	e01b      	b.n	8005594 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800555c:	897b      	ldrh	r3, [r7, #10]
 800555e:	11db      	asrs	r3, r3, #7
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 0306 	and.w	r3, r3, #6
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f063 030f 	orn	r3, r3, #15
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	490e      	ldr	r1, [pc, #56]	; (80055b4 <I2C_MasterRequestWrite+0xfc>)
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f943 	bl	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e010      	b.n	80055ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800558a:	897b      	ldrh	r3, [r7, #10]
 800558c:	b2da      	uxtb	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4907      	ldr	r1, [pc, #28]	; (80055b8 <I2C_MasterRequestWrite+0x100>)
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f933 	bl	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	00010008 	.word	0x00010008
 80055b8:	00010002 	.word	0x00010002

080055bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	460b      	mov	r3, r1
 80055ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d006      	beq.n	80055f6 <I2C_MasterRequestRead+0x3a>
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d003      	beq.n	80055f6 <I2C_MasterRequestRead+0x3a>
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055f4:	d108      	bne.n	8005608 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	e00b      	b.n	8005620 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	2b11      	cmp	r3, #17
 800560e:	d107      	bne.n	8005620 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800561e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f893 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00d      	beq.n	8005654 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005646:	d103      	bne.n	8005650 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800564e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e079      	b.n	8005748 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800565c:	d108      	bne.n	8005670 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800565e:	897b      	ldrh	r3, [r7, #10]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	b2da      	uxtb	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	611a      	str	r2, [r3, #16]
 800566e:	e05f      	b.n	8005730 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005670:	897b      	ldrh	r3, [r7, #10]
 8005672:	11db      	asrs	r3, r3, #7
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f003 0306 	and.w	r3, r3, #6
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f063 030f 	orn	r3, r3, #15
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4930      	ldr	r1, [pc, #192]	; (8005750 <I2C_MasterRequestRead+0x194>)
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f8b9 	bl	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e054      	b.n	8005748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800569e:	897b      	ldrh	r3, [r7, #10]
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4929      	ldr	r1, [pc, #164]	; (8005754 <I2C_MasterRequestRead+0x198>)
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f8a9 	bl	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e044      	b.n	8005748 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f831 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00d      	beq.n	8005718 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570a:	d103      	bne.n	8005714 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005712:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e017      	b.n	8005748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005718:	897b      	ldrh	r3, [r7, #10]
 800571a:	11db      	asrs	r3, r3, #7
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f003 0306 	and.w	r3, r3, #6
 8005722:	b2db      	uxtb	r3, r3
 8005724:	f063 030e 	orn	r3, r3, #14
 8005728:	b2da      	uxtb	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	4907      	ldr	r1, [pc, #28]	; (8005754 <I2C_MasterRequestRead+0x198>)
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f865 	bl	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	00010008 	.word	0x00010008
 8005754:	00010002 	.word	0x00010002

08005758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005768:	e025      	b.n	80057b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d021      	beq.n	80057b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005772:	f7fd ffe9 	bl	8003748 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d116      	bne.n	80057b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e023      	b.n	80057fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	0c1b      	lsrs	r3, r3, #16
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d10d      	bne.n	80057dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	43da      	mvns	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4013      	ands	r3, r2
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	bf0c      	ite	eq
 80057d2:	2301      	moveq	r3, #1
 80057d4:	2300      	movne	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	e00c      	b.n	80057f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	43da      	mvns	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4013      	ands	r3, r2
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bf0c      	ite	eq
 80057ee:	2301      	moveq	r3, #1
 80057f0:	2300      	movne	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d0b6      	beq.n	800576a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005814:	e051      	b.n	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005824:	d123      	bne.n	800586e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005834:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800583e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f043 0204 	orr.w	r2, r3, #4
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e046      	b.n	80058fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d021      	beq.n	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005876:	f7fd ff67 	bl	8003748 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	429a      	cmp	r2, r3
 8005884:	d302      	bcc.n	800588c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d116      	bne.n	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f043 0220 	orr.w	r2, r3, #32
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e020      	b.n	80058fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	0c1b      	lsrs	r3, r3, #16
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d10c      	bne.n	80058de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	43da      	mvns	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4013      	ands	r3, r2
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bf14      	ite	ne
 80058d6:	2301      	movne	r3, #1
 80058d8:	2300      	moveq	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	e00b      	b.n	80058f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	43da      	mvns	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4013      	ands	r3, r2
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	bf14      	ite	ne
 80058f0:	2301      	movne	r3, #1
 80058f2:	2300      	moveq	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d18d      	bne.n	8005816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005910:	e02d      	b.n	800596e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f8ce 	bl	8005ab4 <I2C_IsAcknowledgeFailed>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e02d      	b.n	800597e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d021      	beq.n	800596e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592a:	f7fd ff0d 	bl	8003748 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	429a      	cmp	r2, r3
 8005938:	d302      	bcc.n	8005940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d116      	bne.n	800596e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f043 0220 	orr.w	r2, r3, #32
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e007      	b.n	800597e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d1ca      	bne.n	8005912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005992:	e02d      	b.n	80059f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f88d 	bl	8005ab4 <I2C_IsAcknowledgeFailed>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e02d      	b.n	8005a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059aa:	d021      	beq.n	80059f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ac:	f7fd fecc 	bl	8003748 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d302      	bcc.n	80059c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d116      	bne.n	80059f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	f043 0220 	orr.w	r2, r3, #32
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e007      	b.n	8005a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d1ca      	bne.n	8005994 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a14:	e042      	b.n	8005a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b10      	cmp	r3, #16
 8005a22:	d119      	bne.n	8005a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0210 	mvn.w	r2, #16
 8005a2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e029      	b.n	8005aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a58:	f7fd fe76 	bl	8003748 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d302      	bcc.n	8005a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d116      	bne.n	8005a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	f043 0220 	orr.w	r2, r3, #32
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e007      	b.n	8005aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d1b5      	bne.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aca:	d11b      	bne.n	8005b04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ad4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	f043 0204 	orr.w	r2, r3, #4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b1e:	2300      	movs	r3, #0
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	4b20      	ldr	r3, [pc, #128]	; (8005ba4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ba4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <HAL_PWREx_EnableOverDrive+0x94>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b40:	f7fd fe02 	bl	8003748 <HAL_GetTick>
 8005b44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b46:	e009      	b.n	8005b5c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b48:	f7fd fdfe 	bl	8003748 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b56:	d901      	bls.n	8005b5c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e01f      	b.n	8005b9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b5c:	4b13      	ldr	r3, [pc, #76]	; (8005bac <HAL_PWREx_EnableOverDrive+0x98>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b68:	d1ee      	bne.n	8005b48 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b6a:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b70:	f7fd fdea 	bl	8003748 <HAL_GetTick>
 8005b74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b76:	e009      	b.n	8005b8c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b78:	f7fd fde6 	bl	8003748 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b86:	d901      	bls.n	8005b8c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e007      	b.n	8005b9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b8c:	4b07      	ldr	r3, [pc, #28]	; (8005bac <HAL_PWREx_EnableOverDrive+0x98>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b98:	d1ee      	bne.n	8005b78 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	420e0040 	.word	0x420e0040
 8005bac:	40007000 	.word	0x40007000
 8005bb0:	420e0044 	.word	0x420e0044

08005bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e18c      	b.n	8005ee2 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x24>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b0f      	cmp	r3, #15
 8005bd6:	d904      	bls.n	8005be2 <HAL_RCC_ClockConfig+0x2e>
 8005bd8:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8005bdc:	4887      	ldr	r0, [pc, #540]	; (8005dfc <HAL_RCC_ClockConfig+0x248>)
 8005bde:	f7fc fffa 	bl	8002bd6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d031      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d02e      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d02b      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d028      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d025      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d022      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b06      	cmp	r3, #6
 8005c0a:	d01f      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b07      	cmp	r3, #7
 8005c10:	d01c      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d019      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b09      	cmp	r3, #9
 8005c1c:	d016      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b0a      	cmp	r3, #10
 8005c22:	d013      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b0b      	cmp	r3, #11
 8005c28:	d010      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b0c      	cmp	r3, #12
 8005c2e:	d00d      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b0d      	cmp	r3, #13
 8005c34:	d00a      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b0e      	cmp	r3, #14
 8005c3a:	d007      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b0f      	cmp	r3, #15
 8005c40:	d004      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x98>
 8005c42:	f240 215d 	movw	r1, #605	; 0x25d
 8005c46:	486d      	ldr	r0, [pc, #436]	; (8005dfc <HAL_RCC_ClockConfig+0x248>)
 8005c48:	f7fc ffc5 	bl	8002bd6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c4c:	4b6c      	ldr	r3, [pc, #432]	; (8005e00 <HAL_RCC_ClockConfig+0x24c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d90c      	bls.n	8005c74 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c5a:	4b69      	ldr	r3, [pc, #420]	; (8005e00 <HAL_RCC_ClockConfig+0x24c>)
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c62:	4b67      	ldr	r3, [pc, #412]	; (8005e00 <HAL_RCC_ClockConfig+0x24c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e136      	b.n	8005ee2 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d049      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c8c:	4b5d      	ldr	r3, [pc, #372]	; (8005e04 <HAL_RCC_ClockConfig+0x250>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	4a5c      	ldr	r2, [pc, #368]	; (8005e04 <HAL_RCC_ClockConfig+0x250>)
 8005c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ca4:	4b57      	ldr	r3, [pc, #348]	; (8005e04 <HAL_RCC_ClockConfig+0x250>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	4a56      	ldr	r2, [pc, #344]	; (8005e04 <HAL_RCC_ClockConfig+0x250>)
 8005caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d024      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x14e>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2b80      	cmp	r3, #128	; 0x80
 8005cbe:	d020      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x14e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b90      	cmp	r3, #144	; 0x90
 8005cc6:	d01c      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x14e>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	2ba0      	cmp	r3, #160	; 0xa0
 8005cce:	d018      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x14e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2bb0      	cmp	r3, #176	; 0xb0
 8005cd6:	d014      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x14e>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2bc0      	cmp	r3, #192	; 0xc0
 8005cde:	d010      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x14e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2bd0      	cmp	r3, #208	; 0xd0
 8005ce6:	d00c      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x14e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2be0      	cmp	r3, #224	; 0xe0
 8005cee:	d008      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x14e>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2bf0      	cmp	r3, #240	; 0xf0
 8005cf6:	d004      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x14e>
 8005cf8:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005cfc:	483f      	ldr	r0, [pc, #252]	; (8005dfc <HAL_RCC_ClockConfig+0x248>)
 8005cfe:	f7fc ff6a 	bl	8002bd6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d02:	4b40      	ldr	r3, [pc, #256]	; (8005e04 <HAL_RCC_ClockConfig+0x250>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	493d      	ldr	r1, [pc, #244]	; (8005e04 <HAL_RCC_ClockConfig+0x250>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d059      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d010      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x196>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d00c      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x196>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d008      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x196>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d004      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x196>
 8005d40:	f240 2187 	movw	r1, #647	; 0x287
 8005d44:	482d      	ldr	r0, [pc, #180]	; (8005dfc <HAL_RCC_ClockConfig+0x248>)
 8005d46:	f7fc ff46 	bl	8002bd6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d107      	bne.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d52:	4b2c      	ldr	r3, [pc, #176]	; (8005e04 <HAL_RCC_ClockConfig+0x250>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d119      	bne.n	8005d92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e0bf      	b.n	8005ee2 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d003      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d107      	bne.n	8005d82 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d72:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <HAL_RCC_ClockConfig+0x250>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d109      	bne.n	8005d92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e0af      	b.n	8005ee2 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d82:	4b20      	ldr	r3, [pc, #128]	; (8005e04 <HAL_RCC_ClockConfig+0x250>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e0a7      	b.n	8005ee2 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d92:	4b1c      	ldr	r3, [pc, #112]	; (8005e04 <HAL_RCC_ClockConfig+0x250>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f023 0203 	bic.w	r2, r3, #3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	4919      	ldr	r1, [pc, #100]	; (8005e04 <HAL_RCC_ClockConfig+0x250>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005da4:	f7fd fcd0 	bl	8003748 <HAL_GetTick>
 8005da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005daa:	e00a      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dac:	f7fd fccc 	bl	8003748 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e08f      	b.n	8005ee2 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dc2:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <HAL_RCC_ClockConfig+0x250>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 020c 	and.w	r2, r3, #12
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d1eb      	bne.n	8005dac <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <HAL_RCC_ClockConfig+0x24c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d212      	bcs.n	8005e08 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de2:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <HAL_RCC_ClockConfig+0x24c>)
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dea:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <HAL_RCC_ClockConfig+0x24c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d007      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e072      	b.n	8005ee2 <HAL_RCC_ClockConfig+0x32e>
 8005dfc:	08010424 	.word	0x08010424
 8005e00:	40023c00 	.word	0x40023c00
 8005e04:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d025      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d018      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x29a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e24:	d013      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x29a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e2e:	d00e      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x29a>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005e38:	d009      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x29a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005e42:	d004      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x29a>
 8005e44:	f240 21c5 	movw	r1, #709	; 0x2c5
 8005e48:	4828      	ldr	r0, [pc, #160]	; (8005eec <HAL_RCC_ClockConfig+0x338>)
 8005e4a:	f7fc fec4 	bl	8002bd6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e4e:	4b28      	ldr	r3, [pc, #160]	; (8005ef0 <HAL_RCC_ClockConfig+0x33c>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	4925      	ldr	r1, [pc, #148]	; (8005ef0 <HAL_RCC_ClockConfig+0x33c>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d026      	beq.n	8005eba <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d018      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x2f2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7c:	d013      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x2f2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e86:	d00e      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x2f2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005e90:	d009      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x2f2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005e9a:	d004      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x2f2>
 8005e9c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8005ea0:	4812      	ldr	r0, [pc, #72]	; (8005eec <HAL_RCC_ClockConfig+0x338>)
 8005ea2:	f7fc fe98 	bl	8002bd6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ea6:	4b12      	ldr	r3, [pc, #72]	; (8005ef0 <HAL_RCC_ClockConfig+0x33c>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	490e      	ldr	r1, [pc, #56]	; (8005ef0 <HAL_RCC_ClockConfig+0x33c>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eba:	f000 f855 	bl	8005f68 <HAL_RCC_GetSysClockFreq>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <HAL_RCC_ClockConfig+0x33c>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	490a      	ldr	r1, [pc, #40]	; (8005ef4 <HAL_RCC_ClockConfig+0x340>)
 8005ecc:	5ccb      	ldrb	r3, [r1, r3]
 8005ece:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed2:	4a09      	ldr	r2, [pc, #36]	; (8005ef8 <HAL_RCC_ClockConfig+0x344>)
 8005ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ed6:	4b09      	ldr	r3, [pc, #36]	; (8005efc <HAL_RCC_ClockConfig+0x348>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fd fbf0 	bl	80036c0 <HAL_InitTick>

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	08010424 	.word	0x08010424
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	080105dc 	.word	0x080105dc
 8005ef8:	20000154 	.word	0x20000154
 8005efc:	20000158 	.word	0x20000158

08005f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f04:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f06:	681b      	ldr	r3, [r3, #0]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000154 	.word	0x20000154

08005f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f1c:	f7ff fff0 	bl	8005f00 <HAL_RCC_GetHCLKFreq>
 8005f20:	4602      	mov	r2, r0
 8005f22:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	0a9b      	lsrs	r3, r3, #10
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	4903      	ldr	r1, [pc, #12]	; (8005f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f2e:	5ccb      	ldrb	r3, [r1, r3]
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40023800 	.word	0x40023800
 8005f3c:	080105ec 	.word	0x080105ec

08005f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f44:	f7ff ffdc 	bl	8005f00 <HAL_RCC_GetHCLKFreq>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	0b5b      	lsrs	r3, r3, #13
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	4903      	ldr	r1, [pc, #12]	; (8005f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f56:	5ccb      	ldrb	r3, [r1, r3]
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40023800 	.word	0x40023800
 8005f64:	080105ec 	.word	0x080105ec

08005f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f6c:	b088      	sub	sp, #32
 8005f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f84:	4bce      	ldr	r3, [pc, #824]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 030c 	and.w	r3, r3, #12
 8005f8c:	2b0c      	cmp	r3, #12
 8005f8e:	f200 818d 	bhi.w	80062ac <HAL_RCC_GetSysClockFreq+0x344>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <HAL_RCC_GetSysClockFreq+0x30>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	080062ad 	.word	0x080062ad
 8005fa0:	080062ad 	.word	0x080062ad
 8005fa4:	080062ad 	.word	0x080062ad
 8005fa8:	08005fd3 	.word	0x08005fd3
 8005fac:	080062ad 	.word	0x080062ad
 8005fb0:	080062ad 	.word	0x080062ad
 8005fb4:	080062ad 	.word	0x080062ad
 8005fb8:	08005fd9 	.word	0x08005fd9
 8005fbc:	080062ad 	.word	0x080062ad
 8005fc0:	080062ad 	.word	0x080062ad
 8005fc4:	080062ad 	.word	0x080062ad
 8005fc8:	0800614d 	.word	0x0800614d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fcc:	4bbd      	ldr	r3, [pc, #756]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005fce:	61bb      	str	r3, [r7, #24]
       break;
 8005fd0:	e16f      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fd2:	4bbd      	ldr	r3, [pc, #756]	; (80062c8 <HAL_RCC_GetSysClockFreq+0x360>)
 8005fd4:	61bb      	str	r3, [r7, #24]
      break;
 8005fd6:	e16c      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fd8:	4bb9      	ldr	r3, [pc, #740]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fe0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fe2:	4bb7      	ldr	r3, [pc, #732]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d053      	beq.n	8006096 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fee:	4bb4      	ldr	r3, [pc, #720]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	099b      	lsrs	r3, r3, #6
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ffe:	f04f 0100 	mov.w	r1, #0
 8006002:	ea02 0400 	and.w	r4, r2, r0
 8006006:	603c      	str	r4, [r7, #0]
 8006008:	400b      	ands	r3, r1
 800600a:	607b      	str	r3, [r7, #4]
 800600c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006010:	4620      	mov	r0, r4
 8006012:	4629      	mov	r1, r5
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	014b      	lsls	r3, r1, #5
 800601e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006022:	0142      	lsls	r2, r0, #5
 8006024:	4610      	mov	r0, r2
 8006026:	4619      	mov	r1, r3
 8006028:	4623      	mov	r3, r4
 800602a:	1ac0      	subs	r0, r0, r3
 800602c:	462b      	mov	r3, r5
 800602e:	eb61 0103 	sbc.w	r1, r1, r3
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	018b      	lsls	r3, r1, #6
 800603c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006040:	0182      	lsls	r2, r0, #6
 8006042:	1a12      	subs	r2, r2, r0
 8006044:	eb63 0301 	sbc.w	r3, r3, r1
 8006048:	f04f 0000 	mov.w	r0, #0
 800604c:	f04f 0100 	mov.w	r1, #0
 8006050:	00d9      	lsls	r1, r3, #3
 8006052:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006056:	00d0      	lsls	r0, r2, #3
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4621      	mov	r1, r4
 800605e:	1852      	adds	r2, r2, r1
 8006060:	4629      	mov	r1, r5
 8006062:	eb43 0101 	adc.w	r1, r3, r1
 8006066:	460b      	mov	r3, r1
 8006068:	f04f 0000 	mov.w	r0, #0
 800606c:	f04f 0100 	mov.w	r1, #0
 8006070:	0259      	lsls	r1, r3, #9
 8006072:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006076:	0250      	lsls	r0, r2, #9
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4610      	mov	r0, r2
 800607e:	4619      	mov	r1, r3
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	461a      	mov	r2, r3
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	f7fa fd5a 	bl	8000b40 <__aeabi_uldivmod>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4613      	mov	r3, r2
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	e04c      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006096:	4b8a      	ldr	r3, [pc, #552]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	099b      	lsrs	r3, r3, #6
 800609c:	461a      	mov	r2, r3
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060a6:	f04f 0100 	mov.w	r1, #0
 80060aa:	ea02 0a00 	and.w	sl, r2, r0
 80060ae:	ea03 0b01 	and.w	fp, r3, r1
 80060b2:	4650      	mov	r0, sl
 80060b4:	4659      	mov	r1, fp
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	014b      	lsls	r3, r1, #5
 80060c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80060c4:	0142      	lsls	r2, r0, #5
 80060c6:	4610      	mov	r0, r2
 80060c8:	4619      	mov	r1, r3
 80060ca:	ebb0 000a 	subs.w	r0, r0, sl
 80060ce:	eb61 010b 	sbc.w	r1, r1, fp
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	018b      	lsls	r3, r1, #6
 80060dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80060e0:	0182      	lsls	r2, r0, #6
 80060e2:	1a12      	subs	r2, r2, r0
 80060e4:	eb63 0301 	sbc.w	r3, r3, r1
 80060e8:	f04f 0000 	mov.w	r0, #0
 80060ec:	f04f 0100 	mov.w	r1, #0
 80060f0:	00d9      	lsls	r1, r3, #3
 80060f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060f6:	00d0      	lsls	r0, r2, #3
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	eb12 020a 	adds.w	r2, r2, sl
 8006100:	eb43 030b 	adc.w	r3, r3, fp
 8006104:	f04f 0000 	mov.w	r0, #0
 8006108:	f04f 0100 	mov.w	r1, #0
 800610c:	0299      	lsls	r1, r3, #10
 800610e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006112:	0290      	lsls	r0, r2, #10
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4610      	mov	r0, r2
 800611a:	4619      	mov	r1, r3
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	461a      	mov	r2, r3
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	f7fa fd0c 	bl	8000b40 <__aeabi_uldivmod>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4613      	mov	r3, r2
 800612e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006130:	4b63      	ldr	r3, [pc, #396]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	0c1b      	lsrs	r3, r3, #16
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	3301      	adds	r3, #1
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	61bb      	str	r3, [r7, #24]
      break;
 800614a:	e0b2      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800614c:	4b5c      	ldr	r3, [pc, #368]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x358>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006154:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006156:	4b5a      	ldr	r3, [pc, #360]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d04d      	beq.n	80061fe <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006162:	4b57      	ldr	r3, [pc, #348]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	099b      	lsrs	r3, r3, #6
 8006168:	461a      	mov	r2, r3
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006172:	f04f 0100 	mov.w	r1, #0
 8006176:	ea02 0800 	and.w	r8, r2, r0
 800617a:	ea03 0901 	and.w	r9, r3, r1
 800617e:	4640      	mov	r0, r8
 8006180:	4649      	mov	r1, r9
 8006182:	f04f 0200 	mov.w	r2, #0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	014b      	lsls	r3, r1, #5
 800618c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006190:	0142      	lsls	r2, r0, #5
 8006192:	4610      	mov	r0, r2
 8006194:	4619      	mov	r1, r3
 8006196:	ebb0 0008 	subs.w	r0, r0, r8
 800619a:	eb61 0109 	sbc.w	r1, r1, r9
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	018b      	lsls	r3, r1, #6
 80061a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061ac:	0182      	lsls	r2, r0, #6
 80061ae:	1a12      	subs	r2, r2, r0
 80061b0:	eb63 0301 	sbc.w	r3, r3, r1
 80061b4:	f04f 0000 	mov.w	r0, #0
 80061b8:	f04f 0100 	mov.w	r1, #0
 80061bc:	00d9      	lsls	r1, r3, #3
 80061be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061c2:	00d0      	lsls	r0, r2, #3
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	eb12 0208 	adds.w	r2, r2, r8
 80061cc:	eb43 0309 	adc.w	r3, r3, r9
 80061d0:	f04f 0000 	mov.w	r0, #0
 80061d4:	f04f 0100 	mov.w	r1, #0
 80061d8:	0259      	lsls	r1, r3, #9
 80061da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80061de:	0250      	lsls	r0, r2, #9
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4610      	mov	r0, r2
 80061e6:	4619      	mov	r1, r3
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	461a      	mov	r2, r3
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	f7fa fca6 	bl	8000b40 <__aeabi_uldivmod>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4613      	mov	r3, r2
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	e04a      	b.n	8006294 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061fe:	4b30      	ldr	r3, [pc, #192]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	099b      	lsrs	r3, r3, #6
 8006204:	461a      	mov	r2, r3
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800620e:	f04f 0100 	mov.w	r1, #0
 8006212:	ea02 0400 	and.w	r4, r2, r0
 8006216:	ea03 0501 	and.w	r5, r3, r1
 800621a:	4620      	mov	r0, r4
 800621c:	4629      	mov	r1, r5
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	014b      	lsls	r3, r1, #5
 8006228:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800622c:	0142      	lsls	r2, r0, #5
 800622e:	4610      	mov	r0, r2
 8006230:	4619      	mov	r1, r3
 8006232:	1b00      	subs	r0, r0, r4
 8006234:	eb61 0105 	sbc.w	r1, r1, r5
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	018b      	lsls	r3, r1, #6
 8006242:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006246:	0182      	lsls	r2, r0, #6
 8006248:	1a12      	subs	r2, r2, r0
 800624a:	eb63 0301 	sbc.w	r3, r3, r1
 800624e:	f04f 0000 	mov.w	r0, #0
 8006252:	f04f 0100 	mov.w	r1, #0
 8006256:	00d9      	lsls	r1, r3, #3
 8006258:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800625c:	00d0      	lsls	r0, r2, #3
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	1912      	adds	r2, r2, r4
 8006264:	eb45 0303 	adc.w	r3, r5, r3
 8006268:	f04f 0000 	mov.w	r0, #0
 800626c:	f04f 0100 	mov.w	r1, #0
 8006270:	0299      	lsls	r1, r3, #10
 8006272:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006276:	0290      	lsls	r0, r2, #10
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4610      	mov	r0, r2
 800627e:	4619      	mov	r1, r3
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	461a      	mov	r2, r3
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	f7fa fc5a 	bl	8000b40 <__aeabi_uldivmod>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4613      	mov	r3, r2
 8006292:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006294:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	0f1b      	lsrs	r3, r3, #28
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	61bb      	str	r3, [r7, #24]
      break;
 80062aa:	e002      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80062ae:	61bb      	str	r3, [r7, #24]
      break;
 80062b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062b2:	69bb      	ldr	r3, [r7, #24]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3720      	adds	r7, #32
 80062b8:	46bd      	mov	sp, r7
 80062ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062be:	bf00      	nop
 80062c0:	40023800 	.word	0x40023800
 80062c4:	00f42400 	.word	0x00f42400
 80062c8:	007a1200 	.word	0x007a1200

080062cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e34b      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b0f      	cmp	r3, #15
 80062e4:	d904      	bls.n	80062f0 <HAL_RCC_OscConfig+0x24>
 80062e6:	f640 5112 	movw	r1, #3346	; 0xd12
 80062ea:	48a5      	ldr	r0, [pc, #660]	; (8006580 <HAL_RCC_OscConfig+0x2b4>)
 80062ec:	f7fc fc73 	bl	8002bd6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8096 	beq.w	800642a <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00e      	beq.n	8006324 <HAL_RCC_OscConfig+0x58>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630e:	d009      	beq.n	8006324 <HAL_RCC_OscConfig+0x58>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006318:	d004      	beq.n	8006324 <HAL_RCC_OscConfig+0x58>
 800631a:	f640 5117 	movw	r1, #3351	; 0xd17
 800631e:	4898      	ldr	r0, [pc, #608]	; (8006580 <HAL_RCC_OscConfig+0x2b4>)
 8006320:	f7fc fc59 	bl	8002bd6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006324:	4b97      	ldr	r3, [pc, #604]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f003 030c 	and.w	r3, r3, #12
 800632c:	2b04      	cmp	r3, #4
 800632e:	d019      	beq.n	8006364 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006330:	4b94      	ldr	r3, [pc, #592]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006338:	2b08      	cmp	r3, #8
 800633a:	d106      	bne.n	800634a <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800633c:	4b91      	ldr	r3, [pc, #580]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006348:	d00c      	beq.n	8006364 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800634a:	4b8e      	ldr	r3, [pc, #568]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006352:	2b0c      	cmp	r3, #12
 8006354:	d112      	bne.n	800637c <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006356:	4b8b      	ldr	r3, [pc, #556]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006362:	d10b      	bne.n	800637c <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006364:	4b87      	ldr	r3, [pc, #540]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d05b      	beq.n	8006428 <HAL_RCC_OscConfig+0x15c>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d157      	bne.n	8006428 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e2fc      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006384:	d106      	bne.n	8006394 <HAL_RCC_OscConfig+0xc8>
 8006386:	4b7f      	ldr	r3, [pc, #508]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a7e      	ldr	r2, [pc, #504]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 800638c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	e01d      	b.n	80063d0 <HAL_RCC_OscConfig+0x104>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800639c:	d10c      	bne.n	80063b8 <HAL_RCC_OscConfig+0xec>
 800639e:	4b79      	ldr	r3, [pc, #484]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a78      	ldr	r2, [pc, #480]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80063a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	4b76      	ldr	r3, [pc, #472]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a75      	ldr	r2, [pc, #468]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80063b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	e00b      	b.n	80063d0 <HAL_RCC_OscConfig+0x104>
 80063b8:	4b72      	ldr	r3, [pc, #456]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a71      	ldr	r2, [pc, #452]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80063be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	4b6f      	ldr	r3, [pc, #444]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a6e      	ldr	r2, [pc, #440]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80063ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d013      	beq.n	8006400 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d8:	f7fd f9b6 	bl	8003748 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063e0:	f7fd f9b2 	bl	8003748 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b64      	cmp	r3, #100	; 0x64
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e2c1      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063f2:	4b64      	ldr	r3, [pc, #400]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0f0      	beq.n	80063e0 <HAL_RCC_OscConfig+0x114>
 80063fe:	e014      	b.n	800642a <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006400:	f7fd f9a2 	bl	8003748 <HAL_GetTick>
 8006404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006408:	f7fd f99e 	bl	8003748 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b64      	cmp	r3, #100	; 0x64
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e2ad      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800641a:	4b5a      	ldr	r3, [pc, #360]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1f0      	bne.n	8006408 <HAL_RCC_OscConfig+0x13c>
 8006426:	e000      	b.n	800642a <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8086 	beq.w	8006544 <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_RCC_OscConfig+0x186>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d004      	beq.n	8006452 <HAL_RCC_OscConfig+0x186>
 8006448:	f640 514f 	movw	r1, #3407	; 0xd4f
 800644c:	484c      	ldr	r0, [pc, #304]	; (8006580 <HAL_RCC_OscConfig+0x2b4>)
 800644e:	f7fc fbc2 	bl	8002bd6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b1f      	cmp	r3, #31
 8006458:	d904      	bls.n	8006464 <HAL_RCC_OscConfig+0x198>
 800645a:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 800645e:	4848      	ldr	r0, [pc, #288]	; (8006580 <HAL_RCC_OscConfig+0x2b4>)
 8006460:	f7fc fbb9 	bl	8002bd6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006464:	4b47      	ldr	r3, [pc, #284]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 030c 	and.w	r3, r3, #12
 800646c:	2b00      	cmp	r3, #0
 800646e:	d017      	beq.n	80064a0 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006470:	4b44      	ldr	r3, [pc, #272]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006478:	2b08      	cmp	r3, #8
 800647a:	d105      	bne.n	8006488 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800647c:	4b41      	ldr	r3, [pc, #260]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00b      	beq.n	80064a0 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006488:	4b3e      	ldr	r3, [pc, #248]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006490:	2b0c      	cmp	r3, #12
 8006492:	d11c      	bne.n	80064ce <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006494:	4b3b      	ldr	r3, [pc, #236]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d116      	bne.n	80064ce <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064a0:	4b38      	ldr	r3, [pc, #224]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCC_OscConfig+0x1ec>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d001      	beq.n	80064b8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e25e      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b8:	4b32      	ldr	r3, [pc, #200]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	492f      	ldr	r1, [pc, #188]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064cc:	e03a      	b.n	8006544 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d020      	beq.n	8006518 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064d6:	4b2c      	ldr	r3, [pc, #176]	; (8006588 <HAL_RCC_OscConfig+0x2bc>)
 80064d8:	2201      	movs	r2, #1
 80064da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064dc:	f7fd f934 	bl	8003748 <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064e4:	f7fd f930 	bl	8003748 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e23f      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f6:	4b23      	ldr	r3, [pc, #140]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0f0      	beq.n	80064e4 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006502:	4b20      	ldr	r3, [pc, #128]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	491c      	ldr	r1, [pc, #112]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 8006512:	4313      	orrs	r3, r2
 8006514:	600b      	str	r3, [r1, #0]
 8006516:	e015      	b.n	8006544 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006518:	4b1b      	ldr	r3, [pc, #108]	; (8006588 <HAL_RCC_OscConfig+0x2bc>)
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651e:	f7fd f913 	bl	8003748 <HAL_GetTick>
 8006522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006524:	e008      	b.n	8006538 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006526:	f7fd f90f 	bl	8003748 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d901      	bls.n	8006538 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e21e      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006538:	4b12      	ldr	r3, [pc, #72]	; (8006584 <HAL_RCC_OscConfig+0x2b8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1f0      	bne.n	8006526 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d045      	beq.n	80065dc <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_RCC_OscConfig+0x29e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d004      	beq.n	800656a <HAL_RCC_OscConfig+0x29e>
 8006560:	f640 5196 	movw	r1, #3478	; 0xd96
 8006564:	4806      	ldr	r0, [pc, #24]	; (8006580 <HAL_RCC_OscConfig+0x2b4>)
 8006566:	f7fc fb36 	bl	8002bd6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01e      	beq.n	80065b0 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006572:	4b06      	ldr	r3, [pc, #24]	; (800658c <HAL_RCC_OscConfig+0x2c0>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006578:	f7fd f8e6 	bl	8003748 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800657e:	e010      	b.n	80065a2 <HAL_RCC_OscConfig+0x2d6>
 8006580:	0801045c 	.word	0x0801045c
 8006584:	40023800 	.word	0x40023800
 8006588:	42470000 	.word	0x42470000
 800658c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006590:	f7fd f8da 	bl	8003748 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e1e9      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065a2:	4ba4      	ldr	r3, [pc, #656]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 80065a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0f0      	beq.n	8006590 <HAL_RCC_OscConfig+0x2c4>
 80065ae:	e015      	b.n	80065dc <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065b0:	4ba1      	ldr	r3, [pc, #644]	; (8006838 <HAL_RCC_OscConfig+0x56c>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b6:	f7fd f8c7 	bl	8003748 <HAL_GetTick>
 80065ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065bc:	e008      	b.n	80065d0 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065be:	f7fd f8c3 	bl	8003748 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d901      	bls.n	80065d0 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e1d2      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d0:	4b98      	ldr	r3, [pc, #608]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 80065d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1f0      	bne.n	80065be <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 80a8 	beq.w	800673a <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ea:	2300      	movs	r3, #0
 80065ec:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00c      	beq.n	8006610 <HAL_RCC_OscConfig+0x344>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d008      	beq.n	8006610 <HAL_RCC_OscConfig+0x344>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	2b05      	cmp	r3, #5
 8006604:	d004      	beq.n	8006610 <HAL_RCC_OscConfig+0x344>
 8006606:	f640 51c2 	movw	r1, #3522	; 0xdc2
 800660a:	488c      	ldr	r0, [pc, #560]	; (800683c <HAL_RCC_OscConfig+0x570>)
 800660c:	f7fc fae3 	bl	8002bd6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006610:	4b88      	ldr	r3, [pc, #544]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10f      	bne.n	800663c <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800661c:	2300      	movs	r3, #0
 800661e:	60bb      	str	r3, [r7, #8]
 8006620:	4b84      	ldr	r3, [pc, #528]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	4a83      	ldr	r2, [pc, #524]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 8006626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800662a:	6413      	str	r3, [r2, #64]	; 0x40
 800662c:	4b81      	ldr	r3, [pc, #516]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006638:	2301      	movs	r3, #1
 800663a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663c:	4b80      	ldr	r3, [pc, #512]	; (8006840 <HAL_RCC_OscConfig+0x574>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006644:	2b00      	cmp	r3, #0
 8006646:	d118      	bne.n	800667a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006648:	4b7d      	ldr	r3, [pc, #500]	; (8006840 <HAL_RCC_OscConfig+0x574>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a7c      	ldr	r2, [pc, #496]	; (8006840 <HAL_RCC_OscConfig+0x574>)
 800664e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006654:	f7fd f878 	bl	8003748 <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665c:	f7fd f874 	bl	8003748 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e183      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666e:	4b74      	ldr	r3, [pc, #464]	; (8006840 <HAL_RCC_OscConfig+0x574>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0f0      	beq.n	800665c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d106      	bne.n	8006690 <HAL_RCC_OscConfig+0x3c4>
 8006682:	4b6c      	ldr	r3, [pc, #432]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 8006684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006686:	4a6b      	ldr	r2, [pc, #428]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	6713      	str	r3, [r2, #112]	; 0x70
 800668e:	e01c      	b.n	80066ca <HAL_RCC_OscConfig+0x3fe>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2b05      	cmp	r3, #5
 8006696:	d10c      	bne.n	80066b2 <HAL_RCC_OscConfig+0x3e6>
 8006698:	4b66      	ldr	r3, [pc, #408]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 800669a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669c:	4a65      	ldr	r2, [pc, #404]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 800669e:	f043 0304 	orr.w	r3, r3, #4
 80066a2:	6713      	str	r3, [r2, #112]	; 0x70
 80066a4:	4b63      	ldr	r3, [pc, #396]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 80066a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a8:	4a62      	ldr	r2, [pc, #392]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	6713      	str	r3, [r2, #112]	; 0x70
 80066b0:	e00b      	b.n	80066ca <HAL_RCC_OscConfig+0x3fe>
 80066b2:	4b60      	ldr	r3, [pc, #384]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	4a5f      	ldr	r2, [pc, #380]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	6713      	str	r3, [r2, #112]	; 0x70
 80066be:	4b5d      	ldr	r3, [pc, #372]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 80066c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c2:	4a5c      	ldr	r2, [pc, #368]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 80066c4:	f023 0304 	bic.w	r3, r3, #4
 80066c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d015      	beq.n	80066fe <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d2:	f7fd f839 	bl	8003748 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d8:	e00a      	b.n	80066f0 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066da:	f7fd f835 	bl	8003748 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e142      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f0:	4b50      	ldr	r3, [pc, #320]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 80066f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0ee      	beq.n	80066da <HAL_RCC_OscConfig+0x40e>
 80066fc:	e014      	b.n	8006728 <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fe:	f7fd f823 	bl	8003748 <HAL_GetTick>
 8006702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006704:	e00a      	b.n	800671c <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006706:	f7fd f81f 	bl	8003748 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	f241 3288 	movw	r2, #5000	; 0x1388
 8006714:	4293      	cmp	r3, r2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e12c      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800671c:	4b45      	ldr	r3, [pc, #276]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 800671e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1ee      	bne.n	8006706 <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006728:	7dfb      	ldrb	r3, [r7, #23]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d105      	bne.n	800673a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800672e:	4b41      	ldr	r3, [pc, #260]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	4a40      	ldr	r2, [pc, #256]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 8006734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006738:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00c      	beq.n	800675c <HAL_RCC_OscConfig+0x490>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d008      	beq.n	800675c <HAL_RCC_OscConfig+0x490>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d004      	beq.n	800675c <HAL_RCC_OscConfig+0x490>
 8006752:	f640 6105 	movw	r1, #3589	; 0xe05
 8006756:	4839      	ldr	r0, [pc, #228]	; (800683c <HAL_RCC_OscConfig+0x570>)
 8006758:	f7fc fa3d 	bl	8002bd6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8107 	beq.w	8006974 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006766:	4b33      	ldr	r3, [pc, #204]	; (8006834 <HAL_RCC_OscConfig+0x568>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 030c 	and.w	r3, r3, #12
 800676e:	2b08      	cmp	r3, #8
 8006770:	f000 80c0 	beq.w	80068f4 <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	2b02      	cmp	r3, #2
 800677a:	f040 80a4 	bne.w	80068c6 <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <HAL_RCC_OscConfig+0x4ce>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800678e:	d004      	beq.n	800679a <HAL_RCC_OscConfig+0x4ce>
 8006790:	f640 610e 	movw	r1, #3598	; 0xe0e
 8006794:	4829      	ldr	r0, [pc, #164]	; (800683c <HAL_RCC_OscConfig+0x570>)
 8006796:	f7fc fa1e 	bl	8002bd6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	2b3f      	cmp	r3, #63	; 0x3f
 80067a0:	d904      	bls.n	80067ac <HAL_RCC_OscConfig+0x4e0>
 80067a2:	f640 610f 	movw	r1, #3599	; 0xe0f
 80067a6:	4825      	ldr	r0, [pc, #148]	; (800683c <HAL_RCC_OscConfig+0x570>)
 80067a8:	f7fc fa15 	bl	8002bd6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	2b31      	cmp	r3, #49	; 0x31
 80067b2:	d904      	bls.n	80067be <HAL_RCC_OscConfig+0x4f2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80067bc:	d904      	bls.n	80067c8 <HAL_RCC_OscConfig+0x4fc>
 80067be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80067c2:	481e      	ldr	r0, [pc, #120]	; (800683c <HAL_RCC_OscConfig+0x570>)
 80067c4:	f7fc fa07 	bl	8002bd6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d010      	beq.n	80067f2 <HAL_RCC_OscConfig+0x526>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d00c      	beq.n	80067f2 <HAL_RCC_OscConfig+0x526>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	2b06      	cmp	r3, #6
 80067de:	d008      	beq.n	80067f2 <HAL_RCC_OscConfig+0x526>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d004      	beq.n	80067f2 <HAL_RCC_OscConfig+0x526>
 80067e8:	f640 6111 	movw	r1, #3601	; 0xe11
 80067ec:	4813      	ldr	r0, [pc, #76]	; (800683c <HAL_RCC_OscConfig+0x570>)
 80067ee:	f7fc f9f2 	bl	8002bd6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d903      	bls.n	8006802 <HAL_RCC_OscConfig+0x536>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	2b0f      	cmp	r3, #15
 8006800:	d904      	bls.n	800680c <HAL_RCC_OscConfig+0x540>
 8006802:	f640 6112 	movw	r1, #3602	; 0xe12
 8006806:	480d      	ldr	r0, [pc, #52]	; (800683c <HAL_RCC_OscConfig+0x570>)
 8006808:	f7fc f9e5 	bl	8002bd6 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006810:	2b01      	cmp	r3, #1
 8006812:	d903      	bls.n	800681c <HAL_RCC_OscConfig+0x550>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	2b07      	cmp	r3, #7
 800681a:	d904      	bls.n	8006826 <HAL_RCC_OscConfig+0x55a>
 800681c:	f640 6113 	movw	r1, #3603	; 0xe13
 8006820:	4806      	ldr	r0, [pc, #24]	; (800683c <HAL_RCC_OscConfig+0x570>)
 8006822:	f7fc f9d8 	bl	8002bd6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006826:	4b07      	ldr	r3, [pc, #28]	; (8006844 <HAL_RCC_OscConfig+0x578>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682c:	f7fc ff8c 	bl	8003748 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006832:	e012      	b.n	800685a <HAL_RCC_OscConfig+0x58e>
 8006834:	40023800 	.word	0x40023800
 8006838:	42470e80 	.word	0x42470e80
 800683c:	0801045c 	.word	0x0801045c
 8006840:	40007000 	.word	0x40007000
 8006844:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006848:	f7fc ff7e 	bl	8003748 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e08d      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800685a:	4b49      	ldr	r3, [pc, #292]	; (8006980 <HAL_RCC_OscConfig+0x6b4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1f0      	bne.n	8006848 <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69da      	ldr	r2, [r3, #28]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	019b      	lsls	r3, r3, #6
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	3b01      	subs	r3, #1
 8006880:	041b      	lsls	r3, r3, #16
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006888:	061b      	lsls	r3, r3, #24
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	071b      	lsls	r3, r3, #28
 8006892:	493b      	ldr	r1, [pc, #236]	; (8006980 <HAL_RCC_OscConfig+0x6b4>)
 8006894:	4313      	orrs	r3, r2
 8006896:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006898:	4b3a      	ldr	r3, [pc, #232]	; (8006984 <HAL_RCC_OscConfig+0x6b8>)
 800689a:	2201      	movs	r2, #1
 800689c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689e:	f7fc ff53 	bl	8003748 <HAL_GetTick>
 80068a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a4:	e008      	b.n	80068b8 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068a6:	f7fc ff4f 	bl	8003748 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e05e      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068b8:	4b31      	ldr	r3, [pc, #196]	; (8006980 <HAL_RCC_OscConfig+0x6b4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0f0      	beq.n	80068a6 <HAL_RCC_OscConfig+0x5da>
 80068c4:	e056      	b.n	8006974 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068c6:	4b2f      	ldr	r3, [pc, #188]	; (8006984 <HAL_RCC_OscConfig+0x6b8>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068cc:	f7fc ff3c 	bl	8003748 <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068d4:	f7fc ff38 	bl	8003748 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e047      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068e6:	4b26      	ldr	r3, [pc, #152]	; (8006980 <HAL_RCC_OscConfig+0x6b4>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1f0      	bne.n	80068d4 <HAL_RCC_OscConfig+0x608>
 80068f2:	e03f      	b.n	8006974 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e03a      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006900:	4b1f      	ldr	r3, [pc, #124]	; (8006980 <HAL_RCC_OscConfig+0x6b4>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d030      	beq.n	8006970 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006918:	429a      	cmp	r2, r3
 800691a:	d129      	bne.n	8006970 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006926:	429a      	cmp	r2, r3
 8006928:	d122      	bne.n	8006970 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006930:	4013      	ands	r3, r2
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006938:	4293      	cmp	r3, r2
 800693a:	d119      	bne.n	8006970 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	085b      	lsrs	r3, r3, #1
 8006948:	3b01      	subs	r3, #1
 800694a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800694c:	429a      	cmp	r2, r3
 800694e:	d10f      	bne.n	8006970 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800695c:	429a      	cmp	r2, r3
 800695e:	d107      	bne.n	8006970 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800696c:	429a      	cmp	r2, r3
 800696e:	d001      	beq.n	8006974 <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	40023800 	.word	0x40023800
 8006984:	42470060 	.word	0x42470060

08006988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e184      	b.n	8006ca4 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a72      	ldr	r2, [pc, #456]	; (8006b68 <HAL_SPI_Init+0x1e0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d013      	beq.n	80069cc <HAL_SPI_Init+0x44>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a70      	ldr	r2, [pc, #448]	; (8006b6c <HAL_SPI_Init+0x1e4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00e      	beq.n	80069cc <HAL_SPI_Init+0x44>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a6f      	ldr	r2, [pc, #444]	; (8006b70 <HAL_SPI_Init+0x1e8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d009      	beq.n	80069cc <HAL_SPI_Init+0x44>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a6d      	ldr	r2, [pc, #436]	; (8006b74 <HAL_SPI_Init+0x1ec>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <HAL_SPI_Init+0x44>
 80069c2:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80069c6:	486c      	ldr	r0, [pc, #432]	; (8006b78 <HAL_SPI_Init+0x1f0>)
 80069c8:	f7fc f905 	bl	8002bd6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d009      	beq.n	80069e8 <HAL_SPI_Init+0x60>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069dc:	d004      	beq.n	80069e8 <HAL_SPI_Init+0x60>
 80069de:	f240 1143 	movw	r1, #323	; 0x143
 80069e2:	4865      	ldr	r0, [pc, #404]	; (8006b78 <HAL_SPI_Init+0x1f0>)
 80069e4:	f7fc f8f7 	bl	8002bd6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00e      	beq.n	8006a0e <HAL_SPI_Init+0x86>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f8:	d009      	beq.n	8006a0e <HAL_SPI_Init+0x86>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a02:	d004      	beq.n	8006a0e <HAL_SPI_Init+0x86>
 8006a04:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006a08:	485b      	ldr	r0, [pc, #364]	; (8006b78 <HAL_SPI_Init+0x1f0>)
 8006a0a:	f7fc f8e4 	bl	8002bd6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a16:	d008      	beq.n	8006a2a <HAL_SPI_Init+0xa2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <HAL_SPI_Init+0xa2>
 8006a20:	f240 1145 	movw	r1, #325	; 0x145
 8006a24:	4854      	ldr	r0, [pc, #336]	; (8006b78 <HAL_SPI_Init+0x1f0>)
 8006a26:	f7fc f8d6 	bl	8002bd6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a32:	d00d      	beq.n	8006a50 <HAL_SPI_Init+0xc8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d009      	beq.n	8006a50 <HAL_SPI_Init+0xc8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a44:	d004      	beq.n	8006a50 <HAL_SPI_Init+0xc8>
 8006a46:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006a4a:	484b      	ldr	r0, [pc, #300]	; (8006b78 <HAL_SPI_Init+0x1f0>)
 8006a4c:	f7fc f8c3 	bl	8002bd6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d020      	beq.n	8006a9a <HAL_SPI_Init+0x112>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d01c      	beq.n	8006a9a <HAL_SPI_Init+0x112>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	2b10      	cmp	r3, #16
 8006a66:	d018      	beq.n	8006a9a <HAL_SPI_Init+0x112>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	2b18      	cmp	r3, #24
 8006a6e:	d014      	beq.n	8006a9a <HAL_SPI_Init+0x112>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d010      	beq.n	8006a9a <HAL_SPI_Init+0x112>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	2b28      	cmp	r3, #40	; 0x28
 8006a7e:	d00c      	beq.n	8006a9a <HAL_SPI_Init+0x112>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	2b30      	cmp	r3, #48	; 0x30
 8006a86:	d008      	beq.n	8006a9a <HAL_SPI_Init+0x112>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	2b38      	cmp	r3, #56	; 0x38
 8006a8e:	d004      	beq.n	8006a9a <HAL_SPI_Init+0x112>
 8006a90:	f240 1147 	movw	r1, #327	; 0x147
 8006a94:	4838      	ldr	r0, [pc, #224]	; (8006b78 <HAL_SPI_Init+0x1f0>)
 8006a96:	f7fc f89e 	bl	8002bd6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d008      	beq.n	8006ab4 <HAL_SPI_Init+0x12c>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	2b80      	cmp	r3, #128	; 0x80
 8006aa8:	d004      	beq.n	8006ab4 <HAL_SPI_Init+0x12c>
 8006aaa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006aae:	4832      	ldr	r0, [pc, #200]	; (8006b78 <HAL_SPI_Init+0x1f0>)
 8006ab0:	f7fc f891 	bl	8002bd6 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d008      	beq.n	8006ace <HAL_SPI_Init+0x146>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	2b10      	cmp	r3, #16
 8006ac2:	d004      	beq.n	8006ace <HAL_SPI_Init+0x146>
 8006ac4:	f240 1149 	movw	r1, #329	; 0x149
 8006ac8:	482b      	ldr	r0, [pc, #172]	; (8006b78 <HAL_SPI_Init+0x1f0>)
 8006aca:	f7fc f884 	bl	8002bd6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d152      	bne.n	8006b7c <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d008      	beq.n	8006af0 <HAL_SPI_Init+0x168>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d004      	beq.n	8006af0 <HAL_SPI_Init+0x168>
 8006ae6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006aea:	4823      	ldr	r0, [pc, #140]	; (8006b78 <HAL_SPI_Init+0x1f0>)
 8006aec:	f7fc f873 	bl	8002bd6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d008      	beq.n	8006b0a <HAL_SPI_Init+0x182>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d004      	beq.n	8006b0a <HAL_SPI_Init+0x182>
 8006b00:	f240 114d 	movw	r1, #333	; 0x14d
 8006b04:	481c      	ldr	r0, [pc, #112]	; (8006b78 <HAL_SPI_Init+0x1f0>)
 8006b06:	f7fc f866 	bl	8002bd6 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b12:	d125      	bne.n	8006b60 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d05a      	beq.n	8006bd2 <HAL_SPI_Init+0x24a>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d056      	beq.n	8006bd2 <HAL_SPI_Init+0x24a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	2b10      	cmp	r3, #16
 8006b2a:	d052      	beq.n	8006bd2 <HAL_SPI_Init+0x24a>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	2b18      	cmp	r3, #24
 8006b32:	d04e      	beq.n	8006bd2 <HAL_SPI_Init+0x24a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	d04a      	beq.n	8006bd2 <HAL_SPI_Init+0x24a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	2b28      	cmp	r3, #40	; 0x28
 8006b42:	d046      	beq.n	8006bd2 <HAL_SPI_Init+0x24a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	2b30      	cmp	r3, #48	; 0x30
 8006b4a:	d042      	beq.n	8006bd2 <HAL_SPI_Init+0x24a>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	2b38      	cmp	r3, #56	; 0x38
 8006b52:	d03e      	beq.n	8006bd2 <HAL_SPI_Init+0x24a>
 8006b54:	f240 1151 	movw	r1, #337	; 0x151
 8006b58:	4807      	ldr	r0, [pc, #28]	; (8006b78 <HAL_SPI_Init+0x1f0>)
 8006b5a:	f7fc f83c 	bl	8002bd6 <assert_failed>
 8006b5e:	e038      	b.n	8006bd2 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	61da      	str	r2, [r3, #28]
 8006b66:	e034      	b.n	8006bd2 <HAL_SPI_Init+0x24a>
 8006b68:	40013000 	.word	0x40013000
 8006b6c:	40003800 	.word	0x40003800
 8006b70:	40003c00 	.word	0x40003c00
 8006b74:	40013400 	.word	0x40013400
 8006b78:	08010498 	.word	0x08010498
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d020      	beq.n	8006bc6 <HAL_SPI_Init+0x23e>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d01c      	beq.n	8006bc6 <HAL_SPI_Init+0x23e>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	2b10      	cmp	r3, #16
 8006b92:	d018      	beq.n	8006bc6 <HAL_SPI_Init+0x23e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	2b18      	cmp	r3, #24
 8006b9a:	d014      	beq.n	8006bc6 <HAL_SPI_Init+0x23e>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	2b20      	cmp	r3, #32
 8006ba2:	d010      	beq.n	8006bc6 <HAL_SPI_Init+0x23e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	2b28      	cmp	r3, #40	; 0x28
 8006baa:	d00c      	beq.n	8006bc6 <HAL_SPI_Init+0x23e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	2b30      	cmp	r3, #48	; 0x30
 8006bb2:	d008      	beq.n	8006bc6 <HAL_SPI_Init+0x23e>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	2b38      	cmp	r3, #56	; 0x38
 8006bba:	d004      	beq.n	8006bc6 <HAL_SPI_Init+0x23e>
 8006bbc:	f240 115b 	movw	r1, #347	; 0x15b
 8006bc0:	483a      	ldr	r0, [pc, #232]	; (8006cac <HAL_SPI_Init+0x324>)
 8006bc2:	f7fc f808 	bl	8002bd6 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d106      	bne.n	8006bf2 <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7fc f919 	bl	8002e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c08:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c42:	431a      	orrs	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c56:	ea42 0103 	orr.w	r1, r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	0c1b      	lsrs	r3, r3, #16
 8006c70:	f003 0104 	and.w	r1, r3, #4
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	f003 0210 	and.w	r2, r3, #16
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	69da      	ldr	r2, [r3, #28]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	08010498 	.word	0x08010498

08006cb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d009      	beq.n	8006ce0 <HAL_SPI_Transmit+0x30>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd4:	d004      	beq.n	8006ce0 <HAL_SPI_Transmit+0x30>
 8006cd6:	f240 310a 	movw	r1, #778	; 0x30a
 8006cda:	4893      	ldr	r0, [pc, #588]	; (8006f28 <HAL_SPI_Transmit+0x278>)
 8006cdc:	f7fb ff7b 	bl	8002bd6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_SPI_Transmit+0x3e>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e128      	b.n	8006f40 <HAL_SPI_Transmit+0x290>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cf6:	f7fc fd27 	bl	8003748 <HAL_GetTick>
 8006cfa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d002      	beq.n	8006d12 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d10:	e10d      	b.n	8006f2e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <HAL_SPI_Transmit+0x6e>
 8006d18:	88fb      	ldrh	r3, [r7, #6]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d102      	bne.n	8006d24 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d22:	e104      	b.n	8006f2e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2203      	movs	r2, #3
 8006d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	88fa      	ldrh	r2, [r7, #6]
 8006d3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	88fa      	ldrh	r2, [r7, #6]
 8006d42:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6a:	d10f      	bne.n	8006d8c <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d007      	beq.n	8006daa <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db2:	d14b      	bne.n	8006e4c <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <HAL_SPI_Transmit+0x112>
 8006dbc:	8afb      	ldrh	r3, [r7, #22]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d13e      	bne.n	8006e40 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	881a      	ldrh	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd2:	1c9a      	adds	r2, r3, #2
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006de6:	e02b      	b.n	8006e40 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d112      	bne.n	8006e1c <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	881a      	ldrh	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	1c9a      	adds	r2, r3, #2
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	3b01      	subs	r3, #1
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e1a:	e011      	b.n	8006e40 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e1c:	f7fc fc94 	bl	8003748 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d803      	bhi.n	8006e34 <HAL_SPI_Transmit+0x184>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e32:	d102      	bne.n	8006e3a <HAL_SPI_Transmit+0x18a>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e3e:	e076      	b.n	8006f2e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1ce      	bne.n	8006de8 <HAL_SPI_Transmit+0x138>
 8006e4a:	e04c      	b.n	8006ee6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <HAL_SPI_Transmit+0x1aa>
 8006e54:	8afb      	ldrh	r3, [r7, #22]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d140      	bne.n	8006edc <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	330c      	adds	r3, #12
 8006e64:	7812      	ldrb	r2, [r2, #0]
 8006e66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e80:	e02c      	b.n	8006edc <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d113      	bne.n	8006eb8 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	330c      	adds	r3, #12
 8006e9a:	7812      	ldrb	r2, [r2, #0]
 8006e9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	86da      	strh	r2, [r3, #54]	; 0x36
 8006eb6:	e011      	b.n	8006edc <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eb8:	f7fc fc46 	bl	8003748 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d803      	bhi.n	8006ed0 <HAL_SPI_Transmit+0x220>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d102      	bne.n	8006ed6 <HAL_SPI_Transmit+0x226>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006eda:	e028      	b.n	8006f2e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1cd      	bne.n	8006e82 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 fbda 	bl	80076a4 <SPI_EndRxTxTransaction>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f04:	2300      	movs	r3, #0
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	77fb      	strb	r3, [r7, #31]
 8006f26:	e002      	b.n	8006f2e <HAL_SPI_Transmit+0x27e>
 8006f28:	08010498 	.word	0x08010498
  }

error:
 8006f2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3720      	adds	r7, #32
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	4613      	mov	r3, r2
 8006f56:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f64:	d112      	bne.n	8006f8c <HAL_SPI_Receive+0x44>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10e      	bne.n	8006f8c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2204      	movs	r2, #4
 8006f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f76:	88fa      	ldrh	r2, [r7, #6]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 f8f2 	bl	800716c <HAL_SPI_TransmitReceive>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	e0ea      	b.n	8007162 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d101      	bne.n	8006f9a <HAL_SPI_Receive+0x52>
 8006f96:	2302      	movs	r3, #2
 8006f98:	e0e3      	b.n	8007162 <HAL_SPI_Receive+0x21a>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fa2:	f7fc fbd1 	bl	8003748 <HAL_GetTick>
 8006fa6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d002      	beq.n	8006fba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fb8:	e0ca      	b.n	8007150 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_SPI_Receive+0x7e>
 8006fc0:	88fb      	ldrh	r3, [r7, #6]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fca:	e0c1      	b.n	8007150 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2204      	movs	r2, #4
 8006fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	88fa      	ldrh	r2, [r7, #6]
 8006fe4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007012:	d10f      	bne.n	8007034 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007022:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007032:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	d007      	beq.n	8007052 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007050:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d162      	bne.n	8007120 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800705a:	e02e      	b.n	80070ba <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b01      	cmp	r3, #1
 8007068:	d115      	bne.n	8007096 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f103 020c 	add.w	r2, r3, #12
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	7812      	ldrb	r2, [r2, #0]
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007094:	e011      	b.n	80070ba <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007096:	f7fc fb57 	bl	8003748 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d803      	bhi.n	80070ae <HAL_SPI_Receive+0x166>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ac:	d102      	bne.n	80070b4 <HAL_SPI_Receive+0x16c>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d102      	bne.n	80070ba <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070b8:	e04a      	b.n	8007150 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070be:	b29b      	uxth	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1cb      	bne.n	800705c <HAL_SPI_Receive+0x114>
 80070c4:	e031      	b.n	800712a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d113      	bne.n	80070fc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	b292      	uxth	r2, r2
 80070e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	1c9a      	adds	r2, r3, #2
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	3b01      	subs	r3, #1
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070fa:	e011      	b.n	8007120 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070fc:	f7fc fb24 	bl	8003748 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d803      	bhi.n	8007114 <HAL_SPI_Receive+0x1cc>
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007112:	d102      	bne.n	800711a <HAL_SPI_Receive+0x1d2>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d102      	bne.n	8007120 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800711e:	e017      	b.n	8007150 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1cd      	bne.n	80070c6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 fa52 	bl	80075d8 <SPI_EndRxTransaction>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2220      	movs	r2, #32
 800713e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	75fb      	strb	r3, [r7, #23]
 800714c:	e000      	b.n	8007150 <HAL_SPI_Receive+0x208>
  }

error :
 800714e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08c      	sub	sp, #48	; 0x30
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800717a:	2301      	movs	r3, #1
 800717c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <HAL_SPI_TransmitReceive+0x2a>
 800718c:	f240 417e 	movw	r1, #1150	; 0x47e
 8007190:	4884      	ldr	r0, [pc, #528]	; (80073a4 <HAL_SPI_TransmitReceive+0x238>)
 8007192:	f7fb fd20 	bl	8002bd6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800719c:	2b01      	cmp	r3, #1
 800719e:	d101      	bne.n	80071a4 <HAL_SPI_TransmitReceive+0x38>
 80071a0:	2302      	movs	r3, #2
 80071a2:	e18d      	b.n	80074c0 <HAL_SPI_TransmitReceive+0x354>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071ac:	f7fc facc 	bl	8003748 <HAL_GetTick>
 80071b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80071c2:	887b      	ldrh	r3, [r7, #2]
 80071c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d00f      	beq.n	80071ee <HAL_SPI_TransmitReceive+0x82>
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071d4:	d107      	bne.n	80071e6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d103      	bne.n	80071e6 <HAL_SPI_TransmitReceive+0x7a>
 80071de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d003      	beq.n	80071ee <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80071e6:	2302      	movs	r3, #2
 80071e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071ec:	e15e      	b.n	80074ac <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <HAL_SPI_TransmitReceive+0x94>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <HAL_SPI_TransmitReceive+0x94>
 80071fa:	887b      	ldrh	r3, [r7, #2]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d103      	bne.n	8007208 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007206:	e151      	b.n	80074ac <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b04      	cmp	r3, #4
 8007212:	d003      	beq.n	800721c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2205      	movs	r2, #5
 8007218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	887a      	ldrh	r2, [r7, #2]
 800722c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	887a      	ldrh	r2, [r7, #2]
 8007232:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	887a      	ldrh	r2, [r7, #2]
 800723e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	887a      	ldrh	r2, [r7, #2]
 8007244:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725c:	2b40      	cmp	r3, #64	; 0x40
 800725e:	d007      	beq.n	8007270 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800726e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007278:	d178      	bne.n	800736c <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <HAL_SPI_TransmitReceive+0x11c>
 8007282:	8b7b      	ldrh	r3, [r7, #26]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d166      	bne.n	8007356 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	881a      	ldrh	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007298:	1c9a      	adds	r2, r3, #2
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	3b01      	subs	r3, #1
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072ac:	e053      	b.n	8007356 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d11b      	bne.n	80072f4 <HAL_SPI_TransmitReceive+0x188>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d016      	beq.n	80072f4 <HAL_SPI_TransmitReceive+0x188>
 80072c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d113      	bne.n	80072f4 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d0:	881a      	ldrh	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072dc:	1c9a      	adds	r2, r3, #2
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d119      	bne.n	8007336 <HAL_SPI_TransmitReceive+0x1ca>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d014      	beq.n	8007336 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	b292      	uxth	r2, r2
 8007318:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	1c9a      	adds	r2, r3, #2
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007332:	2301      	movs	r3, #1
 8007334:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007336:	f7fc fa07 	bl	8003748 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007342:	429a      	cmp	r2, r3
 8007344:	d807      	bhi.n	8007356 <HAL_SPI_TransmitReceive+0x1ea>
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734c:	d003      	beq.n	8007356 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007354:	e0aa      	b.n	80074ac <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1a6      	bne.n	80072ae <HAL_SPI_TransmitReceive+0x142>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1a1      	bne.n	80072ae <HAL_SPI_TransmitReceive+0x142>
 800736a:	e07f      	b.n	800746c <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <HAL_SPI_TransmitReceive+0x20e>
 8007374:	8b7b      	ldrh	r3, [r7, #26]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d16e      	bne.n	8007458 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	7812      	ldrb	r2, [r2, #0]
 8007386:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073a0:	e05a      	b.n	8007458 <HAL_SPI_TransmitReceive+0x2ec>
 80073a2:	bf00      	nop
 80073a4:	08010498 	.word	0x08010498
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d11c      	bne.n	80073f0 <HAL_SPI_TransmitReceive+0x284>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d017      	beq.n	80073f0 <HAL_SPI_TransmitReceive+0x284>
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d114      	bne.n	80073f0 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	330c      	adds	r3, #12
 80073d0:	7812      	ldrb	r2, [r2, #0]
 80073d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	3b01      	subs	r3, #1
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d119      	bne.n	8007432 <HAL_SPI_TransmitReceive+0x2c6>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007402:	b29b      	uxth	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d014      	beq.n	8007432 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	b2d2      	uxtb	r2, r2
 8007414:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800742e:	2301      	movs	r3, #1
 8007430:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007432:	f7fc f989 	bl	8003748 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800743e:	429a      	cmp	r2, r3
 8007440:	d803      	bhi.n	800744a <HAL_SPI_TransmitReceive+0x2de>
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007448:	d102      	bne.n	8007450 <HAL_SPI_TransmitReceive+0x2e4>
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	2b00      	cmp	r3, #0
 800744e:	d103      	bne.n	8007458 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007456:	e029      	b.n	80074ac <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1a2      	bne.n	80073a8 <HAL_SPI_TransmitReceive+0x23c>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d19d      	bne.n	80073a8 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800746c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 f917 	bl	80076a4 <SPI_EndRxTxTransaction>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d006      	beq.n	800748a <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2220      	movs	r2, #32
 8007486:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007488:	e010      	b.n	80074ac <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10b      	bne.n	80074aa <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007492:	2300      	movs	r3, #0
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	617b      	str	r3, [r7, #20]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	e000      	b.n	80074ac <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80074aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3730      	adds	r7, #48	; 0x30
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	4613      	mov	r3, r2
 80074d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074d8:	f7fc f936 	bl	8003748 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	4413      	add	r3, r2
 80074e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074e8:	f7fc f92e 	bl	8003748 <HAL_GetTick>
 80074ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074ee:	4b39      	ldr	r3, [pc, #228]	; (80075d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	015b      	lsls	r3, r3, #5
 80074f4:	0d1b      	lsrs	r3, r3, #20
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	fb02 f303 	mul.w	r3, r2, r3
 80074fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074fe:	e054      	b.n	80075aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007506:	d050      	beq.n	80075aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007508:	f7fc f91e 	bl	8003748 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	429a      	cmp	r2, r3
 8007516:	d902      	bls.n	800751e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d13d      	bne.n	800759a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800752c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007536:	d111      	bne.n	800755c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007540:	d004      	beq.n	800754c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800754a:	d107      	bne.n	800755c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800755a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007564:	d10f      	bne.n	8007586 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007584:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e017      	b.n	80075ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4013      	ands	r3, r2
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	bf0c      	ite	eq
 80075ba:	2301      	moveq	r3, #1
 80075bc:	2300      	movne	r3, #0
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	461a      	mov	r2, r3
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d19b      	bne.n	8007500 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3720      	adds	r7, #32
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20000154 	.word	0x20000154

080075d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af02      	add	r7, sp, #8
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ec:	d111      	bne.n	8007612 <SPI_EndRxTransaction+0x3a>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f6:	d004      	beq.n	8007602 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007600:	d107      	bne.n	8007612 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007610:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800761a:	d12a      	bne.n	8007672 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007624:	d012      	beq.n	800764c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2200      	movs	r2, #0
 800762e:	2180      	movs	r1, #128	; 0x80
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff ff49 	bl	80074c8 <SPI_WaitFlagStateUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d02d      	beq.n	8007698 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007640:	f043 0220 	orr.w	r2, r3, #32
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e026      	b.n	800769a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2200      	movs	r2, #0
 8007654:	2101      	movs	r1, #1
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff ff36 	bl	80074c8 <SPI_WaitFlagStateUntilTimeout>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01a      	beq.n	8007698 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007666:	f043 0220 	orr.w	r2, r3, #32
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e013      	b.n	800769a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2200      	movs	r2, #0
 800767a:	2101      	movs	r1, #1
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff ff23 	bl	80074c8 <SPI_WaitFlagStateUntilTimeout>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d007      	beq.n	8007698 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768c:	f043 0220 	orr.w	r2, r3, #32
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e000      	b.n	800769a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af02      	add	r7, sp, #8
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80076b0:	4b1b      	ldr	r3, [pc, #108]	; (8007720 <SPI_EndRxTxTransaction+0x7c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1b      	ldr	r2, [pc, #108]	; (8007724 <SPI_EndRxTxTransaction+0x80>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	0d5b      	lsrs	r3, r3, #21
 80076bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076c0:	fb02 f303 	mul.w	r3, r2, r3
 80076c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ce:	d112      	bne.n	80076f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2200      	movs	r2, #0
 80076d8:	2180      	movs	r1, #128	; 0x80
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7ff fef4 	bl	80074c8 <SPI_WaitFlagStateUntilTimeout>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d016      	beq.n	8007714 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ea:	f043 0220 	orr.w	r2, r3, #32
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e00f      	b.n	8007716 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00a      	beq.n	8007712 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	3b01      	subs	r3, #1
 8007700:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770c:	2b80      	cmp	r3, #128	; 0x80
 800770e:	d0f2      	beq.n	80076f6 <SPI_EndRxTxTransaction+0x52>
 8007710:	e000      	b.n	8007714 <SPI_EndRxTxTransaction+0x70>
        break;
 8007712:	bf00      	nop
  }

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	20000154 	.word	0x20000154
 8007724:	165e9f81 	.word	0x165e9f81

08007728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e0c5      	b.n	80078c6 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a64      	ldr	r2, [pc, #400]	; (80078d0 <HAL_TIM_Base_Init+0x1a8>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d045      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774c:	d040      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a60      	ldr	r2, [pc, #384]	; (80078d4 <HAL_TIM_Base_Init+0x1ac>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d03b      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a5e      	ldr	r2, [pc, #376]	; (80078d8 <HAL_TIM_Base_Init+0x1b0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d036      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a5d      	ldr	r2, [pc, #372]	; (80078dc <HAL_TIM_Base_Init+0x1b4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d031      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a5b      	ldr	r2, [pc, #364]	; (80078e0 <HAL_TIM_Base_Init+0x1b8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d02c      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a5a      	ldr	r2, [pc, #360]	; (80078e4 <HAL_TIM_Base_Init+0x1bc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d027      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a58      	ldr	r2, [pc, #352]	; (80078e8 <HAL_TIM_Base_Init+0x1c0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d022      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a57      	ldr	r2, [pc, #348]	; (80078ec <HAL_TIM_Base_Init+0x1c4>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d01d      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a55      	ldr	r2, [pc, #340]	; (80078f0 <HAL_TIM_Base_Init+0x1c8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d018      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a54      	ldr	r2, [pc, #336]	; (80078f4 <HAL_TIM_Base_Init+0x1cc>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d013      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a52      	ldr	r2, [pc, #328]	; (80078f8 <HAL_TIM_Base_Init+0x1d0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00e      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a51      	ldr	r2, [pc, #324]	; (80078fc <HAL_TIM_Base_Init+0x1d4>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d009      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a4f      	ldr	r2, [pc, #316]	; (8007900 <HAL_TIM_Base_Init+0x1d8>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <HAL_TIM_Base_Init+0xa8>
 80077c6:	f240 1113 	movw	r1, #275	; 0x113
 80077ca:	484e      	ldr	r0, [pc, #312]	; (8007904 <HAL_TIM_Base_Init+0x1dc>)
 80077cc:	f7fb fa03 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d014      	beq.n	8007802 <HAL_TIM_Base_Init+0xda>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b10      	cmp	r3, #16
 80077de:	d010      	beq.n	8007802 <HAL_TIM_Base_Init+0xda>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2b20      	cmp	r3, #32
 80077e6:	d00c      	beq.n	8007802 <HAL_TIM_Base_Init+0xda>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	2b40      	cmp	r3, #64	; 0x40
 80077ee:	d008      	beq.n	8007802 <HAL_TIM_Base_Init+0xda>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	2b60      	cmp	r3, #96	; 0x60
 80077f6:	d004      	beq.n	8007802 <HAL_TIM_Base_Init+0xda>
 80077f8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80077fc:	4841      	ldr	r0, [pc, #260]	; (8007904 <HAL_TIM_Base_Init+0x1dc>)
 80077fe:	f7fb f9ea 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00e      	beq.n	8007828 <HAL_TIM_Base_Init+0x100>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007812:	d009      	beq.n	8007828 <HAL_TIM_Base_Init+0x100>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781c:	d004      	beq.n	8007828 <HAL_TIM_Base_Init+0x100>
 800781e:	f240 1115 	movw	r1, #277	; 0x115
 8007822:	4838      	ldr	r0, [pc, #224]	; (8007904 <HAL_TIM_Base_Init+0x1dc>)
 8007824:	f7fb f9d7 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d008      	beq.n	8007842 <HAL_TIM_Base_Init+0x11a>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	2b80      	cmp	r3, #128	; 0x80
 8007836:	d004      	beq.n	8007842 <HAL_TIM_Base_Init+0x11a>
 8007838:	f44f 718b 	mov.w	r1, #278	; 0x116
 800783c:	4831      	ldr	r0, [pc, #196]	; (8007904 <HAL_TIM_Base_Init+0x1dc>)
 800783e:	f7fb f9ca 	bl	8002bd6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fb fc36 	bl	80030c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f001 fbb8 	bl	8008fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	40010000 	.word	0x40010000
 80078d4:	40000400 	.word	0x40000400
 80078d8:	40000800 	.word	0x40000800
 80078dc:	40000c00 	.word	0x40000c00
 80078e0:	40001000 	.word	0x40001000
 80078e4:	40001400 	.word	0x40001400
 80078e8:	40010400 	.word	0x40010400
 80078ec:	40014000 	.word	0x40014000
 80078f0:	40014400 	.word	0x40014400
 80078f4:	40014800 	.word	0x40014800
 80078f8:	40001800 	.word	0x40001800
 80078fc:	40001c00 	.word	0x40001c00
 8007900:	40002000 	.word	0x40002000
 8007904:	080104d0 	.word	0x080104d0

08007908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a51      	ldr	r2, [pc, #324]	; (8007a5c <HAL_TIM_Base_Start_IT+0x154>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d045      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007922:	d040      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a4d      	ldr	r2, [pc, #308]	; (8007a60 <HAL_TIM_Base_Start_IT+0x158>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d03b      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a4c      	ldr	r2, [pc, #304]	; (8007a64 <HAL_TIM_Base_Start_IT+0x15c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d036      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a4a      	ldr	r2, [pc, #296]	; (8007a68 <HAL_TIM_Base_Start_IT+0x160>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d031      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a49      	ldr	r2, [pc, #292]	; (8007a6c <HAL_TIM_Base_Start_IT+0x164>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d02c      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a47      	ldr	r2, [pc, #284]	; (8007a70 <HAL_TIM_Base_Start_IT+0x168>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d027      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a46      	ldr	r2, [pc, #280]	; (8007a74 <HAL_TIM_Base_Start_IT+0x16c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d022      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a44      	ldr	r2, [pc, #272]	; (8007a78 <HAL_TIM_Base_Start_IT+0x170>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01d      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a43      	ldr	r2, [pc, #268]	; (8007a7c <HAL_TIM_Base_Start_IT+0x174>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d018      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a41      	ldr	r2, [pc, #260]	; (8007a80 <HAL_TIM_Base_Start_IT+0x178>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d013      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a40      	ldr	r2, [pc, #256]	; (8007a84 <HAL_TIM_Base_Start_IT+0x17c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00e      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a3e      	ldr	r2, [pc, #248]	; (8007a88 <HAL_TIM_Base_Start_IT+0x180>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d009      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a3d      	ldr	r2, [pc, #244]	; (8007a8c <HAL_TIM_Base_Start_IT+0x184>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d004      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0x9e>
 800799c:	f240 11cf 	movw	r1, #463	; 0x1cf
 80079a0:	483b      	ldr	r0, [pc, #236]	; (8007a90 <HAL_TIM_Base_Start_IT+0x188>)
 80079a2:	f7fb f918 	bl	8002bd6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d001      	beq.n	80079b6 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e04e      	b.n	8007a54 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2202      	movs	r2, #2
 80079ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 0201 	orr.w	r2, r2, #1
 80079cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a22      	ldr	r2, [pc, #136]	; (8007a5c <HAL_TIM_Base_Start_IT+0x154>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d022      	beq.n	8007a1e <HAL_TIM_Base_Start_IT+0x116>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e0:	d01d      	beq.n	8007a1e <HAL_TIM_Base_Start_IT+0x116>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1e      	ldr	r2, [pc, #120]	; (8007a60 <HAL_TIM_Base_Start_IT+0x158>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d018      	beq.n	8007a1e <HAL_TIM_Base_Start_IT+0x116>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1c      	ldr	r2, [pc, #112]	; (8007a64 <HAL_TIM_Base_Start_IT+0x15c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <HAL_TIM_Base_Start_IT+0x116>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1b      	ldr	r2, [pc, #108]	; (8007a68 <HAL_TIM_Base_Start_IT+0x160>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00e      	beq.n	8007a1e <HAL_TIM_Base_Start_IT+0x116>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a1b      	ldr	r2, [pc, #108]	; (8007a74 <HAL_TIM_Base_Start_IT+0x16c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d009      	beq.n	8007a1e <HAL_TIM_Base_Start_IT+0x116>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a1a      	ldr	r2, [pc, #104]	; (8007a78 <HAL_TIM_Base_Start_IT+0x170>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d004      	beq.n	8007a1e <HAL_TIM_Base_Start_IT+0x116>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a1a      	ldr	r2, [pc, #104]	; (8007a84 <HAL_TIM_Base_Start_IT+0x17c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d111      	bne.n	8007a42 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b06      	cmp	r3, #6
 8007a2e:	d010      	beq.n	8007a52 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0201 	orr.w	r2, r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a40:	e007      	b.n	8007a52 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0201 	orr.w	r2, r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	40010000 	.word	0x40010000
 8007a60:	40000400 	.word	0x40000400
 8007a64:	40000800 	.word	0x40000800
 8007a68:	40000c00 	.word	0x40000c00
 8007a6c:	40001000 	.word	0x40001000
 8007a70:	40001400 	.word	0x40001400
 8007a74:	40010400 	.word	0x40010400
 8007a78:	40014000 	.word	0x40014000
 8007a7c:	40014400 	.word	0x40014400
 8007a80:	40014800 	.word	0x40014800
 8007a84:	40001800 	.word	0x40001800
 8007a88:	40001c00 	.word	0x40001c00
 8007a8c:	40002000 	.word	0x40002000
 8007a90:	080104d0 	.word	0x080104d0

08007a94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e0c5      	b.n	8007c32 <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a64      	ldr	r2, [pc, #400]	; (8007c3c <HAL_TIM_PWM_Init+0x1a8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d045      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab8:	d040      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a60      	ldr	r2, [pc, #384]	; (8007c40 <HAL_TIM_PWM_Init+0x1ac>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d03b      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a5e      	ldr	r2, [pc, #376]	; (8007c44 <HAL_TIM_PWM_Init+0x1b0>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d036      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a5d      	ldr	r2, [pc, #372]	; (8007c48 <HAL_TIM_PWM_Init+0x1b4>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d031      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a5b      	ldr	r2, [pc, #364]	; (8007c4c <HAL_TIM_PWM_Init+0x1b8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d02c      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a5a      	ldr	r2, [pc, #360]	; (8007c50 <HAL_TIM_PWM_Init+0x1bc>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d027      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a58      	ldr	r2, [pc, #352]	; (8007c54 <HAL_TIM_PWM_Init+0x1c0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d022      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a57      	ldr	r2, [pc, #348]	; (8007c58 <HAL_TIM_PWM_Init+0x1c4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d01d      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a55      	ldr	r2, [pc, #340]	; (8007c5c <HAL_TIM_PWM_Init+0x1c8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d018      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a54      	ldr	r2, [pc, #336]	; (8007c60 <HAL_TIM_PWM_Init+0x1cc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d013      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a52      	ldr	r2, [pc, #328]	; (8007c64 <HAL_TIM_PWM_Init+0x1d0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00e      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a51      	ldr	r2, [pc, #324]	; (8007c68 <HAL_TIM_PWM_Init+0x1d4>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d009      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a4f      	ldr	r2, [pc, #316]	; (8007c6c <HAL_TIM_PWM_Init+0x1d8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d004      	beq.n	8007b3c <HAL_TIM_PWM_Init+0xa8>
 8007b32:	f240 5129 	movw	r1, #1321	; 0x529
 8007b36:	484e      	ldr	r0, [pc, #312]	; (8007c70 <HAL_TIM_PWM_Init+0x1dc>)
 8007b38:	f7fb f84d 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d014      	beq.n	8007b6e <HAL_TIM_PWM_Init+0xda>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b10      	cmp	r3, #16
 8007b4a:	d010      	beq.n	8007b6e <HAL_TIM_PWM_Init+0xda>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d00c      	beq.n	8007b6e <HAL_TIM_PWM_Init+0xda>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	2b40      	cmp	r3, #64	; 0x40
 8007b5a:	d008      	beq.n	8007b6e <HAL_TIM_PWM_Init+0xda>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2b60      	cmp	r3, #96	; 0x60
 8007b62:	d004      	beq.n	8007b6e <HAL_TIM_PWM_Init+0xda>
 8007b64:	f240 512a 	movw	r1, #1322	; 0x52a
 8007b68:	4841      	ldr	r0, [pc, #260]	; (8007c70 <HAL_TIM_PWM_Init+0x1dc>)
 8007b6a:	f7fb f834 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00e      	beq.n	8007b94 <HAL_TIM_PWM_Init+0x100>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b7e:	d009      	beq.n	8007b94 <HAL_TIM_PWM_Init+0x100>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b88:	d004      	beq.n	8007b94 <HAL_TIM_PWM_Init+0x100>
 8007b8a:	f240 512b 	movw	r1, #1323	; 0x52b
 8007b8e:	4838      	ldr	r0, [pc, #224]	; (8007c70 <HAL_TIM_PWM_Init+0x1dc>)
 8007b90:	f7fb f821 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d008      	beq.n	8007bae <HAL_TIM_PWM_Init+0x11a>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	2b80      	cmp	r3, #128	; 0x80
 8007ba2:	d004      	beq.n	8007bae <HAL_TIM_PWM_Init+0x11a>
 8007ba4:	f240 512c 	movw	r1, #1324	; 0x52c
 8007ba8:	4831      	ldr	r0, [pc, #196]	; (8007c70 <HAL_TIM_PWM_Init+0x1dc>)
 8007baa:	f7fb f814 	bl	8002bd6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d106      	bne.n	8007bc8 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7fb fae2 	bl	800318c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4610      	mov	r0, r2
 8007bdc:	f001 fa02 	bl	8008fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	40000400 	.word	0x40000400
 8007c44:	40000800 	.word	0x40000800
 8007c48:	40000c00 	.word	0x40000c00
 8007c4c:	40001000 	.word	0x40001000
 8007c50:	40001400 	.word	0x40001400
 8007c54:	40010400 	.word	0x40010400
 8007c58:	40014000 	.word	0x40014000
 8007c5c:	40014400 	.word	0x40014400
 8007c60:	40014800 	.word	0x40014800
 8007c64:	40001800 	.word	0x40001800
 8007c68:	40001c00 	.word	0x40001c00
 8007c6c:	40002000 	.word	0x40002000
 8007c70:	080104d0 	.word	0x080104d0

08007c74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a84      	ldr	r2, [pc, #528]	; (8007e94 <HAL_TIM_PWM_Start+0x220>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d10f      	bne.n	8007ca8 <HAL_TIM_PWM_Start+0x34>
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 809f 	beq.w	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	f000 809b 	beq.w	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	f000 8097 	beq.w	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b0c      	cmp	r3, #12
 8007ca4:	f000 8093 	beq.w	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb0:	d10e      	bne.n	8007cd0 <HAL_TIM_PWM_Start+0x5c>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 808a 	beq.w	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	f000 8086 	beq.w	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	f000 8082 	beq.w	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b0c      	cmp	r3, #12
 8007cce:	d07e      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a70      	ldr	r2, [pc, #448]	; (8007e98 <HAL_TIM_PWM_Start+0x224>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d10b      	bne.n	8007cf2 <HAL_TIM_PWM_Start+0x7e>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d076      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d073      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	d070      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b0c      	cmp	r3, #12
 8007cf0:	d06d      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a69      	ldr	r2, [pc, #420]	; (8007e9c <HAL_TIM_PWM_Start+0x228>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d10b      	bne.n	8007d14 <HAL_TIM_PWM_Start+0xa0>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d065      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d062      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b08      	cmp	r3, #8
 8007d0c:	d05f      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b0c      	cmp	r3, #12
 8007d12:	d05c      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a61      	ldr	r2, [pc, #388]	; (8007ea0 <HAL_TIM_PWM_Start+0x22c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d10b      	bne.n	8007d36 <HAL_TIM_PWM_Start+0xc2>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d054      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d051      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d04e      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b0c      	cmp	r3, #12
 8007d34:	d04b      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a5a      	ldr	r2, [pc, #360]	; (8007ea4 <HAL_TIM_PWM_Start+0x230>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d10b      	bne.n	8007d58 <HAL_TIM_PWM_Start+0xe4>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d043      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d040      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b08      	cmp	r3, #8
 8007d50:	d03d      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b0c      	cmp	r3, #12
 8007d56:	d03a      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a52      	ldr	r2, [pc, #328]	; (8007ea8 <HAL_TIM_PWM_Start+0x234>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d105      	bne.n	8007d6e <HAL_TIM_PWM_Start+0xfa>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d032      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d02f      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a4e      	ldr	r2, [pc, #312]	; (8007eac <HAL_TIM_PWM_Start+0x238>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d102      	bne.n	8007d7e <HAL_TIM_PWM_Start+0x10a>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d027      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a4b      	ldr	r2, [pc, #300]	; (8007eb0 <HAL_TIM_PWM_Start+0x23c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d102      	bne.n	8007d8e <HAL_TIM_PWM_Start+0x11a>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d01f      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a48      	ldr	r2, [pc, #288]	; (8007eb4 <HAL_TIM_PWM_Start+0x240>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d105      	bne.n	8007da4 <HAL_TIM_PWM_Start+0x130>
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d017      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d014      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a43      	ldr	r2, [pc, #268]	; (8007eb8 <HAL_TIM_PWM_Start+0x244>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d102      	bne.n	8007db4 <HAL_TIM_PWM_Start+0x140>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00c      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a40      	ldr	r2, [pc, #256]	; (8007ebc <HAL_TIM_PWM_Start+0x248>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d102      	bne.n	8007dc4 <HAL_TIM_PWM_Start+0x150>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d004      	beq.n	8007dce <HAL_TIM_PWM_Start+0x15a>
 8007dc4:	f240 51af 	movw	r1, #1455	; 0x5af
 8007dc8:	483d      	ldr	r0, [pc, #244]	; (8007ec0 <HAL_TIM_PWM_Start+0x24c>)
 8007dca:	f7fa ff04 	bl	8002bd6 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d109      	bne.n	8007de8 <HAL_TIM_PWM_Start+0x174>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	bf14      	ite	ne
 8007de0:	2301      	movne	r3, #1
 8007de2:	2300      	moveq	r3, #0
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	e022      	b.n	8007e2e <HAL_TIM_PWM_Start+0x1ba>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d109      	bne.n	8007e02 <HAL_TIM_PWM_Start+0x18e>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	bf14      	ite	ne
 8007dfa:	2301      	movne	r3, #1
 8007dfc:	2300      	moveq	r3, #0
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	e015      	b.n	8007e2e <HAL_TIM_PWM_Start+0x1ba>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d109      	bne.n	8007e1c <HAL_TIM_PWM_Start+0x1a8>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	bf14      	ite	ne
 8007e14:	2301      	movne	r3, #1
 8007e16:	2300      	moveq	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	e008      	b.n	8007e2e <HAL_TIM_PWM_Start+0x1ba>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	bf14      	ite	ne
 8007e28:	2301      	movne	r3, #1
 8007e2a:	2300      	moveq	r3, #0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e094      	b.n	8007f60 <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <HAL_TIM_PWM_Start+0x1d2>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e44:	e013      	b.n	8007e6e <HAL_TIM_PWM_Start+0x1fa>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b04      	cmp	r3, #4
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_PWM_Start+0x1e2>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e54:	e00b      	b.n	8007e6e <HAL_TIM_PWM_Start+0x1fa>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIM_PWM_Start+0x1f2>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e64:	e003      	b.n	8007e6e <HAL_TIM_PWM_Start+0x1fa>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2202      	movs	r2, #2
 8007e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2201      	movs	r2, #1
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 fc28 	bl	80096cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a04      	ldr	r2, [pc, #16]	; (8007e94 <HAL_TIM_PWM_Start+0x220>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d004      	beq.n	8007e90 <HAL_TIM_PWM_Start+0x21c>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a06      	ldr	r2, [pc, #24]	; (8007ea4 <HAL_TIM_PWM_Start+0x230>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d119      	bne.n	8007ec4 <HAL_TIM_PWM_Start+0x250>
 8007e90:	2301      	movs	r3, #1
 8007e92:	e018      	b.n	8007ec6 <HAL_TIM_PWM_Start+0x252>
 8007e94:	40010000 	.word	0x40010000
 8007e98:	40000400 	.word	0x40000400
 8007e9c:	40000800 	.word	0x40000800
 8007ea0:	40000c00 	.word	0x40000c00
 8007ea4:	40010400 	.word	0x40010400
 8007ea8:	40014000 	.word	0x40014000
 8007eac:	40014400 	.word	0x40014400
 8007eb0:	40014800 	.word	0x40014800
 8007eb4:	40001800 	.word	0x40001800
 8007eb8:	40001c00 	.word	0x40001c00
 8007ebc:	40002000 	.word	0x40002000
 8007ec0:	080104d0 	.word	0x080104d0
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d007      	beq.n	8007eda <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a22      	ldr	r2, [pc, #136]	; (8007f68 <HAL_TIM_PWM_Start+0x2f4>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d022      	beq.n	8007f2a <HAL_TIM_PWM_Start+0x2b6>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eec:	d01d      	beq.n	8007f2a <HAL_TIM_PWM_Start+0x2b6>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a1e      	ldr	r2, [pc, #120]	; (8007f6c <HAL_TIM_PWM_Start+0x2f8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d018      	beq.n	8007f2a <HAL_TIM_PWM_Start+0x2b6>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a1c      	ldr	r2, [pc, #112]	; (8007f70 <HAL_TIM_PWM_Start+0x2fc>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d013      	beq.n	8007f2a <HAL_TIM_PWM_Start+0x2b6>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1b      	ldr	r2, [pc, #108]	; (8007f74 <HAL_TIM_PWM_Start+0x300>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00e      	beq.n	8007f2a <HAL_TIM_PWM_Start+0x2b6>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a19      	ldr	r2, [pc, #100]	; (8007f78 <HAL_TIM_PWM_Start+0x304>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d009      	beq.n	8007f2a <HAL_TIM_PWM_Start+0x2b6>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <HAL_TIM_PWM_Start+0x308>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d004      	beq.n	8007f2a <HAL_TIM_PWM_Start+0x2b6>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a16      	ldr	r2, [pc, #88]	; (8007f80 <HAL_TIM_PWM_Start+0x30c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d111      	bne.n	8007f4e <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b06      	cmp	r3, #6
 8007f3a:	d010      	beq.n	8007f5e <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0201 	orr.w	r2, r2, #1
 8007f4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f4c:	e007      	b.n	8007f5e <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f042 0201 	orr.w	r2, r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	40010000 	.word	0x40010000
 8007f6c:	40000400 	.word	0x40000400
 8007f70:	40000800 	.word	0x40000800
 8007f74:	40000c00 	.word	0x40000c00
 8007f78:	40010400 	.word	0x40010400
 8007f7c:	40014000 	.word	0x40014000
 8007f80:	40001800 	.word	0x40001800

08007f84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e198      	b.n	80082ca <HAL_TIM_Encoder_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a7d      	ldr	r2, [pc, #500]	; (8008194 <HAL_TIM_Encoder_Init+0x210>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d027      	beq.n	8007ff2 <HAL_TIM_Encoder_Init+0x6e>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007faa:	d022      	beq.n	8007ff2 <HAL_TIM_Encoder_Init+0x6e>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a79      	ldr	r2, [pc, #484]	; (8008198 <HAL_TIM_Encoder_Init+0x214>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d01d      	beq.n	8007ff2 <HAL_TIM_Encoder_Init+0x6e>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a78      	ldr	r2, [pc, #480]	; (800819c <HAL_TIM_Encoder_Init+0x218>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d018      	beq.n	8007ff2 <HAL_TIM_Encoder_Init+0x6e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a76      	ldr	r2, [pc, #472]	; (80081a0 <HAL_TIM_Encoder_Init+0x21c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <HAL_TIM_Encoder_Init+0x6e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a75      	ldr	r2, [pc, #468]	; (80081a4 <HAL_TIM_Encoder_Init+0x220>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_TIM_Encoder_Init+0x6e>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a73      	ldr	r2, [pc, #460]	; (80081a8 <HAL_TIM_Encoder_Init+0x224>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d009      	beq.n	8007ff2 <HAL_TIM_Encoder_Init+0x6e>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a72      	ldr	r2, [pc, #456]	; (80081ac <HAL_TIM_Encoder_Init+0x228>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d004      	beq.n	8007ff2 <HAL_TIM_Encoder_Init+0x6e>
 8007fe8:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8007fec:	4870      	ldr	r0, [pc, #448]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 8007fee:	f7fa fdf2 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d014      	beq.n	8008024 <HAL_TIM_Encoder_Init+0xa0>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	2b10      	cmp	r3, #16
 8008000:	d010      	beq.n	8008024 <HAL_TIM_Encoder_Init+0xa0>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	2b20      	cmp	r3, #32
 8008008:	d00c      	beq.n	8008024 <HAL_TIM_Encoder_Init+0xa0>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	2b40      	cmp	r3, #64	; 0x40
 8008010:	d008      	beq.n	8008024 <HAL_TIM_Encoder_Init+0xa0>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	2b60      	cmp	r3, #96	; 0x60
 8008018:	d004      	beq.n	8008024 <HAL_TIM_Encoder_Init+0xa0>
 800801a:	f640 31d2 	movw	r1, #3026	; 0xbd2
 800801e:	4864      	ldr	r0, [pc, #400]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 8008020:	f7fa fdd9 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00e      	beq.n	800804a <HAL_TIM_Encoder_Init+0xc6>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008034:	d009      	beq.n	800804a <HAL_TIM_Encoder_Init+0xc6>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800803e:	d004      	beq.n	800804a <HAL_TIM_Encoder_Init+0xc6>
 8008040:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8008044:	485a      	ldr	r0, [pc, #360]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 8008046:	f7fa fdc6 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d008      	beq.n	8008064 <HAL_TIM_Encoder_Init+0xe0>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	2b80      	cmp	r3, #128	; 0x80
 8008058:	d004      	beq.n	8008064 <HAL_TIM_Encoder_Init+0xe0>
 800805a:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800805e:	4854      	ldr	r0, [pc, #336]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 8008060:	f7fa fdb9 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d00c      	beq.n	8008086 <HAL_TIM_Encoder_Init+0x102>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b02      	cmp	r3, #2
 8008072:	d008      	beq.n	8008086 <HAL_TIM_Encoder_Init+0x102>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d004      	beq.n	8008086 <HAL_TIM_Encoder_Init+0x102>
 800807c:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8008080:	484b      	ldr	r0, [pc, #300]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 8008082:	f7fa fda8 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d00c      	beq.n	80080a8 <HAL_TIM_Encoder_Init+0x124>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	2b02      	cmp	r3, #2
 8008094:	d008      	beq.n	80080a8 <HAL_TIM_Encoder_Init+0x124>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	2b03      	cmp	r3, #3
 800809c:	d004      	beq.n	80080a8 <HAL_TIM_Encoder_Init+0x124>
 800809e:	f640 31d6 	movw	r1, #3030	; 0xbd6
 80080a2:	4843      	ldr	r0, [pc, #268]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 80080a4:	f7fa fd97 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d00c      	beq.n	80080ca <HAL_TIM_Encoder_Init+0x146>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d008      	beq.n	80080ca <HAL_TIM_Encoder_Init+0x146>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d004      	beq.n	80080ca <HAL_TIM_Encoder_Init+0x146>
 80080c0:	f640 31d7 	movw	r1, #3031	; 0xbd7
 80080c4:	483a      	ldr	r0, [pc, #232]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 80080c6:	f7fa fd86 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d008      	beq.n	80080e4 <HAL_TIM_Encoder_Init+0x160>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d004      	beq.n	80080e4 <HAL_TIM_Encoder_Init+0x160>
 80080da:	f640 31d8 	movw	r1, #3032	; 0xbd8
 80080de:	4834      	ldr	r0, [pc, #208]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 80080e0:	f7fa fd79 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d008      	beq.n	80080fe <HAL_TIM_Encoder_Init+0x17a>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d004      	beq.n	80080fe <HAL_TIM_Encoder_Init+0x17a>
 80080f4:	f640 31d9 	movw	r1, #3033	; 0xbd9
 80080f8:	482d      	ldr	r0, [pc, #180]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 80080fa:	f7fa fd6c 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d010      	beq.n	8008128 <HAL_TIM_Encoder_Init+0x1a4>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	2b04      	cmp	r3, #4
 800810c:	d00c      	beq.n	8008128 <HAL_TIM_Encoder_Init+0x1a4>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	2b08      	cmp	r3, #8
 8008114:	d008      	beq.n	8008128 <HAL_TIM_Encoder_Init+0x1a4>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	2b0c      	cmp	r3, #12
 800811c:	d004      	beq.n	8008128 <HAL_TIM_Encoder_Init+0x1a4>
 800811e:	f640 31da 	movw	r1, #3034	; 0xbda
 8008122:	4823      	ldr	r0, [pc, #140]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 8008124:	f7fa fd57 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d010      	beq.n	8008152 <HAL_TIM_Encoder_Init+0x1ce>
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	2b04      	cmp	r3, #4
 8008136:	d00c      	beq.n	8008152 <HAL_TIM_Encoder_Init+0x1ce>
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	2b08      	cmp	r3, #8
 800813e:	d008      	beq.n	8008152 <HAL_TIM_Encoder_Init+0x1ce>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	2b0c      	cmp	r3, #12
 8008146:	d004      	beq.n	8008152 <HAL_TIM_Encoder_Init+0x1ce>
 8008148:	f640 31db 	movw	r1, #3035	; 0xbdb
 800814c:	4818      	ldr	r0, [pc, #96]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 800814e:	f7fa fd42 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	2b0f      	cmp	r3, #15
 8008158:	d904      	bls.n	8008164 <HAL_TIM_Encoder_Init+0x1e0>
 800815a:	f640 31dc 	movw	r1, #3036	; 0xbdc
 800815e:	4814      	ldr	r0, [pc, #80]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 8008160:	f7fa fd39 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	2b0f      	cmp	r3, #15
 800816a:	d904      	bls.n	8008176 <HAL_TIM_Encoder_Init+0x1f2>
 800816c:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8008170:	480f      	ldr	r0, [pc, #60]	; (80081b0 <HAL_TIM_Encoder_Init+0x22c>)
 8008172:	f7fa fd30 	bl	8002bd6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d118      	bne.n	80081b4 <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7fb f826 	bl	80031dc <HAL_TIM_Encoder_MspInit>
 8008190:	e010      	b.n	80081b4 <HAL_TIM_Encoder_Init+0x230>
 8008192:	bf00      	nop
 8008194:	40010000 	.word	0x40010000
 8008198:	40000400 	.word	0x40000400
 800819c:	40000800 	.word	0x40000800
 80081a0:	40000c00 	.word	0x40000c00
 80081a4:	40010400 	.word	0x40010400
 80081a8:	40014000 	.word	0x40014000
 80081ac:	40001800 	.word	0x40001800
 80081b0:	080104d0 	.word	0x080104d0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	6812      	ldr	r2, [r2, #0]
 80081c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081ca:	f023 0307 	bic.w	r3, r3, #7
 80081ce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	3304      	adds	r3, #4
 80081d8:	4619      	mov	r1, r3
 80081da:	4610      	mov	r0, r2
 80081dc:	f000 ff02 	bl	8008fe4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	4313      	orrs	r3, r2
 8008200:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008208:	f023 0303 	bic.w	r3, r3, #3
 800820c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	689a      	ldr	r2, [r3, #8]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	4313      	orrs	r3, r2
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008226:	f023 030c 	bic.w	r3, r3, #12
 800822a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	4313      	orrs	r3, r2
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	011a      	lsls	r2, r3, #4
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	031b      	lsls	r3, r3, #12
 8008256:	4313      	orrs	r3, r2
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008264:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800826c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	011b      	lsls	r3, r3, #4
 8008278:	4313      	orrs	r3, r2
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	4313      	orrs	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop

080082d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d122      	bne.n	8008330 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d11b      	bne.n	8008330 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0202 	mvn.w	r2, #2
 8008300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fe46 	bl	8008fa8 <HAL_TIM_IC_CaptureCallback>
 800831c:	e005      	b.n	800832a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fe38 	bl	8008f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fe49 	bl	8008fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0304 	and.w	r3, r3, #4
 800833a:	2b04      	cmp	r3, #4
 800833c:	d122      	bne.n	8008384 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b04      	cmp	r3, #4
 800834a:	d11b      	bne.n	8008384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0204 	mvn.w	r2, #4
 8008354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2202      	movs	r2, #2
 800835a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fe1c 	bl	8008fa8 <HAL_TIM_IC_CaptureCallback>
 8008370:	e005      	b.n	800837e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fe0e 	bl	8008f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fe1f 	bl	8008fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f003 0308 	and.w	r3, r3, #8
 800838e:	2b08      	cmp	r3, #8
 8008390:	d122      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f003 0308 	and.w	r3, r3, #8
 800839c:	2b08      	cmp	r3, #8
 800839e:	d11b      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0208 	mvn.w	r2, #8
 80083a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2204      	movs	r2, #4
 80083ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fdf2 	bl	8008fa8 <HAL_TIM_IC_CaptureCallback>
 80083c4:	e005      	b.n	80083d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fde4 	bl	8008f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fdf5 	bl	8008fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f003 0310 	and.w	r3, r3, #16
 80083e2:	2b10      	cmp	r3, #16
 80083e4:	d122      	bne.n	800842c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f003 0310 	and.w	r3, r3, #16
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	d11b      	bne.n	800842c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f06f 0210 	mvn.w	r2, #16
 80083fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2208      	movs	r2, #8
 8008402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fdc8 	bl	8008fa8 <HAL_TIM_IC_CaptureCallback>
 8008418:	e005      	b.n	8008426 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fdba 	bl	8008f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fdcb 	bl	8008fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b01      	cmp	r3, #1
 8008438:	d10e      	bne.n	8008458 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b01      	cmp	r3, #1
 8008446:	d107      	bne.n	8008458 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f06f 0201 	mvn.w	r2, #1
 8008450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7f8 feda 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008462:	2b80      	cmp	r3, #128	; 0x80
 8008464:	d10e      	bne.n	8008484 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008470:	2b80      	cmp	r3, #128	; 0x80
 8008472:	d107      	bne.n	8008484 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800847c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f001 fb5c 	bl	8009b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848e:	2b40      	cmp	r3, #64	; 0x40
 8008490:	d10e      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849c:	2b40      	cmp	r3, #64	; 0x40
 800849e:	d107      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fd90 	bl	8008fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	d10e      	bne.n	80084dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f003 0320 	and.w	r3, r3, #32
 80084c8:	2b20      	cmp	r3, #32
 80084ca:	d107      	bne.n	80084dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f06f 0220 	mvn.w	r2, #32
 80084d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f001 fb26 	bl	8009b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d010      	beq.n	800851c <HAL_TIM_PWM_ConfigChannel+0x38>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d00d      	beq.n	800851c <HAL_TIM_PWM_ConfigChannel+0x38>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b08      	cmp	r3, #8
 8008504:	d00a      	beq.n	800851c <HAL_TIM_PWM_ConfigChannel+0x38>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b0c      	cmp	r3, #12
 800850a:	d007      	beq.n	800851c <HAL_TIM_PWM_ConfigChannel+0x38>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b3c      	cmp	r3, #60	; 0x3c
 8008510:	d004      	beq.n	800851c <HAL_TIM_PWM_ConfigChannel+0x38>
 8008512:	f241 0177 	movw	r1, #4215	; 0x1077
 8008516:	4883      	ldr	r0, [pc, #524]	; (8008724 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008518:	f7fa fb5d 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b60      	cmp	r3, #96	; 0x60
 8008522:	d008      	beq.n	8008536 <HAL_TIM_PWM_ConfigChannel+0x52>
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b70      	cmp	r3, #112	; 0x70
 800852a:	d004      	beq.n	8008536 <HAL_TIM_PWM_ConfigChannel+0x52>
 800852c:	f241 0178 	movw	r1, #4216	; 0x1078
 8008530:	487c      	ldr	r0, [pc, #496]	; (8008724 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008532:	f7fa fb50 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d008      	beq.n	8008550 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	2b02      	cmp	r3, #2
 8008544:	d004      	beq.n	8008550 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8008546:	f241 0179 	movw	r1, #4217	; 0x1079
 800854a:	4876      	ldr	r0, [pc, #472]	; (8008724 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800854c:	f7fa fb43 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d008      	beq.n	800856a <HAL_TIM_PWM_ConfigChannel+0x86>
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	2b04      	cmp	r3, #4
 800855e:	d004      	beq.n	800856a <HAL_TIM_PWM_ConfigChannel+0x86>
 8008560:	f241 017a 	movw	r1, #4218	; 0x107a
 8008564:	486f      	ldr	r0, [pc, #444]	; (8008724 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008566:	f7fa fb36 	bl	8002bd6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008570:	2b01      	cmp	r3, #1
 8008572:	d101      	bne.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008574:	2302      	movs	r3, #2
 8008576:	e17c      	b.n	8008872 <HAL_TIM_PWM_ConfigChannel+0x38e>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b0c      	cmp	r3, #12
 8008584:	f200 816d 	bhi.w	8008862 <HAL_TIM_PWM_ConfigChannel+0x37e>
 8008588:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800858a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858e:	bf00      	nop
 8008590:	080085c5 	.word	0x080085c5
 8008594:	08008863 	.word	0x08008863
 8008598:	08008863 	.word	0x08008863
 800859c:	08008863 	.word	0x08008863
 80085a0:	08008687 	.word	0x08008687
 80085a4:	08008863 	.word	0x08008863
 80085a8:	08008863 	.word	0x08008863
 80085ac:	08008863 	.word	0x08008863
 80085b0:	08008755 	.word	0x08008755
 80085b4:	08008863 	.word	0x08008863
 80085b8:	08008863 	.word	0x08008863
 80085bc:	08008863 	.word	0x08008863
 80085c0:	080087db 	.word	0x080087db
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a57      	ldr	r2, [pc, #348]	; (8008728 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d03b      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d6:	d036      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a53      	ldr	r2, [pc, #332]	; (800872c <HAL_TIM_PWM_ConfigChannel+0x248>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d031      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a52      	ldr	r2, [pc, #328]	; (8008730 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d02c      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a50      	ldr	r2, [pc, #320]	; (8008734 <HAL_TIM_PWM_ConfigChannel+0x250>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d027      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0x162>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a4f      	ldr	r2, [pc, #316]	; (8008738 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d022      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0x162>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a4d      	ldr	r2, [pc, #308]	; (800873c <HAL_TIM_PWM_ConfigChannel+0x258>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d01d      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0x162>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a4c      	ldr	r2, [pc, #304]	; (8008740 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d018      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0x162>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a4a      	ldr	r2, [pc, #296]	; (8008744 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d013      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0x162>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a49      	ldr	r2, [pc, #292]	; (8008748 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00e      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0x162>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a47      	ldr	r2, [pc, #284]	; (800874c <HAL_TIM_PWM_ConfigChannel+0x268>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d009      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0x162>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a46      	ldr	r2, [pc, #280]	; (8008750 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d004      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0x162>
 800863c:	f241 0184 	movw	r1, #4228	; 0x1084
 8008640:	4838      	ldr	r0, [pc, #224]	; (8008724 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008642:	f7fa fac8 	bl	8002bd6 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fd69 	bl	8009124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	699a      	ldr	r2, [r3, #24]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0208 	orr.w	r2, r2, #8
 8008660:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	699a      	ldr	r2, [r3, #24]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0204 	bic.w	r2, r2, #4
 8008670:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6999      	ldr	r1, [r3, #24]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	691a      	ldr	r2, [r3, #16]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	619a      	str	r2, [r3, #24]
      break;
 8008684:	e0f0      	b.n	8008868 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a27      	ldr	r2, [pc, #156]	; (8008728 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d027      	beq.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008698:	d022      	beq.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a23      	ldr	r2, [pc, #140]	; (800872c <HAL_TIM_PWM_ConfigChannel+0x248>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d01d      	beq.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a21      	ldr	r2, [pc, #132]	; (8008730 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d018      	beq.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a20      	ldr	r2, [pc, #128]	; (8008734 <HAL_TIM_PWM_ConfigChannel+0x250>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d013      	beq.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a1e      	ldr	r2, [pc, #120]	; (8008738 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d00e      	beq.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a1d      	ldr	r2, [pc, #116]	; (800873c <HAL_TIM_PWM_ConfigChannel+0x258>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d009      	beq.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a1d      	ldr	r2, [pc, #116]	; (8008748 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d004      	beq.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80086d6:	f241 0195 	movw	r1, #4245	; 0x1095
 80086da:	4812      	ldr	r0, [pc, #72]	; (8008724 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80086dc:	f7fa fa7b 	bl	8002bd6 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68b9      	ldr	r1, [r7, #8]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fdb6 	bl	8009258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699a      	ldr	r2, [r3, #24]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	699a      	ldr	r2, [r3, #24]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800870a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6999      	ldr	r1, [r3, #24]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	021a      	lsls	r2, r3, #8
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	619a      	str	r2, [r3, #24]
      break;
 8008720:	e0a2      	b.n	8008868 <HAL_TIM_PWM_ConfigChannel+0x384>
 8008722:	bf00      	nop
 8008724:	080104d0 	.word	0x080104d0
 8008728:	40010000 	.word	0x40010000
 800872c:	40000400 	.word	0x40000400
 8008730:	40000800 	.word	0x40000800
 8008734:	40000c00 	.word	0x40000c00
 8008738:	40010400 	.word	0x40010400
 800873c:	40014000 	.word	0x40014000
 8008740:	40014400 	.word	0x40014400
 8008744:	40014800 	.word	0x40014800
 8008748:	40001800 	.word	0x40001800
 800874c:	40001c00 	.word	0x40001c00
 8008750:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a48      	ldr	r2, [pc, #288]	; (800887c <HAL_TIM_PWM_ConfigChannel+0x398>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d01d      	beq.n	800879a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008766:	d018      	beq.n	800879a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a44      	ldr	r2, [pc, #272]	; (8008880 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d013      	beq.n	800879a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a43      	ldr	r2, [pc, #268]	; (8008884 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00e      	beq.n	800879a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a41      	ldr	r2, [pc, #260]	; (8008888 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d009      	beq.n	800879a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a40      	ldr	r2, [pc, #256]	; (800888c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d004      	beq.n	800879a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008790:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8008794:	483e      	ldr	r0, [pc, #248]	; (8008890 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8008796:	f7fa fa1e 	bl	8002bd6 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68b9      	ldr	r1, [r7, #8]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fdf7 	bl	8009394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69da      	ldr	r2, [r3, #28]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0208 	orr.w	r2, r2, #8
 80087b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	69da      	ldr	r2, [r3, #28]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0204 	bic.w	r2, r2, #4
 80087c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69d9      	ldr	r1, [r3, #28]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	691a      	ldr	r2, [r3, #16]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	61da      	str	r2, [r3, #28]
      break;
 80087d8:	e046      	b.n	8008868 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a27      	ldr	r2, [pc, #156]	; (800887c <HAL_TIM_PWM_ConfigChannel+0x398>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d01d      	beq.n	8008820 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ec:	d018      	beq.n	8008820 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a23      	ldr	r2, [pc, #140]	; (8008880 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d013      	beq.n	8008820 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a21      	ldr	r2, [pc, #132]	; (8008884 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00e      	beq.n	8008820 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a20      	ldr	r2, [pc, #128]	; (8008888 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d009      	beq.n	8008820 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a1e      	ldr	r2, [pc, #120]	; (800888c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d004      	beq.n	8008820 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008816:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800881a:	481d      	ldr	r0, [pc, #116]	; (8008890 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800881c:	f7fa f9db 	bl	8002bd6 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68b9      	ldr	r1, [r7, #8]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 fe52 	bl	80094d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	69da      	ldr	r2, [r3, #28]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800883a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	69da      	ldr	r2, [r3, #28]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800884a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	69d9      	ldr	r1, [r3, #28]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	021a      	lsls	r2, r3, #8
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	61da      	str	r2, [r3, #28]
      break;
 8008860:	e002      	b.n	8008868 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	75fb      	strb	r3, [r7, #23]
      break;
 8008866:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008870:	7dfb      	ldrb	r3, [r7, #23]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	40010000 	.word	0x40010000
 8008880:	40000400 	.word	0x40000400
 8008884:	40000800 	.word	0x40000800
 8008888:	40000c00 	.word	0x40000c00
 800888c:	40010400 	.word	0x40010400
 8008890:	080104d0 	.word	0x080104d0

08008894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d101      	bne.n	80088b0 <HAL_TIM_ConfigClockSource+0x1c>
 80088ac:	2302      	movs	r3, #2
 80088ae:	e35c      	b.n	8008f6a <HAL_TIM_ConfigClockSource+0x6d6>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088c8:	d029      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x8a>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088d2:	d024      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x8a>
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d020      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x8a>
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b10      	cmp	r3, #16
 80088e2:	d01c      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x8a>
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	d018      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x8a>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b30      	cmp	r3, #48	; 0x30
 80088f2:	d014      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x8a>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b40      	cmp	r3, #64	; 0x40
 80088fa:	d010      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x8a>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b50      	cmp	r3, #80	; 0x50
 8008902:	d00c      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x8a>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b60      	cmp	r3, #96	; 0x60
 800890a:	d008      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x8a>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b70      	cmp	r3, #112	; 0x70
 8008912:	d004      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x8a>
 8008914:	f241 41bb 	movw	r1, #5307	; 0x14bb
 8008918:	4893      	ldr	r0, [pc, #588]	; (8008b68 <HAL_TIM_ConfigClockSource+0x2d4>)
 800891a:	f7fa f95c 	bl	8002bd6 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800892c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008934:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008946:	f000 812b 	beq.w	8008ba0 <HAL_TIM_ConfigClockSource+0x30c>
 800894a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800894e:	f200 82ff 	bhi.w	8008f50 <HAL_TIM_ConfigClockSource+0x6bc>
 8008952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008956:	d02e      	beq.n	80089b6 <HAL_TIM_ConfigClockSource+0x122>
 8008958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800895c:	f200 82f8 	bhi.w	8008f50 <HAL_TIM_ConfigClockSource+0x6bc>
 8008960:	2b70      	cmp	r3, #112	; 0x70
 8008962:	f000 8082 	beq.w	8008a6a <HAL_TIM_ConfigClockSource+0x1d6>
 8008966:	2b70      	cmp	r3, #112	; 0x70
 8008968:	f200 82f2 	bhi.w	8008f50 <HAL_TIM_ConfigClockSource+0x6bc>
 800896c:	2b60      	cmp	r3, #96	; 0x60
 800896e:	f000 81e8 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x4ae>
 8008972:	2b60      	cmp	r3, #96	; 0x60
 8008974:	f200 82ec 	bhi.w	8008f50 <HAL_TIM_ConfigClockSource+0x6bc>
 8008978:	2b50      	cmp	r3, #80	; 0x50
 800897a:	f000 8182 	beq.w	8008c82 <HAL_TIM_ConfigClockSource+0x3ee>
 800897e:	2b50      	cmp	r3, #80	; 0x50
 8008980:	f200 82e6 	bhi.w	8008f50 <HAL_TIM_ConfigClockSource+0x6bc>
 8008984:	2b40      	cmp	r3, #64	; 0x40
 8008986:	f000 824d 	beq.w	8008e24 <HAL_TIM_ConfigClockSource+0x590>
 800898a:	2b40      	cmp	r3, #64	; 0x40
 800898c:	f200 82e0 	bhi.w	8008f50 <HAL_TIM_ConfigClockSource+0x6bc>
 8008990:	2b30      	cmp	r3, #48	; 0x30
 8008992:	f000 82a7 	beq.w	8008ee4 <HAL_TIM_ConfigClockSource+0x650>
 8008996:	2b30      	cmp	r3, #48	; 0x30
 8008998:	f200 82da 	bhi.w	8008f50 <HAL_TIM_ConfigClockSource+0x6bc>
 800899c:	2b20      	cmp	r3, #32
 800899e:	f000 82a1 	beq.w	8008ee4 <HAL_TIM_ConfigClockSource+0x650>
 80089a2:	2b20      	cmp	r3, #32
 80089a4:	f200 82d4 	bhi.w	8008f50 <HAL_TIM_ConfigClockSource+0x6bc>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 829b 	beq.w	8008ee4 <HAL_TIM_ConfigClockSource+0x650>
 80089ae:	2b10      	cmp	r3, #16
 80089b0:	f000 8298 	beq.w	8008ee4 <HAL_TIM_ConfigClockSource+0x650>
 80089b4:	e2cc      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a6c      	ldr	r2, [pc, #432]	; (8008b6c <HAL_TIM_ConfigClockSource+0x2d8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	f000 82ca 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ca:	f000 82c4 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a67      	ldr	r2, [pc, #412]	; (8008b70 <HAL_TIM_ConfigClockSource+0x2dc>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	f000 82be 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a65      	ldr	r2, [pc, #404]	; (8008b74 <HAL_TIM_ConfigClockSource+0x2e0>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	f000 82b8 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a63      	ldr	r2, [pc, #396]	; (8008b78 <HAL_TIM_ConfigClockSource+0x2e4>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	f000 82b2 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a61      	ldr	r2, [pc, #388]	; (8008b7c <HAL_TIM_ConfigClockSource+0x2e8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	f000 82ac 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a5f      	ldr	r2, [pc, #380]	; (8008b80 <HAL_TIM_ConfigClockSource+0x2ec>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	f000 82a6 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a5d      	ldr	r2, [pc, #372]	; (8008b84 <HAL_TIM_ConfigClockSource+0x2f0>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	f000 82a0 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a5b      	ldr	r2, [pc, #364]	; (8008b88 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	f000 829a 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a59      	ldr	r2, [pc, #356]	; (8008b8c <HAL_TIM_ConfigClockSource+0x2f8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	f000 8294 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a57      	ldr	r2, [pc, #348]	; (8008b90 <HAL_TIM_ConfigClockSource+0x2fc>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	f000 828e 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a55      	ldr	r2, [pc, #340]	; (8008b94 <HAL_TIM_ConfigClockSource+0x300>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	f000 8288 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a53      	ldr	r2, [pc, #332]	; (8008b98 <HAL_TIM_ConfigClockSource+0x304>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	f000 8282 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a51      	ldr	r2, [pc, #324]	; (8008b9c <HAL_TIM_ConfigClockSource+0x308>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	f000 827c 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8008a5e:	f241 41c7 	movw	r1, #5319	; 0x14c7
 8008a62:	4841      	ldr	r0, [pc, #260]	; (8008b68 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008a64:	f7fa f8b7 	bl	8002bd6 <assert_failed>
      break;
 8008a68:	e275      	b.n	8008f56 <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a3f      	ldr	r2, [pc, #252]	; (8008b6c <HAL_TIM_ConfigClockSource+0x2d8>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d027      	beq.n	8008ac4 <HAL_TIM_ConfigClockSource+0x230>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a7c:	d022      	beq.n	8008ac4 <HAL_TIM_ConfigClockSource+0x230>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a3b      	ldr	r2, [pc, #236]	; (8008b70 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d01d      	beq.n	8008ac4 <HAL_TIM_ConfigClockSource+0x230>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a39      	ldr	r2, [pc, #228]	; (8008b74 <HAL_TIM_ConfigClockSource+0x2e0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d018      	beq.n	8008ac4 <HAL_TIM_ConfigClockSource+0x230>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a38      	ldr	r2, [pc, #224]	; (8008b78 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d013      	beq.n	8008ac4 <HAL_TIM_ConfigClockSource+0x230>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a38      	ldr	r2, [pc, #224]	; (8008b84 <HAL_TIM_ConfigClockSource+0x2f0>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d00e      	beq.n	8008ac4 <HAL_TIM_ConfigClockSource+0x230>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a37      	ldr	r2, [pc, #220]	; (8008b88 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d009      	beq.n	8008ac4 <HAL_TIM_ConfigClockSource+0x230>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a37      	ldr	r2, [pc, #220]	; (8008b94 <HAL_TIM_ConfigClockSource+0x300>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d004      	beq.n	8008ac4 <HAL_TIM_ConfigClockSource+0x230>
 8008aba:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8008abe:	482a      	ldr	r0, [pc, #168]	; (8008b68 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008ac0:	f7fa f889 	bl	8002bd6 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d013      	beq.n	8008af4 <HAL_TIM_ConfigClockSource+0x260>
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad4:	d00e      	beq.n	8008af4 <HAL_TIM_ConfigClockSource+0x260>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ade:	d009      	beq.n	8008af4 <HAL_TIM_ConfigClockSource+0x260>
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ae8:	d004      	beq.n	8008af4 <HAL_TIM_ConfigClockSource+0x260>
 8008aea:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8008aee:	481e      	ldr	r0, [pc, #120]	; (8008b68 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008af0:	f7fa f871 	bl	8002bd6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008afc:	d014      	beq.n	8008b28 <HAL_TIM_ConfigClockSource+0x294>
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d010      	beq.n	8008b28 <HAL_TIM_ConfigClockSource+0x294>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00c      	beq.n	8008b28 <HAL_TIM_ConfigClockSource+0x294>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d008      	beq.n	8008b28 <HAL_TIM_ConfigClockSource+0x294>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2b0a      	cmp	r3, #10
 8008b1c:	d004      	beq.n	8008b28 <HAL_TIM_ConfigClockSource+0x294>
 8008b1e:	f241 41d2 	movw	r1, #5330	; 0x14d2
 8008b22:	4811      	ldr	r0, [pc, #68]	; (8008b68 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008b24:	f7fa f857 	bl	8002bd6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	2b0f      	cmp	r3, #15
 8008b2e:	d904      	bls.n	8008b3a <HAL_TIM_ConfigClockSource+0x2a6>
 8008b30:	f241 41d3 	movw	r1, #5331	; 0x14d3
 8008b34:	480c      	ldr	r0, [pc, #48]	; (8008b68 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008b36:	f7fa f84e 	bl	8002bd6 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6818      	ldr	r0, [r3, #0]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	6899      	ldr	r1, [r3, #8]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	f000 fd9f 	bl	800968c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	609a      	str	r2, [r3, #8]
      break;
 8008b66:	e1f7      	b.n	8008f58 <HAL_TIM_ConfigClockSource+0x6c4>
 8008b68:	080104d0 	.word	0x080104d0
 8008b6c:	40010000 	.word	0x40010000
 8008b70:	40000400 	.word	0x40000400
 8008b74:	40000800 	.word	0x40000800
 8008b78:	40000c00 	.word	0x40000c00
 8008b7c:	40001000 	.word	0x40001000
 8008b80:	40001400 	.word	0x40001400
 8008b84:	40010400 	.word	0x40010400
 8008b88:	40014000 	.word	0x40014000
 8008b8c:	40014400 	.word	0x40014400
 8008b90:	40014800 	.word	0x40014800
 8008b94:	40001800 	.word	0x40001800
 8008b98:	40001c00 	.word	0x40001c00
 8008b9c:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a97      	ldr	r2, [pc, #604]	; (8008e04 <HAL_TIM_ConfigClockSource+0x570>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d01d      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x352>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb2:	d018      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x352>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a93      	ldr	r2, [pc, #588]	; (8008e08 <HAL_TIM_ConfigClockSource+0x574>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d013      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x352>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a92      	ldr	r2, [pc, #584]	; (8008e0c <HAL_TIM_ConfigClockSource+0x578>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d00e      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x352>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a90      	ldr	r2, [pc, #576]	; (8008e10 <HAL_TIM_ConfigClockSource+0x57c>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d009      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x352>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a8f      	ldr	r2, [pc, #572]	; (8008e14 <HAL_TIM_ConfigClockSource+0x580>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d004      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x352>
 8008bdc:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8008be0:	488d      	ldr	r0, [pc, #564]	; (8008e18 <HAL_TIM_ConfigClockSource+0x584>)
 8008be2:	f7f9 fff8 	bl	8002bd6 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d013      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x382>
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf6:	d00e      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x382>
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c00:	d009      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x382>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c0a:	d004      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x382>
 8008c0c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8008c10:	4881      	ldr	r0, [pc, #516]	; (8008e18 <HAL_TIM_ConfigClockSource+0x584>)
 8008c12:	f7f9 ffe0 	bl	8002bd6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c1e:	d014      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x3b6>
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d010      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x3b6>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00c      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x3b6>
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d008      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x3b6>
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b0a      	cmp	r3, #10
 8008c3e:	d004      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x3b6>
 8008c40:	f241 41ea 	movw	r1, #5354	; 0x14ea
 8008c44:	4874      	ldr	r0, [pc, #464]	; (8008e18 <HAL_TIM_ConfigClockSource+0x584>)
 8008c46:	f7f9 ffc6 	bl	8002bd6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	2b0f      	cmp	r3, #15
 8008c50:	d904      	bls.n	8008c5c <HAL_TIM_ConfigClockSource+0x3c8>
 8008c52:	f241 41eb 	movw	r1, #5355	; 0x14eb
 8008c56:	4870      	ldr	r0, [pc, #448]	; (8008e18 <HAL_TIM_ConfigClockSource+0x584>)
 8008c58:	f7f9 ffbd 	bl	8002bd6 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	6899      	ldr	r1, [r3, #8]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f000 fd0e 	bl	800968c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c7e:	609a      	str	r2, [r3, #8]
      break;
 8008c80:	e16a      	b.n	8008f58 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a5f      	ldr	r2, [pc, #380]	; (8008e04 <HAL_TIM_ConfigClockSource+0x570>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d027      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x448>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c94:	d022      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x448>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a5b      	ldr	r2, [pc, #364]	; (8008e08 <HAL_TIM_ConfigClockSource+0x574>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d01d      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x448>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a59      	ldr	r2, [pc, #356]	; (8008e0c <HAL_TIM_ConfigClockSource+0x578>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d018      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x448>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a58      	ldr	r2, [pc, #352]	; (8008e10 <HAL_TIM_ConfigClockSource+0x57c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d013      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x448>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a56      	ldr	r2, [pc, #344]	; (8008e14 <HAL_TIM_ConfigClockSource+0x580>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00e      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x448>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a56      	ldr	r2, [pc, #344]	; (8008e1c <HAL_TIM_ConfigClockSource+0x588>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d009      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x448>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a54      	ldr	r2, [pc, #336]	; (8008e20 <HAL_TIM_ConfigClockSource+0x58c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d004      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x448>
 8008cd2:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8008cd6:	4850      	ldr	r0, [pc, #320]	; (8008e18 <HAL_TIM_ConfigClockSource+0x584>)
 8008cd8:	f7f9 ff7d 	bl	8002bd6 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce4:	d014      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x47c>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d010      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x47c>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00c      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x47c>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d008      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x47c>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	2b0a      	cmp	r3, #10
 8008d04:	d004      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x47c>
 8008d06:	f241 41fd 	movw	r1, #5373	; 0x14fd
 8008d0a:	4843      	ldr	r0, [pc, #268]	; (8008e18 <HAL_TIM_ConfigClockSource+0x584>)
 8008d0c:	f7f9 ff63 	bl	8002bd6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	2b0f      	cmp	r3, #15
 8008d16:	d904      	bls.n	8008d22 <HAL_TIM_ConfigClockSource+0x48e>
 8008d18:	f241 41fe 	movw	r1, #5374	; 0x14fe
 8008d1c:	483e      	ldr	r0, [pc, #248]	; (8008e18 <HAL_TIM_ConfigClockSource+0x584>)
 8008d1e:	f7f9 ff5a 	bl	8002bd6 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6818      	ldr	r0, [r3, #0]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	6859      	ldr	r1, [r3, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f000 fc32 	bl	8009598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2150      	movs	r1, #80	; 0x50
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 fc8b 	bl	8009656 <TIM_ITRx_SetConfig>
      break;
 8008d40:	e10a      	b.n	8008f58 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a2f      	ldr	r2, [pc, #188]	; (8008e04 <HAL_TIM_ConfigClockSource+0x570>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d027      	beq.n	8008d9c <HAL_TIM_ConfigClockSource+0x508>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d54:	d022      	beq.n	8008d9c <HAL_TIM_ConfigClockSource+0x508>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a2b      	ldr	r2, [pc, #172]	; (8008e08 <HAL_TIM_ConfigClockSource+0x574>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d01d      	beq.n	8008d9c <HAL_TIM_ConfigClockSource+0x508>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a29      	ldr	r2, [pc, #164]	; (8008e0c <HAL_TIM_ConfigClockSource+0x578>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d018      	beq.n	8008d9c <HAL_TIM_ConfigClockSource+0x508>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a28      	ldr	r2, [pc, #160]	; (8008e10 <HAL_TIM_ConfigClockSource+0x57c>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d013      	beq.n	8008d9c <HAL_TIM_ConfigClockSource+0x508>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a26      	ldr	r2, [pc, #152]	; (8008e14 <HAL_TIM_ConfigClockSource+0x580>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00e      	beq.n	8008d9c <HAL_TIM_ConfigClockSource+0x508>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a26      	ldr	r2, [pc, #152]	; (8008e1c <HAL_TIM_ConfigClockSource+0x588>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d009      	beq.n	8008d9c <HAL_TIM_ConfigClockSource+0x508>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a24      	ldr	r2, [pc, #144]	; (8008e20 <HAL_TIM_ConfigClockSource+0x58c>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d004      	beq.n	8008d9c <HAL_TIM_ConfigClockSource+0x508>
 8008d92:	f241 510a 	movw	r1, #5386	; 0x150a
 8008d96:	4820      	ldr	r0, [pc, #128]	; (8008e18 <HAL_TIM_ConfigClockSource+0x584>)
 8008d98:	f7f9 ff1d 	bl	8002bd6 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008da4:	d014      	beq.n	8008dd0 <HAL_TIM_ConfigClockSource+0x53c>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d010      	beq.n	8008dd0 <HAL_TIM_ConfigClockSource+0x53c>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00c      	beq.n	8008dd0 <HAL_TIM_ConfigClockSource+0x53c>
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d008      	beq.n	8008dd0 <HAL_TIM_ConfigClockSource+0x53c>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	2b0a      	cmp	r3, #10
 8008dc4:	d004      	beq.n	8008dd0 <HAL_TIM_ConfigClockSource+0x53c>
 8008dc6:	f241 510d 	movw	r1, #5389	; 0x150d
 8008dca:	4813      	ldr	r0, [pc, #76]	; (8008e18 <HAL_TIM_ConfigClockSource+0x584>)
 8008dcc:	f7f9 ff03 	bl	8002bd6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	2b0f      	cmp	r3, #15
 8008dd6:	d904      	bls.n	8008de2 <HAL_TIM_ConfigClockSource+0x54e>
 8008dd8:	f241 510e 	movw	r1, #5390	; 0x150e
 8008ddc:	480e      	ldr	r0, [pc, #56]	; (8008e18 <HAL_TIM_ConfigClockSource+0x584>)
 8008dde:	f7f9 fefa 	bl	8002bd6 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6859      	ldr	r1, [r3, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	461a      	mov	r2, r3
 8008df0:	f000 fc01 	bl	80095f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2160      	movs	r1, #96	; 0x60
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fc2b 	bl	8009656 <TIM_ITRx_SetConfig>
      break;
 8008e00:	e0aa      	b.n	8008f58 <HAL_TIM_ConfigClockSource+0x6c4>
 8008e02:	bf00      	nop
 8008e04:	40010000 	.word	0x40010000
 8008e08:	40000400 	.word	0x40000400
 8008e0c:	40000800 	.word	0x40000800
 8008e10:	40000c00 	.word	0x40000c00
 8008e14:	40010400 	.word	0x40010400
 8008e18:	080104d0 	.word	0x080104d0
 8008e1c:	40014000 	.word	0x40014000
 8008e20:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a52      	ldr	r2, [pc, #328]	; (8008f74 <HAL_TIM_ConfigClockSource+0x6e0>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d027      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e36:	d022      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a4e      	ldr	r2, [pc, #312]	; (8008f78 <HAL_TIM_ConfigClockSource+0x6e4>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d01d      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a4d      	ldr	r2, [pc, #308]	; (8008f7c <HAL_TIM_ConfigClockSource+0x6e8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d018      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a4b      	ldr	r2, [pc, #300]	; (8008f80 <HAL_TIM_ConfigClockSource+0x6ec>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d013      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a4a      	ldr	r2, [pc, #296]	; (8008f84 <HAL_TIM_ConfigClockSource+0x6f0>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00e      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a48      	ldr	r2, [pc, #288]	; (8008f88 <HAL_TIM_ConfigClockSource+0x6f4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d009      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a47      	ldr	r2, [pc, #284]	; (8008f8c <HAL_TIM_ConfigClockSource+0x6f8>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d004      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8008e74:	f241 511a 	movw	r1, #5402	; 0x151a
 8008e78:	4845      	ldr	r0, [pc, #276]	; (8008f90 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008e7a:	f7f9 feac 	bl	8002bd6 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e86:	d014      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0x61e>
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d010      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0x61e>
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00c      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0x61e>
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d008      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0x61e>
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	2b0a      	cmp	r3, #10
 8008ea6:	d004      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0x61e>
 8008ea8:	f241 511d 	movw	r1, #5405	; 0x151d
 8008eac:	4838      	ldr	r0, [pc, #224]	; (8008f90 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008eae:	f7f9 fe92 	bl	8002bd6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	2b0f      	cmp	r3, #15
 8008eb8:	d904      	bls.n	8008ec4 <HAL_TIM_ConfigClockSource+0x630>
 8008eba:	f241 511e 	movw	r1, #5406	; 0x151e
 8008ebe:	4834      	ldr	r0, [pc, #208]	; (8008f90 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008ec0:	f7f9 fe89 	bl	8002bd6 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6818      	ldr	r0, [r3, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	6859      	ldr	r1, [r3, #4]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	f000 fb61 	bl	8009598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2140      	movs	r1, #64	; 0x40
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fbba 	bl	8009656 <TIM_ITRx_SetConfig>
      break;
 8008ee2:	e039      	b.n	8008f58 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a22      	ldr	r2, [pc, #136]	; (8008f74 <HAL_TIM_ConfigClockSource+0x6e0>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d027      	beq.n	8008f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef6:	d022      	beq.n	8008f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a1e      	ldr	r2, [pc, #120]	; (8008f78 <HAL_TIM_ConfigClockSource+0x6e4>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d01d      	beq.n	8008f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a1d      	ldr	r2, [pc, #116]	; (8008f7c <HAL_TIM_ConfigClockSource+0x6e8>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d018      	beq.n	8008f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a1b      	ldr	r2, [pc, #108]	; (8008f80 <HAL_TIM_ConfigClockSource+0x6ec>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d013      	beq.n	8008f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a1a      	ldr	r2, [pc, #104]	; (8008f84 <HAL_TIM_ConfigClockSource+0x6f0>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d00e      	beq.n	8008f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a18      	ldr	r2, [pc, #96]	; (8008f88 <HAL_TIM_ConfigClockSource+0x6f4>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d009      	beq.n	8008f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a17      	ldr	r2, [pc, #92]	; (8008f8c <HAL_TIM_ConfigClockSource+0x6f8>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d004      	beq.n	8008f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8008f34:	f241 512d 	movw	r1, #5421	; 0x152d
 8008f38:	4815      	ldr	r0, [pc, #84]	; (8008f90 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008f3a:	f7f9 fe4c 	bl	8002bd6 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4619      	mov	r1, r3
 8008f48:	4610      	mov	r0, r2
 8008f4a:	f000 fb84 	bl	8009656 <TIM_ITRx_SetConfig>
      break;
 8008f4e:	e003      	b.n	8008f58 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]
      break;
 8008f54:	e000      	b.n	8008f58 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 8008f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	40010000 	.word	0x40010000
 8008f78:	40000400 	.word	0x40000400
 8008f7c:	40000800 	.word	0x40000800
 8008f80:	40000c00 	.word	0x40000c00
 8008f84:	40010400 	.word	0x40010400
 8008f88:	40014000 	.word	0x40014000
 8008f8c:	40001800 	.word	0x40001800
 8008f90:	080104d0 	.word	0x080104d0

08008f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a40      	ldr	r2, [pc, #256]	; (80090f8 <TIM_Base_SetConfig+0x114>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d013      	beq.n	8009024 <TIM_Base_SetConfig+0x40>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009002:	d00f      	beq.n	8009024 <TIM_Base_SetConfig+0x40>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a3d      	ldr	r2, [pc, #244]	; (80090fc <TIM_Base_SetConfig+0x118>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00b      	beq.n	8009024 <TIM_Base_SetConfig+0x40>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a3c      	ldr	r2, [pc, #240]	; (8009100 <TIM_Base_SetConfig+0x11c>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d007      	beq.n	8009024 <TIM_Base_SetConfig+0x40>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a3b      	ldr	r2, [pc, #236]	; (8009104 <TIM_Base_SetConfig+0x120>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d003      	beq.n	8009024 <TIM_Base_SetConfig+0x40>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a3a      	ldr	r2, [pc, #232]	; (8009108 <TIM_Base_SetConfig+0x124>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d108      	bne.n	8009036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800902a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a2f      	ldr	r2, [pc, #188]	; (80090f8 <TIM_Base_SetConfig+0x114>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d02b      	beq.n	8009096 <TIM_Base_SetConfig+0xb2>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009044:	d027      	beq.n	8009096 <TIM_Base_SetConfig+0xb2>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a2c      	ldr	r2, [pc, #176]	; (80090fc <TIM_Base_SetConfig+0x118>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d023      	beq.n	8009096 <TIM_Base_SetConfig+0xb2>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a2b      	ldr	r2, [pc, #172]	; (8009100 <TIM_Base_SetConfig+0x11c>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d01f      	beq.n	8009096 <TIM_Base_SetConfig+0xb2>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a2a      	ldr	r2, [pc, #168]	; (8009104 <TIM_Base_SetConfig+0x120>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d01b      	beq.n	8009096 <TIM_Base_SetConfig+0xb2>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a29      	ldr	r2, [pc, #164]	; (8009108 <TIM_Base_SetConfig+0x124>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d017      	beq.n	8009096 <TIM_Base_SetConfig+0xb2>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a28      	ldr	r2, [pc, #160]	; (800910c <TIM_Base_SetConfig+0x128>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d013      	beq.n	8009096 <TIM_Base_SetConfig+0xb2>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a27      	ldr	r2, [pc, #156]	; (8009110 <TIM_Base_SetConfig+0x12c>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00f      	beq.n	8009096 <TIM_Base_SetConfig+0xb2>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a26      	ldr	r2, [pc, #152]	; (8009114 <TIM_Base_SetConfig+0x130>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d00b      	beq.n	8009096 <TIM_Base_SetConfig+0xb2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a25      	ldr	r2, [pc, #148]	; (8009118 <TIM_Base_SetConfig+0x134>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d007      	beq.n	8009096 <TIM_Base_SetConfig+0xb2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a24      	ldr	r2, [pc, #144]	; (800911c <TIM_Base_SetConfig+0x138>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d003      	beq.n	8009096 <TIM_Base_SetConfig+0xb2>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a23      	ldr	r2, [pc, #140]	; (8009120 <TIM_Base_SetConfig+0x13c>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d108      	bne.n	80090a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800909c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	689a      	ldr	r2, [r3, #8]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a0a      	ldr	r2, [pc, #40]	; (80090f8 <TIM_Base_SetConfig+0x114>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d003      	beq.n	80090dc <TIM_Base_SetConfig+0xf8>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a0c      	ldr	r2, [pc, #48]	; (8009108 <TIM_Base_SetConfig+0x124>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d103      	bne.n	80090e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	691a      	ldr	r2, [r3, #16]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	615a      	str	r2, [r3, #20]
}
 80090ea:	bf00      	nop
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40010000 	.word	0x40010000
 80090fc:	40000400 	.word	0x40000400
 8009100:	40000800 	.word	0x40000800
 8009104:	40000c00 	.word	0x40000c00
 8009108:	40010400 	.word	0x40010400
 800910c:	40014000 	.word	0x40014000
 8009110:	40014400 	.word	0x40014400
 8009114:	40014800 	.word	0x40014800
 8009118:	40001800 	.word	0x40001800
 800911c:	40001c00 	.word	0x40001c00
 8009120:	40002000 	.word	0x40002000

08009124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	f023 0201 	bic.w	r2, r3, #1
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f023 0303 	bic.w	r3, r3, #3
 800915a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	4313      	orrs	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f023 0302 	bic.w	r3, r3, #2
 800916c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	4313      	orrs	r3, r2
 8009176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a34      	ldr	r2, [pc, #208]	; (800924c <TIM_OC1_SetConfig+0x128>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d003      	beq.n	8009188 <TIM_OC1_SetConfig+0x64>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a33      	ldr	r2, [pc, #204]	; (8009250 <TIM_OC1_SetConfig+0x12c>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d119      	bne.n	80091bc <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d008      	beq.n	80091a2 <TIM_OC1_SetConfig+0x7e>
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	2b08      	cmp	r3, #8
 8009196:	d004      	beq.n	80091a2 <TIM_OC1_SetConfig+0x7e>
 8009198:	f641 21cb 	movw	r1, #6859	; 0x1acb
 800919c:	482d      	ldr	r0, [pc, #180]	; (8009254 <TIM_OC1_SetConfig+0x130>)
 800919e:	f7f9 fd1a 	bl	8002bd6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f023 0308 	bic.w	r3, r3, #8
 80091a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	f023 0304 	bic.w	r3, r3, #4
 80091ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a23      	ldr	r2, [pc, #140]	; (800924c <TIM_OC1_SetConfig+0x128>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d003      	beq.n	80091cc <TIM_OC1_SetConfig+0xa8>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a22      	ldr	r2, [pc, #136]	; (8009250 <TIM_OC1_SetConfig+0x12c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d12d      	bne.n	8009228 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091d4:	d008      	beq.n	80091e8 <TIM_OC1_SetConfig+0xc4>
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d004      	beq.n	80091e8 <TIM_OC1_SetConfig+0xc4>
 80091de:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 80091e2:	481c      	ldr	r0, [pc, #112]	; (8009254 <TIM_OC1_SetConfig+0x130>)
 80091e4:	f7f9 fcf7 	bl	8002bd6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091f0:	d008      	beq.n	8009204 <TIM_OC1_SetConfig+0xe0>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d004      	beq.n	8009204 <TIM_OC1_SetConfig+0xe0>
 80091fa:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 80091fe:	4815      	ldr	r0, [pc, #84]	; (8009254 <TIM_OC1_SetConfig+0x130>)
 8009200:	f7f9 fce9 	bl	8002bd6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800920a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	4313      	orrs	r3, r2
 800921c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	4313      	orrs	r3, r2
 8009226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	621a      	str	r2, [r3, #32]
}
 8009242:	bf00      	nop
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	40010000 	.word	0x40010000
 8009250:	40010400 	.word	0x40010400
 8009254:	080104d0 	.word	0x080104d0

08009258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	f023 0210 	bic.w	r2, r3, #16
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800928e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	021b      	lsls	r3, r3, #8
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	4313      	orrs	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f023 0320 	bic.w	r3, r3, #32
 80092a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a35      	ldr	r2, [pc, #212]	; (8009388 <TIM_OC2_SetConfig+0x130>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d003      	beq.n	80092c0 <TIM_OC2_SetConfig+0x68>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a34      	ldr	r2, [pc, #208]	; (800938c <TIM_OC2_SetConfig+0x134>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d11a      	bne.n	80092f6 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d008      	beq.n	80092da <TIM_OC2_SetConfig+0x82>
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d004      	beq.n	80092da <TIM_OC2_SetConfig+0x82>
 80092d0:	f641 3116 	movw	r1, #6934	; 0x1b16
 80092d4:	482e      	ldr	r0, [pc, #184]	; (8009390 <TIM_OC2_SetConfig+0x138>)
 80092d6:	f7f9 fc7e 	bl	8002bd6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	011b      	lsls	r3, r3, #4
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092f4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a23      	ldr	r2, [pc, #140]	; (8009388 <TIM_OC2_SetConfig+0x130>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d003      	beq.n	8009306 <TIM_OC2_SetConfig+0xae>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a22      	ldr	r2, [pc, #136]	; (800938c <TIM_OC2_SetConfig+0x134>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d12f      	bne.n	8009366 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800930e:	d008      	beq.n	8009322 <TIM_OC2_SetConfig+0xca>
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d004      	beq.n	8009322 <TIM_OC2_SetConfig+0xca>
 8009318:	f641 3124 	movw	r1, #6948	; 0x1b24
 800931c:	481c      	ldr	r0, [pc, #112]	; (8009390 <TIM_OC2_SetConfig+0x138>)
 800931e:	f7f9 fc5a 	bl	8002bd6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800932a:	d008      	beq.n	800933e <TIM_OC2_SetConfig+0xe6>
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <TIM_OC2_SetConfig+0xe6>
 8009334:	f641 3125 	movw	r1, #6949	; 0x1b25
 8009338:	4815      	ldr	r0, [pc, #84]	; (8009390 <TIM_OC2_SetConfig+0x138>)
 800933a:	f7f9 fc4c 	bl	8002bd6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800934c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	4313      	orrs	r3, r2
 8009358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	4313      	orrs	r3, r2
 8009364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	685a      	ldr	r2, [r3, #4]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	621a      	str	r2, [r3, #32]
}
 8009380:	bf00      	nop
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	40010000 	.word	0x40010000
 800938c:	40010400 	.word	0x40010400
 8009390:	080104d0 	.word	0x080104d0

08009394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	69db      	ldr	r3, [r3, #28]
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 0303 	bic.w	r3, r3, #3
 80093ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	021b      	lsls	r3, r3, #8
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a35      	ldr	r2, [pc, #212]	; (80094c4 <TIM_OC3_SetConfig+0x130>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d003      	beq.n	80093fa <TIM_OC3_SetConfig+0x66>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a34      	ldr	r2, [pc, #208]	; (80094c8 <TIM_OC3_SetConfig+0x134>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d11a      	bne.n	8009430 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d008      	beq.n	8009414 <TIM_OC3_SetConfig+0x80>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	2b08      	cmp	r3, #8
 8009408:	d004      	beq.n	8009414 <TIM_OC3_SetConfig+0x80>
 800940a:	f641 3161 	movw	r1, #7009	; 0x1b61
 800940e:	482f      	ldr	r0, [pc, #188]	; (80094cc <TIM_OC3_SetConfig+0x138>)
 8009410:	f7f9 fbe1 	bl	8002bd6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800941a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	021b      	lsls	r3, r3, #8
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	4313      	orrs	r3, r2
 8009426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800942e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a24      	ldr	r2, [pc, #144]	; (80094c4 <TIM_OC3_SetConfig+0x130>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d003      	beq.n	8009440 <TIM_OC3_SetConfig+0xac>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a23      	ldr	r2, [pc, #140]	; (80094c8 <TIM_OC3_SetConfig+0x134>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d12f      	bne.n	80094a0 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009448:	d008      	beq.n	800945c <TIM_OC3_SetConfig+0xc8>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d004      	beq.n	800945c <TIM_OC3_SetConfig+0xc8>
 8009452:	f641 316e 	movw	r1, #7022	; 0x1b6e
 8009456:	481d      	ldr	r0, [pc, #116]	; (80094cc <TIM_OC3_SetConfig+0x138>)
 8009458:	f7f9 fbbd 	bl	8002bd6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	695b      	ldr	r3, [r3, #20]
 8009460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009464:	d008      	beq.n	8009478 <TIM_OC3_SetConfig+0xe4>
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d004      	beq.n	8009478 <TIM_OC3_SetConfig+0xe4>
 800946e:	f641 316f 	movw	r1, #7023	; 0x1b6f
 8009472:	4816      	ldr	r0, [pc, #88]	; (80094cc <TIM_OC3_SetConfig+0x138>)
 8009474:	f7f9 fbaf 	bl	8002bd6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800947e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	695b      	ldr	r3, [r3, #20]
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	4313      	orrs	r3, r2
 8009492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	011b      	lsls	r3, r3, #4
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	4313      	orrs	r3, r2
 800949e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	621a      	str	r2, [r3, #32]
}
 80094ba:	bf00      	nop
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	40010000 	.word	0x40010000
 80094c8:	40010400 	.word	0x40010400
 80094cc:	080104d0 	.word	0x080104d0

080094d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	021b      	lsls	r3, r3, #8
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	4313      	orrs	r3, r2
 8009512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800951a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	031b      	lsls	r3, r3, #12
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	4313      	orrs	r3, r2
 8009526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a18      	ldr	r2, [pc, #96]	; (800958c <TIM_OC4_SetConfig+0xbc>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d003      	beq.n	8009538 <TIM_OC4_SetConfig+0x68>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a17      	ldr	r2, [pc, #92]	; (8009590 <TIM_OC4_SetConfig+0xc0>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d117      	bne.n	8009568 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	695b      	ldr	r3, [r3, #20]
 800953c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009540:	d008      	beq.n	8009554 <TIM_OC4_SetConfig+0x84>
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d004      	beq.n	8009554 <TIM_OC4_SetConfig+0x84>
 800954a:	f641 31ad 	movw	r1, #7085	; 0x1bad
 800954e:	4811      	ldr	r0, [pc, #68]	; (8009594 <TIM_OC4_SetConfig+0xc4>)
 8009550:	f7f9 fb41 	bl	8002bd6 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800955a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	019b      	lsls	r3, r3, #6
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	4313      	orrs	r3, r2
 8009566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	621a      	str	r2, [r3, #32]
}
 8009582:	bf00      	nop
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	40010000 	.word	0x40010000
 8009590:	40010400 	.word	0x40010400
 8009594:	080104d0 	.word	0x080104d0

08009598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009598:	b480      	push	{r7}
 800959a:	b087      	sub	sp, #28
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	f023 0201 	bic.w	r2, r3, #1
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	011b      	lsls	r3, r3, #4
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f023 030a 	bic.w	r3, r3, #10
 80095d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	4313      	orrs	r3, r2
 80095dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	621a      	str	r2, [r3, #32]
}
 80095ea:	bf00      	nop
 80095ec:	371c      	adds	r7, #28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b087      	sub	sp, #28
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	60f8      	str	r0, [r7, #12]
 80095fe:	60b9      	str	r1, [r7, #8]
 8009600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	f023 0210 	bic.w	r2, r3, #16
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	031b      	lsls	r3, r3, #12
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	4313      	orrs	r3, r2
 800962a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009632:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	011b      	lsls	r3, r3, #4
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	4313      	orrs	r3, r2
 800963c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	621a      	str	r2, [r3, #32]
}
 800964a:	bf00      	nop
 800964c:	371c      	adds	r7, #28
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009656:	b480      	push	{r7}
 8009658:	b085      	sub	sp, #20
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800966c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4313      	orrs	r3, r2
 8009674:	f043 0307 	orr.w	r3, r3, #7
 8009678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	609a      	str	r2, [r3, #8]
}
 8009680:	bf00      	nop
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	021a      	lsls	r2, r3, #8
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	431a      	orrs	r2, r3
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	609a      	str	r2, [r3, #8]
}
 80096c0:	bf00      	nop
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4a32      	ldr	r2, [pc, #200]	; (80097a4 <TIM_CCxChannelCmd+0xd8>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d030      	beq.n	8009742 <TIM_CCxChannelCmd+0x76>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e6:	d02c      	beq.n	8009742 <TIM_CCxChannelCmd+0x76>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	4a2f      	ldr	r2, [pc, #188]	; (80097a8 <TIM_CCxChannelCmd+0xdc>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d028      	beq.n	8009742 <TIM_CCxChannelCmd+0x76>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4a2e      	ldr	r2, [pc, #184]	; (80097ac <TIM_CCxChannelCmd+0xe0>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d024      	beq.n	8009742 <TIM_CCxChannelCmd+0x76>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4a2d      	ldr	r2, [pc, #180]	; (80097b0 <TIM_CCxChannelCmd+0xe4>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d020      	beq.n	8009742 <TIM_CCxChannelCmd+0x76>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4a2c      	ldr	r2, [pc, #176]	; (80097b4 <TIM_CCxChannelCmd+0xe8>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d01c      	beq.n	8009742 <TIM_CCxChannelCmd+0x76>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4a2b      	ldr	r2, [pc, #172]	; (80097b8 <TIM_CCxChannelCmd+0xec>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d018      	beq.n	8009742 <TIM_CCxChannelCmd+0x76>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4a2a      	ldr	r2, [pc, #168]	; (80097bc <TIM_CCxChannelCmd+0xf0>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d014      	beq.n	8009742 <TIM_CCxChannelCmd+0x76>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4a29      	ldr	r2, [pc, #164]	; (80097c0 <TIM_CCxChannelCmd+0xf4>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d010      	beq.n	8009742 <TIM_CCxChannelCmd+0x76>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4a28      	ldr	r2, [pc, #160]	; (80097c4 <TIM_CCxChannelCmd+0xf8>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d00c      	beq.n	8009742 <TIM_CCxChannelCmd+0x76>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4a27      	ldr	r2, [pc, #156]	; (80097c8 <TIM_CCxChannelCmd+0xfc>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d008      	beq.n	8009742 <TIM_CCxChannelCmd+0x76>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4a26      	ldr	r2, [pc, #152]	; (80097cc <TIM_CCxChannelCmd+0x100>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d004      	beq.n	8009742 <TIM_CCxChannelCmd+0x76>
 8009738:	f641 5198 	movw	r1, #7576	; 0x1d98
 800973c:	4824      	ldr	r0, [pc, #144]	; (80097d0 <TIM_CCxChannelCmd+0x104>)
 800973e:	f7f9 fa4a 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d010      	beq.n	800976a <TIM_CCxChannelCmd+0x9e>
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	2b04      	cmp	r3, #4
 800974c:	d00d      	beq.n	800976a <TIM_CCxChannelCmd+0x9e>
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2b08      	cmp	r3, #8
 8009752:	d00a      	beq.n	800976a <TIM_CCxChannelCmd+0x9e>
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2b0c      	cmp	r3, #12
 8009758:	d007      	beq.n	800976a <TIM_CCxChannelCmd+0x9e>
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b3c      	cmp	r3, #60	; 0x3c
 800975e:	d004      	beq.n	800976a <TIM_CCxChannelCmd+0x9e>
 8009760:	f641 5199 	movw	r1, #7577	; 0x1d99
 8009764:	481a      	ldr	r0, [pc, #104]	; (80097d0 <TIM_CCxChannelCmd+0x104>)
 8009766:	f7f9 fa36 	bl	8002bd6 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	f003 031f 	and.w	r3, r3, #31
 8009770:	2201      	movs	r2, #1
 8009772:	fa02 f303 	lsl.w	r3, r2, r3
 8009776:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6a1a      	ldr	r2, [r3, #32]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	43db      	mvns	r3, r3
 8009780:	401a      	ands	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6a1a      	ldr	r2, [r3, #32]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	f003 031f 	and.w	r3, r3, #31
 8009790:	6879      	ldr	r1, [r7, #4]
 8009792:	fa01 f303 	lsl.w	r3, r1, r3
 8009796:	431a      	orrs	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	621a      	str	r2, [r3, #32]
}
 800979c:	bf00      	nop
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	40010000 	.word	0x40010000
 80097a8:	40000400 	.word	0x40000400
 80097ac:	40000800 	.word	0x40000800
 80097b0:	40000c00 	.word	0x40000c00
 80097b4:	40010400 	.word	0x40010400
 80097b8:	40014000 	.word	0x40014000
 80097bc:	40014400 	.word	0x40014400
 80097c0:	40014800 	.word	0x40014800
 80097c4:	40001800 	.word	0x40001800
 80097c8:	40001c00 	.word	0x40001c00
 80097cc:	40002000 	.word	0x40002000
 80097d0:	080104d0 	.word	0x080104d0

080097d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a61      	ldr	r2, [pc, #388]	; (8009968 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d027      	beq.n	8009838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097f0:	d022      	beq.n	8009838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a5d      	ldr	r2, [pc, #372]	; (800996c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d01d      	beq.n	8009838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a5b      	ldr	r2, [pc, #364]	; (8009970 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d018      	beq.n	8009838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a5a      	ldr	r2, [pc, #360]	; (8009974 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d013      	beq.n	8009838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a58      	ldr	r2, [pc, #352]	; (8009978 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00e      	beq.n	8009838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a57      	ldr	r2, [pc, #348]	; (800997c <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d009      	beq.n	8009838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a55      	ldr	r2, [pc, #340]	; (8009980 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d004      	beq.n	8009838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800982e:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8009832:	4854      	ldr	r0, [pc, #336]	; (8009984 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009834:	f7f9 f9cf 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d020      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b10      	cmp	r3, #16
 8009846:	d01c      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b20      	cmp	r3, #32
 800984e:	d018      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b30      	cmp	r3, #48	; 0x30
 8009856:	d014      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b40      	cmp	r3, #64	; 0x40
 800985e:	d010      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b50      	cmp	r3, #80	; 0x50
 8009866:	d00c      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b60      	cmp	r3, #96	; 0x60
 800986e:	d008      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b70      	cmp	r3, #112	; 0x70
 8009876:	d004      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009878:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800987c:	4841      	ldr	r0, [pc, #260]	; (8009984 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800987e:	f7f9 f9aa 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	2b80      	cmp	r3, #128	; 0x80
 8009888:	d008      	beq.n	800989c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d004      	beq.n	800989c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009892:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8009896:	483b      	ldr	r0, [pc, #236]	; (8009984 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009898:	f7f9 f99d 	bl	8002bd6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e05a      	b.n	8009960 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2202      	movs	r2, #2
 80098b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a1f      	ldr	r2, [pc, #124]	; (8009968 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d022      	beq.n	8009934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f6:	d01d      	beq.n	8009934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a1b      	ldr	r2, [pc, #108]	; (800996c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d018      	beq.n	8009934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a1a      	ldr	r2, [pc, #104]	; (8009970 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d013      	beq.n	8009934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a18      	ldr	r2, [pc, #96]	; (8009974 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d00e      	beq.n	8009934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a19      	ldr	r2, [pc, #100]	; (8009980 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d009      	beq.n	8009934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a18      	ldr	r2, [pc, #96]	; (8009988 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d004      	beq.n	8009934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a17      	ldr	r2, [pc, #92]	; (800998c <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d10c      	bne.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800993a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	4313      	orrs	r3, r2
 8009944:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	40010000 	.word	0x40010000
 800996c:	40000400 	.word	0x40000400
 8009970:	40000800 	.word	0x40000800
 8009974:	40000c00 	.word	0x40000c00
 8009978:	40001000 	.word	0x40001000
 800997c:	40001400 	.word	0x40001400
 8009980:	40010400 	.word	0x40010400
 8009984:	08010508 	.word	0x08010508
 8009988:	40014000 	.word	0x40014000
 800998c:	40001800 	.word	0x40001800

08009990 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a5e      	ldr	r2, [pc, #376]	; (8009b1c <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d009      	beq.n	80099bc <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a5c      	ldr	r2, [pc, #368]	; (8009b20 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d004      	beq.n	80099bc <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80099b2:	f240 71ee 	movw	r1, #2030	; 0x7ee
 80099b6:	485b      	ldr	r0, [pc, #364]	; (8009b24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80099b8:	f7f9 f90d 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099c4:	d008      	beq.n	80099d8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d004      	beq.n	80099d8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80099ce:	f240 71ef 	movw	r1, #2031	; 0x7ef
 80099d2:	4854      	ldr	r0, [pc, #336]	; (8009b24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80099d4:	f7f9 f8ff 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099e0:	d008      	beq.n	80099f4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d004      	beq.n	80099f4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80099ea:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80099ee:	484d      	ldr	r0, [pc, #308]	; (8009b24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80099f0:	f7f9 f8f1 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d013      	beq.n	8009a24 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a04:	d00e      	beq.n	8009a24 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a0e:	d009      	beq.n	8009a24 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a18:	d004      	beq.n	8009a24 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009a1a:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8009a1e:	4841      	ldr	r0, [pc, #260]	; (8009b24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009a20:	f7f9 f8d9 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	2bff      	cmp	r3, #255	; 0xff
 8009a2a:	d904      	bls.n	8009a36 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8009a2c:	f240 71f2 	movw	r1, #2034	; 0x7f2
 8009a30:	483c      	ldr	r0, [pc, #240]	; (8009b24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009a32:	f7f9 f8d0 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a3e:	d008      	beq.n	8009a52 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d004      	beq.n	8009a52 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009a48:	f240 71f3 	movw	r1, #2035	; 0x7f3
 8009a4c:	4835      	ldr	r0, [pc, #212]	; (8009b24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009a4e:	f7f9 f8c2 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d009      	beq.n	8009a6e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a62:	d004      	beq.n	8009a6e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009a64:	f240 71f4 	movw	r1, #2036	; 0x7f4
 8009a68:	482e      	ldr	r0, [pc, #184]	; (8009b24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009a6a:	f7f9 f8b4 	bl	8002bd6 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a76:	d008      	beq.n	8009a8a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d004      	beq.n	8009a8a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009a80:	f240 71f5 	movw	r1, #2037	; 0x7f5
 8009a84:	4827      	ldr	r0, [pc, #156]	; (8009b24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009a86:	f7f9 f8a6 	bl	8002bd6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d101      	bne.n	8009a98 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8009a94:	2302      	movs	r3, #2
 8009a96:	e03d      	b.n	8009b14 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	40010000 	.word	0x40010000
 8009b20:	40010400 	.word	0x40010400
 8009b24:	08010508 	.word	0x08010508

08009b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e0be      	b.n	8009ce0 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d03b      	beq.n	8009be2 <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a5e      	ldr	r2, [pc, #376]	; (8009ce8 <HAL_UART_Init+0x198>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d01d      	beq.n	8009bb0 <HAL_UART_Init+0x60>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a5c      	ldr	r2, [pc, #368]	; (8009cec <HAL_UART_Init+0x19c>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d018      	beq.n	8009bb0 <HAL_UART_Init+0x60>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a5b      	ldr	r2, [pc, #364]	; (8009cf0 <HAL_UART_Init+0x1a0>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d013      	beq.n	8009bb0 <HAL_UART_Init+0x60>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a59      	ldr	r2, [pc, #356]	; (8009cf4 <HAL_UART_Init+0x1a4>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d00e      	beq.n	8009bb0 <HAL_UART_Init+0x60>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a58      	ldr	r2, [pc, #352]	; (8009cf8 <HAL_UART_Init+0x1a8>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d009      	beq.n	8009bb0 <HAL_UART_Init+0x60>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a56      	ldr	r2, [pc, #344]	; (8009cfc <HAL_UART_Init+0x1ac>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d004      	beq.n	8009bb0 <HAL_UART_Init+0x60>
 8009ba6:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8009baa:	4855      	ldr	r0, [pc, #340]	; (8009d00 <HAL_UART_Init+0x1b0>)
 8009bac:	f7f9 f813 	bl	8002bd6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d037      	beq.n	8009c28 <HAL_UART_Init+0xd8>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bc0:	d032      	beq.n	8009c28 <HAL_UART_Init+0xd8>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bca:	d02d      	beq.n	8009c28 <HAL_UART_Init+0xd8>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bd4:	d028      	beq.n	8009c28 <HAL_UART_Init+0xd8>
 8009bd6:	f240 1173 	movw	r1, #371	; 0x173
 8009bda:	4849      	ldr	r0, [pc, #292]	; (8009d00 <HAL_UART_Init+0x1b0>)
 8009bdc:	f7f8 fffb 	bl	8002bd6 <assert_failed>
 8009be0:	e022      	b.n	8009c28 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a40      	ldr	r2, [pc, #256]	; (8009ce8 <HAL_UART_Init+0x198>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d01d      	beq.n	8009c28 <HAL_UART_Init+0xd8>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a3e      	ldr	r2, [pc, #248]	; (8009cec <HAL_UART_Init+0x19c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d018      	beq.n	8009c28 <HAL_UART_Init+0xd8>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a3d      	ldr	r2, [pc, #244]	; (8009cf0 <HAL_UART_Init+0x1a0>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d013      	beq.n	8009c28 <HAL_UART_Init+0xd8>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a3b      	ldr	r2, [pc, #236]	; (8009cf4 <HAL_UART_Init+0x1a4>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d00e      	beq.n	8009c28 <HAL_UART_Init+0xd8>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a3a      	ldr	r2, [pc, #232]	; (8009cf8 <HAL_UART_Init+0x1a8>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d009      	beq.n	8009c28 <HAL_UART_Init+0xd8>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a38      	ldr	r2, [pc, #224]	; (8009cfc <HAL_UART_Init+0x1ac>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d004      	beq.n	8009c28 <HAL_UART_Init+0xd8>
 8009c1e:	f240 1177 	movw	r1, #375	; 0x177
 8009c22:	4837      	ldr	r0, [pc, #220]	; (8009d00 <HAL_UART_Init+0x1b0>)
 8009c24:	f7f8 ffd7 	bl	8002bd6 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d009      	beq.n	8009c44 <HAL_UART_Init+0xf4>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c38:	d004      	beq.n	8009c44 <HAL_UART_Init+0xf4>
 8009c3a:	f240 1179 	movw	r1, #377	; 0x179
 8009c3e:	4830      	ldr	r0, [pc, #192]	; (8009d00 <HAL_UART_Init+0x1b0>)
 8009c40:	f7f8 ffc9 	bl	8002bd6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d009      	beq.n	8009c60 <HAL_UART_Init+0x110>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c54:	d004      	beq.n	8009c60 <HAL_UART_Init+0x110>
 8009c56:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8009c5a:	4829      	ldr	r0, [pc, #164]	; (8009d00 <HAL_UART_Init+0x1b0>)
 8009c5c:	f7f8 ffbb 	bl	8002bd6 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d106      	bne.n	8009c7a <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7f9 fb83 	bl	8003380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2224      	movs	r2, #36	; 0x24
 8009c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68da      	ldr	r2, [r3, #12]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fc7e 	bl	800a594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	691a      	ldr	r2, [r3, #16]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ca6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	695a      	ldr	r2, [r3, #20]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009cb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68da      	ldr	r2, [r3, #12]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2220      	movs	r2, #32
 8009cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	40011000 	.word	0x40011000
 8009cec:	40004400 	.word	0x40004400
 8009cf0:	40004800 	.word	0x40004800
 8009cf4:	40004c00 	.word	0x40004c00
 8009cf8:	40005000 	.word	0x40005000
 8009cfc:	40011400 	.word	0x40011400
 8009d00:	08010544 	.word	0x08010544

08009d04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b0ba      	sub	sp, #232	; 0xe8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009d30:	2300      	movs	r3, #0
 8009d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d3a:	f003 030f 	and.w	r3, r3, #15
 8009d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10f      	bne.n	8009d6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d4e:	f003 0320 	and.w	r3, r3, #32
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <HAL_UART_IRQHandler+0x66>
 8009d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d5a:	f003 0320 	and.w	r3, r3, #32
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fb5b 	bl	800a41e <UART_Receive_IT>
      return;
 8009d68:	e256      	b.n	800a218 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 80de 	beq.w	8009f30 <HAL_UART_IRQHandler+0x22c>
 8009d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d78:	f003 0301 	and.w	r3, r3, #1
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d106      	bne.n	8009d8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 80d1 	beq.w	8009f30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00b      	beq.n	8009db2 <HAL_UART_IRQHandler+0xae>
 8009d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d005      	beq.n	8009db2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009daa:	f043 0201 	orr.w	r2, r3, #1
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009db6:	f003 0304 	and.w	r3, r3, #4
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00b      	beq.n	8009dd6 <HAL_UART_IRQHandler+0xd2>
 8009dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d005      	beq.n	8009dd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	f043 0202 	orr.w	r2, r3, #2
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00b      	beq.n	8009dfa <HAL_UART_IRQHandler+0xf6>
 8009de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d005      	beq.n	8009dfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df2:	f043 0204 	orr.w	r2, r3, #4
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dfe:	f003 0308 	and.w	r3, r3, #8
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d011      	beq.n	8009e2a <HAL_UART_IRQHandler+0x126>
 8009e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e0a:	f003 0320 	and.w	r3, r3, #32
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d105      	bne.n	8009e1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d005      	beq.n	8009e2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	f043 0208 	orr.w	r2, r3, #8
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 81ed 	beq.w	800a20e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e38:	f003 0320 	and.w	r3, r3, #32
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d008      	beq.n	8009e52 <HAL_UART_IRQHandler+0x14e>
 8009e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e44:	f003 0320 	and.w	r3, r3, #32
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fae6 	bl	800a41e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e5c:	2b40      	cmp	r3, #64	; 0x40
 8009e5e:	bf0c      	ite	eq
 8009e60:	2301      	moveq	r3, #1
 8009e62:	2300      	movne	r3, #0
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	f003 0308 	and.w	r3, r3, #8
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d103      	bne.n	8009e7e <HAL_UART_IRQHandler+0x17a>
 8009e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d04f      	beq.n	8009f1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f9ee 	bl	800a260 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8e:	2b40      	cmp	r3, #64	; 0x40
 8009e90:	d141      	bne.n	8009f16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3314      	adds	r3, #20
 8009e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
 8009ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3314      	adds	r3, #20
 8009eba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009ebe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009eca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009ece:	e841 2300 	strex	r3, r2, [r1]
 8009ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1d9      	bne.n	8009e92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d013      	beq.n	8009f0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eea:	4a7d      	ldr	r2, [pc, #500]	; (800a0e0 <HAL_UART_IRQHandler+0x3dc>)
 8009eec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fa f824 	bl	8003f40 <HAL_DMA_Abort_IT>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d016      	beq.n	8009f2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f08:	4610      	mov	r0, r2
 8009f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f0c:	e00e      	b.n	8009f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f990 	bl	800a234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f14:	e00a      	b.n	8009f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f98c 	bl	800a234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f1c:	e006      	b.n	8009f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f988 	bl	800a234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009f2a:	e170      	b.n	800a20e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f2c:	bf00      	nop
    return;
 8009f2e:	e16e      	b.n	800a20e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	f040 814a 	bne.w	800a1ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f3e:	f003 0310 	and.w	r3, r3, #16
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f000 8143 	beq.w	800a1ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f4c:	f003 0310 	and.w	r3, r3, #16
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 813c 	beq.w	800a1ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f56:	2300      	movs	r3, #0
 8009f58:	60bb      	str	r3, [r7, #8]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	60bb      	str	r3, [r7, #8]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	60bb      	str	r3, [r7, #8]
 8009f6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f76:	2b40      	cmp	r3, #64	; 0x40
 8009f78:	f040 80b4 	bne.w	800a0e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 8140 	beq.w	800a212 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	f080 8139 	bcs.w	800a212 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fa6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fac:	69db      	ldr	r3, [r3, #28]
 8009fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb2:	f000 8088 	beq.w	800a0c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	330c      	adds	r3, #12
 8009fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fc4:	e853 3f00 	ldrex	r3, [r3]
 8009fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	330c      	adds	r3, #12
 8009fde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009fe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1d9      	bne.n	8009fb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3314      	adds	r3, #20
 800a008:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a014:	f023 0301 	bic.w	r3, r3, #1
 800a018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3314      	adds	r3, #20
 800a022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a026:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a02a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a02e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e1      	bne.n	800a002 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3314      	adds	r3, #20
 800a044:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a04e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3314      	adds	r3, #20
 800a05e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a062:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a064:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a066:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a068:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a06a:	e841 2300 	strex	r3, r2, [r1]
 800a06e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1e3      	bne.n	800a03e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2220      	movs	r2, #32
 800a07a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	330c      	adds	r3, #12
 800a08a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a096:	f023 0310 	bic.w	r3, r3, #16
 800a09a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	330c      	adds	r3, #12
 800a0a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a0a8:	65ba      	str	r2, [r7, #88]	; 0x58
 800a0aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0b0:	e841 2300 	strex	r3, r2, [r1]
 800a0b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a0b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1e3      	bne.n	800a084 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7f9 fecd 	bl	8003e60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f8b6 	bl	800a248 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a0dc:	e099      	b.n	800a212 <HAL_UART_IRQHandler+0x50e>
 800a0de:	bf00      	nop
 800a0e0:	0800a327 	.word	0x0800a327
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 808b 	beq.w	800a216 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a100:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 8086 	beq.w	800a216 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	330c      	adds	r3, #12
 800a110:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a11c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	330c      	adds	r3, #12
 800a12a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a12e:	647a      	str	r2, [r7, #68]	; 0x44
 800a130:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a134:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e3      	bne.n	800a10a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3314      	adds	r3, #20
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	e853 3f00 	ldrex	r3, [r3]
 800a150:	623b      	str	r3, [r7, #32]
   return(result);
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	f023 0301 	bic.w	r3, r3, #1
 800a158:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	3314      	adds	r3, #20
 800a162:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a166:	633a      	str	r2, [r7, #48]	; 0x30
 800a168:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a16c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a16e:	e841 2300 	strex	r3, r2, [r1]
 800a172:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1e3      	bne.n	800a142 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	330c      	adds	r3, #12
 800a18e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	e853 3f00 	ldrex	r3, [r3]
 800a196:	60fb      	str	r3, [r7, #12]
   return(result);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f023 0310 	bic.w	r3, r3, #16
 800a19e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	330c      	adds	r3, #12
 800a1a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a1ac:	61fa      	str	r2, [r7, #28]
 800a1ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	69b9      	ldr	r1, [r7, #24]
 800a1b2:	69fa      	ldr	r2, [r7, #28]
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e3      	bne.n	800a188 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f83e 	bl	800a248 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1cc:	e023      	b.n	800a216 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a1ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d009      	beq.n	800a1ee <HAL_UART_IRQHandler+0x4ea>
 800a1da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f8b1 	bl	800a34e <UART_Transmit_IT>
    return;
 800a1ec:	e014      	b.n	800a218 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a1ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00e      	beq.n	800a218 <HAL_UART_IRQHandler+0x514>
 800a1fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a202:	2b00      	cmp	r3, #0
 800a204:	d008      	beq.n	800a218 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f8f1 	bl	800a3ee <UART_EndTransmit_IT>
    return;
 800a20c:	e004      	b.n	800a218 <HAL_UART_IRQHandler+0x514>
    return;
 800a20e:	bf00      	nop
 800a210:	e002      	b.n	800a218 <HAL_UART_IRQHandler+0x514>
      return;
 800a212:	bf00      	nop
 800a214:	e000      	b.n	800a218 <HAL_UART_IRQHandler+0x514>
      return;
 800a216:	bf00      	nop
  }
}
 800a218:	37e8      	adds	r7, #232	; 0xe8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop

0800a220 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a260:	b480      	push	{r7}
 800a262:	b095      	sub	sp, #84	; 0x54
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	330c      	adds	r3, #12
 800a26e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a272:	e853 3f00 	ldrex	r3, [r3]
 800a276:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a27e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	330c      	adds	r3, #12
 800a286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a288:	643a      	str	r2, [r7, #64]	; 0x40
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a28e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a290:	e841 2300 	strex	r3, r2, [r1]
 800a294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1e5      	bne.n	800a268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3314      	adds	r3, #20
 800a2a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	e853 3f00 	ldrex	r3, [r3]
 800a2aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	f023 0301 	bic.w	r3, r3, #1
 800a2b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	3314      	adds	r3, #20
 800a2ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2c4:	e841 2300 	strex	r3, r2, [r1]
 800a2c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e5      	bne.n	800a29c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d119      	bne.n	800a30c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	330c      	adds	r3, #12
 800a2de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	f023 0310 	bic.w	r3, r3, #16
 800a2ee:	647b      	str	r3, [r7, #68]	; 0x44
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	330c      	adds	r3, #12
 800a2f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2f8:	61ba      	str	r2, [r7, #24]
 800a2fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6979      	ldr	r1, [r7, #20]
 800a2fe:	69ba      	ldr	r2, [r7, #24]
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	613b      	str	r3, [r7, #16]
   return(result);
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e5      	bne.n	800a2d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2220      	movs	r2, #32
 800a310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a31a:	bf00      	nop
 800a31c:	3754      	adds	r7, #84	; 0x54
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b084      	sub	sp, #16
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a332:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7ff ff77 	bl	800a234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a346:	bf00      	nop
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a34e:	b480      	push	{r7}
 800a350:	b085      	sub	sp, #20
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b21      	cmp	r3, #33	; 0x21
 800a360:	d13e      	bne.n	800a3e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a36a:	d114      	bne.n	800a396 <UART_Transmit_IT+0x48>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d110      	bne.n	800a396 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a1b      	ldr	r3, [r3, #32]
 800a378:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	881b      	ldrh	r3, [r3, #0]
 800a37e:	461a      	mov	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a388:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	1c9a      	adds	r2, r3, #2
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	621a      	str	r2, [r3, #32]
 800a394:	e008      	b.n	800a3a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	1c59      	adds	r1, r3, #1
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	6211      	str	r1, [r2, #32]
 800a3a0:	781a      	ldrb	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10f      	bne.n	800a3dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68da      	ldr	r2, [r3, #12]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68da      	ldr	r2, [r3, #12]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	e000      	b.n	800a3e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3e0:	2302      	movs	r3, #2
  }
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68da      	ldr	r2, [r3, #12]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a404:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2220      	movs	r2, #32
 800a40a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff ff06 	bl	800a220 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b08c      	sub	sp, #48	; 0x30
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	2b22      	cmp	r3, #34	; 0x22
 800a430:	f040 80ab 	bne.w	800a58a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a43c:	d117      	bne.n	800a46e <UART_Receive_IT+0x50>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d113      	bne.n	800a46e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a446:	2300      	movs	r3, #0
 800a448:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	b29b      	uxth	r3, r3
 800a458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a460:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a466:	1c9a      	adds	r2, r3, #2
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	629a      	str	r2, [r3, #40]	; 0x28
 800a46c:	e026      	b.n	800a4bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a472:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a474:	2300      	movs	r3, #0
 800a476:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a480:	d007      	beq.n	800a492 <UART_Receive_IT+0x74>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10a      	bne.n	800a4a0 <UART_Receive_IT+0x82>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49c:	701a      	strb	r2, [r3, #0]
 800a49e:	e008      	b.n	800a4b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d15a      	bne.n	800a586 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68da      	ldr	r2, [r3, #12]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f022 0220 	bic.w	r2, r2, #32
 800a4de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	695a      	ldr	r2, [r3, #20]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f022 0201 	bic.w	r2, r2, #1
 800a4fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2220      	movs	r2, #32
 800a504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d135      	bne.n	800a57c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	330c      	adds	r3, #12
 800a51c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	e853 3f00 	ldrex	r3, [r3]
 800a524:	613b      	str	r3, [r7, #16]
   return(result);
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	f023 0310 	bic.w	r3, r3, #16
 800a52c:	627b      	str	r3, [r7, #36]	; 0x24
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	330c      	adds	r3, #12
 800a534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a536:	623a      	str	r2, [r7, #32]
 800a538:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53a:	69f9      	ldr	r1, [r7, #28]
 800a53c:	6a3a      	ldr	r2, [r7, #32]
 800a53e:	e841 2300 	strex	r3, r2, [r1]
 800a542:	61bb      	str	r3, [r7, #24]
   return(result);
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1e5      	bne.n	800a516 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 0310 	and.w	r3, r3, #16
 800a554:	2b10      	cmp	r3, #16
 800a556:	d10a      	bne.n	800a56e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a558:	2300      	movs	r3, #0
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	60fb      	str	r3, [r7, #12]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f7ff fe67 	bl	800a248 <HAL_UARTEx_RxEventCallback>
 800a57a:	e002      	b.n	800a582 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7f6 fe3b 	bl	80011f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	e002      	b.n	800a58c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	e000      	b.n	800a58c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a58a:	2302      	movs	r3, #2
  }
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3730      	adds	r7, #48	; 0x30
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a598:	b09f      	sub	sp, #124	; 0x7c
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a59e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	4b9b      	ldr	r3, [pc, #620]	; (800a810 <UART_SetConfig+0x27c>)
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d904      	bls.n	800a5b2 <UART_SetConfig+0x1e>
 800a5a8:	f640 6156 	movw	r1, #3670	; 0xe56
 800a5ac:	4899      	ldr	r0, [pc, #612]	; (800a814 <UART_SetConfig+0x280>)
 800a5ae:	f7f8 fb12 	bl	8002bd6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a5b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d009      	beq.n	800a5ce <UART_SetConfig+0x3a>
 800a5ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5c2:	d004      	beq.n	800a5ce <UART_SetConfig+0x3a>
 800a5c4:	f640 6157 	movw	r1, #3671	; 0xe57
 800a5c8:	4892      	ldr	r0, [pc, #584]	; (800a814 <UART_SetConfig+0x280>)
 800a5ca:	f7f8 fb04 	bl	8002bd6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a5ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00e      	beq.n	800a5f4 <UART_SetConfig+0x60>
 800a5d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5de:	d009      	beq.n	800a5f4 <UART_SetConfig+0x60>
 800a5e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a5e8:	d004      	beq.n	800a5f4 <UART_SetConfig+0x60>
 800a5ea:	f640 6158 	movw	r1, #3672	; 0xe58
 800a5ee:	4889      	ldr	r0, [pc, #548]	; (800a814 <UART_SetConfig+0x280>)
 800a5f0:	f7f8 faf1 	bl	8002bd6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a5f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5f6:	695a      	ldr	r2, [r3, #20]
 800a5f8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d103      	bne.n	800a60a <UART_SetConfig+0x76>
 800a602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d104      	bne.n	800a614 <UART_SetConfig+0x80>
 800a60a:	f640 6159 	movw	r1, #3673	; 0xe59
 800a60e:	4881      	ldr	r0, [pc, #516]	; (800a814 <UART_SetConfig+0x280>)
 800a610:	f7f8 fae1 	bl	8002bd6 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a61e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a620:	68d9      	ldr	r1, [r3, #12]
 800a622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	ea40 0301 	orr.w	r3, r0, r1
 800a62a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a62c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	431a      	orrs	r2, r3
 800a636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a638:	695b      	ldr	r3, [r3, #20]
 800a63a:	431a      	orrs	r2, r3
 800a63c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a63e:	69db      	ldr	r3, [r3, #28]
 800a640:	4313      	orrs	r3, r2
 800a642:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a64e:	f021 010c 	bic.w	r1, r1, #12
 800a652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a658:	430b      	orrs	r3, r1
 800a65a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a65c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	695b      	ldr	r3, [r3, #20]
 800a662:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a668:	6999      	ldr	r1, [r3, #24]
 800a66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	ea40 0301 	orr.w	r3, r0, r1
 800a672:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	4b67      	ldr	r3, [pc, #412]	; (800a818 <UART_SetConfig+0x284>)
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d004      	beq.n	800a688 <UART_SetConfig+0xf4>
 800a67e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	4b66      	ldr	r3, [pc, #408]	; (800a81c <UART_SetConfig+0x288>)
 800a684:	429a      	cmp	r2, r3
 800a686:	d103      	bne.n	800a690 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a688:	f7fb fc5a 	bl	8005f40 <HAL_RCC_GetPCLK2Freq>
 800a68c:	6778      	str	r0, [r7, #116]	; 0x74
 800a68e:	e002      	b.n	800a696 <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a690:	f7fb fc42 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 800a694:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a69e:	f040 80c1 	bne.w	800a824 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a6a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6a4:	461c      	mov	r4, r3
 800a6a6:	f04f 0500 	mov.w	r5, #0
 800a6aa:	4622      	mov	r2, r4
 800a6ac:	462b      	mov	r3, r5
 800a6ae:	1891      	adds	r1, r2, r2
 800a6b0:	6439      	str	r1, [r7, #64]	; 0x40
 800a6b2:	415b      	adcs	r3, r3
 800a6b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a6b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a6ba:	1912      	adds	r2, r2, r4
 800a6bc:	eb45 0303 	adc.w	r3, r5, r3
 800a6c0:	f04f 0000 	mov.w	r0, #0
 800a6c4:	f04f 0100 	mov.w	r1, #0
 800a6c8:	00d9      	lsls	r1, r3, #3
 800a6ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a6ce:	00d0      	lsls	r0, r2, #3
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	1911      	adds	r1, r2, r4
 800a6d6:	6639      	str	r1, [r7, #96]	; 0x60
 800a6d8:	416b      	adcs	r3, r5
 800a6da:	667b      	str	r3, [r7, #100]	; 0x64
 800a6dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	f04f 0300 	mov.w	r3, #0
 800a6e6:	1891      	adds	r1, r2, r2
 800a6e8:	63b9      	str	r1, [r7, #56]	; 0x38
 800a6ea:	415b      	adcs	r3, r3
 800a6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a6f2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a6f6:	f7f6 fa23 	bl	8000b40 <__aeabi_uldivmod>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	4b48      	ldr	r3, [pc, #288]	; (800a820 <UART_SetConfig+0x28c>)
 800a700:	fba3 2302 	umull	r2, r3, r3, r2
 800a704:	095b      	lsrs	r3, r3, #5
 800a706:	011e      	lsls	r6, r3, #4
 800a708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a70a:	461c      	mov	r4, r3
 800a70c:	f04f 0500 	mov.w	r5, #0
 800a710:	4622      	mov	r2, r4
 800a712:	462b      	mov	r3, r5
 800a714:	1891      	adds	r1, r2, r2
 800a716:	6339      	str	r1, [r7, #48]	; 0x30
 800a718:	415b      	adcs	r3, r3
 800a71a:	637b      	str	r3, [r7, #52]	; 0x34
 800a71c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a720:	1912      	adds	r2, r2, r4
 800a722:	eb45 0303 	adc.w	r3, r5, r3
 800a726:	f04f 0000 	mov.w	r0, #0
 800a72a:	f04f 0100 	mov.w	r1, #0
 800a72e:	00d9      	lsls	r1, r3, #3
 800a730:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a734:	00d0      	lsls	r0, r2, #3
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	1911      	adds	r1, r2, r4
 800a73c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a73e:	416b      	adcs	r3, r5
 800a740:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	461a      	mov	r2, r3
 800a748:	f04f 0300 	mov.w	r3, #0
 800a74c:	1891      	adds	r1, r2, r2
 800a74e:	62b9      	str	r1, [r7, #40]	; 0x28
 800a750:	415b      	adcs	r3, r3
 800a752:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a754:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a758:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a75c:	f7f6 f9f0 	bl	8000b40 <__aeabi_uldivmod>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	4b2e      	ldr	r3, [pc, #184]	; (800a820 <UART_SetConfig+0x28c>)
 800a766:	fba3 1302 	umull	r1, r3, r3, r2
 800a76a:	095b      	lsrs	r3, r3, #5
 800a76c:	2164      	movs	r1, #100	; 0x64
 800a76e:	fb01 f303 	mul.w	r3, r1, r3
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	00db      	lsls	r3, r3, #3
 800a776:	3332      	adds	r3, #50	; 0x32
 800a778:	4a29      	ldr	r2, [pc, #164]	; (800a820 <UART_SetConfig+0x28c>)
 800a77a:	fba2 2303 	umull	r2, r3, r2, r3
 800a77e:	095b      	lsrs	r3, r3, #5
 800a780:	005b      	lsls	r3, r3, #1
 800a782:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a786:	441e      	add	r6, r3
 800a788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a78a:	4618      	mov	r0, r3
 800a78c:	f04f 0100 	mov.w	r1, #0
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	1894      	adds	r4, r2, r2
 800a796:	623c      	str	r4, [r7, #32]
 800a798:	415b      	adcs	r3, r3
 800a79a:	627b      	str	r3, [r7, #36]	; 0x24
 800a79c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7a0:	1812      	adds	r2, r2, r0
 800a7a2:	eb41 0303 	adc.w	r3, r1, r3
 800a7a6:	f04f 0400 	mov.w	r4, #0
 800a7aa:	f04f 0500 	mov.w	r5, #0
 800a7ae:	00dd      	lsls	r5, r3, #3
 800a7b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a7b4:	00d4      	lsls	r4, r2, #3
 800a7b6:	4622      	mov	r2, r4
 800a7b8:	462b      	mov	r3, r5
 800a7ba:	1814      	adds	r4, r2, r0
 800a7bc:	653c      	str	r4, [r7, #80]	; 0x50
 800a7be:	414b      	adcs	r3, r1
 800a7c0:	657b      	str	r3, [r7, #84]	; 0x54
 800a7c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f04f 0300 	mov.w	r3, #0
 800a7cc:	1891      	adds	r1, r2, r2
 800a7ce:	61b9      	str	r1, [r7, #24]
 800a7d0:	415b      	adcs	r3, r3
 800a7d2:	61fb      	str	r3, [r7, #28]
 800a7d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7d8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a7dc:	f7f6 f9b0 	bl	8000b40 <__aeabi_uldivmod>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4b0e      	ldr	r3, [pc, #56]	; (800a820 <UART_SetConfig+0x28c>)
 800a7e6:	fba3 1302 	umull	r1, r3, r3, r2
 800a7ea:	095b      	lsrs	r3, r3, #5
 800a7ec:	2164      	movs	r1, #100	; 0x64
 800a7ee:	fb01 f303 	mul.w	r3, r1, r3
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	00db      	lsls	r3, r3, #3
 800a7f6:	3332      	adds	r3, #50	; 0x32
 800a7f8:	4a09      	ldr	r2, [pc, #36]	; (800a820 <UART_SetConfig+0x28c>)
 800a7fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a7fe:	095b      	lsrs	r3, r3, #5
 800a800:	f003 0207 	and.w	r2, r3, #7
 800a804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4432      	add	r2, r6
 800a80a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a80c:	e0c4      	b.n	800a998 <UART_SetConfig+0x404>
 800a80e:	bf00      	nop
 800a810:	00a037a0 	.word	0x00a037a0
 800a814:	08010544 	.word	0x08010544
 800a818:	40011000 	.word	0x40011000
 800a81c:	40011400 	.word	0x40011400
 800a820:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a826:	461c      	mov	r4, r3
 800a828:	f04f 0500 	mov.w	r5, #0
 800a82c:	4622      	mov	r2, r4
 800a82e:	462b      	mov	r3, r5
 800a830:	1891      	adds	r1, r2, r2
 800a832:	6139      	str	r1, [r7, #16]
 800a834:	415b      	adcs	r3, r3
 800a836:	617b      	str	r3, [r7, #20]
 800a838:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a83c:	1912      	adds	r2, r2, r4
 800a83e:	eb45 0303 	adc.w	r3, r5, r3
 800a842:	f04f 0000 	mov.w	r0, #0
 800a846:	f04f 0100 	mov.w	r1, #0
 800a84a:	00d9      	lsls	r1, r3, #3
 800a84c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a850:	00d0      	lsls	r0, r2, #3
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	eb12 0804 	adds.w	r8, r2, r4
 800a85a:	eb43 0905 	adc.w	r9, r3, r5
 800a85e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	4618      	mov	r0, r3
 800a864:	f04f 0100 	mov.w	r1, #0
 800a868:	f04f 0200 	mov.w	r2, #0
 800a86c:	f04f 0300 	mov.w	r3, #0
 800a870:	008b      	lsls	r3, r1, #2
 800a872:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a876:	0082      	lsls	r2, r0, #2
 800a878:	4640      	mov	r0, r8
 800a87a:	4649      	mov	r1, r9
 800a87c:	f7f6 f960 	bl	8000b40 <__aeabi_uldivmod>
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	4b47      	ldr	r3, [pc, #284]	; (800a9a4 <UART_SetConfig+0x410>)
 800a886:	fba3 2302 	umull	r2, r3, r3, r2
 800a88a:	095b      	lsrs	r3, r3, #5
 800a88c:	011e      	lsls	r6, r3, #4
 800a88e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a890:	4618      	mov	r0, r3
 800a892:	f04f 0100 	mov.w	r1, #0
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	1894      	adds	r4, r2, r2
 800a89c:	60bc      	str	r4, [r7, #8]
 800a89e:	415b      	adcs	r3, r3
 800a8a0:	60fb      	str	r3, [r7, #12]
 800a8a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a8a6:	1812      	adds	r2, r2, r0
 800a8a8:	eb41 0303 	adc.w	r3, r1, r3
 800a8ac:	f04f 0400 	mov.w	r4, #0
 800a8b0:	f04f 0500 	mov.w	r5, #0
 800a8b4:	00dd      	lsls	r5, r3, #3
 800a8b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a8ba:	00d4      	lsls	r4, r2, #3
 800a8bc:	4622      	mov	r2, r4
 800a8be:	462b      	mov	r3, r5
 800a8c0:	1814      	adds	r4, r2, r0
 800a8c2:	64bc      	str	r4, [r7, #72]	; 0x48
 800a8c4:	414b      	adcs	r3, r1
 800a8c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f04f 0100 	mov.w	r1, #0
 800a8d2:	f04f 0200 	mov.w	r2, #0
 800a8d6:	f04f 0300 	mov.w	r3, #0
 800a8da:	008b      	lsls	r3, r1, #2
 800a8dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a8e0:	0082      	lsls	r2, r0, #2
 800a8e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a8e6:	f7f6 f92b 	bl	8000b40 <__aeabi_uldivmod>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4b2d      	ldr	r3, [pc, #180]	; (800a9a4 <UART_SetConfig+0x410>)
 800a8f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a8f4:	095b      	lsrs	r3, r3, #5
 800a8f6:	2164      	movs	r1, #100	; 0x64
 800a8f8:	fb01 f303 	mul.w	r3, r1, r3
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	011b      	lsls	r3, r3, #4
 800a900:	3332      	adds	r3, #50	; 0x32
 800a902:	4a28      	ldr	r2, [pc, #160]	; (800a9a4 <UART_SetConfig+0x410>)
 800a904:	fba2 2303 	umull	r2, r3, r2, r3
 800a908:	095b      	lsrs	r3, r3, #5
 800a90a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a90e:	441e      	add	r6, r3
 800a910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a912:	4618      	mov	r0, r3
 800a914:	f04f 0100 	mov.w	r1, #0
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	1894      	adds	r4, r2, r2
 800a91e:	603c      	str	r4, [r7, #0]
 800a920:	415b      	adcs	r3, r3
 800a922:	607b      	str	r3, [r7, #4]
 800a924:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a928:	1812      	adds	r2, r2, r0
 800a92a:	eb41 0303 	adc.w	r3, r1, r3
 800a92e:	f04f 0400 	mov.w	r4, #0
 800a932:	f04f 0500 	mov.w	r5, #0
 800a936:	00dd      	lsls	r5, r3, #3
 800a938:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a93c:	00d4      	lsls	r4, r2, #3
 800a93e:	4622      	mov	r2, r4
 800a940:	462b      	mov	r3, r5
 800a942:	eb12 0a00 	adds.w	sl, r2, r0
 800a946:	eb43 0b01 	adc.w	fp, r3, r1
 800a94a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	4618      	mov	r0, r3
 800a950:	f04f 0100 	mov.w	r1, #0
 800a954:	f04f 0200 	mov.w	r2, #0
 800a958:	f04f 0300 	mov.w	r3, #0
 800a95c:	008b      	lsls	r3, r1, #2
 800a95e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a962:	0082      	lsls	r2, r0, #2
 800a964:	4650      	mov	r0, sl
 800a966:	4659      	mov	r1, fp
 800a968:	f7f6 f8ea 	bl	8000b40 <__aeabi_uldivmod>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4b0c      	ldr	r3, [pc, #48]	; (800a9a4 <UART_SetConfig+0x410>)
 800a972:	fba3 1302 	umull	r1, r3, r3, r2
 800a976:	095b      	lsrs	r3, r3, #5
 800a978:	2164      	movs	r1, #100	; 0x64
 800a97a:	fb01 f303 	mul.w	r3, r1, r3
 800a97e:	1ad3      	subs	r3, r2, r3
 800a980:	011b      	lsls	r3, r3, #4
 800a982:	3332      	adds	r3, #50	; 0x32
 800a984:	4a07      	ldr	r2, [pc, #28]	; (800a9a4 <UART_SetConfig+0x410>)
 800a986:	fba2 2303 	umull	r2, r3, r2, r3
 800a98a:	095b      	lsrs	r3, r3, #5
 800a98c:	f003 020f 	and.w	r2, r3, #15
 800a990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4432      	add	r2, r6
 800a996:	609a      	str	r2, [r3, #8]
}
 800a998:	bf00      	nop
 800a99a:	377c      	adds	r7, #124	; 0x7c
 800a99c:	46bd      	mov	sp, r7
 800a99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a2:	bf00      	nop
 800a9a4:	51eb851f 	.word	0x51eb851f

0800a9a8 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800a9b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d105      	bne.n	800a9c8 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800a9bc:	2101      	movs	r1, #1
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f001 f824 	bl	800ba0c <VL53L1_data_init>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 800a9c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d103      	bne.n	800a9d8 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73bb      	strb	r3, [r7, #14]
 800a9dc:	e012      	b.n	800aa04 <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 800a9de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d112      	bne.n	800aa0c <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fbd3 	bl	800b19a <VL53L1_SetLimitCheckEnable>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	3301      	adds	r3, #1
 800aa02:	73bb      	strb	r3, [r7, #14]
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d9e9      	bls.n	800a9de <VL53L1_DataInit+0x36>
 800aa0a:	e000      	b.n	800aa0e <VL53L1_DataInit+0x66>
		else
			break;
 800aa0c:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 800aa0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2203      	movs	r2, #3
 800aa2a:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800aa2e:	2320      	movs	r3, #32
 800aa30:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	7bba      	ldrb	r2, [r7, #14]
 800aa36:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800aa38:	2108      	movs	r1, #8
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f8f9 	bl	800ac32 <VL53L1_SetPresetMode>
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2208      	movs	r2, #8
 800aa48:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800aa4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aa60:	2300      	movs	r3, #0
 800aa62:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800aa64:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f004 ffe0 	bl	800fa2e <VL53L1_poll_for_boot_completion>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800aa72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	603a      	str	r2, [r7, #0]
 800aa8a:	71fb      	strb	r3, [r7, #7]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aa90:	2300      	movs	r3, #0
 800aa92:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800aa94:	4a2c      	ldr	r2, [pc, #176]	; (800ab48 <ComputeDevicePresetMode+0xc8>)
 800aa96:	f107 0310 	add.w	r3, r7, #16
 800aa9a:	6812      	ldr	r2, [r2, #0]
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	8019      	strh	r1, [r3, #0]
 800aaa0:	3302      	adds	r3, #2
 800aaa2:	0c12      	lsrs	r2, r2, #16
 800aaa4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800aaa6:	4a29      	ldr	r2, [pc, #164]	; (800ab4c <ComputeDevicePresetMode+0xcc>)
 800aaa8:	f107 030c 	add.w	r3, r7, #12
 800aaac:	6812      	ldr	r2, [r2, #0]
 800aaae:	4611      	mov	r1, r2
 800aab0:	8019      	strh	r1, [r3, #0]
 800aab2:	3302      	adds	r3, #2
 800aab4:	0c12      	lsrs	r2, r2, #16
 800aab6:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800aab8:	4a25      	ldr	r2, [pc, #148]	; (800ab50 <ComputeDevicePresetMode+0xd0>)
 800aaba:	f107 0308 	add.w	r3, r7, #8
 800aabe:	6812      	ldr	r2, [r2, #0]
 800aac0:	4611      	mov	r1, r2
 800aac2:	8019      	strh	r1, [r3, #0]
 800aac4:	3302      	adds	r3, #2
 800aac6:	0c12      	lsrs	r2, r2, #16
 800aac8:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2201      	movs	r2, #1
 800aace:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800aad0:	79bb      	ldrb	r3, [r7, #6]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d002      	beq.n	800aadc <ComputeDevicePresetMode+0x5c>
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d003      	beq.n	800aae2 <ComputeDevicePresetMode+0x62>
 800aada:	e005      	b.n	800aae8 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800aadc:	2300      	movs	r3, #0
 800aade:	75bb      	strb	r3, [r7, #22]
		break;
 800aae0:	e004      	b.n	800aaec <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800aae2:	2301      	movs	r3, #1
 800aae4:	75bb      	strb	r3, [r7, #22]
		break;
 800aae6:	e001      	b.n	800aaec <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 800aae8:	2302      	movs	r3, #2
 800aaea:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	2b08      	cmp	r3, #8
 800aaf0:	d017      	beq.n	800ab22 <ComputeDevicePresetMode+0xa2>
 800aaf2:	2b08      	cmp	r3, #8
 800aaf4:	dc1e      	bgt.n	800ab34 <ComputeDevicePresetMode+0xb4>
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d00a      	beq.n	800ab10 <ComputeDevicePresetMode+0x90>
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d11a      	bne.n	800ab34 <ComputeDevicePresetMode+0xb4>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800aafe:	7dbb      	ldrb	r3, [r7, #22]
 800ab00:	f107 0218 	add.w	r2, r7, #24
 800ab04:	4413      	add	r3, r2
 800ab06:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	701a      	strb	r2, [r3, #0]
		break;
 800ab0e:	e013      	b.n	800ab38 <ComputeDevicePresetMode+0xb8>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800ab10:	7dbb      	ldrb	r3, [r7, #22]
 800ab12:	f107 0218 	add.w	r2, r7, #24
 800ab16:	4413      	add	r3, r2
 800ab18:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	701a      	strb	r2, [r3, #0]
		break;
 800ab20:	e00a      	b.n	800ab38 <ComputeDevicePresetMode+0xb8>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800ab22:	7dbb      	ldrb	r3, [r7, #22]
 800ab24:	f107 0218 	add.w	r2, r7, #24
 800ab28:	4413      	add	r3, r2
 800ab2a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	701a      	strb	r2, [r3, #0]
		break;
 800ab32:	e001      	b.n	800ab38 <ComputeDevicePresetMode+0xb8>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800ab34:	23f8      	movs	r3, #248	; 0xf8
 800ab36:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800ab38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	371c      	adds	r7, #28
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	080105ac 	.word	0x080105ac
 800ab4c:	080105b0 	.word	0x080105b0
 800ab50:	080105b4 	.word	0x080105b4

0800ab54 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800ab54:	b5b0      	push	{r4, r5, r7, lr}
 800ab56:	b08e      	sub	sp, #56	; 0x38
 800ab58:	af04      	add	r7, sp, #16
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	607b      	str	r3, [r7, #4]
 800ab5e:	460b      	mov	r3, r1
 800ab60:	72fb      	strb	r3, [r7, #11]
 800ab62:	4613      	mov	r3, r2
 800ab64:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ab66:	2300      	movs	r3, #0
 800ab68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800ab74:	2300      	movs	r3, #0
 800ab76:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800ab7c:	7afb      	ldrb	r3, [r7, #11]
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d002      	beq.n	800ab88 <SetPresetMode+0x34>
 800ab82:	7afb      	ldrb	r3, [r7, #11]
 800ab84:	2b08      	cmp	r3, #8
 800ab86:	d103      	bne.n	800ab90 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800ab88:	2340      	movs	r3, #64	; 0x40
 800ab8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab8e:	e002      	b.n	800ab96 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800ab90:	2320      	movs	r3, #32
 800ab92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800ab96:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800ab9a:	7ab9      	ldrb	r1, [r7, #10]
 800ab9c:	7afb      	ldrb	r3, [r7, #11]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff ff6e 	bl	800aa80 <ComputeDevicePresetMode>
 800aba4:	4603      	mov	r3, r0
 800aba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800abaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d112      	bne.n	800abd8 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800abb2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800abb6:	f107 001c 	add.w	r0, r7, #28
 800abba:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800abbe:	f107 0314 	add.w	r3, r7, #20
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	f107 0318 	add.w	r3, r7, #24
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	4603      	mov	r3, r0
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f001 f9dd 	bl	800bf8c <VL53L1_get_preset_mode_timing_cfg>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800abd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d112      	bne.n	800ac06 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 800abe0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800abe4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800abe6:	69fd      	ldr	r5, [r7, #28]
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	697a      	ldr	r2, [r7, #20]
 800abec:	6879      	ldr	r1, [r7, #4]
 800abee:	9102      	str	r1, [sp, #8]
 800abf0:	9201      	str	r2, [sp, #4]
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	462b      	mov	r3, r5
 800abf6:	4622      	mov	r2, r4
 800abf8:	4601      	mov	r1, r0
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f001 fa70 	bl	800c0e0 <VL53L1_set_preset_mode>
 800ac00:	4603      	mov	r3, r0
 800ac02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800ac06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d103      	bne.n	800ac16 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ac14:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800ac16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d103      	bne.n	800ac26 <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	7afa      	ldrb	r2, [r7, #11]
 800ac22:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800ac26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3728      	adds	r7, #40	; 0x28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bdb0      	pop	{r4, r5, r7, pc}

0800ac32 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b084      	sub	sp, #16
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800ac42:	2303      	movs	r3, #3
 800ac44:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f003 fd2c 	bl	800e6a4 <VL53L1_low_power_auto_data_init>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 800ac50:	7bba      	ldrb	r2, [r7, #14]
 800ac52:	78f9      	ldrb	r1, [r7, #3]
 800ac54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7ff ff7b 	bl	800ab54 <SetPresetMode>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800ac62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d117      	bne.n	800ac9a <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800ac6a:	78fb      	ldrb	r3, [r7, #3]
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	d005      	beq.n	800ac7c <VL53L1_SetPresetMode+0x4a>
 800ac70:	78fb      	ldrb	r3, [r7, #3]
 800ac72:	2b03      	cmp	r3, #3
 800ac74:	d002      	beq.n	800ac7c <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800ac76:	78fb      	ldrb	r3, [r7, #3]
 800ac78:	2b08      	cmp	r3, #8
 800ac7a:	d107      	bne.n	800ac8c <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800ac7c:	f24a 0128 	movw	r1, #41000	; 0xa028
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f891 	bl	800ada8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800ac86:	4603      	mov	r3, r0
 800ac88:	73fb      	strb	r3, [r7, #15]
 800ac8a:	e006      	b.n	800ac9a <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800ac8c:	f248 2135 	movw	r1, #33333	; 0x8235
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f889 	bl	800ada8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800ac96:	4603      	mov	r3, r0
 800ac98:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ac9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d106      	bne.n	800acb0 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800aca2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fa0a 	bl	800b0c0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800acac:	4603      	mov	r3, r0
 800acae:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800acb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b088      	sub	sp, #32
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	460b      	mov	r3, r1
 800acc6:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800acc8:	2300      	movs	r3, #0
 800acca:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800accc:	2300      	movs	r3, #0
 800acce:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800acde:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d008      	beq.n	800acf8 <VL53L1_SetDistanceMode+0x3c>
 800ace6:	78fb      	ldrb	r3, [r7, #3]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d005      	beq.n	800acf8 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800acec:	78fb      	ldrb	r3, [r7, #3]
 800acee:	2b03      	cmp	r3, #3
 800acf0:	d002      	beq.n	800acf8 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800acf2:	f06f 0303 	mvn.w	r3, #3
 800acf6:	e052      	b.n	800ad9e <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 800acf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d107      	bne.n	800ad10 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800ad00:	f107 0308 	add.w	r3, r7, #8
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f001 f8e9 	bl	800bede <VL53L1_get_user_zone>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	695b      	ldr	r3, [r3, #20]
 800ad14:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800ad16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d10a      	bne.n	800ad34 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800ad1e:	f107 0314 	add.w	r3, r7, #20
 800ad22:	f107 0210 	add.w	r2, r7, #16
 800ad26:	f107 010c 	add.w	r1, r7, #12
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 f812 	bl	800bd54 <VL53L1_get_timeouts_us>
 800ad30:	4603      	mov	r3, r0
 800ad32:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800ad34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d107      	bne.n	800ad4c <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 800ad3c:	78fa      	ldrb	r2, [r7, #3]
 800ad3e:	7fb9      	ldrb	r1, [r7, #30]
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff ff06 	bl	800ab54 <SetPresetMode>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800ad4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d103      	bne.n	800ad5c <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	78fa      	ldrb	r2, [r7, #3]
 800ad58:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ad5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10e      	bne.n	800ad82 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800ad64:	68f9      	ldr	r1, [r7, #12]
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 ffba 	bl	800bce4 <VL53L1_set_timeouts_us>
 800ad70:	4603      	mov	r3, r0
 800ad72:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800ad74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d102      	bne.n	800ad82 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800ad82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d107      	bne.n	800ad9a <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800ad8a:	f107 0308 	add.w	r3, r7, #8
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f001 f881 	bl	800be98 <VL53L1_set_user_zone>
 800ad96:	4603      	mov	r3, r0
 800ad98:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800ad9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3720      	adds	r7, #32
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
	...

0800ada8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b08c      	sub	sp, #48	; 0x30
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800adb2:	2300      	movs	r3, #0
 800adb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800adbc:	2300      	movs	r3, #0
 800adbe:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800adcc:	4b64      	ldr	r3, [pc, #400]	; (800af60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 800adce:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	4a64      	ldr	r2, [pc, #400]	; (800af64 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d902      	bls.n	800adde <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800add8:	23fc      	movs	r3, #252	; 0xfc
 800adda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800adde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d109      	bne.n	800adfa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800ade6:	f107 031a 	add.w	r3, r7, #26
 800adea:	461a      	mov	r2, r3
 800adec:	2105      	movs	r1, #5
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fa8d 	bl	800b30e <VL53L1_GetSequenceStepEnable>
 800adf4:	4603      	mov	r3, r0
 800adf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800adfa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d109      	bne.n	800ae16 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800ae02:	f107 0319 	add.w	r3, r7, #25
 800ae06:	461a      	mov	r2, r3
 800ae08:	2106      	movs	r1, #6
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fa7f 	bl	800b30e <VL53L1_GetSequenceStepEnable>
 800ae10:	4603      	mov	r3, r0
 800ae12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800ae16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10b      	bne.n	800ae36 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800ae1e:	f107 0314 	add.w	r3, r7, #20
 800ae22:	f107 0210 	add.w	r2, r7, #16
 800ae26:	f107 010c 	add.w	r1, r7, #12
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 ff92 	bl	800bd54 <VL53L1_get_timeouts_us>
 800ae30:	4603      	mov	r3, r0
 800ae32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800ae36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f040 8081 	bne.w	800af42 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800ae46:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800ae50:	7efb      	ldrb	r3, [r7, #27]
 800ae52:	2b08      	cmp	r3, #8
 800ae54:	d026      	beq.n	800aea4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800ae56:	2b08      	cmp	r3, #8
 800ae58:	dc43      	bgt.n	800aee2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	d00f      	beq.n	800ae7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	d13f      	bne.n	800aee2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800ae62:	7ebb      	ldrb	r3, [r7, #26]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d002      	beq.n	800ae6e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800ae68:	7e7b      	ldrb	r3, [r7, #25]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d103      	bne.n	800ae76 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 800ae6e:	f241 3388 	movw	r3, #5000	; 0x1388
 800ae72:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800ae74:	e038      	b.n	800aee8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800ae76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae7a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800ae7c:	e034      	b.n	800aee8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	005b      	lsls	r3, r3, #1
 800ae82:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800ae84:	7ebb      	ldrb	r3, [r7, #26]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d002      	beq.n	800ae90 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800ae8a:	7e7b      	ldrb	r3, [r7, #25]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d103      	bne.n	800ae98 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 800ae90:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800ae94:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae96:	e002      	b.n	800ae9e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800ae98:	f245 4360 	movw	r3, #21600	; 0x5460
 800ae9c:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800ae9e:	2302      	movs	r3, #2
 800aea0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800aea2:	e021      	b.n	800aee8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800aeaa:	23f5      	movs	r3, #245	; 0xf5
 800aeac:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800aeae:	f107 0308 	add.w	r3, r7, #8
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f248 0136 	movw	r1, #32822	; 0x8036
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f001 ff75 	bl	800cda8 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	dd07      	ble.n	800aed4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	22f5      	movs	r2, #245	; 0xf5
 800aec8:	fb02 f303 	mul.w	r3, r2, r3
 800aecc:	461a      	mov	r2, r3
 800aece:	6a3b      	ldr	r3, [r7, #32]
 800aed0:	4413      	add	r3, r2
 800aed2:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800aeda:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800aedc:	2302      	movs	r3, #2
 800aede:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800aee0:	e002      	b.n	800aee8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800aee2:	23f8      	movs	r3, #248	; 0xf8
 800aee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d803      	bhi.n	800aef8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800aef0:	23fc      	movs	r3, #252	; 0xfc
 800aef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aef6:	e003      	b.n	800af00 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800aefe:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800af00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af04:	2b00      	cmp	r3, #0
 800af06:	d11c      	bne.n	800af42 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	69fa      	ldr	r2, [r7, #28]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d203      	bcs.n	800af18 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800af10:	23fc      	movs	r3, #252	; 0xfc
 800af12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800af16:	e00d      	b.n	800af34 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af20:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800af22:	68f9      	ldr	r1, [r7, #12]
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fedb 	bl	800bce4 <VL53L1_set_timeouts_us>
 800af2e:	4603      	mov	r3, r0
 800af30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800af34:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d102      	bne.n	800af42 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 800af3c:	697a      	ldr	r2, [r7, #20]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800af42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af46:	2b00      	cmp	r3, #0
 800af48:	d103      	bne.n	800af52 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800af56:	4618      	mov	r0, r3
 800af58:	3730      	adds	r7, #48	; 0x30
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	00086470 	.word	0x00086470
 800af64:	00989680 	.word	0x00989680

0800af68 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08c      	sub	sp, #48	; 0x30
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800af72:	2300      	movs	r3, #0
 800af74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800af96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d109      	bne.n	800afb2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800af9e:	f107 031b 	add.w	r3, r7, #27
 800afa2:	461a      	mov	r2, r3
 800afa4:	2105      	movs	r1, #5
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f9b1 	bl	800b30e <VL53L1_GetSequenceStepEnable>
 800afac:	4603      	mov	r3, r0
 800afae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800afb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d109      	bne.n	800afce <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800afba:	f107 031a 	add.w	r3, r7, #26
 800afbe:	461a      	mov	r2, r3
 800afc0:	2106      	movs	r1, #6
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f9a3 	bl	800b30e <VL53L1_GetSequenceStepEnable>
 800afc8:	4603      	mov	r3, r0
 800afca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800afce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10b      	bne.n	800afee <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800afd6:	f107 0310 	add.w	r3, r7, #16
 800afda:	f107 0214 	add.w	r2, r7, #20
 800afde:	f107 010c 	add.w	r1, r7, #12
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 feb6 	bl	800bd54 <VL53L1_get_timeouts_us>
 800afe8:	4603      	mov	r3, r0
 800afea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800afee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d156      	bne.n	800b0a4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800affc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 800b000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b004:	2b08      	cmp	r3, #8
 800b006:	d02a      	beq.n	800b05e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 800b008:	2b08      	cmp	r3, #8
 800b00a:	dc47      	bgt.n	800b09c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	d012      	beq.n	800b036 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 800b010:	2b04      	cmp	r3, #4
 800b012:	d143      	bne.n	800b09c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800b014:	7efb      	ldrb	r3, [r7, #27]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d002      	beq.n	800b020 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800b01a:	7ebb      	ldrb	r3, [r7, #26]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d105      	bne.n	800b02c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b026:	3308      	adds	r3, #8
 800b028:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800b02a:	e03c      	b.n	800b0a6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b032:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b034:	e037      	b.n	800b0a6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800b036:	7efb      	ldrb	r3, [r7, #27]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d002      	beq.n	800b042 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 800b03c:	7ebb      	ldrb	r3, [r7, #26]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d106      	bne.n	800b050 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800b048:	3334      	adds	r3, #52	; 0x34
 800b04a:	005b      	lsls	r3, r3, #1
 800b04c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800b04e:	e02a      	b.n	800b0a6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800b056:	3330      	adds	r3, #48	; 0x30
 800b058:	005b      	lsls	r3, r3, #1
 800b05a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b05c:	e023      	b.n	800b0a6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800b05e:	23f5      	movs	r3, #245	; 0xf5
 800b060:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800b062:	f107 0308 	add.w	r3, r7, #8
 800b066:	461a      	mov	r2, r3
 800b068:	f248 0136 	movw	r1, #32822	; 0x8036
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 fe9b 	bl	800cda8 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2b00      	cmp	r3, #0
 800b076:	dd07      	ble.n	800b088 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	22f5      	movs	r2, #245	; 0xf5
 800b07c:	fb02 f303 	mul.w	r3, r2, r3
 800b080:	461a      	mov	r2, r3
 800b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b084:	4413      	add	r3, r2
 800b086:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800b08e:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	005b      	lsls	r3, r3, #1
 800b094:	69fa      	ldr	r2, [r7, #28]
 800b096:	4413      	add	r3, r2
 800b098:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b09a:	e004      	b.n	800b0a6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800b09c:	23f8      	movs	r3, #248	; 0xf8
 800b09e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b0a2:	e000      	b.n	800b0a6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 800b0a4:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800b0a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d102      	bne.n	800b0b4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0b2:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b0b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3730      	adds	r7, #48	; 0x30
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	019b      	lsls	r3, r3, #6
 800b0d6:	4a09      	ldr	r2, [pc, #36]	; (800b0fc <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800b0d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b0dc:	099b      	lsrs	r3, r3, #6
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800b0e4:	68b9      	ldr	r1, [r7, #8]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fdad 	bl	800bc46 <VL53L1_set_inter_measurement_period_ms>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800b0f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	10624dd3 	.word	0x10624dd3

0800b100 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b10a:	2300      	movs	r3, #0
 800b10c:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800b10e:	f107 0308 	add.w	r3, r7, #8
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fdbf 	bl	800bc98 <VL53L1_get_inter_measurement_period_ms>
 800b11a:	4603      	mov	r3, r0
 800b11c:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	019b      	lsls	r3, r3, #6
 800b124:	4907      	ldr	r1, [pc, #28]	; (800b144 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800b126:	fba1 1303 	umull	r1, r3, r1, r3
 800b12a:	099b      	lsrs	r3, r3, #6
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800b136:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	10624dd3 	.word	0x10624dd3

0800b148 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	460b      	mov	r3, r1
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b156:	2300      	movs	r3, #0
 800b158:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b15a:	897b      	ldrh	r3, [r7, #10]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <SetLimitValue+0x1e>
 800b160:	2b01      	cmp	r3, #1
 800b162:	d009      	beq.n	800b178 <SetLimitValue+0x30>
 800b164:	e011      	b.n	800b18a <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	0b9b      	lsrs	r3, r3, #14
 800b16a:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800b16c:	8abb      	ldrh	r3, [r7, #20]
 800b16e:	4619      	mov	r1, r3
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f001 f941 	bl	800c3f8 <VL53L1_set_lite_sigma_threshold>
		break;
 800b176:	e00a      	b.n	800b18e <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	0a5b      	lsrs	r3, r3, #9
 800b17c:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800b17e:	8abb      	ldrh	r3, [r7, #20]
 800b180:	4619      	mov	r1, r3
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f001 f964 	bl	800c450 <VL53L1_set_lite_min_count_rate>
		break;
 800b188:	e001      	b.n	800b18e <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b18a:	23fc      	movs	r3, #252	; 0xfc
 800b18c:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b18e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3718      	adds	r7, #24
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	807b      	strh	r3, [r7, #2]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b1b2:	887b      	ldrh	r3, [r7, #2]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d902      	bls.n	800b1be <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b1b8:	23fc      	movs	r3, #252	; 0xfc
 800b1ba:	73fb      	strb	r3, [r7, #15]
 800b1bc:	e014      	b.n	800b1e8 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800b1be:	787b      	ldrb	r3, [r7, #1]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d102      	bne.n	800b1ca <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	60bb      	str	r3, [r7, #8]
 800b1c8:	e006      	b.n	800b1d8 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b1ca:	887b      	ldrh	r3, [r7, #2]
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	33e0      	adds	r3, #224	; 0xe0
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800b1d8:	887b      	ldrh	r3, [r7, #2]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	4619      	mov	r1, r3
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7ff ffb2 	bl	800b148 <SetLimitValue>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800b1e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10c      	bne.n	800b20a <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b1f0:	787b      	ldrb	r3, [r7, #1]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	bf14      	ite	ne
 800b1f6:	2301      	movne	r3, #1
 800b1f8:	2300      	moveq	r3, #0
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	887b      	ldrh	r3, [r7, #2]
 800b1fe:	4611      	mov	r1, r2
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	4413      	add	r3, r2
 800b204:	460a      	mov	r2, r1
 800b206:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800b20a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800b216:	b480      	push	{r7}
 800b218:	b087      	sub	sp, #28
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	460b      	mov	r3, r1
 800b220:	607a      	str	r2, [r7, #4]
 800b222:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b224:	2300      	movs	r3, #0
 800b226:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b228:	897b      	ldrh	r3, [r7, #10]
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d905      	bls.n	800b23a <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b22e:	23fc      	movs	r3, #252	; 0xfc
 800b230:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	701a      	strb	r2, [r3, #0]
 800b238:	e008      	b.n	800b24c <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b23a:	897b      	ldrh	r3, [r7, #10]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4413      	add	r3, r2
 800b240:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800b244:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	7dba      	ldrb	r2, [r7, #22]
 800b24a:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b24c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b250:	4618      	mov	r0, r3
 800b252:	371c      	adds	r7, #28
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	460b      	mov	r3, r1
 800b266:	607a      	str	r2, [r7, #4]
 800b268:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b26a:	2300      	movs	r3, #0
 800b26c:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b272:	897b      	ldrh	r3, [r7, #10]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <VL53L1_GetLimitCheckValue+0x22>
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d00c      	beq.n	800b296 <VL53L1_GetLimitCheckValue+0x3a>
 800b27c:	e017      	b.n	800b2ae <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800b27e:	f107 0314 	add.w	r3, r7, #20
 800b282:	4619      	mov	r1, r3
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f001 f8a1 	bl	800c3cc <VL53L1_get_lite_sigma_threshold>
 800b28a:	4603      	mov	r3, r0
 800b28c:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800b28e:	8abb      	ldrh	r3, [r7, #20]
 800b290:	039b      	lsls	r3, r3, #14
 800b292:	61bb      	str	r3, [r7, #24]
		break;
 800b294:	e00d      	b.n	800b2b2 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800b296:	f107 0316 	add.w	r3, r7, #22
 800b29a:	4619      	mov	r1, r3
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f001 f8c1 	bl	800c424 <VL53L1_get_lite_min_count_rate>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800b2a6:	8afb      	ldrh	r3, [r7, #22]
 800b2a8:	025b      	lsls	r3, r3, #9
 800b2aa:	61bb      	str	r3, [r7, #24]
		break;
 800b2ac:	e001      	b.n	800b2b2 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b2ae:	23fc      	movs	r3, #252	; 0xfc
 800b2b0:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800b2b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d123      	bne.n	800b302 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d110      	bne.n	800b2e2 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800b2c0:	897b      	ldrh	r3, [r7, #10]
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	33e0      	adds	r3, #224	; 0xe0
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4413      	add	r3, r2
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	69ba      	ldr	r2, [r7, #24]
 800b2d2:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b2d4:	897b      	ldrh	r3, [r7, #10]
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	4413      	add	r3, r2
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800b2e0:	e00f      	b.n	800b302 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	69ba      	ldr	r2, [r7, #24]
 800b2e6:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b2e8:	897b      	ldrh	r3, [r7, #10]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	33e0      	adds	r3, #224	; 0xe0
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4413      	add	r3, r2
 800b2f2:	69ba      	ldr	r2, [r7, #24]
 800b2f4:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b2f6:	897b      	ldrh	r3, [r7, #10]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800b302:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b306:	4618      	mov	r0, r3
 800b308:	3720      	adds	r7, #32
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b086      	sub	sp, #24
 800b312:	af00      	add	r7, sp, #0
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	460b      	mov	r3, r1
 800b318:	607a      	str	r2, [r7, #4]
 800b31a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b31c:	2300      	movs	r3, #0
 800b31e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800b320:	7afb      	ldrb	r3, [r7, #11]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	4619      	mov	r1, r3
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f000 fd7f 	bl	800be2a <VL53L1_get_sequence_config_bit>
 800b32c:	4603      	mov	r3, r0
 800b32e:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800b330:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b334:	4618      	mov	r0, r3
 800b336:	3718      	adds	r7, #24
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b344:	2300      	movs	r3, #0
 800b346:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	789b      	ldrb	r3, [r3, #2]
 800b34c:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800b34e:	7dbb      	ldrb	r3, [r7, #22]
 800b350:	2b40      	cmp	r3, #64	; 0x40
 800b352:	d002      	beq.n	800b35a <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 fa6b 	bl	800b830 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800b360:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 800b362:	7d7b      	ldrb	r3, [r7, #21]
 800b364:	2b63      	cmp	r3, #99	; 0x63
 800b366:	dc12      	bgt.n	800b38e <VL53L1_StartMeasurement+0x52>
 800b368:	2b62      	cmp	r3, #98	; 0x62
 800b36a:	da0d      	bge.n	800b388 <VL53L1_StartMeasurement+0x4c>
 800b36c:	2b05      	cmp	r3, #5
 800b36e:	dc0e      	bgt.n	800b38e <VL53L1_StartMeasurement+0x52>
 800b370:	2b04      	cmp	r3, #4
 800b372:	da09      	bge.n	800b388 <VL53L1_StartMeasurement+0x4c>
 800b374:	2b02      	cmp	r3, #2
 800b376:	dc02      	bgt.n	800b37e <VL53L1_StartMeasurement+0x42>
 800b378:	2b00      	cmp	r3, #0
 800b37a:	da05      	bge.n	800b388 <VL53L1_StartMeasurement+0x4c>
 800b37c:	e007      	b.n	800b38e <VL53L1_StartMeasurement+0x52>
 800b37e:	2b03      	cmp	r3, #3
 800b380:	d105      	bne.n	800b38e <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800b382:	2300      	movs	r3, #0
 800b384:	75fb      	strb	r3, [r7, #23]
		break;
 800b386:	e004      	b.n	800b392 <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800b388:	23f2      	movs	r3, #242	; 0xf2
 800b38a:	75fb      	strb	r3, [r7, #23]
		break;
 800b38c:	e001      	b.n	800b392 <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800b38e:	23fd      	movs	r3, #253	; 0xfd
 800b390:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800b392:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d11f      	bne.n	800b3da <VL53L1_StartMeasurement+0x9e>
 800b39a:	7dbb      	ldrb	r3, [r7, #22]
 800b39c:	2b40      	cmp	r3, #64	; 0x40
 800b39e:	d11c      	bne.n	800b3da <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b3a0:	f107 0310 	add.w	r3, r7, #16
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f7ff fdde 	bl	800af68 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	4a17      	ldr	r2, [pc, #92]	; (800b410 <VL53L1_StartMeasurement+0xd4>)
 800b3b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b8:	099b      	lsrs	r3, r3, #6
 800b3ba:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b3bc:	f107 030c 	add.w	r3, r7, #12
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7ff fe9c 	bl	800b100 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	1d1a      	adds	r2, r3, #4
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d901      	bls.n	800b3da <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800b3d6:	23fc      	movs	r3, #252	; 0xfc
 800b3d8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800b3da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d107      	bne.n	800b3f2 <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 800b3e2:	7dbb      	ldrb	r3, [r7, #22]
 800b3e4:	2206      	movs	r2, #6
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f001 f867 	bl	800c4bc <VL53L1_init_and_start_range>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800b3f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d103      	bne.n	800b402 <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2204      	movs	r2, #4
 800b3fe:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800b402:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	10624dd3 	.word	0x10624dd3

0800b414 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	789b      	ldrb	r3, [r3, #2]
 800b424:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800b426:	7bbb      	ldrb	r3, [r7, #14]
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f001 fb87 	bl	800cb3e <VL53L1_clear_interrupt_and_enable_next_range>
 800b430:	4603      	mov	r3, r0
 800b432:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800b434:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b448:	2300      	movs	r3, #0
 800b44a:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800b44c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f004 fb18 	bl	800fa86 <VL53L1_poll_for_range_completion>
 800b456:	4603      	mov	r3, r0
 800b458:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800b45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
	...

0800b468 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800b468:	b480      	push	{r7}
 800b46a:	b08d      	sub	sp, #52	; 0x34
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	4603      	mov	r3, r0
 800b470:	603a      	str	r2, [r7, #0]
 800b472:	71fb      	strb	r3, [r7, #7]
 800b474:	460b      	mov	r3, r1
 800b476:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800b478:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800b47c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800b47e:	231e      	movs	r3, #30
 800b480:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800b482:	4b33      	ldr	r3, [pc, #204]	; (800b550 <ComputeRQL+0xe8>)
 800b484:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800b486:	4b33      	ldr	r3, [pc, #204]	; (800b554 <ComputeRQL+0xec>)
 800b488:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800b48a:	f641 139a 	movw	r3, #6554	; 0x199a
 800b48e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800b490:	79fb      	ldrb	r3, [r7, #7]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d103      	bne.n	800b49e <ComputeRQL+0x36>
		returnvalue = 0;
 800b496:	2300      	movs	r3, #0
 800b498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b49c:	e04f      	b.n	800b53e <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800b49e:	79bb      	ldrb	r3, [r7, #6]
 800b4a0:	2b07      	cmp	r3, #7
 800b4a2:	d103      	bne.n	800b4ac <ComputeRQL+0x44>
		returnvalue = 50;
 800b4a4:	2332      	movs	r3, #50	; 0x32
 800b4a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4aa:	e048      	b.n	800b53e <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b4b2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	dd03      	ble.n	800b4c2 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800b4ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4bc:	041b      	lsls	r3, r3, #16
 800b4be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4c0:	e007      	b.n	800b4d2 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	fb02 f303 	mul.w	r3, r2, r3
 800b4d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d020      	beq.n	800b51a <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b4dc:	461a      	mov	r2, r3
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	fb02 f303 	mul.w	r3, r2, r3
 800b4e4:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800b4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e8:	085b      	lsrs	r3, r3, #1
 800b4ea:	693a      	ldr	r2, [r7, #16]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f8:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	041b      	lsls	r3, r3, #16
 800b4fe:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	429a      	cmp	r2, r3
 800b506:	d804      	bhi.n	800b512 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800b508:	69fa      	ldr	r2, [r7, #28]
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	1ad3      	subs	r3, r2, r3
 800b50e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b510:	e006      	b.n	800b520 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800b512:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b516:	62bb      	str	r3, [r7, #40]	; 0x28
 800b518:	e002      	b.n	800b520 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800b51a:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800b51e:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800b520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b522:	0c1b      	lsrs	r3, r3, #16
 800b524:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800b526:	7bfb      	ldrb	r3, [r7, #15]
 800b528:	2b32      	cmp	r3, #50	; 0x32
 800b52a:	d905      	bls.n	800b538 <ComputeRQL+0xd0>
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	2b64      	cmp	r3, #100	; 0x64
 800b530:	bf28      	it	cs
 800b532:	2364      	movcs	r3, #100	; 0x64
 800b534:	b2db      	uxtb	r3, r3
 800b536:	e000      	b.n	800b53a <ComputeRQL+0xd2>
 800b538:	2332      	movs	r3, #50	; 0x32
 800b53a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800b53e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b542:	4618      	mov	r0, r3
 800b544:	3734      	adds	r7, #52	; 0x34
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	0075b333 	.word	0x0075b333
 800b554:	0030cccd 	.word	0x0030cccd

0800b558 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	4603      	mov	r3, r0
 800b560:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800b562:	79fb      	ldrb	r3, [r7, #7]
 800b564:	3b04      	subs	r3, #4
 800b566:	2b0f      	cmp	r3, #15
 800b568:	d83d      	bhi.n	800b5e6 <ConvertStatusLite+0x8e>
 800b56a:	a201      	add	r2, pc, #4	; (adr r2, 800b570 <ConvertStatusLite+0x18>)
 800b56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b570:	0800b5c3 	.word	0x0800b5c3
 800b574:	0800b5bd 	.word	0x0800b5bd
 800b578:	0800b5c9 	.word	0x0800b5c9
 800b57c:	0800b5cf 	.word	0x0800b5cf
 800b580:	0800b5db 	.word	0x0800b5db
 800b584:	0800b5e1 	.word	0x0800b5e1
 800b588:	0800b5e7 	.word	0x0800b5e7
 800b58c:	0800b5e7 	.word	0x0800b5e7
 800b590:	0800b5d5 	.word	0x0800b5d5
 800b594:	0800b5e7 	.word	0x0800b5e7
 800b598:	0800b5e7 	.word	0x0800b5e7
 800b59c:	0800b5e7 	.word	0x0800b5e7
 800b5a0:	0800b5e7 	.word	0x0800b5e7
 800b5a4:	0800b5e7 	.word	0x0800b5e7
 800b5a8:	0800b5b1 	.word	0x0800b5b1
 800b5ac:	0800b5b7 	.word	0x0800b5b7
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800b5b0:	230a      	movs	r3, #10
 800b5b2:	73fb      	strb	r3, [r7, #15]
		break;
 800b5b4:	e019      	b.n	800b5ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800b5b6:	2306      	movs	r3, #6
 800b5b8:	73fb      	strb	r3, [r7, #15]
		break;
 800b5ba:	e016      	b.n	800b5ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800b5bc:	2304      	movs	r3, #4
 800b5be:	73fb      	strb	r3, [r7, #15]
		break;
 800b5c0:	e013      	b.n	800b5ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	73fb      	strb	r3, [r7, #15]
		break;
 800b5c6:	e010      	b.n	800b5ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	73fb      	strb	r3, [r7, #15]
		break;
 800b5cc:	e00d      	b.n	800b5ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800b5ce:	2307      	movs	r3, #7
 800b5d0:	73fb      	strb	r3, [r7, #15]
		break;
 800b5d2:	e00a      	b.n	800b5ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800b5d4:	2309      	movs	r3, #9
 800b5d6:	73fb      	strb	r3, [r7, #15]
		break;
 800b5d8:	e007      	b.n	800b5ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800b5da:	2303      	movs	r3, #3
 800b5dc:	73fb      	strb	r3, [r7, #15]
		break;
 800b5de:	e004      	b.n	800b5ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	73fb      	strb	r3, [r7, #15]
		break;
 800b5e4:	e001      	b.n	800b5ea <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800b5e6:	23ff      	movs	r3, #255	; 0xff
 800b5e8:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800b5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3714      	adds	r7, #20
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08c      	sub	sp, #48	; 0x30
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	607b      	str	r3, [r7, #4]
 800b602:	460b      	mov	r3, r1
 800b604:	72fb      	strb	r3, [r7, #11]
 800b606:	4613      	mov	r3, r2
 800b608:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b60a:	2300      	movs	r3, #0
 800b60c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b616:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b61e:	f003 031f 	and.w	r3, r3, #31
 800b622:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800b626:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800b62a:	7afb      	ldrb	r3, [r7, #11]
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	4618      	mov	r0, r3
 800b630:	f7ff ff1a 	bl	800b468 <ComputeRQL>
 800b634:	4603      	mov	r3, r0
 800b636:	461a      	mov	r2, r3
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b640:	025b      	lsls	r3, r3, #9
 800b642:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800b644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b648:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b64e:	025b      	lsls	r3, r3, #9
 800b650:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b656:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800b65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65e:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b664:	025b      	lsls	r3, r3, #9
 800b666:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800b668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66a:	6a3a      	ldr	r2, [r7, #32]
 800b66c:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800b674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b676:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800b678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67a:	2200      	movs	r2, #0
 800b67c:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800b67e:	7abb      	ldrb	r3, [r7, #10]
 800b680:	2b11      	cmp	r3, #17
 800b682:	d009      	beq.n	800b698 <SetSimpleData+0xa0>
 800b684:	2b11      	cmp	r3, #17
 800b686:	dc0f      	bgt.n	800b6a8 <SetSimpleData+0xb0>
 800b688:	2b03      	cmp	r3, #3
 800b68a:	dc02      	bgt.n	800b692 <SetSimpleData+0x9a>
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	dc03      	bgt.n	800b698 <SetSimpleData+0xa0>
 800b690:	e00a      	b.n	800b6a8 <SetSimpleData+0xb0>
 800b692:	2b0d      	cmp	r3, #13
 800b694:	d004      	beq.n	800b6a0 <SetSimpleData+0xa8>
 800b696:	e007      	b.n	800b6a8 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800b698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69a:	2205      	movs	r2, #5
 800b69c:	76da      	strb	r2, [r3, #27]
		break;
 800b69e:	e006      	b.n	800b6ae <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a2:	220d      	movs	r2, #13
 800b6a4:	76da      	strb	r2, [r3, #27]
		break;
 800b6a6:	e002      	b.n	800b6ae <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b0:	7edb      	ldrb	r3, [r3, #27]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d108      	bne.n	800b6c8 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800b6b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7ff ff4c 	bl	800b558 <ConvertStatusLite>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800b6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c6:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b6cc:	025b      	lsls	r3, r3, #9
 800b6ce:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6a3a      	ldr	r2, [r7, #32]
 800b6d4:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b6dc:	025b      	lsls	r3, r3, #9
 800b6de:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6a3a      	ldr	r2, [r7, #32]
 800b6e4:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800b6e8:	f107 0314 	add.w	r3, r7, #20
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f7ff fdb3 	bl	800b25c <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800b6f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b6fa:	2b06      	cmp	r3, #6
 800b6fc:	bf0c      	ite	eq
 800b6fe:	2301      	moveq	r3, #1
 800b700:	2300      	movne	r3, #0
 800b702:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800b704:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800b706:	f107 0319 	add.w	r3, r7, #25
 800b70a:	461a      	mov	r2, r3
 800b70c:	2100      	movs	r1, #0
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7ff fd81 	bl	800b216 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800b714:	7e7b      	ldrb	r3, [r7, #25]
 800b716:	2b01      	cmp	r3, #1
 800b718:	d104      	bne.n	800b724 <SetSimpleData+0x12c>
 800b71a:	7ffb      	ldrb	r3, [r7, #31]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d101      	bne.n	800b724 <SetSimpleData+0x12c>
 800b720:	2301      	movs	r3, #1
 800b722:	e000      	b.n	800b726 <SetSimpleData+0x12e>
 800b724:	2300      	movs	r3, #0
 800b726:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	7fba      	ldrb	r2, [r7, #30]
 800b72c:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800b730:	f107 0314 	add.w	r3, r7, #20
 800b734:	461a      	mov	r2, r3
 800b736:	2101      	movs	r1, #1
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f7ff fd8f 	bl	800b25c <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800b73e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b742:	2b04      	cmp	r3, #4
 800b744:	bf0c      	ite	eq
 800b746:	2301      	moveq	r3, #1
 800b748:	2300      	movne	r3, #0
 800b74a:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800b74c:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800b74e:	f107 0319 	add.w	r3, r7, #25
 800b752:	461a      	mov	r2, r3
 800b754:	2101      	movs	r1, #1
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f7ff fd5d 	bl	800b216 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800b75c:	7e7b      	ldrb	r3, [r7, #25]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d104      	bne.n	800b76c <SetSimpleData+0x174>
 800b762:	7f7b      	ldrb	r3, [r7, #29]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d101      	bne.n	800b76c <SetSimpleData+0x174>
 800b768:	2301      	movs	r3, #1
 800b76a:	e000      	b.n	800b76e <SetSimpleData+0x176>
 800b76c:	2300      	movs	r3, #0
 800b76e:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	7fba      	ldrb	r2, [r7, #30]
 800b774:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	8b1b      	ldrh	r3, [r3, #24]
 800b77c:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800b77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b780:	7edb      	ldrb	r3, [r3, #27]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d110      	bne.n	800b7a8 <SetSimpleData+0x1b0>
 800b786:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	da0c      	bge.n	800b7a8 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800b78e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b792:	4b08      	ldr	r3, [pc, #32]	; (800b7b4 <SetSimpleData+0x1bc>)
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	429a      	cmp	r2, r3
 800b798:	da03      	bge.n	800b7a2 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800b79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79c:	220e      	movs	r2, #14
 800b79e:	76da      	strb	r2, [r3, #27]
 800b7a0:	e002      	b.n	800b7a8 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800b7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800b7a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3730      	adds	r7, #48	; 0x30
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	20000160 	.word	0x20000160

0800b7b8 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b0a8      	sub	sp, #160	; 0xa0
 800b7bc:	af02      	add	r7, sp, #8
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 800b7c8:	f107 0308 	add.w	r3, r7, #8
 800b7cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800b7d0:	221c      	movs	r2, #28
 800b7d2:	21ff      	movs	r1, #255	; 0xff
 800b7d4:	6838      	ldr	r0, [r7, #0]
 800b7d6:	f004 fd89 	bl	80102ec <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800b7da:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b7de:	2102      	movs	r1, #2
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f001 f93c 	bl	800ca5e <VL53L1_get_device_results>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800b7ec:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d117      	bne.n	800b824 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800b7f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7f8:	789a      	ldrb	r2, [r3, #2]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800b7fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b802:	3304      	adds	r3, #4
 800b804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800b808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b80c:	78da      	ldrb	r2, [r3, #3]
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b816:	2101      	movs	r1, #1
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7ff feed 	bl	800b5f8 <SetSimpleData>
 800b81e:	4603      	mov	r3, r0
 800b820:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b824:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3798      	adds	r7, #152	; 0x98
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b0c6      	sub	sp, #280	; 0x118
 800b834:	af00      	add	r7, sp, #0
 800b836:	1d3b      	adds	r3, r7, #4
 800b838:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b83a:	2300      	movs	r3, #0
 800b83c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800b840:	2300      	movs	r3, #0
 800b842:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800b846:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d108      	bne.n	800b860 <VL53L1_LoadPatch+0x30>
		status = VL53L1_WrByte(
 800b84e:	1d3b      	adds	r3, r7, #4
 800b850:	2200      	movs	r2, #0
 800b852:	2185      	movs	r1, #133	; 0x85
 800b854:	6818      	ldr	r0, [r3, #0]
 800b856:	f004 f9f1 	bl	800fc3c <VL53L1_WrByte>
 800b85a:	4603      	mov	r3, r0
 800b85c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 800b860:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b864:	2b00      	cmp	r3, #0
 800b866:	d103      	bne.n	800b870 <VL53L1_LoadPatch+0x40>
		VL53L1_enable_powerforce(Dev);
 800b868:	1d3b      	adds	r3, r7, #4
 800b86a:	6818      	ldr	r0, [r3, #0]
 800b86c:	f002 fce1 	bl	800e232 <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800b870:	4b65      	ldr	r3, [pc, #404]	; (800ba08 <VL53L1_LoadPatch+0x1d8>)
 800b872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b874:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d81b      	bhi.n	800b8b8 <VL53L1_LoadPatch+0x88>
 800b880:	a201      	add	r2, pc, #4	; (adr r2, 800b888 <VL53L1_LoadPatch+0x58>)
 800b882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b886:	bf00      	nop
 800b888:	0800b899 	.word	0x0800b899
 800b88c:	0800b8a1 	.word	0x0800b8a1
 800b890:	0800b8a9 	.word	0x0800b8a9
 800b894:	0800b8b1 	.word	0x0800b8b1

	switch(patch_tuning) {
	case 0:
		patch_power = 0x00;
 800b898:	2300      	movs	r3, #0
 800b89a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b89e:	e00e      	b.n	800b8be <VL53L1_LoadPatch+0x8e>
	case 1:
		patch_power = 0x10;
 800b8a0:	2310      	movs	r3, #16
 800b8a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b8a6:	e00a      	b.n	800b8be <VL53L1_LoadPatch+0x8e>
	case 2:
		patch_power = 0x20;
 800b8a8:	2320      	movs	r3, #32
 800b8aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b8ae:	e006      	b.n	800b8be <VL53L1_LoadPatch+0x8e>
	case 3:
		patch_power = 0x40;
 800b8b0:	2340      	movs	r3, #64	; 0x40
 800b8b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b8b6:	e002      	b.n	800b8be <VL53L1_LoadPatch+0x8e>
	default:
		patch_power = 0x00;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800b8be:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d125      	bne.n	800b912 <VL53L1_LoadPatch+0xe2>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 800b8c6:	f107 030c 	add.w	r3, r7, #12
 800b8ca:	2229      	movs	r2, #41	; 0x29
 800b8cc:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800b8ce:	f107 030c 	add.w	r3, r7, #12
 800b8d2:	22c9      	movs	r2, #201	; 0xc9
 800b8d4:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800b8d6:	f107 030c 	add.w	r3, r7, #12
 800b8da:	220e      	movs	r2, #14
 800b8dc:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800b8de:	f107 030c 	add.w	r3, r7, #12
 800b8e2:	2240      	movs	r2, #64	; 0x40
 800b8e4:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800b8e6:	f107 030c 	add.w	r3, r7, #12
 800b8ea:	2228      	movs	r2, #40	; 0x28
 800b8ec:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800b8ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b8f2:	b2da      	uxtb	r2, r3
 800b8f4:	f107 030c 	add.w	r3, r7, #12
 800b8f8:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800b8fa:	f107 020c 	add.w	r2, r7, #12
 800b8fe:	1d38      	adds	r0, r7, #4
 800b900:	2306      	movs	r3, #6
 800b902:	f240 4176 	movw	r1, #1142	; 0x476
 800b906:	6800      	ldr	r0, [r0, #0]
 800b908:	f004 f92c 	bl	800fb64 <VL53L1_WriteMulti>
 800b90c:	4603      	mov	r3, r0
 800b90e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 800b912:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b916:	2b00      	cmp	r3, #0
 800b918:	d123      	bne.n	800b962 <VL53L1_LoadPatch+0x132>
		comms_buffer[0] = 0x03;
 800b91a:	f107 030c 	add.w	r3, r7, #12
 800b91e:	2203      	movs	r2, #3
 800b920:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800b922:	f107 030c 	add.w	r3, r7, #12
 800b926:	226d      	movs	r2, #109	; 0x6d
 800b928:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800b92a:	f107 030c 	add.w	r3, r7, #12
 800b92e:	2203      	movs	r2, #3
 800b930:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800b932:	f107 030c 	add.w	r3, r7, #12
 800b936:	226f      	movs	r2, #111	; 0x6f
 800b938:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800b93a:	f107 030c 	add.w	r3, r7, #12
 800b93e:	2207      	movs	r2, #7
 800b940:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800b942:	f107 030c 	add.w	r3, r7, #12
 800b946:	2229      	movs	r2, #41	; 0x29
 800b948:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 800b94a:	f107 020c 	add.w	r2, r7, #12
 800b94e:	1d38      	adds	r0, r7, #4
 800b950:	2306      	movs	r3, #6
 800b952:	f240 4196 	movw	r1, #1174	; 0x496
 800b956:	6800      	ldr	r0, [r0, #0]
 800b958:	f004 f904 	bl	800fb64 <VL53L1_WriteMulti>
 800b95c:	4603      	mov	r3, r0
 800b95e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800b962:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b966:	2b00      	cmp	r3, #0
 800b968:	d113      	bne.n	800b992 <VL53L1_LoadPatch+0x162>
		comms_buffer[0] = 0x00;
 800b96a:	f107 030c 	add.w	r3, r7, #12
 800b96e:	2200      	movs	r2, #0
 800b970:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800b972:	f107 030c 	add.w	r3, r7, #12
 800b976:	2207      	movs	r2, #7
 800b978:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800b97a:	f107 020c 	add.w	r2, r7, #12
 800b97e:	1d38      	adds	r0, r7, #4
 800b980:	2302      	movs	r3, #2
 800b982:	f240 4172 	movw	r1, #1138	; 0x472
 800b986:	6800      	ldr	r0, [r0, #0]
 800b988:	f004 f8ec 	bl	800fb64 <VL53L1_WriteMulti>
 800b98c:	4603      	mov	r3, r0
 800b98e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 800b992:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b996:	2b00      	cmp	r3, #0
 800b998:	d113      	bne.n	800b9c2 <VL53L1_LoadPatch+0x192>
		comms_buffer[0] = 0x00;
 800b99a:	f107 030c 	add.w	r3, r7, #12
 800b99e:	2200      	movs	r2, #0
 800b9a0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800b9a2:	f107 030c 	add.w	r3, r7, #12
 800b9a6:	2207      	movs	r2, #7
 800b9a8:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800b9aa:	f107 020c 	add.w	r2, r7, #12
 800b9ae:	1d38      	adds	r0, r7, #4
 800b9b0:	2302      	movs	r3, #2
 800b9b2:	f240 4174 	movw	r1, #1140	; 0x474
 800b9b6:	6800      	ldr	r0, [r0, #0]
 800b9b8:	f004 f8d4 	bl	800fb64 <VL53L1_WriteMulti>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800b9c2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d109      	bne.n	800b9de <VL53L1_LoadPatch+0x1ae>
		status = VL53L1_WrByte(
 800b9ca:	1d3b      	adds	r3, r7, #4
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800b9d2:	6818      	ldr	r0, [r3, #0]
 800b9d4:	f004 f932 	bl	800fc3c <VL53L1_WrByte>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 800b9de:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d108      	bne.n	800b9f8 <VL53L1_LoadPatch+0x1c8>
		status = VL53L1_WrByte(
 800b9e6:	1d3b      	adds	r3, r7, #4
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	2185      	movs	r1, #133	; 0x85
 800b9ec:	6818      	ldr	r0, [r3, #0]
 800b9ee:	f004 f925 	bl	800fc3c <VL53L1_WrByte>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 800b9f8:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20000160 	.word	0x20000160

0800ba0c <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800ba0c:	b5b0      	push	{r4, r5, r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af04      	add	r7, sp, #16
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	460b      	mov	r3, r1
 800ba16:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800ba20:	2162      	movs	r1, #98	; 0x62
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f002 f8bf 	bl	800dba6 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	2201      	movs	r2, #1
 800ba32:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2200      	movs	r2, #0
 800ba38:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	2201      	movs	r2, #1
 800ba44:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ba4c:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ba54:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800ba5c:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	2264      	movs	r2, #100	; 0x64
 800ba62:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ba6a:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	f240 72db 	movw	r2, #2011	; 0x7db
 800ba7a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f002 f875 	bl	800db6e <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ba84:	78fb      	ldrb	r3, [r7, #3]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d008      	beq.n	800ba9c <VL53L1_data_init+0x90>
 800ba8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d104      	bne.n	800ba9c <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 f857 	bl	800bb46 <VL53L1_read_p2p_data>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800baa2:	4618      	mov	r0, r3
 800baa4:	f001 fba4 	bl	800d1f0 <VL53L1_init_refspadchar_config_struct>
 800baa8:	4603      	mov	r3, r0
 800baaa:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800bab2:	4618      	mov	r0, r3
 800bab4:	f001 fbc0 	bl	800d238 <VL53L1_init_ssc_config_struct>
 800bab8:	4603      	mov	r3, r0
 800baba:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800bac8:	4619      	mov	r1, r3
 800baca:	4610      	mov	r0, r2
 800bacc:	f001 fbd5 	bl	800d27a <VL53L1_init_xtalk_config_struct>
 800bad0:	4603      	mov	r3, r0
 800bad2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bada:	4618      	mov	r0, r3
 800badc:	f001 fc2f 	bl	800d33e <VL53L1_init_offset_cal_config_struct>
 800bae0:	4603      	mov	r3, r0
 800bae2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	33a4      	adds	r3, #164	; 0xa4
 800bae8:	4618      	mov	r0, r3
 800baea:	f001 fc4f 	bl	800d38c <VL53L1_init_tuning_parm_storage_struct>
 800baee:	4603      	mov	r3, r0
 800baf0:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800baf2:	2120      	movs	r1, #32
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fcc1 	bl	800c47c <VL53L1_set_vhv_loopbound>
 800bafa:	4603      	mov	r3, r0
 800bafc:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800bafe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d116      	bne.n	800bb34 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	7858      	ldrb	r0, [r3, #1]
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	8b1c      	ldrh	r4, [r3, #24]
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	689d      	ldr	r5, [r3, #8]
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	6912      	ldr	r2, [r2, #16]
 800bb1a:	68b9      	ldr	r1, [r7, #8]
 800bb1c:	6949      	ldr	r1, [r1, #20]
 800bb1e:	9102      	str	r1, [sp, #8]
 800bb20:	9201      	str	r2, [sp, #4]
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	462b      	mov	r3, r5
 800bb26:	4622      	mov	r2, r4
 800bb28:	4601      	mov	r1, r0
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fad8 	bl	800c0e0 <VL53L1_set_preset_mode>
 800bb30:	4603      	mov	r3, r0
 800bb32:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f002 fdb5 	bl	800e6a4 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800bb3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bdb0      	pop	{r4, r5, r7, pc}

0800bb46 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b084      	sub	sp, #16
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800bb56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d108      	bne.n	800bb70 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bb64:	4619      	mov	r1, r3
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f002 ff39 	bl	800e9de <VL53L1_get_static_nvm_managed>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800bb70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d107      	bne.n	800bb88 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	3342      	adds	r3, #66	; 0x42
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f003 f86b 	bl	800ec5a <VL53L1_get_customer_nvm_managed>
 800bb84:	4603      	mov	r3, r0
 800bb86:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800bb88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d115      	bne.n	800bbbc <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800bb96:	4619      	mov	r1, r3
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f003 ff1d 	bl	800f9d8 <VL53L1_get_nvm_copy_data>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800bba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d108      	bne.n	800bbbc <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	33f0      	adds	r3, #240	; 0xf0
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	f002 f957 	bl	800de6a <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800bbbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d109      	bne.n	800bbd8 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800bbca:	461a      	mov	r2, r3
 800bbcc:	21de      	movs	r1, #222	; 0xde
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f004 f892 	bl	800fcf8 <VL53L1_RdWord>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bbde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbe2:	d204      	bcs.n	800bbee <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800bbea:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800bbee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d107      	bne.n	800bc06 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	339e      	adds	r3, #158	; 0x9e
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 f990 	bl	800bf22 <VL53L1_get_mode_mitigation_roi>
 800bc02:	4603      	mov	r3, r0
 800bc04:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d114      	bne.n	800bc3a <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10f      	bne.n	800bc3a <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800bc20:	011b      	lsls	r3, r3, #4
 800bc22:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bc30:	011b      	lsls	r3, r3, #4
 800bc32:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800bc3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800bc46:	b480      	push	{r7}
 800bc48:	b085      	sub	sp, #20
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc50:	2300      	movs	r3, #0
 800bc52:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bc62:	23f1      	movs	r3, #241	; 0xf1
 800bc64:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800bc66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10c      	bne.n	800bc88 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	683a      	ldr	r2, [r7, #0]
 800bc72:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800bc7a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800bc88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bca2:	2300      	movs	r3, #0
 800bca4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d101      	bne.n	800bcb8 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bcb4:	23f1      	movs	r3, #241	; 0xf1
 800bcb6:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800bcb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d109      	bne.n	800bcd4 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800bccc:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800bcd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b088      	sub	sp, #32
 800bce8:	af02      	add	r7, sp, #8
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
 800bcf0:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bd04:	23f1      	movs	r3, #241	; 0xf1
 800bd06:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800bd08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d11b      	bne.n	800bd48 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800bd2e:	693a      	ldr	r2, [r7, #16]
 800bd30:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 800bd34:	9201      	str	r2, [sp, #4]
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	6879      	ldr	r1, [r7, #4]
 800bd3e:	68b8      	ldr	r0, [r7, #8]
 800bd40:	f002 fbe2 	bl	800e508 <VL53L1_calc_timeout_register_values>
 800bd44:	4603      	mov	r3, r0
 800bd46:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800bd48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3718      	adds	r7, #24
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b088      	sub	sp, #32
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
 800bd60:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bd62:	2300      	movs	r3, #0
 800bd64:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bd7c:	23f1      	movs	r3, #241	; 0xf1
 800bd7e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800bd80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d14a      	bne.n	800be1e <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800bd94:	4619      	mov	r1, r3
 800bd96:	4610      	mov	r0, r2
 800bd98:	f002 fa5d 	bl	800e256 <VL53L1_calc_macro_period_us>
 800bd9c:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800bda4:	6979      	ldr	r1, [r7, #20]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f002 fb15 	bl	800e3d6 <VL53L1_calc_timeout_us>
 800bdac:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800bdb8:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800bdba:	8a7b      	ldrh	r3, [r7, #18]
 800bdbc:	021b      	lsls	r3, r3, #8
 800bdbe:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800bdc6:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800bdc8:	4413      	add	r3, r2
 800bdca:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800bdcc:	8a7b      	ldrh	r3, [r7, #18]
 800bdce:	6979      	ldr	r1, [r7, #20]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f002 fb3e 	bl	800e452 <VL53L1_calc_decoded_timeout_us>
 800bdd6:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800bde2:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800bde4:	8a7b      	ldrh	r3, [r7, #18]
 800bde6:	021b      	lsls	r3, r3, #8
 800bde8:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800bdf0:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800bdf2:	4413      	add	r3, r2
 800bdf4:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800bdf6:	8a7b      	ldrh	r3, [r7, #18]
 800bdf8:	6979      	ldr	r1, [r7, #20]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f002 fb29 	bl	800e452 <VL53L1_calc_decoded_timeout_us>
 800be00:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800be1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3720      	adds	r7, #32
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800be2a:	b480      	push	{r7}
 800be2c:	b087      	sub	sp, #28
 800be2e:	af00      	add	r7, sp, #0
 800be30:	60f8      	str	r0, [r7, #12]
 800be32:	460b      	mov	r3, r1
 800be34:	607a      	str	r2, [r7, #4]
 800be36:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be38:	2300      	movs	r3, #0
 800be3a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800be40:	2301      	movs	r3, #1
 800be42:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800be44:	7afb      	ldrb	r3, [r7, #11]
 800be46:	2b07      	cmp	r3, #7
 800be48:	d81c      	bhi.n	800be84 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800be4a:	7afb      	ldrb	r3, [r7, #11]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d004      	beq.n	800be5a <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800be50:	7afb      	ldrb	r3, [r7, #11]
 800be52:	2201      	movs	r2, #1
 800be54:	fa02 f303 	lsl.w	r3, r2, r3
 800be58:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800be60:	7dbb      	ldrb	r3, [r7, #22]
 800be62:	4013      	ands	r3, r2
 800be64:	b2da      	uxtb	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800be6a:	7afb      	ldrb	r3, [r7, #11]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00b      	beq.n	800be88 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	461a      	mov	r2, r3
 800be76:	7afb      	ldrb	r3, [r7, #11]
 800be78:	fa42 f303 	asr.w	r3, r2, r3
 800be7c:	b2da      	uxtb	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	701a      	strb	r2, [r3, #0]
 800be82:	e001      	b.n	800be88 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800be84:	23fc      	movs	r3, #252	; 0xfc
 800be86:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800be88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	371c      	adds	r7, #28
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bea2:	2300      	movs	r3, #0
 800bea4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	7858      	ldrb	r0, [r3, #1]
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	7819      	ldrb	r1, [r3, #0]
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800beb8:	461a      	mov	r2, r3
 800beba:	f002 fb9e 	bl	800e5fa <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	7898      	ldrb	r0, [r3, #2]
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	78d9      	ldrb	r1, [r3, #3]
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800becc:	461a      	mov	r2, r3
 800bece:	f002 fbd3 	bl	800e678 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800bed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b084      	sub	sp, #16
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bee8:	2300      	movs	r3, #0
 800beea:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	3301      	adds	r3, #1
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	4619      	mov	r1, r3
 800befe:	f002 fc8a 	bl	800e816 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	1c99      	adds	r1, r3, #2
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	3303      	adds	r3, #3
 800bf10:	461a      	mov	r2, r3
 800bf12:	f002 fb99 	bl	800e648 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800bf16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b086      	sub	sp, #24
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
 800bf2a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800bf46:	f107 020e 	add.w	r2, r7, #14
 800bf4a:	f107 010d 	add.w	r1, r7, #13
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f002 fc61 	bl	800e816 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800bf54:	7bba      	ldrb	r2, [r7, #14]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800bf5a:	7b7a      	ldrb	r2, [r7, #13]
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800bf66:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800bf68:	7bfb      	ldrb	r3, [r7, #15]
 800bf6a:	091b      	lsrs	r3, r3, #4
 800bf6c:	b2da      	uxtb	r2, r3
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800bf72:	7bfb      	ldrb	r3, [r7, #15]
 800bf74:	f003 030f 	and.w	r3, r3, #15
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800bf7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3718      	adds	r7, #24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
	...

0800bf8c <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b087      	sub	sp, #28
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	607a      	str	r2, [r7, #4]
 800bf96:	603b      	str	r3, [r7, #0]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800bfa4:	7afb      	ldrb	r3, [r7, #11]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	2b25      	cmp	r3, #37	; 0x25
 800bfaa:	f200 808e 	bhi.w	800c0ca <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800bfae:	a201      	add	r2, pc, #4	; (adr r2, 800bfb4 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800bfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb4:	0800c04d 	.word	0x0800c04d
 800bfb8:	0800c04d 	.word	0x0800c04d
 800bfbc:	0800c04d 	.word	0x0800c04d
 800bfc0:	0800c04d 	.word	0x0800c04d
 800bfc4:	0800c04d 	.word	0x0800c04d
 800bfc8:	0800c077 	.word	0x0800c077
 800bfcc:	0800c077 	.word	0x0800c077
 800bfd0:	0800c077 	.word	0x0800c077
 800bfd4:	0800c0cb 	.word	0x0800c0cb
 800bfd8:	0800c0cb 	.word	0x0800c0cb
 800bfdc:	0800c0cb 	.word	0x0800c0cb
 800bfe0:	0800c0cb 	.word	0x0800c0cb
 800bfe4:	0800c0cb 	.word	0x0800c0cb
 800bfe8:	0800c0cb 	.word	0x0800c0cb
 800bfec:	0800c0cb 	.word	0x0800c0cb
 800bff0:	0800c0cb 	.word	0x0800c0cb
 800bff4:	0800c04d 	.word	0x0800c04d
 800bff8:	0800c077 	.word	0x0800c077
 800bffc:	0800c0cb 	.word	0x0800c0cb
 800c000:	0800c0cb 	.word	0x0800c0cb
 800c004:	0800c0cb 	.word	0x0800c0cb
 800c008:	0800c0cb 	.word	0x0800c0cb
 800c00c:	0800c0cb 	.word	0x0800c0cb
 800c010:	0800c0cb 	.word	0x0800c0cb
 800c014:	0800c0cb 	.word	0x0800c0cb
 800c018:	0800c0cb 	.word	0x0800c0cb
 800c01c:	0800c0cb 	.word	0x0800c0cb
 800c020:	0800c0cb 	.word	0x0800c0cb
 800c024:	0800c0cb 	.word	0x0800c0cb
 800c028:	0800c0cb 	.word	0x0800c0cb
 800c02c:	0800c0cb 	.word	0x0800c0cb
 800c030:	0800c0cb 	.word	0x0800c0cb
 800c034:	0800c0cb 	.word	0x0800c0cb
 800c038:	0800c0cb 	.word	0x0800c0cb
 800c03c:	0800c0cb 	.word	0x0800c0cb
 800c040:	0800c0a1 	.word	0x0800c0a1
 800c044:	0800c0a1 	.word	0x0800c0a1
 800c048:	0800c0a1 	.word	0x0800c0a1
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	601a      	str	r2, [r3, #0]
	break;
 800c074:	e02c      	b.n	800c0d0 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800c090:	6a3b      	ldr	r3, [r7, #32]
 800c092:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	601a      	str	r2, [r3, #0]
	break;
 800c09e:	e017      	b.n	800c0d0 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800c0ba:	6a3b      	ldr	r3, [r7, #32]
 800c0bc:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c6:	601a      	str	r2, [r3, #0]
	break;
 800c0c8:	e002      	b.n	800c0d0 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c0ca:	23fc      	movs	r3, #252	; 0xfc
 800c0cc:	75fb      	strb	r3, [r7, #23]
		break;
 800c0ce:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800c0d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	371c      	adds	r7, #28
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b092      	sub	sp, #72	; 0x48
 800c0e4:	af04      	add	r7, sp, #16
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	607b      	str	r3, [r7, #4]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	72fb      	strb	r3, [r7, #11]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c102:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c10a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800c112:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c11a:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c122:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	33a4      	adds	r3, #164	; 0xa4
 800c128:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800c130:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	7afa      	ldrb	r2, [r7, #11]
 800c136:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800c138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c13c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c142:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800c144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c148:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800c14a:	2103      	movs	r1, #3
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f001 fd2a 	bl	800dba6 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800c152:	7afb      	ldrb	r3, [r7, #11]
 800c154:	3b01      	subs	r3, #1
 800c156:	2b25      	cmp	r3, #37	; 0x25
 800c158:	f200 810c 	bhi.w	800c374 <VL53L1_set_preset_mode+0x294>
 800c15c:	a201      	add	r2, pc, #4	; (adr r2, 800c164 <VL53L1_set_preset_mode+0x84>)
 800c15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c162:	bf00      	nop
 800c164:	0800c1fd 	.word	0x0800c1fd
 800c168:	0800c219 	.word	0x0800c219
 800c16c:	0800c235 	.word	0x0800c235
 800c170:	0800c251 	.word	0x0800c251
 800c174:	0800c26d 	.word	0x0800c26d
 800c178:	0800c289 	.word	0x0800c289
 800c17c:	0800c2a5 	.word	0x0800c2a5
 800c180:	0800c2c1 	.word	0x0800c2c1
 800c184:	0800c375 	.word	0x0800c375
 800c188:	0800c375 	.word	0x0800c375
 800c18c:	0800c375 	.word	0x0800c375
 800c190:	0800c375 	.word	0x0800c375
 800c194:	0800c375 	.word	0x0800c375
 800c198:	0800c375 	.word	0x0800c375
 800c19c:	0800c375 	.word	0x0800c375
 800c1a0:	0800c375 	.word	0x0800c375
 800c1a4:	0800c2dd 	.word	0x0800c2dd
 800c1a8:	0800c2f9 	.word	0x0800c2f9
 800c1ac:	0800c375 	.word	0x0800c375
 800c1b0:	0800c375 	.word	0x0800c375
 800c1b4:	0800c375 	.word	0x0800c375
 800c1b8:	0800c375 	.word	0x0800c375
 800c1bc:	0800c375 	.word	0x0800c375
 800c1c0:	0800c375 	.word	0x0800c375
 800c1c4:	0800c375 	.word	0x0800c375
 800c1c8:	0800c375 	.word	0x0800c375
 800c1cc:	0800c375 	.word	0x0800c375
 800c1d0:	0800c375 	.word	0x0800c375
 800c1d4:	0800c375 	.word	0x0800c375
 800c1d8:	0800c375 	.word	0x0800c375
 800c1dc:	0800c375 	.word	0x0800c375
 800c1e0:	0800c375 	.word	0x0800c375
 800c1e4:	0800c375 	.word	0x0800c375
 800c1e8:	0800c375 	.word	0x0800c375
 800c1ec:	0800c375 	.word	0x0800c375
 800c1f0:	0800c315 	.word	0x0800c315
 800c1f4:	0800c335 	.word	0x0800c335
 800c1f8:	0800c355 	.word	0x0800c355

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	9301      	str	r3, [sp, #4]
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	6a3b      	ldr	r3, [r7, #32]
 800c206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c20a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c20c:	f001 f94d 	bl	800d4aa <VL53L1_preset_mode_standard_ranging>
 800c210:	4603      	mov	r3, r0
 800c212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c216:	e0b1      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	9301      	str	r3, [sp, #4]
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	6a3b      	ldr	r3, [r7, #32]
 800c222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c228:	f001 fa5d 	bl	800d6e6 <VL53L1_preset_mode_standard_ranging_short_range>
 800c22c:	4603      	mov	r3, r0
 800c22e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c232:	e0a3      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	6a3b      	ldr	r3, [r7, #32]
 800c23e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c244:	f001 fa90 	bl	800d768 <VL53L1_preset_mode_standard_ranging_long_range>
 800c248:	4603      	mov	r3, r0
 800c24a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c24e:	e095      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	9301      	str	r3, [sp, #4]
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	6a3b      	ldr	r3, [r7, #32]
 800c25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c25c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c25e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c260:	f001 fac3 	bl	800d7ea <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800c264:	4603      	mov	r3, r0
 800c266:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c26a:	e087      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	9301      	str	r3, [sp, #4]
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c27a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c27c:	f001 fada 	bl	800d834 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800c280:	4603      	mov	r3, r0
 800c282:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c286:	e079      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	9301      	str	r3, [sp, #4]
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	6a3b      	ldr	r3, [r7, #32]
 800c292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c298:	f001 faf1 	bl	800d87e <VL53L1_preset_mode_timed_ranging>
 800c29c:	4603      	mov	r3, r0
 800c29e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c2a2:	e06b      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
 800c2ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2b4:	f001 fb1d 	bl	800d8f2 <VL53L1_preset_mode_timed_ranging_short_range>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c2be:	e05d      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	9301      	str	r3, [sp, #4]
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	6a3b      	ldr	r3, [r7, #32]
 800c2ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2d0:	f001 fb49 	bl	800d966 <VL53L1_preset_mode_timed_ranging_long_range>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c2da:	e04f      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	9301      	str	r3, [sp, #4]
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	6a3b      	ldr	r3, [r7, #32]
 800c2e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2ec:	f001 fc1d 	bl	800db2a <VL53L1_preset_mode_olt>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c2f6:	e041      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	9301      	str	r3, [sp, #4]
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	6a3b      	ldr	r3, [r7, #32]
 800c302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c306:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c308:	f001 fbd9 	bl	800dabe <VL53L1_preset_mode_singleshot_ranging>
 800c30c:	4603      	mov	r3, r0
 800c30e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c312:	e033      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	9302      	str	r3, [sp, #8]
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	9301      	str	r3, [sp, #4]
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	6a3b      	ldr	r3, [r7, #32]
 800c322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c328:	f001 fb7d 	bl	800da26 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800c32c:	4603      	mov	r3, r0
 800c32e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c332:	e023      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	9302      	str	r3, [sp, #8]
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	6a3b      	ldr	r3, [r7, #32]
 800c342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c348:	f001 fb47 	bl	800d9da <VL53L1_preset_mode_low_power_auto_ranging>
 800c34c:	4603      	mov	r3, r0
 800c34e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c352:	e013      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	9302      	str	r3, [sp, #8]
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	9301      	str	r3, [sp, #4]
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	6a3b      	ldr	r3, [r7, #32]
 800c362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c368:	f001 fb83 	bl	800da72 <VL53L1_preset_mode_low_power_auto_long_ranging>
 800c36c:	4603      	mov	r3, r0
 800c36e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c372:	e003      	b.n	800c37c <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c374:	23fc      	movs	r3, #252	; 0xfc
 800c376:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800c37a:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800c37c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c380:	2b00      	cmp	r3, #0
 800c382:	d105      	bne.n	800c390 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800c384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c386:	893a      	ldrh	r2, [r7, #8]
 800c388:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	893a      	ldrh	r2, [r7, #8]
 800c38e:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800c390:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c394:	2b00      	cmp	r3, #0
 800c396:	d108      	bne.n	800c3aa <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800c398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c39a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c39c:	6879      	ldr	r1, [r7, #4]
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f7ff fca0 	bl	800bce4 <VL53L1_set_timeouts_us>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800c3aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d106      	bne.n	800c3c0 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800c3b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f7ff fc46 	bl	800bc46 <VL53L1_set_inter_measurement_period_ms>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800c3c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3738      	adds	r7, #56	; 0x38
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c3e8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3714      	adds	r7, #20
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	460b      	mov	r3, r1
 800c402:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c404:	2300      	movs	r3, #0
 800c406:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	887a      	ldrh	r2, [r7, #2]
 800c410:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800c414:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c418:	4618      	mov	r0, r3
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c42e:	2300      	movs	r3, #0
 800c430:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c440:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c444:	4618      	mov	r0, r3
 800c446:	3714      	adds	r7, #20
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	460b      	mov	r3, r1
 800c45a:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c45c:	2300      	movs	r3, #0
 800c45e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	887a      	ldrh	r2, [r7, #2]
 800c468:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800c46c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c470:	4618      	mov	r0, r3
 800c472:	3714      	adds	r7, #20
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b085      	sub	sp, #20
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	460b      	mov	r3, r1
 800c486:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c488:	2300      	movs	r3, #0
 800c48a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c496:	f003 0303 	and.w	r3, r3, #3
 800c49a:	b2da      	uxtb	r2, r3
 800c49c:	78fb      	ldrb	r3, [r7, #3]
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	4413      	add	r3, r2
 800c4a4:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800c4ac:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b0d0      	sub	sp, #320	; 0x140
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	1d3b      	adds	r3, r7, #4
 800c4c4:	6018      	str	r0, [r3, #0]
 800c4c6:	4608      	mov	r0, r1
 800c4c8:	4611      	mov	r1, r2
 800c4ca:	1cfb      	adds	r3, r7, #3
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	701a      	strb	r2, [r3, #0]
 800c4d0:	1cbb      	adds	r3, r7, #2
 800c4d2:	460a      	mov	r2, r1
 800c4d4:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c4dc:	1d3b      	adds	r3, r7, #4
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800c4e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c4ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800c4f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4f4:	3342      	adds	r3, #66	; 0x42
 800c4f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800c4fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c502:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800c506:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c50a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c50e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800c512:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c516:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800c51a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800c51e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c522:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c526:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800c52a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c52e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c532:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800c536:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c53a:	332c      	adds	r3, #44	; 0x2c
 800c53c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800c540:	f107 030c 	add.w	r3, r7, #12
 800c544:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800c54e:	2300      	movs	r3, #0
 800c550:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800c554:	2300      	movs	r3, #0
 800c556:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800c560:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c564:	1cfa      	adds	r2, r7, #3
 800c566:	7812      	ldrb	r2, [r2, #0]
 800c568:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800c56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c56e:	791b      	ldrb	r3, [r3, #4]
 800c570:	b25b      	sxtb	r3, r3
 800c572:	f003 030f 	and.w	r3, r3, #15
 800c576:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800c578:	1cfb      	adds	r3, r7, #3
 800c57a:	f993 3000 	ldrsb.w	r3, [r3]
 800c57e:	4313      	orrs	r3, r2
 800c580:	b25b      	sxtb	r3, r3
 800c582:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800c584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c588:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800c58a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c58e:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800c592:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c596:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800c59a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c59e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800c5a2:	2bff      	cmp	r3, #255	; 0xff
 800c5a4:	d104      	bne.n	800c5b0 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800c5a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c5b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5b4:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d133      	bne.n	800c624 <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800c5bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5c0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d12d      	bne.n	800c624 <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800c5c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5cc:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800c5d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5d4:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800c5d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5dc:	2220      	movs	r2, #32
 800c5de:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800c5e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5e6:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800c5ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10c      	bne.n	800c60c <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800c5f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5f6:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800c602:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c606:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800c60a:	e004      	b.n	800c616 <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800c60c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c610:	2200      	movs	r2, #0
 800c612:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800c616:	1cbb      	adds	r3, r7, #2
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	2b04      	cmp	r3, #4
 800c61c:	d802      	bhi.n	800c624 <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800c61e:	1cbb      	adds	r3, r7, #2
 800c620:	2205      	movs	r2, #5
 800c622:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c624:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c628:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d110      	bne.n	800c652 <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800c630:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c634:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d10a      	bne.n	800c652 <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800c63c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c640:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800c644:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c648:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800c64c:	1cbb      	adds	r3, r7, #2
 800c64e:	2206      	movs	r2, #6
 800c650:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800c652:	1cbb      	adds	r3, r7, #2
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	3b01      	subs	r3, #1
 800c658:	2b05      	cmp	r3, #5
 800c65a:	d827      	bhi.n	800c6ac <VL53L1_init_and_start_range+0x1f0>
 800c65c:	a201      	add	r2, pc, #4	; (adr r2, 800c664 <VL53L1_init_and_start_range+0x1a8>)
 800c65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c662:	bf00      	nop
 800c664:	0800c6a5 	.word	0x0800c6a5
 800c668:	0800c69d 	.word	0x0800c69d
 800c66c:	0800c695 	.word	0x0800c695
 800c670:	0800c68d 	.word	0x0800c68d
 800c674:	0800c685 	.word	0x0800c685
 800c678:	0800c67d 	.word	0x0800c67d
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800c67c:	2301      	movs	r3, #1
 800c67e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c682:	e017      	b.n	800c6b4 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800c684:	230d      	movs	r3, #13
 800c686:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c68a:	e013      	b.n	800c6b4 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800c68c:	2324      	movs	r3, #36	; 0x24
 800c68e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c692:	e00f      	b.n	800c6b4 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800c694:	2344      	movs	r3, #68	; 0x44
 800c696:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c69a:	e00b      	b.n	800c6b4 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800c69c:	235a      	movs	r3, #90	; 0x5a
 800c69e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c6a2:	e007      	b.n	800c6b4 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800c6a4:	2371      	movs	r3, #113	; 0x71
 800c6a6:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c6aa:	e003      	b.n	800c6b4 <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800c6ac:	2383      	movs	r3, #131	; 0x83
 800c6ae:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c6b2:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800c6b4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c6b8:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800c6bc:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800c6c0:	f107 030c 	add.w	r3, r7, #12
 800c6c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c6ce:	e00b      	b.n	800c6e8 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800c6d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c6d4:	1c5a      	adds	r2, r3, #1
 800c6d6:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800c6da:	2200      	movs	r2, #0
 800c6dc:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c6de:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c6e8:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800c6ec:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d3ed      	bcc.n	800c6d0 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800c6f4:	1cbb      	adds	r3, r7, #2
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b05      	cmp	r3, #5
 800c6fa:	d917      	bls.n	800c72c <VL53L1_init_and_start_range+0x270>
 800c6fc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c700:	2b00      	cmp	r3, #0
 800c702:	d113      	bne.n	800c72c <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c704:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c708:	f1c3 0301 	rsb	r3, r3, #1
 800c70c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c710:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800c714:	f107 020c 	add.w	r2, r7, #12
 800c718:	4413      	add	r3, r2
 800c71a:	461a      	mov	r2, r3
 800c71c:	210b      	movs	r1, #11
 800c71e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800c722:	f002 f8a7 	bl	800e874 <VL53L1_i2c_encode_static_nvm_managed>
 800c726:	4603      	mov	r3, r0
 800c728:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800c72c:	1cbb      	adds	r3, r7, #2
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	2b04      	cmp	r3, #4
 800c732:	d917      	bls.n	800c764 <VL53L1_init_and_start_range+0x2a8>
 800c734:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d113      	bne.n	800c764 <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c73c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c740:	f1c3 030d 	rsb	r3, r3, #13
 800c744:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c748:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800c74c:	f107 020c 	add.w	r2, r7, #12
 800c750:	4413      	add	r3, r2
 800c752:	461a      	mov	r2, r3
 800c754:	2117      	movs	r1, #23
 800c756:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c75a:	f002 f967 	bl	800ea2c <VL53L1_i2c_encode_customer_nvm_managed>
 800c75e:	4603      	mov	r3, r0
 800c760:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800c764:	1cbb      	adds	r3, r7, #2
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	2b03      	cmp	r3, #3
 800c76a:	d917      	bls.n	800c79c <VL53L1_init_and_start_range+0x2e0>
 800c76c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c770:	2b00      	cmp	r3, #0
 800c772:	d113      	bne.n	800c79c <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c774:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c778:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800c77c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c780:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800c784:	f107 020c 	add.w	r2, r7, #12
 800c788:	4413      	add	r3, r2
 800c78a:	461a      	mov	r2, r3
 800c78c:	2120      	movs	r1, #32
 800c78e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c792:	f002 fa89 	bl	800eca8 <VL53L1_i2c_encode_static_config>
 800c796:	4603      	mov	r3, r0
 800c798:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800c79c:	1cbb      	adds	r3, r7, #2
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d917      	bls.n	800c7d4 <VL53L1_init_and_start_range+0x318>
 800c7a4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d113      	bne.n	800c7d4 <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c7ac:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c7b0:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800c7b4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c7b8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800c7bc:	f107 020c 	add.w	r2, r7, #12
 800c7c0:	4413      	add	r3, r2
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	2116      	movs	r1, #22
 800c7c6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800c7ca:	f002 fb50 	bl	800ee6e <VL53L1_i2c_encode_general_config>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800c7d4:	1cbb      	adds	r3, r7, #2
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d917      	bls.n	800c80c <VL53L1_init_and_start_range+0x350>
 800c7dc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d113      	bne.n	800c80c <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c7e4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c7e8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800c7ec:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c7f0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800c7f4:	f107 020c 	add.w	r2, r7, #12
 800c7f8:	4413      	add	r3, r2
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	2117      	movs	r1, #23
 800c7fe:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c802:	f002 fbb8 	bl	800ef76 <VL53L1_i2c_encode_timing_config>
 800c806:	4603      	mov	r3, r0
 800c808:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800c80c:	1cbb      	adds	r3, r7, #2
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d036      	beq.n	800c882 <VL53L1_init_and_start_range+0x3c6>
 800c814:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d132      	bne.n	800c882 <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c81c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c820:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800c824:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800c828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c82c:	791b      	ldrb	r3, [r3, #4]
 800c82e:	f003 0320 	and.w	r3, r3, #32
 800c832:	2b00      	cmp	r3, #0
 800c834:	d017      	beq.n	800c866 <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800c836:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c83a:	789b      	ldrb	r3, [r3, #2]
 800c83c:	f043 0301 	orr.w	r3, r3, #1
 800c840:	b2da      	uxtb	r2, r3
 800c842:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c846:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800c848:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c84c:	789b      	ldrb	r3, [r3, #2]
 800c84e:	f043 0301 	orr.w	r3, r3, #1
 800c852:	b2da      	uxtb	r2, r3
 800c854:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c858:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800c85a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c85e:	789a      	ldrb	r2, [r3, #2]
 800c860:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c864:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c866:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800c86a:	f107 020c 	add.w	r2, r7, #12
 800c86e:	4413      	add	r3, r2
 800c870:	461a      	mov	r2, r3
 800c872:	2112      	movs	r1, #18
 800c874:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800c878:	f002 fbff 	bl	800f07a <VL53L1_i2c_encode_dynamic_config>
 800c87c:	4603      	mov	r3, r0
 800c87e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800c882:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c886:	2b00      	cmp	r3, #0
 800c888:	d113      	bne.n	800c8b2 <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800c88a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c88e:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800c892:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c896:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800c89a:	f107 020c 	add.w	r2, r7, #12
 800c89e:	4413      	add	r3, r2
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	2105      	movs	r1, #5
 800c8a4:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800c8a8:	f002 fc6c 	bl	800f184 <VL53L1_i2c_encode_system_control>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800c8b2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d10c      	bne.n	800c8d4 <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800c8ba:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c8be:	f107 020c 	add.w	r2, r7, #12
 800c8c2:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800c8c6:	1d38      	adds	r0, r7, #4
 800c8c8:	6800      	ldr	r0, [r0, #0]
 800c8ca:	f003 f94b 	bl	800fb64 <VL53L1_WriteMulti>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800c8d4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d106      	bne.n	800c8ea <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800c8dc:	1d3b      	adds	r3, r7, #4
 800c8de:	6818      	ldr	r0, [r3, #0]
 800c8e0:	f001 f98a 	bl	800dbf8 <VL53L1_update_ll_driver_rd_state>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800c8ea:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d106      	bne.n	800c900 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800c8f2:	1d3b      	adds	r3, r7, #4
 800c8f4:	6818      	ldr	r0, [r3, #0]
 800c8f6:	f001 fa52 	bl	800dd9e <VL53L1_update_ll_driver_cfg_state>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800c900:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800c904:	4618      	mov	r0, r3
 800c906:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop

0800c910 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b0c8      	sub	sp, #288	; 0x120
 800c914:	af00      	add	r7, sp, #0
 800c916:	1d3b      	adds	r3, r7, #4
 800c918:	6018      	str	r0, [r3, #0]
 800c91a:	460a      	mov	r2, r1
 800c91c:	1cfb      	adds	r3, r7, #3
 800c91e:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c920:	2300      	movs	r3, #0
 800c922:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c926:	1d3b      	adds	r3, r7, #4
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800c92e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c932:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800c936:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800c93a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c93e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c942:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800c946:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c94a:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800c94e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800c952:	2388      	movs	r3, #136	; 0x88
 800c954:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800c958:	2300      	movs	r3, #0
 800c95a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800c95e:	2300      	movs	r3, #0
 800c960:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800c964:	1cfb      	adds	r3, r7, #3
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d008      	beq.n	800c97e <VL53L1_get_measurement_results+0x6e>
 800c96c:	2b02      	cmp	r3, #2
 800c96e:	d10d      	bne.n	800c98c <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800c970:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c974:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800c978:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800c97c:	e00a      	b.n	800c994 <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800c97e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c982:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800c986:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800c98a:	e003      	b.n	800c994 <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800c98c:	232c      	movs	r3, #44	; 0x2c
 800c98e:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800c992:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c994:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10c      	bne.n	800c9b6 <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800c99c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800c9a0:	f107 0208 	add.w	r2, r7, #8
 800c9a4:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800c9a8:	1d38      	adds	r0, r7, #4
 800c9aa:	6800      	ldr	r0, [r0, #0]
 800c9ac:	f003 f910 	bl	800fbd0 <VL53L1_ReadMulti>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800c9b6:	1cfb      	adds	r3, r7, #3
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d917      	bls.n	800c9ee <VL53L1_get_measurement_results+0xde>
 800c9be:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d113      	bne.n	800c9ee <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c9c6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c9ca:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800c9ce:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c9d2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800c9d6:	f107 0208 	add.w	r2, r7, #8
 800c9da:	4413      	add	r3, r2
 800c9dc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	2038      	movs	r0, #56	; 0x38
 800c9e4:	f002 fd60 	bl	800f4a8 <VL53L1_i2c_decode_debug_results>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800c9ee:	1cfb      	adds	r3, r7, #3
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d017      	beq.n	800ca26 <VL53L1_get_measurement_results+0x116>
 800c9f6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d113      	bne.n	800ca26 <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c9fe:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800ca02:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800ca06:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800ca0a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800ca0e:	f107 0208 	add.w	r2, r7, #8
 800ca12:	4413      	add	r3, r2
 800ca14:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800ca18:	4619      	mov	r1, r3
 800ca1a:	2021      	movs	r0, #33	; 0x21
 800ca1c:	f002 fce3 	bl	800f3e6 <VL53L1_i2c_decode_core_results>
 800ca20:	4603      	mov	r3, r0
 800ca22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800ca26:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d110      	bne.n	800ca50 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800ca34:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800ca38:	f107 0208 	add.w	r2, r7, #8
 800ca3c:	4413      	add	r3, r2
 800ca3e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800ca42:	4619      	mov	r1, r3
 800ca44:	202c      	movs	r0, #44	; 0x2c
 800ca46:	f002 fbd8 	bl	800f1fa <VL53L1_i2c_decode_system_results>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ca50:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b088      	sub	sp, #32
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	460b      	mov	r3, r1
 800ca68:	607a      	str	r2, [r7, #4]
 800ca6a:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800ca7a:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ca80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d106      	bne.n	800ca96 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800ca88:	7afb      	ldrb	r3, [r7, #11]
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f7ff ff3f 	bl	800c910 <VL53L1_get_measurement_results>
 800ca92:	4603      	mov	r3, r0
 800ca94:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800ca96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10c      	bne.n	800cab8 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800caa4:	4618      	mov	r0, r3
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	f000 f85e 	bl	800cb74 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d11f      	bne.n	800cb02 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800cac2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d10e      	bne.n	800cae8 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d109      	bne.n	800cae8 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f001 fe32 	bl	800e73e <VL53L1_low_power_auto_setup_manual_calibration>
 800cada:	4603      	mov	r3, r0
 800cadc:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	2201      	movs	r2, #1
 800cae2:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800cae6:	e00c      	b.n	800cb02 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800cae8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d108      	bne.n	800cb02 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d103      	bne.n	800cb02 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	2202      	movs	r2, #2
 800cafe:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800cb16:	2284      	movs	r2, #132	; 0x84
 800cb18:	6939      	ldr	r1, [r7, #16]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f003 fbd8 	bl	80102d0 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800cb20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d104      	bne.n	800cb32 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f001 f8ed 	bl	800dd08 <VL53L1_check_ll_driver_rd_state>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800cb32:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3720      	adds	r7, #32
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b084      	sub	sp, #16
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
 800cb46:	460b      	mov	r3, r1
 800cb48:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800cb4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d107      	bne.n	800cb66 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800cb56:	78fb      	ldrb	r3, [r7, #3]
 800cb58:	2203      	movs	r2, #3
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7ff fcad 	bl	800c4bc <VL53L1_init_and_start_range>
 800cb62:	4603      	mov	r3, r0
 800cb64:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800cb66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b089      	sub	sp, #36	; 0x24
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
 800cb80:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	78da      	ldrb	r2, [r3, #3]
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	3304      	adds	r3, #4
 800cb9a:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	77fb      	strb	r3, [r7, #31]
 800cba0:	e0d0      	b.n	800cd44 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	7ffa      	ldrb	r2, [r7, #31]
 800cba6:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	78db      	ldrb	r3, [r3, #3]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d10a      	bne.n	800cbcc <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	785b      	ldrb	r3, [r3, #1]
 800cbba:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800cbbe:	2b09      	cmp	r3, #9
 800cbc0:	d104      	bne.n	800cbcc <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	2213      	movs	r2, #19
 800cbc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cbca:	e007      	b.n	800cbdc <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	785b      	ldrb	r3, [r3, #1]
 800cbd0:	f003 031f 	and.w	r3, r3, #31
 800cbd4:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800cbdc:	7ffb      	ldrb	r3, [r7, #31]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d002      	beq.n	800cbe8 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d05d      	beq.n	800cca2 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800cbe6:	e0a7      	b.n	800cd38 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	789b      	ldrb	r3, [r3, #2]
 800cbec:	2b07      	cmp	r3, #7
 800cbee:	d104      	bne.n	800cbfa <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	821a      	strh	r2, [r3, #16]
 800cbf8:	e00c      	b.n	800cc14 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	789b      	ldrb	r3, [r3, #2]
 800cbfe:	2b08      	cmp	r3, #8
 800cc00:	d104      	bne.n	800cc0c <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	821a      	strh	r2, [r3, #16]
 800cc0a:	e003      	b.n	800cc14 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	895b      	ldrh	r3, [r3, #10]
 800cc30:	015b      	lsls	r3, r3, #5
 800cc32:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc3a:	d302      	bcc.n	800cc42 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800cc3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc40:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800cc56:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	fb02 f303 	mul.w	r3, r2, r3
 800cc60:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc68:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	da01      	bge.n	800cc74 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800cc70:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800cc74:	12db      	asrs	r3, r3, #11
 800cc76:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	b21a      	sxth	r2, r3
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	621a      	str	r2, [r3, #32]

			break;
 800cca0:	e04a      	b.n	800cd38 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccb8:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	8bdb      	ldrh	r3, [r3, #30]
 800ccc6:	015b      	lsls	r3, r3, #5
 800ccc8:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccd0:	d302      	bcc.n	800ccd8 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800ccd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ccd6:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	b29a      	uxth	r2, r3
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800ccec:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	fb02 f303 	mul.w	r3, r2, r3
 800ccf6:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccfe:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	da01      	bge.n	800cd0a <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800cd06:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800cd0a:	12db      	asrs	r3, r3, #11
 800cd0c:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	b21a      	sxth	r2, r3
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	621a      	str	r2, [r3, #32]

			break;
 800cd36:	bf00      	nop
		}

		pdata++;
 800cd38:	69bb      	ldr	r3, [r7, #24]
 800cd3a:	3340      	adds	r3, #64	; 0x40
 800cd3c:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800cd3e:	7ffb      	ldrb	r3, [r7, #31]
 800cd40:	3301      	adds	r3, #1
 800cd42:	77fb      	strb	r3, [r7, #31]
 800cd44:	7ffb      	ldrb	r3, [r7, #31]
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	f67f af2b 	bls.w	800cba2 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	785b      	ldrb	r3, [r3, #1]
 800cd56:	f003 031f 	and.w	r3, r3, #31
 800cd5a:	2b11      	cmp	r3, #17
 800cd5c:	bf8c      	ite	hi
 800cd5e:	2201      	movhi	r2, #1
 800cd60:	2200      	movls	r2, #0
 800cd62:	b2d2      	uxtb	r2, r2
 800cd64:	2a00      	cmp	r2, #0
 800cd66:	d116      	bne.n	800cd96 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800cd68:	2201      	movs	r2, #1
 800cd6a:	409a      	lsls	r2, r3
 800cd6c:	4b0d      	ldr	r3, [pc, #52]	; (800cda4 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800cd6e:	4013      	ands	r3, r2
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	bf14      	ite	ne
 800cd74:	2301      	movne	r3, #1
 800cd76:	2300      	moveq	r3, #0
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00b      	beq.n	800cd96 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	785b      	ldrb	r3, [r3, #1]
 800cd82:	f003 031f 	and.w	r3, r3, #31
 800cd86:	b2da      	uxtb	r2, r3
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800cd94:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800cd96:	bf00      	nop
 800cd98:	3724      	adds	r7, #36	; 0x24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	0002200e 	.word	0x0002200e

0800cda8 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b087      	sub	sp, #28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	607a      	str	r2, [r7, #4]
 800cdb4:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800cdbe:	897b      	ldrh	r3, [r7, #10]
 800cdc0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800cdc4:	2b38      	cmp	r3, #56	; 0x38
 800cdc6:	f200 8204 	bhi.w	800d1d2 <VL53L1_get_tuning_parm+0x42a>
 800cdca:	a201      	add	r2, pc, #4	; (adr r2, 800cdd0 <VL53L1_get_tuning_parm+0x28>)
 800cdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd0:	0800ceb5 	.word	0x0800ceb5
 800cdd4:	0800cec3 	.word	0x0800cec3
 800cdd8:	0800ced1 	.word	0x0800ced1
 800cddc:	0800cedf 	.word	0x0800cedf
 800cde0:	0800ceed 	.word	0x0800ceed
 800cde4:	0800cefb 	.word	0x0800cefb
 800cde8:	0800cf09 	.word	0x0800cf09
 800cdec:	0800cf17 	.word	0x0800cf17
 800cdf0:	0800cf25 	.word	0x0800cf25
 800cdf4:	0800cf33 	.word	0x0800cf33
 800cdf8:	0800cf41 	.word	0x0800cf41
 800cdfc:	0800cf4f 	.word	0x0800cf4f
 800ce00:	0800cf5d 	.word	0x0800cf5d
 800ce04:	0800cf6b 	.word	0x0800cf6b
 800ce08:	0800cf79 	.word	0x0800cf79
 800ce0c:	0800cf87 	.word	0x0800cf87
 800ce10:	0800cf95 	.word	0x0800cf95
 800ce14:	0800cfa3 	.word	0x0800cfa3
 800ce18:	0800cfb1 	.word	0x0800cfb1
 800ce1c:	0800cfbf 	.word	0x0800cfbf
 800ce20:	0800cfcd 	.word	0x0800cfcd
 800ce24:	0800cfdb 	.word	0x0800cfdb
 800ce28:	0800cfe9 	.word	0x0800cfe9
 800ce2c:	0800cff7 	.word	0x0800cff7
 800ce30:	0800d005 	.word	0x0800d005
 800ce34:	0800d013 	.word	0x0800d013
 800ce38:	0800d021 	.word	0x0800d021
 800ce3c:	0800d02f 	.word	0x0800d02f
 800ce40:	0800d03d 	.word	0x0800d03d
 800ce44:	0800d04b 	.word	0x0800d04b
 800ce48:	0800d059 	.word	0x0800d059
 800ce4c:	0800d067 	.word	0x0800d067
 800ce50:	0800d075 	.word	0x0800d075
 800ce54:	0800d083 	.word	0x0800d083
 800ce58:	0800d091 	.word	0x0800d091
 800ce5c:	0800d09f 	.word	0x0800d09f
 800ce60:	0800d0ad 	.word	0x0800d0ad
 800ce64:	0800d0bb 	.word	0x0800d0bb
 800ce68:	0800d0c9 	.word	0x0800d0c9
 800ce6c:	0800d0d7 	.word	0x0800d0d7
 800ce70:	0800d0e5 	.word	0x0800d0e5
 800ce74:	0800d0f3 	.word	0x0800d0f3
 800ce78:	0800d101 	.word	0x0800d101
 800ce7c:	0800d10f 	.word	0x0800d10f
 800ce80:	0800d11d 	.word	0x0800d11d
 800ce84:	0800d12b 	.word	0x0800d12b
 800ce88:	0800d139 	.word	0x0800d139
 800ce8c:	0800d147 	.word	0x0800d147
 800ce90:	0800d155 	.word	0x0800d155
 800ce94:	0800d163 	.word	0x0800d163
 800ce98:	0800d171 	.word	0x0800d171
 800ce9c:	0800d17f 	.word	0x0800d17f
 800cea0:	0800d18d 	.word	0x0800d18d
 800cea4:	0800d19b 	.word	0x0800d19b
 800cea8:	0800d1a9 	.word	0x0800d1a9
 800ceac:	0800d1b7 	.word	0x0800d1b7
 800ceb0:	0800d1c5 	.word	0x0800d1c5

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800ceba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	601a      	str	r2, [r3, #0]
	break;
 800cec0:	e18e      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800cec8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	601a      	str	r2, [r3, #0]
	break;
 800cece:	e187      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800ced6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	601a      	str	r2, [r3, #0]
	break;
 800cedc:	e180      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800cee4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	601a      	str	r2, [r3, #0]
	break;
 800ceea:	e179      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cef2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	601a      	str	r2, [r3, #0]
	break;
 800cef8:	e172      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800cf00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	601a      	str	r2, [r3, #0]
	break;
 800cf06:	e16b      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800cf0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	601a      	str	r2, [r3, #0]
	break;
 800cf14:	e164      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800cf1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	601a      	str	r2, [r3, #0]
	break;
 800cf22:	e15d      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800cf2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	601a      	str	r2, [r3, #0]
	break;
 800cf30:	e156      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800cf38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	601a      	str	r2, [r3, #0]
	break;
 800cf3e:	e14f      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800cf46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	601a      	str	r2, [r3, #0]
	break;
 800cf4c:	e148      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800cf54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	601a      	str	r2, [r3, #0]
	break;
 800cf5a:	e141      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800cf62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	601a      	str	r2, [r3, #0]
	break;
 800cf68:	e13a      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800cf70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	601a      	str	r2, [r3, #0]
	break;
 800cf76:	e133      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800cf7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	601a      	str	r2, [r3, #0]
	break;
 800cf84:	e12c      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800cf8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	601a      	str	r2, [r3, #0]
	break;
 800cf92:	e125      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800cf9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	601a      	str	r2, [r3, #0]
	break;
 800cfa0:	e11e      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800cfa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	601a      	str	r2, [r3, #0]
	break;
 800cfae:	e117      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800cfb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	601a      	str	r2, [r3, #0]
	break;
 800cfbc:	e110      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800cfc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	601a      	str	r2, [r3, #0]
	break;
 800cfca:	e109      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cfd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	601a      	str	r2, [r3, #0]
	break;
 800cfd8:	e102      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800cfe0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	601a      	str	r2, [r3, #0]
	break;
 800cfe6:	e0fb      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800cfee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	601a      	str	r2, [r3, #0]
	break;
 800cff4:	e0f4      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800cffc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	601a      	str	r2, [r3, #0]
	break;
 800d002:	e0ed      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800d00a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	601a      	str	r2, [r3, #0]
	break;
 800d010:	e0e6      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800d018:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	601a      	str	r2, [r3, #0]
	break;
 800d01e:	e0df      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800d026:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	601a      	str	r2, [r3, #0]
	break;
 800d02c:	e0d8      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800d034:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	601a      	str	r2, [r3, #0]
	break;
 800d03a:	e0d1      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800d042:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	601a      	str	r2, [r3, #0]
	break;
 800d048:	e0ca      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d050:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	601a      	str	r2, [r3, #0]
	break;
 800d056:	e0c3      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d05e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	601a      	str	r2, [r3, #0]
	break;
 800d064:	e0bc      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800d06c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	601a      	str	r2, [r3, #0]
	break;
 800d072:	e0b5      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d07a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	601a      	str	r2, [r3, #0]
	break;
 800d080:	e0ae      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800d088:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	601a      	str	r2, [r3, #0]
	break;
 800d08e:	e0a7      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800d096:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	601a      	str	r2, [r3, #0]
	break;
 800d09c:	e0a0      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800d0a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	601a      	str	r2, [r3, #0]
	break;
 800d0aa:	e099      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800d0b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	601a      	str	r2, [r3, #0]
	break;
 800d0b8:	e092      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800d0c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	601a      	str	r2, [r3, #0]
	break;
 800d0c6:	e08b      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d0ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	601a      	str	r2, [r3, #0]
	break;
 800d0d4:	e084      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d0dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	601a      	str	r2, [r3, #0]
	break;
 800d0e2:	e07d      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d0ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	601a      	str	r2, [r3, #0]
	break;
 800d0f0:	e076      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800d0f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	601a      	str	r2, [r3, #0]
	break;
 800d0fe:	e06f      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800d106:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	601a      	str	r2, [r3, #0]
	break;
 800d10c:	e068      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800d114:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	601a      	str	r2, [r3, #0]
	break;
 800d11a:	e061      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800d122:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	601a      	str	r2, [r3, #0]
	break;
 800d128:	e05a      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800d130:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	601a      	str	r2, [r3, #0]
	break;
 800d136:	e053      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800d13e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	601a      	str	r2, [r3, #0]
	break;
 800d144:	e04c      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800d14c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	601a      	str	r2, [r3, #0]
	break;
 800d152:	e045      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d15a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	601a      	str	r2, [r3, #0]
	break;
 800d160:	e03e      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d168:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	601a      	str	r2, [r3, #0]
	break;
 800d16e:	e037      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d176:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	601a      	str	r2, [r3, #0]
	break;
 800d17c:	e030      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d184:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	601a      	str	r2, [r3, #0]
	break;
 800d18a:	e029      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d192:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	601a      	str	r2, [r3, #0]
	break;
 800d198:	e022      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d1a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	601a      	str	r2, [r3, #0]
	break;
 800d1a6:	e01b      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800d1ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	601a      	str	r2, [r3, #0]
	break;
 800d1b4:	e014      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	601a      	str	r2, [r3, #0]
	break;
 800d1c2:	e00d      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d1ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	601a      	str	r2, [r3, #0]
	break;
 800d1d0:	e006      	b.n	800d1e0 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d1d8:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800d1da:	23fc      	movs	r3, #252	; 0xfc
 800d1dc:	75fb      	strb	r3, [r7, #23]
	break;
 800d1de:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800d1e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	371c      	adds	r7, #28
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2208      	movs	r2, #8
 800d200:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	220b      	movs	r2, #11
 800d206:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d20e:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d216:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800d21e:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800d226:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d228:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3714      	adds	r7, #20
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d240:	2300      	movs	r3, #0
 800d242:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2200      	movs	r2, #0
 800d248:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2212      	movs	r2, #18
 800d24e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	220f      	movs	r2, #15
 800d254:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2202      	movs	r2, #2
 800d25a:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800d262:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	220c      	movs	r2, #12
 800d268:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3714      	adds	r7, #20
 800d272:	46bd      	mov	sp, r7
 800d274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d278:	4770      	bx	lr

0800d27a <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b084      	sub	sp, #16
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
 800d282:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d284:	2300      	movs	r3, #0
 800d286:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	895b      	ldrh	r3, [r3, #10]
 800d28c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	895b      	ldrh	r3, [r3, #10]
 800d2aa:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	2240      	movs	r2, #64	; 0x40
 800d2ce:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10d      	bne.n	800d2f4 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d108      	bne.n	800d2f4 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d103      	bne.n	800d2f4 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	741a      	strb	r2, [r3, #16]
 800d2f2:	e002      	b.n	800d2fa <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800d2fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d114      	bne.n	800d32c <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800d306:	2b01      	cmp	r3, #1
 800d308:	d110      	bne.n	800d32c <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	6818      	ldr	r0, [r3, #0]
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	7d1b      	ldrb	r3, [r3, #20]
 800d31e:	f000 ffc9 	bl	800e2b4 <VL53L1_calc_range_ignore_threshold>
 800d322:	4603      	mov	r3, r0
 800d324:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	82da      	strh	r2, [r3, #22]
 800d32a:	e002      	b.n	800d332 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	2200      	movs	r2, #0
 800d330:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800d33e:	b480      	push	{r7}
 800d340:	b085      	sub	sp, #20
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d346:	2300      	movs	r3, #0
 800d348:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d350:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d358:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d360:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d368:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2208      	movs	r2, #8
 800d36e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2228      	movs	r2, #40	; 0x28
 800d374:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2209      	movs	r2, #9
 800d37a:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d37c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3714      	adds	r7, #20
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d394:	2300      	movs	r3, #0
 800d396:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f248 0203 	movw	r2, #32771	; 0x8003
 800d39e:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f248 0201 	movw	r2, #32769	; 0x8001
 800d3a6:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f248 0241 	movw	r2, #32833	; 0x8041
 800d3ae:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	220e      	movs	r2, #14
 800d3b4:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	220a      	movs	r2, #10
 800d3ba:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2206      	movs	r2, #6
 800d3c0:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	220e      	movs	r2, #14
 800d3c6:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	220a      	movs	r2, #10
 800d3cc:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2206      	movs	r2, #6
 800d3d2:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2202      	movs	r2, #2
 800d3d8:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2221      	movs	r2, #33	; 0x21
 800d3de:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d3f2:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d3fa:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d402:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	22c0      	movs	r2, #192	; 0xc0
 800d408:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	22c0      	movs	r2, #192	; 0xc0
 800d40e:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	22c0      	movs	r2, #192	; 0xc0
 800d414:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2208      	movs	r2, #8
 800d41a:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2210      	movs	r2, #16
 800d420:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2202      	movs	r2, #2
 800d42e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2201      	movs	r2, #1
 800d436:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2202      	movs	r2, #2
 800d43e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d450:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d458:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f248 0230 	movw	r2, #32816	; 0x8030
 800d460:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d468:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d470:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d478:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f24f 6218 	movw	r2, #63000	; 0xf618
 800d480:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d488:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800d490:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d498:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800d49a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3714      	adds	r7, #20
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr

0800d4aa <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d4aa:	b480      	push	{r7}
 800d4ac:	b087      	sub	sp, #28
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	60f8      	str	r0, [r7, #12]
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	607a      	str	r2, [r7, #4]
 800d4b6:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d4c2:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2211      	movs	r2, #17
 800d504:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2202      	movs	r2, #2
 800d50a:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2200      	movs	r2, #0
 800d510:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2202      	movs	r2, #2
 800d516:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2208      	movs	r2, #8
 800d51c:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52e:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800d534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d536:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2201      	movs	r2, #1
 800d542:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2200      	movs	r2, #0
 800d54e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2200      	movs	r2, #0
 800d554:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	22ff      	movs	r2, #255	; 0xff
 800d55a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800d564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d566:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2200      	movs	r2, #0
 800d570:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2200      	movs	r2, #0
 800d576:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2200      	movs	r2, #0
 800d57c:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	2200      	movs	r2, #0
 800d582:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	2200      	movs	r2, #0
 800d588:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	2220      	movs	r2, #32
 800d58e:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	220b      	movs	r2, #11
 800d594:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800d596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d598:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	2202      	movs	r2, #2
 800d5a2:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	220d      	movs	r2, #13
 800d5a8:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ac:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800d5d0:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	2238      	movs	r2, #56	; 0x38
 800d5dc:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	22ff      	movs	r2, #255	; 0xff
 800d5e2:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	221a      	movs	r2, #26
 800d5f4:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2220      	movs	r2, #32
 800d600:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	22cc      	movs	r2, #204	; 0xcc
 800d60c:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	220b      	movs	r2, #11
 800d612:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	22f5      	movs	r2, #245	; 0xf5
 800d61e:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2209      	movs	r2, #9
 800d624:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800d626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d628:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800d62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d630:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2208      	movs	r2, #8
 800d63a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2278      	movs	r2, #120	; 0x78
 800d640:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	2201      	movs	r2, #1
 800d652:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	2200      	movs	r2, #0
 800d658:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	2200      	movs	r2, #0
 800d65e:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	2200      	movs	r2, #0
 800d664:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800d666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d668:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	220b      	movs	r2, #11
 800d674:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	2209      	movs	r2, #9
 800d67a:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2201      	movs	r2, #1
 800d690:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	22c7      	movs	r2, #199	; 0xc7
 800d6aa:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	22ff      	movs	r2, #255	; 0xff
 800d6b0:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	22db      	movs	r2, #219	; 0xdb
 800d6b6:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	2202      	movs	r2, #2
 800d6bc:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800d6c4:	6a3b      	ldr	r3, [r7, #32]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800d6ca:	6a3b      	ldr	r3, [r7, #32]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	2221      	movs	r2, #33	; 0x21
 800d6d4:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800d6d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	371c      	adds	r7, #28
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b088      	sub	sp, #32
 800d6ea:	af02      	add	r7, sp, #8
 800d6ec:	60f8      	str	r0, [r7, #12]
 800d6ee:	60b9      	str	r1, [r7, #8]
 800d6f0:	607a      	str	r2, [r7, #4]
 800d6f2:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fa:	9301      	str	r3, [sp, #4]
 800d6fc:	6a3b      	ldr	r3, [r7, #32]
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	68b9      	ldr	r1, [r7, #8]
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f7ff fecf 	bl	800d4aa <VL53L1_preset_mode_standard_ranging>
 800d70c:	4603      	mov	r3, r0
 800d70e:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d710:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d121      	bne.n	800d75c <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2207      	movs	r2, #7
 800d71c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2205      	movs	r2, #5
 800d722:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d726:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800d72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72e:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2208      	movs	r2, #8
 800d738:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2238      	movs	r2, #56	; 0x38
 800d73e:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	2207      	movs	r2, #7
 800d744:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	2205      	movs	r2, #5
 800d74a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74e:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d75c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3718      	adds	r7, #24
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b088      	sub	sp, #32
 800d76c:	af02      	add	r7, sp, #8
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
 800d774:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d776:	2300      	movs	r3, #0
 800d778:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77c:	9301      	str	r3, [sp, #4]
 800d77e:	6a3b      	ldr	r3, [r7, #32]
 800d780:	9300      	str	r3, [sp, #0]
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	68b9      	ldr	r1, [r7, #8]
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7ff fe8e 	bl	800d4aa <VL53L1_preset_mode_standard_ranging>
 800d78e:	4603      	mov	r3, r0
 800d790:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d792:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d121      	bne.n	800d7de <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	220f      	movs	r2, #15
 800d79e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	220d      	movs	r2, #13
 800d7a4:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a8:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800d7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b0:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2208      	movs	r2, #8
 800d7ba:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	22b8      	movs	r2, #184	; 0xb8
 800d7c0:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	220f      	movs	r2, #15
 800d7c6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	220d      	movs	r2, #13
 800d7cc:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d0:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800d7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d8:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d7de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3718      	adds	r7, #24
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b088      	sub	sp, #32
 800d7ee:	af02      	add	r7, sp, #8
 800d7f0:	60f8      	str	r0, [r7, #12]
 800d7f2:	60b9      	str	r1, [r7, #8]
 800d7f4:	607a      	str	r2, [r7, #4]
 800d7f6:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fe:	9301      	str	r3, [sp, #4]
 800d800:	6a3b      	ldr	r3, [r7, #32]
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	68b9      	ldr	r1, [r7, #8]
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f7ff fe4d 	bl	800d4aa <VL53L1_preset_mode_standard_ranging>
 800d810:	4603      	mov	r3, r0
 800d812:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d814:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d105      	bne.n	800d828 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	2202      	movs	r2, #2
 800d820:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	223b      	movs	r2, #59	; 0x3b
 800d826:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d828:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3718      	adds	r7, #24
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af02      	add	r7, sp, #8
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
 800d840:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d842:	2300      	movs	r3, #0
 800d844:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	9301      	str	r3, [sp, #4]
 800d84a:	6a3b      	ldr	r3, [r7, #32]
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	68b9      	ldr	r1, [r7, #8]
 800d854:	68f8      	ldr	r0, [r7, #12]
 800d856:	f7ff fe28 	bl	800d4aa <VL53L1_preset_mode_standard_ranging>
 800d85a:	4603      	mov	r3, r0
 800d85c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d85e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d105      	bne.n	800d872 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	2202      	movs	r2, #2
 800d86a:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	225b      	movs	r2, #91	; 0x5b
 800d870:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d872:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3718      	adds	r7, #24
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b088      	sub	sp, #32
 800d882:	af02      	add	r7, sp, #8
 800d884:	60f8      	str	r0, [r7, #12]
 800d886:	60b9      	str	r1, [r7, #8]
 800d888:	607a      	str	r2, [r7, #4]
 800d88a:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d88c:	2300      	movs	r3, #0
 800d88e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800d890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	6a3b      	ldr	r3, [r7, #32]
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	68b9      	ldr	r1, [r7, #8]
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f7ff fe03 	bl	800d4aa <VL53L1_preset_mode_standard_ranging>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d8a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d11a      	bne.n	800d8e6 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	22b1      	movs	r2, #177	; 0xb1
 800d8c0:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	22d4      	movs	r2, #212	; 0xd4
 800d8cc:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d8d4:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d8e0:	6a3b      	ldr	r3, [r7, #32]
 800d8e2:	2240      	movs	r2, #64	; 0x40
 800d8e4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d8e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3718      	adds	r7, #24
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b088      	sub	sp, #32
 800d8f6:	af02      	add	r7, sp, #8
 800d8f8:	60f8      	str	r0, [r7, #12]
 800d8fa:	60b9      	str	r1, [r7, #8]
 800d8fc:	607a      	str	r2, [r7, #4]
 800d8fe:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d900:	2300      	movs	r3, #0
 800d902:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800d904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d906:	9301      	str	r3, [sp, #4]
 800d908:	6a3b      	ldr	r3, [r7, #32]
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	68b9      	ldr	r1, [r7, #8]
 800d912:	68f8      	ldr	r0, [r7, #12]
 800d914:	f7ff fee7 	bl	800d6e6 <VL53L1_preset_mode_standard_ranging_short_range>
 800d918:	4603      	mov	r3, r0
 800d91a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d91c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d11a      	bne.n	800d95a <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	2200      	movs	r2, #0
 800d928:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2201      	movs	r2, #1
 800d92e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2284      	movs	r2, #132	; 0x84
 800d934:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2201      	movs	r2, #1
 800d93a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	22b1      	movs	r2, #177	; 0xb1
 800d940:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d948:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d954:	6a3b      	ldr	r3, [r7, #32]
 800d956:	2240      	movs	r2, #64	; 0x40
 800d958:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d95a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3718      	adds	r7, #24
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b088      	sub	sp, #32
 800d96a:	af02      	add	r7, sp, #8
 800d96c:	60f8      	str	r0, [r7, #12]
 800d96e:	60b9      	str	r1, [r7, #8]
 800d970:	607a      	str	r2, [r7, #4]
 800d972:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d974:	2300      	movs	r3, #0
 800d976:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800d978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97a:	9301      	str	r3, [sp, #4]
 800d97c:	6a3b      	ldr	r3, [r7, #32]
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	68b9      	ldr	r1, [r7, #8]
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f7ff feee 	bl	800d768 <VL53L1_preset_mode_standard_ranging_long_range>
 800d98c:	4603      	mov	r3, r0
 800d98e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d990:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d11a      	bne.n	800d9ce <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	2200      	movs	r2, #0
 800d99c:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2297      	movs	r2, #151	; 0x97
 800d9a8:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	22b1      	movs	r2, #177	; 0xb1
 800d9b4:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d9bc:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d9c8:	6a3b      	ldr	r3, [r7, #32]
 800d9ca:	2240      	movs	r2, #64	; 0x40
 800d9cc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d9ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3718      	adds	r7, #24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b088      	sub	sp, #32
 800d9de:	af02      	add	r7, sp, #8
 800d9e0:	60f8      	str	r0, [r7, #12]
 800d9e2:	60b9      	str	r1, [r7, #8]
 800d9e4:	607a      	str	r2, [r7, #4]
 800d9e6:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800d9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ee:	9301      	str	r3, [sp, #4]
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	68b9      	ldr	r1, [r7, #8]
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f7ff ff3f 	bl	800d87e <VL53L1_preset_mode_timed_ranging>
 800da00:	4603      	mov	r3, r0
 800da02:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800da04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d106      	bne.n	800da1a <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800da0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da0e:	6839      	ldr	r1, [r7, #0]
 800da10:	68b8      	ldr	r0, [r7, #8]
 800da12:	f000 fe7b 	bl	800e70c <VL53L1_config_low_power_auto_mode>
 800da16:	4603      	mov	r3, r0
 800da18:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800da1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3718      	adds	r7, #24
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b088      	sub	sp, #32
 800da2a:	af02      	add	r7, sp, #8
 800da2c:	60f8      	str	r0, [r7, #12]
 800da2e:	60b9      	str	r1, [r7, #8]
 800da30:	607a      	str	r2, [r7, #4]
 800da32:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da34:	2300      	movs	r3, #0
 800da36:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800da38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3a:	9301      	str	r3, [sp, #4]
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	9300      	str	r3, [sp, #0]
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	68b9      	ldr	r1, [r7, #8]
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	f7ff ff53 	bl	800d8f2 <VL53L1_preset_mode_timed_ranging_short_range>
 800da4c:	4603      	mov	r3, r0
 800da4e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800da50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d106      	bne.n	800da66 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800da58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	68b8      	ldr	r0, [r7, #8]
 800da5e:	f000 fe55 	bl	800e70c <VL53L1_config_low_power_auto_mode>
 800da62:	4603      	mov	r3, r0
 800da64:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800da66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3718      	adds	r7, #24
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b088      	sub	sp, #32
 800da76:	af02      	add	r7, sp, #8
 800da78:	60f8      	str	r0, [r7, #12]
 800da7a:	60b9      	str	r1, [r7, #8]
 800da7c:	607a      	str	r2, [r7, #4]
 800da7e:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da80:	2300      	movs	r3, #0
 800da82:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da86:	9301      	str	r3, [sp, #4]
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f7ff ff67 	bl	800d966 <VL53L1_preset_mode_timed_ranging_long_range>
 800da98:	4603      	mov	r3, r0
 800da9a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800da9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d106      	bne.n	800dab2 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800daa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	68b8      	ldr	r0, [r7, #8]
 800daaa:	f000 fe2f 	bl	800e70c <VL53L1_config_low_power_auto_mode>
 800daae:	4603      	mov	r3, r0
 800dab0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800dab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3718      	adds	r7, #24
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b088      	sub	sp, #32
 800dac2:	af02      	add	r7, sp, #8
 800dac4:	60f8      	str	r0, [r7, #12]
 800dac6:	60b9      	str	r1, [r7, #8]
 800dac8:	607a      	str	r2, [r7, #4]
 800daca:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dacc:	2300      	movs	r3, #0
 800dace:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad2:	9301      	str	r3, [sp, #4]
 800dad4:	6a3b      	ldr	r3, [r7, #32]
 800dad6:	9300      	str	r3, [sp, #0]
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	68b9      	ldr	r1, [r7, #8]
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f7ff fce3 	bl	800d4aa <VL53L1_preset_mode_standard_ranging>
 800dae4:	4603      	mov	r3, r0
 800dae6:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800dae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d116      	bne.n	800db1e <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	2200      	movs	r2, #0
 800daf4:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	22b1      	movs	r2, #177	; 0xb1
 800db00:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	22d4      	movs	r2, #212	; 0xd4
 800db0c:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800db0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db10:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800db18:	6a3b      	ldr	r3, [r7, #32]
 800db1a:	2210      	movs	r2, #16
 800db1c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800db1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3718      	adds	r7, #24
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b088      	sub	sp, #32
 800db2e:	af02      	add	r7, sp, #8
 800db30:	60f8      	str	r0, [r7, #12]
 800db32:	60b9      	str	r1, [r7, #8]
 800db34:	607a      	str	r2, [r7, #4]
 800db36:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800db38:	2300      	movs	r3, #0
 800db3a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800db3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3e:	9301      	str	r3, [sp, #4]
 800db40:	6a3b      	ldr	r3, [r7, #32]
 800db42:	9300      	str	r3, [sp, #0]
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	68b9      	ldr	r1, [r7, #8]
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f7ff fcad 	bl	800d4aa <VL53L1_preset_mode_standard_ranging>
 800db50:	4603      	mov	r3, r0
 800db52:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800db54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d102      	bne.n	800db62 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800db5c:	6a3b      	ldr	r3, [r7, #32]
 800db5e:	2201      	movs	r2, #1
 800db60:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800db62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3718      	adds	r7, #24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800db6e:	b480      	push	{r7}
 800db70:	b085      	sub	sp, #20
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2201      	movs	r2, #1
 800db7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2202      	movs	r2, #2
 800db86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	220d      	movs	r2, #13
 800db8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f640 028e 	movw	r2, #2190	; 0x88e
 800db98:	625a      	str	r2, [r3, #36]	; 0x24
}
 800db9a:	bf00      	nop
 800db9c:	3714      	adds	r7, #20
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr

0800dba6 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800dba6:	b480      	push	{r7}
 800dba8:	b085      	sub	sp, #20
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
 800dbae:	460b      	mov	r3, r1
 800dbb0:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	332c      	adds	r3, #44	; 0x2c
 800dbba:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	78fa      	ldrb	r2, [r7, #3]
 800dbc0:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2202      	movs	r2, #2
 800dbcc:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	78fa      	ldrb	r2, [r7, #3]
 800dbd8:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	2202      	movs	r2, #2
 800dbe4:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	71da      	strb	r2, [r3, #7]

}
 800dbec:	bf00      	nop
 800dbee:	3714      	adds	r7, #20
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b087      	sub	sp, #28
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800dc00:	2300      	movs	r3, #0
 800dc02:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	332c      	adds	r3, #44	; 0x2c
 800dc0c:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800dc14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10c      	bne.n	800dc36 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2203      	movs	r2, #3
 800dc20:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2202      	movs	r2, #2
 800dc2c:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2200      	movs	r2, #0
 800dc32:	71da      	strb	r2, [r3, #7]
 800dc34:	e060      	b.n	800dcf8 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	795b      	ldrb	r3, [r3, #5]
 800dc3a:	2bff      	cmp	r3, #255	; 0xff
 800dc3c:	d103      	bne.n	800dc46 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2280      	movs	r2, #128	; 0x80
 800dc42:	715a      	strb	r2, [r3, #5]
 800dc44:	e005      	b.n	800dc52 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	795b      	ldrb	r3, [r3, #5]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	b2da      	uxtb	r2, r3
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	799b      	ldrb	r3, [r3, #6]
 800dc56:	f083 0302 	eor.w	r3, r3, #2
 800dc5a:	b2da      	uxtb	r2, r3
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	791b      	ldrb	r3, [r3, #4]
 800dc64:	3b03      	subs	r3, #3
 800dc66:	2b05      	cmp	r3, #5
 800dc68:	d839      	bhi.n	800dcde <VL53L1_update_ll_driver_rd_state+0xe6>
 800dc6a:	a201      	add	r2, pc, #4	; (adr r2, 800dc70 <VL53L1_update_ll_driver_rd_state+0x78>)
 800dc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc70:	0800dc89 	.word	0x0800dc89
 800dc74:	0800dcdf 	.word	0x0800dcdf
 800dc78:	0800dcdf 	.word	0x0800dcdf
 800dc7c:	0800dcb3 	.word	0x0800dcb3
 800dc80:	0800dcc1 	.word	0x0800dcc1
 800dc84:	0800dcc9 	.word	0x0800dcc9

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800dc8e:	f003 0302 	and.w	r3, r3, #2
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	dd03      	ble.n	800dc9e <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2206      	movs	r2, #6
 800dc9a:	711a      	strb	r2, [r3, #4]
 800dc9c:	e002      	b.n	800dca4 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2208      	movs	r2, #8
 800dca2:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2200      	movs	r2, #0
 800dcae:	71da      	strb	r2, [r3, #7]

		break;
 800dcb0:	e022      	b.n	800dcf8 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2208      	movs	r2, #8
 800dcbc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800dcbe:	e01b      	b.n	800dcf8 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2208      	movs	r2, #8
 800dcc4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800dcc6:	e017      	b.n	800dcf8 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	79db      	ldrb	r3, [r3, #7]
 800dccc:	f083 0301 	eor.w	r3, r3, #1
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2208      	movs	r2, #8
 800dcda:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800dcdc:	e00c      	b.n	800dcf8 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2203      	movs	r2, #3
 800dce2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2200      	movs	r2, #0
 800dce8:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2202      	movs	r2, #2
 800dcee:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	71da      	strb	r2, [r3, #7]

		break;
 800dcf6:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800dcf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	371c      	adds	r7, #28
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b089      	sub	sp, #36	; 0x24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800dd10:	2300      	movs	r3, #0
 800dd12:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	332c      	adds	r3, #44	; 0x2c
 800dd1c:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800dd24:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800dd26:	2300      	movs	r3, #0
 800dd28:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800dd36:	f003 031f 	and.w	r3, r3, #31
 800dd3a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	78db      	ldrb	r3, [r3, #3]
 800dd40:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800dd46:	111b      	asrs	r3, r3, #4
 800dd48:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800dd4a:	f003 0302 	and.w	r3, r3, #2
 800dd4e:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800dd56:	f003 0320 	and.w	r3, r3, #32
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d017      	beq.n	800dd8e <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	791b      	ldrb	r3, [r3, #4]
 800dd62:	2b06      	cmp	r3, #6
 800dd64:	d105      	bne.n	800dd72 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
 800dd68:	2b12      	cmp	r3, #18
 800dd6a:	d010      	beq.n	800dd8e <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800dd6c:	23ef      	movs	r3, #239	; 0xef
 800dd6e:	77fb      	strb	r3, [r7, #31]
 800dd70:	e00d      	b.n	800dd8e <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	795b      	ldrb	r3, [r3, #5]
 800dd76:	7bba      	ldrb	r2, [r7, #14]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d001      	beq.n	800dd80 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800dd7c:	23ee      	movs	r3, #238	; 0xee
 800dd7e:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	799b      	ldrb	r3, [r3, #6]
 800dd84:	7b7a      	ldrb	r2, [r7, #13]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d001      	beq.n	800dd8e <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800dd8a:	23ed      	movs	r3, #237	; 0xed
 800dd8c:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800dd8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3724      	adds	r7, #36	; 0x24
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr

0800dd9e <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800dd9e:	b480      	push	{r7}
 800dda0:	b087      	sub	sp, #28
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800dda6:	2300      	movs	r3, #0
 800dda8:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	332c      	adds	r3, #44	; 0x2c
 800ddb2:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800ddba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d10c      	bne.n	800dddc <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2203      	movs	r2, #3
 800ddc6:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2202      	movs	r2, #2
 800ddd2:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	70da      	strb	r2, [r3, #3]
 800ddda:	e03e      	b.n	800de5a <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	785b      	ldrb	r3, [r3, #1]
 800dde0:	2bff      	cmp	r3, #255	; 0xff
 800dde2:	d103      	bne.n	800ddec <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2280      	movs	r2, #128	; 0x80
 800dde8:	705a      	strb	r2, [r3, #1]
 800ddea:	e005      	b.n	800ddf8 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	785b      	ldrb	r3, [r3, #1]
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	b2da      	uxtb	r2, r3
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	789b      	ldrb	r3, [r3, #2]
 800ddfc:	f083 0302 	eor.w	r3, r3, #2
 800de00:	b2da      	uxtb	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	2b03      	cmp	r3, #3
 800de0c:	d002      	beq.n	800de14 <VL53L1_update_ll_driver_cfg_state+0x76>
 800de0e:	2b04      	cmp	r3, #4
 800de10:	d00e      	beq.n	800de30 <VL53L1_update_ll_driver_cfg_state+0x92>
 800de12:	e015      	b.n	800de40 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	78db      	ldrb	r3, [r3, #3]
 800de18:	f083 0301 	eor.w	r3, r3, #1
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2201      	movs	r2, #1
 800de26:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2204      	movs	r2, #4
 800de2c:	701a      	strb	r2, [r3, #0]
		break;
 800de2e:	e014      	b.n	800de5a <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	78db      	ldrb	r3, [r3, #3]
 800de34:	f083 0301 	eor.w	r3, r3, #1
 800de38:	b2da      	uxtb	r2, r3
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	70da      	strb	r2, [r3, #3]

		break;
 800de3e:	e00c      	b.n	800de5a <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2203      	movs	r2, #3
 800de44:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2200      	movs	r2, #0
 800de4a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2202      	movs	r2, #2
 800de50:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2200      	movs	r2, #0
 800de56:	70da      	strb	r2, [r3, #3]

		break;
 800de58:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800de5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de5e:	4618      	mov	r0, r3
 800de60:	371c      	adds	r7, #28
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr

0800de6a <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800de6a:	b480      	push	{r7}
 800de6c:	b083      	sub	sp, #12
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
 800de72:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	7c1a      	ldrb	r2, [r3, #16]
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	3301      	adds	r3, #1
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	7c52      	ldrb	r2, [r2, #17]
 800de84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	3302      	adds	r3, #2
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	7c92      	ldrb	r2, [r2, #18]
 800de8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	3303      	adds	r3, #3
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	7cd2      	ldrb	r2, [r2, #19]
 800de98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	3304      	adds	r3, #4
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	7d12      	ldrb	r2, [r2, #20]
 800dea2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	3305      	adds	r3, #5
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	7d52      	ldrb	r2, [r2, #21]
 800deac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	3306      	adds	r3, #6
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	7d92      	ldrb	r2, [r2, #22]
 800deb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	3307      	adds	r3, #7
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	7dd2      	ldrb	r2, [r2, #23]
 800dec0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	3308      	adds	r3, #8
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	7e12      	ldrb	r2, [r2, #24]
 800deca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	3309      	adds	r3, #9
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	7e52      	ldrb	r2, [r2, #25]
 800ded4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	330a      	adds	r3, #10
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	7e92      	ldrb	r2, [r2, #26]
 800dede:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	330b      	adds	r3, #11
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	7ed2      	ldrb	r2, [r2, #27]
 800dee8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	330c      	adds	r3, #12
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	7f12      	ldrb	r2, [r2, #28]
 800def2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	330d      	adds	r3, #13
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	7f52      	ldrb	r2, [r2, #29]
 800defc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	330e      	adds	r3, #14
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	7f92      	ldrb	r2, [r2, #30]
 800df06:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	330f      	adds	r3, #15
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	7fd2      	ldrb	r2, [r2, #31]
 800df10:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	3310      	adds	r3, #16
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	f892 2020 	ldrb.w	r2, [r2, #32]
 800df1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	3311      	adds	r3, #17
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800df28:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	3312      	adds	r3, #18
 800df2e:	687a      	ldr	r2, [r7, #4]
 800df30:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800df34:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	3313      	adds	r3, #19
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800df40:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	3314      	adds	r3, #20
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800df4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	3315      	adds	r3, #21
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800df58:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	3316      	adds	r3, #22
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800df64:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	3317      	adds	r3, #23
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800df70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	3318      	adds	r3, #24
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800df7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	3319      	adds	r3, #25
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800df88:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	331a      	adds	r3, #26
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800df94:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	331b      	adds	r3, #27
 800df9a:	687a      	ldr	r2, [r7, #4]
 800df9c:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800dfa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	331c      	adds	r3, #28
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800dfac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	331d      	adds	r3, #29
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800dfb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	331e      	adds	r3, #30
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800dfc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	331f      	adds	r3, #31
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800dfd0:	701a      	strb	r2, [r3, #0]
}
 800dfd2:	bf00      	nop
 800dfd4:	370c      	adds	r7, #12
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr

0800dfde <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dfde:	b480      	push	{r7}
 800dfe0:	b085      	sub	sp, #20
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	603a      	str	r2, [r7, #0]
 800dfe8:	80fb      	strh	r3, [r7, #6]
 800dfea:	460b      	mov	r3, r1
 800dfec:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800dfee:	2300      	movs	r3, #0
 800dff0:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800dff2:	2300      	movs	r3, #0
 800dff4:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800dff6:	88fb      	ldrh	r3, [r7, #6]
 800dff8:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800dffa:	2300      	movs	r3, #0
 800dffc:	81fb      	strh	r3, [r7, #14]
 800dffe:	e00e      	b.n	800e01e <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e000:	88ba      	ldrh	r2, [r7, #4]
 800e002:	89fb      	ldrh	r3, [r7, #14]
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	3b01      	subs	r3, #1
 800e008:	683a      	ldr	r2, [r7, #0]
 800e00a:	4413      	add	r3, r2
 800e00c:	89ba      	ldrh	r2, [r7, #12]
 800e00e:	b2d2      	uxtb	r2, r2
 800e010:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e012:	89bb      	ldrh	r3, [r7, #12]
 800e014:	0a1b      	lsrs	r3, r3, #8
 800e016:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800e018:	89fb      	ldrh	r3, [r7, #14]
 800e01a:	3301      	adds	r3, #1
 800e01c:	81fb      	strh	r3, [r7, #14]
 800e01e:	89fa      	ldrh	r2, [r7, #14]
 800e020:	88bb      	ldrh	r3, [r7, #4]
 800e022:	429a      	cmp	r2, r3
 800e024:	d3ec      	bcc.n	800e000 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800e026:	bf00      	nop
 800e028:	bf00      	nop
 800e02a:	3714      	adds	r7, #20
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
 800e03a:	4603      	mov	r3, r0
 800e03c:	6039      	str	r1, [r7, #0]
 800e03e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800e040:	2300      	movs	r3, #0
 800e042:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800e044:	e00a      	b.n	800e05c <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800e046:	89fb      	ldrh	r3, [r7, #14]
 800e048:	021b      	lsls	r3, r3, #8
 800e04a:	b21a      	sxth	r2, r3
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	1c59      	adds	r1, r3, #1
 800e050:	6039      	str	r1, [r7, #0]
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	b21b      	sxth	r3, r3
 800e056:	4313      	orrs	r3, r2
 800e058:	b21b      	sxth	r3, r3
 800e05a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800e05c:	88fb      	ldrh	r3, [r7, #6]
 800e05e:	1e5a      	subs	r2, r3, #1
 800e060:	80fa      	strh	r2, [r7, #6]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1ef      	bne.n	800e046 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800e066:	89fb      	ldrh	r3, [r7, #14]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	4603      	mov	r3, r0
 800e07c:	603a      	str	r2, [r7, #0]
 800e07e:	80fb      	strh	r3, [r7, #6]
 800e080:	460b      	mov	r3, r1
 800e082:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800e084:	2300      	movs	r3, #0
 800e086:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800e088:	2300      	movs	r3, #0
 800e08a:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800e08c:	88fb      	ldrh	r3, [r7, #6]
 800e08e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800e090:	2300      	movs	r3, #0
 800e092:	81fb      	strh	r3, [r7, #14]
 800e094:	e00f      	b.n	800e0b6 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e096:	88ba      	ldrh	r2, [r7, #4]
 800e098:	89fb      	ldrh	r3, [r7, #14]
 800e09a:	1ad3      	subs	r3, r2, r3
 800e09c:	3b01      	subs	r3, #1
 800e09e:	683a      	ldr	r2, [r7, #0]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	89ba      	ldrh	r2, [r7, #12]
 800e0a4:	b2d2      	uxtb	r2, r2
 800e0a6:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e0a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e0ac:	121b      	asrs	r3, r3, #8
 800e0ae:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800e0b0:	89fb      	ldrh	r3, [r7, #14]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	81fb      	strh	r3, [r7, #14]
 800e0b6:	89fa      	ldrh	r2, [r7, #14]
 800e0b8:	88bb      	ldrh	r3, [r7, #4]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d3eb      	bcc.n	800e096 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800e0be:	bf00      	nop
 800e0c0:	bf00      	nop
 800e0c2:	3714      	adds	r7, #20
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	6039      	str	r1, [r7, #0]
 800e0d6:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	b25b      	sxtb	r3, r3
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	da0e      	bge.n	800e104 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800e0e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e0ea:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800e0ec:	e00a      	b.n	800e104 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800e0ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e0f2:	021b      	lsls	r3, r3, #8
 800e0f4:	b21a      	sxth	r2, r3
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	1c59      	adds	r1, r3, #1
 800e0fa:	6039      	str	r1, [r7, #0]
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	b21b      	sxth	r3, r3
 800e100:	4313      	orrs	r3, r2
 800e102:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800e104:	88fb      	ldrh	r3, [r7, #6]
 800e106:	1e5a      	subs	r2, r3, #1
 800e108:	80fa      	strh	r2, [r7, #6]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d1ef      	bne.n	800e0ee <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800e10e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e112:	4618      	mov	r0, r3
 800e114:	3714      	adds	r7, #20
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr

0800e11e <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e11e:	b480      	push	{r7}
 800e120:	b087      	sub	sp, #28
 800e122:	af00      	add	r7, sp, #0
 800e124:	60f8      	str	r0, [r7, #12]
 800e126:	460b      	mov	r3, r1
 800e128:	607a      	str	r2, [r7, #4]
 800e12a:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800e130:	2300      	movs	r3, #0
 800e132:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800e138:	2300      	movs	r3, #0
 800e13a:	82fb      	strh	r3, [r7, #22]
 800e13c:	e00e      	b.n	800e15c <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e13e:	897a      	ldrh	r2, [r7, #10]
 800e140:	8afb      	ldrh	r3, [r7, #22]
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	3b01      	subs	r3, #1
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	4413      	add	r3, r2
 800e14a:	693a      	ldr	r2, [r7, #16]
 800e14c:	b2d2      	uxtb	r2, r2
 800e14e:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	0a1b      	lsrs	r3, r3, #8
 800e154:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800e156:	8afb      	ldrh	r3, [r7, #22]
 800e158:	3301      	adds	r3, #1
 800e15a:	82fb      	strh	r3, [r7, #22]
 800e15c:	8afa      	ldrh	r2, [r7, #22]
 800e15e:	897b      	ldrh	r3, [r7, #10]
 800e160:	429a      	cmp	r2, r3
 800e162:	d3ec      	bcc.n	800e13e <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800e164:	bf00      	nop
 800e166:	bf00      	nop
 800e168:	371c      	adds	r7, #28
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e172:	b480      	push	{r7}
 800e174:	b085      	sub	sp, #20
 800e176:	af00      	add	r7, sp, #0
 800e178:	4603      	mov	r3, r0
 800e17a:	6039      	str	r1, [r7, #0]
 800e17c:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800e17e:	2300      	movs	r3, #0
 800e180:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800e182:	e007      	b.n	800e194 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	021a      	lsls	r2, r3, #8
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	1c59      	adds	r1, r3, #1
 800e18c:	6039      	str	r1, [r7, #0]
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	4313      	orrs	r3, r2
 800e192:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800e194:	88fb      	ldrh	r3, [r7, #6]
 800e196:	1e5a      	subs	r2, r3, #1
 800e198:	80fa      	strh	r2, [r7, #6]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d1f2      	bne.n	800e184 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800e19e:	68fb      	ldr	r3, [r7, #12]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3714      	adds	r7, #20
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	6039      	str	r1, [r7, #0]
 800e1b6:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	b25b      	sxtb	r3, r3
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	da0b      	bge.n	800e1de <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800e1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ca:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800e1cc:	e007      	b.n	800e1de <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	021a      	lsls	r2, r3, #8
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	1c59      	adds	r1, r3, #1
 800e1d6:	6039      	str	r1, [r7, #0]
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800e1de:	88fb      	ldrh	r3, [r7, #6]
 800e1e0:	1e5a      	subs	r2, r3, #1
 800e1e2:	80fa      	strh	r2, [r7, #6]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d1f2      	bne.n	800e1ce <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3714      	adds	r7, #20
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr

0800e1f6 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b084      	sub	sp, #16
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
 800e1fe:	460b      	mov	r3, r1
 800e200:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800e202:	2300      	movs	r3, #0
 800e204:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	78fa      	ldrb	r2, [r7, #3]
 800e20e:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800e218:	461a      	mov	r2, r3
 800e21a:	2183      	movs	r1, #131	; 0x83
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f001 fd0d 	bl	800fc3c <VL53L1_WrByte>
 800e222:	4603      	mov	r3, r0
 800e224:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800e226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b084      	sub	sp, #16
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800e23a:	2300      	movs	r3, #0
 800e23c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800e23e:	2101      	movs	r1, #1
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7ff ffd8 	bl	800e1f6 <VL53L1_set_powerforce_register>
 800e246:	4603      	mov	r3, r0
 800e248:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800e24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3710      	adds	r7, #16
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b086      	sub	sp, #24
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	4603      	mov	r3, r0
 800e25e:	460a      	mov	r2, r1
 800e260:	80fb      	strh	r3, [r7, #6]
 800e262:	4613      	mov	r3, r2
 800e264:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800e266:	2300      	movs	r3, #0
 800e268:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800e26a:	2300      	movs	r3, #0
 800e26c:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800e26e:	2300      	movs	r3, #0
 800e270:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800e272:	88fb      	ldrh	r3, [r7, #6]
 800e274:	4618      	mov	r0, r3
 800e276:	f000 faa7 	bl	800e7c8 <VL53L1_calc_pll_period_us>
 800e27a:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800e27c:	797b      	ldrb	r3, [r7, #5]
 800e27e:	4618      	mov	r0, r3
 800e280:	f000 fab6 	bl	800e7f0 <VL53L1_decode_vcsel_period>
 800e284:	4603      	mov	r3, r0
 800e286:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800e288:	697a      	ldr	r2, [r7, #20]
 800e28a:	4613      	mov	r3, r2
 800e28c:	00db      	lsls	r3, r3, #3
 800e28e:	4413      	add	r3, r2
 800e290:	021b      	lsls	r3, r3, #8
 800e292:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	099b      	lsrs	r3, r3, #6
 800e298:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800e29a:	7cfa      	ldrb	r2, [r7, #19]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	fb02 f303 	mul.w	r3, r2, r3
 800e2a2:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	099b      	lsrs	r3, r3, #6
 800e2a8:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3718      	adds	r7, #24
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b089      	sub	sp, #36	; 0x24
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	4608      	mov	r0, r1
 800e2be:	4611      	mov	r1, r2
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	817b      	strh	r3, [r7, #10]
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	813b      	strh	r3, [r7, #8]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	011b      	lsls	r3, r3, #4
 800e2e6:	4a23      	ldr	r2, [pc, #140]	; (800e374 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800e2e8:	fb82 1203 	smull	r1, r2, r2, r3
 800e2ec:	1192      	asrs	r2, r2, #6
 800e2ee:	17db      	asrs	r3, r3, #31
 800e2f0:	1ad3      	subs	r3, r2, r3
 800e2f2:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800e2f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	da03      	bge.n	800e304 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800e2fc:	897b      	ldrh	r3, [r7, #10]
 800e2fe:	425b      	negs	r3, r3
 800e300:	b29b      	uxth	r3, r3
 800e302:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800e304:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	da03      	bge.n	800e314 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800e30c:	893b      	ldrh	r3, [r7, #8]
 800e30e:	425b      	negs	r3, r3
 800e310:	b29b      	uxth	r3, r3
 800e312:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800e314:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e318:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e31c:	4413      	add	r3, r2
 800e31e:	015b      	lsls	r3, r3, #5
 800e320:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	4a13      	ldr	r2, [pc, #76]	; (800e374 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800e326:	fb82 1203 	smull	r1, r2, r2, r3
 800e32a:	1192      	asrs	r2, r2, #6
 800e32c:	17db      	asrs	r3, r3, #31
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800e332:	697a      	ldr	r2, [r7, #20]
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	4413      	add	r3, r2
 800e338:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800e33a:	79fa      	ldrb	r2, [r7, #7]
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	fb02 f303 	mul.w	r3, r2, r3
 800e342:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	3310      	adds	r3, #16
 800e348:	2b00      	cmp	r3, #0
 800e34a:	da00      	bge.n	800e34e <VL53L1_calc_range_ignore_threshold+0x9a>
 800e34c:	331f      	adds	r3, #31
 800e34e:	115b      	asrs	r3, r3, #5
 800e350:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e358:	db03      	blt.n	800e362 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800e35a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e35e:	83fb      	strh	r3, [r7, #30]
 800e360:	e001      	b.n	800e366 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800e366:	8bfb      	ldrh	r3, [r7, #30]
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3724      	adds	r7, #36	; 0x24
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr
 800e374:	10624dd3 	.word	0x10624dd3

0800e378 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e378:	b480      	push	{r7}
 800e37a:	b085      	sub	sp, #20
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e382:	2300      	movs	r3, #0
 800e384:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	031a      	lsls	r2, r3, #12
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	085b      	lsrs	r3, r3, #1
 800e38e:	441a      	add	r2, r3
	timeout_mclks   =
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	fbb2 f3f3 	udiv	r3, r2, r3
 800e396:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800e398:	68fb      	ldr	r3, [r7, #12]
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr

0800e3a6 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b084      	sub	sp, #16
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
 800e3ae:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800e3b8:	6839      	ldr	r1, [r7, #0]
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f7ff ffdc 	bl	800e378 <VL53L1_calc_timeout_mclks>
 800e3c0:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f000 f85e 	bl	800e484 <VL53L1_encode_timeout>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800e3cc:	897b      	ldrh	r3, [r7, #10]
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3710      	adds	r7, #16
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800e3d6:	b4f0      	push	{r4, r5, r6, r7}
 800e3d8:	b086      	sub	sp, #24
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	6078      	str	r0, [r7, #4]
 800e3de:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 800e3e4:	f04f 0200 	mov.w	r2, #0
 800e3e8:	f04f 0300 	mov.w	r3, #0
 800e3ec:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f04f 0100 	mov.w	r1, #0
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	f04f 0300 	mov.w	r3, #0
 800e400:	fb02 fc01 	mul.w	ip, r2, r1
 800e404:	fb00 f603 	mul.w	r6, r0, r3
 800e408:	4466      	add	r6, ip
 800e40a:	fba0 2302 	umull	r2, r3, r0, r2
 800e40e:	18f1      	adds	r1, r6, r3
 800e410:	460b      	mov	r3, r1
 800e412:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800e416:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800e41a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e41e:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800e422:	f143 0500 	adc.w	r5, r3, #0
 800e426:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800e42a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e42e:	f04f 0200 	mov.w	r2, #0
 800e432:	f04f 0300 	mov.w	r3, #0
 800e436:	0b02      	lsrs	r2, r0, #12
 800e438:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e43c:	0b0b      	lsrs	r3, r1, #12
 800e43e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e446:	697b      	ldr	r3, [r7, #20]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3718      	adds	r7, #24
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bcf0      	pop	{r4, r5, r6, r7}
 800e450:	4770      	bx	lr

0800e452 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	af00      	add	r7, sp, #0
 800e458:	4603      	mov	r3, r0
 800e45a:	6039      	str	r1, [r7, #0]
 800e45c:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800e466:	88fb      	ldrh	r3, [r7, #6]
 800e468:	4618      	mov	r0, r3
 800e46a:	f000 f837 	bl	800e4dc <VL53L1_decode_timeout>
 800e46e:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800e470:	6839      	ldr	r1, [r7, #0]
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f7ff ffaf 	bl	800e3d6 <VL53L1_calc_timeout_us>
 800e478:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e47a:	68bb      	ldr	r3, [r7, #8]
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3710      	adds	r7, #16
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800e484:	b480      	push	{r7}
 800e486:	b087      	sub	sp, #28
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e48c:	2300      	movs	r3, #0
 800e48e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e490:	2300      	movs	r3, #0
 800e492:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e494:	2300      	movs	r3, #0
 800e496:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d017      	beq.n	800e4ce <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	3b01      	subs	r3, #1
 800e4a2:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e4a4:	e005      	b.n	800e4b2 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	085b      	lsrs	r3, r3, #1
 800e4aa:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e4ac:	89fb      	ldrh	r3, [r7, #14]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1f4      	bne.n	800e4a6 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e4bc:	89fb      	ldrh	r3, [r7, #14]
 800e4be:	021b      	lsls	r3, r3, #8
 800e4c0:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e4ca:	4413      	add	r3, r2
 800e4cc:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e4ce:	8afb      	ldrh	r3, [r7, #22]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	371c      	adds	r7, #28
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e4ea:	88fb      	ldrh	r3, [r7, #6]
 800e4ec:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e4ee:	88fa      	ldrh	r2, [r7, #6]
 800e4f0:	0a12      	lsrs	r2, r2, #8
 800e4f2:	b292      	uxth	r2, r2
 800e4f4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3714      	adds	r7, #20
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b088      	sub	sp, #32
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	607a      	str	r2, [r7, #4]
 800e514:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e516:	2300      	movs	r3, #0
 800e518:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800e51e:	2300      	movs	r3, #0
 800e520:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800e522:	2300      	movs	r3, #0
 800e524:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800e526:	887b      	ldrh	r3, [r7, #2]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d102      	bne.n	800e532 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800e52c:	23f1      	movs	r3, #241	; 0xf1
 800e52e:	77fb      	strb	r3, [r7, #31]
 800e530:	e05d      	b.n	800e5ee <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e534:	799a      	ldrb	r2, [r3, #6]
 800e536:	887b      	ldrh	r3, [r7, #2]
 800e538:	4611      	mov	r1, r2
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7ff fe8b 	bl	800e256 <VL53L1_calc_macro_period_us>
 800e540:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800e542:	6979      	ldr	r1, [r7, #20]
 800e544:	68f8      	ldr	r0, [r7, #12]
 800e546:	f7ff ff17 	bl	800e378 <VL53L1_calc_timeout_mclks>
 800e54a:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	2bff      	cmp	r3, #255	; 0xff
 800e550:	d901      	bls.n	800e556 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800e552:	23ff      	movs	r3, #255	; 0xff
 800e554:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800e55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55c:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e55e:	6979      	ldr	r1, [r7, #20]
 800e560:	68b8      	ldr	r0, [r7, #8]
 800e562:	f7ff ff20 	bl	800e3a6 <VL53L1_calc_encoded_timeout>
 800e566:	4603      	mov	r3, r0
 800e568:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e56a:	8a7b      	ldrh	r3, [r7, #18]
 800e56c:	0a1b      	lsrs	r3, r3, #8
 800e56e:	b29b      	uxth	r3, r3
 800e570:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800e572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e574:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e576:	8a7b      	ldrh	r3, [r7, #18]
 800e578:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800e57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57c:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e57e:	6979      	ldr	r1, [r7, #20]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7ff ff10 	bl	800e3a6 <VL53L1_calc_encoded_timeout>
 800e586:	4603      	mov	r3, r0
 800e588:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e58a:	8a7b      	ldrh	r3, [r7, #18]
 800e58c:	0a1b      	lsrs	r3, r3, #8
 800e58e:	b29b      	uxth	r3, r3
 800e590:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800e592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e594:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e596:	8a7b      	ldrh	r3, [r7, #18]
 800e598:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800e59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59c:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a0:	7a5a      	ldrb	r2, [r3, #9]
 800e5a2:	887b      	ldrh	r3, [r7, #2]
 800e5a4:	4611      	mov	r1, r2
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7ff fe55 	bl	800e256 <VL53L1_calc_macro_period_us>
 800e5ac:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800e5ae:	6979      	ldr	r1, [r7, #20]
 800e5b0:	68b8      	ldr	r0, [r7, #8]
 800e5b2:	f7ff fef8 	bl	800e3a6 <VL53L1_calc_encoded_timeout>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e5ba:	8a7b      	ldrh	r3, [r7, #18]
 800e5bc:	0a1b      	lsrs	r3, r3, #8
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800e5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c4:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e5c6:	8a7b      	ldrh	r3, [r7, #18]
 800e5c8:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800e5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5cc:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800e5ce:	6979      	ldr	r1, [r7, #20]
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f7ff fee8 	bl	800e3a6 <VL53L1_calc_encoded_timeout>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e5da:	8a7b      	ldrh	r3, [r7, #18]
 800e5dc:	0a1b      	lsrs	r3, r3, #8
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800e5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e5e6:	8a7b      	ldrh	r3, [r7, #18]
 800e5e8:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800e5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ec:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800e5ee:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3720      	adds	r7, #32
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800e5fa:	b480      	push	{r7}
 800e5fc:	b083      	sub	sp, #12
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	4603      	mov	r3, r0
 800e602:	603a      	str	r2, [r7, #0]
 800e604:	71fb      	strb	r3, [r7, #7]
 800e606:	460b      	mov	r3, r1
 800e608:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800e60a:	79fb      	ldrb	r3, [r7, #7]
 800e60c:	2b07      	cmp	r3, #7
 800e60e:	d90a      	bls.n	800e626 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800e610:	79bb      	ldrb	r3, [r7, #6]
 800e612:	00db      	lsls	r3, r3, #3
 800e614:	b2da      	uxtb	r2, r3
 800e616:	79fb      	ldrb	r3, [r7, #7]
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	3b71      	subs	r3, #113	; 0x71
 800e61e:	b2da      	uxtb	r2, r3
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800e624:	e00a      	b.n	800e63c <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800e626:	79bb      	ldrb	r3, [r7, #6]
 800e628:	f1c3 030f 	rsb	r3, r3, #15
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	00db      	lsls	r3, r3, #3
 800e630:	b2da      	uxtb	r2, r3
 800e632:	79fb      	ldrb	r3, [r7, #7]
 800e634:	4413      	add	r3, r2
 800e636:	b2da      	uxtb	r2, r3
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	701a      	strb	r2, [r3, #0]
}
 800e63c:	bf00      	nop
 800e63e:	370c      	adds	r7, #12
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800e648:	b480      	push	{r7}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	4603      	mov	r3, r0
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	607a      	str	r2, [r7, #4]
 800e654:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800e656:	7bfb      	ldrb	r3, [r7, #15]
 800e658:	091b      	lsrs	r3, r3, #4
 800e65a:	b2da      	uxtb	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800e660:	7bfb      	ldrb	r3, [r7, #15]
 800e662:	f003 030f 	and.w	r3, r3, #15
 800e666:	b2da      	uxtb	r2, r3
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	701a      	strb	r2, [r3, #0]

}
 800e66c:	bf00      	nop
 800e66e:	3714      	adds	r7, #20
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	4603      	mov	r3, r0
 800e680:	603a      	str	r2, [r7, #0]
 800e682:	71fb      	strb	r3, [r7, #7]
 800e684:	460b      	mov	r3, r1
 800e686:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800e688:	79bb      	ldrb	r3, [r7, #6]
 800e68a:	011b      	lsls	r3, r3, #4
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	79fb      	ldrb	r3, [r7, #7]
 800e690:	4413      	add	r3, r2
 800e692:	b2da      	uxtb	r2, r3
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	701a      	strb	r2, [r3, #0]

}
 800e698:	bf00      	nop
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr

0800e6a4 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b085      	sub	sp, #20
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	2203      	movs	r2, #3
 800e6b8:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800e6fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e700:	4618      	mov	r0, r3
 800e702:	3714      	adds	r7, #20
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b087      	sub	sp, #28
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e718:	2300      	movs	r3, #0
 800e71a:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2201      	movs	r2, #1
 800e720:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2200      	movs	r2, #0
 800e726:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	229b      	movs	r2, #155	; 0x9b
 800e72c:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e72e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e732:	4618      	mov	r0, r3
 800e734:	371c      	adds	r7, #28
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr

0800e73e <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e73e:	b480      	push	{r7}
 800e740:	b085      	sub	sp, #20
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e74a:	2300      	movs	r3, #0
 800e74c:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800e76c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e770:	b2da      	uxtb	r2, r3
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e77e:	f003 0303 	and.w	r3, r3, #3
 800e782:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800e78a:	009b      	lsls	r3, r3, #2
 800e78c:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e78e:	4413      	add	r3, r2
 800e790:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2201      	movs	r2, #1
 800e79c:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800e7b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3714      	adds	r7, #20
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr

0800e7c8 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b085      	sub	sp, #20
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e7d6:	88fb      	ldrh	r3, [r7, #6]
 800e7d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e7dc:	fb92 f3f3 	sdiv	r3, r2, r3
 800e7e0:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3714      	adds	r7, #20
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800e7fe:	79fb      	ldrb	r3, [r7, #7]
 800e800:	3301      	adds	r3, #1
 800e802:	b2db      	uxtb	r3, r3
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800e808:	7bfb      	ldrb	r3, [r7, #15]
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3714      	adds	r7, #20
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr

0800e816 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800e816:	b480      	push	{r7}
 800e818:	b085      	sub	sp, #20
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	4603      	mov	r3, r0
 800e81e:	60b9      	str	r1, [r7, #8]
 800e820:	607a      	str	r2, [r7, #4]
 800e822:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800e824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	da10      	bge.n	800e84e <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800e82c:	7bfb      	ldrb	r3, [r7, #15]
 800e82e:	43db      	mvns	r3, r3
 800e830:	b2db      	uxtb	r3, r3
 800e832:	f003 0307 	and.w	r3, r3, #7
 800e836:	b2db      	uxtb	r3, r3
 800e838:	3308      	adds	r3, #8
 800e83a:	b2da      	uxtb	r2, r3
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800e840:	7bfb      	ldrb	r3, [r7, #15]
 800e842:	3b80      	subs	r3, #128	; 0x80
 800e844:	10db      	asrs	r3, r3, #3
 800e846:	b2da      	uxtb	r2, r3
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800e84c:	e00c      	b.n	800e868 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800e84e:	7bfb      	ldrb	r3, [r7, #15]
 800e850:	f003 0307 	and.w	r3, r3, #7
 800e854:	b2da      	uxtb	r2, r3
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800e85a:	7bfb      	ldrb	r3, [r7, #15]
 800e85c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800e860:	10db      	asrs	r3, r3, #3
 800e862:	b2da      	uxtb	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	701a      	strb	r2, [r3, #0]
}
 800e868:	bf00      	nop
 800e86a:	3714      	adds	r7, #20
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b086      	sub	sp, #24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	460b      	mov	r3, r1
 800e87e:	607a      	str	r2, [r7, #4]
 800e880:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e882:	2300      	movs	r3, #0
 800e884:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e886:	897b      	ldrh	r3, [r7, #10]
 800e888:	2b0a      	cmp	r3, #10
 800e88a:	d802      	bhi.n	800e892 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e88c:	f06f 0309 	mvn.w	r3, #9
 800e890:	e047      	b.n	800e922 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e89a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e8a8:	f002 020f 	and.w	r2, r2, #15
 800e8ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800e8ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e8b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e8bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e8be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e8c8:	f002 0203 	and.w	r2, r2, #3
 800e8cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e8ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e8d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e8dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e8de:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	88d8      	ldrh	r0, [r3, #6]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	3305      	adds	r3, #5
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	2102      	movs	r1, #2
 800e8ec:	f7ff fb77 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800e8f4:	68fa      	ldr	r2, [r7, #12]
 800e8f6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e8f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e902:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800e90c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e910:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e912:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800e91c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e91e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e922:	4618      	mov	r0, r3
 800e924:	3718      	adds	r7, #24
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b086      	sub	sp, #24
 800e92e:	af00      	add	r7, sp, #0
 800e930:	4603      	mov	r3, r0
 800e932:	60b9      	str	r1, [r7, #8]
 800e934:	607a      	str	r2, [r7, #4]
 800e936:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e938:	2300      	movs	r3, #0
 800e93a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e93c:	89fb      	ldrh	r3, [r7, #14]
 800e93e:	2b0a      	cmp	r3, #10
 800e940:	d802      	bhi.n	800e948 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e942:	f06f 0309 	mvn.w	r3, #9
 800e946:	e046      	b.n	800e9d6 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e950:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	3301      	adds	r3, #1
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	f003 030f 	and.w	r3, r3, #15
 800e960:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	3302      	adds	r3, #2
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e970:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	3303      	adds	r3, #3
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	f003 0303 	and.w	r3, r3, #3
 800e980:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	3304      	adds	r3, #4
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e990:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	3305      	adds	r3, #5
 800e99a:	4619      	mov	r1, r3
 800e99c:	2002      	movs	r0, #2
 800e99e:	f7ff fb49 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	79da      	ldrb	r2, [r3, #7]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	7a1a      	ldrb	r2, [r3, #8]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	3309      	adds	r3, #9
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e9c4:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	7a9a      	ldrb	r2, [r3, #10]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800e9d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3718      	adds	r7, #24
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b086      	sub	sp, #24
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
 800e9e6:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e9ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d108      	bne.n	800ea06 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e9f4:	f107 020c 	add.w	r2, r7, #12
 800e9f8:	230b      	movs	r3, #11
 800e9fa:	2101      	movs	r1, #1
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f001 f8e7 	bl	800fbd0 <VL53L1_ReadMulti>
 800ea02:	4603      	mov	r3, r0
 800ea04:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800ea06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d108      	bne.n	800ea20 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800ea0e:	f107 030c 	add.w	r3, r7, #12
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	4619      	mov	r1, r3
 800ea16:	200b      	movs	r0, #11
 800ea18:	f7ff ff87 	bl	800e92a <VL53L1_i2c_decode_static_nvm_managed>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ea20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3718      	adds	r7, #24
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b086      	sub	sp, #24
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	460b      	mov	r3, r1
 800ea36:	607a      	str	r2, [r7, #4]
 800ea38:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800ea3e:	897b      	ldrh	r3, [r7, #10]
 800ea40:	2b16      	cmp	r3, #22
 800ea42:	d802      	bhi.n	800ea4a <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ea44:	f06f 0309 	mvn.w	r3, #9
 800ea48:	e076      	b.n	800eb38 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800ea56:	68fa      	ldr	r2, [r7, #12]
 800ea58:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ea5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800ea64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800ea6a:	68fa      	ldr	r2, [r7, #12]
 800ea6c:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ea6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800ea74:	68fa      	ldr	r2, [r7, #12]
 800ea76:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800ea78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800ea82:	f002 020f 	and.w	r2, r2, #15
 800ea86:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ea88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800ea8e:	68fa      	ldr	r2, [r7, #12]
 800ea90:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800ea92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ea9c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800eaa0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800eaa2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800eaac:	f002 0203 	and.w	r2, r2, #3
 800eab0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800eab2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	8958      	ldrh	r0, [r3, #10]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	3309      	adds	r3, #9
 800eabc:	461a      	mov	r2, r3
 800eabe:	2102      	movs	r1, #2
 800eac0:	f7ff fa8d 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	330b      	adds	r3, #11
 800eace:	461a      	mov	r2, r3
 800ead0:	2102      	movs	r1, #2
 800ead2:	f7ff facf 	bl	800e074 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	330d      	adds	r3, #13
 800eae0:	461a      	mov	r2, r3
 800eae2:	2102      	movs	r1, #2
 800eae4:	f7ff fac6 	bl	800e074 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	8a18      	ldrh	r0, [r3, #16]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	330f      	adds	r3, #15
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	2102      	movs	r1, #2
 800eaf4:	f7ff fa73 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800eafe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb02:	b218      	sxth	r0, r3
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	3311      	adds	r3, #17
 800eb08:	461a      	mov	r2, r3
 800eb0a:	2102      	movs	r1, #2
 800eb0c:	f7ff fab2 	bl	800e074 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	3313      	adds	r3, #19
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	2102      	movs	r1, #2
 800eb1e:	f7ff faa9 	bl	800e074 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	3315      	adds	r3, #21
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	2102      	movs	r1, #2
 800eb30:	f7ff faa0 	bl	800e074 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800eb34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3718      	adds	r7, #24
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b086      	sub	sp, #24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	4603      	mov	r3, r0
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
 800eb4c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800eb52:	89fb      	ldrh	r3, [r7, #14]
 800eb54:	2b16      	cmp	r3, #22
 800eb56:	d802      	bhi.n	800eb5e <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800eb58:	f06f 0309 	mvn.w	r3, #9
 800eb5c:	e079      	b.n	800ec52 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	785a      	ldrb	r2, [r3, #1]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	789a      	ldrb	r2, [r3, #2]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	78da      	ldrb	r2, [r3, #3]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	791a      	ldrb	r2, [r3, #4]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	3305      	adds	r3, #5
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	f003 030f 	and.w	r3, r3, #15
 800eb90:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	799a      	ldrb	r2, [r3, #6]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	3307      	adds	r3, #7
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eba8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	3308      	adds	r3, #8
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	f003 0303 	and.w	r3, r3, #3
 800ebb8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	3309      	adds	r3, #9
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	2002      	movs	r0, #2
 800ebc6:	f7ff fa35 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	330b      	adds	r3, #11
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	2002      	movs	r0, #2
 800ebda:	f7ff fa77 	bl	800e0cc <VL53L1_i2c_decode_int16_t>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	330d      	adds	r3, #13
 800ebea:	4619      	mov	r1, r3
 800ebec:	2002      	movs	r0, #2
 800ebee:	f7ff fa6d 	bl	800e0cc <VL53L1_i2c_decode_int16_t>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	330f      	adds	r3, #15
 800ebfe:	4619      	mov	r1, r3
 800ec00:	2002      	movs	r0, #2
 800ec02:	f7ff fa17 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800ec06:	4603      	mov	r3, r0
 800ec08:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	3311      	adds	r3, #17
 800ec12:	4619      	mov	r1, r3
 800ec14:	2002      	movs	r0, #2
 800ec16:	f7ff fa59 	bl	800e0cc <VL53L1_i2c_decode_int16_t>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec20:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	3313      	adds	r3, #19
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	2002      	movs	r0, #2
 800ec2e:	f7ff fa4d 	bl	800e0cc <VL53L1_i2c_decode_int16_t>
 800ec32:	4603      	mov	r3, r0
 800ec34:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	3315      	adds	r3, #21
 800ec3e:	4619      	mov	r1, r3
 800ec40:	2002      	movs	r0, #2
 800ec42:	f7ff fa43 	bl	800e0cc <VL53L1_i2c_decode_int16_t>
 800ec46:	4603      	mov	r3, r0
 800ec48:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800ec4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3718      	adds	r7, #24
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b088      	sub	sp, #32
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
 800ec62:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ec64:	2300      	movs	r3, #0
 800ec66:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ec68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d108      	bne.n	800ec82 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800ec70:	f107 0208 	add.w	r2, r7, #8
 800ec74:	2317      	movs	r3, #23
 800ec76:	210d      	movs	r1, #13
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 ffa9 	bl	800fbd0 <VL53L1_ReadMulti>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800ec82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d108      	bne.n	800ec9c <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800ec8a:	f107 0308 	add.w	r3, r7, #8
 800ec8e:	683a      	ldr	r2, [r7, #0]
 800ec90:	4619      	mov	r1, r3
 800ec92:	2017      	movs	r0, #23
 800ec94:	f7ff ff54 	bl	800eb40 <VL53L1_i2c_decode_customer_nvm_managed>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ec9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3720      	adds	r7, #32
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b086      	sub	sp, #24
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	607a      	str	r2, [r7, #4]
 800ecb4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ecba:	897b      	ldrh	r3, [r7, #10]
 800ecbc:	2b1f      	cmp	r3, #31
 800ecbe:	d802      	bhi.n	800ecc6 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ecc0:	f06f 0309 	mvn.w	r3, #9
 800ecc4:	e0cf      	b.n	800ee66 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	881b      	ldrh	r3, [r3, #0]
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	2102      	movs	r1, #2
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7ff f985 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800ecdc:	f002 0201 	and.w	r2, r2, #1
 800ece0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ece2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800ecec:	f002 020f 	and.w	r2, r2, #15
 800ecf0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ecf2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800ecfc:	f002 020f 	and.w	r2, r2, #15
 800ed00:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ed02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800ed0c:	f002 021f 	and.w	r2, r2, #31
 800ed10:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ed12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ed1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ed20:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ed22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800ed2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ed30:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ed32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800ed3c:	f002 0201 	and.w	r2, r2, #1
 800ed40:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ed42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800ed4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ed56:	f002 0201 	and.w	r2, r2, #1
 800ed5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ed5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ed66:	f002 0203 	and.w	r2, r2, #3
 800ed6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ed6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800ed76:	f002 021f 	and.w	r2, r2, #31
 800ed7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800ed7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800ed86:	f002 0203 	and.w	r2, r2, #3
 800ed8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800ed8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800ed96:	f002 0203 	and.w	r2, r2, #3
 800ed9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800ed9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800eda6:	f002 0207 	and.w	r2, r2, #7
 800edaa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800edac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800edb6:	f002 021f 	and.w	r2, r2, #31
 800edba:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800edbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800edc6:	f002 0201 	and.w	r2, r2, #1
 800edca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800edcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800edd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800ede0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800ede6:	68fa      	ldr	r2, [r7, #12]
 800ede8:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800edea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800edf0:	68fa      	ldr	r2, [r7, #12]
 800edf2:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800edf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800edfa:	68fa      	ldr	r2, [r7, #12]
 800edfc:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800edfe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800ee08:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	8b18      	ldrh	r0, [r3, #24]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	3318      	adds	r3, #24
 800ee12:	461a      	mov	r2, r3
 800ee14:	2102      	movs	r1, #2
 800ee16:	f7ff f8e2 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800ee1e:	68fa      	ldr	r2, [r7, #12]
 800ee20:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800ee22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800ee28:	68fa      	ldr	r2, [r7, #12]
 800ee2a:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800ee2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800ee36:	f002 020f 	and.w	r2, r2, #15
 800ee3a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800ee3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800ee42:	68fa      	ldr	r2, [r7, #12]
 800ee44:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800ee46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800ee50:	f002 020f 	and.w	r2, r2, #15
 800ee54:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800ee56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800ee5c:	68fa      	ldr	r2, [r7, #12]
 800ee5e:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800ee60:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ee62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3718      	adds	r7, #24
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b086      	sub	sp, #24
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	60f8      	str	r0, [r7, #12]
 800ee76:	460b      	mov	r3, r1
 800ee78:	607a      	str	r2, [r7, #4]
 800ee7a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ee80:	897b      	ldrh	r3, [r7, #10]
 800ee82:	2b15      	cmp	r3, #21
 800ee84:	d802      	bhi.n	800ee8c <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ee86:	f06f 0309 	mvn.w	r3, #9
 800ee8a:	e070      	b.n	800ef6e <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ee9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800eea2:	68fa      	ldr	r2, [r7, #12]
 800eea4:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800eea6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800eeb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eeb4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800eeb6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800eebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eec0:	b298      	uxth	r0, r3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	3304      	adds	r3, #4
 800eec6:	461a      	mov	r2, r3
 800eec8:	2102      	movs	r1, #2
 800eeca:	f7ff f888 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800eed6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eeda:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800eedc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800eee2:	68fa      	ldr	r2, [r7, #12]
 800eee4:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800eee6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800eeec:	68fa      	ldr	r2, [r7, #12]
 800eeee:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800eef0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800eefa:	f002 0201 	and.w	r2, r2, #1
 800eefe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ef00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800ef0a:	f002 0207 	and.w	r2, r2, #7
 800ef0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ef10:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	8998      	ldrh	r0, [r3, #12]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	330c      	adds	r3, #12
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	2102      	movs	r1, #2
 800ef1e:	f7ff f85e 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	89d8      	ldrh	r0, [r3, #14]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	330e      	adds	r3, #14
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	2102      	movs	r1, #2
 800ef2e:	f7ff f856 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	8a18      	ldrh	r0, [r3, #16]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	3310      	adds	r3, #16
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	2102      	movs	r1, #2
 800ef3e:	f7ff f84e 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800ef46:	68fa      	ldr	r2, [r7, #12]
 800ef48:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800ef4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800ef50:	68fa      	ldr	r2, [r7, #12]
 800ef52:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800ef54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800ef5a:	68fa      	ldr	r2, [r7, #12]
 800ef5c:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800ef5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800ef68:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ef6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3718      	adds	r7, #24
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}

0800ef76 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ef76:	b580      	push	{r7, lr}
 800ef78:	b086      	sub	sp, #24
 800ef7a:	af00      	add	r7, sp, #0
 800ef7c:	60f8      	str	r0, [r7, #12]
 800ef7e:	460b      	mov	r3, r1
 800ef80:	607a      	str	r2, [r7, #4]
 800ef82:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ef84:	2300      	movs	r3, #0
 800ef86:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ef88:	897b      	ldrh	r3, [r7, #10]
 800ef8a:	2b16      	cmp	r3, #22
 800ef8c:	d802      	bhi.n	800ef94 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ef8e:	f06f 0309 	mvn.w	r3, #9
 800ef92:	e06e      	b.n	800f072 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	f003 030f 	and.w	r3, r3, #15
 800ef9c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800efaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800efb4:	f002 020f 	and.w	r2, r2, #15
 800efb8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800efba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800efc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800efce:	f002 020f 	and.w	r2, r2, #15
 800efd2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800efd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800efde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800efe8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800efec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800efee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800eff8:	f002 020f 	and.w	r2, r2, #15
 800effc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800effe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f008:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800f012:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f016:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f018:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	8958      	ldrh	r0, [r3, #10]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	330a      	adds	r3, #10
 800f022:	461a      	mov	r2, r3
 800f024:	2102      	movs	r1, #2
 800f026:	f7fe ffda 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	8998      	ldrh	r0, [r3, #12]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	330c      	adds	r3, #12
 800f032:	461a      	mov	r2, r3
 800f034:	2102      	movs	r1, #2
 800f036:	f7fe ffd2 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800f042:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800f04c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	6918      	ldr	r0, [r3, #16]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	3312      	adds	r3, #18
 800f056:	461a      	mov	r2, r3
 800f058:	2104      	movs	r1, #4
 800f05a:	f7ff f860 	bl	800e11e <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800f066:	f002 0201 	and.w	r2, r2, #1
 800f06a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800f06c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f06e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f072:	4618      	mov	r0, r3
 800f074:	3718      	adds	r7, #24
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b086      	sub	sp, #24
 800f07e:	af00      	add	r7, sp, #0
 800f080:	60f8      	str	r0, [r7, #12]
 800f082:	460b      	mov	r3, r1
 800f084:	607a      	str	r2, [r7, #4]
 800f086:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f088:	2300      	movs	r3, #0
 800f08a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800f08c:	897b      	ldrh	r3, [r7, #10]
 800f08e:	2b11      	cmp	r3, #17
 800f090:	d802      	bhi.n	800f098 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f092:	f06f 0309 	mvn.w	r3, #9
 800f096:	e071      	b.n	800f17c <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	f003 0303 	and.w	r3, r3, #3
 800f0a0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	8858      	ldrh	r0, [r3, #2]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	2102      	movs	r1, #2
 800f0b2:	f7fe ff94 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	8898      	ldrh	r0, [r3, #4]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	3303      	adds	r3, #3
 800f0be:	461a      	mov	r2, r3
 800f0c0:	2102      	movs	r1, #2
 800f0c2:	f7fe ff8c 	bl	800dfde <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f0ce:	f002 0201 	and.w	r2, r2, #1
 800f0d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f0d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800f0de:	f002 0207 	and.w	r2, r2, #7
 800f0e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f0e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800f0ea:	68fa      	ldr	r2, [r7, #12]
 800f0ec:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f0ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f0f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f102:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f106:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f108:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f112:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f116:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f118:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f122:	f002 0203 	and.w	r2, r2, #3
 800f126:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f128:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800f132:	f002 0203 	and.w	r2, r2, #3
 800f136:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f138:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800f142:	f002 020f 	and.w	r2, r2, #15
 800f146:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f148:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800f152:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800f15c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800f162:	68fa      	ldr	r2, [r7, #12]
 800f164:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800f166:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800f170:	f002 0203 	and.w	r2, r2, #3
 800f174:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f176:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f178:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3718      	adds	r7, #24
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f184:	b480      	push	{r7}
 800f186:	b087      	sub	sp, #28
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	460b      	mov	r3, r1
 800f18e:	607a      	str	r2, [r7, #4]
 800f190:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f192:	2300      	movs	r3, #0
 800f194:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800f196:	897b      	ldrh	r3, [r7, #10]
 800f198:	2b04      	cmp	r3, #4
 800f19a:	d802      	bhi.n	800f1a2 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f19c:	f06f 0309 	mvn.w	r3, #9
 800f1a0:	e025      	b.n	800f1ee <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	f003 0301 	and.w	r3, r3, #1
 800f1aa:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800f1b8:	f002 0201 	and.w	r2, r2, #1
 800f1bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f1be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800f1c8:	f002 0201 	and.w	r2, r2, #1
 800f1cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f1ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800f1d8:	f002 0203 	and.w	r2, r2, #3
 800f1dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f1de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800f1e4:	68fa      	ldr	r2, [r7, #12]
 800f1e6:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f1e8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f1ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	371c      	adds	r7, #28
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr

0800f1fa <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b086      	sub	sp, #24
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	4603      	mov	r3, r0
 800f202:	60b9      	str	r1, [r7, #8]
 800f204:	607a      	str	r2, [r7, #4]
 800f206:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f208:	2300      	movs	r3, #0
 800f20a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f20c:	89fb      	ldrh	r3, [r7, #14]
 800f20e:	2b2b      	cmp	r3, #43	; 0x2b
 800f210:	d802      	bhi.n	800f218 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f212:	f06f 0309 	mvn.w	r3, #9
 800f216:	e0e2      	b.n	800f3de <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f220:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	785a      	ldrb	r2, [r3, #1]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	3302      	adds	r3, #2
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	f003 030f 	and.w	r3, r3, #15
 800f238:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	78da      	ldrb	r2, [r3, #3]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	3304      	adds	r3, #4
 800f24a:	4619      	mov	r1, r3
 800f24c:	2002      	movs	r0, #2
 800f24e:	f7fe fef1 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f252:	4603      	mov	r3, r0
 800f254:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	3306      	adds	r3, #6
 800f25e:	4619      	mov	r1, r3
 800f260:	2002      	movs	r0, #2
 800f262:	f7fe fee7 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f266:	4603      	mov	r3, r0
 800f268:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	3308      	adds	r3, #8
 800f272:	4619      	mov	r1, r3
 800f274:	2002      	movs	r0, #2
 800f276:	f7fe fedd 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f27a:	4603      	mov	r3, r0
 800f27c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	330a      	adds	r3, #10
 800f286:	4619      	mov	r1, r3
 800f288:	2002      	movs	r0, #2
 800f28a:	f7fe fed3 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f28e:	4603      	mov	r3, r0
 800f290:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	330c      	adds	r3, #12
 800f29a:	4619      	mov	r1, r3
 800f29c:	2002      	movs	r0, #2
 800f29e:	f7fe fec9 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	330e      	adds	r3, #14
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	2002      	movs	r0, #2
 800f2b2:	f7fe febf 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	3310      	adds	r3, #16
 800f2c2:	4619      	mov	r1, r3
 800f2c4:	2002      	movs	r0, #2
 800f2c6:	f7fe feb5 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	3312      	adds	r3, #18
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	2002      	movs	r0, #2
 800f2da:	f7fe feab 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	3314      	adds	r3, #20
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	2002      	movs	r0, #2
 800f2ee:	f7fe fea1 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	3316      	adds	r3, #22
 800f2fe:	4619      	mov	r1, r3
 800f300:	2002      	movs	r0, #2
 800f302:	f7fe fe97 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f306:	4603      	mov	r3, r0
 800f308:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	3318      	adds	r3, #24
 800f312:	4619      	mov	r1, r3
 800f314:	2002      	movs	r0, #2
 800f316:	f7fe fe8d 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f31a:	4603      	mov	r3, r0
 800f31c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	331a      	adds	r3, #26
 800f326:	4619      	mov	r1, r3
 800f328:	2002      	movs	r0, #2
 800f32a:	f7fe fe83 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f32e:	4603      	mov	r3, r0
 800f330:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	331c      	adds	r3, #28
 800f33a:	4619      	mov	r1, r3
 800f33c:	2002      	movs	r0, #2
 800f33e:	f7fe fe79 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f342:	4603      	mov	r3, r0
 800f344:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	331e      	adds	r3, #30
 800f34e:	4619      	mov	r1, r3
 800f350:	2002      	movs	r0, #2
 800f352:	f7fe fe6f 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f356:	4603      	mov	r3, r0
 800f358:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	3320      	adds	r3, #32
 800f362:	4619      	mov	r1, r3
 800f364:	2002      	movs	r0, #2
 800f366:	f7fe fe65 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f36a:	4603      	mov	r3, r0
 800f36c:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	3322      	adds	r3, #34	; 0x22
 800f376:	4619      	mov	r1, r3
 800f378:	2002      	movs	r0, #2
 800f37a:	f7fe fe5b 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f37e:	4603      	mov	r3, r0
 800f380:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	3324      	adds	r3, #36	; 0x24
 800f38a:	4619      	mov	r1, r3
 800f38c:	2002      	movs	r0, #2
 800f38e:	f7fe fe51 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f392:	4603      	mov	r3, r0
 800f394:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	3326      	adds	r3, #38	; 0x26
 800f39e:	4619      	mov	r1, r3
 800f3a0:	2002      	movs	r0, #2
 800f3a2:	f7fe fe47 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	3328      	adds	r3, #40	; 0x28
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	2002      	movs	r0, #2
 800f3b6:	f7fe fe3d 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800f3da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3718      	adds	r7, #24
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b086      	sub	sp, #24
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	60b9      	str	r1, [r7, #8]
 800f3f0:	607a      	str	r2, [r7, #4]
 800f3f2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f3f8:	89fb      	ldrh	r3, [r7, #14]
 800f3fa:	2b20      	cmp	r3, #32
 800f3fc:	d802      	bhi.n	800f404 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f3fe:	f06f 0309 	mvn.w	r3, #9
 800f402:	e04d      	b.n	800f4a0 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800f404:	68b9      	ldr	r1, [r7, #8]
 800f406:	2004      	movs	r0, #4
 800f408:	f7fe feb3 	bl	800e172 <VL53L1_i2c_decode_uint32_t>
 800f40c:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	3304      	adds	r3, #4
 800f416:	4619      	mov	r1, r3
 800f418:	2004      	movs	r0, #4
 800f41a:	f7fe feaa 	bl	800e172 <VL53L1_i2c_decode_uint32_t>
 800f41e:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	3308      	adds	r3, #8
 800f428:	4619      	mov	r1, r3
 800f42a:	2004      	movs	r0, #4
 800f42c:	f7fe febe 	bl	800e1ac <VL53L1_i2c_decode_int32_t>
 800f430:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	330c      	adds	r3, #12
 800f43a:	4619      	mov	r1, r3
 800f43c:	2004      	movs	r0, #4
 800f43e:	f7fe fe98 	bl	800e172 <VL53L1_i2c_decode_uint32_t>
 800f442:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	3310      	adds	r3, #16
 800f44c:	4619      	mov	r1, r3
 800f44e:	2004      	movs	r0, #4
 800f450:	f7fe fe8f 	bl	800e172 <VL53L1_i2c_decode_uint32_t>
 800f454:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	3314      	adds	r3, #20
 800f45e:	4619      	mov	r1, r3
 800f460:	2004      	movs	r0, #4
 800f462:	f7fe fe86 	bl	800e172 <VL53L1_i2c_decode_uint32_t>
 800f466:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	3318      	adds	r3, #24
 800f470:	4619      	mov	r1, r3
 800f472:	2004      	movs	r0, #4
 800f474:	f7fe fe9a 	bl	800e1ac <VL53L1_i2c_decode_int32_t>
 800f478:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	331c      	adds	r3, #28
 800f482:	4619      	mov	r1, r3
 800f484:	2004      	movs	r0, #4
 800f486:	f7fe fe74 	bl	800e172 <VL53L1_i2c_decode_uint32_t>
 800f48a:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800f49c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3718      	adds	r7, #24
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b086      	sub	sp, #24
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	607a      	str	r2, [r7, #4]
 800f4b4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f4ba:	89fb      	ldrh	r3, [r7, #14]
 800f4bc:	2b37      	cmp	r3, #55	; 0x37
 800f4be:	d802      	bhi.n	800f4c6 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f4c0:	f06f 0309 	mvn.w	r3, #9
 800f4c4:	e15e      	b.n	800f784 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800f4c6:	68b9      	ldr	r1, [r7, #8]
 800f4c8:	2002      	movs	r0, #2
 800f4ca:	f7fe fdb3 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	3302      	adds	r3, #2
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4e0:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	3303      	adds	r3, #3
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4f0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	3304      	adds	r3, #4
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	f003 0303 	and.w	r3, r3, #3
 800f500:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	3305      	adds	r3, #5
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	f003 0301 	and.w	r3, r3, #1
 800f510:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	3306      	adds	r3, #6
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f520:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	3307      	adds	r3, #7
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f530:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	3308      	adds	r3, #8
 800f53a:	4619      	mov	r1, r3
 800f53c:	2002      	movs	r0, #2
 800f53e:	f7fe fd79 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f542:	4603      	mov	r3, r0
 800f544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f548:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	330a      	adds	r3, #10
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	f003 0303 	and.w	r3, r3, #3
 800f558:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	330b      	adds	r3, #11
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	f003 0303 	and.w	r3, r3, #3
 800f568:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	330c      	adds	r3, #12
 800f572:	781b      	ldrb	r3, [r3, #0]
 800f574:	f003 030f 	and.w	r3, r3, #15
 800f578:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	330d      	adds	r3, #13
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	f003 0307 	and.w	r3, r3, #7
 800f588:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	330e      	adds	r3, #14
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	f003 0301 	and.w	r3, r3, #1
 800f598:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	330f      	adds	r3, #15
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	f003 0303 	and.w	r3, r3, #3
 800f5a8:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	7c1a      	ldrb	r2, [r3, #16]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	7c5a      	ldrb	r2, [r3, #17]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	3312      	adds	r3, #18
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	2002      	movs	r0, #2
 800f5c6:	f7fe fd35 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f5d0:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	3316      	adds	r3, #22
 800f5da:	4619      	mov	r1, r3
 800f5dc:	2002      	movs	r0, #2
 800f5de:	f7fe fd29 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	3318      	adds	r3, #24
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	2002      	movs	r0, #2
 800f5f2:	f7fe fd1f 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	331a      	adds	r3, #26
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	f003 0301 	and.w	r3, r3, #1
 800f608:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	331b      	adds	r3, #27
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	f003 0307 	and.w	r3, r3, #7
 800f618:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	7f1a      	ldrb	r2, [r3, #28]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	7f5a      	ldrb	r2, [r3, #29]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	331e      	adds	r3, #30
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f638:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	331f      	adds	r3, #31
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f648:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	3320      	adds	r3, #32
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	f003 0303 	and.w	r3, r3, #3
 800f658:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	3321      	adds	r3, #33	; 0x21
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	f003 030f 	and.w	r3, r3, #15
 800f668:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	3325      	adds	r3, #37	; 0x25
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	f003 0301 	and.w	r3, r3, #1
 800f69c:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	3326      	adds	r3, #38	; 0x26
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	f003 0303 	and.w	r3, r3, #3
 800f6ae:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	3327      	adds	r3, #39	; 0x27
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	f003 031f 	and.w	r3, r3, #31
 800f6c0:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	3328      	adds	r3, #40	; 0x28
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	f003 031f 	and.w	r3, r3, #31
 800f6d2:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	3329      	adds	r3, #41	; 0x29
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	f003 031f 	and.w	r3, r3, #31
 800f6e4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	332a      	adds	r3, #42	; 0x2a
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	f003 0301 	and.w	r3, r3, #1
 800f6f6:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	332b      	adds	r3, #43	; 0x2b
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	f003 0301 	and.w	r3, r3, #1
 800f708:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	332c      	adds	r3, #44	; 0x2c
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	f003 0303 	and.w	r3, r3, #3
 800f71a:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	332d      	adds	r3, #45	; 0x2d
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f72c:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	332e      	adds	r3, #46	; 0x2e
 800f738:	4619      	mov	r1, r3
 800f73a:	2004      	movs	r0, #4
 800f73c:	f7fe fd19 	bl	800e172 <VL53L1_i2c_decode_uint32_t>
 800f740:	4603      	mov	r3, r0
 800f742:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	3332      	adds	r3, #50	; 0x32
 800f74e:	4619      	mov	r1, r3
 800f750:	2004      	movs	r0, #4
 800f752:	f7fe fd0e 	bl	800e172 <VL53L1_i2c_decode_uint32_t>
 800f756:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	3336      	adds	r3, #54	; 0x36
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	f003 0301 	and.w	r3, r3, #1
 800f766:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	3337      	adds	r3, #55	; 0x37
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	f003 0301 	and.w	r3, r3, #1
 800f778:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800f780:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f784:	4618      	mov	r0, r3
 800f786:	3718      	adds	r7, #24
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b086      	sub	sp, #24
 800f790:	af00      	add	r7, sp, #0
 800f792:	4603      	mov	r3, r0
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]
 800f798:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f79a:	2300      	movs	r3, #0
 800f79c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800f79e:	89fb      	ldrh	r3, [r7, #14]
 800f7a0:	2b30      	cmp	r3, #48	; 0x30
 800f7a2:	d802      	bhi.n	800f7aa <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f7a4:	f06f 0309 	mvn.w	r3, #9
 800f7a8:	e112      	b.n	800f9d0 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	785a      	ldrb	r2, [r3, #1]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	789a      	ldrb	r2, [r3, #2]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	3303      	adds	r3, #3
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	2002      	movs	r0, #2
 800f7ca:	f7fe fc33 	bl	800e034 <VL53L1_i2c_decode_uint16_t>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	3305      	adds	r3, #5
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7e0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	3306      	adds	r3, #6
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	f003 0307 	and.w	r3, r3, #7
 800f7f0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	3307      	adds	r3, #7
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	f003 0307 	and.w	r3, r3, #7
 800f800:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	3308      	adds	r3, #8
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f810:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	3309      	adds	r3, #9
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f820:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	330a      	adds	r3, #10
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	f003 0301 	and.w	r3, r3, #1
 800f830:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	330b      	adds	r3, #11
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f840:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	330c      	adds	r3, #12
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	f003 0301 	and.w	r3, r3, #1
 800f850:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	330d      	adds	r3, #13
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f860:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	330e      	adds	r3, #14
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f870:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	7bda      	ldrb	r2, [r3, #15]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	7c1a      	ldrb	r2, [r3, #16]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	7c5a      	ldrb	r2, [r3, #17]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	7c9a      	ldrb	r2, [r3, #18]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	7cda      	ldrb	r2, [r3, #19]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	7d1a      	ldrb	r2, [r3, #20]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	7d5a      	ldrb	r2, [r3, #21]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	7d9a      	ldrb	r2, [r3, #22]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	7dda      	ldrb	r2, [r3, #23]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	7e1a      	ldrb	r2, [r3, #24]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	7e5a      	ldrb	r2, [r3, #25]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	7e9a      	ldrb	r2, [r3, #26]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	7eda      	ldrb	r2, [r3, #27]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	7f1a      	ldrb	r2, [r3, #28]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	7f5a      	ldrb	r2, [r3, #29]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	7f9a      	ldrb	r2, [r3, #30]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	7fda      	ldrb	r2, [r3, #31]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800f9cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3718      	adds	r7, #24
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b090      	sub	sp, #64	; 0x40
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800f9e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d10a      	bne.n	800fa06 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800f9f0:	f107 020c 	add.w	r2, r7, #12
 800f9f4:	2331      	movs	r3, #49	; 0x31
 800f9f6:	f240 110f 	movw	r1, #271	; 0x10f
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 f8e8 	bl	800fbd0 <VL53L1_ReadMulti>
 800fa00:	4603      	mov	r3, r0
 800fa02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800fa06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d109      	bne.n	800fa22 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800fa0e:	f107 030c 	add.w	r3, r7, #12
 800fa12:	683a      	ldr	r2, [r7, #0]
 800fa14:	4619      	mov	r1, r3
 800fa16:	2031      	movs	r0, #49	; 0x31
 800fa18:	f7ff feb8 	bl	800f78c <VL53L1_i2c_decode_nvm_copy_data>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800fa22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3740      	adds	r7, #64	; 0x40
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}

0800fa2e <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800fa2e:	b580      	push	{r7, lr}
 800fa30:	b086      	sub	sp, #24
 800fa32:	af02      	add	r7, sp, #8
 800fa34:	6078      	str	r0, [r7, #4]
 800fa36:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800fa3c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f000 f9b9 	bl	800fdb8 <VL53L1_WaitUs>
 800fa46:	4603      	mov	r3, r0
 800fa48:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800fa4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d10b      	bne.n	800fa6a <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800fa52:	2301      	movs	r3, #1
 800fa54:	9301      	str	r3, [sp, #4]
 800fa56:	2301      	movs	r3, #1
 800fa58:	9300      	str	r3, [sp, #0]
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	22e5      	movs	r2, #229	; 0xe5
 800fa5e:	6839      	ldr	r1, [r7, #0]
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f000 f9bf 	bl	800fde4 <VL53L1_WaitValueMaskEx>
 800fa66:	4603      	mov	r3, r0
 800fa68:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800fa6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d103      	bne.n	800fa7a <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800fa72:	2103      	movs	r1, #3
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f7fe f896 	bl	800dba6 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800fa7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3710      	adds	r7, #16
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}

0800fa86 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800fa86:	b580      	push	{r7, lr}
 800fa88:	b088      	sub	sp, #32
 800fa8a:	af02      	add	r7, sp, #8
 800fa8c:	6078      	str	r0, [r7, #4]
 800fa8e:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fa90:	2300      	movs	r3, #0
 800fa92:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800faa6:	f003 0310 	and.w	r3, r3, #16
 800faaa:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800faac:	7bfb      	ldrb	r3, [r7, #15]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d102      	bne.n	800fab8 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 800fab2:	2301      	movs	r3, #1
 800fab4:	75fb      	strb	r3, [r7, #23]
 800fab6:	e001      	b.n	800fabc <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 800fab8:	2300      	movs	r3, #0
 800faba:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 800fabc:	7dfb      	ldrb	r3, [r7, #23]
 800fabe:	2201      	movs	r2, #1
 800fac0:	9201      	str	r2, [sp, #4]
 800fac2:	2201      	movs	r2, #1
 800fac4:	9200      	str	r2, [sp, #0]
 800fac6:	2231      	movs	r2, #49	; 0x31
 800fac8:	6839      	ldr	r1, [r7, #0]
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f000 f98a 	bl	800fde4 <VL53L1_WaitValueMaskEx>
 800fad0:	4603      	mov	r3, r0
 800fad2:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800fad4:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3718      	adds	r7, #24
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b088      	sub	sp, #32
 800fae4:	af02      	add	r7, sp, #8
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	330a      	adds	r3, #10
 800faf0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800fafe:	b299      	uxth	r1, r3
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	9300      	str	r3, [sp, #0]
 800fb08:	4613      	mov	r3, r2
 800fb0a:	68ba      	ldr	r2, [r7, #8]
 800fb0c:	f7f5 f9b0 	bl	8004e70 <HAL_I2C_Master_Transmit>
 800fb10:	4603      	mov	r3, r0
 800fb12:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fb14:	693b      	ldr	r3, [r7, #16]
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3718      	adds	r7, #24
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b088      	sub	sp, #32
 800fb22:	af02      	add	r7, sp, #8
 800fb24:	60f8      	str	r0, [r7, #12]
 800fb26:	60b9      	str	r1, [r7, #8]
 800fb28:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	330a      	adds	r3, #10
 800fb2e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800fb3c:	f043 0301 	orr.w	r3, r3, #1
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	b299      	uxth	r1, r3
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	9300      	str	r3, [sp, #0]
 800fb4c:	4613      	mov	r3, r2
 800fb4e:	68ba      	ldr	r2, [r7, #8]
 800fb50:	f7f5 fa8c 	bl	800506c <HAL_I2C_Master_Receive>
 800fb54:	4603      	mov	r3, r0
 800fb56:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fb58:	693b      	ldr	r3, [r7, #16]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3718      	adds	r7, #24
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
	...

0800fb64 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	607a      	str	r2, [r7, #4]
 800fb6e:	603b      	str	r3, [r7, #0]
 800fb70:	460b      	mov	r3, r1
 800fb72:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fb74:	2300      	movs	r3, #0
 800fb76:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	2bff      	cmp	r3, #255	; 0xff
 800fb7c:	d902      	bls.n	800fb84 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800fb7e:	f06f 0303 	mvn.w	r3, #3
 800fb82:	e01d      	b.n	800fbc0 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800fb84:	897b      	ldrh	r3, [r7, #10]
 800fb86:	0a1b      	lsrs	r3, r3, #8
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	b2da      	uxtb	r2, r3
 800fb8c:	4b0e      	ldr	r3, [pc, #56]	; (800fbc8 <VL53L1_WriteMulti+0x64>)
 800fb8e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fb90:	897b      	ldrh	r3, [r7, #10]
 800fb92:	b2da      	uxtb	r2, r3
 800fb94:	4b0c      	ldr	r3, [pc, #48]	; (800fbc8 <VL53L1_WriteMulti+0x64>)
 800fb96:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800fb98:	683a      	ldr	r2, [r7, #0]
 800fb9a:	6879      	ldr	r1, [r7, #4]
 800fb9c:	480b      	ldr	r0, [pc, #44]	; (800fbcc <VL53L1_WriteMulti+0x68>)
 800fb9e:	f000 fb97 	bl	80102d0 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	3302      	adds	r3, #2
 800fba6:	461a      	mov	r2, r3
 800fba8:	4907      	ldr	r1, [pc, #28]	; (800fbc8 <VL53L1_WriteMulti+0x64>)
 800fbaa:	68f8      	ldr	r0, [r7, #12]
 800fbac:	f7ff ff98 	bl	800fae0 <_I2CWrite>
 800fbb0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d001      	beq.n	800fbbc <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fbb8:	23f3      	movs	r3, #243	; 0xf3
 800fbba:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800fbbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3718      	adds	r7, #24
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	200006a8 	.word	0x200006a8
 800fbcc:	200006aa 	.word	0x200006aa

0800fbd0 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b086      	sub	sp, #24
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	607a      	str	r2, [r7, #4]
 800fbda:	603b      	str	r3, [r7, #0]
 800fbdc:	460b      	mov	r3, r1
 800fbde:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fbe4:	897b      	ldrh	r3, [r7, #10]
 800fbe6:	0a1b      	lsrs	r3, r3, #8
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	b2da      	uxtb	r2, r3
 800fbec:	4b12      	ldr	r3, [pc, #72]	; (800fc38 <VL53L1_ReadMulti+0x68>)
 800fbee:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fbf0:	897b      	ldrh	r3, [r7, #10]
 800fbf2:	b2da      	uxtb	r2, r3
 800fbf4:	4b10      	ldr	r3, [pc, #64]	; (800fc38 <VL53L1_ReadMulti+0x68>)
 800fbf6:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fbf8:	2202      	movs	r2, #2
 800fbfa:	490f      	ldr	r1, [pc, #60]	; (800fc38 <VL53L1_ReadMulti+0x68>)
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f7ff ff6f 	bl	800fae0 <_I2CWrite>
 800fc02:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d002      	beq.n	800fc10 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fc0a:	23f3      	movs	r3, #243	; 0xf3
 800fc0c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fc0e:	e00c      	b.n	800fc2a <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800fc10:	683a      	ldr	r2, [r7, #0]
 800fc12:	6879      	ldr	r1, [r7, #4]
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f7ff ff82 	bl	800fb1e <_I2CRead>
 800fc1a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d002      	beq.n	800fc28 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fc22:	23f3      	movs	r3, #243	; 0xf3
 800fc24:	75fb      	strb	r3, [r7, #23]
 800fc26:	e000      	b.n	800fc2a <VL53L1_ReadMulti+0x5a>
    }
done:
 800fc28:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800fc2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3718      	adds	r7, #24
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	200006a8 	.word	0x200006a8

0800fc3c <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	460b      	mov	r3, r1
 800fc46:	807b      	strh	r3, [r7, #2]
 800fc48:	4613      	mov	r3, r2
 800fc4a:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fc50:	887b      	ldrh	r3, [r7, #2]
 800fc52:	0a1b      	lsrs	r3, r3, #8
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	b2da      	uxtb	r2, r3
 800fc58:	4b0c      	ldr	r3, [pc, #48]	; (800fc8c <VL53L1_WrByte+0x50>)
 800fc5a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fc5c:	887b      	ldrh	r3, [r7, #2]
 800fc5e:	b2da      	uxtb	r2, r3
 800fc60:	4b0a      	ldr	r3, [pc, #40]	; (800fc8c <VL53L1_WrByte+0x50>)
 800fc62:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800fc64:	4a09      	ldr	r2, [pc, #36]	; (800fc8c <VL53L1_WrByte+0x50>)
 800fc66:	787b      	ldrb	r3, [r7, #1]
 800fc68:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800fc6a:	2203      	movs	r2, #3
 800fc6c:	4907      	ldr	r1, [pc, #28]	; (800fc8c <VL53L1_WrByte+0x50>)
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f7ff ff36 	bl	800fae0 <_I2CWrite>
 800fc74:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d001      	beq.n	800fc80 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fc7c:	23f3      	movs	r3, #243	; 0xf3
 800fc7e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800fc80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3710      	adds	r7, #16
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	200006a8 	.word	0x200006a8

0800fc90 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b086      	sub	sp, #24
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	460b      	mov	r3, r1
 800fc9a:	607a      	str	r2, [r7, #4]
 800fc9c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800fca2:	897b      	ldrh	r3, [r7, #10]
 800fca4:	0a1b      	lsrs	r3, r3, #8
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	b2da      	uxtb	r2, r3
 800fcaa:	4b12      	ldr	r3, [pc, #72]	; (800fcf4 <VL53L1_RdByte+0x64>)
 800fcac:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fcae:	897b      	ldrh	r3, [r7, #10]
 800fcb0:	b2da      	uxtb	r2, r3
 800fcb2:	4b10      	ldr	r3, [pc, #64]	; (800fcf4 <VL53L1_RdByte+0x64>)
 800fcb4:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fcb6:	2202      	movs	r2, #2
 800fcb8:	490e      	ldr	r1, [pc, #56]	; (800fcf4 <VL53L1_RdByte+0x64>)
 800fcba:	68f8      	ldr	r0, [r7, #12]
 800fcbc:	f7ff ff10 	bl	800fae0 <_I2CWrite>
 800fcc0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d002      	beq.n	800fcce <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fcc8:	23f3      	movs	r3, #243	; 0xf3
 800fcca:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fccc:	e00c      	b.n	800fce8 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800fcce:	2201      	movs	r2, #1
 800fcd0:	6879      	ldr	r1, [r7, #4]
 800fcd2:	68f8      	ldr	r0, [r7, #12]
 800fcd4:	f7ff ff23 	bl	800fb1e <_I2CRead>
 800fcd8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d002      	beq.n	800fce6 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fce0:	23f3      	movs	r3, #243	; 0xf3
 800fce2:	75fb      	strb	r3, [r7, #23]
 800fce4:	e000      	b.n	800fce8 <VL53L1_RdByte+0x58>
    }
done:
 800fce6:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800fce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3718      	adds	r7, #24
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	200006a8 	.word	0x200006a8

0800fcf8 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b086      	sub	sp, #24
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	460b      	mov	r3, r1
 800fd02:	607a      	str	r2, [r7, #4]
 800fd04:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fd06:	2300      	movs	r3, #0
 800fd08:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fd0a:	897b      	ldrh	r3, [r7, #10]
 800fd0c:	0a1b      	lsrs	r3, r3, #8
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	b2da      	uxtb	r2, r3
 800fd12:	4b18      	ldr	r3, [pc, #96]	; (800fd74 <VL53L1_RdWord+0x7c>)
 800fd14:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fd16:	897b      	ldrh	r3, [r7, #10]
 800fd18:	b2da      	uxtb	r2, r3
 800fd1a:	4b16      	ldr	r3, [pc, #88]	; (800fd74 <VL53L1_RdWord+0x7c>)
 800fd1c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fd1e:	2202      	movs	r2, #2
 800fd20:	4914      	ldr	r1, [pc, #80]	; (800fd74 <VL53L1_RdWord+0x7c>)
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7ff fedc 	bl	800fae0 <_I2CWrite>
 800fd28:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fd30:	23f3      	movs	r3, #243	; 0xf3
 800fd32:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fd34:	e017      	b.n	800fd66 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800fd36:	2202      	movs	r2, #2
 800fd38:	490e      	ldr	r1, [pc, #56]	; (800fd74 <VL53L1_RdWord+0x7c>)
 800fd3a:	68f8      	ldr	r0, [r7, #12]
 800fd3c:	f7ff feef 	bl	800fb1e <_I2CRead>
 800fd40:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d002      	beq.n	800fd4e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fd48:	23f3      	movs	r3, #243	; 0xf3
 800fd4a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fd4c:	e00b      	b.n	800fd66 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800fd4e:	4b09      	ldr	r3, [pc, #36]	; (800fd74 <VL53L1_RdWord+0x7c>)
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	021b      	lsls	r3, r3, #8
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	4b06      	ldr	r3, [pc, #24]	; (800fd74 <VL53L1_RdWord+0x7c>)
 800fd5a:	785b      	ldrb	r3, [r3, #1]
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	4413      	add	r3, r2
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800fd66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3718      	adds	r7, #24
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	200006a8 	.word	0x200006a8

0800fd78 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800fd80:	2300      	movs	r3, #0
 800fd82:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2200      	movs	r2, #0
 800fd88:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800fd8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3714      	adds	r7, #20
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr

0800fd9a <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b082      	sub	sp, #8
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
 800fda2:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7f3 fcda 	bl	8003760 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800fdac:	2300      	movs	r3, #0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3708      	adds	r7, #8
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
	...

0800fdb8 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	4a06      	ldr	r2, [pc, #24]	; (800fde0 <VL53L1_WaitUs+0x28>)
 800fdc6:	fb82 1203 	smull	r1, r2, r2, r3
 800fdca:	1192      	asrs	r2, r2, #6
 800fdcc:	17db      	asrs	r3, r3, #31
 800fdce:	1ad3      	subs	r3, r2, r3
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7f3 fcc5 	bl	8003760 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800fdd6:	2300      	movs	r3, #0
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	10624dd3 	.word	0x10624dd3

0800fde4 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800fde4:	b590      	push	{r4, r7, lr}
 800fde6:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	f107 040c 	add.w	r4, r7, #12
 800fdf0:	6020      	str	r0, [r4, #0]
 800fdf2:	f107 0008 	add.w	r0, r7, #8
 800fdf6:	6001      	str	r1, [r0, #0]
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	1dbb      	adds	r3, r7, #6
 800fdfc:	801a      	strh	r2, [r3, #0]
 800fdfe:	1d7b      	adds	r3, r7, #5
 800fe00:	460a      	mov	r2, r1
 800fe02:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800fe04:	2300      	movs	r3, #0
 800fe06:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800fe10:	2300      	movs	r3, #0
 800fe12:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800fe16:	2300      	movs	r3, #0
 800fe18:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800fe22:	2300      	movs	r3, #0
 800fe24:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800fe28:	f107 0310 	add.w	r3, r7, #16
 800fe2c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fe30:	4935      	ldr	r1, [pc, #212]	; (800ff08 <VL53L1_WaitValueMaskEx+0x124>)
 800fe32:	4618      	mov	r0, r3
 800fe34:	f000 fa62 	bl	80102fc <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800fe38:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7ff ff9b 	bl	800fd78 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800fe42:	e03f      	b.n	800fec4 <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800fe44:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d10b      	bne.n	800fe64 <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 800fe4c:	f207 2213 	addw	r2, r7, #531	; 0x213
 800fe50:	1dbb      	adds	r3, r7, #6
 800fe52:	8819      	ldrh	r1, [r3, #0]
 800fe54:	f107 030c 	add.w	r3, r7, #12
 800fe58:	6818      	ldr	r0, [r3, #0]
 800fe5a:	f7ff ff19 	bl	800fc90 <VL53L1_RdByte>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800fe64:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800fe68:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800fe6c:	4013      	ands	r3, r2
 800fe6e:	b2db      	uxtb	r3, r3
 800fe70:	1d7a      	adds	r2, r7, #5
 800fe72:	7812      	ldrb	r2, [r2, #0]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d102      	bne.n	800fe7e <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800fe7e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d112      	bne.n	800feac <VL53L1_WaitValueMaskEx+0xc8>
 800fe86:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d10e      	bne.n	800feac <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 800fe8e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d00a      	beq.n	800feac <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800fe96:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800fe9a:	f107 030c 	add.w	r3, r7, #12
 800fe9e:	4611      	mov	r1, r2
 800fea0:	6818      	ldr	r0, [r3, #0]
 800fea2:	f7ff ff7a 	bl	800fd9a <VL53L1_WaitMs>
 800fea6:	4603      	mov	r3, r0
 800fea8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800feac:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7ff ff61 	bl	800fd78 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800feb6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800feba:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800febe:	1ad3      	subs	r3, r2, r3
 800fec0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800fec4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d10a      	bne.n	800fee2 <VL53L1_WaitValueMaskEx+0xfe>
 800fecc:	f107 0308 	add.w	r3, r7, #8
 800fed0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d203      	bcs.n	800fee2 <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 800feda:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d0b0      	beq.n	800fe44 <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800fee2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d106      	bne.n	800fef8 <VL53L1_WaitValueMaskEx+0x114>
 800feea:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d102      	bne.n	800fef8 <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 800fef2:	23f9      	movs	r3, #249	; 0xf9
 800fef4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800fef8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd90      	pop	{r4, r7, pc}
 800ff06:	bf00      	nop
 800ff08:	080105b8 	.word	0x080105b8

0800ff0c <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b0a4      	sub	sp, #144	; 0x90
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	4603      	mov	r3, r0
 800ff14:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ff16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	601a      	str	r2, [r3, #0]
 800ff1e:	605a      	str	r2, [r3, #4]
 800ff20:	609a      	str	r2, [r3, #8]
 800ff22:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ff24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ff28:	2200      	movs	r2, #0
 800ff2a:	601a      	str	r2, [r3, #0]
 800ff2c:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800ff2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ff32:	2200      	movs	r2, #0
 800ff34:	601a      	str	r2, [r3, #0]
 800ff36:	605a      	str	r2, [r3, #4]
 800ff38:	609a      	str	r2, [r3, #8]
 800ff3a:	60da      	str	r2, [r3, #12]
 800ff3c:	611a      	str	r2, [r3, #16]
 800ff3e:	615a      	str	r2, [r3, #20]
 800ff40:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 800ff42:	2300      	movs	r3, #0
 800ff44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 800ff54:	2301      	movs	r3, #1
 800ff56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800ff60:	e009      	b.n	800ff76 <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 800ff62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff66:	005b      	lsls	r3, r3, #1
 800ff68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800ff6c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800ff70:	3301      	adds	r3, #1
 800ff72:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800ff76:	79fa      	ldrb	r2, [r7, #7]
 800ff78:	494d      	ldr	r1, [pc, #308]	; (80100b0 <DC_MOTOR_Init+0x1a4>)
 800ff7a:	4613      	mov	r3, r2
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	4413      	add	r3, r2
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	440b      	add	r3, r1
 800ff84:	3310      	adds	r3, #16
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d3e8      	bcc.n	800ff62 <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 800ff90:	79fa      	ldrb	r2, [r7, #7]
 800ff92:	4947      	ldr	r1, [pc, #284]	; (80100b0 <DC_MOTOR_Init+0x1a4>)
 800ff94:	4613      	mov	r3, r2
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	4413      	add	r3, r2
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	440b      	add	r3, r1
 800ff9e:	3308      	adds	r3, #8
 800ffa0:	881b      	ldrh	r3, [r3, #0]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	4b43      	ldr	r3, [pc, #268]	; (80100b4 <DC_MOTOR_Init+0x1a8>)
 800ffa6:	fb03 f302 	mul.w	r3, r3, r2
 800ffaa:	4618      	mov	r0, r3
 800ffac:	79fa      	ldrb	r2, [r7, #7]
 800ffae:	4940      	ldr	r1, [pc, #256]	; (80100b0 <DC_MOTOR_Init+0x1a4>)
 800ffb0:	4613      	mov	r3, r2
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	4413      	add	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	440b      	add	r3, r1
 800ffba:	330c      	adds	r3, #12
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ffc2:	fb02 f303 	mul.w	r3, r2, r3
 800ffc6:	fbb0 f3f3 	udiv	r3, r0, r3
 800ffca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 800ffce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ffd2:	3b01      	subs	r3, #1
 800ffd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 800ffd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ffdc:	3b02      	subs	r3, #2
 800ffde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 800ffe2:	79fa      	ldrb	r2, [r7, #7]
 800ffe4:	4932      	ldr	r1, [pc, #200]	; (80100b0 <DC_MOTOR_Init+0x1a4>)
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	009b      	lsls	r3, r3, #2
 800ffea:	4413      	add	r3, r2
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	440b      	add	r3, r1
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 800fff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fff8:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800fffa:	2360      	movs	r3, #96	; 0x60
 800fffc:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 800fffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010002:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010004:	2300      	movs	r3, #0
 8010006:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8010008:	2380      	movs	r3, #128	; 0x80
 801000a:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 801000c:	f107 0308 	add.w	r3, r7, #8
 8010010:	4618      	mov	r0, r3
 8010012:	f7f7 fb89 	bl	8007728 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801001a:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 801001c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8010020:	f107 0308 	add.w	r3, r7, #8
 8010024:	4611      	mov	r1, r2
 8010026:	4618      	mov	r0, r3
 8010028:	f7f8 fc34 	bl	8008894 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 801002c:	f107 0308 	add.w	r3, r7, #8
 8010030:	4618      	mov	r0, r3
 8010032:	f7f7 fd2f 	bl	8007a94 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010036:	2300      	movs	r3, #0
 8010038:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801003a:	2300      	movs	r3, #0
 801003c:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 801003e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8010042:	f107 0308 	add.w	r3, r7, #8
 8010046:	4611      	mov	r1, r2
 8010048:	4618      	mov	r0, r3
 801004a:	f7f9 fbc3 	bl	80097d4 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801004e:	2360      	movs	r3, #96	; 0x60
 8010050:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 8010052:	2300      	movs	r3, #0
 8010054:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010056:	2300      	movs	r3, #0
 8010058:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801005a:	2300      	movs	r3, #0
 801005c:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 801005e:	79fa      	ldrb	r2, [r7, #7]
 8010060:	4913      	ldr	r1, [pc, #76]	; (80100b0 <DC_MOTOR_Init+0x1a4>)
 8010062:	4613      	mov	r3, r2
 8010064:	009b      	lsls	r3, r3, #2
 8010066:	4413      	add	r3, r2
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	440b      	add	r3, r1
 801006c:	3304      	adds	r3, #4
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010074:	f107 0308 	add.w	r3, r7, #8
 8010078:	4618      	mov	r0, r3
 801007a:	f7f8 fa33 	bl	80084e4 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 801007e:	f107 0308 	add.w	r3, r7, #8
 8010082:	4618      	mov	r0, r3
 8010084:	f7f3 f8f2 	bl	800326c <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8010088:	79fa      	ldrb	r2, [r7, #7]
 801008a:	4909      	ldr	r1, [pc, #36]	; (80100b0 <DC_MOTOR_Init+0x1a4>)
 801008c:	4613      	mov	r3, r2
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	4413      	add	r3, r2
 8010092:	009b      	lsls	r3, r3, #2
 8010094:	440b      	add	r3, r1
 8010096:	3304      	adds	r3, #4
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	f107 0308 	add.w	r3, r7, #8
 801009e:	4611      	mov	r1, r2
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7f7 fde7 	bl	8007c74 <HAL_TIM_PWM_Start>
}
 80100a6:	bf00      	nop
 80100a8:	3790      	adds	r7, #144	; 0x90
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	080105fc 	.word	0x080105fc
 80100b4:	000f4240 	.word	0x000f4240

080100b8 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	4603      	mov	r3, r0
 80100c0:	460a      	mov	r2, r1
 80100c2:	71fb      	strb	r3, [r7, #7]
 80100c4:	4613      	mov	r3, r2
 80100c6:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80100c8:	79fa      	ldrb	r2, [r7, #7]
 80100ca:	4928      	ldr	r1, [pc, #160]	; (801016c <DC_MOTOR_Start+0xb4>)
 80100cc:	4613      	mov	r3, r2
 80100ce:	009b      	lsls	r3, r3, #2
 80100d0:	4413      	add	r3, r2
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	440b      	add	r3, r1
 80100d6:	3304      	adds	r3, #4
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d10a      	bne.n	80100f4 <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 80100de:	79fa      	ldrb	r2, [r7, #7]
 80100e0:	4922      	ldr	r1, [pc, #136]	; (801016c <DC_MOTOR_Start+0xb4>)
 80100e2:	4613      	mov	r3, r2
 80100e4:	009b      	lsls	r3, r3, #2
 80100e6:	4413      	add	r3, r2
 80100e8:	009b      	lsls	r3, r3, #2
 80100ea:	440b      	add	r3, r1
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	88ba      	ldrh	r2, [r7, #4]
 80100f0:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 80100f2:	e035      	b.n	8010160 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80100f4:	79fa      	ldrb	r2, [r7, #7]
 80100f6:	491d      	ldr	r1, [pc, #116]	; (801016c <DC_MOTOR_Start+0xb4>)
 80100f8:	4613      	mov	r3, r2
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	4413      	add	r3, r2
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	440b      	add	r3, r1
 8010102:	3304      	adds	r3, #4
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	2b04      	cmp	r3, #4
 8010108:	d10a      	bne.n	8010120 <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 801010a:	79fa      	ldrb	r2, [r7, #7]
 801010c:	4917      	ldr	r1, [pc, #92]	; (801016c <DC_MOTOR_Start+0xb4>)
 801010e:	4613      	mov	r3, r2
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	4413      	add	r3, r2
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	440b      	add	r3, r1
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	88ba      	ldrh	r2, [r7, #4]
 801011c:	639a      	str	r2, [r3, #56]	; 0x38
}
 801011e:	e01f      	b.n	8010160 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8010120:	79fa      	ldrb	r2, [r7, #7]
 8010122:	4912      	ldr	r1, [pc, #72]	; (801016c <DC_MOTOR_Start+0xb4>)
 8010124:	4613      	mov	r3, r2
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	4413      	add	r3, r2
 801012a:	009b      	lsls	r3, r3, #2
 801012c:	440b      	add	r3, r1
 801012e:	3304      	adds	r3, #4
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	2b08      	cmp	r3, #8
 8010134:	d10a      	bne.n	801014c <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8010136:	79fa      	ldrb	r2, [r7, #7]
 8010138:	490c      	ldr	r1, [pc, #48]	; (801016c <DC_MOTOR_Start+0xb4>)
 801013a:	4613      	mov	r3, r2
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	4413      	add	r3, r2
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	440b      	add	r3, r1
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	88ba      	ldrh	r2, [r7, #4]
 8010148:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801014a:	e009      	b.n	8010160 <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 801014c:	79fa      	ldrb	r2, [r7, #7]
 801014e:	4907      	ldr	r1, [pc, #28]	; (801016c <DC_MOTOR_Start+0xb4>)
 8010150:	4613      	mov	r3, r2
 8010152:	009b      	lsls	r3, r3, #2
 8010154:	4413      	add	r3, r2
 8010156:	009b      	lsls	r3, r3, #2
 8010158:	440b      	add	r3, r1
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	88ba      	ldrh	r2, [r7, #4]
 801015e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8010160:	bf00      	nop
 8010162:	370c      	adds	r7, #12
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	080105fc 	.word	0x080105fc

08010170 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	4603      	mov	r3, r0
 8010178:	460a      	mov	r2, r1
 801017a:	71fb      	strb	r3, [r7, #7]
 801017c:	4613      	mov	r3, r2
 801017e:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8010180:	79fa      	ldrb	r2, [r7, #7]
 8010182:	4928      	ldr	r1, [pc, #160]	; (8010224 <DC_MOTOR_Set_Speed+0xb4>)
 8010184:	4613      	mov	r3, r2
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	4413      	add	r3, r2
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	440b      	add	r3, r1
 801018e:	3304      	adds	r3, #4
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d10a      	bne.n	80101ac <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8010196:	79fa      	ldrb	r2, [r7, #7]
 8010198:	4922      	ldr	r1, [pc, #136]	; (8010224 <DC_MOTOR_Set_Speed+0xb4>)
 801019a:	4613      	mov	r3, r2
 801019c:	009b      	lsls	r3, r3, #2
 801019e:	4413      	add	r3, r2
 80101a0:	009b      	lsls	r3, r3, #2
 80101a2:	440b      	add	r3, r1
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	88ba      	ldrh	r2, [r7, #4]
 80101a8:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 80101aa:	e035      	b.n	8010218 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80101ac:	79fa      	ldrb	r2, [r7, #7]
 80101ae:	491d      	ldr	r1, [pc, #116]	; (8010224 <DC_MOTOR_Set_Speed+0xb4>)
 80101b0:	4613      	mov	r3, r2
 80101b2:	009b      	lsls	r3, r3, #2
 80101b4:	4413      	add	r3, r2
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	440b      	add	r3, r1
 80101ba:	3304      	adds	r3, #4
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	2b04      	cmp	r3, #4
 80101c0:	d10a      	bne.n	80101d8 <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 80101c2:	79fa      	ldrb	r2, [r7, #7]
 80101c4:	4917      	ldr	r1, [pc, #92]	; (8010224 <DC_MOTOR_Set_Speed+0xb4>)
 80101c6:	4613      	mov	r3, r2
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	4413      	add	r3, r2
 80101cc:	009b      	lsls	r3, r3, #2
 80101ce:	440b      	add	r3, r1
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	88ba      	ldrh	r2, [r7, #4]
 80101d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80101d6:	e01f      	b.n	8010218 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 80101d8:	79fa      	ldrb	r2, [r7, #7]
 80101da:	4912      	ldr	r1, [pc, #72]	; (8010224 <DC_MOTOR_Set_Speed+0xb4>)
 80101dc:	4613      	mov	r3, r2
 80101de:	009b      	lsls	r3, r3, #2
 80101e0:	4413      	add	r3, r2
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	440b      	add	r3, r1
 80101e6:	3304      	adds	r3, #4
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	2b08      	cmp	r3, #8
 80101ec:	d10a      	bne.n	8010204 <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 80101ee:	79fa      	ldrb	r2, [r7, #7]
 80101f0:	490c      	ldr	r1, [pc, #48]	; (8010224 <DC_MOTOR_Set_Speed+0xb4>)
 80101f2:	4613      	mov	r3, r2
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	4413      	add	r3, r2
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	440b      	add	r3, r1
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	88ba      	ldrh	r2, [r7, #4]
 8010200:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8010202:	e009      	b.n	8010218 <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8010204:	79fa      	ldrb	r2, [r7, #7]
 8010206:	4907      	ldr	r1, [pc, #28]	; (8010224 <DC_MOTOR_Set_Speed+0xb4>)
 8010208:	4613      	mov	r3, r2
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	4413      	add	r3, r2
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	440b      	add	r3, r1
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	88ba      	ldrh	r2, [r7, #4]
 8010216:	641a      	str	r2, [r3, #64]	; 0x40
}
 8010218:	bf00      	nop
 801021a:	370c      	adds	r7, #12
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr
 8010224:	080105fc 	.word	0x080105fc

08010228 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8010228:	b480      	push	{r7}
 801022a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 801022c:	4b14      	ldr	r3, [pc, #80]	; (8010280 <DWT_Delay_Init+0x58>)
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	4a13      	ldr	r2, [pc, #76]	; (8010280 <DWT_Delay_Init+0x58>)
 8010232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010236:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8010238:	4b11      	ldr	r3, [pc, #68]	; (8010280 <DWT_Delay_Init+0x58>)
 801023a:	68db      	ldr	r3, [r3, #12]
 801023c:	4a10      	ldr	r2, [pc, #64]	; (8010280 <DWT_Delay_Init+0x58>)
 801023e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010242:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8010244:	4b0f      	ldr	r3, [pc, #60]	; (8010284 <DWT_Delay_Init+0x5c>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	4a0e      	ldr	r2, [pc, #56]	; (8010284 <DWT_Delay_Init+0x5c>)
 801024a:	f023 0301 	bic.w	r3, r3, #1
 801024e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8010250:	4b0c      	ldr	r3, [pc, #48]	; (8010284 <DWT_Delay_Init+0x5c>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4a0b      	ldr	r2, [pc, #44]	; (8010284 <DWT_Delay_Init+0x5c>)
 8010256:	f043 0301 	orr.w	r3, r3, #1
 801025a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 801025c:	4b09      	ldr	r3, [pc, #36]	; (8010284 <DWT_Delay_Init+0x5c>)
 801025e:	2200      	movs	r2, #0
 8010260:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8010262:	bf00      	nop
    __ASM volatile ("NOP");
 8010264:	bf00      	nop
    __ASM volatile ("NOP");
 8010266:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8010268:	4b06      	ldr	r3, [pc, #24]	; (8010284 <DWT_Delay_Init+0x5c>)
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d001      	beq.n	8010274 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8010270:	2300      	movs	r3, #0
 8010272:	e000      	b.n	8010276 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8010274:	2301      	movs	r3, #1
    }
}
 8010276:	4618      	mov	r0, r3
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	e000edf0 	.word	0xe000edf0
 8010284:	e0001000 	.word	0xe0001000

08010288 <__libc_init_array>:
 8010288:	b570      	push	{r4, r5, r6, lr}
 801028a:	4d0d      	ldr	r5, [pc, #52]	; (80102c0 <__libc_init_array+0x38>)
 801028c:	4c0d      	ldr	r4, [pc, #52]	; (80102c4 <__libc_init_array+0x3c>)
 801028e:	1b64      	subs	r4, r4, r5
 8010290:	10a4      	asrs	r4, r4, #2
 8010292:	2600      	movs	r6, #0
 8010294:	42a6      	cmp	r6, r4
 8010296:	d109      	bne.n	80102ac <__libc_init_array+0x24>
 8010298:	4d0b      	ldr	r5, [pc, #44]	; (80102c8 <__libc_init_array+0x40>)
 801029a:	4c0c      	ldr	r4, [pc, #48]	; (80102cc <__libc_init_array+0x44>)
 801029c:	f000 f842 	bl	8010324 <_init>
 80102a0:	1b64      	subs	r4, r4, r5
 80102a2:	10a4      	asrs	r4, r4, #2
 80102a4:	2600      	movs	r6, #0
 80102a6:	42a6      	cmp	r6, r4
 80102a8:	d105      	bne.n	80102b6 <__libc_init_array+0x2e>
 80102aa:	bd70      	pop	{r4, r5, r6, pc}
 80102ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80102b0:	4798      	blx	r3
 80102b2:	3601      	adds	r6, #1
 80102b4:	e7ee      	b.n	8010294 <__libc_init_array+0xc>
 80102b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80102ba:	4798      	blx	r3
 80102bc:	3601      	adds	r6, #1
 80102be:	e7f2      	b.n	80102a6 <__libc_init_array+0x1e>
 80102c0:	0801062c 	.word	0x0801062c
 80102c4:	0801062c 	.word	0x0801062c
 80102c8:	0801062c 	.word	0x0801062c
 80102cc:	08010630 	.word	0x08010630

080102d0 <memcpy>:
 80102d0:	440a      	add	r2, r1
 80102d2:	4291      	cmp	r1, r2
 80102d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80102d8:	d100      	bne.n	80102dc <memcpy+0xc>
 80102da:	4770      	bx	lr
 80102dc:	b510      	push	{r4, lr}
 80102de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102e6:	4291      	cmp	r1, r2
 80102e8:	d1f9      	bne.n	80102de <memcpy+0xe>
 80102ea:	bd10      	pop	{r4, pc}

080102ec <memset>:
 80102ec:	4402      	add	r2, r0
 80102ee:	4603      	mov	r3, r0
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d100      	bne.n	80102f6 <memset+0xa>
 80102f4:	4770      	bx	lr
 80102f6:	f803 1b01 	strb.w	r1, [r3], #1
 80102fa:	e7f9      	b.n	80102f0 <memset+0x4>

080102fc <strncpy>:
 80102fc:	b510      	push	{r4, lr}
 80102fe:	3901      	subs	r1, #1
 8010300:	4603      	mov	r3, r0
 8010302:	b132      	cbz	r2, 8010312 <strncpy+0x16>
 8010304:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010308:	f803 4b01 	strb.w	r4, [r3], #1
 801030c:	3a01      	subs	r2, #1
 801030e:	2c00      	cmp	r4, #0
 8010310:	d1f7      	bne.n	8010302 <strncpy+0x6>
 8010312:	441a      	add	r2, r3
 8010314:	2100      	movs	r1, #0
 8010316:	4293      	cmp	r3, r2
 8010318:	d100      	bne.n	801031c <strncpy+0x20>
 801031a:	bd10      	pop	{r4, pc}
 801031c:	f803 1b01 	strb.w	r1, [r3], #1
 8010320:	e7f9      	b.n	8010316 <strncpy+0x1a>
	...

08010324 <_init>:
 8010324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010326:	bf00      	nop
 8010328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801032a:	bc08      	pop	{r3}
 801032c:	469e      	mov	lr, r3
 801032e:	4770      	bx	lr

08010330 <_fini>:
 8010330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010332:	bf00      	nop
 8010334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010336:	bc08      	pop	{r3}
 8010338:	469e      	mov	lr, r3
 801033a:	4770      	bx	lr
