
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001035c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08010524  08010524  00020524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801080c  0801080c  00030190  2**0
                  CONTENTS
  4 .ARM          00000008  0801080c  0801080c  0002080c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010814  08010814  00030190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010814  08010814  00020814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010818  08010818  00020818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0801081c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  20000190  080109ac  00030190  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  080109ac  000307c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032322  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec8  00000000  00000000  000624e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  000663b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a68  00000000  00000000  00067f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029216  00000000  00000000  000699e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026de9  00000000  00000000  00092bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6392  00000000  00000000  000b99e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001afd79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000799c  00000000  00000000  001afdcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000190 	.word	0x20000190
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0801050c 	.word	0x0801050c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000194 	.word	0x20000194
 8000204:	0801050c 	.word	0x0801050c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b96e 	b.w	8000e38 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8083 	bne.w	8000c8a <__udivmoddi4+0x116>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	4617      	mov	r7, r2
 8000b88:	d947      	bls.n	8000c1a <__udivmoddi4+0xa6>
 8000b8a:	fab2 f282 	clz	r2, r2
 8000b8e:	b142      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b90:	f1c2 0020 	rsb	r0, r2, #32
 8000b94:	fa24 f000 	lsr.w	r0, r4, r0
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	4097      	lsls	r7, r2
 8000b9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bac:	fa1f fe87 	uxth.w	lr, r7
 8000bb0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x60>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc6:	f080 8119 	bcs.w	8000dfc <__udivmoddi4+0x288>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 8116 	bls.w	8000dfc <__udivmoddi4+0x288>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	443b      	add	r3, r7
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x8c>
 8000bec:	193c      	adds	r4, r7, r4
 8000bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf2:	f080 8105 	bcs.w	8000e00 <__udivmoddi4+0x28c>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	f240 8102 	bls.w	8000e00 <__udivmoddi4+0x28c>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	443c      	add	r4, r7
 8000c00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c04:	eba4 040e 	sub.w	r4, r4, lr
 8000c08:	2600      	movs	r6, #0
 8000c0a:	b11d      	cbz	r5, 8000c14 <__udivmoddi4+0xa0>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c5 4300 	strd	r4, r3, [r5]
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	b902      	cbnz	r2, 8000c1e <__udivmoddi4+0xaa>
 8000c1c:	deff      	udf	#255	; 0xff
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d150      	bne.n	8000cc8 <__udivmoddi4+0x154>
 8000c26:	1bcb      	subs	r3, r1, r7
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f f887 	uxth.w	r8, r7
 8000c30:	2601      	movs	r6, #1
 8000c32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c36:	0c21      	lsrs	r1, r4, #16
 8000c38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c40:	fb08 f30c 	mul.w	r3, r8, ip
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0xe4>
 8000c48:	1879      	adds	r1, r7, r1
 8000c4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0xe2>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	f200 80e9 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c56:	4684      	mov	ip, r0
 8000c58:	1ac9      	subs	r1, r1, r3
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c68:	fb08 f800 	mul.w	r8, r8, r0
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x10c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x10a>
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	f200 80d9 	bhi.w	8000e30 <__udivmoddi4+0x2bc>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 0408 	sub.w	r4, r4, r8
 8000c84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c88:	e7bf      	b.n	8000c0a <__udivmoddi4+0x96>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d909      	bls.n	8000ca2 <__udivmoddi4+0x12e>
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <__udivmoddi4+0x282>
 8000c94:	2600      	movs	r6, #0
 8000c96:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f683 	clz	r6, r3
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d14a      	bne.n	8000d40 <__udivmoddi4+0x1cc>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0x140>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80b8 	bhi.w	8000e24 <__udivmoddi4+0x2b0>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	468c      	mov	ip, r1
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0a8      	beq.n	8000c14 <__udivmoddi4+0xa0>
 8000cc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc6:	e7a5      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd0:	4097      	lsls	r7, r2
 8000cd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cda:	40d9      	lsrs	r1, r3
 8000cdc:	4330      	orrs	r0, r6
 8000cde:	0c03      	lsrs	r3, r0, #16
 8000ce0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf0:	fb06 f108 	mul.w	r1, r6, r8
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x19c>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d02:	f080 808d 	bcs.w	8000e20 <__udivmoddi4+0x2ac>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 808a 	bls.w	8000e20 <__udivmoddi4+0x2ac>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	443b      	add	r3, r7
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b281      	uxth	r1, r0
 8000d14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d20:	fb00 f308 	mul.w	r3, r0, r8
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x1c4>
 8000d28:	1879      	adds	r1, r7, r1
 8000d2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2e:	d273      	bcs.n	8000e18 <__udivmoddi4+0x2a4>
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d971      	bls.n	8000e18 <__udivmoddi4+0x2a4>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4439      	add	r1, r7
 8000d38:	1acb      	subs	r3, r1, r3
 8000d3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3e:	e778      	b.n	8000c32 <__udivmoddi4+0xbe>
 8000d40:	f1c6 0c20 	rsb	ip, r6, #32
 8000d44:	fa03 f406 	lsl.w	r4, r3, r6
 8000d48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d4c:	431c      	orrs	r4, r3
 8000d4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d52:	fa01 f306 	lsl.w	r3, r1, r6
 8000d56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	0c3b      	lsrs	r3, r7, #16
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fa1f f884 	uxth.w	r8, r4
 8000d6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d72:	fb09 fa08 	mul.w	sl, r9, r8
 8000d76:	458a      	cmp	sl, r1
 8000d78:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x220>
 8000d82:	1861      	adds	r1, r4, r1
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	d248      	bcs.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	d946      	bls.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	4421      	add	r1, r4
 8000d94:	eba1 010a 	sub.w	r1, r1, sl
 8000d98:	b2bf      	uxth	r7, r7
 8000d9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da6:	fb00 f808 	mul.w	r8, r0, r8
 8000daa:	45b8      	cmp	r8, r7
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x24a>
 8000dae:	19e7      	adds	r7, r4, r7
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d22e      	bcs.n	8000e14 <__udivmoddi4+0x2a0>
 8000db6:	45b8      	cmp	r8, r7
 8000db8:	d92c      	bls.n	8000e14 <__udivmoddi4+0x2a0>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4427      	add	r7, r4
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	eba7 0708 	sub.w	r7, r7, r8
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	454f      	cmp	r7, r9
 8000dcc:	46c6      	mov	lr, r8
 8000dce:	4649      	mov	r1, r9
 8000dd0:	d31a      	bcc.n	8000e08 <__udivmoddi4+0x294>
 8000dd2:	d017      	beq.n	8000e04 <__udivmoddi4+0x290>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x27a>
 8000dd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dda:	eb67 0701 	sbc.w	r7, r7, r1
 8000dde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000de2:	40f2      	lsrs	r2, r6
 8000de4:	ea4c 0202 	orr.w	r2, ip, r2
 8000de8:	40f7      	lsrs	r7, r6
 8000dea:	e9c5 2700 	strd	r2, r7, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	462e      	mov	r6, r5
 8000df8:	4628      	mov	r0, r5
 8000dfa:	e70b      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	e6e9      	b.n	8000bd4 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fd      	b.n	8000c00 <__udivmoddi4+0x8c>
 8000e04:	4543      	cmp	r3, r8
 8000e06:	d2e5      	bcs.n	8000dd4 <__udivmoddi4+0x260>
 8000e08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e10:	3801      	subs	r0, #1
 8000e12:	e7df      	b.n	8000dd4 <__udivmoddi4+0x260>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e7d2      	b.n	8000dbe <__udivmoddi4+0x24a>
 8000e18:	4660      	mov	r0, ip
 8000e1a:	e78d      	b.n	8000d38 <__udivmoddi4+0x1c4>
 8000e1c:	4681      	mov	r9, r0
 8000e1e:	e7b9      	b.n	8000d94 <__udivmoddi4+0x220>
 8000e20:	4666      	mov	r6, ip
 8000e22:	e775      	b.n	8000d10 <__udivmoddi4+0x19c>
 8000e24:	4630      	mov	r0, r6
 8000e26:	e74a      	b.n	8000cbe <__udivmoddi4+0x14a>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	4439      	add	r1, r7
 8000e2e:	e713      	b.n	8000c58 <__udivmoddi4+0xe4>
 8000e30:	3802      	subs	r0, #2
 8000e32:	443c      	add	r4, r7
 8000e34:	e724      	b.n	8000c80 <__udivmoddi4+0x10c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000e3c:	b5b0      	push	{r4, r5, r7, lr}
 8000e3e:	b0a8      	sub	sp, #160	; 0xa0
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000e7e:	f00f fac7 	bl	8010410 <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	4aaa      	ldr	r2, [pc, #680]	; (8001130 <SERVO_Init+0x2f4>)
 8000e86:	015b      	lsls	r3, r3, #5
 8000e88:	4413      	add	r3, r2
 8000e8a:	3314      	adds	r3, #20
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fafc 	bl	800048c <__aeabi_ui2d>
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	4ba6      	ldr	r3, [pc, #664]	; (8001134 <SERVO_Init+0x2f8>)
 8000e9a:	f7ff fc9b 	bl	80007d4 <__aeabi_ddiv>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f7ff fe2d 	bl	8000b04 <__aeabi_d2uiz>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4a9f      	ldr	r2, [pc, #636]	; (8001130 <SERVO_Init+0x2f4>)
 8000eb4:	015b      	lsls	r3, r3, #5
 8000eb6:	4413      	add	r3, r2
 8000eb8:	3314      	adds	r3, #20
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fae5 	bl	800048c <__aeabi_ui2d>
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	460d      	mov	r5, r1
 8000ec6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000eca:	f7ff fadf 	bl	800048c <__aeabi_ui2d>
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	4b99      	ldr	r3, [pc, #612]	; (8001138 <SERVO_Init+0x2fc>)
 8000ed4:	f7ff f99e 	bl	8000214 <__adddf3>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	4b95      	ldr	r3, [pc, #596]	; (800113c <SERVO_Init+0x300>)
 8000ee6:	f7ff fb4b 	bl	8000580 <__aeabi_dmul>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4620      	mov	r0, r4
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	f7ff fc6f 	bl	80007d4 <__aeabi_ddiv>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	4b8d      	ldr	r3, [pc, #564]	; (8001138 <SERVO_Init+0x2fc>)
 8000f04:	f7ff f984 	bl	8000210 <__aeabi_dsub>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f7ff fdf8 	bl	8000b04 <__aeabi_d2uiz>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000f1a:	2313      	movs	r3, #19
 8000f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000f20:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4a81      	ldr	r2, [pc, #516]	; (8001130 <SERVO_Init+0x2f4>)
 8000f2c:	015b      	lsls	r3, r3, #5
 8000f2e:	4413      	add	r3, r2
 8000f30:	3308      	adds	r3, #8
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a82      	ldr	r2, [pc, #520]	; (8001140 <SERVO_Init+0x304>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d10e      	bne.n	8000f58 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	4b81      	ldr	r3, [pc, #516]	; (8001144 <SERVO_Init+0x308>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a80      	ldr	r2, [pc, #512]	; (8001144 <SERVO_Init+0x308>)
 8000f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b7e      	ldr	r3, [pc, #504]	; (8001144 <SERVO_Init+0x308>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	e046      	b.n	8000fe6 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	4a75      	ldr	r2, [pc, #468]	; (8001130 <SERVO_Init+0x2f4>)
 8000f5c:	015b      	lsls	r3, r3, #5
 8000f5e:	4413      	add	r3, r2
 8000f60:	3308      	adds	r3, #8
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f68:	d10e      	bne.n	8000f88 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	4b75      	ldr	r3, [pc, #468]	; (8001144 <SERVO_Init+0x308>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a74      	ldr	r2, [pc, #464]	; (8001144 <SERVO_Init+0x308>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b72      	ldr	r3, [pc, #456]	; (8001144 <SERVO_Init+0x308>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	e02e      	b.n	8000fe6 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	4a69      	ldr	r2, [pc, #420]	; (8001130 <SERVO_Init+0x2f4>)
 8000f8c:	015b      	lsls	r3, r3, #5
 8000f8e:	4413      	add	r3, r2
 8000f90:	3308      	adds	r3, #8
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a6c      	ldr	r2, [pc, #432]	; (8001148 <SERVO_Init+0x30c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d10e      	bne.n	8000fb8 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b69      	ldr	r3, [pc, #420]	; (8001144 <SERVO_Init+0x308>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a68      	ldr	r2, [pc, #416]	; (8001144 <SERVO_Init+0x308>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b66      	ldr	r3, [pc, #408]	; (8001144 <SERVO_Init+0x308>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	e016      	b.n	8000fe6 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	4a5d      	ldr	r2, [pc, #372]	; (8001130 <SERVO_Init+0x2f4>)
 8000fbc:	015b      	lsls	r3, r3, #5
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3308      	adds	r3, #8
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a61      	ldr	r2, [pc, #388]	; (800114c <SERVO_Init+0x310>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d10d      	bne.n	8000fe6 <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <SERVO_Init+0x308>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a5c      	ldr	r2, [pc, #368]	; (8001144 <SERVO_Init+0x308>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b5a      	ldr	r3, [pc, #360]	; (8001144 <SERVO_Init+0x308>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	4a51      	ldr	r2, [pc, #324]	; (8001130 <SERVO_Init+0x2f4>)
 8000fea:	015b      	lsls	r3, r3, #5
 8000fec:	4413      	add	r3, r2
 8000fee:	3308      	adds	r3, #8
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8000ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ff8:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 8000ffe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4618      	mov	r0, r3
 8001012:	f006 fc7d 	bl	8007910 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800101e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f007 fd27 	bl	8008a7c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4618      	mov	r0, r3
 8001034:	f006 fe22 	bl	8007c7c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8001044:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f008 fcb4 	bl	80099bc <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001054:	2360      	movs	r3, #96	; 0x60
 8001056:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105c:	2300      	movs	r3, #0
 800105e:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	4a32      	ldr	r2, [pc, #200]	; (8001130 <SERVO_Init+0x2f4>)
 8001068:	015b      	lsls	r3, r3, #5
 800106a:	4413      	add	r3, r2
 800106c:	3310      	adds	r3, #16
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4618      	mov	r0, r3
 800107a:	f007 fb27 	bl	80086cc <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 800107e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001082:	f7ff fa03 	bl	800048c <__aeabi_ui2d>
 8001086:	4604      	mov	r4, r0
 8001088:	460d      	mov	r5, r1
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	4a28      	ldr	r2, [pc, #160]	; (8001130 <SERVO_Init+0x2f4>)
 800108e:	015b      	lsls	r3, r3, #5
 8001090:	4413      	add	r3, r2
 8001092:	3318      	adds	r3, #24
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa1a 	bl	80004d0 <__aeabi_f2d>
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <SERVO_Init+0x314>)
 80010a2:	f7ff fb97 	bl	80007d4 <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4620      	mov	r0, r4
 80010ac:	4629      	mov	r1, r5
 80010ae:	f7ff fa67 	bl	8000580 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	88fc      	ldrh	r4, [r7, #6]
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd22 	bl	8000b04 <__aeabi_d2uiz>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <SERVO_Init+0x318>)
 80010c6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 80010ca:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80010ce:	f7ff f9dd 	bl	800048c <__aeabi_ui2d>
 80010d2:	4604      	mov	r4, r0
 80010d4:	460d      	mov	r5, r1
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <SERVO_Init+0x31c>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f9f9 	bl	80004d0 <__aeabi_f2d>
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <SERVO_Init+0x314>)
 80010e4:	f7ff fb76 	bl	80007d4 <__aeabi_ddiv>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4620      	mov	r0, r4
 80010ee:	4629      	mov	r1, r5
 80010f0:	f7ff fa46 	bl	8000580 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	88fc      	ldrh	r4, [r7, #6]
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fd01 	bl	8000b04 <__aeabi_d2uiz>
 8001102:	4603      	mov	r3, r0
 8001104:	b299      	uxth	r1, r3
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <SERVO_Init+0x318>)
 8001108:	00a3      	lsls	r3, r4, #2
 800110a:	4413      	add	r3, r2
 800110c:	460a      	mov	r2, r1
 800110e:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <SERVO_Init+0x2f4>)
 8001114:	015b      	lsls	r3, r3, #5
 8001116:	4413      	add	r3, r2
 8001118:	3310      	adds	r3, #16
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f006 fe9a 	bl	8007e5c <HAL_TIM_PWM_Start>

}
 8001128:	bf00      	nop
 800112a:	37a0      	adds	r7, #160	; 0xa0
 800112c:	46bd      	mov	sp, r7
 800112e:	bdb0      	pop	{r4, r5, r7, pc}
 8001130:	080107a4 	.word	0x080107a4
 8001134:	41490000 	.word	0x41490000
 8001138:	3ff00000 	.word	0x3ff00000
 800113c:	40490000 	.word	0x40490000
 8001140:	40001800 	.word	0x40001800
 8001144:	40023800 	.word	0x40023800
 8001148:	40000400 	.word	0x40000400
 800114c:	40000800 	.word	0x40000800
 8001150:	40340000 	.word	0x40340000
 8001154:	200001ac 	.word	0x200001ac
 8001158:	40066666 	.word	0x40066666

0800115c <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 800115c:	b5b0      	push	{r4, r5, r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	ed87 0a00 	vstr	s0, [r7]
 8001168:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	4a1f      	ldr	r2, [pc, #124]	; (80011f0 <SERVO_MoveTo+0x94>)
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	885b      	ldrh	r3, [r3, #2]
 8001178:	4619      	mov	r1, r3
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <SERVO_MoveTo+0x94>)
 800117e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001182:	1acb      	subs	r3, r1, r3
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118c:	edd7 7a00 	vldr	s15, [r7]
 8001190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001194:	ee17 0a90 	vmov	r0, s15
 8001198:	f7ff f99a 	bl	80004d0 <__aeabi_f2d>
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <SERVO_MoveTo+0x98>)
 80011a2:	f7ff fb17 	bl	80007d4 <__aeabi_ddiv>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4614      	mov	r4, r2
 80011ac:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <SERVO_MoveTo+0x94>)
 80011b2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f978 	bl	80004ac <__aeabi_i2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f826 	bl	8000214 <__adddf3>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fc98 	bl	8000b04 <__aeabi_d2uiz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <SERVO_MoveTo+0x9c>)
 80011dc:	015b      	lsls	r3, r3, #5
 80011de:	4413      	add	r3, r2
 80011e0:	330c      	adds	r3, #12
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	89fa      	ldrh	r2, [r7, #14]
 80011e6:	601a      	str	r2, [r3, #0]
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bdb0      	pop	{r4, r5, r7, pc}
 80011f0:	200001ac 	.word	0x200001ac
 80011f4:	40668000 	.word	0x40668000
 80011f8:	080107a4 	.word	0x080107a4

080011fc <HAL_UART_RxCpltCallback>:
void Kovetendo_vonal_valaszto(double* elso, double* hatso);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
			bluetooth_flag = 1;
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
		bluetooth_a++;
	}
	HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);*/
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a11      	ldr	r2, [pc, #68]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d11a      	bne.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x46>
		timer_counter += 1;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800122a:	701a      	strb	r2, [r3, #0]
		if(49 < timer_counter) {
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b31      	cmp	r3, #49	; 0x31
 8001232:	d910      	bls.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x46>
			Vonalas_tombok_torlese();
 8001234:	f001 fb40 	bl	80028b8 <Vonalas_tombok_torlese>
			Vonalszenzor_operal(vonal_eredmeny_h, vonal_eredmeny_e);
 8001238:	490b      	ldr	r1, [pc, #44]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800123c:	f000 fed6 	bl	8001fec <Vonalszenzor_operal>
			Vonalas_tombok_feltoltese();
 8001240:	f001 fb90 	bl	8002964 <Vonalas_tombok_feltoltese>
			Kovetendo_vonal_valaszto(&vonal_kovetni_e, &vonal_kovetni_h);
 8001244:	490a      	ldr	r1, [pc, #40]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001246:	480b      	ldr	r0, [pc, #44]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001248:	f001 fc2a 	bl	8002aa0 <Kovetendo_vonal_valaszto>
			Szervo_szog_beallit();
 800124c:	f001 fd22 	bl	8002c94 <Szervo_szog_beallit>
			timer_counter = 0;
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
				kanyarban_vagy_egyenes);
		bluetooth_i++;
		bluetooth_len = strlen(bluetooth_buffer);
		//HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);*/
	}
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200005ec 	.word	0x200005ec
 8001264:	20000220 	.word	0x20000220
 8001268:	200001d8 	.word	0x200001d8
 800126c:	200001b4 	.word	0x200001b4
 8001270:	20000200 	.word	0x20000200
 8001274:	20000208 	.word	0x20000208

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 800127e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t tavolsag1_buff[50];
	VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_Dev_t vl53l1_c; // center module
	VL53L1_DEV Dev = &vl53l1_c;
 8001280:	463b      	mov	r3, r7
 8001282:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001286:	f002 faed 	bl	8003864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128a:	f000 f981 	bl	8001590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128e:	f000 fdd1 	bl	8001e34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001292:	f000 fd85 	bl	8001da0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001296:	f000 f9ed 	bl	8001674 <MX_I2C1_Init>
  MX_I2C2_Init();
 800129a:	f000 fa19 	bl	80016d0 <MX_I2C2_Init>
  MX_SPI2_Init();
 800129e:	f000 faa9 	bl	80017f4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012a2:	f000 fadd 	bl	8001860 <MX_SPI3_Init>
  MX_TIM3_Init();
 80012a6:	f000 fb5d 	bl	8001964 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012aa:	f000 fbb5 	bl	8001a18 <MX_TIM4_Init>
  MX_UART4_Init();
 80012ae:	f000 fd23 	bl	8001cf8 <MX_UART4_Init>
  MX_TIM8_Init();
 80012b2:	f000 fc05 	bl	8001ac0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80012b6:	f000 fd49 	bl	8001d4c <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80012ba:	f000 fa37 	bl	800172c <MX_I2C3_Init>
  MX_TIM12_Init();
 80012be:	f000 fcab 	bl	8001c18 <MX_TIM12_Init>
  MX_DMA_Init();
 80012c2:	f000 fd97 	bl	8001df4 <MX_DMA_Init>
  MX_TIM2_Init();
 80012c6:	f000 fb01 	bl	80018cc <MX_TIM2_Init>
  MX_SPI1_Init();
 80012ca:	f000 fa5d 	bl	8001788 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init(SZERVO);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fdb4 	bl	8000e3c <SERVO_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM1);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f00e ff0d 	bl	80100f4 <DC_MOTOR_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM2);
 80012da:	2001      	movs	r0, #1
 80012dc:	f00e ff0a 	bl	80100f4 <DC_MOTOR_Init>
	DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2000      	movs	r0, #0
 80012e4:	f00e ffdc 	bl	80102a0 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	2001      	movs	r0, #1
 80012ec:	f00e ffd8 	bl	80102a0 <DC_MOTOR_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);		// motvez EN
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f6:	489a      	ldr	r0, [pc, #616]	; (8001560 <main+0x2e8>)
 80012f8:	f003 fc98 	bl	8004c2c <HAL_GPIO_WritePin>
	motvez_k = 440;
 80012fc:	4b99      	ldr	r3, [pc, #612]	; (8001564 <main+0x2ec>)
 80012fe:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001302:	601a      	str	r2, [r3, #0]

	Vonalszenzor_minta_kuldes(leszed);
 8001304:	4898      	ldr	r0, [pc, #608]	; (8001568 <main+0x2f0>)
 8001306:	f001 faaf 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(teszt_minta);		//csak hogy lassuk, hogy bekapcsolt
 800130a:	4898      	ldr	r0, [pc, #608]	; (800156c <main+0x2f4>)
 800130c:	f001 faac 	bl	8002868 <Vonalszenzor_minta_kuldes>
	HAL_Delay(500);
 8001310:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001314:	f002 fb18 	bl	8003948 <HAL_Delay>
	Vonalszenzor_minta_kuldes(leszed);
 8001318:	4893      	ldr	r0, [pc, #588]	; (8001568 <main+0x2f0>)
 800131a:	f001 faa5 	bl	8002868 <Vonalszenzor_minta_kuldes>
	//HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);
	HAL_TIM_Base_Start_IT(&htim2);
 800131e:	4894      	ldr	r0, [pc, #592]	; (8001570 <main+0x2f8>)
 8001320:	f006 fbe6 	bl	8007af0 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 8001324:	2104      	movs	r1, #4
 8001326:	4893      	ldr	r0, [pc, #588]	; (8001574 <main+0x2fc>)
 8001328:	f006 fd98 	bl	8007e5c <HAL_TIM_PWM_Start>

	//Vonalszenzor inicializacio
	Vonalszenzor_Init();
 800132c:	f000 fe4c 	bl	8001fc8 <Vonalszenzor_Init>


	// initialize vl53l1x communication parameters
	Dev->I2cHandle = &hi2c1;
 8001330:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001334:	4a90      	ldr	r2, [pc, #576]	; (8001578 <main+0x300>)
 8001336:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev->I2cDevAddr = 0x52;
 800133a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800133e:	2252      	movs	r2, #82	; 0x52
 8001340:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	/*** Initialize GPIO expanders ***/
	// Unused GPIO should be configured as outputs to minimize the power consumption
	tavolsag1_buff[0] = 0x14; // GPDR (GPIO set direction register)
 8001344:	2314      	movs	r3, #20
 8001346:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	tavolsag1_buff[1] = 0xFF; // GPIO_0 - GPIO_7
 800134a:	23ff      	movs	r3, #255	; 0xff
 800134c:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
	tavolsag1_buff[2] = 0xFF; // GPIO_8 - GPIO_15
 8001350:	23ff      	movs	r3, #255	; 0xff
 8001352:	f887 33c2 	strb.w	r3, [r7, #962]	; 0x3c2
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 3, 0xFFFF );
 8001356:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 800135a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2303      	movs	r3, #3
 8001362:	2184      	movs	r1, #132	; 0x84
 8001364:	4884      	ldr	r0, [pc, #528]	; (8001578 <main+0x300>)
 8001366:	f003 fe77 	bl	8005058 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_2_ADDR, tavolsag1_buff, 3, 0xFFFF );
 800136a:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 800136e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2303      	movs	r3, #3
 8001376:	2186      	movs	r1, #134	; 0x86
 8001378:	487f      	ldr	r0, [pc, #508]	; (8001578 <main+0x300>)
 800137a:	f003 fe6d 	bl	8005058 <HAL_I2C_Master_Transmit>

	// clear XSHUT (disable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 800137e:	2313      	movs	r3, #19
 8001380:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 8001384:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8001388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	2184      	movs	r1, #132	; 0x84
 8001392:	4879      	ldr	r0, [pc, #484]	; (8001578 <main+0x300>)
 8001394:	f003 fe60 	bl	8005058 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 8001398:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 800139c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	2184      	movs	r1, #132	; 0x84
 80013a6:	4874      	ldr	r0, [pc, #464]	; (8001578 <main+0x300>)
 80013a8:	f003 ff54 	bl	8005254 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 80013ac:	f897 33c0 	ldrb.w	r3, [r7, #960]	; 0x3c0
 80013b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 80013ba:	2313      	movs	r3, #19
 80013bc:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 80013c0:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 80013c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2302      	movs	r3, #2
 80013cc:	2184      	movs	r1, #132	; 0x84
 80013ce:	486a      	ldr	r0, [pc, #424]	; (8001578 <main+0x300>)
 80013d0:	f003 fe42 	bl	8005058 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 ); // 2ms reset time
 80013d4:	2002      	movs	r0, #2
 80013d6:	f002 fab7 	bl	8003948 <HAL_Delay>

	// set XSHUT (enable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state)
 80013da:	2313      	movs	r3, #19
 80013dc:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 80013e0:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 80013e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	2184      	movs	r1, #132	; 0x84
 80013ee:	4862      	ldr	r0, [pc, #392]	; (8001578 <main+0x300>)
 80013f0:	f003 fe32 	bl	8005058 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 80013f4:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 80013f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	2184      	movs	r1, #132	; 0x84
 8001402:	485d      	ldr	r0, [pc, #372]	; (8001578 <main+0x300>)
 8001404:	f003 ff26 	bl	8005254 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 8001408:	f897 33c0 	ldrb.w	r3, [r7, #960]	; 0x3c0
 800140c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001410:	b2db      	uxtb	r3, r3
 8001412:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001416:	2313      	movs	r3, #19
 8001418:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 800141c:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8001420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2302      	movs	r3, #2
 8001428:	2184      	movs	r1, #132	; 0x84
 800142a:	4853      	ldr	r0, [pc, #332]	; (8001578 <main+0x300>)
 800142c:	f003 fe14 	bl	8005058 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 );
 8001430:	2002      	movs	r0, #2
 8001432:	f002 fa89 	bl	8003948 <HAL_Delay>

	/*** VL53L1X Initialization ***/
	VL53L1_WaitDeviceBooted( Dev );
 8001436:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 800143a:	f009 fc01 	bl	800ac40 <VL53L1_WaitDeviceBooted>
	VL53L1_DataInit( Dev );
 800143e:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8001442:	f009 fba5 	bl	800ab90 <VL53L1_DataInit>
	VL53L1_StaticInit( Dev );
 8001446:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 800144a:	f009 fbda 	bl	800ac02 <VL53L1_StaticInit>
	VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 800144e:	2103      	movs	r1, #3
 8001450:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8001454:	f009 fd26 	bl	800aea4 <VL53L1_SetDistanceMode>
	VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 8001458:	f24c 3150 	movw	r1, #50000	; 0xc350
 800145c:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8001460:	f009 fd96 	bl	800af90 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 8001464:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001468:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 800146c:	f009 ff1c 	bl	800b2a8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
	VL53L1_StartMeasurement( Dev );
 8001470:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8001474:	f00a f856 	bl	800b524 <VL53L1_StartMeasurement>
		//uint8_t Test[] = "Hello World\r\n"; //Data to send
		/*int size = sizeof(minta1);
		HAL_UART_Transmit(&huart2, minta1, size, 100);// Sending in normal mode
		HAL_Delay(1000);*/

		VL53L1_WaitMeasurementDataReady( Dev );
 8001478:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 800147c:	f00a f8d4 	bl	800b628 <VL53L1_WaitMeasurementDataReady>
		VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 8001480:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8001484:	4619      	mov	r1, r3
 8001486:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 800148a:	f00a fa89 	bl	800b9a0 <VL53L1_GetRangingMeasurementData>
		/*sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
				 ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
		HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );*/
		VL53L1_ClearInterruptAndStartMeasurement( Dev );
 800148e:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8001492:	f00a f8b3 	bl	800b5fc <VL53L1_ClearInterruptAndStartMeasurement>

		//Szervo
		Szervo_szog_beallit();
 8001496:	f001 fbfd 	bl	8002c94 <Szervo_szog_beallit>

		if (btnEnable == 1) {
 800149a:	4b38      	ldr	r3, [pc, #224]	; (800157c <main+0x304>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d13b      	bne.n	800151a <main+0x2a2>
			if (motvezEnable == 1) {
 80014a2:	4b37      	ldr	r3, [pc, #220]	; (8001580 <main+0x308>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d1e6      	bne.n	8001478 <main+0x200>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, k); // ha pwm1 nagyobb, hatramenet
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - k);
					HAL_Delay(200);
				}*/

				if (30 < veretesi_cnt) {// && fekezes_cnt < 80) {
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <main+0x30c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b1e      	cmp	r3, #30
 80014b0:	dd16      	ble.n	80014e0 <main+0x268>
					while (415 < motvez_k) {
 80014b2:	e007      	b.n	80014c4 <main+0x24c>
						motvez_k -= 5;
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <main+0x2ec>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3b05      	subs	r3, #5
 80014ba:	4a2a      	ldr	r2, [pc, #168]	; (8001564 <main+0x2ec>)
 80014bc:	6013      	str	r3, [r2, #0]
						HAL_Delay(50);
 80014be:	2032      	movs	r0, #50	; 0x32
 80014c0:	f002 fa42 	bl	8003948 <HAL_Delay>
					while (415 < motvez_k) {
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <main+0x2ec>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 80014cc:	daf2      	bge.n	80014b4 <main+0x23c>
 80014ce:	e00c      	b.n	80014ea <main+0x272>
					}
				} else {
					while (motvez_k < 450) {
						motvez_k += 5;	// 0 - 1023-ig 440 a minimum, az alatt karos a motornak
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <main+0x2ec>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3305      	adds	r3, #5
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <main+0x2ec>)
 80014d8:	6013      	str	r3, [r2, #0]
						HAL_Delay(5);
 80014da:	2005      	movs	r0, #5
 80014dc:	f002 fa34 	bl	8003948 <HAL_Delay>
					while (motvez_k < 450) {
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <main+0x2ec>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80014e8:	dbf2      	blt.n	80014d0 <main+0x258>
					}
				}
				if (motvez_k) {							// motvez_d / 2 -nel nagyobb a hatramenet, pl. 900: gyors tolatás
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <main+0x2ec>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0c2      	beq.n	8001478 <main+0x200>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_k); 		// ha pwm1 nagyobb, hatramenet
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <main+0x2ec>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4619      	mov	r1, r3
 80014fa:	2000      	movs	r0, #0
 80014fc:	f00e ff2c 	bl	8010358 <DC_MOTOR_Set_Speed>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - motvez_k);
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <main+0x310>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <main+0x2ec>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	b29b      	uxth	r3, r3
 8001510:	4619      	mov	r1, r3
 8001512:	2001      	movs	r0, #1
 8001514:	f00e ff20 	bl	8010358 <DC_MOTOR_Set_Speed>
 8001518:	e7ae      	b.n	8001478 <main+0x200>
				}
			}
		} else {
			veretesi_cnt = 0;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <main+0x30c>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
			SERVO_MoveTo(SZERVO, 90);
 8001520:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800158c <main+0x314>
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff fe19 	bl	800115c <SERVO_MoveTo>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_d / 2);	// ez a ketto a megallas
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <main+0x310>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0fda      	lsrs	r2, r3, #31
 8001530:	4413      	add	r3, r2
 8001532:	105b      	asrs	r3, r3, #1
 8001534:	b29b      	uxth	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	2000      	movs	r0, #0
 800153a:	f00e ff0d 	bl	8010358 <DC_MOTOR_Set_Speed>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - (motvez_d / 2));
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <main+0x310>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0fda      	lsrs	r2, r3, #31
 8001544:	4413      	add	r3, r2
 8001546:	105b      	asrs	r3, r3, #1
 8001548:	425b      	negs	r3, r3
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <main+0x310>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	4413      	add	r3, r2
 8001554:	b29b      	uxth	r3, r3
 8001556:	4619      	mov	r1, r3
 8001558:	2001      	movs	r0, #1
 800155a:	f00e fefd 	bl	8010358 <DC_MOTOR_Set_Speed>
		VL53L1_WaitMeasurementDataReady( Dev );
 800155e:	e78b      	b.n	8001478 <main+0x200>
 8001560:	40020400 	.word	0x40020400
 8001564:	20000214 	.word	0x20000214
 8001568:	20000004 	.word	0x20000004
 800156c:	2000000c 	.word	0x2000000c
 8001570:	200005ec 	.word	0x200005ec
 8001574:	20000678 	.word	0x20000678
 8001578:	20000364 	.word	0x20000364
 800157c:	200001b0 	.word	0x200001b0
 8001580:	20000001 	.word	0x20000001
 8001584:	20000218 	.word	0x20000218
 8001588:	20000150 	.word	0x20000150
 800158c:	42b40000 	.word	0x42b40000

08001590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b094      	sub	sp, #80	; 0x50
 8001594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	2234      	movs	r2, #52	; 0x34
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f00e ff98 	bl	80104d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <SystemClock_Config+0xdc>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a2b      	ldr	r2, [pc, #172]	; (800166c <SystemClock_Config+0xdc>)
 80015be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <SystemClock_Config+0xdc>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d0:	2300      	movs	r3, #0
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <SystemClock_Config+0xe0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a25      	ldr	r2, [pc, #148]	; (8001670 <SystemClock_Config+0xe0>)
 80015da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <SystemClock_Config+0xe0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f6:	2302      	movs	r3, #2
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001600:	2304      	movs	r3, #4
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001604:	23b4      	movs	r3, #180	; 0xb4
 8001606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001608:	2302      	movs	r3, #2
 800160a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800160c:	2302      	movs	r3, #2
 800160e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001610:	2302      	movs	r3, #2
 8001612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4618      	mov	r0, r3
 800161a:	f004 ff4b 	bl	80064b4 <HAL_RCC_OscConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001624:	f001 fbb4 	bl	8002d90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001628:	f004 fb68 	bl	8005cfc <HAL_PWREx_EnableOverDrive>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001632:	f001 fbad 	bl	8002d90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001636:	230f      	movs	r3, #15
 8001638:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163a:	2302      	movs	r3, #2
 800163c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001642:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800164c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	2105      	movs	r1, #5
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fba1 	bl	8005d9c <HAL_RCC_ClockConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001660:	f001 fb96 	bl	8002d90 <Error_Handler>
  }
}
 8001664:	bf00      	nop
 8001666:	3750      	adds	r7, #80	; 0x50
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40007000 	.word	0x40007000

08001674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <MX_I2C1_Init+0x50>)
 800167a:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <MX_I2C1_Init+0x54>)
 800167c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_I2C1_Init+0x50>)
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <MX_I2C1_Init+0x58>)
 8001682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_I2C1_Init+0x50>)
 8001692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <MX_I2C1_Init+0x50>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_I2C1_Init+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <MX_I2C1_Init+0x50>)
 80016b2:	f003 fb05 	bl	8004cc0 <HAL_I2C_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016bc:	f001 fb68 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000364 	.word	0x20000364
 80016c8:	40005400 	.word	0x40005400
 80016cc:	000186a0 	.word	0x000186a0

080016d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_I2C2_Init+0x50>)
 80016d6:	4a13      	ldr	r2, [pc, #76]	; (8001724 <MX_I2C2_Init+0x54>)
 80016d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_I2C2_Init+0x50>)
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <MX_I2C2_Init+0x58>)
 80016de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_I2C2_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_I2C2_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_I2C2_Init+0x50>)
 80016ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <MX_I2C2_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_I2C2_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <MX_I2C2_Init+0x50>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_I2C2_Init+0x50>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <MX_I2C2_Init+0x50>)
 800170e:	f003 fad7 	bl	8004cc0 <HAL_I2C_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001718:	f001 fb3a 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200003b8 	.word	0x200003b8
 8001724:	40005800 	.word	0x40005800
 8001728:	000186a0 	.word	0x000186a0

0800172c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_I2C3_Init+0x50>)
 8001732:	4a13      	ldr	r2, [pc, #76]	; (8001780 <MX_I2C3_Init+0x54>)
 8001734:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_I2C3_Init+0x50>)
 8001738:	4a12      	ldr	r2, [pc, #72]	; (8001784 <MX_I2C3_Init+0x58>)
 800173a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_I2C3_Init+0x50>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_I2C3_Init+0x50>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_I2C3_Init+0x50>)
 800174a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800174e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <MX_I2C3_Init+0x50>)
 8001752:	2200      	movs	r2, #0
 8001754:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_I2C3_Init+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <MX_I2C3_Init+0x50>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_I2C3_Init+0x50>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <MX_I2C3_Init+0x50>)
 800176a:	f003 faa9 	bl	8004cc0 <HAL_I2C_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001774:	f001 fb0c 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000228 	.word	0x20000228
 8001780:	40005c00 	.word	0x40005c00
 8001784:	000186a0 	.word	0x000186a0

08001788 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <MX_SPI1_Init+0x64>)
 800178e:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <MX_SPI1_Init+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <MX_SPI1_Init+0x64>)
 8001794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_SPI1_Init+0x64>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_SPI1_Init+0x64>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_SPI1_Init+0x64>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_SPI1_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_SPI1_Init+0x64>)
 80017b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_SPI1_Init+0x64>)
 80017bc:	2220      	movs	r2, #32
 80017be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <MX_SPI1_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_SPI1_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <MX_SPI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_SPI1_Init+0x64>)
 80017d4:	220a      	movs	r2, #10
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <MX_SPI1_Init+0x64>)
 80017da:	f005 f9c9 	bl	8006b70 <HAL_SPI_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017e4:	f001 fad4 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000594 	.word	0x20000594
 80017f0:	40013000 	.word	0x40013000

080017f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <MX_SPI2_Init+0x64>)
 80017fa:	4a18      	ldr	r2, [pc, #96]	; (800185c <MX_SPI2_Init+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_SPI2_Init+0x64>)
 8001800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001804:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_SPI2_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_SPI2_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_SPI2_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_SPI2_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_SPI2_Init+0x64>)
 8001820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001824:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_SPI2_Init+0x64>)
 8001828:	2218      	movs	r2, #24
 800182a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <MX_SPI2_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_SPI2_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <MX_SPI2_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_SPI2_Init+0x64>)
 8001840:	220a      	movs	r2, #10
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_SPI2_Init+0x64>)
 8001846:	f005 f993 	bl	8006b70 <HAL_SPI_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001850:	f001 fa9e 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2000027c 	.word	0x2000027c
 800185c:	40003800 	.word	0x40003800

08001860 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <MX_SPI3_Init+0x64>)
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <MX_SPI3_Init+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_SPI3_Init+0x64>)
 800186c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001870:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_SPI3_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_SPI3_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_SPI3_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_SPI3_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_SPI3_Init+0x64>)
 800188c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001890:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_SPI3_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_SPI3_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_SPI3_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_SPI3_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_SPI3_Init+0x64>)
 80018ac:	220a      	movs	r2, #10
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_SPI3_Init+0x64>)
 80018b2:	f005 f95d 	bl	8006b70 <HAL_SPI_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80018bc:	f001 fa68 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000454 	.word	0x20000454
 80018c8:	40003c00 	.word	0x40003c00

080018cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_TIM2_Init+0x94>)
 80018ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <MX_TIM2_Init+0x94>)
 80018f2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80018f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <MX_TIM2_Init+0x94>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_TIM2_Init+0x94>)
 8001900:	2259      	movs	r2, #89	; 0x59
 8001902:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_TIM2_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_TIM2_Init+0x94>)
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001910:	4813      	ldr	r0, [pc, #76]	; (8001960 <MX_TIM2_Init+0x94>)
 8001912:	f005 fffd 	bl	8007910 <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800191c:	f001 fa38 	bl	8002d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4619      	mov	r1, r3
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <MX_TIM2_Init+0x94>)
 800192e:	f007 f8a5 	bl	8008a7c <HAL_TIM_ConfigClockSource>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001938:	f001 fa2a 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_TIM2_Init+0x94>)
 800194a:	f008 f837 	bl	80099bc <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001954:	f001 fa1c 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200005ec 	.word	0x200005ec

08001964 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	615a      	str	r2, [r3, #20]
 8001984:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <MX_TIM3_Init+0xac>)
 8001988:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <MX_TIM3_Init+0xb0>)
 800198a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <MX_TIM3_Init+0xac>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <MX_TIM3_Init+0xac>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_TIM3_Init+0xac>)
 800199a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_TIM3_Init+0xac>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_TIM3_Init+0xac>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019ac:	4818      	ldr	r0, [pc, #96]	; (8001a10 <MX_TIM3_Init+0xac>)
 80019ae:	f006 f965 	bl	8007c7c <HAL_TIM_PWM_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80019b8:	f001 f9ea 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019c4:	f107 0320 	add.w	r3, r7, #32
 80019c8:	4619      	mov	r1, r3
 80019ca:	4811      	ldr	r0, [pc, #68]	; (8001a10 <MX_TIM3_Init+0xac>)
 80019cc:	f007 fff6 	bl	80099bc <HAL_TIMEx_MasterConfigSynchronization>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80019d6:	f001 f9db 	bl	8002d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019da:	2360      	movs	r3, #96	; 0x60
 80019dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2200      	movs	r2, #0
 80019ee:	4619      	mov	r1, r3
 80019f0:	4807      	ldr	r0, [pc, #28]	; (8001a10 <MX_TIM3_Init+0xac>)
 80019f2:	f006 fe6b 	bl	80086cc <HAL_TIM_PWM_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80019fc:	f001 f9c8 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a00:	4803      	ldr	r0, [pc, #12]	; (8001a10 <MX_TIM3_Init+0xac>)
 8001a02:	f001 fd1d 	bl	8003440 <HAL_TIM_MspPostInit>

}
 8001a06:	bf00      	nop
 8001a08:	3728      	adds	r7, #40	; 0x28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000040c 	.word	0x2000040c
 8001a14:	40000400 	.word	0x40000400

08001a18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	2224      	movs	r2, #36	; 0x24
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f00e fd54 	bl	80104d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <MX_TIM4_Init+0xa0>)
 8001a36:	4a21      	ldr	r2, [pc, #132]	; (8001abc <MX_TIM4_Init+0xa4>)
 8001a38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <MX_TIM4_Init+0xa0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_TIM4_Init+0xa0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <MX_TIM4_Init+0xa0>)
 8001a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_TIM4_Init+0xa0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_TIM4_Init+0xa0>)
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a62:	2301      	movs	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a72:	2301      	movs	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <MX_TIM4_Init+0xa0>)
 8001a86:	f006 fb71 	bl	800816c <HAL_TIM_Encoder_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001a90:	f001 f97e 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_TIM4_Init+0xa0>)
 8001aa2:	f007 ff8b 	bl	80099bc <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001aac:	f001 f970 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3730      	adds	r7, #48	; 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000031c 	.word	0x2000031c
 8001abc:	40000800 	.word	0x40000800

08001ac0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b096      	sub	sp, #88	; 0x58
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
 8001aee:	615a      	str	r2, [r3, #20]
 8001af0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2220      	movs	r2, #32
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f00e fceb 	bl	80104d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001afe:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001b00:	4a44      	ldr	r2, [pc, #272]	; (8001c14 <MX_TIM8_Init+0x154>)
 8001b02:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b04:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001b0a:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001b0c:	2260      	movs	r2, #96	; 0x60
 8001b0e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b10:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b16:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b18:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001b1e:	4b3c      	ldr	r3, [pc, #240]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b24:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b2a:	4839      	ldr	r0, [pc, #228]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001b2c:	f005 fef0 	bl	8007910 <HAL_TIM_Base_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001b36:	f001 f92b 	bl	8002d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b44:	4619      	mov	r1, r3
 8001b46:	4832      	ldr	r0, [pc, #200]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001b48:	f006 ff98 	bl	8008a7c <HAL_TIM_ConfigClockSource>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b52:	f001 f91d 	bl	8002d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b56:	482e      	ldr	r0, [pc, #184]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001b58:	f006 f890 	bl	8007c7c <HAL_TIM_PWM_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001b62:	f001 f915 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b72:	4619      	mov	r1, r3
 8001b74:	4826      	ldr	r0, [pc, #152]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001b76:	f007 ff21 	bl	80099bc <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001b80:	f001 f906 	bl	8002d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b84:	2360      	movs	r3, #96	; 0x60
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b90:	2300      	movs	r3, #0
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4819      	ldr	r0, [pc, #100]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001baa:	f006 fd8f 	bl	80086cc <HAL_TIM_PWM_ConfigChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001bb4:	f001 f8ec 	bl	8002d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4813      	ldr	r0, [pc, #76]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001bc2:	f006 fd83 	bl	80086cc <HAL_TIM_PWM_ConfigChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001bcc:	f001 f8e0 	bl	8002d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4807      	ldr	r0, [pc, #28]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001bf4:	f007 ffc0 	bl	8009b78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001bfe:	f001 f8c7 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

	//Itt kell megivni a DC_MOTOR_Init() -et
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c02:	4803      	ldr	r0, [pc, #12]	; (8001c10 <MX_TIM8_Init+0x150>)
 8001c04:	f001 fc1c 	bl	8003440 <HAL_TIM_MspPostInit>

}
 8001c08:	bf00      	nop
 8001c0a:	3758      	adds	r7, #88	; 0x58
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200002d4 	.word	0x200002d4
 8001c14:	40010400 	.word	0x40010400

08001c18 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	; 0x30
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1e:	f107 0320 	add.w	r3, r7, #32
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]
 8001c3a:	615a      	str	r2, [r3, #20]
 8001c3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001c3e:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001c40:	4a2c      	ldr	r2, [pc, #176]	; (8001cf4 <MX_TIM12_Init+0xdc>)
 8001c42:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001c46:	2213      	movs	r2, #19
 8001c48:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001c52:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001c56:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001c64:	4822      	ldr	r0, [pc, #136]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001c66:	f005 fe53 	bl	8007910 <HAL_TIM_Base_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001c70:	f001 f88e 	bl	8002d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c78:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001c7a:	f107 0320 	add.w	r3, r7, #32
 8001c7e:	4619      	mov	r1, r3
 8001c80:	481b      	ldr	r0, [pc, #108]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001c82:	f006 fefb 	bl	8008a7c <HAL_TIM_ConfigClockSource>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001c8c:	f001 f880 	bl	8002d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001c90:	4817      	ldr	r0, [pc, #92]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001c92:	f005 fff3 	bl	8007c7c <HAL_TIM_PWM_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001c9c:	f001 f878 	bl	8002d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca0:	2360      	movs	r3, #96	; 0x60
 8001ca2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480e      	ldr	r0, [pc, #56]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001cb8:	f006 fd08 	bl	80086cc <HAL_TIM_PWM_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001cc2:	f001 f865 	bl	8002d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2204      	movs	r2, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4808      	ldr	r0, [pc, #32]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001cce:	f006 fcfd 	bl	80086cc <HAL_TIM_PWM_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001cd8:	f001 f85a 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	HAL_TIM_Base_Start_IT(&htim12);
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001cde:	f005 ff07 	bl	8007af0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001ce2:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <MX_TIM12_Init+0xd8>)
 8001ce4:	f001 fbac 	bl	8003440 <HAL_TIM_MspPostInit>

}
 8001ce8:	bf00      	nop
 8001cea:	3730      	adds	r7, #48	; 0x30
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000678 	.word	0x20000678
 8001cf4:	40001800 	.word	0x40001800

08001cf8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_UART4_Init+0x4c>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <MX_UART4_Init+0x50>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_UART4_Init+0x4c>)
 8001d04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_UART4_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_UART4_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <MX_UART4_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_UART4_Init+0x4c>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <MX_UART4_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_UART4_Init+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_UART4_Init+0x4c>)
 8001d30:	f008 f802 	bl	8009d38 <HAL_UART_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001d3a:	f001 f829 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000550 	.word	0x20000550
 8001d48:	40004c00 	.word	0x40004c00

08001d4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <MX_USART1_UART_Init+0x50>)
 8001d54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d72:	2204      	movs	r2, #4
 8001d74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d84:	f007 ffd8 	bl	8009d38 <HAL_UART_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d8e:	f000 ffff 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000050c 	.word	0x2000050c
 8001d9c:	40011000 	.word	0x40011000

08001da0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <MX_USART2_UART_Init+0x4c>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <MX_USART2_UART_Init+0x50>)
 8001da8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <MX_USART2_UART_Init+0x4c>)
 8001dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_USART2_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_USART2_UART_Init+0x4c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <MX_USART2_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_USART2_UART_Init+0x4c>)
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <MX_USART2_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <MX_USART2_UART_Init+0x4c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_USART2_UART_Init+0x4c>)
 8001dd8:	f007 ffae 	bl	8009d38 <HAL_UART_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001de2:	f000 ffd5 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000634 	.word	0x20000634
 8001df0:	40004400 	.word	0x40004400

08001df4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_DMA_Init+0x3c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <MX_DMA_Init+0x3c>)
 8001e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_DMA_Init+0x3c>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2010      	movs	r0, #16
 8001e1c:	f001 fea8 	bl	8003b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e20:	2010      	movs	r0, #16
 8001e22:	f001 fed1 	bl	8003bc8 <HAL_NVIC_EnableIRQ>

}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800

08001e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a58      	ldr	r2, [pc, #352]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b56      	ldr	r3, [pc, #344]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b52      	ldr	r3, [pc, #328]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b4f      	ldr	r3, [pc, #316]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a4a      	ldr	r2, [pc, #296]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b48      	ldr	r3, [pc, #288]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a43      	ldr	r2, [pc, #268]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a3c      	ldr	r2, [pc, #240]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001ec4:	f043 0308 	orr.w	r3, r3, #8
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b3a      	ldr	r3, [pc, #232]	; (8001fb4 <MX_GPIO_Init+0x180>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	213d      	movs	r1, #61	; 0x3d
 8001eda:	4837      	ldr	r0, [pc, #220]	; (8001fb8 <MX_GPIO_Init+0x184>)
 8001edc:	f002 fea6 	bl	8004c2c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f641 0102 	movw	r1, #6146	; 0x1802
 8001ee6:	4835      	ldr	r0, [pc, #212]	; (8001fbc <MX_GPIO_Init+0x188>)
 8001ee8:	f002 fea0 	bl	8004c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	f241 0126 	movw	r1, #4134	; 0x1026
 8001ef2:	4833      	ldr	r0, [pc, #204]	; (8001fc0 <MX_GPIO_Init+0x18c>)
 8001ef4:	f002 fe9a 	bl	8004c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001efe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	482a      	ldr	r0, [pc, #168]	; (8001fb8 <MX_GPIO_Init+0x184>)
 8001f10:	f002 fb68 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001f14:	233d      	movs	r3, #61	; 0x3d
 8001f16:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4823      	ldr	r0, [pc, #140]	; (8001fb8 <MX_GPIO_Init+0x184>)
 8001f2c:	f002 fb5a 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001f30:	f641 0302 	movw	r3, #6146	; 0x1802
 8001f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4619      	mov	r1, r3
 8001f48:	481c      	ldr	r0, [pc, #112]	; (8001fbc <MX_GPIO_Init+0x188>)
 8001f4a:	f002 fb4b 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f4e:	2310      	movs	r3, #16
 8001f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4816      	ldr	r0, [pc, #88]	; (8001fbc <MX_GPIO_Init+0x188>)
 8001f62:	f002 fb3f 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 8001f66:	f241 0326 	movw	r3, #4134	; 0x1026
 8001f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4810      	ldr	r0, [pc, #64]	; (8001fc0 <MX_GPIO_Init+0x18c>)
 8001f80:	f002 fb30 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f84:	2304      	movs	r3, #4
 8001f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	480b      	ldr	r0, [pc, #44]	; (8001fc4 <MX_GPIO_Init+0x190>)
 8001f98:	f002 fb24 	bl	80045e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2028      	movs	r0, #40	; 0x28
 8001fa2:	f001 fde5 	bl	8003b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fa6:	2028      	movs	r0, #40	; 0x28
 8001fa8:	f001 fe0e 	bl	8003bc8 <HAL_NVIC_EnableIRQ>

}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40020c00 	.word	0x40020c00

08001fc8 <Vonalszenzor_Init>:

/* USER CODE BEGIN 4 */
static void Vonalszenzor_Init(void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);	// PCB2: Von_OE1  0
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2104      	movs	r1, #4
 8001fd0:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <Vonalszenzor_Init+0x1c>)
 8001fd2:	f002 fe2b 	bl	8004c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	// PCB2: Von_OE2  0
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2120      	movs	r1, #32
 8001fda:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <Vonalszenzor_Init+0x20>)
 8001fdc:	f002 fe26 	bl	8004c2c <HAL_GPIO_WritePin>
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020800 	.word	0x40020800

08001fec <Vonalszenzor_operal>:

static void Vonalszenzor_operal(uint8_t* teljes_kiolvasott_h, uint8_t* teljes_kiolvasott_e) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8001ff6:	48be      	ldr	r0, [pc, #760]	; (80022f0 <Vonalszenzor_operal+0x304>)
 8001ff8:	f000 fc36 	bl	8002868 <Vonalszenzor_minta_kuldes>
	uint8_t eredmeny_16bit_temp[2] = {0b1110000, 0b00000000};
 8001ffc:	2370      	movs	r3, #112	; 0x70
 8001ffe:	81bb      	strh	r3, [r7, #12]
	//hatso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1h);
 8002000:	48bc      	ldr	r0, [pc, #752]	; (80022f4 <Vonalszenzor_operal+0x308>)
 8002002:	f000 fc31 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002006:	4bbc      	ldr	r3, [pc, #752]	; (80022f8 <Vonalszenzor_operal+0x30c>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	f107 020c 	add.w	r2, r7, #12
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fc89 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[32] = (uint8_t) eredmeny_16bit_temp[0];
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3320      	adds	r3, #32
 800201a:	7b3a      	ldrb	r2, [r7, #12]
 800201c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800201e:	4bb7      	ldr	r3, [pc, #732]	; (80022fc <Vonalszenzor_operal+0x310>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f107 020c 	add.w	r2, r7, #12
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fc7d 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[28] = (uint8_t) eredmeny_16bit_temp[0];
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	331c      	adds	r3, #28
 8002032:	7b3a      	ldrb	r2, [r7, #12]
 8002034:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002036:	48ae      	ldr	r0, [pc, #696]	; (80022f0 <Vonalszenzor_operal+0x304>)
 8002038:	f000 fc16 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2h);
 800203c:	48b0      	ldr	r0, [pc, #704]	; (8002300 <Vonalszenzor_operal+0x314>)
 800203e:	f000 fc13 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002042:	4bad      	ldr	r3, [pc, #692]	; (80022f8 <Vonalszenzor_operal+0x30c>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	f107 020c 	add.w	r2, r7, #12
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fc6b 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[24] = (uint8_t) eredmeny_16bit_temp[0];
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3318      	adds	r3, #24
 8002056:	7b3a      	ldrb	r2, [r7, #12]
 8002058:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800205a:	4ba8      	ldr	r3, [pc, #672]	; (80022fc <Vonalszenzor_operal+0x310>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f107 020c 	add.w	r2, r7, #12
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fc5f 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[20] = (uint8_t) eredmeny_16bit_temp[0];
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3314      	adds	r3, #20
 800206e:	7b3a      	ldrb	r2, [r7, #12]
 8002070:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002072:	489f      	ldr	r0, [pc, #636]	; (80022f0 <Vonalszenzor_operal+0x304>)
 8002074:	f000 fbf8 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3h);
 8002078:	48a2      	ldr	r0, [pc, #648]	; (8002304 <Vonalszenzor_operal+0x318>)
 800207a:	f000 fbf5 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800207e:	4b9e      	ldr	r3, [pc, #632]	; (80022f8 <Vonalszenzor_operal+0x30c>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f107 020c 	add.w	r2, r7, #12
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fc4d 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[16] = (uint8_t) eredmeny_16bit_temp[0];
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3310      	adds	r3, #16
 8002092:	7b3a      	ldrb	r2, [r7, #12]
 8002094:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002096:	4b99      	ldr	r3, [pc, #612]	; (80022fc <Vonalszenzor_operal+0x310>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	f107 020c 	add.w	r2, r7, #12
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fc41 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[12] = (uint8_t) eredmeny_16bit_temp[0];
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	330c      	adds	r3, #12
 80020aa:	7b3a      	ldrb	r2, [r7, #12]
 80020ac:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80020ae:	4890      	ldr	r0, [pc, #576]	; (80022f0 <Vonalszenzor_operal+0x304>)
 80020b0:	f000 fbda 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4h);
 80020b4:	4894      	ldr	r0, [pc, #592]	; (8002308 <Vonalszenzor_operal+0x31c>)
 80020b6:	f000 fbd7 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80020ba:	4b8f      	ldr	r3, [pc, #572]	; (80022f8 <Vonalszenzor_operal+0x30c>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	f107 020c 	add.w	r2, r7, #12
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fc2f 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[8] = (uint8_t) eredmeny_16bit_temp[0];
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3308      	adds	r3, #8
 80020ce:	7b3a      	ldrb	r2, [r7, #12]
 80020d0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80020d2:	4b8a      	ldr	r3, [pc, #552]	; (80022fc <Vonalszenzor_operal+0x310>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	f107 020c 	add.w	r2, r7, #12
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fc23 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[4] = (uint8_t) eredmeny_16bit_temp[0];
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3304      	adds	r3, #4
 80020e6:	7b3a      	ldrb	r2, [r7, #12]
 80020e8:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80020ea:	4881      	ldr	r0, [pc, #516]	; (80022f0 <Vonalszenzor_operal+0x304>)
 80020ec:	f000 fbbc 	bl	8002868 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1h);
 80020f0:	4886      	ldr	r0, [pc, #536]	; (800230c <Vonalszenzor_operal+0x320>)
 80020f2:	f000 fbb9 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80020f6:	4b86      	ldr	r3, [pc, #536]	; (8002310 <Vonalszenzor_operal+0x324>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f107 020c 	add.w	r2, r7, #12
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fc11 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[31] = (uint8_t) eredmeny_16bit_temp[0];
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	331f      	adds	r3, #31
 800210a:	7b3a      	ldrb	r2, [r7, #12]
 800210c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800210e:	4b81      	ldr	r3, [pc, #516]	; (8002314 <Vonalszenzor_operal+0x328>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fc05 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[27] = (uint8_t) eredmeny_16bit_temp[0];
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	331b      	adds	r3, #27
 8002122:	7b3a      	ldrb	r2, [r7, #12]
 8002124:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002126:	4872      	ldr	r0, [pc, #456]	; (80022f0 <Vonalszenzor_operal+0x304>)
 8002128:	f000 fb9e 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2h);
 800212c:	487a      	ldr	r0, [pc, #488]	; (8002318 <Vonalszenzor_operal+0x32c>)
 800212e:	f000 fb9b 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002132:	4b77      	ldr	r3, [pc, #476]	; (8002310 <Vonalszenzor_operal+0x324>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f107 020c 	add.w	r2, r7, #12
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fbf3 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[23] = (uint8_t) eredmeny_16bit_temp[0];
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3317      	adds	r3, #23
 8002146:	7b3a      	ldrb	r2, [r7, #12]
 8002148:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800214a:	4b72      	ldr	r3, [pc, #456]	; (8002314 <Vonalszenzor_operal+0x328>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f107 020c 	add.w	r2, r7, #12
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fbe7 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[19] = (uint8_t) eredmeny_16bit_temp[0];
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3313      	adds	r3, #19
 800215e:	7b3a      	ldrb	r2, [r7, #12]
 8002160:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002162:	4863      	ldr	r0, [pc, #396]	; (80022f0 <Vonalszenzor_operal+0x304>)
 8002164:	f000 fb80 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3h);
 8002168:	486c      	ldr	r0, [pc, #432]	; (800231c <Vonalszenzor_operal+0x330>)
 800216a:	f000 fb7d 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800216e:	4b68      	ldr	r3, [pc, #416]	; (8002310 <Vonalszenzor_operal+0x324>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fbd5 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[15] = (uint8_t) eredmeny_16bit_temp[0];
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	330f      	adds	r3, #15
 8002182:	7b3a      	ldrb	r2, [r7, #12]
 8002184:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002186:	4b63      	ldr	r3, [pc, #396]	; (8002314 <Vonalszenzor_operal+0x328>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f107 020c 	add.w	r2, r7, #12
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fbc9 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[11] = (uint8_t) eredmeny_16bit_temp[0];
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	330b      	adds	r3, #11
 800219a:	7b3a      	ldrb	r2, [r7, #12]
 800219c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800219e:	4854      	ldr	r0, [pc, #336]	; (80022f0 <Vonalszenzor_operal+0x304>)
 80021a0:	f000 fb62 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4h);
 80021a4:	485e      	ldr	r0, [pc, #376]	; (8002320 <Vonalszenzor_operal+0x334>)
 80021a6:	f000 fb5f 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80021aa:	4b59      	ldr	r3, [pc, #356]	; (8002310 <Vonalszenzor_operal+0x324>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	f107 020c 	add.w	r2, r7, #12
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fbb7 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[7] = (uint8_t) eredmeny_16bit_temp[0];
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3307      	adds	r3, #7
 80021be:	7b3a      	ldrb	r2, [r7, #12]
 80021c0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80021c2:	4b54      	ldr	r3, [pc, #336]	; (8002314 <Vonalszenzor_operal+0x328>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	f107 020c 	add.w	r2, r7, #12
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fbab 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[3] = (uint8_t) eredmeny_16bit_temp[0];
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3303      	adds	r3, #3
 80021d6:	7b3a      	ldrb	r2, [r7, #12]
 80021d8:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80021da:	4845      	ldr	r0, [pc, #276]	; (80022f0 <Vonalszenzor_operal+0x304>)
 80021dc:	f000 fb44 	bl	8002868 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1h);
 80021e0:	4850      	ldr	r0, [pc, #320]	; (8002324 <Vonalszenzor_operal+0x338>)
 80021e2:	f000 fb41 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80021e6:	4b50      	ldr	r3, [pc, #320]	; (8002328 <Vonalszenzor_operal+0x33c>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	f107 020c 	add.w	r2, r7, #12
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fb99 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[30] = (uint8_t) eredmeny_16bit_temp[0];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	331e      	adds	r3, #30
 80021fa:	7b3a      	ldrb	r2, [r7, #12]
 80021fc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80021fe:	4b4b      	ldr	r3, [pc, #300]	; (800232c <Vonalszenzor_operal+0x340>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	f107 020c 	add.w	r2, r7, #12
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fb8d 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[26] = (uint8_t) eredmeny_16bit_temp[0];
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	331a      	adds	r3, #26
 8002212:	7b3a      	ldrb	r2, [r7, #12]
 8002214:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002216:	4836      	ldr	r0, [pc, #216]	; (80022f0 <Vonalszenzor_operal+0x304>)
 8002218:	f000 fb26 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2h);
 800221c:	4844      	ldr	r0, [pc, #272]	; (8002330 <Vonalszenzor_operal+0x344>)
 800221e:	f000 fb23 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002222:	4b41      	ldr	r3, [pc, #260]	; (8002328 <Vonalszenzor_operal+0x33c>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f107 020c 	add.w	r2, r7, #12
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fb7b 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[22] = (uint8_t) eredmeny_16bit_temp[0];
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3316      	adds	r3, #22
 8002236:	7b3a      	ldrb	r2, [r7, #12]
 8002238:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800223a:	4b3c      	ldr	r3, [pc, #240]	; (800232c <Vonalszenzor_operal+0x340>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	f107 020c 	add.w	r2, r7, #12
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fb6f 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[18] = (uint8_t) eredmeny_16bit_temp[0];
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3312      	adds	r3, #18
 800224e:	7b3a      	ldrb	r2, [r7, #12]
 8002250:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002252:	4827      	ldr	r0, [pc, #156]	; (80022f0 <Vonalszenzor_operal+0x304>)
 8002254:	f000 fb08 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3h);
 8002258:	4836      	ldr	r0, [pc, #216]	; (8002334 <Vonalszenzor_operal+0x348>)
 800225a:	f000 fb05 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800225e:	4b32      	ldr	r3, [pc, #200]	; (8002328 <Vonalszenzor_operal+0x33c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f107 020c 	add.w	r2, r7, #12
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fb5d 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[14] = (uint8_t) eredmeny_16bit_temp[0];
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	330e      	adds	r3, #14
 8002272:	7b3a      	ldrb	r2, [r7, #12]
 8002274:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <Vonalszenzor_operal+0x340>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	f107 020c 	add.w	r2, r7, #12
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fb51 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[10] = (uint8_t) eredmeny_16bit_temp[0];
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	330a      	adds	r3, #10
 800228a:	7b3a      	ldrb	r2, [r7, #12]
 800228c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800228e:	4818      	ldr	r0, [pc, #96]	; (80022f0 <Vonalszenzor_operal+0x304>)
 8002290:	f000 faea 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4h);
 8002294:	4828      	ldr	r0, [pc, #160]	; (8002338 <Vonalszenzor_operal+0x34c>)
 8002296:	f000 fae7 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800229a:	4b23      	ldr	r3, [pc, #140]	; (8002328 <Vonalszenzor_operal+0x33c>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	f107 020c 	add.w	r2, r7, #12
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fb3f 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[6] = (uint8_t) eredmeny_16bit_temp[0];
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3306      	adds	r3, #6
 80022ae:	7b3a      	ldrb	r2, [r7, #12]
 80022b0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <Vonalszenzor_operal+0x340>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f107 020c 	add.w	r2, r7, #12
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fb33 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[2] = (uint8_t) eredmeny_16bit_temp[0];
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3302      	adds	r3, #2
 80022c6:	7b3a      	ldrb	r2, [r7, #12]
 80022c8:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80022ca:	4809      	ldr	r0, [pc, #36]	; (80022f0 <Vonalszenzor_operal+0x304>)
 80022cc:	f000 facc 	bl	8002868 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1h);
 80022d0:	481a      	ldr	r0, [pc, #104]	; (800233c <Vonalszenzor_operal+0x350>)
 80022d2:	f000 fac9 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <Vonalszenzor_operal+0x354>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	f107 020c 	add.w	r2, r7, #12
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fb21 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[29] = (uint8_t) eredmeny_16bit_temp[0];
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	331d      	adds	r3, #29
 80022ea:	7b3a      	ldrb	r2, [r7, #12]
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	e029      	b.n	8002344 <Vonalszenzor_operal+0x358>
 80022f0:	20000004 	.word	0x20000004
 80022f4:	2000008c 	.word	0x2000008c
 80022f8:	200001b1 	.word	0x200001b1
 80022fc:	20000115 	.word	0x20000115
 8002300:	20000084 	.word	0x20000084
 8002304:	2000007c 	.word	0x2000007c
 8002308:	20000074 	.word	0x20000074
 800230c:	2000006c 	.word	0x2000006c
 8002310:	20000112 	.word	0x20000112
 8002314:	20000116 	.word	0x20000116
 8002318:	20000064 	.word	0x20000064
 800231c:	2000005c 	.word	0x2000005c
 8002320:	20000054 	.word	0x20000054
 8002324:	2000004c 	.word	0x2000004c
 8002328:	20000113 	.word	0x20000113
 800232c:	20000117 	.word	0x20000117
 8002330:	20000044 	.word	0x20000044
 8002334:	2000003c 	.word	0x2000003c
 8002338:	20000034 	.word	0x20000034
 800233c:	2000002c 	.word	0x2000002c
 8002340:	20000114 	.word	0x20000114
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002344:	4bbe      	ldr	r3, [pc, #760]	; (8002640 <Vonalszenzor_operal+0x654>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	f107 020c 	add.w	r2, r7, #12
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f000 faea 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[25] = (uint8_t) eredmeny_16bit_temp[0];
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3319      	adds	r3, #25
 8002358:	7b3a      	ldrb	r2, [r7, #12]
 800235a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800235c:	48b9      	ldr	r0, [pc, #740]	; (8002644 <Vonalszenzor_operal+0x658>)
 800235e:	f000 fa83 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2h);
 8002362:	48b9      	ldr	r0, [pc, #740]	; (8002648 <Vonalszenzor_operal+0x65c>)
 8002364:	f000 fa80 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002368:	4bb8      	ldr	r3, [pc, #736]	; (800264c <Vonalszenzor_operal+0x660>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	f107 020c 	add.w	r2, r7, #12
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fad8 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[21] = (uint8_t) eredmeny_16bit_temp[0];
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3315      	adds	r3, #21
 800237c:	7b3a      	ldrb	r2, [r7, #12]
 800237e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002380:	4baf      	ldr	r3, [pc, #700]	; (8002640 <Vonalszenzor_operal+0x654>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	f107 020c 	add.w	r2, r7, #12
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f000 facc 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[17] = (uint8_t) eredmeny_16bit_temp[0];
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3311      	adds	r3, #17
 8002394:	7b3a      	ldrb	r2, [r7, #12]
 8002396:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002398:	48aa      	ldr	r0, [pc, #680]	; (8002644 <Vonalszenzor_operal+0x658>)
 800239a:	f000 fa65 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3h);
 800239e:	48ac      	ldr	r0, [pc, #688]	; (8002650 <Vonalszenzor_operal+0x664>)
 80023a0:	f000 fa62 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80023a4:	4ba9      	ldr	r3, [pc, #676]	; (800264c <Vonalszenzor_operal+0x660>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f107 020c 	add.w	r2, r7, #12
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 faba 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[13] = (uint8_t) eredmeny_16bit_temp[0];
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	330d      	adds	r3, #13
 80023b8:	7b3a      	ldrb	r2, [r7, #12]
 80023ba:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80023bc:	4ba0      	ldr	r3, [pc, #640]	; (8002640 <Vonalszenzor_operal+0x654>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f107 020c 	add.w	r2, r7, #12
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 faae 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[9] = (uint8_t) eredmeny_16bit_temp[0];
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3309      	adds	r3, #9
 80023d0:	7b3a      	ldrb	r2, [r7, #12]
 80023d2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023d4:	489b      	ldr	r0, [pc, #620]	; (8002644 <Vonalszenzor_operal+0x658>)
 80023d6:	f000 fa47 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4h);
 80023da:	489e      	ldr	r0, [pc, #632]	; (8002654 <Vonalszenzor_operal+0x668>)
 80023dc:	f000 fa44 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80023e0:	4b9a      	ldr	r3, [pc, #616]	; (800264c <Vonalszenzor_operal+0x660>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	f107 020c 	add.w	r2, r7, #12
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fa9c 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[5] = (uint8_t) eredmeny_16bit_temp[0];
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3305      	adds	r3, #5
 80023f4:	7b3a      	ldrb	r2, [r7, #12]
 80023f6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80023f8:	4b91      	ldr	r3, [pc, #580]	; (8002640 <Vonalszenzor_operal+0x654>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	f107 020c 	add.w	r2, r7, #12
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fa90 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[1] = (uint8_t) eredmeny_16bit_temp[0];
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3301      	adds	r3, #1
 800240c:	7b3a      	ldrb	r2, [r7, #12]
 800240e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002410:	488c      	ldr	r0, [pc, #560]	; (8002644 <Vonalszenzor_operal+0x658>)
 8002412:	f000 fa29 	bl	8002868 <Vonalszenzor_minta_kuldes>

	//elso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1e);
 8002416:	4890      	ldr	r0, [pc, #576]	; (8002658 <Vonalszenzor_operal+0x66c>)
 8002418:	f000 fa26 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800241c:	4b8f      	ldr	r3, [pc, #572]	; (800265c <Vonalszenzor_operal+0x670>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	f107 020c 	add.w	r2, r7, #12
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fa7e 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[1] = (uint8_t) eredmeny_16bit_temp[0];
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	3301      	adds	r3, #1
 8002430:	7b3a      	ldrb	r2, [r7, #12]
 8002432:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002434:	4b8a      	ldr	r3, [pc, #552]	; (8002660 <Vonalszenzor_operal+0x674>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	f107 020c 	add.w	r2, r7, #12
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fa72 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3305      	adds	r3, #5
 8002448:	7b3a      	ldrb	r2, [r7, #12]
 800244a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800244c:	487d      	ldr	r0, [pc, #500]	; (8002644 <Vonalszenzor_operal+0x658>)
 800244e:	f000 fa0b 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2e);
 8002452:	4884      	ldr	r0, [pc, #528]	; (8002664 <Vonalszenzor_operal+0x678>)
 8002454:	f000 fa08 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002458:	4b80      	ldr	r3, [pc, #512]	; (800265c <Vonalszenzor_operal+0x670>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	f107 020c 	add.w	r2, r7, #12
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fa60 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[9] = (uint8_t) eredmeny_16bit_temp[0];
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	3309      	adds	r3, #9
 800246c:	7b3a      	ldrb	r2, [r7, #12]
 800246e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002470:	4b7b      	ldr	r3, [pc, #492]	; (8002660 <Vonalszenzor_operal+0x674>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	f107 020c 	add.w	r2, r7, #12
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fa54 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[13] = (uint8_t) eredmeny_16bit_temp[0];
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	330d      	adds	r3, #13
 8002484:	7b3a      	ldrb	r2, [r7, #12]
 8002486:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002488:	486e      	ldr	r0, [pc, #440]	; (8002644 <Vonalszenzor_operal+0x658>)
 800248a:	f000 f9ed 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3e);
 800248e:	4876      	ldr	r0, [pc, #472]	; (8002668 <Vonalszenzor_operal+0x67c>)
 8002490:	f000 f9ea 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002494:	4b71      	ldr	r3, [pc, #452]	; (800265c <Vonalszenzor_operal+0x670>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	f107 020c 	add.w	r2, r7, #12
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fa42 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[17] = (uint8_t) eredmeny_16bit_temp[0];
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	3311      	adds	r3, #17
 80024a8:	7b3a      	ldrb	r2, [r7, #12]
 80024aa:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80024ac:	4b6c      	ldr	r3, [pc, #432]	; (8002660 <Vonalszenzor_operal+0x674>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	f107 020c 	add.w	r2, r7, #12
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fa36 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[21] = (uint8_t) eredmeny_16bit_temp[0];
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	3315      	adds	r3, #21
 80024c0:	7b3a      	ldrb	r2, [r7, #12]
 80024c2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80024c4:	485f      	ldr	r0, [pc, #380]	; (8002644 <Vonalszenzor_operal+0x658>)
 80024c6:	f000 f9cf 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4e);
 80024ca:	4868      	ldr	r0, [pc, #416]	; (800266c <Vonalszenzor_operal+0x680>)
 80024cc:	f000 f9cc 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80024d0:	4b62      	ldr	r3, [pc, #392]	; (800265c <Vonalszenzor_operal+0x670>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	f107 020c 	add.w	r2, r7, #12
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fa24 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[25] = (uint8_t) eredmeny_16bit_temp[0];
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	3319      	adds	r3, #25
 80024e4:	7b3a      	ldrb	r2, [r7, #12]
 80024e6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80024e8:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <Vonalszenzor_operal+0x674>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	f107 020c 	add.w	r2, r7, #12
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fa18 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[29] = (uint8_t) eredmeny_16bit_temp[0];
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	331d      	adds	r3, #29
 80024fc:	7b3a      	ldrb	r2, [r7, #12]
 80024fe:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002500:	4850      	ldr	r0, [pc, #320]	; (8002644 <Vonalszenzor_operal+0x658>)
 8002502:	f000 f9b1 	bl	8002868 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1e);
 8002506:	485a      	ldr	r0, [pc, #360]	; (8002670 <Vonalszenzor_operal+0x684>)
 8002508:	f000 f9ae 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800250c:	4b59      	ldr	r3, [pc, #356]	; (8002674 <Vonalszenzor_operal+0x688>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	f107 020c 	add.w	r2, r7, #12
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fa06 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[2] = (uint8_t) eredmeny_16bit_temp[0];
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	3302      	adds	r3, #2
 8002520:	7b3a      	ldrb	r2, [r7, #12]
 8002522:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002524:	4b54      	ldr	r3, [pc, #336]	; (8002678 <Vonalszenzor_operal+0x68c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	f107 020c 	add.w	r2, r7, #12
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f9fa 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[6] = (uint8_t) eredmeny_16bit_temp[0];
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	3306      	adds	r3, #6
 8002538:	7b3a      	ldrb	r2, [r7, #12]
 800253a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800253c:	4841      	ldr	r0, [pc, #260]	; (8002644 <Vonalszenzor_operal+0x658>)
 800253e:	f000 f993 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2e);
 8002542:	484e      	ldr	r0, [pc, #312]	; (800267c <Vonalszenzor_operal+0x690>)
 8002544:	f000 f990 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002548:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <Vonalszenzor_operal+0x688>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	f107 020c 	add.w	r2, r7, #12
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f9e8 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[10] = (uint8_t) eredmeny_16bit_temp[0];
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	330a      	adds	r3, #10
 800255c:	7b3a      	ldrb	r2, [r7, #12]
 800255e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002560:	4b45      	ldr	r3, [pc, #276]	; (8002678 <Vonalszenzor_operal+0x68c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	f107 020c 	add.w	r2, r7, #12
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f9dc 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[14] = (uint8_t) eredmeny_16bit_temp[0];
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	330e      	adds	r3, #14
 8002574:	7b3a      	ldrb	r2, [r7, #12]
 8002576:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002578:	4832      	ldr	r0, [pc, #200]	; (8002644 <Vonalszenzor_operal+0x658>)
 800257a:	f000 f975 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3e);
 800257e:	4840      	ldr	r0, [pc, #256]	; (8002680 <Vonalszenzor_operal+0x694>)
 8002580:	f000 f972 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002584:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <Vonalszenzor_operal+0x688>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	f107 020c 	add.w	r2, r7, #12
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f9ca 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[18] = (uint8_t) eredmeny_16bit_temp[0];
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	3312      	adds	r3, #18
 8002598:	7b3a      	ldrb	r2, [r7, #12]
 800259a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800259c:	4b36      	ldr	r3, [pc, #216]	; (8002678 <Vonalszenzor_operal+0x68c>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	f107 020c 	add.w	r2, r7, #12
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f9be 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[22] = (uint8_t) eredmeny_16bit_temp[0];
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	3316      	adds	r3, #22
 80025b0:	7b3a      	ldrb	r2, [r7, #12]
 80025b2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80025b4:	4823      	ldr	r0, [pc, #140]	; (8002644 <Vonalszenzor_operal+0x658>)
 80025b6:	f000 f957 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4e);
 80025ba:	4832      	ldr	r0, [pc, #200]	; (8002684 <Vonalszenzor_operal+0x698>)
 80025bc:	f000 f954 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80025c0:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <Vonalszenzor_operal+0x688>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	f107 020c 	add.w	r2, r7, #12
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f9ac 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[26] = (uint8_t) eredmeny_16bit_temp[0];
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	331a      	adds	r3, #26
 80025d4:	7b3a      	ldrb	r2, [r7, #12]
 80025d6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <Vonalszenzor_operal+0x68c>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	f107 020c 	add.w	r2, r7, #12
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f9a0 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[30] = (uint8_t) eredmeny_16bit_temp[0];
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	331e      	adds	r3, #30
 80025ec:	7b3a      	ldrb	r2, [r7, #12]
 80025ee:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80025f0:	4814      	ldr	r0, [pc, #80]	; (8002644 <Vonalszenzor_operal+0x658>)
 80025f2:	f000 f939 	bl	8002868 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1e);
 80025f6:	4824      	ldr	r0, [pc, #144]	; (8002688 <Vonalszenzor_operal+0x69c>)
 80025f8:	f000 f936 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <Vonalszenzor_operal+0x6a0>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	f107 020c 	add.w	r2, r7, #12
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f98e 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[3] = (uint8_t) eredmeny_16bit_temp[0];
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	3303      	adds	r3, #3
 8002610:	7b3a      	ldrb	r2, [r7, #12]
 8002612:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002614:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <Vonalszenzor_operal+0x6a4>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f107 020c 	add.w	r2, r7, #12
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f982 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[7] = (uint8_t) eredmeny_16bit_temp[0];
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	3307      	adds	r3, #7
 8002628:	7b3a      	ldrb	r2, [r7, #12]
 800262a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <Vonalszenzor_operal+0x658>)
 800262e:	f000 f91b 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2e);
 8002632:	4818      	ldr	r0, [pc, #96]	; (8002694 <Vonalszenzor_operal+0x6a8>)
 8002634:	f000 f918 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <Vonalszenzor_operal+0x6a0>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	e02c      	b.n	8002698 <Vonalszenzor_operal+0x6ac>
 800263e:	bf00      	nop
 8002640:	20000118 	.word	0x20000118
 8002644:	20000004 	.word	0x20000004
 8002648:	20000024 	.word	0x20000024
 800264c:	20000114 	.word	0x20000114
 8002650:	2000001c 	.word	0x2000001c
 8002654:	20000014 	.word	0x20000014
 8002658:	2000010c 	.word	0x2000010c
 800265c:	200001b1 	.word	0x200001b1
 8002660:	20000115 	.word	0x20000115
 8002664:	20000104 	.word	0x20000104
 8002668:	200000fc 	.word	0x200000fc
 800266c:	200000f4 	.word	0x200000f4
 8002670:	200000ec 	.word	0x200000ec
 8002674:	20000112 	.word	0x20000112
 8002678:	20000116 	.word	0x20000116
 800267c:	200000e4 	.word	0x200000e4
 8002680:	200000dc 	.word	0x200000dc
 8002684:	200000d4 	.word	0x200000d4
 8002688:	200000cc 	.word	0x200000cc
 800268c:	20000113 	.word	0x20000113
 8002690:	20000117 	.word	0x20000117
 8002694:	200000c4 	.word	0x200000c4
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f942 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[11] = (uint8_t) eredmeny_16bit_temp[0];
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	330b      	adds	r3, #11
 80026a8:	7b3a      	ldrb	r2, [r7, #12]
 80026aa:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80026ac:	4b63      	ldr	r3, [pc, #396]	; (800283c <Vonalszenzor_operal+0x850>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	f107 020c 	add.w	r2, r7, #12
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f936 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[15] = (uint8_t) eredmeny_16bit_temp[0];
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	330f      	adds	r3, #15
 80026c0:	7b3a      	ldrb	r2, [r7, #12]
 80026c2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80026c4:	485e      	ldr	r0, [pc, #376]	; (8002840 <Vonalszenzor_operal+0x854>)
 80026c6:	f000 f8cf 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3e);
 80026ca:	485e      	ldr	r0, [pc, #376]	; (8002844 <Vonalszenzor_operal+0x858>)
 80026cc:	f000 f8cc 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80026d0:	4b5d      	ldr	r3, [pc, #372]	; (8002848 <Vonalszenzor_operal+0x85c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	f107 020c 	add.w	r2, r7, #12
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f924 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[19] = (uint8_t) eredmeny_16bit_temp[0];
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	3313      	adds	r3, #19
 80026e4:	7b3a      	ldrb	r2, [r7, #12]
 80026e6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80026e8:	4b54      	ldr	r3, [pc, #336]	; (800283c <Vonalszenzor_operal+0x850>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f107 020c 	add.w	r2, r7, #12
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f918 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[23] = (uint8_t) eredmeny_16bit_temp[0];
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	3317      	adds	r3, #23
 80026fc:	7b3a      	ldrb	r2, [r7, #12]
 80026fe:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002700:	484f      	ldr	r0, [pc, #316]	; (8002840 <Vonalszenzor_operal+0x854>)
 8002702:	f000 f8b1 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4e);
 8002706:	4851      	ldr	r0, [pc, #324]	; (800284c <Vonalszenzor_operal+0x860>)
 8002708:	f000 f8ae 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800270c:	4b4e      	ldr	r3, [pc, #312]	; (8002848 <Vonalszenzor_operal+0x85c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f107 020c 	add.w	r2, r7, #12
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f906 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[27] = (uint8_t) eredmeny_16bit_temp[0];
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	331b      	adds	r3, #27
 8002720:	7b3a      	ldrb	r2, [r7, #12]
 8002722:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002724:	4b45      	ldr	r3, [pc, #276]	; (800283c <Vonalszenzor_operal+0x850>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	f107 020c 	add.w	r2, r7, #12
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f8fa 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[31] = (uint8_t) eredmeny_16bit_temp[0];
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	331f      	adds	r3, #31
 8002738:	7b3a      	ldrb	r2, [r7, #12]
 800273a:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800273c:	4840      	ldr	r0, [pc, #256]	; (8002840 <Vonalszenzor_operal+0x854>)
 800273e:	f000 f893 	bl	8002868 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1e);
 8002742:	4843      	ldr	r0, [pc, #268]	; (8002850 <Vonalszenzor_operal+0x864>)
 8002744:	f000 f890 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002748:	4b42      	ldr	r3, [pc, #264]	; (8002854 <Vonalszenzor_operal+0x868>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	f107 020c 	add.w	r2, r7, #12
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f8e8 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[4] = (uint8_t) eredmeny_16bit_temp[0];
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	3304      	adds	r3, #4
 800275c:	7b3a      	ldrb	r2, [r7, #12]
 800275e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002760:	4b3d      	ldr	r3, [pc, #244]	; (8002858 <Vonalszenzor_operal+0x86c>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	f107 020c 	add.w	r2, r7, #12
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f8dc 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[8] = (uint8_t) eredmeny_16bit_temp[0];
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	3308      	adds	r3, #8
 8002774:	7b3a      	ldrb	r2, [r7, #12]
 8002776:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002778:	4831      	ldr	r0, [pc, #196]	; (8002840 <Vonalszenzor_operal+0x854>)
 800277a:	f000 f875 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2e);
 800277e:	4837      	ldr	r0, [pc, #220]	; (800285c <Vonalszenzor_operal+0x870>)
 8002780:	f000 f872 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002784:	4b33      	ldr	r3, [pc, #204]	; (8002854 <Vonalszenzor_operal+0x868>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	f107 020c 	add.w	r2, r7, #12
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f8ca 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[12] = (uint8_t) eredmeny_16bit_temp[0];
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	7b3a      	ldrb	r2, [r7, #12]
 800279a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800279c:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <Vonalszenzor_operal+0x86c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	f107 020c 	add.w	r2, r7, #12
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f8be 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[16] = (uint8_t) eredmeny_16bit_temp[0];
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	3310      	adds	r3, #16
 80027b0:	7b3a      	ldrb	r2, [r7, #12]
 80027b2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027b4:	4822      	ldr	r0, [pc, #136]	; (8002840 <Vonalszenzor_operal+0x854>)
 80027b6:	f000 f857 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3e);
 80027ba:	4829      	ldr	r0, [pc, #164]	; (8002860 <Vonalszenzor_operal+0x874>)
 80027bc:	f000 f854 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <Vonalszenzor_operal+0x868>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f107 020c 	add.w	r2, r7, #12
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f8ac 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[20] = (uint8_t) eredmeny_16bit_temp[0];
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	3314      	adds	r3, #20
 80027d4:	7b3a      	ldrb	r2, [r7, #12]
 80027d6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80027d8:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <Vonalszenzor_operal+0x86c>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	f107 020c 	add.w	r2, r7, #12
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f8a0 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[24] = (uint8_t) eredmeny_16bit_temp[0];
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	3318      	adds	r3, #24
 80027ec:	7b3a      	ldrb	r2, [r7, #12]
 80027ee:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027f0:	4813      	ldr	r0, [pc, #76]	; (8002840 <Vonalszenzor_operal+0x854>)
 80027f2:	f000 f839 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4e);
 80027f6:	481b      	ldr	r0, [pc, #108]	; (8002864 <Vonalszenzor_operal+0x878>)
 80027f8:	f000 f836 	bl	8002868 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80027fc:	4b15      	ldr	r3, [pc, #84]	; (8002854 <Vonalszenzor_operal+0x868>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f107 020c 	add.w	r2, r7, #12
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f88e 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[28] = (uint8_t) eredmeny_16bit_temp[0];
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	331c      	adds	r3, #28
 8002810:	7b3a      	ldrb	r2, [r7, #12]
 8002812:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002814:	4b10      	ldr	r3, [pc, #64]	; (8002858 <Vonalszenzor_operal+0x86c>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	f107 020c 	add.w	r2, r7, #12
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f882 	bl	8002928 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[32] = (uint8_t) eredmeny_16bit_temp[0];
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	3320      	adds	r3, #32
 8002828:	7b3a      	ldrb	r2, [r7, #12]
 800282a:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800282c:	4804      	ldr	r0, [pc, #16]	; (8002840 <Vonalszenzor_operal+0x854>)
 800282e:	f000 f81b 	bl	8002868 <Vonalszenzor_minta_kuldes>
}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000117 	.word	0x20000117
 8002840:	20000004 	.word	0x20000004
 8002844:	200000bc 	.word	0x200000bc
 8002848:	20000113 	.word	0x20000113
 800284c:	200000b4 	.word	0x200000b4
 8002850:	200000ac 	.word	0x200000ac
 8002854:	20000114 	.word	0x20000114
 8002858:	20000118 	.word	0x20000118
 800285c:	200000a4 	.word	0x200000a4
 8002860:	2000009c 	.word	0x2000009c
 8002864:	20000094 	.word	0x20000094

08002868 <Vonalszenzor_minta_kuldes>:

void Vonalszenzor_minta_kuldes(uint8_t* minta) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	// PC4: Von_latch1  0
 8002870:	2200      	movs	r2, #0
 8002872:	2110      	movs	r1, #16
 8002874:	480d      	ldr	r0, [pc, #52]	; (80028ac <Vonalszenzor_minta_kuldes+0x44>)
 8002876:	f002 f9d9 	bl	8004c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// PB1: Von_latch2  0
 800287a:	2200      	movs	r2, #0
 800287c:	2102      	movs	r1, #2
 800287e:	480c      	ldr	r0, [pc, #48]	; (80028b0 <Vonalszenzor_minta_kuldes+0x48>)
 8002880:	f002 f9d4 	bl	8004c2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, minta, 6, 100);				// minta kikuldes
 8002884:	2364      	movs	r3, #100	; 0x64
 8002886:	2206      	movs	r2, #6
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	480a      	ldr	r0, [pc, #40]	; (80028b4 <Vonalszenzor_minta_kuldes+0x4c>)
 800288c:	f004 fb04 	bl	8006e98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		// PC4: Von_latch1  1
 8002890:	2201      	movs	r2, #1
 8002892:	2110      	movs	r1, #16
 8002894:	4805      	ldr	r0, [pc, #20]	; (80028ac <Vonalszenzor_minta_kuldes+0x44>)
 8002896:	f002 f9c9 	bl	8004c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// PB1: Von_latch2  1
 800289a:	2201      	movs	r2, #1
 800289c:	2102      	movs	r1, #2
 800289e:	4804      	ldr	r0, [pc, #16]	; (80028b0 <Vonalszenzor_minta_kuldes+0x48>)
 80028a0:	f002 f9c4 	bl	8004c2c <HAL_GPIO_WritePin>
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40020800 	.word	0x40020800
 80028b0:	40020400 	.word	0x40020400
 80028b4:	2000027c 	.word	0x2000027c

080028b8 <Vonalas_tombok_torlese>:

void Vonalas_tombok_torlese(void) {
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
	for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	e00c      	b.n	80028de <Vonalas_tombok_torlese+0x26>
		vonalak_h[i] = '-';
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <Vonalas_tombok_torlese+0x60>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	222d      	movs	r2, #45	; 0x2d
 80028cc:	701a      	strb	r2, [r3, #0]
		vonalak_e[i] = '-';
 80028ce:	4a13      	ldr	r2, [pc, #76]	; (800291c <Vonalas_tombok_torlese+0x64>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	222d      	movs	r2, #45	; 0x2d
 80028d6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3301      	adds	r3, #1
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	ddef      	ble.n	80028c4 <Vonalas_tombok_torlese+0xc>
	}
	for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 80028e4:	2301      	movs	r3, #1
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	e00c      	b.n	8002904 <Vonalas_tombok_torlese+0x4c>
		vonal_eredmeny_h[i] = 0;
 80028ea:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <Vonalas_tombok_torlese+0x68>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
		vonal_eredmeny_e[i] = 0;
 80028f4:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <Vonalas_tombok_torlese+0x6c>)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
	for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b20      	cmp	r3, #32
 8002908:	ddef      	ble.n	80028ea <Vonalas_tombok_torlese+0x32>
	}
}
 800290a:	bf00      	nop
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	20000130 	.word	0x20000130
 800291c:	20000138 	.word	0x20000138
 8002920:	200001b4 	.word	0x200001b4
 8002924:	200001d8 	.word	0x200001d8

08002928 <Vonalszenzor_meres_kiolvasas>:

void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[2]= {chanel,0};
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	733b      	strb	r3, [r7, #12]
 8002938:	2300      	movs	r3, #0
 800293a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, temp1, 2, 100);
 800293c:	f107 010c 	add.w	r1, r7, #12
 8002940:	2364      	movs	r3, #100	; 0x64
 8002942:	2202      	movs	r2, #2
 8002944:	4806      	ldr	r0, [pc, #24]	; (8002960 <Vonalszenzor_meres_kiolvasas+0x38>)
 8002946:	f004 faa7 	bl	8006e98 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, eredmeny, 2, 100);
 800294a:	2364      	movs	r3, #100	; 0x64
 800294c:	2202      	movs	r2, #2
 800294e:	6839      	ldr	r1, [r7, #0]
 8002950:	4803      	ldr	r0, [pc, #12]	; (8002960 <Vonalszenzor_meres_kiolvasas+0x38>)
 8002952:	f004 fbed 	bl	8007130 <HAL_SPI_Receive>
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000594 	.word	0x20000594

08002964 <Vonalas_tombok_feltoltese>:

void Vonalas_tombok_feltoltese(void) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
	for(int poz=1; poz < 33-1; poz++) {
 800296a:	2301      	movs	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e082      	b.n	8002a76 <Vonalas_tombok_feltoltese+0x112>
	// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
		if(vonal_eredmeny_e[poz] > VONAL_THRESHOLD_E) {
 8002970:	4a45      	ldr	r2, [pc, #276]	; (8002a88 <Vonalas_tombok_feltoltese+0x124>)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4413      	add	r3, r2
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fd97 	bl	80004ac <__aeabi_i2d>
 800297e:	4b43      	ldr	r3, [pc, #268]	; (8002a8c <Vonalas_tombok_feltoltese+0x128>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fe f88c 	bl	8000aa0 <__aeabi_dcmpgt>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d030      	beq.n	80029f0 <Vonalas_tombok_feltoltese+0x8c>
			if(vonal_eredmeny_e[poz+1] > VONAL_THRESHOLD_E) {
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3301      	adds	r3, #1
 8002992:	4a3d      	ldr	r2, [pc, #244]	; (8002a88 <Vonalas_tombok_feltoltese+0x124>)
 8002994:	5cd3      	ldrb	r3, [r2, r3]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fd88 	bl	80004ac <__aeabi_i2d>
 800299c:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <Vonalas_tombok_feltoltese+0x128>)
 800299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a2:	f7fe f87d 	bl	8000aa0 <__aeabi_dcmpgt>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d021      	beq.n	80029f0 <Vonalas_tombok_feltoltese+0x8c>
				if(vonal_eredmeny_e[poz-1] < VONAL_THRESHOLD_E) {
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	4a35      	ldr	r2, [pc, #212]	; (8002a88 <Vonalas_tombok_feltoltese+0x124>)
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fd79 	bl	80004ac <__aeabi_i2d>
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <Vonalas_tombok_feltoltese+0x128>)
 80029bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c0:	f7fe f850 	bl	8000a64 <__aeabi_dcmplt>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d012      	beq.n	80029f0 <Vonalas_tombok_feltoltese+0x8c>
					int i = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
					while(vonalak_e[i] != '-') {
 80029ce:	e002      	b.n	80029d6 <Vonalas_tombok_feltoltese+0x72>
						i++;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	3301      	adds	r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
					while(vonalak_e[i] != '-') {
 80029d6:	4a2e      	ldr	r2, [pc, #184]	; (8002a90 <Vonalas_tombok_feltoltese+0x12c>)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4413      	add	r3, r2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b2d      	cmp	r3, #45	; 0x2d
 80029e0:	d1f6      	bne.n	80029d0 <Vonalas_tombok_feltoltese+0x6c>
					}
					vonalak_e[i] = poz;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	b2d9      	uxtb	r1, r3
 80029e6:	4a2a      	ldr	r2, [pc, #168]	; (8002a90 <Vonalas_tombok_feltoltese+0x12c>)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4413      	add	r3, r2
 80029ec:	460a      	mov	r2, r1
 80029ee:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if(vonal_eredmeny_h[poz] > VONAL_THRESHOLD_H) {
 80029f0:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <Vonalas_tombok_feltoltese+0x130>)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fd57 	bl	80004ac <__aeabi_i2d>
 80029fe:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <Vonalas_tombok_feltoltese+0x134>)
 8002a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a04:	f7fe f84c 	bl	8000aa0 <__aeabi_dcmpgt>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d030      	beq.n	8002a70 <Vonalas_tombok_feltoltese+0x10c>
			if(vonal_eredmeny_h[poz+1] > VONAL_THRESHOLD_H) {
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3301      	adds	r3, #1
 8002a12:	4a20      	ldr	r2, [pc, #128]	; (8002a94 <Vonalas_tombok_feltoltese+0x130>)
 8002a14:	5cd3      	ldrb	r3, [r2, r3]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fd fd48 	bl	80004ac <__aeabi_i2d>
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <Vonalas_tombok_feltoltese+0x134>)
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f7fe f83d 	bl	8000aa0 <__aeabi_dcmpgt>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d021      	beq.n	8002a70 <Vonalas_tombok_feltoltese+0x10c>
				if(vonal_eredmeny_h[poz-1] < VONAL_THRESHOLD_H) {
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <Vonalas_tombok_feltoltese+0x130>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd39 	bl	80004ac <__aeabi_i2d>
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <Vonalas_tombok_feltoltese+0x134>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fe f810 	bl	8000a64 <__aeabi_dcmplt>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d012      	beq.n	8002a70 <Vonalas_tombok_feltoltese+0x10c>
					int i = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
					while(vonalak_h[i] != '-') {
 8002a4e:	e002      	b.n	8002a56 <Vonalas_tombok_feltoltese+0xf2>
						i++;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3301      	adds	r3, #1
 8002a54:	607b      	str	r3, [r7, #4]
					while(vonalak_h[i] != '-') {
 8002a56:	4a11      	ldr	r2, [pc, #68]	; (8002a9c <Vonalas_tombok_feltoltese+0x138>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b2d      	cmp	r3, #45	; 0x2d
 8002a60:	d1f6      	bne.n	8002a50 <Vonalas_tombok_feltoltese+0xec>
					}
					vonalak_h[i] = poz;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	b2d9      	uxtb	r1, r3
 8002a66:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <Vonalas_tombok_feltoltese+0x138>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	460a      	mov	r2, r1
 8002a6e:	701a      	strb	r2, [r3, #0]
	for(int poz=1; poz < 33-1; poz++) {
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3301      	adds	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b1f      	cmp	r3, #31
 8002a7a:	f77f af79 	ble.w	8002970 <Vonalas_tombok_feltoltese+0xc>
	}
	/*for(int poz=1; poz < 33-1; poz++) {
	// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele

	}*/
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200001d8 	.word	0x200001d8
 8002a8c:	20000128 	.word	0x20000128
 8002a90:	20000138 	.word	0x20000138
 8002a94:	200001b4 	.word	0x200001b4
 8002a98:	20000120 	.word	0x20000120
 8002a9c:	20000130 	.word	0x20000130

08002aa0 <Kovetendo_vonal_valaszto>:

void Kovetendo_vonal_valaszto(double* elso, double* hatso) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08c      	sub	sp, #48	; 0x30
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	double elso_sum = 0.0;
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double hatso_sum = 0.0;
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double e_db = 0.0001;
 8002ac2:	a372      	add	r3, pc, #456	; (adr r3, 8002c8c <Kovetendo_vonal_valaszto+0x1ec>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double h_db = 0.0001;
 8002acc:	a36f      	add	r3, pc, #444	; (adr r3, 8002c8c <Kovetendo_vonal_valaszto+0x1ec>)
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	e048      	b.n	8002b6e <Kovetendo_vonal_valaszto+0xce>
		if(vonalak_e[i] < 33) {				// kulonben '-' van benne, ami 45
 8002adc:	4a64      	ldr	r2, [pc, #400]	; (8002c70 <Kovetendo_vonal_valaszto+0x1d0>)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d81c      	bhi.n	8002b22 <Kovetendo_vonal_valaszto+0x82>
			elso_sum += vonalak_e[i] - 16;		// ez elvileg jo 1 - 1 erzekelt vonalra
 8002ae8:	4a61      	ldr	r2, [pc, #388]	; (8002c70 <Kovetendo_vonal_valaszto+0x1d0>)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4413      	add	r3, r2
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3b10      	subs	r3, #16
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd fcda 	bl	80004ac <__aeabi_i2d>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b00:	f7fd fb88 	bl	8000214 <__adddf3>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			e_db += 1.0;
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	4b58      	ldr	r3, [pc, #352]	; (8002c74 <Kovetendo_vonal_valaszto+0x1d4>)
 8002b12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b16:	f7fd fb7d 	bl	8000214 <__adddf3>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		}
		if(vonalak_h[i] < 33) {				// kulonben '-' van benne, ami 45
 8002b22:	4a55      	ldr	r2, [pc, #340]	; (8002c78 <Kovetendo_vonal_valaszto+0x1d8>)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d81c      	bhi.n	8002b68 <Kovetendo_vonal_valaszto+0xc8>
			hatso_sum += vonalak_h[i] - 16;		// ez elvileg jo 1 - 1 erzekelt vonalra
 8002b2e:	4a52      	ldr	r2, [pc, #328]	; (8002c78 <Kovetendo_vonal_valaszto+0x1d8>)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	3b10      	subs	r3, #16
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fcb7 	bl	80004ac <__aeabi_i2d>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b46:	f7fd fb65 	bl	8000214 <__adddf3>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
			h_db += 1.0;
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <Kovetendo_vonal_valaszto+0x1d4>)
 8002b58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b5c:	f7fd fb5a 	bl	8000214 <__adddf3>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	ddb3      	ble.n	8002adc <Kovetendo_vonal_valaszto+0x3c>
		}
	}
	if(1 < e_db) {
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <Kovetendo_vonal_valaszto+0x1d4>)
 8002b7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b7e:	f7fd ff8f 	bl	8000aa0 <__aeabi_dcmpgt>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d016      	beq.n	8002bb6 <Kovetendo_vonal_valaszto+0x116>
		*elso = elso_sum / e_db;
 8002b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b90:	f7fd fe20 	bl	80007d4 <__aeabi_ddiv>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	e9c1 2300 	strd	r2, r3, [r1]
		*hatso = hatso_sum / h_db;
 8002b9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ba2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ba6:	f7fd fe15 	bl	80007d4 <__aeabi_ddiv>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	6839      	ldr	r1, [r7, #0]
 8002bb0:	e9c1 2300 	strd	r2, r3, [r1]
 8002bb4:	e00b      	b.n	8002bce <Kovetendo_vonal_valaszto+0x12e>
	} else {
		*elso = *elso;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	e9c1 2300 	strd	r2, r3, [r1]
		*hatso = *hatso;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	6839      	ldr	r1, [r7, #0]
 8002bca:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if(2 < e_db) {
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bd6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bda:	f7fd ff61 	bl	8000aa0 <__aeabi_dcmpgt>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <Kovetendo_vonal_valaszto+0x150>
		fekezes_cnt += 1;
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <Kovetendo_vonal_valaszto+0x1dc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3301      	adds	r3, #1
 8002bea:	4a24      	ldr	r2, [pc, #144]	; (8002c7c <Kovetendo_vonal_valaszto+0x1dc>)
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e002      	b.n	8002bf6 <Kovetendo_vonal_valaszto+0x156>
	} else {
		fekezes_cnt = 0;
 8002bf0:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <Kovetendo_vonal_valaszto+0x1dc>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
	}
	if((-5 < *elso && *elso < 5)  &&  (-5 < *hatso && *hatso < 5)) {
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <Kovetendo_vonal_valaszto+0x1e0>)
 8002c02:	f7fd ff4d 	bl	8000aa0 <__aeabi_dcmpgt>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d026      	beq.n	8002c5a <Kovetendo_vonal_valaszto+0x1ba>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <Kovetendo_vonal_valaszto+0x1e4>)
 8002c18:	f7fd ff24 	bl	8000a64 <__aeabi_dcmplt>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01b      	beq.n	8002c5a <Kovetendo_vonal_valaszto+0x1ba>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <Kovetendo_vonal_valaszto+0x1e0>)
 8002c2e:	f7fd ff37 	bl	8000aa0 <__aeabi_dcmpgt>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d010      	beq.n	8002c5a <Kovetendo_vonal_valaszto+0x1ba>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <Kovetendo_vonal_valaszto+0x1e4>)
 8002c44:	f7fd ff0e 	bl	8000a64 <__aeabi_dcmplt>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <Kovetendo_vonal_valaszto+0x1ba>
		veretesi_cnt += 1;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <Kovetendo_vonal_valaszto+0x1e8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <Kovetendo_vonal_valaszto+0x1e8>)
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	e003      	b.n	8002c62 <Kovetendo_vonal_valaszto+0x1c2>
	} else {
		veretesi_cnt = 0;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <Kovetendo_vonal_valaszto+0x1e8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
	}
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3730      	adds	r7, #48	; 0x30
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	f3af 8000 	nop.w
 8002c70:	20000138 	.word	0x20000138
 8002c74:	3ff00000 	.word	0x3ff00000
 8002c78:	20000130 	.word	0x20000130
 8002c7c:	2000021c 	.word	0x2000021c
 8002c80:	c0140000 	.word	0xc0140000
 8002c84:	40140000 	.word	0x40140000
 8002c88:	20000218 	.word	0x20000218
 8002c8c:	eb1c432d 	.word	0xeb1c432d
 8002c90:	3f1a36e2 	.word	0x3f1a36e2

08002c94 <Szervo_szog_beallit>:

void Szervo_szog_beallit(void) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
	if (btnEnable == 1 && szervoEnable == 1) {
 8002c98:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <Szervo_szog_beallit+0xa8>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d14b      	bne.n	8002d38 <Szervo_szog_beallit+0xa4>
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <Szervo_szog_beallit+0xac>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d147      	bne.n	8002d38 <Szervo_szog_beallit+0xa4>
		cel = vonal_kovetni_e + (((vonal_kovetni_e) - (vonal_kovetni_h)) *kormanyzas_agresszivitas);
 8002ca8:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <Szervo_szog_beallit+0xb0>)
 8002caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <Szervo_szog_beallit+0xb4>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd faac 	bl	8000210 <__aeabi_dsub>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <Szervo_szog_beallit+0xb8>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f7fd fc5b 	bl	8000580 <__aeabi_dmul>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <Szervo_szog_beallit+0xb0>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f7fd fa9c 	bl	8000214 <__adddf3>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7fd fee6 	bl	8000ab4 <__aeabi_d2iz>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <Szervo_szog_beallit+0xbc>)
 8002cec:	6013      	str	r3, [r2, #0]
		//fel auto tavolsagra vetit ki. ezt novelni kell hogy agresszivabban kanyarodjon
		if(cel < -15) {
 8002cee:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <Szervo_szog_beallit+0xbc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f113 0f0f 	cmn.w	r3, #15
 8002cf6:	da03      	bge.n	8002d00 <Szervo_szog_beallit+0x6c>
			szervoSzog = 0;
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <Szervo_szog_beallit+0xc0>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e010      	b.n	8002d22 <Szervo_szog_beallit+0x8e>
		} else if(15 < cel) {
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <Szervo_szog_beallit+0xbc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b0f      	cmp	r3, #15
 8002d06:	dd03      	ble.n	8002d10 <Szervo_szog_beallit+0x7c>
			szervoSzog = 180;
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <Szervo_szog_beallit+0xc0>)
 8002d0a:	22b4      	movs	r2, #180	; 0xb4
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e008      	b.n	8002d22 <Szervo_szog_beallit+0x8e>
		} else {
			szervoSzog = 90 + cel *6;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <Szervo_szog_beallit+0xbc>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	335a      	adds	r3, #90	; 0x5a
 8002d1e:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <Szervo_szog_beallit+0xc0>)
 8002d20:	6013      	str	r3, [r2, #0]
			szervoSzog = 180;
		} else {
			szervoSzog = 90 + cel *6;
		}*/

		SERVO_MoveTo(SZERVO, szervoSzog);
 8002d22:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <Szervo_szog_beallit+0xc0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d32:	2000      	movs	r0, #0
 8002d34:	f7fe fa12 	bl	800115c <SERVO_MoveTo>
	}
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200001b0 	.word	0x200001b0
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000208 	.word	0x20000208
 8002d48:	20000200 	.word	0x20000200
 8002d4c:	20000148 	.word	0x20000148
 8002d50:	20000210 	.word	0x20000210
 8002d54:	20000140 	.word	0x20000140

08002d58 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d68:	d109      	bne.n	8002d7e <HAL_GPIO_EXTI_Callback+0x26>
		btnEnable = !btnEnable;
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_GPIO_EXTI_Callback+0x34>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <HAL_GPIO_EXTI_Callback+0x34>)
 8002d7c:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	//LED felvilagitasa
	}
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	200001b0 	.word	0x200001b0

08002d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d94:	b672      	cpsid	i
}
 8002d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d98:	e7fe      	b.n	8002d98 <Error_Handler+0x8>

08002d9a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_MspInit+0x4c>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	4a0f      	ldr	r2, [pc, #60]	; (8002dfc <HAL_MspInit+0x4c>)
 8002dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <HAL_MspInit+0x4c>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_MspInit+0x4c>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a08      	ldr	r2, [pc, #32]	; (8002dfc <HAL_MspInit+0x4c>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_MspInit+0x4c>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002dee:	2007      	movs	r0, #7
 8002df0:	f000 fe9e 	bl	8003b30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800

08002e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b090      	sub	sp, #64	; 0x40
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6b      	ldr	r2, [pc, #428]	; (8002fcc <HAL_I2C_MspInit+0x1cc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d12d      	bne.n	8002e7e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e26:	4b6a      	ldr	r3, [pc, #424]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a69      	ldr	r2, [pc, #420]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b67      	ldr	r3, [pc, #412]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e44:	2312      	movs	r3, #18
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e50:	2304      	movs	r3, #4
 8002e52:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e58:	4619      	mov	r1, r3
 8002e5a:	485e      	ldr	r0, [pc, #376]	; (8002fd4 <HAL_I2C_MspInit+0x1d4>)
 8002e5c:	f001 fbc2 	bl	80045e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
 8002e64:	4b5a      	ldr	r3, [pc, #360]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	4a59      	ldr	r2, [pc, #356]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e70:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e7c:	e0a2      	b.n	8002fc4 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a55      	ldr	r2, [pc, #340]	; (8002fd8 <HAL_I2C_MspInit+0x1d8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d14c      	bne.n	8002f22 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e88:	2300      	movs	r3, #0
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	4a4f      	ldr	r2, [pc, #316]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	6313      	str	r3, [r2, #48]	; 0x30
 8002e98:	4b4d      	ldr	r3, [pc, #308]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	623b      	str	r3, [r7, #32]
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	4b49      	ldr	r3, [pc, #292]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	4a48      	ldr	r2, [pc, #288]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb4:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec6:	2312      	movs	r3, #18
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eda:	4619      	mov	r1, r3
 8002edc:	483d      	ldr	r0, [pc, #244]	; (8002fd4 <HAL_I2C_MspInit+0x1d4>)
 8002ede:	f001 fb81 	bl	80045e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ee8:	2312      	movs	r3, #18
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002efc:	4619      	mov	r1, r3
 8002efe:	4837      	ldr	r0, [pc, #220]	; (8002fdc <HAL_I2C_MspInit+0x1dc>)
 8002f00:	f001 fb70 	bl	80045e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	4a30      	ldr	r2, [pc, #192]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002f0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f12:	6413      	str	r3, [r2, #64]	; 0x40
 8002f14:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
}
 8002f20:	e050      	b.n	8002fc4 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a2e      	ldr	r2, [pc, #184]	; (8002fe0 <HAL_I2C_MspInit+0x1e0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d14b      	bne.n	8002fc4 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3c:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6313      	str	r3, [r2, #48]	; 0x30
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f6a:	2312      	movs	r3, #18
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f72:	2303      	movs	r3, #3
 8002f74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f76:	2304      	movs	r3, #4
 8002f78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4816      	ldr	r0, [pc, #88]	; (8002fdc <HAL_I2C_MspInit+0x1dc>)
 8002f82:	f001 fb2f 	bl	80045e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f8c:	2312      	movs	r3, #18
 8002f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f94:	2303      	movs	r3, #3
 8002f96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f98:	2304      	movs	r3, #4
 8002f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4810      	ldr	r0, [pc, #64]	; (8002fe4 <HAL_I2C_MspInit+0x1e4>)
 8002fa4:	f001 fb1e 	bl	80045e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002fb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_I2C_MspInit+0x1d0>)
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3740      	adds	r7, #64	; 0x40
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40005400 	.word	0x40005400
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40005800 	.word	0x40005800
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	40005c00 	.word	0x40005c00
 8002fe4:	40020000 	.word	0x40020000

08002fe8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b090      	sub	sp, #64	; 0x40
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a98      	ldr	r2, [pc, #608]	; (8003268 <HAL_SPI_MspInit+0x280>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d12c      	bne.n	8003064 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
 800300e:	4b97      	ldr	r3, [pc, #604]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	4a96      	ldr	r2, [pc, #600]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003018:	6453      	str	r3, [r2, #68]	; 0x44
 800301a:	4b94      	ldr	r3, [pc, #592]	; (800326c <HAL_SPI_MspInit+0x284>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	4b90      	ldr	r3, [pc, #576]	; (800326c <HAL_SPI_MspInit+0x284>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a8f      	ldr	r2, [pc, #572]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b8d      	ldr	r3, [pc, #564]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003042:	23e0      	movs	r3, #224	; 0xe0
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003046:	2302      	movs	r3, #2
 8003048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304e:	2303      	movs	r3, #3
 8003050:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003052:	2305      	movs	r3, #5
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003056:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800305a:	4619      	mov	r1, r3
 800305c:	4884      	ldr	r0, [pc, #528]	; (8003270 <HAL_SPI_MspInit+0x288>)
 800305e:	f001 fac1 	bl	80045e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003062:	e0fd      	b.n	8003260 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a82      	ldr	r2, [pc, #520]	; (8003274 <HAL_SPI_MspInit+0x28c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d14b      	bne.n	8003106 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	623b      	str	r3, [r7, #32]
 8003072:	4b7e      	ldr	r3, [pc, #504]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	4a7d      	ldr	r2, [pc, #500]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	4b7b      	ldr	r3, [pc, #492]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003086:	623b      	str	r3, [r7, #32]
 8003088:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	4b77      	ldr	r3, [pc, #476]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a76      	ldr	r2, [pc, #472]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b74      	ldr	r3, [pc, #464]	; (800326c <HAL_SPI_MspInit+0x284>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	4b70      	ldr	r3, [pc, #448]	; (800326c <HAL_SPI_MspInit+0x284>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a6f      	ldr	r2, [pc, #444]	; (800326c <HAL_SPI_MspInit+0x284>)
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b6d      	ldr	r3, [pc, #436]	; (800326c <HAL_SPI_MspInit+0x284>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030c2:	2302      	movs	r3, #2
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c6:	2302      	movs	r3, #2
 80030c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ce:	2303      	movs	r3, #3
 80030d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80030d2:	2307      	movs	r3, #7
 80030d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030da:	4619      	mov	r1, r3
 80030dc:	4866      	ldr	r0, [pc, #408]	; (8003278 <HAL_SPI_MspInit+0x290>)
 80030de:	f001 fa81 	bl	80045e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80030e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f0:	2303      	movs	r3, #3
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030f4:	2305      	movs	r3, #5
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030fc:	4619      	mov	r1, r3
 80030fe:	485f      	ldr	r0, [pc, #380]	; (800327c <HAL_SPI_MspInit+0x294>)
 8003100:	f001 fa70 	bl	80045e4 <HAL_GPIO_Init>
}
 8003104:	e0ac      	b.n	8003260 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI3)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a5d      	ldr	r2, [pc, #372]	; (8003280 <HAL_SPI_MspInit+0x298>)
 800310c:	4293      	cmp	r3, r2
 800310e:	f040 80a7 	bne.w	8003260 <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	4b55      	ldr	r3, [pc, #340]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a54      	ldr	r2, [pc, #336]	; (800326c <HAL_SPI_MspInit+0x284>)
 800311c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b52      	ldr	r3, [pc, #328]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	4b4e      	ldr	r3, [pc, #312]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4a4d      	ldr	r2, [pc, #308]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
 800313e:	4b4b      	ldr	r3, [pc, #300]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a46      	ldr	r2, [pc, #280]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b44      	ldr	r3, [pc, #272]	; (800326c <HAL_SPI_MspInit+0x284>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	4b40      	ldr	r3, [pc, #256]	; (800326c <HAL_SPI_MspInit+0x284>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a3f      	ldr	r2, [pc, #252]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003170:	f043 0304 	orr.w	r3, r3, #4
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_SPI_MspInit+0x284>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003182:	2301      	movs	r3, #1
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318e:	2303      	movs	r3, #3
 8003190:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003192:	2307      	movs	r3, #7
 8003194:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800319a:	4619      	mov	r1, r3
 800319c:	4837      	ldr	r0, [pc, #220]	; (800327c <HAL_SPI_MspInit+0x294>)
 800319e:	f001 fa21 	bl	80045e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031b4:	2306      	movs	r3, #6
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031bc:	4619      	mov	r1, r3
 80031be:	482c      	ldr	r0, [pc, #176]	; (8003270 <HAL_SPI_MspInit+0x288>)
 80031c0:	f001 fa10 	bl	80045e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ca:	2302      	movs	r3, #2
 80031cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d2:	2303      	movs	r3, #3
 80031d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031d6:	2306      	movs	r3, #6
 80031d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031de:	4619      	mov	r1, r3
 80031e0:	4825      	ldr	r0, [pc, #148]	; (8003278 <HAL_SPI_MspInit+0x290>)
 80031e2:	f001 f9ff 	bl	80045e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031e6:	2310      	movs	r3, #16
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f2:	2303      	movs	r3, #3
 80031f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031f6:	2306      	movs	r3, #6
 80031f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031fe:	4619      	mov	r1, r3
 8003200:	481e      	ldr	r0, [pc, #120]	; (800327c <HAL_SPI_MspInit+0x294>)
 8003202:	f001 f9ef 	bl	80045e4 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8003206:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 8003208:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_SPI_MspInit+0x2a0>)
 800320a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800320c:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 800320e:	2200      	movs	r2, #0
 8003210:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003212:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 8003214:	2240      	movs	r2, #64	; 0x40
 8003216:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003218:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800321e:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 8003220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003224:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003226:	4b17      	ldr	r3, [pc, #92]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 8003228:	2200      	movs	r2, #0
 800322a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800322c:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 800322e:	2200      	movs	r2, #0
 8003230:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 8003234:	2200      	movs	r2, #0
 8003236:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 800323a:	2200      	movs	r2, #0
 800323c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 8003240:	2200      	movs	r2, #0
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003244:	480f      	ldr	r0, [pc, #60]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 8003246:	f000 fce3 	bl	8003c10 <HAL_DMA_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 8003250:	f7ff fd9e 	bl	8002d90 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 8003258:	649a      	str	r2, [r3, #72]	; 0x48
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <HAL_SPI_MspInit+0x29c>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003260:	bf00      	nop
 8003262:	3740      	adds	r7, #64	; 0x40
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40013000 	.word	0x40013000
 800326c:	40023800 	.word	0x40023800
 8003270:	40020000 	.word	0x40020000
 8003274:	40003800 	.word	0x40003800
 8003278:	40020800 	.word	0x40020800
 800327c:	40020400 	.word	0x40020400
 8003280:	40003c00 	.word	0x40003c00
 8003284:	200004ac 	.word	0x200004ac
 8003288:	40026088 	.word	0x40026088

0800328c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329c:	d116      	bne.n	80032cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	4b28      	ldr	r3, [pc, #160]	; (8003344 <HAL_TIM_Base_MspInit+0xb8>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a27      	ldr	r2, [pc, #156]	; (8003344 <HAL_TIM_Base_MspInit+0xb8>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_TIM_Base_MspInit+0xb8>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2100      	movs	r1, #0
 80032be:	201c      	movs	r0, #28
 80032c0:	f000 fc56 	bl	8003b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032c4:	201c      	movs	r0, #28
 80032c6:	f000 fc7f 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80032ca:	e036      	b.n	800333a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1d      	ldr	r2, [pc, #116]	; (8003348 <HAL_TIM_Base_MspInit+0xbc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d116      	bne.n	8003304 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <HAL_TIM_Base_MspInit+0xb8>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	4a19      	ldr	r2, [pc, #100]	; (8003344 <HAL_TIM_Base_MspInit+0xb8>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	6453      	str	r3, [r2, #68]	; 0x44
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <HAL_TIM_Base_MspInit+0xb8>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 80032f2:	2201      	movs	r2, #1
 80032f4:	2100      	movs	r1, #0
 80032f6:	202b      	movs	r0, #43	; 0x2b
 80032f8:	f000 fc3a 	bl	8003b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80032fc:	202b      	movs	r0, #43	; 0x2b
 80032fe:	f000 fc63 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
}
 8003302:	e01a      	b.n	800333a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM12)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a10      	ldr	r2, [pc, #64]	; (800334c <HAL_TIM_Base_MspInit+0xc0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d115      	bne.n	800333a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <HAL_TIM_Base_MspInit+0xb8>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <HAL_TIM_Base_MspInit+0xb8>)
 8003318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_TIM_Base_MspInit+0xb8>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 800332a:	2201      	movs	r2, #1
 800332c:	2100      	movs	r1, #0
 800332e:	202b      	movs	r0, #43	; 0x2b
 8003330:	f000 fc1e 	bl	8003b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003334:	202b      	movs	r0, #43	; 0x2b
 8003336:	f000 fc47 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800
 8003348:	40010400 	.word	0x40010400
 800334c:	40001800 	.word	0x40001800

08003350 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <HAL_TIM_PWM_MspInit+0x48>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d115      	bne.n	800338e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <HAL_TIM_PWM_MspInit+0x4c>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_TIM_PWM_MspInit+0x4c>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_TIM_PWM_MspInit+0x4c>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800337e:	2200      	movs	r2, #0
 8003380:	2100      	movs	r1, #0
 8003382:	201d      	movs	r0, #29
 8003384:	f000 fbf4 	bl	8003b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003388:	201d      	movs	r0, #29
 800338a:	f000 fc1d 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40000400 	.word	0x40000400
 800339c:	40023800 	.word	0x40023800

080033a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <HAL_TIM_Encoder_MspInit+0x94>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d133      	bne.n	800342a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <HAL_TIM_Encoder_MspInit+0x98>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <HAL_TIM_Encoder_MspInit+0x98>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
 80033d2:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_TIM_Encoder_MspInit+0x98>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <HAL_TIM_Encoder_MspInit+0x98>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a14      	ldr	r2, [pc, #80]	; (8003438 <HAL_TIM_Encoder_MspInit+0x98>)
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_TIM_Encoder_MspInit+0x98>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033fa:	23c0      	movs	r3, #192	; 0xc0
 80033fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fe:	2302      	movs	r3, #2
 8003400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800340a:	2302      	movs	r3, #2
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	4619      	mov	r1, r3
 8003414:	4809      	ldr	r0, [pc, #36]	; (800343c <HAL_TIM_Encoder_MspInit+0x9c>)
 8003416:	f001 f8e5 	bl	80045e4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800341a:	2200      	movs	r2, #0
 800341c:	2100      	movs	r1, #0
 800341e:	201e      	movs	r0, #30
 8003420:	f000 fba6 	bl	8003b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003424:	201e      	movs	r0, #30
 8003426:	f000 fbcf 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800342a:	bf00      	nop
 800342c:	3728      	adds	r7, #40	; 0x28
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40000800 	.word	0x40000800
 8003438:	40023800 	.word	0x40023800
 800343c:	40020400 	.word	0x40020400

08003440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	; 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 0314 	add.w	r3, r7, #20
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a37      	ldr	r2, [pc, #220]	; (800353c <HAL_TIM_MspPostInit+0xfc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d11e      	bne.n	80034a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_TIM_MspPostInit+0x100>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	4a35      	ldr	r2, [pc, #212]	; (8003540 <HAL_TIM_MspPostInit+0x100>)
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	6313      	str	r3, [r2, #48]	; 0x30
 8003472:	4b33      	ldr	r3, [pc, #204]	; (8003540 <HAL_TIM_MspPostInit+0x100>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800347e:	2340      	movs	r3, #64	; 0x40
 8003480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2302      	movs	r3, #2
 8003484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	2300      	movs	r3, #0
 800348c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800348e:	2302      	movs	r3, #2
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4619      	mov	r1, r3
 8003498:	482a      	ldr	r0, [pc, #168]	; (8003544 <HAL_TIM_MspPostInit+0x104>)
 800349a:	f001 f8a3 	bl	80045e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800349e:	e048      	b.n	8003532 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a28      	ldr	r2, [pc, #160]	; (8003548 <HAL_TIM_MspPostInit+0x108>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d11f      	bne.n	80034ea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_TIM_MspPostInit+0x100>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a23      	ldr	r2, [pc, #140]	; (8003540 <HAL_TIM_MspPostInit+0x100>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b21      	ldr	r3, [pc, #132]	; (8003540 <HAL_TIM_MspPostInit+0x100>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80034c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80034ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d4:	2300      	movs	r3, #0
 80034d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80034d8:	2303      	movs	r3, #3
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	4619      	mov	r1, r3
 80034e2:	4818      	ldr	r0, [pc, #96]	; (8003544 <HAL_TIM_MspPostInit+0x104>)
 80034e4:	f001 f87e 	bl	80045e4 <HAL_GPIO_Init>
}
 80034e8:	e023      	b.n	8003532 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a17      	ldr	r2, [pc, #92]	; (800354c <HAL_TIM_MspPostInit+0x10c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d11e      	bne.n	8003532 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f4:	2300      	movs	r3, #0
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_TIM_MspPostInit+0x100>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	4a10      	ldr	r2, [pc, #64]	; (8003540 <HAL_TIM_MspPostInit+0x100>)
 80034fe:	f043 0302 	orr.w	r3, r3, #2
 8003502:	6313      	str	r3, [r2, #48]	; 0x30
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <HAL_TIM_MspPostInit+0x100>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003510:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003522:	2309      	movs	r3, #9
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003526:	f107 0314 	add.w	r3, r7, #20
 800352a:	4619      	mov	r1, r3
 800352c:	4808      	ldr	r0, [pc, #32]	; (8003550 <HAL_TIM_MspPostInit+0x110>)
 800352e:	f001 f859 	bl	80045e4 <HAL_GPIO_Init>
}
 8003532:	bf00      	nop
 8003534:	3728      	adds	r7, #40	; 0x28
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40000400 	.word	0x40000400
 8003540:	40023800 	.word	0x40023800
 8003544:	40020800 	.word	0x40020800
 8003548:	40010400 	.word	0x40010400
 800354c:	40001800 	.word	0x40001800
 8003550:	40020400 	.word	0x40020400

08003554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08e      	sub	sp, #56	; 0x38
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a5f      	ldr	r2, [pc, #380]	; (80036f0 <HAL_UART_MspInit+0x19c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d153      	bne.n	800361e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	4b5e      	ldr	r3, [pc, #376]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4a5d      	ldr	r2, [pc, #372]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 8003580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
 8003586:	4b5b      	ldr	r3, [pc, #364]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800358e:	623b      	str	r3, [r7, #32]
 8003590:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	4b57      	ldr	r3, [pc, #348]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	4a56      	ldr	r2, [pc, #344]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6313      	str	r3, [r2, #48]	; 0x30
 80035a2:	4b54      	ldr	r3, [pc, #336]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	4b50      	ldr	r3, [pc, #320]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a4f      	ldr	r2, [pc, #316]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 80035b8:	f043 0304 	orr.w	r3, r3, #4
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b4d      	ldr	r3, [pc, #308]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035ca:	2301      	movs	r3, #1
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d6:	2303      	movs	r3, #3
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035da:	2308      	movs	r3, #8
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e2:	4619      	mov	r1, r3
 80035e4:	4844      	ldr	r0, [pc, #272]	; (80036f8 <HAL_UART_MspInit+0x1a4>)
 80035e6:	f000 fffd 	bl	80045e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	2302      	movs	r3, #2
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035f4:	2301      	movs	r3, #1
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f8:	2303      	movs	r3, #3
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035fc:	2308      	movs	r3, #8
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003604:	4619      	mov	r1, r3
 8003606:	483d      	ldr	r0, [pc, #244]	; (80036fc <HAL_UART_MspInit+0x1a8>)
 8003608:	f000 ffec 	bl	80045e4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800360c:	2200      	movs	r2, #0
 800360e:	2100      	movs	r1, #0
 8003610:	2034      	movs	r0, #52	; 0x34
 8003612:	f000 faad 	bl	8003b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003616:	2034      	movs	r0, #52	; 0x34
 8003618:	f000 fad6 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800361c:	e063      	b.n	80036e6 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a37      	ldr	r2, [pc, #220]	; (8003700 <HAL_UART_MspInit+0x1ac>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d12d      	bne.n	8003684 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	4a30      	ldr	r2, [pc, #192]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 8003632:	f043 0310 	orr.w	r3, r3, #16
 8003636:	6453      	str	r3, [r2, #68]	; 0x44
 8003638:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	4b2a      	ldr	r3, [pc, #168]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	4a29      	ldr	r2, [pc, #164]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6313      	str	r3, [r2, #48]	; 0x30
 8003654:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003660:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003666:	2302      	movs	r3, #2
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366e:	2303      	movs	r3, #3
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003672:	2307      	movs	r3, #7
 8003674:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367a:	4619      	mov	r1, r3
 800367c:	481e      	ldr	r0, [pc, #120]	; (80036f8 <HAL_UART_MspInit+0x1a4>)
 800367e:	f000 ffb1 	bl	80045e4 <HAL_GPIO_Init>
}
 8003682:	e030      	b.n	80036e6 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <HAL_UART_MspInit+0x1b0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d12b      	bne.n	80036e6 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a17      	ldr	r2, [pc, #92]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 8003698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	4a10      	ldr	r2, [pc, #64]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <HAL_UART_MspInit+0x1a0>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80036c6:	230c      	movs	r3, #12
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d2:	2303      	movs	r3, #3
 80036d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036d6:	2307      	movs	r3, #7
 80036d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036de:	4619      	mov	r1, r3
 80036e0:	4805      	ldr	r0, [pc, #20]	; (80036f8 <HAL_UART_MspInit+0x1a4>)
 80036e2:	f000 ff7f 	bl	80045e4 <HAL_GPIO_Init>
}
 80036e6:	bf00      	nop
 80036e8:	3738      	adds	r7, #56	; 0x38
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40004c00 	.word	0x40004c00
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40020000 	.word	0x40020000
 80036fc:	40020800 	.word	0x40020800
 8003700:	40011000 	.word	0x40011000
 8003704:	40004400 	.word	0x40004400

08003708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800370c:	e7fe      	b.n	800370c <NMI_Handler+0x4>

0800370e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003712:	e7fe      	b.n	8003712 <HardFault_Handler+0x4>

08003714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003718:	e7fe      	b.n	8003718 <MemManage_Handler+0x4>

0800371a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800371e:	e7fe      	b.n	800371e <BusFault_Handler+0x4>

08003720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003724:	e7fe      	b.n	8003724 <UsageFault_Handler+0x4>

08003726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003754:	f000 f8d8 	bl	8003908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}

0800375c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003760:	4802      	ldr	r0, [pc, #8]	; (800376c <DMA1_Stream5_IRQHandler+0x10>)
 8003762:	f000 fd03 	bl	800416c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	200004ac 	.word	0x200004ac

08003770 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <TIM2_IRQHandler+0x10>)
 8003776:	f004 fea1 	bl	80084bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200005ec 	.word	0x200005ec

08003784 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <TIM3_IRQHandler+0x10>)
 800378a:	f004 fe97 	bl	80084bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	2000040c 	.word	0x2000040c

08003798 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <TIM4_IRQHandler+0x10>)
 800379e:	f004 fe8d 	bl	80084bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	2000031c 	.word	0x2000031c

080037ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80037b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80037b4:	f001 fa6c 	bl	8004c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037b8:	bf00      	nop
 80037ba:	bd80      	pop	{r7, pc}

080037bc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80037c0:	4803      	ldr	r0, [pc, #12]	; (80037d0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80037c2:	f004 fe7b 	bl	80084bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80037c6:	4803      	ldr	r0, [pc, #12]	; (80037d4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80037c8:	f004 fe78 	bl	80084bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80037cc:	bf00      	nop
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200002d4 	.word	0x200002d4
 80037d4:	20000678 	.word	0x20000678

080037d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80037dc:	4802      	ldr	r0, [pc, #8]	; (80037e8 <UART4_IRQHandler+0x10>)
 80037de:	f006 fb85 	bl	8009eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000550 	.word	0x20000550

080037ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <SystemInit+0x20>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	4a05      	ldr	r2, [pc, #20]	; (800380c <SystemInit+0x20>)
 80037f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003848 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003814:	480d      	ldr	r0, [pc, #52]	; (800384c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003816:	490e      	ldr	r1, [pc, #56]	; (8003850 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003818:	4a0e      	ldr	r2, [pc, #56]	; (8003854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800381a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800381c:	e002      	b.n	8003824 <LoopCopyDataInit>

0800381e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800381e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003822:	3304      	adds	r3, #4

08003824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003828:	d3f9      	bcc.n	800381e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800382a:	4a0b      	ldr	r2, [pc, #44]	; (8003858 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800382c:	4c0b      	ldr	r4, [pc, #44]	; (800385c <LoopFillZerobss+0x26>)
  movs r3, #0
 800382e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003830:	e001      	b.n	8003836 <LoopFillZerobss>

08003832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003834:	3204      	adds	r2, #4

08003836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003838:	d3fb      	bcc.n	8003832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800383a:	f7ff ffd7 	bl	80037ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800383e:	f00c fe17 	bl	8010470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003842:	f7fd fd19 	bl	8001278 <main>
  bx  lr    
 8003846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003848:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800384c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003850:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8003854:	0801081c 	.word	0x0801081c
  ldr r2, =_sbss
 8003858:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800385c:	200007c4 	.word	0x200007c4

08003860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003860:	e7fe      	b.n	8003860 <ADC_IRQHandler>
	...

08003864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003868:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <HAL_Init+0x40>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <HAL_Init+0x40>)
 800386e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_Init+0x40>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <HAL_Init+0x40>)
 800387a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800387e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <HAL_Init+0x40>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a07      	ldr	r2, [pc, #28]	; (80038a4 <HAL_Init+0x40>)
 8003886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800388c:	2003      	movs	r0, #3
 800388e:	f000 f94f 	bl	8003b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003892:	2000      	movs	r0, #0
 8003894:	f000 f808 	bl	80038a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003898:	f7ff fa8a 	bl	8002db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023c00 	.word	0x40023c00

080038a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_InitTick+0x54>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b12      	ldr	r3, [pc, #72]	; (8003900 <HAL_InitTick+0x58>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	4619      	mov	r1, r3
 80038ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038be:	fbb3 f3f1 	udiv	r3, r3, r1
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f996 	bl	8003bf8 <HAL_SYSTICK_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00e      	b.n	80038f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b0f      	cmp	r3, #15
 80038da:	d80a      	bhi.n	80038f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038dc:	2200      	movs	r2, #0
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	f000 f944 	bl	8003b70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038e8:	4a06      	ldr	r2, [pc, #24]	; (8003904 <HAL_InitTick+0x5c>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	e000      	b.n	80038f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000154 	.word	0x20000154
 8003900:	2000015c 	.word	0x2000015c
 8003904:	20000158 	.word	0x20000158

08003908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_IncTick+0x20>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_IncTick+0x24>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4413      	add	r3, r2
 8003918:	4a04      	ldr	r2, [pc, #16]	; (800392c <HAL_IncTick+0x24>)
 800391a:	6013      	str	r3, [r2, #0]
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	2000015c 	.word	0x2000015c
 800392c:	200006c0 	.word	0x200006c0

08003930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return uwTick;
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <HAL_GetTick+0x14>)
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	200006c0 	.word	0x200006c0

08003948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003950:	f7ff ffee 	bl	8003930 <HAL_GetTick>
 8003954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d005      	beq.n	800396e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <HAL_Delay+0x44>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800396e:	bf00      	nop
 8003970:	f7ff ffde 	bl	8003930 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	429a      	cmp	r2, r3
 800397e:	d8f7      	bhi.n	8003970 <HAL_Delay+0x28>
  {
  }
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	2000015c 	.word	0x2000015c

08003990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ac:	4013      	ands	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c2:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	60d3      	str	r3, [r2, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <__NVIC_GetPriorityGrouping+0x18>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 0307 	and.w	r3, r3, #7
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	db0b      	blt.n	8003a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	4907      	ldr	r1, [pc, #28]	; (8003a2c <__NVIC_EnableIRQ+0x38>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2001      	movs	r0, #1
 8003a16:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	e000e100 	.word	0xe000e100

08003a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	6039      	str	r1, [r7, #0]
 8003a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	db0a      	blt.n	8003a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	490c      	ldr	r1, [pc, #48]	; (8003a7c <__NVIC_SetPriority+0x4c>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	440b      	add	r3, r1
 8003a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a58:	e00a      	b.n	8003a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4908      	ldr	r1, [pc, #32]	; (8003a80 <__NVIC_SetPriority+0x50>)
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	3b04      	subs	r3, #4
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	761a      	strb	r2, [r3, #24]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000e100 	.word	0xe000e100
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f1c3 0307 	rsb	r3, r3, #7
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	bf28      	it	cs
 8003aa2:	2304      	movcs	r3, #4
 8003aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d902      	bls.n	8003ab4 <NVIC_EncodePriority+0x30>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3b03      	subs	r3, #3
 8003ab2:	e000      	b.n	8003ab6 <NVIC_EncodePriority+0x32>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003acc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	43d9      	mvns	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003adc:	4313      	orrs	r3, r2
         );
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003afc:	d301      	bcc.n	8003b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003afe:	2301      	movs	r3, #1
 8003b00:	e00f      	b.n	8003b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b02:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <SysTick_Config+0x40>)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b0a:	210f      	movs	r1, #15
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b10:	f7ff ff8e 	bl	8003a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <SysTick_Config+0x40>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <SysTick_Config+0x40>)
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	e000e010 	.word	0xe000e010

08003b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b07      	cmp	r3, #7
 8003b3c:	d00f      	beq.n	8003b5e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b06      	cmp	r3, #6
 8003b42:	d00c      	beq.n	8003b5e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d009      	beq.n	8003b5e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d006      	beq.n	8003b5e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d003      	beq.n	8003b5e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b56:	2192      	movs	r1, #146	; 0x92
 8003b58:	4804      	ldr	r0, [pc, #16]	; (8003b6c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003b5a:	f7ff f91e 	bl	8002d9a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff ff16 	bl	8003990 <__NVIC_SetPriorityGrouping>
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	08010524 	.word	0x08010524

08003b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b0f      	cmp	r3, #15
 8003b86:	d903      	bls.n	8003b90 <HAL_NVIC_SetPriority+0x20>
 8003b88:	21aa      	movs	r1, #170	; 0xaa
 8003b8a:	480e      	ldr	r0, [pc, #56]	; (8003bc4 <HAL_NVIC_SetPriority+0x54>)
 8003b8c:	f7ff f905 	bl	8002d9a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b0f      	cmp	r3, #15
 8003b94:	d903      	bls.n	8003b9e <HAL_NVIC_SetPriority+0x2e>
 8003b96:	21ab      	movs	r1, #171	; 0xab
 8003b98:	480a      	ldr	r0, [pc, #40]	; (8003bc4 <HAL_NVIC_SetPriority+0x54>)
 8003b9a:	f7ff f8fe 	bl	8002d9a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b9e:	f7ff ff1b 	bl	80039d8 <__NVIC_GetPriorityGrouping>
 8003ba2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	6978      	ldr	r0, [r7, #20]
 8003baa:	f7ff ff6b 	bl	8003a84 <NVIC_EncodePriority>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff ff3a 	bl	8003a30 <__NVIC_SetPriority>
}
 8003bbc:	bf00      	nop
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	08010524 	.word	0x08010524

08003bc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	da03      	bge.n	8003be2 <HAL_NVIC_EnableIRQ+0x1a>
 8003bda:	21be      	movs	r1, #190	; 0xbe
 8003bdc:	4805      	ldr	r0, [pc, #20]	; (8003bf4 <HAL_NVIC_EnableIRQ+0x2c>)
 8003bde:	f7ff f8dc 	bl	8002d9a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff ff04 	bl	80039f4 <__NVIC_EnableIRQ>
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	08010524 	.word	0x08010524

08003bf8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ff73 	bl	8003aec <SysTick_Config>
 8003c06:	4603      	mov	r3, r0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c1c:	f7ff fe88 	bl	8003930 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e204      	b.n	8004036 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a97      	ldr	r2, [pc, #604]	; (8003e90 <HAL_DMA_Init+0x280>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d04e      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a96      	ldr	r2, [pc, #600]	; (8003e94 <HAL_DMA_Init+0x284>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d049      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a94      	ldr	r2, [pc, #592]	; (8003e98 <HAL_DMA_Init+0x288>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d044      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a93      	ldr	r2, [pc, #588]	; (8003e9c <HAL_DMA_Init+0x28c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d03f      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a91      	ldr	r2, [pc, #580]	; (8003ea0 <HAL_DMA_Init+0x290>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d03a      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a90      	ldr	r2, [pc, #576]	; (8003ea4 <HAL_DMA_Init+0x294>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d035      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a8e      	ldr	r2, [pc, #568]	; (8003ea8 <HAL_DMA_Init+0x298>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d030      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a8d      	ldr	r2, [pc, #564]	; (8003eac <HAL_DMA_Init+0x29c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d02b      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a8b      	ldr	r2, [pc, #556]	; (8003eb0 <HAL_DMA_Init+0x2a0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d026      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a8a      	ldr	r2, [pc, #552]	; (8003eb4 <HAL_DMA_Init+0x2a4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d021      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a88      	ldr	r2, [pc, #544]	; (8003eb8 <HAL_DMA_Init+0x2a8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01c      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a87      	ldr	r2, [pc, #540]	; (8003ebc <HAL_DMA_Init+0x2ac>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d017      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a85      	ldr	r2, [pc, #532]	; (8003ec0 <HAL_DMA_Init+0x2b0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d012      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a84      	ldr	r2, [pc, #528]	; (8003ec4 <HAL_DMA_Init+0x2b4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00d      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a82      	ldr	r2, [pc, #520]	; (8003ec8 <HAL_DMA_Init+0x2b8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d008      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a81      	ldr	r2, [pc, #516]	; (8003ecc <HAL_DMA_Init+0x2bc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <HAL_DMA_Init+0xc4>
 8003ccc:	21b8      	movs	r1, #184	; 0xb8
 8003cce:	4880      	ldr	r0, [pc, #512]	; (8003ed0 <HAL_DMA_Init+0x2c0>)
 8003cd0:	f7ff f863 	bl	8002d9a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d026      	beq.n	8003d2a <HAL_DMA_Init+0x11a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ce4:	d021      	beq.n	8003d2a <HAL_DMA_Init+0x11a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cee:	d01c      	beq.n	8003d2a <HAL_DMA_Init+0x11a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003cf8:	d017      	beq.n	8003d2a <HAL_DMA_Init+0x11a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d02:	d012      	beq.n	8003d2a <HAL_DMA_Init+0x11a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003d0c:	d00d      	beq.n	8003d2a <HAL_DMA_Init+0x11a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d16:	d008      	beq.n	8003d2a <HAL_DMA_Init+0x11a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003d20:	d003      	beq.n	8003d2a <HAL_DMA_Init+0x11a>
 8003d22:	21b9      	movs	r1, #185	; 0xb9
 8003d24:	486a      	ldr	r0, [pc, #424]	; (8003ed0 <HAL_DMA_Init+0x2c0>)
 8003d26:	f7ff f838 	bl	8002d9a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_DMA_Init+0x13a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d007      	beq.n	8003d4a <HAL_DMA_Init+0x13a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	d003      	beq.n	8003d4a <HAL_DMA_Init+0x13a>
 8003d42:	21ba      	movs	r1, #186	; 0xba
 8003d44:	4862      	ldr	r0, [pc, #392]	; (8003ed0 <HAL_DMA_Init+0x2c0>)
 8003d46:	f7ff f828 	bl	8002d9a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d52:	d007      	beq.n	8003d64 <HAL_DMA_Init+0x154>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_DMA_Init+0x154>
 8003d5c:	21bb      	movs	r1, #187	; 0xbb
 8003d5e:	485c      	ldr	r0, [pc, #368]	; (8003ed0 <HAL_DMA_Init+0x2c0>)
 8003d60:	f7ff f81b 	bl	8002d9a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6c:	d007      	beq.n	8003d7e <HAL_DMA_Init+0x16e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_DMA_Init+0x16e>
 8003d76:	21bc      	movs	r1, #188	; 0xbc
 8003d78:	4855      	ldr	r0, [pc, #340]	; (8003ed0 <HAL_DMA_Init+0x2c0>)
 8003d7a:	f7ff f80e 	bl	8002d9a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00d      	beq.n	8003da2 <HAL_DMA_Init+0x192>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8e:	d008      	beq.n	8003da2 <HAL_DMA_Init+0x192>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d98:	d003      	beq.n	8003da2 <HAL_DMA_Init+0x192>
 8003d9a:	21bd      	movs	r1, #189	; 0xbd
 8003d9c:	484c      	ldr	r0, [pc, #304]	; (8003ed0 <HAL_DMA_Init+0x2c0>)
 8003d9e:	f7fe fffc 	bl	8002d9a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <HAL_DMA_Init+0x1b6>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db2:	d008      	beq.n	8003dc6 <HAL_DMA_Init+0x1b6>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dbc:	d003      	beq.n	8003dc6 <HAL_DMA_Init+0x1b6>
 8003dbe:	21be      	movs	r1, #190	; 0xbe
 8003dc0:	4843      	ldr	r0, [pc, #268]	; (8003ed0 <HAL_DMA_Init+0x2c0>)
 8003dc2:	f7fe ffea 	bl	8002d9a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <HAL_DMA_Init+0x1d8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd6:	d007      	beq.n	8003de8 <HAL_DMA_Init+0x1d8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d003      	beq.n	8003de8 <HAL_DMA_Init+0x1d8>
 8003de0:	21bf      	movs	r1, #191	; 0xbf
 8003de2:	483b      	ldr	r0, [pc, #236]	; (8003ed0 <HAL_DMA_Init+0x2c0>)
 8003de4:	f7fe ffd9 	bl	8002d9a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d012      	beq.n	8003e16 <HAL_DMA_Init+0x206>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df8:	d00d      	beq.n	8003e16 <HAL_DMA_Init+0x206>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e02:	d008      	beq.n	8003e16 <HAL_DMA_Init+0x206>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e0c:	d003      	beq.n	8003e16 <HAL_DMA_Init+0x206>
 8003e0e:	21c0      	movs	r1, #192	; 0xc0
 8003e10:	482f      	ldr	r0, [pc, #188]	; (8003ed0 <HAL_DMA_Init+0x2c0>)
 8003e12:	f7fe ffc2 	bl	8002d9a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <HAL_DMA_Init+0x21e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d003      	beq.n	8003e2e <HAL_DMA_Init+0x21e>
 8003e26:	21c1      	movs	r1, #193	; 0xc1
 8003e28:	4829      	ldr	r0, [pc, #164]	; (8003ed0 <HAL_DMA_Init+0x2c0>)
 8003e2a:	f7fe ffb6 	bl	8002d9a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d065      	beq.n	8003f02 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00f      	beq.n	8003e5e <HAL_DMA_Init+0x24e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d00b      	beq.n	8003e5e <HAL_DMA_Init+0x24e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d007      	beq.n	8003e5e <HAL_DMA_Init+0x24e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d003      	beq.n	8003e5e <HAL_DMA_Init+0x24e>
 8003e56:	21c6      	movs	r1, #198	; 0xc6
 8003e58:	481d      	ldr	r0, [pc, #116]	; (8003ed0 <HAL_DMA_Init+0x2c0>)
 8003e5a:	f7fe ff9e 	bl	8002d9a <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d036      	beq.n	8003ed4 <HAL_DMA_Init+0x2c4>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e6e:	d031      	beq.n	8003ed4 <HAL_DMA_Init+0x2c4>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e78:	d02c      	beq.n	8003ed4 <HAL_DMA_Init+0x2c4>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e82:	d027      	beq.n	8003ed4 <HAL_DMA_Init+0x2c4>
 8003e84:	21c7      	movs	r1, #199	; 0xc7
 8003e86:	4812      	ldr	r0, [pc, #72]	; (8003ed0 <HAL_DMA_Init+0x2c0>)
 8003e88:	f7fe ff87 	bl	8002d9a <assert_failed>
 8003e8c:	e022      	b.n	8003ed4 <HAL_DMA_Init+0x2c4>
 8003e8e:	bf00      	nop
 8003e90:	40026010 	.word	0x40026010
 8003e94:	40026028 	.word	0x40026028
 8003e98:	40026040 	.word	0x40026040
 8003e9c:	40026058 	.word	0x40026058
 8003ea0:	40026070 	.word	0x40026070
 8003ea4:	40026088 	.word	0x40026088
 8003ea8:	400260a0 	.word	0x400260a0
 8003eac:	400260b8 	.word	0x400260b8
 8003eb0:	40026410 	.word	0x40026410
 8003eb4:	40026428 	.word	0x40026428
 8003eb8:	40026440 	.word	0x40026440
 8003ebc:	40026458 	.word	0x40026458
 8003ec0:	40026470 	.word	0x40026470
 8003ec4:	40026488 	.word	0x40026488
 8003ec8:	400264a0 	.word	0x400264a0
 8003ecc:	400264b8 	.word	0x400264b8
 8003ed0:	08010560 	.word	0x08010560
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d012      	beq.n	8003f02 <HAL_DMA_Init+0x2f2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ee4:	d00d      	beq.n	8003f02 <HAL_DMA_Init+0x2f2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eee:	d008      	beq.n	8003f02 <HAL_DMA_Init+0x2f2>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ef8:	d003      	beq.n	8003f02 <HAL_DMA_Init+0x2f2>
 8003efa:	21c8      	movs	r1, #200	; 0xc8
 8003efc:	4850      	ldr	r0, [pc, #320]	; (8004040 <HAL_DMA_Init+0x430>)
 8003efe:	f7fe ff4c 	bl	8002d9a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f22:	e00f      	b.n	8003f44 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f24:	f7ff fd04 	bl	8003930 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d908      	bls.n	8003f44 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e078      	b.n	8004036 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e8      	bne.n	8003f24 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4b39      	ldr	r3, [pc, #228]	; (8004044 <HAL_DMA_Init+0x434>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d107      	bne.n	8003fae <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f023 0307 	bic.w	r3, r3, #7
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d117      	bne.n	8004008 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00e      	beq.n	8004008 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fa7e 	bl	80044ec <DMA_CheckFifoParam>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2240      	movs	r2, #64	; 0x40
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004004:	2301      	movs	r3, #1
 8004006:	e016      	b.n	8004036 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fa35 	bl	8004480 <DMA_CalcBaseAndBitshift>
 8004016:	4603      	mov	r3, r0
 8004018:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401e:	223f      	movs	r2, #63	; 0x3f
 8004020:	409a      	lsls	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	08010560 	.word	0x08010560
 8004044:	f010803f 	.word	0xf010803f

08004048 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004056:	f7ff fc6b 	bl	8003930 <HAL_GetTick>
 800405a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d008      	beq.n	800407a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2280      	movs	r2, #128	; 0x80
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e052      	b.n	8004120 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0216 	bic.w	r2, r2, #22
 8004088:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004098:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d103      	bne.n	80040aa <HAL_DMA_Abort+0x62>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0208 	bic.w	r2, r2, #8
 80040b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ca:	e013      	b.n	80040f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040cc:	f7ff fc30 	bl	8003930 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d90c      	bls.n	80040f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2203      	movs	r2, #3
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e015      	b.n	8004120 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e4      	bne.n	80040cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	223f      	movs	r2, #63	; 0x3f
 8004108:	409a      	lsls	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d004      	beq.n	8004146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2280      	movs	r2, #128	; 0x80
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e00c      	b.n	8004160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2205      	movs	r2, #5
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004178:	4b92      	ldr	r3, [pc, #584]	; (80043c4 <HAL_DMA_IRQHandler+0x258>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a92      	ldr	r2, [pc, #584]	; (80043c8 <HAL_DMA_IRQHandler+0x25c>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	0a9b      	lsrs	r3, r3, #10
 8004184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004196:	2208      	movs	r2, #8
 8004198:	409a      	lsls	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01a      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0204 	bic.w	r2, r2, #4
 80041be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	2208      	movs	r2, #8
 80041c6:	409a      	lsls	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	f043 0201 	orr.w	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041dc:	2201      	movs	r2, #1
 80041de:	409a      	lsls	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fa:	2201      	movs	r2, #1
 80041fc:	409a      	lsls	r2, r3
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f043 0202 	orr.w	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	2204      	movs	r2, #4
 8004214:	409a      	lsls	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d012      	beq.n	8004244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	2204      	movs	r2, #4
 8004232:	409a      	lsls	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	2210      	movs	r2, #16
 800424a:	409a      	lsls	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d043      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d03c      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004266:	2210      	movs	r2, #16
 8004268:	409a      	lsls	r2, r3
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d018      	beq.n	80042ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d108      	bne.n	800429c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d024      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
 800429a:	e01f      	b.n	80042dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01b      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
 80042ac:	e016      	b.n	80042dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d107      	bne.n	80042cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0208 	bic.w	r2, r2, #8
 80042ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	2220      	movs	r2, #32
 80042e2:	409a      	lsls	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 808e 	beq.w	800440a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8086 	beq.w	800440a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004302:	2220      	movs	r2, #32
 8004304:	409a      	lsls	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b05      	cmp	r3, #5
 8004314:	d136      	bne.n	8004384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0216 	bic.w	r2, r2, #22
 8004324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <HAL_DMA_IRQHandler+0x1da>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0208 	bic.w	r2, r2, #8
 8004354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435a:	223f      	movs	r2, #63	; 0x3f
 800435c:	409a      	lsls	r2, r3
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004376:	2b00      	cmp	r3, #0
 8004378:	d07d      	beq.n	8004476 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4798      	blx	r3
        }
        return;
 8004382:	e078      	b.n	8004476 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01c      	beq.n	80043cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d108      	bne.n	80043b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d030      	beq.n	800440a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4798      	blx	r3
 80043b0:	e02b      	b.n	800440a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d027      	beq.n	800440a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
 80043c2:	e022      	b.n	800440a <HAL_DMA_IRQHandler+0x29e>
 80043c4:	20000154 	.word	0x20000154
 80043c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10f      	bne.n	80043fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0210 	bic.w	r2, r2, #16
 80043e8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	2b00      	cmp	r3, #0
 8004410:	d032      	beq.n	8004478 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d022      	beq.n	8004464 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2205      	movs	r2, #5
 8004422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3301      	adds	r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	429a      	cmp	r2, r3
 8004440:	d307      	bcc.n	8004452 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f2      	bne.n	8004436 <HAL_DMA_IRQHandler+0x2ca>
 8004450:	e000      	b.n	8004454 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004452:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
 8004474:	e000      	b.n	8004478 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004476:	bf00      	nop
    }
  }
}
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop

08004480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	3b10      	subs	r3, #16
 8004490:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <DMA_CalcBaseAndBitshift+0x64>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800449a:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <DMA_CalcBaseAndBitshift+0x68>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d909      	bls.n	80044c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	1d1a      	adds	r2, r3, #4
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	659a      	str	r2, [r3, #88]	; 0x58
 80044c0:	e007      	b.n	80044d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044ca:	f023 0303 	bic.w	r3, r3, #3
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	aaaaaaab 	.word	0xaaaaaaab
 80044e8:	080107dc 	.word	0x080107dc

080044ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11f      	bne.n	8004546 <DMA_CheckFifoParam+0x5a>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d856      	bhi.n	80045ba <DMA_CheckFifoParam+0xce>
 800450c:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <DMA_CheckFifoParam+0x28>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004525 	.word	0x08004525
 8004518:	08004537 	.word	0x08004537
 800451c:	08004525 	.word	0x08004525
 8004520:	080045bb 	.word	0x080045bb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d046      	beq.n	80045be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004534:	e043      	b.n	80045be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800453e:	d140      	bne.n	80045c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004544:	e03d      	b.n	80045c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454e:	d121      	bne.n	8004594 <DMA_CheckFifoParam+0xa8>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b03      	cmp	r3, #3
 8004554:	d837      	bhi.n	80045c6 <DMA_CheckFifoParam+0xda>
 8004556:	a201      	add	r2, pc, #4	; (adr r2, 800455c <DMA_CheckFifoParam+0x70>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	0800456d 	.word	0x0800456d
 8004560:	08004573 	.word	0x08004573
 8004564:	0800456d 	.word	0x0800456d
 8004568:	08004585 	.word	0x08004585
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
      break;
 8004570:	e030      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d025      	beq.n	80045ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004582:	e022      	b.n	80045ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800458c:	d11f      	bne.n	80045ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004592:	e01c      	b.n	80045ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d903      	bls.n	80045a2 <DMA_CheckFifoParam+0xb6>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d003      	beq.n	80045a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045a0:	e018      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
      break;
 80045a6:	e015      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00e      	beq.n	80045d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      break;
 80045b8:	e00b      	b.n	80045d2 <DMA_CheckFifoParam+0xe6>
      break;
 80045ba:	bf00      	nop
 80045bc:	e00a      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045be:	bf00      	nop
 80045c0:	e008      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045c2:	bf00      	nop
 80045c4:	e006      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045c6:	bf00      	nop
 80045c8:	e004      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045ca:	bf00      	nop
 80045cc:	e002      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80045ce:	bf00      	nop
 80045d0:	e000      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045d2:	bf00      	nop
    }
  } 
  
  return status; 
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop

080045e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a37      	ldr	r2, [pc, #220]	; (80046dc <HAL_GPIO_Init+0xf8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01f      	beq.n	8004642 <HAL_GPIO_Init+0x5e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a36      	ldr	r2, [pc, #216]	; (80046e0 <HAL_GPIO_Init+0xfc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d01b      	beq.n	8004642 <HAL_GPIO_Init+0x5e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a35      	ldr	r2, [pc, #212]	; (80046e4 <HAL_GPIO_Init+0x100>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d017      	beq.n	8004642 <HAL_GPIO_Init+0x5e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a34      	ldr	r2, [pc, #208]	; (80046e8 <HAL_GPIO_Init+0x104>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_GPIO_Init+0x5e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a33      	ldr	r2, [pc, #204]	; (80046ec <HAL_GPIO_Init+0x108>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00f      	beq.n	8004642 <HAL_GPIO_Init+0x5e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a32      	ldr	r2, [pc, #200]	; (80046f0 <HAL_GPIO_Init+0x10c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00b      	beq.n	8004642 <HAL_GPIO_Init+0x5e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a31      	ldr	r2, [pc, #196]	; (80046f4 <HAL_GPIO_Init+0x110>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d007      	beq.n	8004642 <HAL_GPIO_Init+0x5e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a30      	ldr	r2, [pc, #192]	; (80046f8 <HAL_GPIO_Init+0x114>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d003      	beq.n	8004642 <HAL_GPIO_Init+0x5e>
 800463a:	21ac      	movs	r1, #172	; 0xac
 800463c:	482f      	ldr	r0, [pc, #188]	; (80046fc <HAL_GPIO_Init+0x118>)
 800463e:	f7fe fbac 	bl	8002d9a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_GPIO_Init+0x74>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_Init+0x7c>
 8004658:	21ad      	movs	r1, #173	; 0xad
 800465a:	4828      	ldr	r0, [pc, #160]	; (80046fc <HAL_GPIO_Init+0x118>)
 800465c:	f7fe fb9d 	bl	8002d9a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d035      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d031      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b11      	cmp	r3, #17
 8004676:	d02d      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d029      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b12      	cmp	r3, #18
 8004686:	d025      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004690:	d020      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800469a:	d01b      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80046a4:	d016      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80046ae:	d011      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80046b8:	d00c      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80046c2:	d007      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d003      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
 80046cc:	21ae      	movs	r1, #174	; 0xae
 80046ce:	480b      	ldr	r0, [pc, #44]	; (80046fc <HAL_GPIO_Init+0x118>)
 80046d0:	f7fe fb63 	bl	8002d9a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	e289      	b.n	8004bee <HAL_GPIO_Init+0x60a>
 80046da:	bf00      	nop
 80046dc:	40020000 	.word	0x40020000
 80046e0:	40020400 	.word	0x40020400
 80046e4:	40020800 	.word	0x40020800
 80046e8:	40020c00 	.word	0x40020c00
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40021400 	.word	0x40021400
 80046f4:	40021800 	.word	0x40021800
 80046f8:	40021c00 	.word	0x40021c00
 80046fc:	08010598 	.word	0x08010598
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004700:	2201      	movs	r2, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4013      	ands	r3, r2
 8004712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	429a      	cmp	r2, r3
 800471a:	f040 8265 	bne.w	8004be8 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b01      	cmp	r3, #1
 8004728:	d005      	beq.n	8004736 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004732:	2b02      	cmp	r3, #2
 8004734:	d144      	bne.n	80047c0 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00f      	beq.n	800475e <HAL_GPIO_Init+0x17a>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d00b      	beq.n	800475e <HAL_GPIO_Init+0x17a>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d007      	beq.n	800475e <HAL_GPIO_Init+0x17a>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d003      	beq.n	800475e <HAL_GPIO_Init+0x17a>
 8004756:	21c0      	movs	r1, #192	; 0xc0
 8004758:	4831      	ldr	r0, [pc, #196]	; (8004820 <HAL_GPIO_Init+0x23c>)
 800475a:	f7fe fb1e 	bl	8002d9a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	2203      	movs	r2, #3
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43db      	mvns	r3, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4013      	ands	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004794:	2201      	movs	r2, #1
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 0201 	and.w	r2, r3, #1
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d02b      	beq.n	8004824 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00b      	beq.n	80047ec <HAL_GPIO_Init+0x208>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d007      	beq.n	80047ec <HAL_GPIO_Init+0x208>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d003      	beq.n	80047ec <HAL_GPIO_Init+0x208>
 80047e4:	21d1      	movs	r1, #209	; 0xd1
 80047e6:	480e      	ldr	r0, [pc, #56]	; (8004820 <HAL_GPIO_Init+0x23c>)
 80047e8:	f7fe fad7 	bl	8002d9a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	2203      	movs	r2, #3
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	60da      	str	r2, [r3, #12]
 800481c:	e002      	b.n	8004824 <HAL_GPIO_Init+0x240>
 800481e:	bf00      	nop
 8004820:	08010598 	.word	0x08010598
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	2b02      	cmp	r3, #2
 800482e:	f040 810c 	bne.w	8004a4a <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80e3 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b09      	cmp	r3, #9
 8004842:	f000 80de 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80d9 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80d4 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80cf 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80ca 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b01      	cmp	r3, #1
 8004874:	f000 80c5 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b01      	cmp	r3, #1
 800487e:	f000 80c0 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b02      	cmp	r3, #2
 8004888:	f000 80bb 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b02      	cmp	r3, #2
 8004892:	f000 80b6 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b02      	cmp	r3, #2
 800489c:	f000 80b1 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	f000 80ac 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	f000 80a7 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	f000 80a2 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	f000 809d 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b05      	cmp	r3, #5
 80048ce:	f000 8098 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b05      	cmp	r3, #5
 80048d8:	f000 8093 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b09      	cmp	r3, #9
 80048e2:	f000 808e 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	f000 8089 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b09      	cmp	r3, #9
 80048f6:	f000 8084 	beq.w	8004a02 <HAL_GPIO_Init+0x41e>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b07      	cmp	r3, #7
 8004900:	d07f      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b07      	cmp	r3, #7
 8004908:	d07b      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	2b07      	cmp	r3, #7
 8004910:	d077      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b08      	cmp	r3, #8
 8004918:	d073      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b08      	cmp	r3, #8
 8004920:	d06f      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b08      	cmp	r3, #8
 8004928:	d06b      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b09      	cmp	r3, #9
 8004930:	d067      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b09      	cmp	r3, #9
 8004938:	d063      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b0a      	cmp	r3, #10
 8004940:	d05f      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b0a      	cmp	r3, #10
 8004948:	d05b      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b0b      	cmp	r3, #11
 8004950:	d057      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d053      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b0c      	cmp	r3, #12
 8004960:	d04f      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b0d      	cmp	r3, #13
 8004968:	d04b      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d047      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b05      	cmp	r3, #5
 8004978:	d043      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b0c      	cmp	r3, #12
 8004980:	d03f      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b06      	cmp	r3, #6
 8004988:	d03b      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d037      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b04      	cmp	r3, #4
 8004998:	d033      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b05      	cmp	r3, #5
 80049a0:	d02f      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d02b      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b06      	cmp	r3, #6
 80049b0:	d027      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b07      	cmp	r3, #7
 80049b8:	d023      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b07      	cmp	r3, #7
 80049c0:	d01f      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b07      	cmp	r3, #7
 80049c8:	d01b      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b07      	cmp	r3, #7
 80049d0:	d017      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d013      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d00f      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b09      	cmp	r3, #9
 80049e8:	d00b      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b0a      	cmp	r3, #10
 80049f0:	d007      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b0a      	cmp	r3, #10
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_Init+0x41e>
 80049fa:	21de      	movs	r1, #222	; 0xde
 80049fc:	4880      	ldr	r0, [pc, #512]	; (8004c00 <HAL_GPIO_Init+0x61c>)
 80049fe:	f7fe f9cc 	bl	8002d9a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	08da      	lsrs	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3208      	adds	r2, #8
 8004a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	220f      	movs	r2, #15
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4013      	ands	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	08da      	lsrs	r2, r3, #3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3208      	adds	r2, #8
 8004a44:	69b9      	ldr	r1, [r7, #24]
 8004a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	2203      	movs	r2, #3
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f003 0203 	and.w	r2, r3, #3
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80ae 	beq.w	8004be8 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	4b5c      	ldr	r3, [pc, #368]	; (8004c04 <HAL_GPIO_Init+0x620>)
 8004a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a94:	4a5b      	ldr	r2, [pc, #364]	; (8004c04 <HAL_GPIO_Init+0x620>)
 8004a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a9a:	6453      	str	r3, [r2, #68]	; 0x44
 8004a9c:	4b59      	ldr	r3, [pc, #356]	; (8004c04 <HAL_GPIO_Init+0x620>)
 8004a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aa8:	4a57      	ldr	r2, [pc, #348]	; (8004c08 <HAL_GPIO_Init+0x624>)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	089b      	lsrs	r3, r3, #2
 8004aae:	3302      	adds	r3, #2
 8004ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	220f      	movs	r2, #15
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a4f      	ldr	r2, [pc, #316]	; (8004c0c <HAL_GPIO_Init+0x628>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d025      	beq.n	8004b20 <HAL_GPIO_Init+0x53c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a4e      	ldr	r2, [pc, #312]	; (8004c10 <HAL_GPIO_Init+0x62c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d01f      	beq.n	8004b1c <HAL_GPIO_Init+0x538>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a4d      	ldr	r2, [pc, #308]	; (8004c14 <HAL_GPIO_Init+0x630>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d019      	beq.n	8004b18 <HAL_GPIO_Init+0x534>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a4c      	ldr	r2, [pc, #304]	; (8004c18 <HAL_GPIO_Init+0x634>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <HAL_GPIO_Init+0x530>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a4b      	ldr	r2, [pc, #300]	; (8004c1c <HAL_GPIO_Init+0x638>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00d      	beq.n	8004b10 <HAL_GPIO_Init+0x52c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a4a      	ldr	r2, [pc, #296]	; (8004c20 <HAL_GPIO_Init+0x63c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <HAL_GPIO_Init+0x528>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a49      	ldr	r2, [pc, #292]	; (8004c24 <HAL_GPIO_Init+0x640>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d101      	bne.n	8004b08 <HAL_GPIO_Init+0x524>
 8004b04:	2306      	movs	r3, #6
 8004b06:	e00c      	b.n	8004b22 <HAL_GPIO_Init+0x53e>
 8004b08:	2307      	movs	r3, #7
 8004b0a:	e00a      	b.n	8004b22 <HAL_GPIO_Init+0x53e>
 8004b0c:	2305      	movs	r3, #5
 8004b0e:	e008      	b.n	8004b22 <HAL_GPIO_Init+0x53e>
 8004b10:	2304      	movs	r3, #4
 8004b12:	e006      	b.n	8004b22 <HAL_GPIO_Init+0x53e>
 8004b14:	2303      	movs	r3, #3
 8004b16:	e004      	b.n	8004b22 <HAL_GPIO_Init+0x53e>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e002      	b.n	8004b22 <HAL_GPIO_Init+0x53e>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_GPIO_Init+0x53e>
 8004b20:	2300      	movs	r3, #0
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	f002 0203 	and.w	r2, r2, #3
 8004b28:	0092      	lsls	r2, r2, #2
 8004b2a:	4093      	lsls	r3, r2
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b32:	4935      	ldr	r1, [pc, #212]	; (8004c08 <HAL_GPIO_Init+0x624>)
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	089b      	lsrs	r3, r3, #2
 8004b38:	3302      	adds	r3, #2
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b40:	4b39      	ldr	r3, [pc, #228]	; (8004c28 <HAL_GPIO_Init+0x644>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b64:	4a30      	ldr	r2, [pc, #192]	; (8004c28 <HAL_GPIO_Init+0x644>)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b6a:	4b2f      	ldr	r3, [pc, #188]	; (8004c28 <HAL_GPIO_Init+0x644>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b8e:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <HAL_GPIO_Init+0x644>)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b94:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <HAL_GPIO_Init+0x644>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bb8:	4a1b      	ldr	r2, [pc, #108]	; (8004c28 <HAL_GPIO_Init+0x644>)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bbe:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <HAL_GPIO_Init+0x644>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004be2:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <HAL_GPIO_Init+0x644>)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	3301      	adds	r3, #1
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	2b0f      	cmp	r3, #15
 8004bf2:	f67f ad85 	bls.w	8004700 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	08010598 	.word	0x08010598
 8004c04:	40023800 	.word	0x40023800
 8004c08:	40013800 	.word	0x40013800
 8004c0c:	40020000 	.word	0x40020000
 8004c10:	40020400 	.word	0x40020400
 8004c14:	40020800 	.word	0x40020800
 8004c18:	40020c00 	.word	0x40020c00
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	40021400 	.word	0x40021400
 8004c24:	40021800 	.word	0x40021800
 8004c28:	40013c00 	.word	0x40013c00

08004c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	807b      	strh	r3, [r7, #2]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004c3c:	887b      	ldrh	r3, [r7, #2]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d004      	beq.n	8004c4c <HAL_GPIO_WritePin+0x20>
 8004c42:	887b      	ldrh	r3, [r7, #2]
 8004c44:	0c1b      	lsrs	r3, r3, #16
 8004c46:	041b      	lsls	r3, r3, #16
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d004      	beq.n	8004c56 <HAL_GPIO_WritePin+0x2a>
 8004c4c:	f240 119d 	movw	r1, #413	; 0x19d
 8004c50:	480e      	ldr	r0, [pc, #56]	; (8004c8c <HAL_GPIO_WritePin+0x60>)
 8004c52:	f7fe f8a2 	bl	8002d9a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004c56:	787b      	ldrb	r3, [r7, #1]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <HAL_GPIO_WritePin+0x40>
 8004c5c:	787b      	ldrb	r3, [r7, #1]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d004      	beq.n	8004c6c <HAL_GPIO_WritePin+0x40>
 8004c62:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8004c66:	4809      	ldr	r0, [pc, #36]	; (8004c8c <HAL_GPIO_WritePin+0x60>)
 8004c68:	f7fe f897 	bl	8002d9a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004c6c:	787b      	ldrb	r3, [r7, #1]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c72:	887a      	ldrh	r2, [r7, #2]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c78:	e003      	b.n	8004c82 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c7a:	887b      	ldrh	r3, [r7, #2]
 8004c7c:	041a      	lsls	r2, r3, #16
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	619a      	str	r2, [r3, #24]
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	08010598 	.word	0x08010598

08004c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d006      	beq.n	8004cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ca6:	4a05      	ldr	r2, [pc, #20]	; (8004cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cac:	88fb      	ldrh	r3, [r7, #6]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe f852 	bl	8002d58 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40013c00 	.word	0x40013c00

08004cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e1be      	b.n	8005050 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a9f      	ldr	r2, [pc, #636]	; (8004f54 <HAL_I2C_Init+0x294>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00e      	beq.n	8004cfa <HAL_I2C_Init+0x3a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a9d      	ldr	r2, [pc, #628]	; (8004f58 <HAL_I2C_Init+0x298>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <HAL_I2C_Init+0x3a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a9c      	ldr	r2, [pc, #624]	; (8004f5c <HAL_I2C_Init+0x29c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_I2C_Init+0x3a>
 8004cf0:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004cf4:	489a      	ldr	r0, [pc, #616]	; (8004f60 <HAL_I2C_Init+0x2a0>)
 8004cf6:	f7fe f850 	bl	8002d9a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d004      	beq.n	8004d0c <HAL_I2C_Init+0x4c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4a97      	ldr	r2, [pc, #604]	; (8004f64 <HAL_I2C_Init+0x2a4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d904      	bls.n	8004d16 <HAL_I2C_Init+0x56>
 8004d0c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004d10:	4893      	ldr	r0, [pc, #588]	; (8004f60 <HAL_I2C_Init+0x2a0>)
 8004d12:	f7fe f842 	bl	8002d9a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_I2C_Init+0x72>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d26:	d004      	beq.n	8004d32 <HAL_I2C_Init+0x72>
 8004d28:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004d2c:	488c      	ldr	r0, [pc, #560]	; (8004f60 <HAL_I2C_Init+0x2a0>)
 8004d2e:	f7fe f834 	bl	8002d9a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <HAL_I2C_Init+0x8c>
 8004d42:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004d46:	4886      	ldr	r0, [pc, #536]	; (8004f60 <HAL_I2C_Init+0x2a0>)
 8004d48:	f7fe f827 	bl	8002d9a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d54:	d009      	beq.n	8004d6a <HAL_I2C_Init+0xaa>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d5e:	d004      	beq.n	8004d6a <HAL_I2C_Init+0xaa>
 8004d60:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004d64:	487e      	ldr	r0, [pc, #504]	; (8004f60 <HAL_I2C_Init+0x2a0>)
 8004d66:	f7fe f818 	bl	8002d9a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_I2C_Init+0xc4>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d004      	beq.n	8004d84 <HAL_I2C_Init+0xc4>
 8004d7a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004d7e:	4878      	ldr	r0, [pc, #480]	; (8004f60 <HAL_I2C_Init+0x2a0>)
 8004d80:	f7fe f80b 	bl	8002d9a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d004      	beq.n	8004d9a <HAL_I2C_Init+0xda>
 8004d90:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004d94:	4872      	ldr	r0, [pc, #456]	; (8004f60 <HAL_I2C_Init+0x2a0>)
 8004d96:	f7fe f800 	bl	8002d9a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_I2C_Init+0xf4>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	2b40      	cmp	r3, #64	; 0x40
 8004da8:	d004      	beq.n	8004db4 <HAL_I2C_Init+0xf4>
 8004daa:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004dae:	486c      	ldr	r0, [pc, #432]	; (8004f60 <HAL_I2C_Init+0x2a0>)
 8004db0:	f7fd fff3 	bl	8002d9a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_I2C_Init+0x10e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	2b80      	cmp	r3, #128	; 0x80
 8004dc2:	d004      	beq.n	8004dce <HAL_I2C_Init+0x10e>
 8004dc4:	f240 11c7 	movw	r1, #455	; 0x1c7
 8004dc8:	4865      	ldr	r0, [pc, #404]	; (8004f60 <HAL_I2C_Init+0x2a0>)
 8004dca:	f7fd ffe6 	bl	8002d9a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fe f80c 	bl	8002e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2224      	movs	r2, #36	; 0x24
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0201 	bic.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e20:	f001 f96e 	bl	8006100 <HAL_RCC_GetPCLK1Freq>
 8004e24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	4a4f      	ldr	r2, [pc, #316]	; (8004f68 <HAL_I2C_Init+0x2a8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d807      	bhi.n	8004e40 <HAL_I2C_Init+0x180>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a4e      	ldr	r2, [pc, #312]	; (8004f6c <HAL_I2C_Init+0x2ac>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	bf94      	ite	ls
 8004e38:	2301      	movls	r3, #1
 8004e3a:	2300      	movhi	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	e006      	b.n	8004e4e <HAL_I2C_Init+0x18e>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a4b      	ldr	r2, [pc, #300]	; (8004f70 <HAL_I2C_Init+0x2b0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	bf94      	ite	ls
 8004e48:	2301      	movls	r3, #1
 8004e4a:	2300      	movhi	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e0fc      	b.n	8005050 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a46      	ldr	r2, [pc, #280]	; (8004f74 <HAL_I2C_Init+0x2b4>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	0c9b      	lsrs	r3, r3, #18
 8004e60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4a38      	ldr	r2, [pc, #224]	; (8004f68 <HAL_I2C_Init+0x2a8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d802      	bhi.n	8004e90 <HAL_I2C_Init+0x1d0>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	e009      	b.n	8004ea4 <HAL_I2C_Init+0x1e4>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	4a37      	ldr	r2, [pc, #220]	; (8004f78 <HAL_I2C_Init+0x2b8>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	099b      	lsrs	r3, r3, #6
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004eb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	492a      	ldr	r1, [pc, #168]	; (8004f68 <HAL_I2C_Init+0x2a8>)
 8004ec0:	428b      	cmp	r3, r1
 8004ec2:	d819      	bhi.n	8004ef8 <HAL_I2C_Init+0x238>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	1e59      	subs	r1, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ed2:	1c59      	adds	r1, r3, #1
 8004ed4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ed8:	400b      	ands	r3, r1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <HAL_I2C_Init+0x234>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1e59      	subs	r1, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eec:	3301      	adds	r3, #1
 8004eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef2:	e066      	b.n	8004fc2 <HAL_I2C_Init+0x302>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	e064      	b.n	8004fc2 <HAL_I2C_Init+0x302>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d111      	bne.n	8004f24 <HAL_I2C_Init+0x264>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	1e58      	subs	r0, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6859      	ldr	r1, [r3, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	440b      	add	r3, r1
 8004f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f12:	3301      	adds	r3, #1
 8004f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf0c      	ite	eq
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2300      	movne	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e012      	b.n	8004f4a <HAL_I2C_Init+0x28a>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	1e58      	subs	r0, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6859      	ldr	r1, [r3, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	0099      	lsls	r1, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf0c      	ite	eq
 8004f44:	2301      	moveq	r3, #1
 8004f46:	2300      	movne	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_I2C_Init+0x2bc>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e037      	b.n	8004fc2 <HAL_I2C_Init+0x302>
 8004f52:	bf00      	nop
 8004f54:	40005400 	.word	0x40005400
 8004f58:	40005800 	.word	0x40005800
 8004f5c:	40005c00 	.word	0x40005c00
 8004f60:	080105d4 	.word	0x080105d4
 8004f64:	00061a80 	.word	0x00061a80
 8004f68:	000186a0 	.word	0x000186a0
 8004f6c:	001e847f 	.word	0x001e847f
 8004f70:	003d08ff 	.word	0x003d08ff
 8004f74:	431bde83 	.word	0x431bde83
 8004f78:	10624dd3 	.word	0x10624dd3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10e      	bne.n	8004fa2 <HAL_I2C_Init+0x2e2>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	1e58      	subs	r0, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6859      	ldr	r1, [r3, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	440b      	add	r3, r1
 8004f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f96:	3301      	adds	r3, #1
 8004f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa0:	e00f      	b.n	8004fc2 <HAL_I2C_Init+0x302>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1e58      	subs	r0, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6859      	ldr	r1, [r3, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	0099      	lsls	r1, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	6809      	ldr	r1, [r1, #0]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ff0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6911      	ldr	r1, [r2, #16]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	68d2      	ldr	r2, [r2, #12]
 8004ffc:	4311      	orrs	r1, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	430b      	orrs	r3, r1
 8005004:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	461a      	mov	r2, r3
 8005064:	460b      	mov	r3, r1
 8005066:	817b      	strh	r3, [r7, #10]
 8005068:	4613      	mov	r3, r2
 800506a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800506c:	f7fe fc60 	bl	8003930 <HAL_GetTick>
 8005070:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b20      	cmp	r3, #32
 800507c:	f040 80e0 	bne.w	8005240 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2319      	movs	r3, #25
 8005086:	2201      	movs	r2, #1
 8005088:	4970      	ldr	r1, [pc, #448]	; (800524c <HAL_I2C_Master_Transmit+0x1f4>)
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fc58 	bl	8005940 <I2C_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005096:	2302      	movs	r3, #2
 8005098:	e0d3      	b.n	8005242 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_I2C_Master_Transmit+0x50>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e0cc      	b.n	8005242 <HAL_I2C_Master_Transmit+0x1ea>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d007      	beq.n	80050ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0201 	orr.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2221      	movs	r2, #33	; 0x21
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2210      	movs	r2, #16
 80050ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	893a      	ldrh	r2, [r7, #8]
 80050fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4a50      	ldr	r2, [pc, #320]	; (8005250 <HAL_I2C_Master_Transmit+0x1f8>)
 800510e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005110:	8979      	ldrh	r1, [r7, #10]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 fac2 	bl	80056a0 <I2C_MasterRequestWrite>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e08d      	b.n	8005242 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800513c:	e066      	b.n	800520c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	6a39      	ldr	r1, [r7, #32]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 fcd2 	bl	8005aec <I2C_WaitOnTXEFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	2b04      	cmp	r3, #4
 8005154:	d107      	bne.n	8005166 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005164:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e06b      	b.n	8005242 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	781a      	ldrb	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d11b      	bne.n	80051e0 <HAL_I2C_Master_Transmit+0x188>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d017      	beq.n	80051e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	781a      	ldrb	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	6a39      	ldr	r1, [r7, #32]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 fcc2 	bl	8005b6e <I2C_WaitOnBTFFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00d      	beq.n	800520c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d107      	bne.n	8005208 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005206:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e01a      	b.n	8005242 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005210:	2b00      	cmp	r3, #0
 8005212:	d194      	bne.n	800513e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	e000      	b.n	8005242 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005240:	2302      	movs	r3, #2
  }
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	00100002 	.word	0x00100002
 8005250:	ffff0000 	.word	0xffff0000

08005254 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08c      	sub	sp, #48	; 0x30
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	607a      	str	r2, [r7, #4]
 800525e:	461a      	mov	r2, r3
 8005260:	460b      	mov	r3, r1
 8005262:	817b      	strh	r3, [r7, #10]
 8005264:	4613      	mov	r3, r2
 8005266:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005268:	f7fe fb62 	bl	8003930 <HAL_GetTick>
 800526c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b20      	cmp	r3, #32
 8005278:	f040 820b 	bne.w	8005692 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	2319      	movs	r3, #25
 8005282:	2201      	movs	r2, #1
 8005284:	497c      	ldr	r1, [pc, #496]	; (8005478 <HAL_I2C_Master_Receive+0x224>)
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fb5a 	bl	8005940 <I2C_WaitOnFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005292:	2302      	movs	r3, #2
 8005294:	e1fe      	b.n	8005694 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_I2C_Master_Receive+0x50>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e1f7      	b.n	8005694 <HAL_I2C_Master_Receive+0x440>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d007      	beq.n	80052ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2222      	movs	r2, #34	; 0x22
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2210      	movs	r2, #16
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	893a      	ldrh	r2, [r7, #8]
 80052fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a5c      	ldr	r2, [pc, #368]	; (800547c <HAL_I2C_Master_Receive+0x228>)
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800530c:	8979      	ldrh	r1, [r7, #10]
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 fa46 	bl	80057a4 <I2C_MasterRequestRead>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e1b8      	b.n	8005694 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d113      	bne.n	8005352 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800532a:	2300      	movs	r3, #0
 800532c:	623b      	str	r3, [r7, #32]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	623b      	str	r3, [r7, #32]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	623b      	str	r3, [r7, #32]
 800533e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	e18c      	b.n	800566c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005356:	2b01      	cmp	r3, #1
 8005358:	d11b      	bne.n	8005392 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005368:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e16c      	b.n	800566c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005396:	2b02      	cmp	r3, #2
 8005398:	d11b      	bne.n	80053d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ba:	2300      	movs	r3, #0
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	e14c      	b.n	800566c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80053f8:	e138      	b.n	800566c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fe:	2b03      	cmp	r3, #3
 8005400:	f200 80f1 	bhi.w	80055e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005408:	2b01      	cmp	r3, #1
 800540a:	d123      	bne.n	8005454 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800540c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fbed 	bl	8005bf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e139      	b.n	8005694 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005452:	e10b      	b.n	800566c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005458:	2b02      	cmp	r3, #2
 800545a:	d14e      	bne.n	80054fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	2200      	movs	r2, #0
 8005464:	4906      	ldr	r1, [pc, #24]	; (8005480 <HAL_I2C_Master_Receive+0x22c>)
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fa6a 	bl	8005940 <I2C_WaitOnFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d008      	beq.n	8005484 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e10e      	b.n	8005694 <HAL_I2C_Master_Receive+0x440>
 8005476:	bf00      	nop
 8005478:	00100002 	.word	0x00100002
 800547c:	ffff0000 	.word	0xffff0000
 8005480:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054f8:	e0b8      	b.n	800566c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	2200      	movs	r2, #0
 8005502:	4966      	ldr	r1, [pc, #408]	; (800569c <HAL_I2C_Master_Receive+0x448>)
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 fa1b 	bl	8005940 <I2C_WaitOnFlagUntilTimeout>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0bf      	b.n	8005694 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	2200      	movs	r2, #0
 800555e:	494f      	ldr	r1, [pc, #316]	; (800569c <HAL_I2C_Master_Receive+0x448>)
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f9ed 	bl	8005940 <I2C_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e091      	b.n	8005694 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055e4:	e042      	b.n	800566c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 fb00 	bl	8005bf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e04c      	b.n	8005694 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b04      	cmp	r3, #4
 8005638:	d118      	bne.n	800566c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005656:	3b01      	subs	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005670:	2b00      	cmp	r3, #0
 8005672:	f47f aec2 	bne.w	80053fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	e000      	b.n	8005694 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005692:	2302      	movs	r3, #2
  }
}
 8005694:	4618      	mov	r0, r3
 8005696:	3728      	adds	r7, #40	; 0x28
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	00010004 	.word	0x00010004

080056a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	460b      	mov	r3, r1
 80056ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d006      	beq.n	80056ca <I2C_MasterRequestWrite+0x2a>
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d003      	beq.n	80056ca <I2C_MasterRequestWrite+0x2a>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056c8:	d108      	bne.n	80056dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	e00b      	b.n	80056f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	2b12      	cmp	r3, #18
 80056e2:	d107      	bne.n	80056f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 f91d 	bl	8005940 <I2C_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571a:	d103      	bne.n	8005724 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005722:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e035      	b.n	8005794 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005730:	d108      	bne.n	8005744 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005732:	897b      	ldrh	r3, [r7, #10]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005740:	611a      	str	r2, [r3, #16]
 8005742:	e01b      	b.n	800577c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005744:	897b      	ldrh	r3, [r7, #10]
 8005746:	11db      	asrs	r3, r3, #7
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f003 0306 	and.w	r3, r3, #6
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f063 030f 	orn	r3, r3, #15
 8005754:	b2da      	uxtb	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	490e      	ldr	r1, [pc, #56]	; (800579c <I2C_MasterRequestWrite+0xfc>)
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 f943 	bl	80059ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e010      	b.n	8005794 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005772:	897b      	ldrh	r3, [r7, #10]
 8005774:	b2da      	uxtb	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	4907      	ldr	r1, [pc, #28]	; (80057a0 <I2C_MasterRequestWrite+0x100>)
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f933 	bl	80059ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	00010008 	.word	0x00010008
 80057a0:	00010002 	.word	0x00010002

080057a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	607a      	str	r2, [r7, #4]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	460b      	mov	r3, r1
 80057b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d006      	beq.n	80057de <I2C_MasterRequestRead+0x3a>
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d003      	beq.n	80057de <I2C_MasterRequestRead+0x3a>
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057dc:	d108      	bne.n	80057f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	e00b      	b.n	8005808 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	2b11      	cmp	r3, #17
 80057f6:	d107      	bne.n	8005808 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005806:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f893 	bl	8005940 <I2C_WaitOnFlagUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00d      	beq.n	800583c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582e:	d103      	bne.n	8005838 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005836:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e079      	b.n	8005930 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005844:	d108      	bne.n	8005858 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005846:	897b      	ldrh	r3, [r7, #10]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	b2da      	uxtb	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	611a      	str	r2, [r3, #16]
 8005856:	e05f      	b.n	8005918 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005858:	897b      	ldrh	r3, [r7, #10]
 800585a:	11db      	asrs	r3, r3, #7
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f003 0306 	and.w	r3, r3, #6
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f063 030f 	orn	r3, r3, #15
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4930      	ldr	r1, [pc, #192]	; (8005938 <I2C_MasterRequestRead+0x194>)
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f8b9 	bl	80059ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e054      	b.n	8005930 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005886:	897b      	ldrh	r3, [r7, #10]
 8005888:	b2da      	uxtb	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	4929      	ldr	r1, [pc, #164]	; (800593c <I2C_MasterRequestRead+0x198>)
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f8a9 	bl	80059ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e044      	b.n	8005930 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a6:	2300      	movs	r3, #0
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 f831 	bl	8005940 <I2C_WaitOnFlagUntilTimeout>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00d      	beq.n	8005900 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f2:	d103      	bne.n	80058fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e017      	b.n	8005930 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005900:	897b      	ldrh	r3, [r7, #10]
 8005902:	11db      	asrs	r3, r3, #7
 8005904:	b2db      	uxtb	r3, r3
 8005906:	f003 0306 	and.w	r3, r3, #6
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f063 030e 	orn	r3, r3, #14
 8005910:	b2da      	uxtb	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	4907      	ldr	r1, [pc, #28]	; (800593c <I2C_MasterRequestRead+0x198>)
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 f865 	bl	80059ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	00010008 	.word	0x00010008
 800593c:	00010002 	.word	0x00010002

08005940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	4613      	mov	r3, r2
 800594e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005950:	e025      	b.n	800599e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005958:	d021      	beq.n	800599e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800595a:	f7fd ffe9 	bl	8003930 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d302      	bcc.n	8005970 <I2C_WaitOnFlagUntilTimeout+0x30>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d116      	bne.n	800599e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f043 0220 	orr.w	r2, r3, #32
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e023      	b.n	80059e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d10d      	bne.n	80059c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	43da      	mvns	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4013      	ands	r3, r2
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	bf0c      	ite	eq
 80059ba:	2301      	moveq	r3, #1
 80059bc:	2300      	movne	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	e00c      	b.n	80059de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	43da      	mvns	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4013      	ands	r3, r2
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	bf0c      	ite	eq
 80059d6:	2301      	moveq	r3, #1
 80059d8:	2300      	movne	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d0b6      	beq.n	8005952 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059fc:	e051      	b.n	8005aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0c:	d123      	bne.n	8005a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f043 0204 	orr.w	r2, r3, #4
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e046      	b.n	8005ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d021      	beq.n	8005aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a5e:	f7fd ff67 	bl	8003930 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d302      	bcc.n	8005a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d116      	bne.n	8005aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f043 0220 	orr.w	r2, r3, #32
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e020      	b.n	8005ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	0c1b      	lsrs	r3, r3, #16
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d10c      	bne.n	8005ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	43da      	mvns	r2, r3
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	bf14      	ite	ne
 8005abe:	2301      	movne	r3, #1
 8005ac0:	2300      	moveq	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	e00b      	b.n	8005ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	43da      	mvns	r2, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bf14      	ite	ne
 8005ad8:	2301      	movne	r3, #1
 8005ada:	2300      	moveq	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d18d      	bne.n	80059fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005af8:	e02d      	b.n	8005b56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f8ce 	bl	8005c9c <I2C_IsAcknowledgeFailed>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e02d      	b.n	8005b66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d021      	beq.n	8005b56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b12:	f7fd ff0d 	bl	8003930 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d302      	bcc.n	8005b28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d116      	bne.n	8005b56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e007      	b.n	8005b66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b60:	2b80      	cmp	r3, #128	; 0x80
 8005b62:	d1ca      	bne.n	8005afa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b7a:	e02d      	b.n	8005bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f88d 	bl	8005c9c <I2C_IsAcknowledgeFailed>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e02d      	b.n	8005be8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b92:	d021      	beq.n	8005bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b94:	f7fd fecc 	bl	8003930 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d302      	bcc.n	8005baa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d116      	bne.n	8005bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	f043 0220 	orr.w	r2, r3, #32
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e007      	b.n	8005be8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d1ca      	bne.n	8005b7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bfc:	e042      	b.n	8005c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	2b10      	cmp	r3, #16
 8005c0a:	d119      	bne.n	8005c40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0210 	mvn.w	r2, #16
 8005c14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e029      	b.n	8005c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c40:	f7fd fe76 	bl	8003930 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d302      	bcc.n	8005c56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d116      	bne.n	8005c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	f043 0220 	orr.w	r2, r3, #32
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e007      	b.n	8005c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b40      	cmp	r3, #64	; 0x40
 8005c90:	d1b5      	bne.n	8005bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb2:	d11b      	bne.n	8005cec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	f043 0204 	orr.w	r2, r3, #4
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
	...

08005cfc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d06:	2300      	movs	r3, #0
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4b20      	ldr	r3, [pc, #128]	; (8005d8c <HAL_PWREx_EnableOverDrive+0x90>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	4a1f      	ldr	r2, [pc, #124]	; (8005d8c <HAL_PWREx_EnableOverDrive+0x90>)
 8005d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d14:	6413      	str	r3, [r2, #64]	; 0x40
 8005d16:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <HAL_PWREx_EnableOverDrive+0x90>)
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d22:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <HAL_PWREx_EnableOverDrive+0x94>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d28:	f7fd fe02 	bl	8003930 <HAL_GetTick>
 8005d2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d2e:	e009      	b.n	8005d44 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d30:	f7fd fdfe 	bl	8003930 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d3e:	d901      	bls.n	8005d44 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e01f      	b.n	8005d84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d44:	4b13      	ldr	r3, [pc, #76]	; (8005d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d50:	d1ee      	bne.n	8005d30 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d52:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d58:	f7fd fdea 	bl	8003930 <HAL_GetTick>
 8005d5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d5e:	e009      	b.n	8005d74 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d60:	f7fd fde6 	bl	8003930 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d6e:	d901      	bls.n	8005d74 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e007      	b.n	8005d84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d74:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d80:	d1ee      	bne.n	8005d60 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	420e0040 	.word	0x420e0040
 8005d94:	40007000 	.word	0x40007000
 8005d98:	420e0044 	.word	0x420e0044

08005d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e18c      	b.n	80060ca <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x24>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b0f      	cmp	r3, #15
 8005dbe:	d904      	bls.n	8005dca <HAL_RCC_ClockConfig+0x2e>
 8005dc0:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8005dc4:	4887      	ldr	r0, [pc, #540]	; (8005fe4 <HAL_RCC_ClockConfig+0x248>)
 8005dc6:	f7fc ffe8 	bl	8002d9a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d031      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d02e      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d02b      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d028      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d025      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d022      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b06      	cmp	r3, #6
 8005df2:	d01f      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b07      	cmp	r3, #7
 8005df8:	d01c      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d019      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b09      	cmp	r3, #9
 8005e04:	d016      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b0a      	cmp	r3, #10
 8005e0a:	d013      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b0b      	cmp	r3, #11
 8005e10:	d010      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b0c      	cmp	r3, #12
 8005e16:	d00d      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b0d      	cmp	r3, #13
 8005e1c:	d00a      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b0e      	cmp	r3, #14
 8005e22:	d007      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b0f      	cmp	r3, #15
 8005e28:	d004      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x98>
 8005e2a:	f240 215d 	movw	r1, #605	; 0x25d
 8005e2e:	486d      	ldr	r0, [pc, #436]	; (8005fe4 <HAL_RCC_ClockConfig+0x248>)
 8005e30:	f7fc ffb3 	bl	8002d9a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e34:	4b6c      	ldr	r3, [pc, #432]	; (8005fe8 <HAL_RCC_ClockConfig+0x24c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d90c      	bls.n	8005e5c <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e42:	4b69      	ldr	r3, [pc, #420]	; (8005fe8 <HAL_RCC_ClockConfig+0x24c>)
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4a:	4b67      	ldr	r3, [pc, #412]	; (8005fe8 <HAL_RCC_ClockConfig+0x24c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d001      	beq.n	8005e5c <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e136      	b.n	80060ca <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d049      	beq.n	8005efc <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e74:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <HAL_RCC_ClockConfig+0x250>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4a5c      	ldr	r2, [pc, #368]	; (8005fec <HAL_RCC_ClockConfig+0x250>)
 8005e7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e8c:	4b57      	ldr	r3, [pc, #348]	; (8005fec <HAL_RCC_ClockConfig+0x250>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	4a56      	ldr	r2, [pc, #344]	; (8005fec <HAL_RCC_ClockConfig+0x250>)
 8005e92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d024      	beq.n	8005eea <HAL_RCC_ClockConfig+0x14e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	2b80      	cmp	r3, #128	; 0x80
 8005ea6:	d020      	beq.n	8005eea <HAL_RCC_ClockConfig+0x14e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b90      	cmp	r3, #144	; 0x90
 8005eae:	d01c      	beq.n	8005eea <HAL_RCC_ClockConfig+0x14e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2ba0      	cmp	r3, #160	; 0xa0
 8005eb6:	d018      	beq.n	8005eea <HAL_RCC_ClockConfig+0x14e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2bb0      	cmp	r3, #176	; 0xb0
 8005ebe:	d014      	beq.n	8005eea <HAL_RCC_ClockConfig+0x14e>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2bc0      	cmp	r3, #192	; 0xc0
 8005ec6:	d010      	beq.n	8005eea <HAL_RCC_ClockConfig+0x14e>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2bd0      	cmp	r3, #208	; 0xd0
 8005ece:	d00c      	beq.n	8005eea <HAL_RCC_ClockConfig+0x14e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2be0      	cmp	r3, #224	; 0xe0
 8005ed6:	d008      	beq.n	8005eea <HAL_RCC_ClockConfig+0x14e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	2bf0      	cmp	r3, #240	; 0xf0
 8005ede:	d004      	beq.n	8005eea <HAL_RCC_ClockConfig+0x14e>
 8005ee0:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005ee4:	483f      	ldr	r0, [pc, #252]	; (8005fe4 <HAL_RCC_ClockConfig+0x248>)
 8005ee6:	f7fc ff58 	bl	8002d9a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eea:	4b40      	ldr	r3, [pc, #256]	; (8005fec <HAL_RCC_ClockConfig+0x250>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	493d      	ldr	r1, [pc, #244]	; (8005fec <HAL_RCC_ClockConfig+0x250>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d059      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d010      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x196>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d00c      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x196>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d008      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x196>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d004      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x196>
 8005f28:	f240 2187 	movw	r1, #647	; 0x287
 8005f2c:	482d      	ldr	r0, [pc, #180]	; (8005fe4 <HAL_RCC_ClockConfig+0x248>)
 8005f2e:	f7fc ff34 	bl	8002d9a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d107      	bne.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f3a:	4b2c      	ldr	r3, [pc, #176]	; (8005fec <HAL_RCC_ClockConfig+0x250>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d119      	bne.n	8005f7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e0bf      	b.n	80060ca <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d003      	beq.n	8005f5a <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d107      	bne.n	8005f6a <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f5a:	4b24      	ldr	r3, [pc, #144]	; (8005fec <HAL_RCC_ClockConfig+0x250>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e0af      	b.n	80060ca <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f6a:	4b20      	ldr	r3, [pc, #128]	; (8005fec <HAL_RCC_ClockConfig+0x250>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e0a7      	b.n	80060ca <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f7a:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <HAL_RCC_ClockConfig+0x250>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f023 0203 	bic.w	r2, r3, #3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	4919      	ldr	r1, [pc, #100]	; (8005fec <HAL_RCC_ClockConfig+0x250>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f8c:	f7fd fcd0 	bl	8003930 <HAL_GetTick>
 8005f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f92:	e00a      	b.n	8005faa <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f94:	f7fd fccc 	bl	8003930 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e08f      	b.n	80060ca <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005faa:	4b10      	ldr	r3, [pc, #64]	; (8005fec <HAL_RCC_ClockConfig+0x250>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 020c 	and.w	r2, r3, #12
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d1eb      	bne.n	8005f94 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <HAL_RCC_ClockConfig+0x24c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d212      	bcs.n	8005ff0 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fca:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <HAL_RCC_ClockConfig+0x24c>)
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd2:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <HAL_RCC_ClockConfig+0x24c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d007      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e072      	b.n	80060ca <HAL_RCC_ClockConfig+0x32e>
 8005fe4:	0801060c 	.word	0x0801060c
 8005fe8:	40023c00 	.word	0x40023c00
 8005fec:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d025      	beq.n	8006048 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d018      	beq.n	8006036 <HAL_RCC_ClockConfig+0x29a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600c:	d013      	beq.n	8006036 <HAL_RCC_ClockConfig+0x29a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006016:	d00e      	beq.n	8006036 <HAL_RCC_ClockConfig+0x29a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006020:	d009      	beq.n	8006036 <HAL_RCC_ClockConfig+0x29a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800602a:	d004      	beq.n	8006036 <HAL_RCC_ClockConfig+0x29a>
 800602c:	f240 21c5 	movw	r1, #709	; 0x2c5
 8006030:	4828      	ldr	r0, [pc, #160]	; (80060d4 <HAL_RCC_ClockConfig+0x338>)
 8006032:	f7fc feb2 	bl	8002d9a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006036:	4b28      	ldr	r3, [pc, #160]	; (80060d8 <HAL_RCC_ClockConfig+0x33c>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	4925      	ldr	r1, [pc, #148]	; (80060d8 <HAL_RCC_ClockConfig+0x33c>)
 8006044:	4313      	orrs	r3, r2
 8006046:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d026      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d018      	beq.n	800608e <HAL_RCC_ClockConfig+0x2f2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006064:	d013      	beq.n	800608e <HAL_RCC_ClockConfig+0x2f2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800606e:	d00e      	beq.n	800608e <HAL_RCC_ClockConfig+0x2f2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006078:	d009      	beq.n	800608e <HAL_RCC_ClockConfig+0x2f2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006082:	d004      	beq.n	800608e <HAL_RCC_ClockConfig+0x2f2>
 8006084:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8006088:	4812      	ldr	r0, [pc, #72]	; (80060d4 <HAL_RCC_ClockConfig+0x338>)
 800608a:	f7fc fe86 	bl	8002d9a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800608e:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <HAL_RCC_ClockConfig+0x33c>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	490e      	ldr	r1, [pc, #56]	; (80060d8 <HAL_RCC_ClockConfig+0x33c>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060a2:	f000 f855 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 80060a6:	4602      	mov	r2, r0
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <HAL_RCC_ClockConfig+0x33c>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	490a      	ldr	r1, [pc, #40]	; (80060dc <HAL_RCC_ClockConfig+0x340>)
 80060b4:	5ccb      	ldrb	r3, [r1, r3]
 80060b6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ba:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <HAL_RCC_ClockConfig+0x344>)
 80060bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060be:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <HAL_RCC_ClockConfig+0x348>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fd fbf0 	bl	80038a8 <HAL_InitTick>

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	0801060c 	.word	0x0801060c
 80060d8:	40023800 	.word	0x40023800
 80060dc:	080107c4 	.word	0x080107c4
 80060e0:	20000154 	.word	0x20000154
 80060e4:	20000158 	.word	0x20000158

080060e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060ec:	4b03      	ldr	r3, [pc, #12]	; (80060fc <HAL_RCC_GetHCLKFreq+0x14>)
 80060ee:	681b      	ldr	r3, [r3, #0]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20000154 	.word	0x20000154

08006100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006104:	f7ff fff0 	bl	80060e8 <HAL_RCC_GetHCLKFreq>
 8006108:	4602      	mov	r2, r0
 800610a:	4b05      	ldr	r3, [pc, #20]	; (8006120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	0a9b      	lsrs	r3, r3, #10
 8006110:	f003 0307 	and.w	r3, r3, #7
 8006114:	4903      	ldr	r1, [pc, #12]	; (8006124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006116:	5ccb      	ldrb	r3, [r1, r3]
 8006118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800611c:	4618      	mov	r0, r3
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40023800 	.word	0x40023800
 8006124:	080107d4 	.word	0x080107d4

08006128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800612c:	f7ff ffdc 	bl	80060e8 <HAL_RCC_GetHCLKFreq>
 8006130:	4602      	mov	r2, r0
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	0b5b      	lsrs	r3, r3, #13
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	4903      	ldr	r1, [pc, #12]	; (800614c <HAL_RCC_GetPCLK2Freq+0x24>)
 800613e:	5ccb      	ldrb	r3, [r1, r3]
 8006140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006144:	4618      	mov	r0, r3
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40023800 	.word	0x40023800
 800614c:	080107d4 	.word	0x080107d4

08006150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006154:	b088      	sub	sp, #32
 8006156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800616c:	4bce      	ldr	r3, [pc, #824]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 030c 	and.w	r3, r3, #12
 8006174:	2b0c      	cmp	r3, #12
 8006176:	f200 818d 	bhi.w	8006494 <HAL_RCC_GetSysClockFreq+0x344>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <HAL_RCC_GetSysClockFreq+0x30>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	080061b5 	.word	0x080061b5
 8006184:	08006495 	.word	0x08006495
 8006188:	08006495 	.word	0x08006495
 800618c:	08006495 	.word	0x08006495
 8006190:	080061bb 	.word	0x080061bb
 8006194:	08006495 	.word	0x08006495
 8006198:	08006495 	.word	0x08006495
 800619c:	08006495 	.word	0x08006495
 80061a0:	080061c1 	.word	0x080061c1
 80061a4:	08006495 	.word	0x08006495
 80061a8:	08006495 	.word	0x08006495
 80061ac:	08006495 	.word	0x08006495
 80061b0:	08006335 	.word	0x08006335
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061b4:	4bbd      	ldr	r3, [pc, #756]	; (80064ac <HAL_RCC_GetSysClockFreq+0x35c>)
 80061b6:	61bb      	str	r3, [r7, #24]
       break;
 80061b8:	e16f      	b.n	800649a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061ba:	4bbd      	ldr	r3, [pc, #756]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x360>)
 80061bc:	61bb      	str	r3, [r7, #24]
      break;
 80061be:	e16c      	b.n	800649a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061c0:	4bb9      	ldr	r3, [pc, #740]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061ca:	4bb7      	ldr	r3, [pc, #732]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d053      	beq.n	800627e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061d6:	4bb4      	ldr	r3, [pc, #720]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	099b      	lsrs	r3, r3, #6
 80061dc:	461a      	mov	r2, r3
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061e6:	f04f 0100 	mov.w	r1, #0
 80061ea:	ea02 0400 	and.w	r4, r2, r0
 80061ee:	603c      	str	r4, [r7, #0]
 80061f0:	400b      	ands	r3, r1
 80061f2:	607b      	str	r3, [r7, #4]
 80061f4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061f8:	4620      	mov	r0, r4
 80061fa:	4629      	mov	r1, r5
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	014b      	lsls	r3, r1, #5
 8006206:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800620a:	0142      	lsls	r2, r0, #5
 800620c:	4610      	mov	r0, r2
 800620e:	4619      	mov	r1, r3
 8006210:	4623      	mov	r3, r4
 8006212:	1ac0      	subs	r0, r0, r3
 8006214:	462b      	mov	r3, r5
 8006216:	eb61 0103 	sbc.w	r1, r1, r3
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	018b      	lsls	r3, r1, #6
 8006224:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006228:	0182      	lsls	r2, r0, #6
 800622a:	1a12      	subs	r2, r2, r0
 800622c:	eb63 0301 	sbc.w	r3, r3, r1
 8006230:	f04f 0000 	mov.w	r0, #0
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	00d9      	lsls	r1, r3, #3
 800623a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800623e:	00d0      	lsls	r0, r2, #3
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4621      	mov	r1, r4
 8006246:	1852      	adds	r2, r2, r1
 8006248:	4629      	mov	r1, r5
 800624a:	eb43 0101 	adc.w	r1, r3, r1
 800624e:	460b      	mov	r3, r1
 8006250:	f04f 0000 	mov.w	r0, #0
 8006254:	f04f 0100 	mov.w	r1, #0
 8006258:	0259      	lsls	r1, r3, #9
 800625a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800625e:	0250      	lsls	r0, r2, #9
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4610      	mov	r0, r2
 8006266:	4619      	mov	r1, r3
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	461a      	mov	r2, r3
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	f7fa fc68 	bl	8000b44 <__aeabi_uldivmod>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4613      	mov	r3, r2
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	e04c      	b.n	8006318 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800627e:	4b8a      	ldr	r3, [pc, #552]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	099b      	lsrs	r3, r3, #6
 8006284:	461a      	mov	r2, r3
 8006286:	f04f 0300 	mov.w	r3, #0
 800628a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800628e:	f04f 0100 	mov.w	r1, #0
 8006292:	ea02 0a00 	and.w	sl, r2, r0
 8006296:	ea03 0b01 	and.w	fp, r3, r1
 800629a:	4650      	mov	r0, sl
 800629c:	4659      	mov	r1, fp
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	014b      	lsls	r3, r1, #5
 80062a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80062ac:	0142      	lsls	r2, r0, #5
 80062ae:	4610      	mov	r0, r2
 80062b0:	4619      	mov	r1, r3
 80062b2:	ebb0 000a 	subs.w	r0, r0, sl
 80062b6:	eb61 010b 	sbc.w	r1, r1, fp
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	f04f 0300 	mov.w	r3, #0
 80062c2:	018b      	lsls	r3, r1, #6
 80062c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80062c8:	0182      	lsls	r2, r0, #6
 80062ca:	1a12      	subs	r2, r2, r0
 80062cc:	eb63 0301 	sbc.w	r3, r3, r1
 80062d0:	f04f 0000 	mov.w	r0, #0
 80062d4:	f04f 0100 	mov.w	r1, #0
 80062d8:	00d9      	lsls	r1, r3, #3
 80062da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062de:	00d0      	lsls	r0, r2, #3
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	eb12 020a 	adds.w	r2, r2, sl
 80062e8:	eb43 030b 	adc.w	r3, r3, fp
 80062ec:	f04f 0000 	mov.w	r0, #0
 80062f0:	f04f 0100 	mov.w	r1, #0
 80062f4:	0299      	lsls	r1, r3, #10
 80062f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80062fa:	0290      	lsls	r0, r2, #10
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4610      	mov	r0, r2
 8006302:	4619      	mov	r1, r3
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	461a      	mov	r2, r3
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	f7fa fc1a 	bl	8000b44 <__aeabi_uldivmod>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4613      	mov	r3, r2
 8006316:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006318:	4b63      	ldr	r3, [pc, #396]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	0c1b      	lsrs	r3, r3, #16
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	3301      	adds	r3, #1
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	61bb      	str	r3, [r7, #24]
      break;
 8006332:	e0b2      	b.n	800649a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006334:	4b5c      	ldr	r3, [pc, #368]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800633c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800633e:	4b5a      	ldr	r3, [pc, #360]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d04d      	beq.n	80063e6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800634a:	4b57      	ldr	r3, [pc, #348]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	099b      	lsrs	r3, r3, #6
 8006350:	461a      	mov	r2, r3
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	f240 10ff 	movw	r0, #511	; 0x1ff
 800635a:	f04f 0100 	mov.w	r1, #0
 800635e:	ea02 0800 	and.w	r8, r2, r0
 8006362:	ea03 0901 	and.w	r9, r3, r1
 8006366:	4640      	mov	r0, r8
 8006368:	4649      	mov	r1, r9
 800636a:	f04f 0200 	mov.w	r2, #0
 800636e:	f04f 0300 	mov.w	r3, #0
 8006372:	014b      	lsls	r3, r1, #5
 8006374:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006378:	0142      	lsls	r2, r0, #5
 800637a:	4610      	mov	r0, r2
 800637c:	4619      	mov	r1, r3
 800637e:	ebb0 0008 	subs.w	r0, r0, r8
 8006382:	eb61 0109 	sbc.w	r1, r1, r9
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	f04f 0300 	mov.w	r3, #0
 800638e:	018b      	lsls	r3, r1, #6
 8006390:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006394:	0182      	lsls	r2, r0, #6
 8006396:	1a12      	subs	r2, r2, r0
 8006398:	eb63 0301 	sbc.w	r3, r3, r1
 800639c:	f04f 0000 	mov.w	r0, #0
 80063a0:	f04f 0100 	mov.w	r1, #0
 80063a4:	00d9      	lsls	r1, r3, #3
 80063a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063aa:	00d0      	lsls	r0, r2, #3
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	eb12 0208 	adds.w	r2, r2, r8
 80063b4:	eb43 0309 	adc.w	r3, r3, r9
 80063b8:	f04f 0000 	mov.w	r0, #0
 80063bc:	f04f 0100 	mov.w	r1, #0
 80063c0:	0259      	lsls	r1, r3, #9
 80063c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80063c6:	0250      	lsls	r0, r2, #9
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4610      	mov	r0, r2
 80063ce:	4619      	mov	r1, r3
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	f7fa fbb4 	bl	8000b44 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4613      	mov	r3, r2
 80063e2:	61fb      	str	r3, [r7, #28]
 80063e4:	e04a      	b.n	800647c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063e6:	4b30      	ldr	r3, [pc, #192]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	099b      	lsrs	r3, r3, #6
 80063ec:	461a      	mov	r2, r3
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063f6:	f04f 0100 	mov.w	r1, #0
 80063fa:	ea02 0400 	and.w	r4, r2, r0
 80063fe:	ea03 0501 	and.w	r5, r3, r1
 8006402:	4620      	mov	r0, r4
 8006404:	4629      	mov	r1, r5
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	014b      	lsls	r3, r1, #5
 8006410:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006414:	0142      	lsls	r2, r0, #5
 8006416:	4610      	mov	r0, r2
 8006418:	4619      	mov	r1, r3
 800641a:	1b00      	subs	r0, r0, r4
 800641c:	eb61 0105 	sbc.w	r1, r1, r5
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	f04f 0300 	mov.w	r3, #0
 8006428:	018b      	lsls	r3, r1, #6
 800642a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800642e:	0182      	lsls	r2, r0, #6
 8006430:	1a12      	subs	r2, r2, r0
 8006432:	eb63 0301 	sbc.w	r3, r3, r1
 8006436:	f04f 0000 	mov.w	r0, #0
 800643a:	f04f 0100 	mov.w	r1, #0
 800643e:	00d9      	lsls	r1, r3, #3
 8006440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006444:	00d0      	lsls	r0, r2, #3
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	1912      	adds	r2, r2, r4
 800644c:	eb45 0303 	adc.w	r3, r5, r3
 8006450:	f04f 0000 	mov.w	r0, #0
 8006454:	f04f 0100 	mov.w	r1, #0
 8006458:	0299      	lsls	r1, r3, #10
 800645a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800645e:	0290      	lsls	r0, r2, #10
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4610      	mov	r0, r2
 8006466:	4619      	mov	r1, r3
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	461a      	mov	r2, r3
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	f7fa fb68 	bl	8000b44 <__aeabi_uldivmod>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4613      	mov	r3, r2
 800647a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800647c:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	0f1b      	lsrs	r3, r3, #28
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006490:	61bb      	str	r3, [r7, #24]
      break;
 8006492:	e002      	b.n	800649a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <HAL_RCC_GetSysClockFreq+0x35c>)
 8006496:	61bb      	str	r3, [r7, #24]
      break;
 8006498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800649a:	69bb      	ldr	r3, [r7, #24]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3720      	adds	r7, #32
 80064a0:	46bd      	mov	sp, r7
 80064a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064a6:	bf00      	nop
 80064a8:	40023800 	.word	0x40023800
 80064ac:	00f42400 	.word	0x00f42400
 80064b0:	007a1200 	.word	0x007a1200

080064b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e34b      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b0f      	cmp	r3, #15
 80064cc:	d904      	bls.n	80064d8 <HAL_RCC_OscConfig+0x24>
 80064ce:	f640 5112 	movw	r1, #3346	; 0xd12
 80064d2:	48a5      	ldr	r0, [pc, #660]	; (8006768 <HAL_RCC_OscConfig+0x2b4>)
 80064d4:	f7fc fc61 	bl	8002d9a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8096 	beq.w	8006612 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00e      	beq.n	800650c <HAL_RCC_OscConfig+0x58>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f6:	d009      	beq.n	800650c <HAL_RCC_OscConfig+0x58>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006500:	d004      	beq.n	800650c <HAL_RCC_OscConfig+0x58>
 8006502:	f640 5117 	movw	r1, #3351	; 0xd17
 8006506:	4898      	ldr	r0, [pc, #608]	; (8006768 <HAL_RCC_OscConfig+0x2b4>)
 8006508:	f7fc fc47 	bl	8002d9a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800650c:	4b97      	ldr	r3, [pc, #604]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f003 030c 	and.w	r3, r3, #12
 8006514:	2b04      	cmp	r3, #4
 8006516:	d019      	beq.n	800654c <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006518:	4b94      	ldr	r3, [pc, #592]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006520:	2b08      	cmp	r3, #8
 8006522:	d106      	bne.n	8006532 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006524:	4b91      	ldr	r3, [pc, #580]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800652c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006530:	d00c      	beq.n	800654c <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006532:	4b8e      	ldr	r3, [pc, #568]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800653a:	2b0c      	cmp	r3, #12
 800653c:	d112      	bne.n	8006564 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800653e:	4b8b      	ldr	r3, [pc, #556]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800654a:	d10b      	bne.n	8006564 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800654c:	4b87      	ldr	r3, [pc, #540]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d05b      	beq.n	8006610 <HAL_RCC_OscConfig+0x15c>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d157      	bne.n	8006610 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e2fc      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656c:	d106      	bne.n	800657c <HAL_RCC_OscConfig+0xc8>
 800656e:	4b7f      	ldr	r3, [pc, #508]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a7e      	ldr	r2, [pc, #504]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	e01d      	b.n	80065b8 <HAL_RCC_OscConfig+0x104>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006584:	d10c      	bne.n	80065a0 <HAL_RCC_OscConfig+0xec>
 8006586:	4b79      	ldr	r3, [pc, #484]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a78      	ldr	r2, [pc, #480]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 800658c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	4b76      	ldr	r3, [pc, #472]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a75      	ldr	r2, [pc, #468]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	e00b      	b.n	80065b8 <HAL_RCC_OscConfig+0x104>
 80065a0:	4b72      	ldr	r3, [pc, #456]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a71      	ldr	r2, [pc, #452]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 80065a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	4b6f      	ldr	r3, [pc, #444]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a6e      	ldr	r2, [pc, #440]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 80065b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d013      	beq.n	80065e8 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fd f9b6 	bl	8003930 <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065c8:	f7fd f9b2 	bl	8003930 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b64      	cmp	r3, #100	; 0x64
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e2c1      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065da:	4b64      	ldr	r3, [pc, #400]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0f0      	beq.n	80065c8 <HAL_RCC_OscConfig+0x114>
 80065e6:	e014      	b.n	8006612 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e8:	f7fd f9a2 	bl	8003930 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065f0:	f7fd f99e 	bl	8003930 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b64      	cmp	r3, #100	; 0x64
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e2ad      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006602:	4b5a      	ldr	r3, [pc, #360]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f0      	bne.n	80065f0 <HAL_RCC_OscConfig+0x13c>
 800660e:	e000      	b.n	8006612 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 8086 	beq.w	800672c <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <HAL_RCC_OscConfig+0x186>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d004      	beq.n	800663a <HAL_RCC_OscConfig+0x186>
 8006630:	f640 514f 	movw	r1, #3407	; 0xd4f
 8006634:	484c      	ldr	r0, [pc, #304]	; (8006768 <HAL_RCC_OscConfig+0x2b4>)
 8006636:	f7fc fbb0 	bl	8002d9a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b1f      	cmp	r3, #31
 8006640:	d904      	bls.n	800664c <HAL_RCC_OscConfig+0x198>
 8006642:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 8006646:	4848      	ldr	r0, [pc, #288]	; (8006768 <HAL_RCC_OscConfig+0x2b4>)
 8006648:	f7fc fba7 	bl	8002d9a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800664c:	4b47      	ldr	r3, [pc, #284]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 030c 	and.w	r3, r3, #12
 8006654:	2b00      	cmp	r3, #0
 8006656:	d017      	beq.n	8006688 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006658:	4b44      	ldr	r3, [pc, #272]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006660:	2b08      	cmp	r3, #8
 8006662:	d105      	bne.n	8006670 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006664:	4b41      	ldr	r3, [pc, #260]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006670:	4b3e      	ldr	r3, [pc, #248]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006678:	2b0c      	cmp	r3, #12
 800667a:	d11c      	bne.n	80066b6 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800667c:	4b3b      	ldr	r3, [pc, #236]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d116      	bne.n	80066b6 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006688:	4b38      	ldr	r3, [pc, #224]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <HAL_RCC_OscConfig+0x1ec>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d001      	beq.n	80066a0 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e25e      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a0:	4b32      	ldr	r3, [pc, #200]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	492f      	ldr	r1, [pc, #188]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066b4:	e03a      	b.n	800672c <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d020      	beq.n	8006700 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066be:	4b2c      	ldr	r3, [pc, #176]	; (8006770 <HAL_RCC_OscConfig+0x2bc>)
 80066c0:	2201      	movs	r2, #1
 80066c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c4:	f7fd f934 	bl	8003930 <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066cc:	f7fd f930 	bl	8003930 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e23f      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066de:	4b23      	ldr	r3, [pc, #140]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0f0      	beq.n	80066cc <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ea:	4b20      	ldr	r3, [pc, #128]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	491c      	ldr	r1, [pc, #112]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	600b      	str	r3, [r1, #0]
 80066fe:	e015      	b.n	800672c <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006700:	4b1b      	ldr	r3, [pc, #108]	; (8006770 <HAL_RCC_OscConfig+0x2bc>)
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006706:	f7fd f913 	bl	8003930 <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800670e:	f7fd f90f 	bl	8003930 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e21e      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006720:	4b12      	ldr	r3, [pc, #72]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f0      	bne.n	800670e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d045      	beq.n	80067c4 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_RCC_OscConfig+0x29e>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d004      	beq.n	8006752 <HAL_RCC_OscConfig+0x29e>
 8006748:	f640 5196 	movw	r1, #3478	; 0xd96
 800674c:	4806      	ldr	r0, [pc, #24]	; (8006768 <HAL_RCC_OscConfig+0x2b4>)
 800674e:	f7fc fb24 	bl	8002d9a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d01e      	beq.n	8006798 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800675a:	4b06      	ldr	r3, [pc, #24]	; (8006774 <HAL_RCC_OscConfig+0x2c0>)
 800675c:	2201      	movs	r2, #1
 800675e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006760:	f7fd f8e6 	bl	8003930 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006766:	e010      	b.n	800678a <HAL_RCC_OscConfig+0x2d6>
 8006768:	08010644 	.word	0x08010644
 800676c:	40023800 	.word	0x40023800
 8006770:	42470000 	.word	0x42470000
 8006774:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006778:	f7fd f8da 	bl	8003930 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e1e9      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800678a:	4ba4      	ldr	r3, [pc, #656]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 800678c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0x2c4>
 8006796:	e015      	b.n	80067c4 <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006798:	4ba1      	ldr	r3, [pc, #644]	; (8006a20 <HAL_RCC_OscConfig+0x56c>)
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679e:	f7fd f8c7 	bl	8003930 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067a6:	f7fd f8c3 	bl	8003930 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e1d2      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b8:	4b98      	ldr	r3, [pc, #608]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 80067ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f0      	bne.n	80067a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 80a8 	beq.w	8006922 <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067d2:	2300      	movs	r3, #0
 80067d4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00c      	beq.n	80067f8 <HAL_RCC_OscConfig+0x344>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d008      	beq.n	80067f8 <HAL_RCC_OscConfig+0x344>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	2b05      	cmp	r3, #5
 80067ec:	d004      	beq.n	80067f8 <HAL_RCC_OscConfig+0x344>
 80067ee:	f640 51c2 	movw	r1, #3522	; 0xdc2
 80067f2:	488c      	ldr	r0, [pc, #560]	; (8006a24 <HAL_RCC_OscConfig+0x570>)
 80067f4:	f7fc fad1 	bl	8002d9a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067f8:	4b88      	ldr	r3, [pc, #544]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 80067fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10f      	bne.n	8006824 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006804:	2300      	movs	r3, #0
 8006806:	60bb      	str	r3, [r7, #8]
 8006808:	4b84      	ldr	r3, [pc, #528]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 800680a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680c:	4a83      	ldr	r2, [pc, #524]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 800680e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006812:	6413      	str	r3, [r2, #64]	; 0x40
 8006814:	4b81      	ldr	r3, [pc, #516]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006820:	2301      	movs	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006824:	4b80      	ldr	r3, [pc, #512]	; (8006a28 <HAL_RCC_OscConfig+0x574>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682c:	2b00      	cmp	r3, #0
 800682e:	d118      	bne.n	8006862 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006830:	4b7d      	ldr	r3, [pc, #500]	; (8006a28 <HAL_RCC_OscConfig+0x574>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a7c      	ldr	r2, [pc, #496]	; (8006a28 <HAL_RCC_OscConfig+0x574>)
 8006836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800683c:	f7fd f878 	bl	8003930 <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006844:	f7fd f874 	bl	8003930 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e183      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006856:	4b74      	ldr	r3, [pc, #464]	; (8006a28 <HAL_RCC_OscConfig+0x574>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0f0      	beq.n	8006844 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d106      	bne.n	8006878 <HAL_RCC_OscConfig+0x3c4>
 800686a:	4b6c      	ldr	r3, [pc, #432]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686e:	4a6b      	ldr	r2, [pc, #428]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 8006870:	f043 0301 	orr.w	r3, r3, #1
 8006874:	6713      	str	r3, [r2, #112]	; 0x70
 8006876:	e01c      	b.n	80068b2 <HAL_RCC_OscConfig+0x3fe>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b05      	cmp	r3, #5
 800687e:	d10c      	bne.n	800689a <HAL_RCC_OscConfig+0x3e6>
 8006880:	4b66      	ldr	r3, [pc, #408]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 8006882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006884:	4a65      	ldr	r2, [pc, #404]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 8006886:	f043 0304 	orr.w	r3, r3, #4
 800688a:	6713      	str	r3, [r2, #112]	; 0x70
 800688c:	4b63      	ldr	r3, [pc, #396]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 800688e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006890:	4a62      	ldr	r2, [pc, #392]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 8006892:	f043 0301 	orr.w	r3, r3, #1
 8006896:	6713      	str	r3, [r2, #112]	; 0x70
 8006898:	e00b      	b.n	80068b2 <HAL_RCC_OscConfig+0x3fe>
 800689a:	4b60      	ldr	r3, [pc, #384]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	4a5f      	ldr	r2, [pc, #380]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 80068a0:	f023 0301 	bic.w	r3, r3, #1
 80068a4:	6713      	str	r3, [r2, #112]	; 0x70
 80068a6:	4b5d      	ldr	r3, [pc, #372]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068aa:	4a5c      	ldr	r2, [pc, #368]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 80068ac:	f023 0304 	bic.w	r3, r3, #4
 80068b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d015      	beq.n	80068e6 <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ba:	f7fd f839 	bl	8003930 <HAL_GetTick>
 80068be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c0:	e00a      	b.n	80068d8 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068c2:	f7fd f835 	bl	8003930 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e142      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068d8:	4b50      	ldr	r3, [pc, #320]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 80068da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0ee      	beq.n	80068c2 <HAL_RCC_OscConfig+0x40e>
 80068e4:	e014      	b.n	8006910 <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e6:	f7fd f823 	bl	8003930 <HAL_GetTick>
 80068ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068ec:	e00a      	b.n	8006904 <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ee:	f7fd f81f 	bl	8003930 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e12c      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006904:	4b45      	ldr	r3, [pc, #276]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 8006906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1ee      	bne.n	80068ee <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d105      	bne.n	8006922 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006916:	4b41      	ldr	r3, [pc, #260]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	4a40      	ldr	r2, [pc, #256]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 800691c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006920:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00c      	beq.n	8006944 <HAL_RCC_OscConfig+0x490>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d008      	beq.n	8006944 <HAL_RCC_OscConfig+0x490>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d004      	beq.n	8006944 <HAL_RCC_OscConfig+0x490>
 800693a:	f640 6105 	movw	r1, #3589	; 0xe05
 800693e:	4839      	ldr	r0, [pc, #228]	; (8006a24 <HAL_RCC_OscConfig+0x570>)
 8006940:	f7fc fa2b 	bl	8002d9a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 8107 	beq.w	8006b5c <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800694e:	4b33      	ldr	r3, [pc, #204]	; (8006a1c <HAL_RCC_OscConfig+0x568>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f003 030c 	and.w	r3, r3, #12
 8006956:	2b08      	cmp	r3, #8
 8006958:	f000 80c0 	beq.w	8006adc <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	2b02      	cmp	r3, #2
 8006962:	f040 80a4 	bne.w	8006aae <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d009      	beq.n	8006982 <HAL_RCC_OscConfig+0x4ce>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006976:	d004      	beq.n	8006982 <HAL_RCC_OscConfig+0x4ce>
 8006978:	f640 610e 	movw	r1, #3598	; 0xe0e
 800697c:	4829      	ldr	r0, [pc, #164]	; (8006a24 <HAL_RCC_OscConfig+0x570>)
 800697e:	f7fc fa0c 	bl	8002d9a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	2b3f      	cmp	r3, #63	; 0x3f
 8006988:	d904      	bls.n	8006994 <HAL_RCC_OscConfig+0x4e0>
 800698a:	f640 610f 	movw	r1, #3599	; 0xe0f
 800698e:	4825      	ldr	r0, [pc, #148]	; (8006a24 <HAL_RCC_OscConfig+0x570>)
 8006990:	f7fc fa03 	bl	8002d9a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	2b31      	cmp	r3, #49	; 0x31
 800699a:	d904      	bls.n	80069a6 <HAL_RCC_OscConfig+0x4f2>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80069a4:	d904      	bls.n	80069b0 <HAL_RCC_OscConfig+0x4fc>
 80069a6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80069aa:	481e      	ldr	r0, [pc, #120]	; (8006a24 <HAL_RCC_OscConfig+0x570>)
 80069ac:	f7fc f9f5 	bl	8002d9a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d010      	beq.n	80069da <HAL_RCC_OscConfig+0x526>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d00c      	beq.n	80069da <HAL_RCC_OscConfig+0x526>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	2b06      	cmp	r3, #6
 80069c6:	d008      	beq.n	80069da <HAL_RCC_OscConfig+0x526>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d004      	beq.n	80069da <HAL_RCC_OscConfig+0x526>
 80069d0:	f640 6111 	movw	r1, #3601	; 0xe11
 80069d4:	4813      	ldr	r0, [pc, #76]	; (8006a24 <HAL_RCC_OscConfig+0x570>)
 80069d6:	f7fc f9e0 	bl	8002d9a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d903      	bls.n	80069ea <HAL_RCC_OscConfig+0x536>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	2b0f      	cmp	r3, #15
 80069e8:	d904      	bls.n	80069f4 <HAL_RCC_OscConfig+0x540>
 80069ea:	f640 6112 	movw	r1, #3602	; 0xe12
 80069ee:	480d      	ldr	r0, [pc, #52]	; (8006a24 <HAL_RCC_OscConfig+0x570>)
 80069f0:	f7fc f9d3 	bl	8002d9a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d903      	bls.n	8006a04 <HAL_RCC_OscConfig+0x550>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a00:	2b07      	cmp	r3, #7
 8006a02:	d904      	bls.n	8006a0e <HAL_RCC_OscConfig+0x55a>
 8006a04:	f640 6113 	movw	r1, #3603	; 0xe13
 8006a08:	4806      	ldr	r0, [pc, #24]	; (8006a24 <HAL_RCC_OscConfig+0x570>)
 8006a0a:	f7fc f9c6 	bl	8002d9a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a0e:	4b07      	ldr	r3, [pc, #28]	; (8006a2c <HAL_RCC_OscConfig+0x578>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a14:	f7fc ff8c 	bl	8003930 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a1a:	e012      	b.n	8006a42 <HAL_RCC_OscConfig+0x58e>
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	42470e80 	.word	0x42470e80
 8006a24:	08010644 	.word	0x08010644
 8006a28:	40007000 	.word	0x40007000
 8006a2c:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a30:	f7fc ff7e 	bl	8003930 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e08d      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a42:	4b49      	ldr	r3, [pc, #292]	; (8006b68 <HAL_RCC_OscConfig+0x6b4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f0      	bne.n	8006a30 <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69da      	ldr	r2, [r3, #28]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	019b      	lsls	r3, r3, #6
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	085b      	lsrs	r3, r3, #1
 8006a66:	3b01      	subs	r3, #1
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	061b      	lsls	r3, r3, #24
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	071b      	lsls	r3, r3, #28
 8006a7a:	493b      	ldr	r1, [pc, #236]	; (8006b68 <HAL_RCC_OscConfig+0x6b4>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a80:	4b3a      	ldr	r3, [pc, #232]	; (8006b6c <HAL_RCC_OscConfig+0x6b8>)
 8006a82:	2201      	movs	r2, #1
 8006a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a86:	f7fc ff53 	bl	8003930 <HAL_GetTick>
 8006a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a8e:	f7fc ff4f 	bl	8003930 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e05e      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa0:	4b31      	ldr	r3, [pc, #196]	; (8006b68 <HAL_RCC_OscConfig+0x6b4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0f0      	beq.n	8006a8e <HAL_RCC_OscConfig+0x5da>
 8006aac:	e056      	b.n	8006b5c <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aae:	4b2f      	ldr	r3, [pc, #188]	; (8006b6c <HAL_RCC_OscConfig+0x6b8>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fc ff3c 	bl	8003930 <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006abc:	f7fc ff38 	bl	8003930 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e047      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ace:	4b26      	ldr	r3, [pc, #152]	; (8006b68 <HAL_RCC_OscConfig+0x6b4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f0      	bne.n	8006abc <HAL_RCC_OscConfig+0x608>
 8006ada:	e03f      	b.n	8006b5c <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e03a      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ae8:	4b1f      	ldr	r3, [pc, #124]	; (8006b68 <HAL_RCC_OscConfig+0x6b4>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d030      	beq.n	8006b58 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d129      	bne.n	8006b58 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d122      	bne.n	8006b58 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b18:	4013      	ands	r3, r2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d119      	bne.n	8006b58 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	3b01      	subs	r3, #1
 8006b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d10f      	bne.n	8006b58 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d107      	bne.n	8006b58 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d001      	beq.n	8006b5c <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	42470060 	.word	0x42470060

08006b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e184      	b.n	8006e8c <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a72      	ldr	r2, [pc, #456]	; (8006d50 <HAL_SPI_Init+0x1e0>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d013      	beq.n	8006bb4 <HAL_SPI_Init+0x44>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a70      	ldr	r2, [pc, #448]	; (8006d54 <HAL_SPI_Init+0x1e4>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00e      	beq.n	8006bb4 <HAL_SPI_Init+0x44>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a6f      	ldr	r2, [pc, #444]	; (8006d58 <HAL_SPI_Init+0x1e8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d009      	beq.n	8006bb4 <HAL_SPI_Init+0x44>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a6d      	ldr	r2, [pc, #436]	; (8006d5c <HAL_SPI_Init+0x1ec>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d004      	beq.n	8006bb4 <HAL_SPI_Init+0x44>
 8006baa:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006bae:	486c      	ldr	r0, [pc, #432]	; (8006d60 <HAL_SPI_Init+0x1f0>)
 8006bb0:	f7fc f8f3 	bl	8002d9a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <HAL_SPI_Init+0x60>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bc4:	d004      	beq.n	8006bd0 <HAL_SPI_Init+0x60>
 8006bc6:	f240 1143 	movw	r1, #323	; 0x143
 8006bca:	4865      	ldr	r0, [pc, #404]	; (8006d60 <HAL_SPI_Init+0x1f0>)
 8006bcc:	f7fc f8e5 	bl	8002d9a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00e      	beq.n	8006bf6 <HAL_SPI_Init+0x86>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be0:	d009      	beq.n	8006bf6 <HAL_SPI_Init+0x86>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bea:	d004      	beq.n	8006bf6 <HAL_SPI_Init+0x86>
 8006bec:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006bf0:	485b      	ldr	r0, [pc, #364]	; (8006d60 <HAL_SPI_Init+0x1f0>)
 8006bf2:	f7fc f8d2 	bl	8002d9a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bfe:	d008      	beq.n	8006c12 <HAL_SPI_Init+0xa2>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <HAL_SPI_Init+0xa2>
 8006c08:	f240 1145 	movw	r1, #325	; 0x145
 8006c0c:	4854      	ldr	r0, [pc, #336]	; (8006d60 <HAL_SPI_Init+0x1f0>)
 8006c0e:	f7fc f8c4 	bl	8002d9a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c1a:	d00d      	beq.n	8006c38 <HAL_SPI_Init+0xc8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d009      	beq.n	8006c38 <HAL_SPI_Init+0xc8>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c2c:	d004      	beq.n	8006c38 <HAL_SPI_Init+0xc8>
 8006c2e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006c32:	484b      	ldr	r0, [pc, #300]	; (8006d60 <HAL_SPI_Init+0x1f0>)
 8006c34:	f7fc f8b1 	bl	8002d9a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d020      	beq.n	8006c82 <HAL_SPI_Init+0x112>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d01c      	beq.n	8006c82 <HAL_SPI_Init+0x112>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	2b10      	cmp	r3, #16
 8006c4e:	d018      	beq.n	8006c82 <HAL_SPI_Init+0x112>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	2b18      	cmp	r3, #24
 8006c56:	d014      	beq.n	8006c82 <HAL_SPI_Init+0x112>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	d010      	beq.n	8006c82 <HAL_SPI_Init+0x112>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	2b28      	cmp	r3, #40	; 0x28
 8006c66:	d00c      	beq.n	8006c82 <HAL_SPI_Init+0x112>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	2b30      	cmp	r3, #48	; 0x30
 8006c6e:	d008      	beq.n	8006c82 <HAL_SPI_Init+0x112>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	2b38      	cmp	r3, #56	; 0x38
 8006c76:	d004      	beq.n	8006c82 <HAL_SPI_Init+0x112>
 8006c78:	f240 1147 	movw	r1, #327	; 0x147
 8006c7c:	4838      	ldr	r0, [pc, #224]	; (8006d60 <HAL_SPI_Init+0x1f0>)
 8006c7e:	f7fc f88c 	bl	8002d9a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d008      	beq.n	8006c9c <HAL_SPI_Init+0x12c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	2b80      	cmp	r3, #128	; 0x80
 8006c90:	d004      	beq.n	8006c9c <HAL_SPI_Init+0x12c>
 8006c92:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006c96:	4832      	ldr	r0, [pc, #200]	; (8006d60 <HAL_SPI_Init+0x1f0>)
 8006c98:	f7fc f87f 	bl	8002d9a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d008      	beq.n	8006cb6 <HAL_SPI_Init+0x146>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	2b10      	cmp	r3, #16
 8006caa:	d004      	beq.n	8006cb6 <HAL_SPI_Init+0x146>
 8006cac:	f240 1149 	movw	r1, #329	; 0x149
 8006cb0:	482b      	ldr	r0, [pc, #172]	; (8006d60 <HAL_SPI_Init+0x1f0>)
 8006cb2:	f7fc f872 	bl	8002d9a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d152      	bne.n	8006d64 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d008      	beq.n	8006cd8 <HAL_SPI_Init+0x168>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_SPI_Init+0x168>
 8006cce:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006cd2:	4823      	ldr	r0, [pc, #140]	; (8006d60 <HAL_SPI_Init+0x1f0>)
 8006cd4:	f7fc f861 	bl	8002d9a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d008      	beq.n	8006cf2 <HAL_SPI_Init+0x182>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d004      	beq.n	8006cf2 <HAL_SPI_Init+0x182>
 8006ce8:	f240 114d 	movw	r1, #333	; 0x14d
 8006cec:	481c      	ldr	r0, [pc, #112]	; (8006d60 <HAL_SPI_Init+0x1f0>)
 8006cee:	f7fc f854 	bl	8002d9a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cfa:	d125      	bne.n	8006d48 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d05a      	beq.n	8006dba <HAL_SPI_Init+0x24a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d056      	beq.n	8006dba <HAL_SPI_Init+0x24a>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	2b10      	cmp	r3, #16
 8006d12:	d052      	beq.n	8006dba <HAL_SPI_Init+0x24a>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	2b18      	cmp	r3, #24
 8006d1a:	d04e      	beq.n	8006dba <HAL_SPI_Init+0x24a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	d04a      	beq.n	8006dba <HAL_SPI_Init+0x24a>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	2b28      	cmp	r3, #40	; 0x28
 8006d2a:	d046      	beq.n	8006dba <HAL_SPI_Init+0x24a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	2b30      	cmp	r3, #48	; 0x30
 8006d32:	d042      	beq.n	8006dba <HAL_SPI_Init+0x24a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	2b38      	cmp	r3, #56	; 0x38
 8006d3a:	d03e      	beq.n	8006dba <HAL_SPI_Init+0x24a>
 8006d3c:	f240 1151 	movw	r1, #337	; 0x151
 8006d40:	4807      	ldr	r0, [pc, #28]	; (8006d60 <HAL_SPI_Init+0x1f0>)
 8006d42:	f7fc f82a 	bl	8002d9a <assert_failed>
 8006d46:	e038      	b.n	8006dba <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	61da      	str	r2, [r3, #28]
 8006d4e:	e034      	b.n	8006dba <HAL_SPI_Init+0x24a>
 8006d50:	40013000 	.word	0x40013000
 8006d54:	40003800 	.word	0x40003800
 8006d58:	40003c00 	.word	0x40003c00
 8006d5c:	40013400 	.word	0x40013400
 8006d60:	08010680 	.word	0x08010680
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d020      	beq.n	8006dae <HAL_SPI_Init+0x23e>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d01c      	beq.n	8006dae <HAL_SPI_Init+0x23e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	2b10      	cmp	r3, #16
 8006d7a:	d018      	beq.n	8006dae <HAL_SPI_Init+0x23e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	2b18      	cmp	r3, #24
 8006d82:	d014      	beq.n	8006dae <HAL_SPI_Init+0x23e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d010      	beq.n	8006dae <HAL_SPI_Init+0x23e>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	2b28      	cmp	r3, #40	; 0x28
 8006d92:	d00c      	beq.n	8006dae <HAL_SPI_Init+0x23e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	2b30      	cmp	r3, #48	; 0x30
 8006d9a:	d008      	beq.n	8006dae <HAL_SPI_Init+0x23e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	2b38      	cmp	r3, #56	; 0x38
 8006da2:	d004      	beq.n	8006dae <HAL_SPI_Init+0x23e>
 8006da4:	f240 115b 	movw	r1, #347	; 0x15b
 8006da8:	483a      	ldr	r0, [pc, #232]	; (8006e94 <HAL_SPI_Init+0x324>)
 8006daa:	f7fb fff6 	bl	8002d9a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d106      	bne.n	8006dda <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7fc f907 	bl	8002fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3e:	ea42 0103 	orr.w	r1, r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	0c1b      	lsrs	r3, r3, #16
 8006e58:	f003 0104 	and.w	r1, r3, #4
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	f003 0210 	and.w	r2, r3, #16
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69da      	ldr	r2, [r3, #28]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	08010680 	.word	0x08010680

08006e98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d009      	beq.n	8006ec8 <HAL_SPI_Transmit+0x30>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ebc:	d004      	beq.n	8006ec8 <HAL_SPI_Transmit+0x30>
 8006ebe:	f240 310a 	movw	r1, #778	; 0x30a
 8006ec2:	4893      	ldr	r0, [pc, #588]	; (8007110 <HAL_SPI_Transmit+0x278>)
 8006ec4:	f7fb ff69 	bl	8002d9a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_SPI_Transmit+0x3e>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e128      	b.n	8007128 <HAL_SPI_Transmit+0x290>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ede:	f7fc fd27 	bl	8003930 <HAL_GetTick>
 8006ee2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ee4:	88fb      	ldrh	r3, [r7, #6]
 8006ee6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d002      	beq.n	8006efa <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ef8:	e10d      	b.n	8007116 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <HAL_SPI_Transmit+0x6e>
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d102      	bne.n	8006f0c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f0a:	e104      	b.n	8007116 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2203      	movs	r2, #3
 8006f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	88fa      	ldrh	r2, [r7, #6]
 8006f24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	88fa      	ldrh	r2, [r7, #6]
 8006f2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f52:	d10f      	bne.n	8006f74 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7e:	2b40      	cmp	r3, #64	; 0x40
 8006f80:	d007      	beq.n	8006f92 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f9a:	d14b      	bne.n	8007034 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <HAL_SPI_Transmit+0x112>
 8006fa4:	8afb      	ldrh	r3, [r7, #22]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d13e      	bne.n	8007028 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	881a      	ldrh	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fba:	1c9a      	adds	r2, r3, #2
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fce:	e02b      	b.n	8007028 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d112      	bne.n	8007004 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe2:	881a      	ldrh	r2, [r3, #0]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	1c9a      	adds	r2, r3, #2
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	86da      	strh	r2, [r3, #54]	; 0x36
 8007002:	e011      	b.n	8007028 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007004:	f7fc fc94 	bl	8003930 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d803      	bhi.n	800701c <HAL_SPI_Transmit+0x184>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701a:	d102      	bne.n	8007022 <HAL_SPI_Transmit+0x18a>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d102      	bne.n	8007028 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007026:	e076      	b.n	8007116 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1ce      	bne.n	8006fd0 <HAL_SPI_Transmit+0x138>
 8007032:	e04c      	b.n	80070ce <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <HAL_SPI_Transmit+0x1aa>
 800703c:	8afb      	ldrh	r3, [r7, #22]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d140      	bne.n	80070c4 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	7812      	ldrb	r2, [r2, #0]
 800704e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007068:	e02c      	b.n	80070c4 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b02      	cmp	r3, #2
 8007076:	d113      	bne.n	80070a0 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	7812      	ldrb	r2, [r2, #0]
 8007084:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	86da      	strh	r2, [r3, #54]	; 0x36
 800709e:	e011      	b.n	80070c4 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070a0:	f7fc fc46 	bl	8003930 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d803      	bhi.n	80070b8 <HAL_SPI_Transmit+0x220>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	d102      	bne.n	80070be <HAL_SPI_Transmit+0x226>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d102      	bne.n	80070c4 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070c2:	e028      	b.n	8007116 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1cd      	bne.n	800706a <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 fbda 	bl	800788c <SPI_EndRxTxTransaction>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070ec:	2300      	movs	r3, #0
 80070ee:	613b      	str	r3, [r7, #16]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	613b      	str	r3, [r7, #16]
 8007100:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007106:	2b00      	cmp	r3, #0
 8007108:	d004      	beq.n	8007114 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	77fb      	strb	r3, [r7, #31]
 800710e:	e002      	b.n	8007116 <HAL_SPI_Transmit+0x27e>
 8007110:	08010680 	.word	0x08010680
  }

error:
 8007114:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007126:	7ffb      	ldrb	r3, [r7, #31]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3720      	adds	r7, #32
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af02      	add	r7, sp, #8
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	4613      	mov	r3, r2
 800713e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800714c:	d112      	bne.n	8007174 <HAL_SPI_Receive+0x44>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10e      	bne.n	8007174 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2204      	movs	r2, #4
 800715a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800715e:	88fa      	ldrh	r2, [r7, #6]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	4613      	mov	r3, r2
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 f8f2 	bl	8007354 <HAL_SPI_TransmitReceive>
 8007170:	4603      	mov	r3, r0
 8007172:	e0ea      	b.n	800734a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800717a:	2b01      	cmp	r3, #1
 800717c:	d101      	bne.n	8007182 <HAL_SPI_Receive+0x52>
 800717e:	2302      	movs	r3, #2
 8007180:	e0e3      	b.n	800734a <HAL_SPI_Receive+0x21a>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800718a:	f7fc fbd1 	bl	8003930 <HAL_GetTick>
 800718e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	d002      	beq.n	80071a2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800719c:	2302      	movs	r3, #2
 800719e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071a0:	e0ca      	b.n	8007338 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <HAL_SPI_Receive+0x7e>
 80071a8:	88fb      	ldrh	r3, [r7, #6]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d102      	bne.n	80071b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071b2:	e0c1      	b.n	8007338 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2204      	movs	r2, #4
 80071b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	88fa      	ldrh	r2, [r7, #6]
 80071d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071fa:	d10f      	bne.n	800721c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800720a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800721a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d007      	beq.n	800723a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007238:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d162      	bne.n	8007308 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007242:	e02e      	b.n	80072a2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b01      	cmp	r3, #1
 8007250:	d115      	bne.n	800727e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f103 020c 	add.w	r2, r3, #12
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007272:	b29b      	uxth	r3, r3
 8007274:	3b01      	subs	r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800727c:	e011      	b.n	80072a2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800727e:	f7fc fb57 	bl	8003930 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	429a      	cmp	r2, r3
 800728c:	d803      	bhi.n	8007296 <HAL_SPI_Receive+0x166>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007294:	d102      	bne.n	800729c <HAL_SPI_Receive+0x16c>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80072a0:	e04a      	b.n	8007338 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1cb      	bne.n	8007244 <HAL_SPI_Receive+0x114>
 80072ac:	e031      	b.n	8007312 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d113      	bne.n	80072e4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	b292      	uxth	r2, r2
 80072c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	1c9a      	adds	r2, r3, #2
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072e2:	e011      	b.n	8007308 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072e4:	f7fc fb24 	bl	8003930 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d803      	bhi.n	80072fc <HAL_SPI_Receive+0x1cc>
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	d102      	bne.n	8007302 <HAL_SPI_Receive+0x1d2>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d102      	bne.n	8007308 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007306:	e017      	b.n	8007338 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1cd      	bne.n	80072ae <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 fa52 	bl	80077c0 <SPI_EndRxTransaction>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2220      	movs	r2, #32
 8007326:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	75fb      	strb	r3, [r7, #23]
 8007334:	e000      	b.n	8007338 <HAL_SPI_Receive+0x208>
  }

error :
 8007336:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007348:	7dfb      	ldrb	r3, [r7, #23]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08c      	sub	sp, #48	; 0x30
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007362:	2301      	movs	r3, #1
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d004      	beq.n	800737e <HAL_SPI_TransmitReceive+0x2a>
 8007374:	f240 417e 	movw	r1, #1150	; 0x47e
 8007378:	4884      	ldr	r0, [pc, #528]	; (800758c <HAL_SPI_TransmitReceive+0x238>)
 800737a:	f7fb fd0e 	bl	8002d9a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_SPI_TransmitReceive+0x38>
 8007388:	2302      	movs	r3, #2
 800738a:	e18d      	b.n	80076a8 <HAL_SPI_TransmitReceive+0x354>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007394:	f7fc facc 	bl	8003930 <HAL_GetTick>
 8007398:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80073aa:	887b      	ldrh	r3, [r7, #2]
 80073ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d00f      	beq.n	80073d6 <HAL_SPI_TransmitReceive+0x82>
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073bc:	d107      	bne.n	80073ce <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d103      	bne.n	80073ce <HAL_SPI_TransmitReceive+0x7a>
 80073c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d003      	beq.n	80073d6 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80073ce:	2302      	movs	r3, #2
 80073d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073d4:	e15e      	b.n	8007694 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d005      	beq.n	80073e8 <HAL_SPI_TransmitReceive+0x94>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <HAL_SPI_TransmitReceive+0x94>
 80073e2:	887b      	ldrh	r3, [r7, #2]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d103      	bne.n	80073f0 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073ee:	e151      	b.n	8007694 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d003      	beq.n	8007404 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2205      	movs	r2, #5
 8007400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	887a      	ldrh	r2, [r7, #2]
 8007414:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	887a      	ldrh	r2, [r7, #2]
 800741a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	887a      	ldrh	r2, [r7, #2]
 8007426:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	887a      	ldrh	r2, [r7, #2]
 800742c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007444:	2b40      	cmp	r3, #64	; 0x40
 8007446:	d007      	beq.n	8007458 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007456:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007460:	d178      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <HAL_SPI_TransmitReceive+0x11c>
 800746a:	8b7b      	ldrh	r3, [r7, #26]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d166      	bne.n	800753e <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007474:	881a      	ldrh	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	1c9a      	adds	r2, r3, #2
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007494:	e053      	b.n	800753e <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d11b      	bne.n	80074dc <HAL_SPI_TransmitReceive+0x188>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d016      	beq.n	80074dc <HAL_SPI_TransmitReceive+0x188>
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d113      	bne.n	80074dc <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b8:	881a      	ldrh	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c4:	1c9a      	adds	r2, r3, #2
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	3b01      	subs	r3, #1
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d119      	bne.n	800751e <HAL_SPI_TransmitReceive+0x1ca>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d014      	beq.n	800751e <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68da      	ldr	r2, [r3, #12]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fe:	b292      	uxth	r2, r2
 8007500:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007506:	1c9a      	adds	r2, r3, #2
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007510:	b29b      	uxth	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800751a:	2301      	movs	r3, #1
 800751c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800751e:	f7fc fa07 	bl	8003930 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800752a:	429a      	cmp	r2, r3
 800752c:	d807      	bhi.n	800753e <HAL_SPI_TransmitReceive+0x1ea>
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d003      	beq.n	800753e <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800753c:	e0aa      	b.n	8007694 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007542:	b29b      	uxth	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1a6      	bne.n	8007496 <HAL_SPI_TransmitReceive+0x142>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800754c:	b29b      	uxth	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1a1      	bne.n	8007496 <HAL_SPI_TransmitReceive+0x142>
 8007552:	e07f      	b.n	8007654 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <HAL_SPI_TransmitReceive+0x20e>
 800755c:	8b7b      	ldrh	r3, [r7, #26]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d16e      	bne.n	8007640 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	330c      	adds	r3, #12
 800756c:	7812      	ldrb	r2, [r2, #0]
 800756e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007588:	e05a      	b.n	8007640 <HAL_SPI_TransmitReceive+0x2ec>
 800758a:	bf00      	nop
 800758c:	08010680 	.word	0x08010680
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b02      	cmp	r3, #2
 800759c:	d11c      	bne.n	80075d8 <HAL_SPI_TransmitReceive+0x284>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d017      	beq.n	80075d8 <HAL_SPI_TransmitReceive+0x284>
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d114      	bne.n	80075d8 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	7812      	ldrb	r2, [r2, #0]
 80075ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d119      	bne.n	800761a <HAL_SPI_TransmitReceive+0x2c6>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d014      	beq.n	800761a <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68da      	ldr	r2, [r3, #12]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760c:	b29b      	uxth	r3, r3
 800760e:	3b01      	subs	r3, #1
 8007610:	b29a      	uxth	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007616:	2301      	movs	r3, #1
 8007618:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800761a:	f7fc f989 	bl	8003930 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007626:	429a      	cmp	r2, r3
 8007628:	d803      	bhi.n	8007632 <HAL_SPI_TransmitReceive+0x2de>
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007630:	d102      	bne.n	8007638 <HAL_SPI_TransmitReceive+0x2e4>
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	2b00      	cmp	r3, #0
 8007636:	d103      	bne.n	8007640 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800763e:	e029      	b.n	8007694 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007644:	b29b      	uxth	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1a2      	bne.n	8007590 <HAL_SPI_TransmitReceive+0x23c>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d19d      	bne.n	8007590 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007656:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 f917 	bl	800788c <SPI_EndRxTxTransaction>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d006      	beq.n	8007672 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2220      	movs	r2, #32
 800766e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007670:	e010      	b.n	8007694 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	e000      	b.n	8007694 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8007692:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3730      	adds	r7, #48	; 0x30
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	4613      	mov	r3, r2
 80076be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076c0:	f7fc f936 	bl	8003930 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c8:	1a9b      	subs	r3, r3, r2
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	4413      	add	r3, r2
 80076ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076d0:	f7fc f92e 	bl	8003930 <HAL_GetTick>
 80076d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076d6:	4b39      	ldr	r3, [pc, #228]	; (80077bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	015b      	lsls	r3, r3, #5
 80076dc:	0d1b      	lsrs	r3, r3, #20
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	fb02 f303 	mul.w	r3, r2, r3
 80076e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076e6:	e054      	b.n	8007792 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d050      	beq.n	8007792 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076f0:	f7fc f91e 	bl	8003930 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d902      	bls.n	8007706 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d13d      	bne.n	8007782 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007714:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800771e:	d111      	bne.n	8007744 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007728:	d004      	beq.n	8007734 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007732:	d107      	bne.n	8007744 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007742:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800774c:	d10f      	bne.n	800776e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800776c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e017      	b.n	80077b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	3b01      	subs	r3, #1
 8007790:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	4013      	ands	r3, r2
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	429a      	cmp	r2, r3
 80077a0:	bf0c      	ite	eq
 80077a2:	2301      	moveq	r3, #1
 80077a4:	2300      	movne	r3, #0
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d19b      	bne.n	80076e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20000154 	.word	0x20000154

080077c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077d4:	d111      	bne.n	80077fa <SPI_EndRxTransaction+0x3a>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077de:	d004      	beq.n	80077ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e8:	d107      	bne.n	80077fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007802:	d12a      	bne.n	800785a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800780c:	d012      	beq.n	8007834 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2200      	movs	r2, #0
 8007816:	2180      	movs	r1, #128	; 0x80
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7ff ff49 	bl	80076b0 <SPI_WaitFlagStateUntilTimeout>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d02d      	beq.n	8007880 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007828:	f043 0220 	orr.w	r2, r3, #32
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e026      	b.n	8007882 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2200      	movs	r2, #0
 800783c:	2101      	movs	r1, #1
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f7ff ff36 	bl	80076b0 <SPI_WaitFlagStateUntilTimeout>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d01a      	beq.n	8007880 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784e:	f043 0220 	orr.w	r2, r3, #32
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e013      	b.n	8007882 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	2101      	movs	r1, #1
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f7ff ff23 	bl	80076b0 <SPI_WaitFlagStateUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d007      	beq.n	8007880 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007874:	f043 0220 	orr.w	r2, r3, #32
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e000      	b.n	8007882 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af02      	add	r7, sp, #8
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007898:	4b1b      	ldr	r3, [pc, #108]	; (8007908 <SPI_EndRxTxTransaction+0x7c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a1b      	ldr	r2, [pc, #108]	; (800790c <SPI_EndRxTxTransaction+0x80>)
 800789e:	fba2 2303 	umull	r2, r3, r2, r3
 80078a2:	0d5b      	lsrs	r3, r3, #21
 80078a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80078a8:	fb02 f303 	mul.w	r3, r2, r3
 80078ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078b6:	d112      	bne.n	80078de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2200      	movs	r2, #0
 80078c0:	2180      	movs	r1, #128	; 0x80
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f7ff fef4 	bl	80076b0 <SPI_WaitFlagStateUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d016      	beq.n	80078fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	f043 0220 	orr.w	r2, r3, #32
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e00f      	b.n	80078fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00a      	beq.n	80078fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f4:	2b80      	cmp	r3, #128	; 0x80
 80078f6:	d0f2      	beq.n	80078de <SPI_EndRxTxTransaction+0x52>
 80078f8:	e000      	b.n	80078fc <SPI_EndRxTxTransaction+0x70>
        break;
 80078fa:	bf00      	nop
  }

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000154 	.word	0x20000154
 800790c:	165e9f81 	.word	0x165e9f81

08007910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e0c5      	b.n	8007aae <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a64      	ldr	r2, [pc, #400]	; (8007ab8 <HAL_TIM_Base_Init+0x1a8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d045      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007934:	d040      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a60      	ldr	r2, [pc, #384]	; (8007abc <HAL_TIM_Base_Init+0x1ac>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d03b      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a5e      	ldr	r2, [pc, #376]	; (8007ac0 <HAL_TIM_Base_Init+0x1b0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d036      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a5d      	ldr	r2, [pc, #372]	; (8007ac4 <HAL_TIM_Base_Init+0x1b4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d031      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a5b      	ldr	r2, [pc, #364]	; (8007ac8 <HAL_TIM_Base_Init+0x1b8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d02c      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a5a      	ldr	r2, [pc, #360]	; (8007acc <HAL_TIM_Base_Init+0x1bc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d027      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a58      	ldr	r2, [pc, #352]	; (8007ad0 <HAL_TIM_Base_Init+0x1c0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d022      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a57      	ldr	r2, [pc, #348]	; (8007ad4 <HAL_TIM_Base_Init+0x1c4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d01d      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a55      	ldr	r2, [pc, #340]	; (8007ad8 <HAL_TIM_Base_Init+0x1c8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d018      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a54      	ldr	r2, [pc, #336]	; (8007adc <HAL_TIM_Base_Init+0x1cc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d013      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a52      	ldr	r2, [pc, #328]	; (8007ae0 <HAL_TIM_Base_Init+0x1d0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00e      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a51      	ldr	r2, [pc, #324]	; (8007ae4 <HAL_TIM_Base_Init+0x1d4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d009      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a4f      	ldr	r2, [pc, #316]	; (8007ae8 <HAL_TIM_Base_Init+0x1d8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <HAL_TIM_Base_Init+0xa8>
 80079ae:	f240 1113 	movw	r1, #275	; 0x113
 80079b2:	484e      	ldr	r0, [pc, #312]	; (8007aec <HAL_TIM_Base_Init+0x1dc>)
 80079b4:	f7fb f9f1 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d014      	beq.n	80079ea <HAL_TIM_Base_Init+0xda>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b10      	cmp	r3, #16
 80079c6:	d010      	beq.n	80079ea <HAL_TIM_Base_Init+0xda>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	2b20      	cmp	r3, #32
 80079ce:	d00c      	beq.n	80079ea <HAL_TIM_Base_Init+0xda>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	2b40      	cmp	r3, #64	; 0x40
 80079d6:	d008      	beq.n	80079ea <HAL_TIM_Base_Init+0xda>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	2b60      	cmp	r3, #96	; 0x60
 80079de:	d004      	beq.n	80079ea <HAL_TIM_Base_Init+0xda>
 80079e0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80079e4:	4841      	ldr	r0, [pc, #260]	; (8007aec <HAL_TIM_Base_Init+0x1dc>)
 80079e6:	f7fb f9d8 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00e      	beq.n	8007a10 <HAL_TIM_Base_Init+0x100>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079fa:	d009      	beq.n	8007a10 <HAL_TIM_Base_Init+0x100>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a04:	d004      	beq.n	8007a10 <HAL_TIM_Base_Init+0x100>
 8007a06:	f240 1115 	movw	r1, #277	; 0x115
 8007a0a:	4838      	ldr	r0, [pc, #224]	; (8007aec <HAL_TIM_Base_Init+0x1dc>)
 8007a0c:	f7fb f9c5 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <HAL_TIM_Base_Init+0x11a>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	2b80      	cmp	r3, #128	; 0x80
 8007a1e:	d004      	beq.n	8007a2a <HAL_TIM_Base_Init+0x11a>
 8007a20:	f44f 718b 	mov.w	r1, #278	; 0x116
 8007a24:	4831      	ldr	r0, [pc, #196]	; (8007aec <HAL_TIM_Base_Init+0x1dc>)
 8007a26:	f7fb f9b8 	bl	8002d9a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7fb fc24 	bl	800328c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3304      	adds	r3, #4
 8007a54:	4619      	mov	r1, r3
 8007a56:	4610      	mov	r0, r2
 8007a58:	f001 fbb8 	bl	80091cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40010000 	.word	0x40010000
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800
 8007ac4:	40000c00 	.word	0x40000c00
 8007ac8:	40001000 	.word	0x40001000
 8007acc:	40001400 	.word	0x40001400
 8007ad0:	40010400 	.word	0x40010400
 8007ad4:	40014000 	.word	0x40014000
 8007ad8:	40014400 	.word	0x40014400
 8007adc:	40014800 	.word	0x40014800
 8007ae0:	40001800 	.word	0x40001800
 8007ae4:	40001c00 	.word	0x40001c00
 8007ae8:	40002000 	.word	0x40002000
 8007aec:	080106b8 	.word	0x080106b8

08007af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a51      	ldr	r2, [pc, #324]	; (8007c44 <HAL_TIM_Base_Start_IT+0x154>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d045      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b0a:	d040      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a4d      	ldr	r2, [pc, #308]	; (8007c48 <HAL_TIM_Base_Start_IT+0x158>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d03b      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a4c      	ldr	r2, [pc, #304]	; (8007c4c <HAL_TIM_Base_Start_IT+0x15c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d036      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a4a      	ldr	r2, [pc, #296]	; (8007c50 <HAL_TIM_Base_Start_IT+0x160>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d031      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a49      	ldr	r2, [pc, #292]	; (8007c54 <HAL_TIM_Base_Start_IT+0x164>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d02c      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a47      	ldr	r2, [pc, #284]	; (8007c58 <HAL_TIM_Base_Start_IT+0x168>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d027      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a46      	ldr	r2, [pc, #280]	; (8007c5c <HAL_TIM_Base_Start_IT+0x16c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d022      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a44      	ldr	r2, [pc, #272]	; (8007c60 <HAL_TIM_Base_Start_IT+0x170>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d01d      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a43      	ldr	r2, [pc, #268]	; (8007c64 <HAL_TIM_Base_Start_IT+0x174>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d018      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a41      	ldr	r2, [pc, #260]	; (8007c68 <HAL_TIM_Base_Start_IT+0x178>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d013      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a40      	ldr	r2, [pc, #256]	; (8007c6c <HAL_TIM_Base_Start_IT+0x17c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00e      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a3e      	ldr	r2, [pc, #248]	; (8007c70 <HAL_TIM_Base_Start_IT+0x180>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d009      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a3d      	ldr	r2, [pc, #244]	; (8007c74 <HAL_TIM_Base_Start_IT+0x184>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d004      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x9e>
 8007b84:	f240 11cf 	movw	r1, #463	; 0x1cf
 8007b88:	483b      	ldr	r0, [pc, #236]	; (8007c78 <HAL_TIM_Base_Start_IT+0x188>)
 8007b8a:	f7fb f906 	bl	8002d9a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d001      	beq.n	8007b9e <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e04e      	b.n	8007c3c <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0201 	orr.w	r2, r2, #1
 8007bb4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a22      	ldr	r2, [pc, #136]	; (8007c44 <HAL_TIM_Base_Start_IT+0x154>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d022      	beq.n	8007c06 <HAL_TIM_Base_Start_IT+0x116>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc8:	d01d      	beq.n	8007c06 <HAL_TIM_Base_Start_IT+0x116>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1e      	ldr	r2, [pc, #120]	; (8007c48 <HAL_TIM_Base_Start_IT+0x158>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d018      	beq.n	8007c06 <HAL_TIM_Base_Start_IT+0x116>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a1c      	ldr	r2, [pc, #112]	; (8007c4c <HAL_TIM_Base_Start_IT+0x15c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d013      	beq.n	8007c06 <HAL_TIM_Base_Start_IT+0x116>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a1b      	ldr	r2, [pc, #108]	; (8007c50 <HAL_TIM_Base_Start_IT+0x160>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00e      	beq.n	8007c06 <HAL_TIM_Base_Start_IT+0x116>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a1b      	ldr	r2, [pc, #108]	; (8007c5c <HAL_TIM_Base_Start_IT+0x16c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d009      	beq.n	8007c06 <HAL_TIM_Base_Start_IT+0x116>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a1a      	ldr	r2, [pc, #104]	; (8007c60 <HAL_TIM_Base_Start_IT+0x170>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d004      	beq.n	8007c06 <HAL_TIM_Base_Start_IT+0x116>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1a      	ldr	r2, [pc, #104]	; (8007c6c <HAL_TIM_Base_Start_IT+0x17c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d111      	bne.n	8007c2a <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f003 0307 	and.w	r3, r3, #7
 8007c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b06      	cmp	r3, #6
 8007c16:	d010      	beq.n	8007c3a <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0201 	orr.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c28:	e007      	b.n	8007c3a <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0201 	orr.w	r2, r2, #1
 8007c38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800
 8007c50:	40000c00 	.word	0x40000c00
 8007c54:	40001000 	.word	0x40001000
 8007c58:	40001400 	.word	0x40001400
 8007c5c:	40010400 	.word	0x40010400
 8007c60:	40014000 	.word	0x40014000
 8007c64:	40014400 	.word	0x40014400
 8007c68:	40014800 	.word	0x40014800
 8007c6c:	40001800 	.word	0x40001800
 8007c70:	40001c00 	.word	0x40001c00
 8007c74:	40002000 	.word	0x40002000
 8007c78:	080106b8 	.word	0x080106b8

08007c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e0c5      	b.n	8007e1a <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a64      	ldr	r2, [pc, #400]	; (8007e24 <HAL_TIM_PWM_Init+0x1a8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d045      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca0:	d040      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a60      	ldr	r2, [pc, #384]	; (8007e28 <HAL_TIM_PWM_Init+0x1ac>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d03b      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a5e      	ldr	r2, [pc, #376]	; (8007e2c <HAL_TIM_PWM_Init+0x1b0>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d036      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a5d      	ldr	r2, [pc, #372]	; (8007e30 <HAL_TIM_PWM_Init+0x1b4>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d031      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a5b      	ldr	r2, [pc, #364]	; (8007e34 <HAL_TIM_PWM_Init+0x1b8>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d02c      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a5a      	ldr	r2, [pc, #360]	; (8007e38 <HAL_TIM_PWM_Init+0x1bc>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d027      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a58      	ldr	r2, [pc, #352]	; (8007e3c <HAL_TIM_PWM_Init+0x1c0>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d022      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a57      	ldr	r2, [pc, #348]	; (8007e40 <HAL_TIM_PWM_Init+0x1c4>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d01d      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a55      	ldr	r2, [pc, #340]	; (8007e44 <HAL_TIM_PWM_Init+0x1c8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d018      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a54      	ldr	r2, [pc, #336]	; (8007e48 <HAL_TIM_PWM_Init+0x1cc>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d013      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a52      	ldr	r2, [pc, #328]	; (8007e4c <HAL_TIM_PWM_Init+0x1d0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d00e      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a51      	ldr	r2, [pc, #324]	; (8007e50 <HAL_TIM_PWM_Init+0x1d4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d009      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a4f      	ldr	r2, [pc, #316]	; (8007e54 <HAL_TIM_PWM_Init+0x1d8>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d004      	beq.n	8007d24 <HAL_TIM_PWM_Init+0xa8>
 8007d1a:	f240 5129 	movw	r1, #1321	; 0x529
 8007d1e:	484e      	ldr	r0, [pc, #312]	; (8007e58 <HAL_TIM_PWM_Init+0x1dc>)
 8007d20:	f7fb f83b 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d014      	beq.n	8007d56 <HAL_TIM_PWM_Init+0xda>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2b10      	cmp	r3, #16
 8007d32:	d010      	beq.n	8007d56 <HAL_TIM_PWM_Init+0xda>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d00c      	beq.n	8007d56 <HAL_TIM_PWM_Init+0xda>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b40      	cmp	r3, #64	; 0x40
 8007d42:	d008      	beq.n	8007d56 <HAL_TIM_PWM_Init+0xda>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	2b60      	cmp	r3, #96	; 0x60
 8007d4a:	d004      	beq.n	8007d56 <HAL_TIM_PWM_Init+0xda>
 8007d4c:	f240 512a 	movw	r1, #1322	; 0x52a
 8007d50:	4841      	ldr	r0, [pc, #260]	; (8007e58 <HAL_TIM_PWM_Init+0x1dc>)
 8007d52:	f7fb f822 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00e      	beq.n	8007d7c <HAL_TIM_PWM_Init+0x100>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d66:	d009      	beq.n	8007d7c <HAL_TIM_PWM_Init+0x100>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d70:	d004      	beq.n	8007d7c <HAL_TIM_PWM_Init+0x100>
 8007d72:	f240 512b 	movw	r1, #1323	; 0x52b
 8007d76:	4838      	ldr	r0, [pc, #224]	; (8007e58 <HAL_TIM_PWM_Init+0x1dc>)
 8007d78:	f7fb f80f 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d008      	beq.n	8007d96 <HAL_TIM_PWM_Init+0x11a>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	2b80      	cmp	r3, #128	; 0x80
 8007d8a:	d004      	beq.n	8007d96 <HAL_TIM_PWM_Init+0x11a>
 8007d8c:	f240 512c 	movw	r1, #1324	; 0x52c
 8007d90:	4831      	ldr	r0, [pc, #196]	; (8007e58 <HAL_TIM_PWM_Init+0x1dc>)
 8007d92:	f7fb f802 	bl	8002d9a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d106      	bne.n	8007db0 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7fb fad0 	bl	8003350 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f001 fa02 	bl	80091cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	40001000 	.word	0x40001000
 8007e38:	40001400 	.word	0x40001400
 8007e3c:	40010400 	.word	0x40010400
 8007e40:	40014000 	.word	0x40014000
 8007e44:	40014400 	.word	0x40014400
 8007e48:	40014800 	.word	0x40014800
 8007e4c:	40001800 	.word	0x40001800
 8007e50:	40001c00 	.word	0x40001c00
 8007e54:	40002000 	.word	0x40002000
 8007e58:	080106b8 	.word	0x080106b8

08007e5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a84      	ldr	r2, [pc, #528]	; (800807c <HAL_TIM_PWM_Start+0x220>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d10f      	bne.n	8007e90 <HAL_TIM_PWM_Start+0x34>
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 809f 	beq.w	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	f000 809b 	beq.w	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b08      	cmp	r3, #8
 8007e84:	f000 8097 	beq.w	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2b0c      	cmp	r3, #12
 8007e8c:	f000 8093 	beq.w	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e98:	d10e      	bne.n	8007eb8 <HAL_TIM_PWM_Start+0x5c>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 808a 	beq.w	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	f000 8086 	beq.w	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	f000 8082 	beq.w	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b0c      	cmp	r3, #12
 8007eb6:	d07e      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a70      	ldr	r2, [pc, #448]	; (8008080 <HAL_TIM_PWM_Start+0x224>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d10b      	bne.n	8007eda <HAL_TIM_PWM_Start+0x7e>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d076      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	d073      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	d070      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b0c      	cmp	r3, #12
 8007ed8:	d06d      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a69      	ldr	r2, [pc, #420]	; (8008084 <HAL_TIM_PWM_Start+0x228>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d10b      	bne.n	8007efc <HAL_TIM_PWM_Start+0xa0>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d065      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d062      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b08      	cmp	r3, #8
 8007ef4:	d05f      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b0c      	cmp	r3, #12
 8007efa:	d05c      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a61      	ldr	r2, [pc, #388]	; (8008088 <HAL_TIM_PWM_Start+0x22c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d10b      	bne.n	8007f1e <HAL_TIM_PWM_Start+0xc2>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d054      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d051      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d04e      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b0c      	cmp	r3, #12
 8007f1c:	d04b      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a5a      	ldr	r2, [pc, #360]	; (800808c <HAL_TIM_PWM_Start+0x230>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d10b      	bne.n	8007f40 <HAL_TIM_PWM_Start+0xe4>
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d043      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d040      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d03d      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b0c      	cmp	r3, #12
 8007f3e:	d03a      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a52      	ldr	r2, [pc, #328]	; (8008090 <HAL_TIM_PWM_Start+0x234>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d105      	bne.n	8007f56 <HAL_TIM_PWM_Start+0xfa>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d032      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d02f      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a4e      	ldr	r2, [pc, #312]	; (8008094 <HAL_TIM_PWM_Start+0x238>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d102      	bne.n	8007f66 <HAL_TIM_PWM_Start+0x10a>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d027      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a4b      	ldr	r2, [pc, #300]	; (8008098 <HAL_TIM_PWM_Start+0x23c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d102      	bne.n	8007f76 <HAL_TIM_PWM_Start+0x11a>
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d01f      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a48      	ldr	r2, [pc, #288]	; (800809c <HAL_TIM_PWM_Start+0x240>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d105      	bne.n	8007f8c <HAL_TIM_PWM_Start+0x130>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d017      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d014      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a43      	ldr	r2, [pc, #268]	; (80080a0 <HAL_TIM_PWM_Start+0x244>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d102      	bne.n	8007f9c <HAL_TIM_PWM_Start+0x140>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00c      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a40      	ldr	r2, [pc, #256]	; (80080a4 <HAL_TIM_PWM_Start+0x248>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d102      	bne.n	8007fac <HAL_TIM_PWM_Start+0x150>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x15a>
 8007fac:	f240 51af 	movw	r1, #1455	; 0x5af
 8007fb0:	483d      	ldr	r0, [pc, #244]	; (80080a8 <HAL_TIM_PWM_Start+0x24c>)
 8007fb2:	f7fa fef2 	bl	8002d9a <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d109      	bne.n	8007fd0 <HAL_TIM_PWM_Start+0x174>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	bf14      	ite	ne
 8007fc8:	2301      	movne	r3, #1
 8007fca:	2300      	moveq	r3, #0
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	e022      	b.n	8008016 <HAL_TIM_PWM_Start+0x1ba>
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	d109      	bne.n	8007fea <HAL_TIM_PWM_Start+0x18e>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	bf14      	ite	ne
 8007fe2:	2301      	movne	r3, #1
 8007fe4:	2300      	moveq	r3, #0
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	e015      	b.n	8008016 <HAL_TIM_PWM_Start+0x1ba>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b08      	cmp	r3, #8
 8007fee:	d109      	bne.n	8008004 <HAL_TIM_PWM_Start+0x1a8>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	bf14      	ite	ne
 8007ffc:	2301      	movne	r3, #1
 8007ffe:	2300      	moveq	r3, #0
 8008000:	b2db      	uxtb	r3, r3
 8008002:	e008      	b.n	8008016 <HAL_TIM_PWM_Start+0x1ba>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	bf14      	ite	ne
 8008010:	2301      	movne	r3, #1
 8008012:	2300      	moveq	r3, #0
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e094      	b.n	8008148 <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d104      	bne.n	800802e <HAL_TIM_PWM_Start+0x1d2>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800802c:	e013      	b.n	8008056 <HAL_TIM_PWM_Start+0x1fa>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b04      	cmp	r3, #4
 8008032:	d104      	bne.n	800803e <HAL_TIM_PWM_Start+0x1e2>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800803c:	e00b      	b.n	8008056 <HAL_TIM_PWM_Start+0x1fa>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b08      	cmp	r3, #8
 8008042:	d104      	bne.n	800804e <HAL_TIM_PWM_Start+0x1f2>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800804c:	e003      	b.n	8008056 <HAL_TIM_PWM_Start+0x1fa>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2202      	movs	r2, #2
 8008052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2201      	movs	r2, #1
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	4618      	mov	r0, r3
 8008060:	f001 fc28 	bl	80098b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a04      	ldr	r2, [pc, #16]	; (800807c <HAL_TIM_PWM_Start+0x220>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d004      	beq.n	8008078 <HAL_TIM_PWM_Start+0x21c>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a06      	ldr	r2, [pc, #24]	; (800808c <HAL_TIM_PWM_Start+0x230>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d119      	bne.n	80080ac <HAL_TIM_PWM_Start+0x250>
 8008078:	2301      	movs	r3, #1
 800807a:	e018      	b.n	80080ae <HAL_TIM_PWM_Start+0x252>
 800807c:	40010000 	.word	0x40010000
 8008080:	40000400 	.word	0x40000400
 8008084:	40000800 	.word	0x40000800
 8008088:	40000c00 	.word	0x40000c00
 800808c:	40010400 	.word	0x40010400
 8008090:	40014000 	.word	0x40014000
 8008094:	40014400 	.word	0x40014400
 8008098:	40014800 	.word	0x40014800
 800809c:	40001800 	.word	0x40001800
 80080a0:	40001c00 	.word	0x40001c00
 80080a4:	40002000 	.word	0x40002000
 80080a8:	080106b8 	.word	0x080106b8
 80080ac:	2300      	movs	r3, #0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d007      	beq.n	80080c2 <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a22      	ldr	r2, [pc, #136]	; (8008150 <HAL_TIM_PWM_Start+0x2f4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d022      	beq.n	8008112 <HAL_TIM_PWM_Start+0x2b6>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d4:	d01d      	beq.n	8008112 <HAL_TIM_PWM_Start+0x2b6>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1e      	ldr	r2, [pc, #120]	; (8008154 <HAL_TIM_PWM_Start+0x2f8>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d018      	beq.n	8008112 <HAL_TIM_PWM_Start+0x2b6>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1c      	ldr	r2, [pc, #112]	; (8008158 <HAL_TIM_PWM_Start+0x2fc>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d013      	beq.n	8008112 <HAL_TIM_PWM_Start+0x2b6>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1b      	ldr	r2, [pc, #108]	; (800815c <HAL_TIM_PWM_Start+0x300>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00e      	beq.n	8008112 <HAL_TIM_PWM_Start+0x2b6>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a19      	ldr	r2, [pc, #100]	; (8008160 <HAL_TIM_PWM_Start+0x304>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d009      	beq.n	8008112 <HAL_TIM_PWM_Start+0x2b6>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a18      	ldr	r2, [pc, #96]	; (8008164 <HAL_TIM_PWM_Start+0x308>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d004      	beq.n	8008112 <HAL_TIM_PWM_Start+0x2b6>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a16      	ldr	r2, [pc, #88]	; (8008168 <HAL_TIM_PWM_Start+0x30c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d111      	bne.n	8008136 <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f003 0307 	and.w	r3, r3, #7
 800811c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b06      	cmp	r3, #6
 8008122:	d010      	beq.n	8008146 <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f042 0201 	orr.w	r2, r2, #1
 8008132:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008134:	e007      	b.n	8008146 <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f042 0201 	orr.w	r2, r2, #1
 8008144:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	40010000 	.word	0x40010000
 8008154:	40000400 	.word	0x40000400
 8008158:	40000800 	.word	0x40000800
 800815c:	40000c00 	.word	0x40000c00
 8008160:	40010400 	.word	0x40010400
 8008164:	40014000 	.word	0x40014000
 8008168:	40001800 	.word	0x40001800

0800816c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e198      	b.n	80084b2 <HAL_TIM_Encoder_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a7d      	ldr	r2, [pc, #500]	; (800837c <HAL_TIM_Encoder_Init+0x210>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d027      	beq.n	80081da <HAL_TIM_Encoder_Init+0x6e>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008192:	d022      	beq.n	80081da <HAL_TIM_Encoder_Init+0x6e>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a79      	ldr	r2, [pc, #484]	; (8008380 <HAL_TIM_Encoder_Init+0x214>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d01d      	beq.n	80081da <HAL_TIM_Encoder_Init+0x6e>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a78      	ldr	r2, [pc, #480]	; (8008384 <HAL_TIM_Encoder_Init+0x218>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d018      	beq.n	80081da <HAL_TIM_Encoder_Init+0x6e>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a76      	ldr	r2, [pc, #472]	; (8008388 <HAL_TIM_Encoder_Init+0x21c>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d013      	beq.n	80081da <HAL_TIM_Encoder_Init+0x6e>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a75      	ldr	r2, [pc, #468]	; (800838c <HAL_TIM_Encoder_Init+0x220>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00e      	beq.n	80081da <HAL_TIM_Encoder_Init+0x6e>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a73      	ldr	r2, [pc, #460]	; (8008390 <HAL_TIM_Encoder_Init+0x224>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d009      	beq.n	80081da <HAL_TIM_Encoder_Init+0x6e>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a72      	ldr	r2, [pc, #456]	; (8008394 <HAL_TIM_Encoder_Init+0x228>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d004      	beq.n	80081da <HAL_TIM_Encoder_Init+0x6e>
 80081d0:	f640 31d1 	movw	r1, #3025	; 0xbd1
 80081d4:	4870      	ldr	r0, [pc, #448]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 80081d6:	f7fa fde0 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d014      	beq.n	800820c <HAL_TIM_Encoder_Init+0xa0>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b10      	cmp	r3, #16
 80081e8:	d010      	beq.n	800820c <HAL_TIM_Encoder_Init+0xa0>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	d00c      	beq.n	800820c <HAL_TIM_Encoder_Init+0xa0>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	2b40      	cmp	r3, #64	; 0x40
 80081f8:	d008      	beq.n	800820c <HAL_TIM_Encoder_Init+0xa0>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	2b60      	cmp	r3, #96	; 0x60
 8008200:	d004      	beq.n	800820c <HAL_TIM_Encoder_Init+0xa0>
 8008202:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8008206:	4864      	ldr	r0, [pc, #400]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 8008208:	f7fa fdc7 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00e      	beq.n	8008232 <HAL_TIM_Encoder_Init+0xc6>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800821c:	d009      	beq.n	8008232 <HAL_TIM_Encoder_Init+0xc6>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008226:	d004      	beq.n	8008232 <HAL_TIM_Encoder_Init+0xc6>
 8008228:	f640 31d3 	movw	r1, #3027	; 0xbd3
 800822c:	485a      	ldr	r0, [pc, #360]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 800822e:	f7fa fdb4 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d008      	beq.n	800824c <HAL_TIM_Encoder_Init+0xe0>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	2b80      	cmp	r3, #128	; 0x80
 8008240:	d004      	beq.n	800824c <HAL_TIM_Encoder_Init+0xe0>
 8008242:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8008246:	4854      	ldr	r0, [pc, #336]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 8008248:	f7fa fda7 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d00c      	beq.n	800826e <HAL_TIM_Encoder_Init+0x102>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b02      	cmp	r3, #2
 800825a:	d008      	beq.n	800826e <HAL_TIM_Encoder_Init+0x102>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b03      	cmp	r3, #3
 8008262:	d004      	beq.n	800826e <HAL_TIM_Encoder_Init+0x102>
 8008264:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8008268:	484b      	ldr	r0, [pc, #300]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 800826a:	f7fa fd96 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d00c      	beq.n	8008290 <HAL_TIM_Encoder_Init+0x124>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	2b02      	cmp	r3, #2
 800827c:	d008      	beq.n	8008290 <HAL_TIM_Encoder_Init+0x124>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	2b03      	cmp	r3, #3
 8008284:	d004      	beq.n	8008290 <HAL_TIM_Encoder_Init+0x124>
 8008286:	f640 31d6 	movw	r1, #3030	; 0xbd6
 800828a:	4843      	ldr	r0, [pc, #268]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 800828c:	f7fa fd85 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d00c      	beq.n	80082b2 <HAL_TIM_Encoder_Init+0x146>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d008      	beq.n	80082b2 <HAL_TIM_Encoder_Init+0x146>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d004      	beq.n	80082b2 <HAL_TIM_Encoder_Init+0x146>
 80082a8:	f640 31d7 	movw	r1, #3031	; 0xbd7
 80082ac:	483a      	ldr	r0, [pc, #232]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 80082ae:	f7fa fd74 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d008      	beq.n	80082cc <HAL_TIM_Encoder_Init+0x160>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d004      	beq.n	80082cc <HAL_TIM_Encoder_Init+0x160>
 80082c2:	f640 31d8 	movw	r1, #3032	; 0xbd8
 80082c6:	4834      	ldr	r0, [pc, #208]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 80082c8:	f7fa fd67 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d008      	beq.n	80082e6 <HAL_TIM_Encoder_Init+0x17a>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d004      	beq.n	80082e6 <HAL_TIM_Encoder_Init+0x17a>
 80082dc:	f640 31d9 	movw	r1, #3033	; 0xbd9
 80082e0:	482d      	ldr	r0, [pc, #180]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 80082e2:	f7fa fd5a 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d010      	beq.n	8008310 <HAL_TIM_Encoder_Init+0x1a4>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	d00c      	beq.n	8008310 <HAL_TIM_Encoder_Init+0x1a4>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	d008      	beq.n	8008310 <HAL_TIM_Encoder_Init+0x1a4>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	2b0c      	cmp	r3, #12
 8008304:	d004      	beq.n	8008310 <HAL_TIM_Encoder_Init+0x1a4>
 8008306:	f640 31da 	movw	r1, #3034	; 0xbda
 800830a:	4823      	ldr	r0, [pc, #140]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 800830c:	f7fa fd45 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d010      	beq.n	800833a <HAL_TIM_Encoder_Init+0x1ce>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	2b04      	cmp	r3, #4
 800831e:	d00c      	beq.n	800833a <HAL_TIM_Encoder_Init+0x1ce>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	2b08      	cmp	r3, #8
 8008326:	d008      	beq.n	800833a <HAL_TIM_Encoder_Init+0x1ce>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	2b0c      	cmp	r3, #12
 800832e:	d004      	beq.n	800833a <HAL_TIM_Encoder_Init+0x1ce>
 8008330:	f640 31db 	movw	r1, #3035	; 0xbdb
 8008334:	4818      	ldr	r0, [pc, #96]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 8008336:	f7fa fd30 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b0f      	cmp	r3, #15
 8008340:	d904      	bls.n	800834c <HAL_TIM_Encoder_Init+0x1e0>
 8008342:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8008346:	4814      	ldr	r0, [pc, #80]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 8008348:	f7fa fd27 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	2b0f      	cmp	r3, #15
 8008352:	d904      	bls.n	800835e <HAL_TIM_Encoder_Init+0x1f2>
 8008354:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8008358:	480f      	ldr	r0, [pc, #60]	; (8008398 <HAL_TIM_Encoder_Init+0x22c>)
 800835a:	f7fa fd1e 	bl	8002d9a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d118      	bne.n	800839c <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7fb f814 	bl	80033a0 <HAL_TIM_Encoder_MspInit>
 8008378:	e010      	b.n	800839c <HAL_TIM_Encoder_Init+0x230>
 800837a:	bf00      	nop
 800837c:	40010000 	.word	0x40010000
 8008380:	40000400 	.word	0x40000400
 8008384:	40000800 	.word	0x40000800
 8008388:	40000c00 	.word	0x40000c00
 800838c:	40010400 	.word	0x40010400
 8008390:	40014000 	.word	0x40014000
 8008394:	40001800 	.word	0x40001800
 8008398:	080106b8 	.word	0x080106b8
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6812      	ldr	r2, [r2, #0]
 80083ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083b2:	f023 0307 	bic.w	r3, r3, #7
 80083b6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3304      	adds	r3, #4
 80083c0:	4619      	mov	r1, r3
 80083c2:	4610      	mov	r0, r2
 80083c4:	f000 ff02 	bl	80091cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f0:	f023 0303 	bic.w	r3, r3, #3
 80083f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	689a      	ldr	r2, [r3, #8]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	021b      	lsls	r3, r3, #8
 8008400:	4313      	orrs	r3, r2
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4313      	orrs	r3, r2
 8008406:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800840e:	f023 030c 	bic.w	r3, r3, #12
 8008412:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800841a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800841e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	021b      	lsls	r3, r3, #8
 800842a:	4313      	orrs	r3, r2
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	4313      	orrs	r3, r2
 8008430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	011a      	lsls	r2, r3, #4
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	031b      	lsls	r3, r3, #12
 800843e:	4313      	orrs	r3, r2
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4313      	orrs	r3, r2
 8008444:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800844c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008454:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	4313      	orrs	r3, r2
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop

080084bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d122      	bne.n	8008518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d11b      	bne.n	8008518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0202 	mvn.w	r2, #2
 80084e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fe46 	bl	8009190 <HAL_TIM_IC_CaptureCallback>
 8008504:	e005      	b.n	8008512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fe38 	bl	800917c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fe49 	bl	80091a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f003 0304 	and.w	r3, r3, #4
 8008522:	2b04      	cmp	r3, #4
 8008524:	d122      	bne.n	800856c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b04      	cmp	r3, #4
 8008532:	d11b      	bne.n	800856c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f06f 0204 	mvn.w	r2, #4
 800853c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2202      	movs	r2, #2
 8008542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fe1c 	bl	8009190 <HAL_TIM_IC_CaptureCallback>
 8008558:	e005      	b.n	8008566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fe0e 	bl	800917c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fe1f 	bl	80091a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0308 	and.w	r3, r3, #8
 8008576:	2b08      	cmp	r3, #8
 8008578:	d122      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b08      	cmp	r3, #8
 8008586:	d11b      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f06f 0208 	mvn.w	r2, #8
 8008590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2204      	movs	r2, #4
 8008596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f003 0303 	and.w	r3, r3, #3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fdf2 	bl	8009190 <HAL_TIM_IC_CaptureCallback>
 80085ac:	e005      	b.n	80085ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fde4 	bl	800917c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fdf5 	bl	80091a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0310 	and.w	r3, r3, #16
 80085ca:	2b10      	cmp	r3, #16
 80085cc:	d122      	bne.n	8008614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	2b10      	cmp	r3, #16
 80085da:	d11b      	bne.n	8008614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0210 	mvn.w	r2, #16
 80085e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2208      	movs	r2, #8
 80085ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fdc8 	bl	8009190 <HAL_TIM_IC_CaptureCallback>
 8008600:	e005      	b.n	800860e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fdba 	bl	800917c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fdcb 	bl	80091a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b01      	cmp	r3, #1
 8008620:	d10e      	bne.n	8008640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b01      	cmp	r3, #1
 800862e:	d107      	bne.n	8008640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f06f 0201 	mvn.w	r2, #1
 8008638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7f8 fde8 	bl	8001210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864a:	2b80      	cmp	r3, #128	; 0x80
 800864c:	d10e      	bne.n	800866c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008658:	2b80      	cmp	r3, #128	; 0x80
 800865a:	d107      	bne.n	800866c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 fb5c 	bl	8009d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008676:	2b40      	cmp	r3, #64	; 0x40
 8008678:	d10e      	bne.n	8008698 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008684:	2b40      	cmp	r3, #64	; 0x40
 8008686:	d107      	bne.n	8008698 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fd90 	bl	80091b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d10e      	bne.n	80086c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f003 0320 	and.w	r3, r3, #32
 80086b0:	2b20      	cmp	r3, #32
 80086b2:	d107      	bne.n	80086c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f06f 0220 	mvn.w	r2, #32
 80086bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fb26 	bl	8009d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d010      	beq.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x38>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b04      	cmp	r3, #4
 80086e6:	d00d      	beq.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x38>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b08      	cmp	r3, #8
 80086ec:	d00a      	beq.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x38>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b0c      	cmp	r3, #12
 80086f2:	d007      	beq.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x38>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b3c      	cmp	r3, #60	; 0x3c
 80086f8:	d004      	beq.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x38>
 80086fa:	f241 0177 	movw	r1, #4215	; 0x1077
 80086fe:	4883      	ldr	r0, [pc, #524]	; (800890c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008700:	f7fa fb4b 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b60      	cmp	r3, #96	; 0x60
 800870a:	d008      	beq.n	800871e <HAL_TIM_PWM_ConfigChannel+0x52>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b70      	cmp	r3, #112	; 0x70
 8008712:	d004      	beq.n	800871e <HAL_TIM_PWM_ConfigChannel+0x52>
 8008714:	f241 0178 	movw	r1, #4216	; 0x1078
 8008718:	487c      	ldr	r0, [pc, #496]	; (800890c <HAL_TIM_PWM_ConfigChannel+0x240>)
 800871a:	f7fa fb3e 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d008      	beq.n	8008738 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	2b02      	cmp	r3, #2
 800872c:	d004      	beq.n	8008738 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800872e:	f241 0179 	movw	r1, #4217	; 0x1079
 8008732:	4876      	ldr	r0, [pc, #472]	; (800890c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008734:	f7fa fb31 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d008      	beq.n	8008752 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	2b04      	cmp	r3, #4
 8008746:	d004      	beq.n	8008752 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008748:	f241 017a 	movw	r1, #4218	; 0x107a
 800874c:	486f      	ldr	r0, [pc, #444]	; (800890c <HAL_TIM_PWM_ConfigChannel+0x240>)
 800874e:	f7fa fb24 	bl	8002d9a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008758:	2b01      	cmp	r3, #1
 800875a:	d101      	bne.n	8008760 <HAL_TIM_PWM_ConfigChannel+0x94>
 800875c:	2302      	movs	r3, #2
 800875e:	e17c      	b.n	8008a5a <HAL_TIM_PWM_ConfigChannel+0x38e>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b0c      	cmp	r3, #12
 800876c:	f200 816d 	bhi.w	8008a4a <HAL_TIM_PWM_ConfigChannel+0x37e>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	080087ad 	.word	0x080087ad
 800877c:	08008a4b 	.word	0x08008a4b
 8008780:	08008a4b 	.word	0x08008a4b
 8008784:	08008a4b 	.word	0x08008a4b
 8008788:	0800886f 	.word	0x0800886f
 800878c:	08008a4b 	.word	0x08008a4b
 8008790:	08008a4b 	.word	0x08008a4b
 8008794:	08008a4b 	.word	0x08008a4b
 8008798:	0800893d 	.word	0x0800893d
 800879c:	08008a4b 	.word	0x08008a4b
 80087a0:	08008a4b 	.word	0x08008a4b
 80087a4:	08008a4b 	.word	0x08008a4b
 80087a8:	080089c3 	.word	0x080089c3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a57      	ldr	r2, [pc, #348]	; (8008910 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d03b      	beq.n	800882e <HAL_TIM_PWM_ConfigChannel+0x162>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087be:	d036      	beq.n	800882e <HAL_TIM_PWM_ConfigChannel+0x162>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a53      	ldr	r2, [pc, #332]	; (8008914 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d031      	beq.n	800882e <HAL_TIM_PWM_ConfigChannel+0x162>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a52      	ldr	r2, [pc, #328]	; (8008918 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d02c      	beq.n	800882e <HAL_TIM_PWM_ConfigChannel+0x162>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a50      	ldr	r2, [pc, #320]	; (800891c <HAL_TIM_PWM_ConfigChannel+0x250>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d027      	beq.n	800882e <HAL_TIM_PWM_ConfigChannel+0x162>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a4f      	ldr	r2, [pc, #316]	; (8008920 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d022      	beq.n	800882e <HAL_TIM_PWM_ConfigChannel+0x162>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a4d      	ldr	r2, [pc, #308]	; (8008924 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d01d      	beq.n	800882e <HAL_TIM_PWM_ConfigChannel+0x162>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a4c      	ldr	r2, [pc, #304]	; (8008928 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d018      	beq.n	800882e <HAL_TIM_PWM_ConfigChannel+0x162>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a4a      	ldr	r2, [pc, #296]	; (800892c <HAL_TIM_PWM_ConfigChannel+0x260>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d013      	beq.n	800882e <HAL_TIM_PWM_ConfigChannel+0x162>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a49      	ldr	r2, [pc, #292]	; (8008930 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d00e      	beq.n	800882e <HAL_TIM_PWM_ConfigChannel+0x162>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a47      	ldr	r2, [pc, #284]	; (8008934 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d009      	beq.n	800882e <HAL_TIM_PWM_ConfigChannel+0x162>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a46      	ldr	r2, [pc, #280]	; (8008938 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d004      	beq.n	800882e <HAL_TIM_PWM_ConfigChannel+0x162>
 8008824:	f241 0184 	movw	r1, #4228	; 0x1084
 8008828:	4838      	ldr	r0, [pc, #224]	; (800890c <HAL_TIM_PWM_ConfigChannel+0x240>)
 800882a:	f7fa fab6 	bl	8002d9a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	4618      	mov	r0, r3
 8008836:	f000 fd69 	bl	800930c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	699a      	ldr	r2, [r3, #24]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f042 0208 	orr.w	r2, r2, #8
 8008848:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	699a      	ldr	r2, [r3, #24]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0204 	bic.w	r2, r2, #4
 8008858:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6999      	ldr	r1, [r3, #24]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	619a      	str	r2, [r3, #24]
      break;
 800886c:	e0f0      	b.n	8008a50 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a27      	ldr	r2, [pc, #156]	; (8008910 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d027      	beq.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008880:	d022      	beq.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a23      	ldr	r2, [pc, #140]	; (8008914 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d01d      	beq.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a21      	ldr	r2, [pc, #132]	; (8008918 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d018      	beq.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a20      	ldr	r2, [pc, #128]	; (800891c <HAL_TIM_PWM_ConfigChannel+0x250>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d013      	beq.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a1e      	ldr	r2, [pc, #120]	; (8008920 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00e      	beq.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a1d      	ldr	r2, [pc, #116]	; (8008924 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d009      	beq.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a1d      	ldr	r2, [pc, #116]	; (8008930 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d004      	beq.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80088be:	f241 0195 	movw	r1, #4245	; 0x1095
 80088c2:	4812      	ldr	r0, [pc, #72]	; (800890c <HAL_TIM_PWM_ConfigChannel+0x240>)
 80088c4:	f7fa fa69 	bl	8002d9a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68b9      	ldr	r1, [r7, #8]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fdb6 	bl	8009440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699a      	ldr	r2, [r3, #24]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6999      	ldr	r1, [r3, #24]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	021a      	lsls	r2, r3, #8
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	619a      	str	r2, [r3, #24]
      break;
 8008908:	e0a2      	b.n	8008a50 <HAL_TIM_PWM_ConfigChannel+0x384>
 800890a:	bf00      	nop
 800890c:	080106b8 	.word	0x080106b8
 8008910:	40010000 	.word	0x40010000
 8008914:	40000400 	.word	0x40000400
 8008918:	40000800 	.word	0x40000800
 800891c:	40000c00 	.word	0x40000c00
 8008920:	40010400 	.word	0x40010400
 8008924:	40014000 	.word	0x40014000
 8008928:	40014400 	.word	0x40014400
 800892c:	40014800 	.word	0x40014800
 8008930:	40001800 	.word	0x40001800
 8008934:	40001c00 	.word	0x40001c00
 8008938:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a48      	ldr	r2, [pc, #288]	; (8008a64 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d01d      	beq.n	8008982 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800894e:	d018      	beq.n	8008982 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a44      	ldr	r2, [pc, #272]	; (8008a68 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d013      	beq.n	8008982 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a43      	ldr	r2, [pc, #268]	; (8008a6c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d00e      	beq.n	8008982 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a41      	ldr	r2, [pc, #260]	; (8008a70 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d009      	beq.n	8008982 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a40      	ldr	r2, [pc, #256]	; (8008a74 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d004      	beq.n	8008982 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008978:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800897c:	483e      	ldr	r0, [pc, #248]	; (8008a78 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800897e:	f7fa fa0c 	bl	8002d9a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fdf7 	bl	800957c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69da      	ldr	r2, [r3, #28]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f042 0208 	orr.w	r2, r2, #8
 800899c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69da      	ldr	r2, [r3, #28]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0204 	bic.w	r2, r2, #4
 80089ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69d9      	ldr	r1, [r3, #28]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	61da      	str	r2, [r3, #28]
      break;
 80089c0:	e046      	b.n	8008a50 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a27      	ldr	r2, [pc, #156]	; (8008a64 <HAL_TIM_PWM_ConfigChannel+0x398>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d01d      	beq.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d4:	d018      	beq.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a23      	ldr	r2, [pc, #140]	; (8008a68 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d013      	beq.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a21      	ldr	r2, [pc, #132]	; (8008a6c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d00e      	beq.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a20      	ldr	r2, [pc, #128]	; (8008a70 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d009      	beq.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a1e      	ldr	r2, [pc, #120]	; (8008a74 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d004      	beq.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80089fe:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8008a02:	481d      	ldr	r0, [pc, #116]	; (8008a78 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8008a04:	f7fa f9c9 	bl	8002d9a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68b9      	ldr	r1, [r7, #8]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 fe52 	bl	80096b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69da      	ldr	r2, [r3, #28]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	69da      	ldr	r2, [r3, #28]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	69d9      	ldr	r1, [r3, #28]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	021a      	lsls	r2, r3, #8
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	61da      	str	r2, [r3, #28]
      break;
 8008a48:	e002      	b.n	8008a50 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	40010000 	.word	0x40010000
 8008a68:	40000400 	.word	0x40000400
 8008a6c:	40000800 	.word	0x40000800
 8008a70:	40000c00 	.word	0x40000c00
 8008a74:	40010400 	.word	0x40010400
 8008a78:	080106b8 	.word	0x080106b8

08008a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d101      	bne.n	8008a98 <HAL_TIM_ConfigClockSource+0x1c>
 8008a94:	2302      	movs	r3, #2
 8008a96:	e35c      	b.n	8009152 <HAL_TIM_ConfigClockSource+0x6d6>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab0:	d029      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x8a>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aba:	d024      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x8a>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d020      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x8a>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b10      	cmp	r3, #16
 8008aca:	d01c      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x8a>
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b20      	cmp	r3, #32
 8008ad2:	d018      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x8a>
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b30      	cmp	r3, #48	; 0x30
 8008ada:	d014      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x8a>
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b40      	cmp	r3, #64	; 0x40
 8008ae2:	d010      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x8a>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b50      	cmp	r3, #80	; 0x50
 8008aea:	d00c      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x8a>
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b60      	cmp	r3, #96	; 0x60
 8008af2:	d008      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x8a>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b70      	cmp	r3, #112	; 0x70
 8008afa:	d004      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x8a>
 8008afc:	f241 41bb 	movw	r1, #5307	; 0x14bb
 8008b00:	4893      	ldr	r0, [pc, #588]	; (8008d50 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008b02:	f7fa f94a 	bl	8002d9a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b1c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b2e:	f000 812b 	beq.w	8008d88 <HAL_TIM_ConfigClockSource+0x30c>
 8008b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b36:	f200 82ff 	bhi.w	8009138 <HAL_TIM_ConfigClockSource+0x6bc>
 8008b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b3e:	d02e      	beq.n	8008b9e <HAL_TIM_ConfigClockSource+0x122>
 8008b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b44:	f200 82f8 	bhi.w	8009138 <HAL_TIM_ConfigClockSource+0x6bc>
 8008b48:	2b70      	cmp	r3, #112	; 0x70
 8008b4a:	f000 8082 	beq.w	8008c52 <HAL_TIM_ConfigClockSource+0x1d6>
 8008b4e:	2b70      	cmp	r3, #112	; 0x70
 8008b50:	f200 82f2 	bhi.w	8009138 <HAL_TIM_ConfigClockSource+0x6bc>
 8008b54:	2b60      	cmp	r3, #96	; 0x60
 8008b56:	f000 81e8 	beq.w	8008f2a <HAL_TIM_ConfigClockSource+0x4ae>
 8008b5a:	2b60      	cmp	r3, #96	; 0x60
 8008b5c:	f200 82ec 	bhi.w	8009138 <HAL_TIM_ConfigClockSource+0x6bc>
 8008b60:	2b50      	cmp	r3, #80	; 0x50
 8008b62:	f000 8182 	beq.w	8008e6a <HAL_TIM_ConfigClockSource+0x3ee>
 8008b66:	2b50      	cmp	r3, #80	; 0x50
 8008b68:	f200 82e6 	bhi.w	8009138 <HAL_TIM_ConfigClockSource+0x6bc>
 8008b6c:	2b40      	cmp	r3, #64	; 0x40
 8008b6e:	f000 824d 	beq.w	800900c <HAL_TIM_ConfigClockSource+0x590>
 8008b72:	2b40      	cmp	r3, #64	; 0x40
 8008b74:	f200 82e0 	bhi.w	8009138 <HAL_TIM_ConfigClockSource+0x6bc>
 8008b78:	2b30      	cmp	r3, #48	; 0x30
 8008b7a:	f000 82a7 	beq.w	80090cc <HAL_TIM_ConfigClockSource+0x650>
 8008b7e:	2b30      	cmp	r3, #48	; 0x30
 8008b80:	f200 82da 	bhi.w	8009138 <HAL_TIM_ConfigClockSource+0x6bc>
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	f000 82a1 	beq.w	80090cc <HAL_TIM_ConfigClockSource+0x650>
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	f200 82d4 	bhi.w	8009138 <HAL_TIM_ConfigClockSource+0x6bc>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 829b 	beq.w	80090cc <HAL_TIM_ConfigClockSource+0x650>
 8008b96:	2b10      	cmp	r3, #16
 8008b98:	f000 8298 	beq.w	80090cc <HAL_TIM_ConfigClockSource+0x650>
 8008b9c:	e2cc      	b.n	8009138 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a6c      	ldr	r2, [pc, #432]	; (8008d54 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	f000 82ca 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb2:	f000 82c4 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a67      	ldr	r2, [pc, #412]	; (8008d58 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	f000 82be 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a65      	ldr	r2, [pc, #404]	; (8008d5c <HAL_TIM_ConfigClockSource+0x2e0>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	f000 82b8 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a63      	ldr	r2, [pc, #396]	; (8008d60 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	f000 82b2 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a61      	ldr	r2, [pc, #388]	; (8008d64 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	f000 82ac 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a5f      	ldr	r2, [pc, #380]	; (8008d68 <HAL_TIM_ConfigClockSource+0x2ec>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	f000 82a6 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a5d      	ldr	r2, [pc, #372]	; (8008d6c <HAL_TIM_ConfigClockSource+0x2f0>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	f000 82a0 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a5b      	ldr	r2, [pc, #364]	; (8008d70 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	f000 829a 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a59      	ldr	r2, [pc, #356]	; (8008d74 <HAL_TIM_ConfigClockSource+0x2f8>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	f000 8294 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a57      	ldr	r2, [pc, #348]	; (8008d78 <HAL_TIM_ConfigClockSource+0x2fc>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	f000 828e 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a55      	ldr	r2, [pc, #340]	; (8008d7c <HAL_TIM_ConfigClockSource+0x300>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	f000 8288 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a53      	ldr	r2, [pc, #332]	; (8008d80 <HAL_TIM_ConfigClockSource+0x304>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	f000 8282 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a51      	ldr	r2, [pc, #324]	; (8008d84 <HAL_TIM_ConfigClockSource+0x308>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	f000 827c 	beq.w	800913e <HAL_TIM_ConfigClockSource+0x6c2>
 8008c46:	f241 41c7 	movw	r1, #5319	; 0x14c7
 8008c4a:	4841      	ldr	r0, [pc, #260]	; (8008d50 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008c4c:	f7fa f8a5 	bl	8002d9a <assert_failed>
      break;
 8008c50:	e275      	b.n	800913e <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a3f      	ldr	r2, [pc, #252]	; (8008d54 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d027      	beq.n	8008cac <HAL_TIM_ConfigClockSource+0x230>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c64:	d022      	beq.n	8008cac <HAL_TIM_ConfigClockSource+0x230>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a3b      	ldr	r2, [pc, #236]	; (8008d58 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d01d      	beq.n	8008cac <HAL_TIM_ConfigClockSource+0x230>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a39      	ldr	r2, [pc, #228]	; (8008d5c <HAL_TIM_ConfigClockSource+0x2e0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d018      	beq.n	8008cac <HAL_TIM_ConfigClockSource+0x230>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a38      	ldr	r2, [pc, #224]	; (8008d60 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d013      	beq.n	8008cac <HAL_TIM_ConfigClockSource+0x230>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a38      	ldr	r2, [pc, #224]	; (8008d6c <HAL_TIM_ConfigClockSource+0x2f0>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00e      	beq.n	8008cac <HAL_TIM_ConfigClockSource+0x230>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a37      	ldr	r2, [pc, #220]	; (8008d70 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d009      	beq.n	8008cac <HAL_TIM_ConfigClockSource+0x230>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a37      	ldr	r2, [pc, #220]	; (8008d7c <HAL_TIM_ConfigClockSource+0x300>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d004      	beq.n	8008cac <HAL_TIM_ConfigClockSource+0x230>
 8008ca2:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8008ca6:	482a      	ldr	r0, [pc, #168]	; (8008d50 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008ca8:	f7fa f877 	bl	8002d9a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d013      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x260>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cbc:	d00e      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x260>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc6:	d009      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x260>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cd0:	d004      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x260>
 8008cd2:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8008cd6:	481e      	ldr	r0, [pc, #120]	; (8008d50 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008cd8:	f7fa f85f 	bl	8002d9a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce4:	d014      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x294>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d010      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x294>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00c      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x294>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d008      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x294>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	2b0a      	cmp	r3, #10
 8008d04:	d004      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x294>
 8008d06:	f241 41d2 	movw	r1, #5330	; 0x14d2
 8008d0a:	4811      	ldr	r0, [pc, #68]	; (8008d50 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008d0c:	f7fa f845 	bl	8002d9a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	2b0f      	cmp	r3, #15
 8008d16:	d904      	bls.n	8008d22 <HAL_TIM_ConfigClockSource+0x2a6>
 8008d18:	f241 41d3 	movw	r1, #5331	; 0x14d3
 8008d1c:	480c      	ldr	r0, [pc, #48]	; (8008d50 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008d1e:	f7fa f83c 	bl	8002d9a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6818      	ldr	r0, [r3, #0]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	6899      	ldr	r1, [r3, #8]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f000 fd9f 	bl	8009874 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	609a      	str	r2, [r3, #8]
      break;
 8008d4e:	e1f7      	b.n	8009140 <HAL_TIM_ConfigClockSource+0x6c4>
 8008d50:	080106b8 	.word	0x080106b8
 8008d54:	40010000 	.word	0x40010000
 8008d58:	40000400 	.word	0x40000400
 8008d5c:	40000800 	.word	0x40000800
 8008d60:	40000c00 	.word	0x40000c00
 8008d64:	40001000 	.word	0x40001000
 8008d68:	40001400 	.word	0x40001400
 8008d6c:	40010400 	.word	0x40010400
 8008d70:	40014000 	.word	0x40014000
 8008d74:	40014400 	.word	0x40014400
 8008d78:	40014800 	.word	0x40014800
 8008d7c:	40001800 	.word	0x40001800
 8008d80:	40001c00 	.word	0x40001c00
 8008d84:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a97      	ldr	r2, [pc, #604]	; (8008fec <HAL_TIM_ConfigClockSource+0x570>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d01d      	beq.n	8008dce <HAL_TIM_ConfigClockSource+0x352>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d9a:	d018      	beq.n	8008dce <HAL_TIM_ConfigClockSource+0x352>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a93      	ldr	r2, [pc, #588]	; (8008ff0 <HAL_TIM_ConfigClockSource+0x574>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d013      	beq.n	8008dce <HAL_TIM_ConfigClockSource+0x352>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a92      	ldr	r2, [pc, #584]	; (8008ff4 <HAL_TIM_ConfigClockSource+0x578>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d00e      	beq.n	8008dce <HAL_TIM_ConfigClockSource+0x352>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a90      	ldr	r2, [pc, #576]	; (8008ff8 <HAL_TIM_ConfigClockSource+0x57c>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d009      	beq.n	8008dce <HAL_TIM_ConfigClockSource+0x352>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a8f      	ldr	r2, [pc, #572]	; (8008ffc <HAL_TIM_ConfigClockSource+0x580>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d004      	beq.n	8008dce <HAL_TIM_ConfigClockSource+0x352>
 8008dc4:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8008dc8:	488d      	ldr	r0, [pc, #564]	; (8009000 <HAL_TIM_ConfigClockSource+0x584>)
 8008dca:	f7f9 ffe6 	bl	8002d9a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d013      	beq.n	8008dfe <HAL_TIM_ConfigClockSource+0x382>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dde:	d00e      	beq.n	8008dfe <HAL_TIM_ConfigClockSource+0x382>
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de8:	d009      	beq.n	8008dfe <HAL_TIM_ConfigClockSource+0x382>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008df2:	d004      	beq.n	8008dfe <HAL_TIM_ConfigClockSource+0x382>
 8008df4:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8008df8:	4881      	ldr	r0, [pc, #516]	; (8009000 <HAL_TIM_ConfigClockSource+0x584>)
 8008dfa:	f7f9 ffce 	bl	8002d9a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e06:	d014      	beq.n	8008e32 <HAL_TIM_ConfigClockSource+0x3b6>
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d010      	beq.n	8008e32 <HAL_TIM_ConfigClockSource+0x3b6>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00c      	beq.n	8008e32 <HAL_TIM_ConfigClockSource+0x3b6>
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d008      	beq.n	8008e32 <HAL_TIM_ConfigClockSource+0x3b6>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	2b0a      	cmp	r3, #10
 8008e26:	d004      	beq.n	8008e32 <HAL_TIM_ConfigClockSource+0x3b6>
 8008e28:	f241 41ea 	movw	r1, #5354	; 0x14ea
 8008e2c:	4874      	ldr	r0, [pc, #464]	; (8009000 <HAL_TIM_ConfigClockSource+0x584>)
 8008e2e:	f7f9 ffb4 	bl	8002d9a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	2b0f      	cmp	r3, #15
 8008e38:	d904      	bls.n	8008e44 <HAL_TIM_ConfigClockSource+0x3c8>
 8008e3a:	f241 41eb 	movw	r1, #5355	; 0x14eb
 8008e3e:	4870      	ldr	r0, [pc, #448]	; (8009000 <HAL_TIM_ConfigClockSource+0x584>)
 8008e40:	f7f9 ffab 	bl	8002d9a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	6899      	ldr	r1, [r3, #8]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f000 fd0e 	bl	8009874 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689a      	ldr	r2, [r3, #8]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e66:	609a      	str	r2, [r3, #8]
      break;
 8008e68:	e16a      	b.n	8009140 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a5f      	ldr	r2, [pc, #380]	; (8008fec <HAL_TIM_ConfigClockSource+0x570>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d027      	beq.n	8008ec4 <HAL_TIM_ConfigClockSource+0x448>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7c:	d022      	beq.n	8008ec4 <HAL_TIM_ConfigClockSource+0x448>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a5b      	ldr	r2, [pc, #364]	; (8008ff0 <HAL_TIM_ConfigClockSource+0x574>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d01d      	beq.n	8008ec4 <HAL_TIM_ConfigClockSource+0x448>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a59      	ldr	r2, [pc, #356]	; (8008ff4 <HAL_TIM_ConfigClockSource+0x578>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d018      	beq.n	8008ec4 <HAL_TIM_ConfigClockSource+0x448>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a58      	ldr	r2, [pc, #352]	; (8008ff8 <HAL_TIM_ConfigClockSource+0x57c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d013      	beq.n	8008ec4 <HAL_TIM_ConfigClockSource+0x448>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a56      	ldr	r2, [pc, #344]	; (8008ffc <HAL_TIM_ConfigClockSource+0x580>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d00e      	beq.n	8008ec4 <HAL_TIM_ConfigClockSource+0x448>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a56      	ldr	r2, [pc, #344]	; (8009004 <HAL_TIM_ConfigClockSource+0x588>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d009      	beq.n	8008ec4 <HAL_TIM_ConfigClockSource+0x448>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a54      	ldr	r2, [pc, #336]	; (8009008 <HAL_TIM_ConfigClockSource+0x58c>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d004      	beq.n	8008ec4 <HAL_TIM_ConfigClockSource+0x448>
 8008eba:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8008ebe:	4850      	ldr	r0, [pc, #320]	; (8009000 <HAL_TIM_ConfigClockSource+0x584>)
 8008ec0:	f7f9 ff6b 	bl	8002d9a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ecc:	d014      	beq.n	8008ef8 <HAL_TIM_ConfigClockSource+0x47c>
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d010      	beq.n	8008ef8 <HAL_TIM_ConfigClockSource+0x47c>
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00c      	beq.n	8008ef8 <HAL_TIM_ConfigClockSource+0x47c>
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d008      	beq.n	8008ef8 <HAL_TIM_ConfigClockSource+0x47c>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	2b0a      	cmp	r3, #10
 8008eec:	d004      	beq.n	8008ef8 <HAL_TIM_ConfigClockSource+0x47c>
 8008eee:	f241 41fd 	movw	r1, #5373	; 0x14fd
 8008ef2:	4843      	ldr	r0, [pc, #268]	; (8009000 <HAL_TIM_ConfigClockSource+0x584>)
 8008ef4:	f7f9 ff51 	bl	8002d9a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	2b0f      	cmp	r3, #15
 8008efe:	d904      	bls.n	8008f0a <HAL_TIM_ConfigClockSource+0x48e>
 8008f00:	f241 41fe 	movw	r1, #5374	; 0x14fe
 8008f04:	483e      	ldr	r0, [pc, #248]	; (8009000 <HAL_TIM_ConfigClockSource+0x584>)
 8008f06:	f7f9 ff48 	bl	8002d9a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6818      	ldr	r0, [r3, #0]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	6859      	ldr	r1, [r3, #4]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	461a      	mov	r2, r3
 8008f18:	f000 fc32 	bl	8009780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2150      	movs	r1, #80	; 0x50
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fc8b 	bl	800983e <TIM_ITRx_SetConfig>
      break;
 8008f28:	e10a      	b.n	8009140 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a2f      	ldr	r2, [pc, #188]	; (8008fec <HAL_TIM_ConfigClockSource+0x570>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d027      	beq.n	8008f84 <HAL_TIM_ConfigClockSource+0x508>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f3c:	d022      	beq.n	8008f84 <HAL_TIM_ConfigClockSource+0x508>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a2b      	ldr	r2, [pc, #172]	; (8008ff0 <HAL_TIM_ConfigClockSource+0x574>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d01d      	beq.n	8008f84 <HAL_TIM_ConfigClockSource+0x508>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a29      	ldr	r2, [pc, #164]	; (8008ff4 <HAL_TIM_ConfigClockSource+0x578>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d018      	beq.n	8008f84 <HAL_TIM_ConfigClockSource+0x508>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a28      	ldr	r2, [pc, #160]	; (8008ff8 <HAL_TIM_ConfigClockSource+0x57c>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d013      	beq.n	8008f84 <HAL_TIM_ConfigClockSource+0x508>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a26      	ldr	r2, [pc, #152]	; (8008ffc <HAL_TIM_ConfigClockSource+0x580>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d00e      	beq.n	8008f84 <HAL_TIM_ConfigClockSource+0x508>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a26      	ldr	r2, [pc, #152]	; (8009004 <HAL_TIM_ConfigClockSource+0x588>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d009      	beq.n	8008f84 <HAL_TIM_ConfigClockSource+0x508>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a24      	ldr	r2, [pc, #144]	; (8009008 <HAL_TIM_ConfigClockSource+0x58c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d004      	beq.n	8008f84 <HAL_TIM_ConfigClockSource+0x508>
 8008f7a:	f241 510a 	movw	r1, #5386	; 0x150a
 8008f7e:	4820      	ldr	r0, [pc, #128]	; (8009000 <HAL_TIM_ConfigClockSource+0x584>)
 8008f80:	f7f9 ff0b 	bl	8002d9a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f8c:	d014      	beq.n	8008fb8 <HAL_TIM_ConfigClockSource+0x53c>
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d010      	beq.n	8008fb8 <HAL_TIM_ConfigClockSource+0x53c>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00c      	beq.n	8008fb8 <HAL_TIM_ConfigClockSource+0x53c>
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d008      	beq.n	8008fb8 <HAL_TIM_ConfigClockSource+0x53c>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	2b0a      	cmp	r3, #10
 8008fac:	d004      	beq.n	8008fb8 <HAL_TIM_ConfigClockSource+0x53c>
 8008fae:	f241 510d 	movw	r1, #5389	; 0x150d
 8008fb2:	4813      	ldr	r0, [pc, #76]	; (8009000 <HAL_TIM_ConfigClockSource+0x584>)
 8008fb4:	f7f9 fef1 	bl	8002d9a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	2b0f      	cmp	r3, #15
 8008fbe:	d904      	bls.n	8008fca <HAL_TIM_ConfigClockSource+0x54e>
 8008fc0:	f241 510e 	movw	r1, #5390	; 0x150e
 8008fc4:	480e      	ldr	r0, [pc, #56]	; (8009000 <HAL_TIM_ConfigClockSource+0x584>)
 8008fc6:	f7f9 fee8 	bl	8002d9a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6818      	ldr	r0, [r3, #0]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	6859      	ldr	r1, [r3, #4]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f000 fc01 	bl	80097de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2160      	movs	r1, #96	; 0x60
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 fc2b 	bl	800983e <TIM_ITRx_SetConfig>
      break;
 8008fe8:	e0aa      	b.n	8009140 <HAL_TIM_ConfigClockSource+0x6c4>
 8008fea:	bf00      	nop
 8008fec:	40010000 	.word	0x40010000
 8008ff0:	40000400 	.word	0x40000400
 8008ff4:	40000800 	.word	0x40000800
 8008ff8:	40000c00 	.word	0x40000c00
 8008ffc:	40010400 	.word	0x40010400
 8009000:	080106b8 	.word	0x080106b8
 8009004:	40014000 	.word	0x40014000
 8009008:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a52      	ldr	r2, [pc, #328]	; (800915c <HAL_TIM_ConfigClockSource+0x6e0>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d027      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x5ea>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800901e:	d022      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x5ea>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a4e      	ldr	r2, [pc, #312]	; (8009160 <HAL_TIM_ConfigClockSource+0x6e4>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d01d      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x5ea>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a4d      	ldr	r2, [pc, #308]	; (8009164 <HAL_TIM_ConfigClockSource+0x6e8>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d018      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x5ea>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a4b      	ldr	r2, [pc, #300]	; (8009168 <HAL_TIM_ConfigClockSource+0x6ec>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d013      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x5ea>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a4a      	ldr	r2, [pc, #296]	; (800916c <HAL_TIM_ConfigClockSource+0x6f0>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d00e      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x5ea>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a48      	ldr	r2, [pc, #288]	; (8009170 <HAL_TIM_ConfigClockSource+0x6f4>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d009      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x5ea>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a47      	ldr	r2, [pc, #284]	; (8009174 <HAL_TIM_ConfigClockSource+0x6f8>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d004      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x5ea>
 800905c:	f241 511a 	movw	r1, #5402	; 0x151a
 8009060:	4845      	ldr	r0, [pc, #276]	; (8009178 <HAL_TIM_ConfigClockSource+0x6fc>)
 8009062:	f7f9 fe9a 	bl	8002d9a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800906e:	d014      	beq.n	800909a <HAL_TIM_ConfigClockSource+0x61e>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d010      	beq.n	800909a <HAL_TIM_ConfigClockSource+0x61e>
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00c      	beq.n	800909a <HAL_TIM_ConfigClockSource+0x61e>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2b02      	cmp	r3, #2
 8009086:	d008      	beq.n	800909a <HAL_TIM_ConfigClockSource+0x61e>
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	2b0a      	cmp	r3, #10
 800908e:	d004      	beq.n	800909a <HAL_TIM_ConfigClockSource+0x61e>
 8009090:	f241 511d 	movw	r1, #5405	; 0x151d
 8009094:	4838      	ldr	r0, [pc, #224]	; (8009178 <HAL_TIM_ConfigClockSource+0x6fc>)
 8009096:	f7f9 fe80 	bl	8002d9a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	2b0f      	cmp	r3, #15
 80090a0:	d904      	bls.n	80090ac <HAL_TIM_ConfigClockSource+0x630>
 80090a2:	f241 511e 	movw	r1, #5406	; 0x151e
 80090a6:	4834      	ldr	r0, [pc, #208]	; (8009178 <HAL_TIM_ConfigClockSource+0x6fc>)
 80090a8:	f7f9 fe77 	bl	8002d9a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6818      	ldr	r0, [r3, #0]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	6859      	ldr	r1, [r3, #4]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	461a      	mov	r2, r3
 80090ba:	f000 fb61 	bl	8009780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2140      	movs	r1, #64	; 0x40
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fbba 	bl	800983e <TIM_ITRx_SetConfig>
      break;
 80090ca:	e039      	b.n	8009140 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a22      	ldr	r2, [pc, #136]	; (800915c <HAL_TIM_ConfigClockSource+0x6e0>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d027      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x6aa>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090de:	d022      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x6aa>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a1e      	ldr	r2, [pc, #120]	; (8009160 <HAL_TIM_ConfigClockSource+0x6e4>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d01d      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x6aa>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a1d      	ldr	r2, [pc, #116]	; (8009164 <HAL_TIM_ConfigClockSource+0x6e8>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d018      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x6aa>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1b      	ldr	r2, [pc, #108]	; (8009168 <HAL_TIM_ConfigClockSource+0x6ec>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d013      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x6aa>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a1a      	ldr	r2, [pc, #104]	; (800916c <HAL_TIM_ConfigClockSource+0x6f0>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00e      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x6aa>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a18      	ldr	r2, [pc, #96]	; (8009170 <HAL_TIM_ConfigClockSource+0x6f4>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d009      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x6aa>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a17      	ldr	r2, [pc, #92]	; (8009174 <HAL_TIM_ConfigClockSource+0x6f8>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d004      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x6aa>
 800911c:	f241 512d 	movw	r1, #5421	; 0x152d
 8009120:	4815      	ldr	r0, [pc, #84]	; (8009178 <HAL_TIM_ConfigClockSource+0x6fc>)
 8009122:	f7f9 fe3a 	bl	8002d9a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4619      	mov	r1, r3
 8009130:	4610      	mov	r0, r2
 8009132:	f000 fb84 	bl	800983e <TIM_ITRx_SetConfig>
      break;
 8009136:	e003      	b.n	8009140 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	73fb      	strb	r3, [r7, #15]
      break;
 800913c:	e000      	b.n	8009140 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 800913e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009150:	7bfb      	ldrb	r3, [r7, #15]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	40010000 	.word	0x40010000
 8009160:	40000400 	.word	0x40000400
 8009164:	40000800 	.word	0x40000800
 8009168:	40000c00 	.word	0x40000c00
 800916c:	40010400 	.word	0x40010400
 8009170:	40014000 	.word	0x40014000
 8009174:	40001800 	.word	0x40001800
 8009178:	080106b8 	.word	0x080106b8

0800917c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a40      	ldr	r2, [pc, #256]	; (80092e0 <TIM_Base_SetConfig+0x114>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d013      	beq.n	800920c <TIM_Base_SetConfig+0x40>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ea:	d00f      	beq.n	800920c <TIM_Base_SetConfig+0x40>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a3d      	ldr	r2, [pc, #244]	; (80092e4 <TIM_Base_SetConfig+0x118>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d00b      	beq.n	800920c <TIM_Base_SetConfig+0x40>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a3c      	ldr	r2, [pc, #240]	; (80092e8 <TIM_Base_SetConfig+0x11c>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d007      	beq.n	800920c <TIM_Base_SetConfig+0x40>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a3b      	ldr	r2, [pc, #236]	; (80092ec <TIM_Base_SetConfig+0x120>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d003      	beq.n	800920c <TIM_Base_SetConfig+0x40>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a3a      	ldr	r2, [pc, #232]	; (80092f0 <TIM_Base_SetConfig+0x124>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d108      	bne.n	800921e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	4313      	orrs	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a2f      	ldr	r2, [pc, #188]	; (80092e0 <TIM_Base_SetConfig+0x114>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d02b      	beq.n	800927e <TIM_Base_SetConfig+0xb2>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800922c:	d027      	beq.n	800927e <TIM_Base_SetConfig+0xb2>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a2c      	ldr	r2, [pc, #176]	; (80092e4 <TIM_Base_SetConfig+0x118>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d023      	beq.n	800927e <TIM_Base_SetConfig+0xb2>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a2b      	ldr	r2, [pc, #172]	; (80092e8 <TIM_Base_SetConfig+0x11c>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d01f      	beq.n	800927e <TIM_Base_SetConfig+0xb2>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a2a      	ldr	r2, [pc, #168]	; (80092ec <TIM_Base_SetConfig+0x120>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d01b      	beq.n	800927e <TIM_Base_SetConfig+0xb2>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a29      	ldr	r2, [pc, #164]	; (80092f0 <TIM_Base_SetConfig+0x124>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d017      	beq.n	800927e <TIM_Base_SetConfig+0xb2>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a28      	ldr	r2, [pc, #160]	; (80092f4 <TIM_Base_SetConfig+0x128>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d013      	beq.n	800927e <TIM_Base_SetConfig+0xb2>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a27      	ldr	r2, [pc, #156]	; (80092f8 <TIM_Base_SetConfig+0x12c>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d00f      	beq.n	800927e <TIM_Base_SetConfig+0xb2>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a26      	ldr	r2, [pc, #152]	; (80092fc <TIM_Base_SetConfig+0x130>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d00b      	beq.n	800927e <TIM_Base_SetConfig+0xb2>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a25      	ldr	r2, [pc, #148]	; (8009300 <TIM_Base_SetConfig+0x134>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d007      	beq.n	800927e <TIM_Base_SetConfig+0xb2>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a24      	ldr	r2, [pc, #144]	; (8009304 <TIM_Base_SetConfig+0x138>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d003      	beq.n	800927e <TIM_Base_SetConfig+0xb2>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a23      	ldr	r2, [pc, #140]	; (8009308 <TIM_Base_SetConfig+0x13c>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d108      	bne.n	8009290 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	4313      	orrs	r3, r2
 800929c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	689a      	ldr	r2, [r3, #8]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a0a      	ldr	r2, [pc, #40]	; (80092e0 <TIM_Base_SetConfig+0x114>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d003      	beq.n	80092c4 <TIM_Base_SetConfig+0xf8>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a0c      	ldr	r2, [pc, #48]	; (80092f0 <TIM_Base_SetConfig+0x124>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d103      	bne.n	80092cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	691a      	ldr	r2, [r3, #16]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	615a      	str	r2, [r3, #20]
}
 80092d2:	bf00      	nop
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	40010000 	.word	0x40010000
 80092e4:	40000400 	.word	0x40000400
 80092e8:	40000800 	.word	0x40000800
 80092ec:	40000c00 	.word	0x40000c00
 80092f0:	40010400 	.word	0x40010400
 80092f4:	40014000 	.word	0x40014000
 80092f8:	40014400 	.word	0x40014400
 80092fc:	40014800 	.word	0x40014800
 8009300:	40001800 	.word	0x40001800
 8009304:	40001c00 	.word	0x40001c00
 8009308:	40002000 	.word	0x40002000

0800930c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	f023 0201 	bic.w	r2, r3, #1
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800933a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 0303 	bic.w	r3, r3, #3
 8009342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f023 0302 	bic.w	r3, r3, #2
 8009354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	4313      	orrs	r3, r2
 800935e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a34      	ldr	r2, [pc, #208]	; (8009434 <TIM_OC1_SetConfig+0x128>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d003      	beq.n	8009370 <TIM_OC1_SetConfig+0x64>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a33      	ldr	r2, [pc, #204]	; (8009438 <TIM_OC1_SetConfig+0x12c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d119      	bne.n	80093a4 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d008      	beq.n	800938a <TIM_OC1_SetConfig+0x7e>
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	2b08      	cmp	r3, #8
 800937e:	d004      	beq.n	800938a <TIM_OC1_SetConfig+0x7e>
 8009380:	f641 21cb 	movw	r1, #6859	; 0x1acb
 8009384:	482d      	ldr	r0, [pc, #180]	; (800943c <TIM_OC1_SetConfig+0x130>)
 8009386:	f7f9 fd08 	bl	8002d9a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f023 0308 	bic.w	r3, r3, #8
 8009390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	4313      	orrs	r3, r2
 800939a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f023 0304 	bic.w	r3, r3, #4
 80093a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a23      	ldr	r2, [pc, #140]	; (8009434 <TIM_OC1_SetConfig+0x128>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d003      	beq.n	80093b4 <TIM_OC1_SetConfig+0xa8>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a22      	ldr	r2, [pc, #136]	; (8009438 <TIM_OC1_SetConfig+0x12c>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d12d      	bne.n	8009410 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093bc:	d008      	beq.n	80093d0 <TIM_OC1_SetConfig+0xc4>
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d004      	beq.n	80093d0 <TIM_OC1_SetConfig+0xc4>
 80093c6:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 80093ca:	481c      	ldr	r0, [pc, #112]	; (800943c <TIM_OC1_SetConfig+0x130>)
 80093cc:	f7f9 fce5 	bl	8002d9a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d8:	d008      	beq.n	80093ec <TIM_OC1_SetConfig+0xe0>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d004      	beq.n	80093ec <TIM_OC1_SetConfig+0xe0>
 80093e2:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 80093e6:	4815      	ldr	r0, [pc, #84]	; (800943c <TIM_OC1_SetConfig+0x130>)
 80093e8:	f7f9 fcd7 	bl	8002d9a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	4313      	orrs	r3, r2
 8009404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	4313      	orrs	r3, r2
 800940e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	621a      	str	r2, [r3, #32]
}
 800942a:	bf00      	nop
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	40010000 	.word	0x40010000
 8009438:	40010400 	.word	0x40010400
 800943c:	080106b8 	.word	0x080106b8

08009440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	f023 0210 	bic.w	r2, r3, #16
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800946e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	4313      	orrs	r3, r2
 8009482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f023 0320 	bic.w	r3, r3, #32
 800948a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	011b      	lsls	r3, r3, #4
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	4313      	orrs	r3, r2
 8009496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a35      	ldr	r2, [pc, #212]	; (8009570 <TIM_OC2_SetConfig+0x130>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d003      	beq.n	80094a8 <TIM_OC2_SetConfig+0x68>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a34      	ldr	r2, [pc, #208]	; (8009574 <TIM_OC2_SetConfig+0x134>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d11a      	bne.n	80094de <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d008      	beq.n	80094c2 <TIM_OC2_SetConfig+0x82>
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	d004      	beq.n	80094c2 <TIM_OC2_SetConfig+0x82>
 80094b8:	f641 3116 	movw	r1, #6934	; 0x1b16
 80094bc:	482e      	ldr	r0, [pc, #184]	; (8009578 <TIM_OC2_SetConfig+0x138>)
 80094be:	f7f9 fc6c 	bl	8002d9a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	011b      	lsls	r3, r3, #4
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094dc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a23      	ldr	r2, [pc, #140]	; (8009570 <TIM_OC2_SetConfig+0x130>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d003      	beq.n	80094ee <TIM_OC2_SetConfig+0xae>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a22      	ldr	r2, [pc, #136]	; (8009574 <TIM_OC2_SetConfig+0x134>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d12f      	bne.n	800954e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094f6:	d008      	beq.n	800950a <TIM_OC2_SetConfig+0xca>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d004      	beq.n	800950a <TIM_OC2_SetConfig+0xca>
 8009500:	f641 3124 	movw	r1, #6948	; 0x1b24
 8009504:	481c      	ldr	r0, [pc, #112]	; (8009578 <TIM_OC2_SetConfig+0x138>)
 8009506:	f7f9 fc48 	bl	8002d9a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009512:	d008      	beq.n	8009526 <TIM_OC2_SetConfig+0xe6>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	695b      	ldr	r3, [r3, #20]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d004      	beq.n	8009526 <TIM_OC2_SetConfig+0xe6>
 800951c:	f641 3125 	movw	r1, #6949	; 0x1b25
 8009520:	4815      	ldr	r0, [pc, #84]	; (8009578 <TIM_OC2_SetConfig+0x138>)
 8009522:	f7f9 fc3a 	bl	8002d9a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800952c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	4313      	orrs	r3, r2
 8009540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	4313      	orrs	r3, r2
 800954c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	621a      	str	r2, [r3, #32]
}
 8009568:	bf00      	nop
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	40010000 	.word	0x40010000
 8009574:	40010400 	.word	0x40010400
 8009578:	080106b8 	.word	0x080106b8

0800957c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f023 0303 	bic.w	r3, r3, #3
 80095b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	021b      	lsls	r3, r3, #8
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a35      	ldr	r2, [pc, #212]	; (80096ac <TIM_OC3_SetConfig+0x130>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d003      	beq.n	80095e2 <TIM_OC3_SetConfig+0x66>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a34      	ldr	r2, [pc, #208]	; (80096b0 <TIM_OC3_SetConfig+0x134>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d11a      	bne.n	8009618 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d008      	beq.n	80095fc <TIM_OC3_SetConfig+0x80>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	2b08      	cmp	r3, #8
 80095f0:	d004      	beq.n	80095fc <TIM_OC3_SetConfig+0x80>
 80095f2:	f641 3161 	movw	r1, #7009	; 0x1b61
 80095f6:	482f      	ldr	r0, [pc, #188]	; (80096b4 <TIM_OC3_SetConfig+0x138>)
 80095f8:	f7f9 fbcf 	bl	8002d9a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	021b      	lsls	r3, r3, #8
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	4313      	orrs	r3, r2
 800960e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009616:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a24      	ldr	r2, [pc, #144]	; (80096ac <TIM_OC3_SetConfig+0x130>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d003      	beq.n	8009628 <TIM_OC3_SetConfig+0xac>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a23      	ldr	r2, [pc, #140]	; (80096b0 <TIM_OC3_SetConfig+0x134>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d12f      	bne.n	8009688 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009630:	d008      	beq.n	8009644 <TIM_OC3_SetConfig+0xc8>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d004      	beq.n	8009644 <TIM_OC3_SetConfig+0xc8>
 800963a:	f641 316e 	movw	r1, #7022	; 0x1b6e
 800963e:	481d      	ldr	r0, [pc, #116]	; (80096b4 <TIM_OC3_SetConfig+0x138>)
 8009640:	f7f9 fbab 	bl	8002d9a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800964c:	d008      	beq.n	8009660 <TIM_OC3_SetConfig+0xe4>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d004      	beq.n	8009660 <TIM_OC3_SetConfig+0xe4>
 8009656:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800965a:	4816      	ldr	r0, [pc, #88]	; (80096b4 <TIM_OC3_SetConfig+0x138>)
 800965c:	f7f9 fb9d 	bl	8002d9a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800966e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	011b      	lsls	r3, r3, #4
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	4313      	orrs	r3, r2
 800967a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	011b      	lsls	r3, r3, #4
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	4313      	orrs	r3, r2
 8009686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	621a      	str	r2, [r3, #32]
}
 80096a2:	bf00      	nop
 80096a4:	3718      	adds	r7, #24
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	40010000 	.word	0x40010000
 80096b0:	40010400 	.word	0x40010400
 80096b4:	080106b8 	.word	0x080106b8

080096b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	021b      	lsls	r3, r3, #8
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	031b      	lsls	r3, r3, #12
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	4313      	orrs	r3, r2
 800970e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a18      	ldr	r2, [pc, #96]	; (8009774 <TIM_OC4_SetConfig+0xbc>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d003      	beq.n	8009720 <TIM_OC4_SetConfig+0x68>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a17      	ldr	r2, [pc, #92]	; (8009778 <TIM_OC4_SetConfig+0xc0>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d117      	bne.n	8009750 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009728:	d008      	beq.n	800973c <TIM_OC4_SetConfig+0x84>
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d004      	beq.n	800973c <TIM_OC4_SetConfig+0x84>
 8009732:	f641 31ad 	movw	r1, #7085	; 0x1bad
 8009736:	4811      	ldr	r0, [pc, #68]	; (800977c <TIM_OC4_SetConfig+0xc4>)
 8009738:	f7f9 fb2f 	bl	8002d9a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	019b      	lsls	r3, r3, #6
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	4313      	orrs	r3, r2
 800974e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	621a      	str	r2, [r3, #32]
}
 800976a:	bf00      	nop
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	40010000 	.word	0x40010000
 8009778:	40010400 	.word	0x40010400
 800977c:	080106b8 	.word	0x080106b8

08009780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	f023 0201 	bic.w	r2, r3, #1
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	f023 030a 	bic.w	r3, r3, #10
 80097bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	621a      	str	r2, [r3, #32]
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097de:	b480      	push	{r7}
 80097e0:	b087      	sub	sp, #28
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	f023 0210 	bic.w	r2, r3, #16
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009808:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	031b      	lsls	r3, r3, #12
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	4313      	orrs	r3, r2
 8009812:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800981a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	011b      	lsls	r3, r3, #4
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	621a      	str	r2, [r3, #32]
}
 8009832:	bf00      	nop
 8009834:	371c      	adds	r7, #28
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800983e:	b480      	push	{r7}
 8009840:	b085      	sub	sp, #20
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4313      	orrs	r3, r2
 800985c:	f043 0307 	orr.w	r3, r3, #7
 8009860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	609a      	str	r2, [r3, #8]
}
 8009868:	bf00      	nop
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009874:	b480      	push	{r7}
 8009876:	b087      	sub	sp, #28
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800988e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	021a      	lsls	r2, r3, #8
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	431a      	orrs	r2, r3
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	4313      	orrs	r3, r2
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	4313      	orrs	r3, r2
 80098a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	609a      	str	r2, [r3, #8]
}
 80098a8:	bf00      	nop
 80098aa:	371c      	adds	r7, #28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	4a32      	ldr	r2, [pc, #200]	; (800998c <TIM_CCxChannelCmd+0xd8>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d030      	beq.n	800992a <TIM_CCxChannelCmd+0x76>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ce:	d02c      	beq.n	800992a <TIM_CCxChannelCmd+0x76>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4a2f      	ldr	r2, [pc, #188]	; (8009990 <TIM_CCxChannelCmd+0xdc>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d028      	beq.n	800992a <TIM_CCxChannelCmd+0x76>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4a2e      	ldr	r2, [pc, #184]	; (8009994 <TIM_CCxChannelCmd+0xe0>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d024      	beq.n	800992a <TIM_CCxChannelCmd+0x76>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4a2d      	ldr	r2, [pc, #180]	; (8009998 <TIM_CCxChannelCmd+0xe4>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d020      	beq.n	800992a <TIM_CCxChannelCmd+0x76>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4a2c      	ldr	r2, [pc, #176]	; (800999c <TIM_CCxChannelCmd+0xe8>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d01c      	beq.n	800992a <TIM_CCxChannelCmd+0x76>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4a2b      	ldr	r2, [pc, #172]	; (80099a0 <TIM_CCxChannelCmd+0xec>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d018      	beq.n	800992a <TIM_CCxChannelCmd+0x76>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4a2a      	ldr	r2, [pc, #168]	; (80099a4 <TIM_CCxChannelCmd+0xf0>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d014      	beq.n	800992a <TIM_CCxChannelCmd+0x76>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4a29      	ldr	r2, [pc, #164]	; (80099a8 <TIM_CCxChannelCmd+0xf4>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d010      	beq.n	800992a <TIM_CCxChannelCmd+0x76>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	4a28      	ldr	r2, [pc, #160]	; (80099ac <TIM_CCxChannelCmd+0xf8>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d00c      	beq.n	800992a <TIM_CCxChannelCmd+0x76>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4a27      	ldr	r2, [pc, #156]	; (80099b0 <TIM_CCxChannelCmd+0xfc>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d008      	beq.n	800992a <TIM_CCxChannelCmd+0x76>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4a26      	ldr	r2, [pc, #152]	; (80099b4 <TIM_CCxChannelCmd+0x100>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d004      	beq.n	800992a <TIM_CCxChannelCmd+0x76>
 8009920:	f641 5198 	movw	r1, #7576	; 0x1d98
 8009924:	4824      	ldr	r0, [pc, #144]	; (80099b8 <TIM_CCxChannelCmd+0x104>)
 8009926:	f7f9 fa38 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d010      	beq.n	8009952 <TIM_CCxChannelCmd+0x9e>
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	2b04      	cmp	r3, #4
 8009934:	d00d      	beq.n	8009952 <TIM_CCxChannelCmd+0x9e>
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b08      	cmp	r3, #8
 800993a:	d00a      	beq.n	8009952 <TIM_CCxChannelCmd+0x9e>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	2b0c      	cmp	r3, #12
 8009940:	d007      	beq.n	8009952 <TIM_CCxChannelCmd+0x9e>
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2b3c      	cmp	r3, #60	; 0x3c
 8009946:	d004      	beq.n	8009952 <TIM_CCxChannelCmd+0x9e>
 8009948:	f641 5199 	movw	r1, #7577	; 0x1d99
 800994c:	481a      	ldr	r0, [pc, #104]	; (80099b8 <TIM_CCxChannelCmd+0x104>)
 800994e:	f7f9 fa24 	bl	8002d9a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f003 031f 	and.w	r3, r3, #31
 8009958:	2201      	movs	r2, #1
 800995a:	fa02 f303 	lsl.w	r3, r2, r3
 800995e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6a1a      	ldr	r2, [r3, #32]
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	43db      	mvns	r3, r3
 8009968:	401a      	ands	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6a1a      	ldr	r2, [r3, #32]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f003 031f 	and.w	r3, r3, #31
 8009978:	6879      	ldr	r1, [r7, #4]
 800997a:	fa01 f303 	lsl.w	r3, r1, r3
 800997e:	431a      	orrs	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	621a      	str	r2, [r3, #32]
}
 8009984:	bf00      	nop
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	40010000 	.word	0x40010000
 8009990:	40000400 	.word	0x40000400
 8009994:	40000800 	.word	0x40000800
 8009998:	40000c00 	.word	0x40000c00
 800999c:	40010400 	.word	0x40010400
 80099a0:	40014000 	.word	0x40014000
 80099a4:	40014400 	.word	0x40014400
 80099a8:	40014800 	.word	0x40014800
 80099ac:	40001800 	.word	0x40001800
 80099b0:	40001c00 	.word	0x40001c00
 80099b4:	40002000 	.word	0x40002000
 80099b8:	080106b8 	.word	0x080106b8

080099bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a61      	ldr	r2, [pc, #388]	; (8009b50 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d027      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d8:	d022      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a5d      	ldr	r2, [pc, #372]	; (8009b54 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d01d      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a5b      	ldr	r2, [pc, #364]	; (8009b58 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d018      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a5a      	ldr	r2, [pc, #360]	; (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d013      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a58      	ldr	r2, [pc, #352]	; (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00e      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a57      	ldr	r2, [pc, #348]	; (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d009      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a55      	ldr	r2, [pc, #340]	; (8009b68 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d004      	beq.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009a16:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8009a1a:	4854      	ldr	r0, [pc, #336]	; (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009a1c:	f7f9 f9bd 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d020      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b10      	cmp	r3, #16
 8009a2e:	d01c      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b20      	cmp	r3, #32
 8009a36:	d018      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b30      	cmp	r3, #48	; 0x30
 8009a3e:	d014      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b40      	cmp	r3, #64	; 0x40
 8009a46:	d010      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b50      	cmp	r3, #80	; 0x50
 8009a4e:	d00c      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b60      	cmp	r3, #96	; 0x60
 8009a56:	d008      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b70      	cmp	r3, #112	; 0x70
 8009a5e:	d004      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009a60:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8009a64:	4841      	ldr	r0, [pc, #260]	; (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009a66:	f7f9 f998 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	2b80      	cmp	r3, #128	; 0x80
 8009a70:	d008      	beq.n	8009a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d004      	beq.n	8009a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a7a:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8009a7e:	483b      	ldr	r0, [pc, #236]	; (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009a80:	f7f9 f98b 	bl	8002d9a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d101      	bne.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a8e:	2302      	movs	r3, #2
 8009a90:	e05a      	b.n	8009b48 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a1f      	ldr	r2, [pc, #124]	; (8009b50 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d022      	beq.n	8009b1c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ade:	d01d      	beq.n	8009b1c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a1b      	ldr	r2, [pc, #108]	; (8009b54 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d018      	beq.n	8009b1c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a1a      	ldr	r2, [pc, #104]	; (8009b58 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d013      	beq.n	8009b1c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a18      	ldr	r2, [pc, #96]	; (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d00e      	beq.n	8009b1c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a19      	ldr	r2, [pc, #100]	; (8009b68 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d009      	beq.n	8009b1c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a18      	ldr	r2, [pc, #96]	; (8009b70 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d004      	beq.n	8009b1c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a17      	ldr	r2, [pc, #92]	; (8009b74 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d10c      	bne.n	8009b36 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	40010000 	.word	0x40010000
 8009b54:	40000400 	.word	0x40000400
 8009b58:	40000800 	.word	0x40000800
 8009b5c:	40000c00 	.word	0x40000c00
 8009b60:	40001000 	.word	0x40001000
 8009b64:	40001400 	.word	0x40001400
 8009b68:	40010400 	.word	0x40010400
 8009b6c:	080106f0 	.word	0x080106f0
 8009b70:	40014000 	.word	0x40014000
 8009b74:	40001800 	.word	0x40001800

08009b78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b82:	2300      	movs	r3, #0
 8009b84:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a5e      	ldr	r2, [pc, #376]	; (8009d04 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d009      	beq.n	8009ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a5c      	ldr	r2, [pc, #368]	; (8009d08 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d004      	beq.n	8009ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8009b9a:	f240 71ee 	movw	r1, #2030	; 0x7ee
 8009b9e:	485b      	ldr	r0, [pc, #364]	; (8009d0c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009ba0:	f7f9 f8fb 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bac:	d008      	beq.n	8009bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d004      	beq.n	8009bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8009bb6:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8009bba:	4854      	ldr	r0, [pc, #336]	; (8009d0c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009bbc:	f7f9 f8ed 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc8:	d008      	beq.n	8009bdc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d004      	beq.n	8009bdc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009bd2:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8009bd6:	484d      	ldr	r0, [pc, #308]	; (8009d0c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009bd8:	f7f9 f8df 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d013      	beq.n	8009c0c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bec:	d00e      	beq.n	8009c0c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bf6:	d009      	beq.n	8009c0c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c00:	d004      	beq.n	8009c0c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009c02:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8009c06:	4841      	ldr	r0, [pc, #260]	; (8009d0c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009c08:	f7f9 f8c7 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	2bff      	cmp	r3, #255	; 0xff
 8009c12:	d904      	bls.n	8009c1e <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8009c14:	f240 71f2 	movw	r1, #2034	; 0x7f2
 8009c18:	483c      	ldr	r0, [pc, #240]	; (8009d0c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009c1a:	f7f9 f8be 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c26:	d008      	beq.n	8009c3a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d004      	beq.n	8009c3a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009c30:	f240 71f3 	movw	r1, #2035	; 0x7f3
 8009c34:	4835      	ldr	r0, [pc, #212]	; (8009d0c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009c36:	f7f9 f8b0 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d009      	beq.n	8009c56 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c4a:	d004      	beq.n	8009c56 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009c4c:	f240 71f4 	movw	r1, #2036	; 0x7f4
 8009c50:	482e      	ldr	r0, [pc, #184]	; (8009d0c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009c52:	f7f9 f8a2 	bl	8002d9a <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c5e:	d008      	beq.n	8009c72 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	69db      	ldr	r3, [r3, #28]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d004      	beq.n	8009c72 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009c68:	f240 71f5 	movw	r1, #2037	; 0x7f5
 8009c6c:	4827      	ldr	r0, [pc, #156]	; (8009d0c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009c6e:	f7f9 f894 	bl	8002d9a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d101      	bne.n	8009c80 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	e03d      	b.n	8009cfc <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	695b      	ldr	r3, [r3, #20]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	40010000 	.word	0x40010000
 8009d08:	40010400 	.word	0x40010400
 8009d0c:	080106f0 	.word	0x080106f0

08009d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e0be      	b.n	8009ec8 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d03b      	beq.n	8009dca <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a5e      	ldr	r2, [pc, #376]	; (8009ed0 <HAL_UART_Init+0x198>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d01d      	beq.n	8009d98 <HAL_UART_Init+0x60>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a5c      	ldr	r2, [pc, #368]	; (8009ed4 <HAL_UART_Init+0x19c>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d018      	beq.n	8009d98 <HAL_UART_Init+0x60>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a5b      	ldr	r2, [pc, #364]	; (8009ed8 <HAL_UART_Init+0x1a0>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d013      	beq.n	8009d98 <HAL_UART_Init+0x60>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a59      	ldr	r2, [pc, #356]	; (8009edc <HAL_UART_Init+0x1a4>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d00e      	beq.n	8009d98 <HAL_UART_Init+0x60>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a58      	ldr	r2, [pc, #352]	; (8009ee0 <HAL_UART_Init+0x1a8>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d009      	beq.n	8009d98 <HAL_UART_Init+0x60>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a56      	ldr	r2, [pc, #344]	; (8009ee4 <HAL_UART_Init+0x1ac>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d004      	beq.n	8009d98 <HAL_UART_Init+0x60>
 8009d8e:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8009d92:	4855      	ldr	r0, [pc, #340]	; (8009ee8 <HAL_UART_Init+0x1b0>)
 8009d94:	f7f9 f801 	bl	8002d9a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d037      	beq.n	8009e10 <HAL_UART_Init+0xd8>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009da8:	d032      	beq.n	8009e10 <HAL_UART_Init+0xd8>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009db2:	d02d      	beq.n	8009e10 <HAL_UART_Init+0xd8>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dbc:	d028      	beq.n	8009e10 <HAL_UART_Init+0xd8>
 8009dbe:	f240 1173 	movw	r1, #371	; 0x173
 8009dc2:	4849      	ldr	r0, [pc, #292]	; (8009ee8 <HAL_UART_Init+0x1b0>)
 8009dc4:	f7f8 ffe9 	bl	8002d9a <assert_failed>
 8009dc8:	e022      	b.n	8009e10 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a40      	ldr	r2, [pc, #256]	; (8009ed0 <HAL_UART_Init+0x198>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d01d      	beq.n	8009e10 <HAL_UART_Init+0xd8>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a3e      	ldr	r2, [pc, #248]	; (8009ed4 <HAL_UART_Init+0x19c>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d018      	beq.n	8009e10 <HAL_UART_Init+0xd8>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a3d      	ldr	r2, [pc, #244]	; (8009ed8 <HAL_UART_Init+0x1a0>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d013      	beq.n	8009e10 <HAL_UART_Init+0xd8>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a3b      	ldr	r2, [pc, #236]	; (8009edc <HAL_UART_Init+0x1a4>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d00e      	beq.n	8009e10 <HAL_UART_Init+0xd8>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a3a      	ldr	r2, [pc, #232]	; (8009ee0 <HAL_UART_Init+0x1a8>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d009      	beq.n	8009e10 <HAL_UART_Init+0xd8>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a38      	ldr	r2, [pc, #224]	; (8009ee4 <HAL_UART_Init+0x1ac>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d004      	beq.n	8009e10 <HAL_UART_Init+0xd8>
 8009e06:	f240 1177 	movw	r1, #375	; 0x177
 8009e0a:	4837      	ldr	r0, [pc, #220]	; (8009ee8 <HAL_UART_Init+0x1b0>)
 8009e0c:	f7f8 ffc5 	bl	8002d9a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d009      	beq.n	8009e2c <HAL_UART_Init+0xf4>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e20:	d004      	beq.n	8009e2c <HAL_UART_Init+0xf4>
 8009e22:	f240 1179 	movw	r1, #377	; 0x179
 8009e26:	4830      	ldr	r0, [pc, #192]	; (8009ee8 <HAL_UART_Init+0x1b0>)
 8009e28:	f7f8 ffb7 	bl	8002d9a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d009      	beq.n	8009e48 <HAL_UART_Init+0x110>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e3c:	d004      	beq.n	8009e48 <HAL_UART_Init+0x110>
 8009e3e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8009e42:	4829      	ldr	r0, [pc, #164]	; (8009ee8 <HAL_UART_Init+0x1b0>)
 8009e44:	f7f8 ffa9 	bl	8002d9a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d106      	bne.n	8009e62 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7f9 fb79 	bl	8003554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2224      	movs	r2, #36	; 0x24
 8009e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68da      	ldr	r2, [r3, #12]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e78:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fc7e 	bl	800a77c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	691a      	ldr	r2, [r3, #16]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	695a      	ldr	r2, [r3, #20]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68da      	ldr	r2, [r3, #12]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009eae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	40011000 	.word	0x40011000
 8009ed4:	40004400 	.word	0x40004400
 8009ed8:	40004800 	.word	0x40004800
 8009edc:	40004c00 	.word	0x40004c00
 8009ee0:	40005000 	.word	0x40005000
 8009ee4:	40011400 	.word	0x40011400
 8009ee8:	0801072c 	.word	0x0801072c

08009eec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b0ba      	sub	sp, #232	; 0xe8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f22:	f003 030f 	and.w	r3, r3, #15
 8009f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10f      	bne.n	8009f52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f36:	f003 0320 	and.w	r3, r3, #32
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d009      	beq.n	8009f52 <HAL_UART_IRQHandler+0x66>
 8009f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f42:	f003 0320 	and.w	r3, r3, #32
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fb5b 	bl	800a606 <UART_Receive_IT>
      return;
 8009f50:	e256      	b.n	800a400 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 80de 	beq.w	800a118 <HAL_UART_IRQHandler+0x22c>
 8009f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f60:	f003 0301 	and.w	r3, r3, #1
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d106      	bne.n	8009f76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 80d1 	beq.w	800a118 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f7a:	f003 0301 	and.w	r3, r3, #1
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00b      	beq.n	8009f9a <HAL_UART_IRQHandler+0xae>
 8009f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d005      	beq.n	8009f9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f92:	f043 0201 	orr.w	r2, r3, #1
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f9e:	f003 0304 	and.w	r3, r3, #4
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00b      	beq.n	8009fbe <HAL_UART_IRQHandler+0xd2>
 8009fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d005      	beq.n	8009fbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb6:	f043 0202 	orr.w	r2, r3, #2
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00b      	beq.n	8009fe2 <HAL_UART_IRQHandler+0xf6>
 8009fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d005      	beq.n	8009fe2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fda:	f043 0204 	orr.w	r2, r3, #4
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fe6:	f003 0308 	and.w	r3, r3, #8
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d011      	beq.n	800a012 <HAL_UART_IRQHandler+0x126>
 8009fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ff2:	f003 0320 	and.w	r3, r3, #32
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d105      	bne.n	800a006 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d005      	beq.n	800a012 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00a:	f043 0208 	orr.w	r2, r3, #8
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	2b00      	cmp	r3, #0
 800a018:	f000 81ed 	beq.w	800a3f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a01c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a020:	f003 0320 	and.w	r3, r3, #32
 800a024:	2b00      	cmp	r3, #0
 800a026:	d008      	beq.n	800a03a <HAL_UART_IRQHandler+0x14e>
 800a028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a02c:	f003 0320 	and.w	r3, r3, #32
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fae6 	bl	800a606 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a044:	2b40      	cmp	r3, #64	; 0x40
 800a046:	bf0c      	ite	eq
 800a048:	2301      	moveq	r3, #1
 800a04a:	2300      	movne	r3, #0
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a056:	f003 0308 	and.w	r3, r3, #8
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d103      	bne.n	800a066 <HAL_UART_IRQHandler+0x17a>
 800a05e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a062:	2b00      	cmp	r3, #0
 800a064:	d04f      	beq.n	800a106 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f9ee 	bl	800a448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a076:	2b40      	cmp	r3, #64	; 0x40
 800a078:	d141      	bne.n	800a0fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	3314      	adds	r3, #20
 800a080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a084:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a088:	e853 3f00 	ldrex	r3, [r3]
 800a08c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3314      	adds	r3, #20
 800a0a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a0a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a0aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a0b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a0b6:	e841 2300 	strex	r3, r2, [r1]
 800a0ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a0be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1d9      	bne.n	800a07a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d013      	beq.n	800a0f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d2:	4a7d      	ldr	r2, [pc, #500]	; (800a2c8 <HAL_UART_IRQHandler+0x3dc>)
 800a0d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fa f824 	bl	8004128 <HAL_DMA_Abort_IT>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d016      	beq.n	800a114 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f4:	e00e      	b.n	800a114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f990 	bl	800a41c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0fc:	e00a      	b.n	800a114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f98c 	bl	800a41c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a104:	e006      	b.n	800a114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f988 	bl	800a41c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a112:	e170      	b.n	800a3f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a114:	bf00      	nop
    return;
 800a116:	e16e      	b.n	800a3f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	f040 814a 	bne.w	800a3b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a126:	f003 0310 	and.w	r3, r3, #16
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f000 8143 	beq.w	800a3b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a134:	f003 0310 	and.w	r3, r3, #16
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 813c 	beq.w	800a3b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a13e:	2300      	movs	r3, #0
 800a140:	60bb      	str	r3, [r7, #8]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	60bb      	str	r3, [r7, #8]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	60bb      	str	r3, [r7, #8]
 800a152:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15e:	2b40      	cmp	r3, #64	; 0x40
 800a160:	f040 80b4 	bne.w	800a2cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a170:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 8140 	beq.w	800a3fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a17e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a182:	429a      	cmp	r2, r3
 800a184:	f080 8139 	bcs.w	800a3fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a18e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a19a:	f000 8088 	beq.w	800a2ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	330c      	adds	r3, #12
 800a1a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1ac:	e853 3f00 	ldrex	r3, [r3]
 800a1b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a1b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	330c      	adds	r3, #12
 800a1c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a1ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a1ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a1d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a1e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1d9      	bne.n	800a19e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	3314      	adds	r3, #20
 800a1f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1f4:	e853 3f00 	ldrex	r3, [r3]
 800a1f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a1fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1fc:	f023 0301 	bic.w	r3, r3, #1
 800a200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3314      	adds	r3, #20
 800a20a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a20e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a212:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a214:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a216:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a21a:	e841 2300 	strex	r3, r2, [r1]
 800a21e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1e1      	bne.n	800a1ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3314      	adds	r3, #20
 800a22c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a23c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3314      	adds	r3, #20
 800a246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a24a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a24c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a250:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e3      	bne.n	800a226 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2220      	movs	r2, #32
 800a262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	330c      	adds	r3, #12
 800a272:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a276:	e853 3f00 	ldrex	r3, [r3]
 800a27a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a27c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a27e:	f023 0310 	bic.w	r3, r3, #16
 800a282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	330c      	adds	r3, #12
 800a28c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a290:	65ba      	str	r2, [r7, #88]	; 0x58
 800a292:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a294:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a298:	e841 2300 	strex	r3, r2, [r1]
 800a29c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a29e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e3      	bne.n	800a26c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7f9 fecd 	bl	8004048 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f8b6 	bl	800a430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a2c4:	e099      	b.n	800a3fa <HAL_UART_IRQHandler+0x50e>
 800a2c6:	bf00      	nop
 800a2c8:	0800a50f 	.word	0x0800a50f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 808b 	beq.w	800a3fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a2e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 8086 	beq.w	800a3fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	330c      	adds	r3, #12
 800a2f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fc:	e853 3f00 	ldrex	r3, [r3]
 800a300:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	330c      	adds	r3, #12
 800a312:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a316:	647a      	str	r2, [r7, #68]	; 0x44
 800a318:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a31c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a31e:	e841 2300 	strex	r3, r2, [r1]
 800a322:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1e3      	bne.n	800a2f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3314      	adds	r3, #20
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	e853 3f00 	ldrex	r3, [r3]
 800a338:	623b      	str	r3, [r7, #32]
   return(result);
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	f023 0301 	bic.w	r3, r3, #1
 800a340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	3314      	adds	r3, #20
 800a34a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a34e:	633a      	str	r2, [r7, #48]	; 0x30
 800a350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a356:	e841 2300 	strex	r3, r2, [r1]
 800a35a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1e3      	bne.n	800a32a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2220      	movs	r2, #32
 800a366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	330c      	adds	r3, #12
 800a376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	e853 3f00 	ldrex	r3, [r3]
 800a37e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f023 0310 	bic.w	r3, r3, #16
 800a386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	330c      	adds	r3, #12
 800a390:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a394:	61fa      	str	r2, [r7, #28]
 800a396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a398:	69b9      	ldr	r1, [r7, #24]
 800a39a:	69fa      	ldr	r2, [r7, #28]
 800a39c:	e841 2300 	strex	r3, r2, [r1]
 800a3a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1e3      	bne.n	800a370 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f83e 	bl	800a430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a3b4:	e023      	b.n	800a3fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a3b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d009      	beq.n	800a3d6 <HAL_UART_IRQHandler+0x4ea>
 800a3c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f8b1 	bl	800a536 <UART_Transmit_IT>
    return;
 800a3d4:	e014      	b.n	800a400 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a3d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00e      	beq.n	800a400 <HAL_UART_IRQHandler+0x514>
 800a3e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d008      	beq.n	800a400 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f8f1 	bl	800a5d6 <UART_EndTransmit_IT>
    return;
 800a3f4:	e004      	b.n	800a400 <HAL_UART_IRQHandler+0x514>
    return;
 800a3f6:	bf00      	nop
 800a3f8:	e002      	b.n	800a400 <HAL_UART_IRQHandler+0x514>
      return;
 800a3fa:	bf00      	nop
 800a3fc:	e000      	b.n	800a400 <HAL_UART_IRQHandler+0x514>
      return;
 800a3fe:	bf00      	nop
  }
}
 800a400:	37e8      	adds	r7, #232	; 0xe8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop

0800a408 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	460b      	mov	r3, r1
 800a43a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a43c:	bf00      	nop
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a448:	b480      	push	{r7}
 800a44a:	b095      	sub	sp, #84	; 0x54
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	330c      	adds	r3, #12
 800a456:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a45a:	e853 3f00 	ldrex	r3, [r3]
 800a45e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a466:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	330c      	adds	r3, #12
 800a46e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a470:	643a      	str	r2, [r7, #64]	; 0x40
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a476:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a478:	e841 2300 	strex	r3, r2, [r1]
 800a47c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1e5      	bne.n	800a450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3314      	adds	r3, #20
 800a48a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48c:	6a3b      	ldr	r3, [r7, #32]
 800a48e:	e853 3f00 	ldrex	r3, [r3]
 800a492:	61fb      	str	r3, [r7, #28]
   return(result);
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	f023 0301 	bic.w	r3, r3, #1
 800a49a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3314      	adds	r3, #20
 800a4a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a4a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4ac:	e841 2300 	strex	r3, r2, [r1]
 800a4b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1e5      	bne.n	800a484 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d119      	bne.n	800a4f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	330c      	adds	r3, #12
 800a4c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	f023 0310 	bic.w	r3, r3, #16
 800a4d6:	647b      	str	r3, [r7, #68]	; 0x44
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	330c      	adds	r3, #12
 800a4de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4e0:	61ba      	str	r2, [r7, #24]
 800a4e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e4:	6979      	ldr	r1, [r7, #20]
 800a4e6:	69ba      	ldr	r2, [r7, #24]
 800a4e8:	e841 2300 	strex	r3, r2, [r1]
 800a4ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e5      	bne.n	800a4c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a502:	bf00      	nop
 800a504:	3754      	adds	r7, #84	; 0x54
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff ff77 	bl	800a41c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a52e:	bf00      	nop
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a536:	b480      	push	{r7}
 800a538:	b085      	sub	sp, #20
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b21      	cmp	r3, #33	; 0x21
 800a548:	d13e      	bne.n	800a5c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a552:	d114      	bne.n	800a57e <UART_Transmit_IT+0x48>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d110      	bne.n	800a57e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a1b      	ldr	r3, [r3, #32]
 800a560:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	881b      	ldrh	r3, [r3, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a570:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	1c9a      	adds	r2, r3, #2
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	621a      	str	r2, [r3, #32]
 800a57c:	e008      	b.n	800a590 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	1c59      	adds	r1, r3, #1
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	6211      	str	r1, [r2, #32]
 800a588:	781a      	ldrb	r2, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a594:	b29b      	uxth	r3, r3
 800a596:	3b01      	subs	r3, #1
 800a598:	b29b      	uxth	r3, r3
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	4619      	mov	r1, r3
 800a59e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10f      	bne.n	800a5c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68da      	ldr	r2, [r3, #12]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68da      	ldr	r2, [r3, #12]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	e000      	b.n	800a5ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a5c8:	2302      	movs	r3, #2
  }
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b082      	sub	sp, #8
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68da      	ldr	r2, [r3, #12]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7ff ff06 	bl	800a408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b08c      	sub	sp, #48	; 0x30
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a614:	b2db      	uxtb	r3, r3
 800a616:	2b22      	cmp	r3, #34	; 0x22
 800a618:	f040 80ab 	bne.w	800a772 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a624:	d117      	bne.n	800a656 <UART_Receive_IT+0x50>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d113      	bne.n	800a656 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a62e:	2300      	movs	r3, #0
 800a630:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a636:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	b29b      	uxth	r3, r3
 800a640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a644:	b29a      	uxth	r2, r3
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64e:	1c9a      	adds	r2, r3, #2
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	629a      	str	r2, [r3, #40]	; 0x28
 800a654:	e026      	b.n	800a6a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a65c:	2300      	movs	r3, #0
 800a65e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a668:	d007      	beq.n	800a67a <UART_Receive_IT+0x74>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10a      	bne.n	800a688 <UART_Receive_IT+0x82>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d106      	bne.n	800a688 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	b2da      	uxtb	r2, r3
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	701a      	strb	r2, [r3, #0]
 800a686:	e008      	b.n	800a69a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a694:	b2da      	uxtb	r2, r3
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a69e:	1c5a      	adds	r2, r3, #1
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d15a      	bne.n	800a76e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68da      	ldr	r2, [r3, #12]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f022 0220 	bic.w	r2, r2, #32
 800a6c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68da      	ldr	r2, [r3, #12]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	695a      	ldr	r2, [r3, #20]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f022 0201 	bic.w	r2, r2, #1
 800a6e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2220      	movs	r2, #32
 800a6ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d135      	bne.n	800a764 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	330c      	adds	r3, #12
 800a704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	e853 3f00 	ldrex	r3, [r3]
 800a70c:	613b      	str	r3, [r7, #16]
   return(result);
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f023 0310 	bic.w	r3, r3, #16
 800a714:	627b      	str	r3, [r7, #36]	; 0x24
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	330c      	adds	r3, #12
 800a71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a71e:	623a      	str	r2, [r7, #32]
 800a720:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a722:	69f9      	ldr	r1, [r7, #28]
 800a724:	6a3a      	ldr	r2, [r7, #32]
 800a726:	e841 2300 	strex	r3, r2, [r1]
 800a72a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1e5      	bne.n	800a6fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0310 	and.w	r3, r3, #16
 800a73c:	2b10      	cmp	r3, #16
 800a73e:	d10a      	bne.n	800a756 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a740:	2300      	movs	r3, #0
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a75a:	4619      	mov	r1, r3
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7ff fe67 	bl	800a430 <HAL_UARTEx_RxEventCallback>
 800a762:	e002      	b.n	800a76a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7f6 fd49 	bl	80011fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a76a:	2300      	movs	r3, #0
 800a76c:	e002      	b.n	800a774 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	e000      	b.n	800a774 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a772:	2302      	movs	r3, #2
  }
}
 800a774:	4618      	mov	r0, r3
 800a776:	3730      	adds	r7, #48	; 0x30
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	b09f      	sub	sp, #124	; 0x7c
 800a782:	af00      	add	r7, sp, #0
 800a784:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	4b9b      	ldr	r3, [pc, #620]	; (800a9f8 <UART_SetConfig+0x27c>)
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d904      	bls.n	800a79a <UART_SetConfig+0x1e>
 800a790:	f640 6156 	movw	r1, #3670	; 0xe56
 800a794:	4899      	ldr	r0, [pc, #612]	; (800a9fc <UART_SetConfig+0x280>)
 800a796:	f7f8 fb00 	bl	8002d9a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a79a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d009      	beq.n	800a7b6 <UART_SetConfig+0x3a>
 800a7a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7aa:	d004      	beq.n	800a7b6 <UART_SetConfig+0x3a>
 800a7ac:	f640 6157 	movw	r1, #3671	; 0xe57
 800a7b0:	4892      	ldr	r0, [pc, #584]	; (800a9fc <UART_SetConfig+0x280>)
 800a7b2:	f7f8 faf2 	bl	8002d9a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a7b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00e      	beq.n	800a7dc <UART_SetConfig+0x60>
 800a7be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c6:	d009      	beq.n	800a7dc <UART_SetConfig+0x60>
 800a7c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a7d0:	d004      	beq.n	800a7dc <UART_SetConfig+0x60>
 800a7d2:	f640 6158 	movw	r1, #3672	; 0xe58
 800a7d6:	4889      	ldr	r0, [pc, #548]	; (800a9fc <UART_SetConfig+0x280>)
 800a7d8:	f7f8 fadf 	bl	8002d9a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a7dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7de:	695a      	ldr	r2, [r3, #20]
 800a7e0:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d103      	bne.n	800a7f2 <UART_SetConfig+0x76>
 800a7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d104      	bne.n	800a7fc <UART_SetConfig+0x80>
 800a7f2:	f640 6159 	movw	r1, #3673	; 0xe59
 800a7f6:	4881      	ldr	r0, [pc, #516]	; (800a9fc <UART_SetConfig+0x280>)
 800a7f8:	f7f8 facf 	bl	8002d9a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a808:	68d9      	ldr	r1, [r3, #12]
 800a80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	ea40 0301 	orr.w	r3, r0, r1
 800a812:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a816:	689a      	ldr	r2, [r3, #8]
 800a818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	431a      	orrs	r2, r3
 800a81e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	431a      	orrs	r2, r3
 800a824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a826:	69db      	ldr	r3, [r3, #28]
 800a828:	4313      	orrs	r3, r2
 800a82a:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a82c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a836:	f021 010c 	bic.w	r1, r1, #12
 800a83a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a840:	430b      	orrs	r3, r1
 800a842:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a84e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a850:	6999      	ldr	r1, [r3, #24]
 800a852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	ea40 0301 	orr.w	r3, r0, r1
 800a85a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	4b67      	ldr	r3, [pc, #412]	; (800aa00 <UART_SetConfig+0x284>)
 800a862:	429a      	cmp	r2, r3
 800a864:	d004      	beq.n	800a870 <UART_SetConfig+0xf4>
 800a866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	4b66      	ldr	r3, [pc, #408]	; (800aa04 <UART_SetConfig+0x288>)
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d103      	bne.n	800a878 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a870:	f7fb fc5a 	bl	8006128 <HAL_RCC_GetPCLK2Freq>
 800a874:	6778      	str	r0, [r7, #116]	; 0x74
 800a876:	e002      	b.n	800a87e <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a878:	f7fb fc42 	bl	8006100 <HAL_RCC_GetPCLK1Freq>
 800a87c:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a87e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a886:	f040 80c1 	bne.w	800aa0c <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a88a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a88c:	461c      	mov	r4, r3
 800a88e:	f04f 0500 	mov.w	r5, #0
 800a892:	4622      	mov	r2, r4
 800a894:	462b      	mov	r3, r5
 800a896:	1891      	adds	r1, r2, r2
 800a898:	6439      	str	r1, [r7, #64]	; 0x40
 800a89a:	415b      	adcs	r3, r3
 800a89c:	647b      	str	r3, [r7, #68]	; 0x44
 800a89e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a8a2:	1912      	adds	r2, r2, r4
 800a8a4:	eb45 0303 	adc.w	r3, r5, r3
 800a8a8:	f04f 0000 	mov.w	r0, #0
 800a8ac:	f04f 0100 	mov.w	r1, #0
 800a8b0:	00d9      	lsls	r1, r3, #3
 800a8b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a8b6:	00d0      	lsls	r0, r2, #3
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	1911      	adds	r1, r2, r4
 800a8be:	6639      	str	r1, [r7, #96]	; 0x60
 800a8c0:	416b      	adcs	r3, r5
 800a8c2:	667b      	str	r3, [r7, #100]	; 0x64
 800a8c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	f04f 0300 	mov.w	r3, #0
 800a8ce:	1891      	adds	r1, r2, r2
 800a8d0:	63b9      	str	r1, [r7, #56]	; 0x38
 800a8d2:	415b      	adcs	r3, r3
 800a8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a8da:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a8de:	f7f6 f931 	bl	8000b44 <__aeabi_uldivmod>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	4b48      	ldr	r3, [pc, #288]	; (800aa08 <UART_SetConfig+0x28c>)
 800a8e8:	fba3 2302 	umull	r2, r3, r3, r2
 800a8ec:	095b      	lsrs	r3, r3, #5
 800a8ee:	011e      	lsls	r6, r3, #4
 800a8f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8f2:	461c      	mov	r4, r3
 800a8f4:	f04f 0500 	mov.w	r5, #0
 800a8f8:	4622      	mov	r2, r4
 800a8fa:	462b      	mov	r3, r5
 800a8fc:	1891      	adds	r1, r2, r2
 800a8fe:	6339      	str	r1, [r7, #48]	; 0x30
 800a900:	415b      	adcs	r3, r3
 800a902:	637b      	str	r3, [r7, #52]	; 0x34
 800a904:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a908:	1912      	adds	r2, r2, r4
 800a90a:	eb45 0303 	adc.w	r3, r5, r3
 800a90e:	f04f 0000 	mov.w	r0, #0
 800a912:	f04f 0100 	mov.w	r1, #0
 800a916:	00d9      	lsls	r1, r3, #3
 800a918:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a91c:	00d0      	lsls	r0, r2, #3
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	1911      	adds	r1, r2, r4
 800a924:	65b9      	str	r1, [r7, #88]	; 0x58
 800a926:	416b      	adcs	r3, r5
 800a928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a92a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	461a      	mov	r2, r3
 800a930:	f04f 0300 	mov.w	r3, #0
 800a934:	1891      	adds	r1, r2, r2
 800a936:	62b9      	str	r1, [r7, #40]	; 0x28
 800a938:	415b      	adcs	r3, r3
 800a93a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a93c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a940:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a944:	f7f6 f8fe 	bl	8000b44 <__aeabi_uldivmod>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	4b2e      	ldr	r3, [pc, #184]	; (800aa08 <UART_SetConfig+0x28c>)
 800a94e:	fba3 1302 	umull	r1, r3, r3, r2
 800a952:	095b      	lsrs	r3, r3, #5
 800a954:	2164      	movs	r1, #100	; 0x64
 800a956:	fb01 f303 	mul.w	r3, r1, r3
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	3332      	adds	r3, #50	; 0x32
 800a960:	4a29      	ldr	r2, [pc, #164]	; (800aa08 <UART_SetConfig+0x28c>)
 800a962:	fba2 2303 	umull	r2, r3, r2, r3
 800a966:	095b      	lsrs	r3, r3, #5
 800a968:	005b      	lsls	r3, r3, #1
 800a96a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a96e:	441e      	add	r6, r3
 800a970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a972:	4618      	mov	r0, r3
 800a974:	f04f 0100 	mov.w	r1, #0
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	1894      	adds	r4, r2, r2
 800a97e:	623c      	str	r4, [r7, #32]
 800a980:	415b      	adcs	r3, r3
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
 800a984:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a988:	1812      	adds	r2, r2, r0
 800a98a:	eb41 0303 	adc.w	r3, r1, r3
 800a98e:	f04f 0400 	mov.w	r4, #0
 800a992:	f04f 0500 	mov.w	r5, #0
 800a996:	00dd      	lsls	r5, r3, #3
 800a998:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a99c:	00d4      	lsls	r4, r2, #3
 800a99e:	4622      	mov	r2, r4
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	1814      	adds	r4, r2, r0
 800a9a4:	653c      	str	r4, [r7, #80]	; 0x50
 800a9a6:	414b      	adcs	r3, r1
 800a9a8:	657b      	str	r3, [r7, #84]	; 0x54
 800a9aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f04f 0300 	mov.w	r3, #0
 800a9b4:	1891      	adds	r1, r2, r2
 800a9b6:	61b9      	str	r1, [r7, #24]
 800a9b8:	415b      	adcs	r3, r3
 800a9ba:	61fb      	str	r3, [r7, #28]
 800a9bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a9c0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a9c4:	f7f6 f8be 	bl	8000b44 <__aeabi_uldivmod>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4b0e      	ldr	r3, [pc, #56]	; (800aa08 <UART_SetConfig+0x28c>)
 800a9ce:	fba3 1302 	umull	r1, r3, r3, r2
 800a9d2:	095b      	lsrs	r3, r3, #5
 800a9d4:	2164      	movs	r1, #100	; 0x64
 800a9d6:	fb01 f303 	mul.w	r3, r1, r3
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	00db      	lsls	r3, r3, #3
 800a9de:	3332      	adds	r3, #50	; 0x32
 800a9e0:	4a09      	ldr	r2, [pc, #36]	; (800aa08 <UART_SetConfig+0x28c>)
 800a9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e6:	095b      	lsrs	r3, r3, #5
 800a9e8:	f003 0207 	and.w	r2, r3, #7
 800a9ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4432      	add	r2, r6
 800a9f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a9f4:	e0c4      	b.n	800ab80 <UART_SetConfig+0x404>
 800a9f6:	bf00      	nop
 800a9f8:	00a037a0 	.word	0x00a037a0
 800a9fc:	0801072c 	.word	0x0801072c
 800aa00:	40011000 	.word	0x40011000
 800aa04:	40011400 	.word	0x40011400
 800aa08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa0e:	461c      	mov	r4, r3
 800aa10:	f04f 0500 	mov.w	r5, #0
 800aa14:	4622      	mov	r2, r4
 800aa16:	462b      	mov	r3, r5
 800aa18:	1891      	adds	r1, r2, r2
 800aa1a:	6139      	str	r1, [r7, #16]
 800aa1c:	415b      	adcs	r3, r3
 800aa1e:	617b      	str	r3, [r7, #20]
 800aa20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aa24:	1912      	adds	r2, r2, r4
 800aa26:	eb45 0303 	adc.w	r3, r5, r3
 800aa2a:	f04f 0000 	mov.w	r0, #0
 800aa2e:	f04f 0100 	mov.w	r1, #0
 800aa32:	00d9      	lsls	r1, r3, #3
 800aa34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aa38:	00d0      	lsls	r0, r2, #3
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	eb12 0804 	adds.w	r8, r2, r4
 800aa42:	eb43 0905 	adc.w	r9, r3, r5
 800aa46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f04f 0100 	mov.w	r1, #0
 800aa50:	f04f 0200 	mov.w	r2, #0
 800aa54:	f04f 0300 	mov.w	r3, #0
 800aa58:	008b      	lsls	r3, r1, #2
 800aa5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aa5e:	0082      	lsls	r2, r0, #2
 800aa60:	4640      	mov	r0, r8
 800aa62:	4649      	mov	r1, r9
 800aa64:	f7f6 f86e 	bl	8000b44 <__aeabi_uldivmod>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	4b47      	ldr	r3, [pc, #284]	; (800ab8c <UART_SetConfig+0x410>)
 800aa6e:	fba3 2302 	umull	r2, r3, r3, r2
 800aa72:	095b      	lsrs	r3, r3, #5
 800aa74:	011e      	lsls	r6, r3, #4
 800aa76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f04f 0100 	mov.w	r1, #0
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	1894      	adds	r4, r2, r2
 800aa84:	60bc      	str	r4, [r7, #8]
 800aa86:	415b      	adcs	r3, r3
 800aa88:	60fb      	str	r3, [r7, #12]
 800aa8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa8e:	1812      	adds	r2, r2, r0
 800aa90:	eb41 0303 	adc.w	r3, r1, r3
 800aa94:	f04f 0400 	mov.w	r4, #0
 800aa98:	f04f 0500 	mov.w	r5, #0
 800aa9c:	00dd      	lsls	r5, r3, #3
 800aa9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aaa2:	00d4      	lsls	r4, r2, #3
 800aaa4:	4622      	mov	r2, r4
 800aaa6:	462b      	mov	r3, r5
 800aaa8:	1814      	adds	r4, r2, r0
 800aaaa:	64bc      	str	r4, [r7, #72]	; 0x48
 800aaac:	414b      	adcs	r3, r1
 800aaae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f04f 0100 	mov.w	r1, #0
 800aaba:	f04f 0200 	mov.w	r2, #0
 800aabe:	f04f 0300 	mov.w	r3, #0
 800aac2:	008b      	lsls	r3, r1, #2
 800aac4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aac8:	0082      	lsls	r2, r0, #2
 800aaca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800aace:	f7f6 f839 	bl	8000b44 <__aeabi_uldivmod>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	4b2d      	ldr	r3, [pc, #180]	; (800ab8c <UART_SetConfig+0x410>)
 800aad8:	fba3 1302 	umull	r1, r3, r3, r2
 800aadc:	095b      	lsrs	r3, r3, #5
 800aade:	2164      	movs	r1, #100	; 0x64
 800aae0:	fb01 f303 	mul.w	r3, r1, r3
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	011b      	lsls	r3, r3, #4
 800aae8:	3332      	adds	r3, #50	; 0x32
 800aaea:	4a28      	ldr	r2, [pc, #160]	; (800ab8c <UART_SetConfig+0x410>)
 800aaec:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf0:	095b      	lsrs	r3, r3, #5
 800aaf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aaf6:	441e      	add	r6, r3
 800aaf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aafa:	4618      	mov	r0, r3
 800aafc:	f04f 0100 	mov.w	r1, #0
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	1894      	adds	r4, r2, r2
 800ab06:	603c      	str	r4, [r7, #0]
 800ab08:	415b      	adcs	r3, r3
 800ab0a:	607b      	str	r3, [r7, #4]
 800ab0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab10:	1812      	adds	r2, r2, r0
 800ab12:	eb41 0303 	adc.w	r3, r1, r3
 800ab16:	f04f 0400 	mov.w	r4, #0
 800ab1a:	f04f 0500 	mov.w	r5, #0
 800ab1e:	00dd      	lsls	r5, r3, #3
 800ab20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ab24:	00d4      	lsls	r4, r2, #3
 800ab26:	4622      	mov	r2, r4
 800ab28:	462b      	mov	r3, r5
 800ab2a:	eb12 0a00 	adds.w	sl, r2, r0
 800ab2e:	eb43 0b01 	adc.w	fp, r3, r1
 800ab32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f04f 0100 	mov.w	r1, #0
 800ab3c:	f04f 0200 	mov.w	r2, #0
 800ab40:	f04f 0300 	mov.w	r3, #0
 800ab44:	008b      	lsls	r3, r1, #2
 800ab46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ab4a:	0082      	lsls	r2, r0, #2
 800ab4c:	4650      	mov	r0, sl
 800ab4e:	4659      	mov	r1, fp
 800ab50:	f7f5 fff8 	bl	8000b44 <__aeabi_uldivmod>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4b0c      	ldr	r3, [pc, #48]	; (800ab8c <UART_SetConfig+0x410>)
 800ab5a:	fba3 1302 	umull	r1, r3, r3, r2
 800ab5e:	095b      	lsrs	r3, r3, #5
 800ab60:	2164      	movs	r1, #100	; 0x64
 800ab62:	fb01 f303 	mul.w	r3, r1, r3
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	011b      	lsls	r3, r3, #4
 800ab6a:	3332      	adds	r3, #50	; 0x32
 800ab6c:	4a07      	ldr	r2, [pc, #28]	; (800ab8c <UART_SetConfig+0x410>)
 800ab6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab72:	095b      	lsrs	r3, r3, #5
 800ab74:	f003 020f 	and.w	r2, r3, #15
 800ab78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4432      	add	r2, r6
 800ab7e:	609a      	str	r2, [r3, #8]
}
 800ab80:	bf00      	nop
 800ab82:	377c      	adds	r7, #124	; 0x7c
 800ab84:	46bd      	mov	sp, r7
 800ab86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8a:	bf00      	nop
 800ab8c:	51eb851f 	.word	0x51eb851f

0800ab90 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800ab9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d105      	bne.n	800abb0 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800aba4:	2101      	movs	r1, #1
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f001 f824 	bl	800bbf4 <VL53L1_data_init>
 800abac:	4603      	mov	r3, r0
 800abae:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 800abb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d103      	bne.n	800abc0 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800abc0:	2300      	movs	r3, #0
 800abc2:	73bb      	strb	r3, [r7, #14]
 800abc4:	e012      	b.n	800abec <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 800abc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d112      	bne.n	800abf4 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	2201      	movs	r2, #1
 800abd4:	4619      	mov	r1, r3
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fbd3 	bl	800b382 <VL53L1_SetLimitCheckEnable>
 800abdc:	4603      	mov	r3, r0
 800abde:	461a      	mov	r2, r3
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800abe6:	7bbb      	ldrb	r3, [r7, #14]
 800abe8:	3301      	adds	r3, #1
 800abea:	73bb      	strb	r3, [r7, #14]
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d9e9      	bls.n	800abc6 <VL53L1_DataInit+0x36>
 800abf2:	e000      	b.n	800abf6 <VL53L1_DataInit+0x66>
		else
			break;
 800abf4:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 800abf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2203      	movs	r2, #3
 800ac12:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800ac16:	2320      	movs	r3, #32
 800ac18:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	7bba      	ldrb	r2, [r7, #14]
 800ac1e:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800ac20:	2108      	movs	r1, #8
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f8f9 	bl	800ae1a <VL53L1_SetPresetMode>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2208      	movs	r2, #8
 800ac30:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800ac34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800ac4c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f004 ffe0 	bl	800fc16 <VL53L1_poll_for_boot_completion>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800ac5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
	...

0800ac68 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b087      	sub	sp, #28
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	4603      	mov	r3, r0
 800ac70:	603a      	str	r2, [r7, #0]
 800ac72:	71fb      	strb	r3, [r7, #7]
 800ac74:	460b      	mov	r3, r1
 800ac76:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800ac7c:	4a2c      	ldr	r2, [pc, #176]	; (800ad30 <ComputeDevicePresetMode+0xc8>)
 800ac7e:	f107 0310 	add.w	r3, r7, #16
 800ac82:	6812      	ldr	r2, [r2, #0]
 800ac84:	4611      	mov	r1, r2
 800ac86:	8019      	strh	r1, [r3, #0]
 800ac88:	3302      	adds	r3, #2
 800ac8a:	0c12      	lsrs	r2, r2, #16
 800ac8c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800ac8e:	4a29      	ldr	r2, [pc, #164]	; (800ad34 <ComputeDevicePresetMode+0xcc>)
 800ac90:	f107 030c 	add.w	r3, r7, #12
 800ac94:	6812      	ldr	r2, [r2, #0]
 800ac96:	4611      	mov	r1, r2
 800ac98:	8019      	strh	r1, [r3, #0]
 800ac9a:	3302      	adds	r3, #2
 800ac9c:	0c12      	lsrs	r2, r2, #16
 800ac9e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800aca0:	4a25      	ldr	r2, [pc, #148]	; (800ad38 <ComputeDevicePresetMode+0xd0>)
 800aca2:	f107 0308 	add.w	r3, r7, #8
 800aca6:	6812      	ldr	r2, [r2, #0]
 800aca8:	4611      	mov	r1, r2
 800acaa:	8019      	strh	r1, [r3, #0]
 800acac:	3302      	adds	r3, #2
 800acae:	0c12      	lsrs	r2, r2, #16
 800acb0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2201      	movs	r2, #1
 800acb6:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800acb8:	79bb      	ldrb	r3, [r7, #6]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d002      	beq.n	800acc4 <ComputeDevicePresetMode+0x5c>
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d003      	beq.n	800acca <ComputeDevicePresetMode+0x62>
 800acc2:	e005      	b.n	800acd0 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	75bb      	strb	r3, [r7, #22]
		break;
 800acc8:	e004      	b.n	800acd4 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800acca:	2301      	movs	r3, #1
 800accc:	75bb      	strb	r3, [r7, #22]
		break;
 800acce:	e001      	b.n	800acd4 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 800acd0:	2302      	movs	r3, #2
 800acd2:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800acd4:	79fb      	ldrb	r3, [r7, #7]
 800acd6:	2b08      	cmp	r3, #8
 800acd8:	d017      	beq.n	800ad0a <ComputeDevicePresetMode+0xa2>
 800acda:	2b08      	cmp	r3, #8
 800acdc:	dc1e      	bgt.n	800ad1c <ComputeDevicePresetMode+0xb4>
 800acde:	2b03      	cmp	r3, #3
 800ace0:	d00a      	beq.n	800acf8 <ComputeDevicePresetMode+0x90>
 800ace2:	2b04      	cmp	r3, #4
 800ace4:	d11a      	bne.n	800ad1c <ComputeDevicePresetMode+0xb4>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800ace6:	7dbb      	ldrb	r3, [r7, #22]
 800ace8:	f107 0218 	add.w	r2, r7, #24
 800acec:	4413      	add	r3, r2
 800acee:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	701a      	strb	r2, [r3, #0]
		break;
 800acf6:	e013      	b.n	800ad20 <ComputeDevicePresetMode+0xb8>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800acf8:	7dbb      	ldrb	r3, [r7, #22]
 800acfa:	f107 0218 	add.w	r2, r7, #24
 800acfe:	4413      	add	r3, r2
 800ad00:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	701a      	strb	r2, [r3, #0]
		break;
 800ad08:	e00a      	b.n	800ad20 <ComputeDevicePresetMode+0xb8>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800ad0a:	7dbb      	ldrb	r3, [r7, #22]
 800ad0c:	f107 0218 	add.w	r2, r7, #24
 800ad10:	4413      	add	r3, r2
 800ad12:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	701a      	strb	r2, [r3, #0]
		break;
 800ad1a:	e001      	b.n	800ad20 <ComputeDevicePresetMode+0xb8>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800ad1c:	23f8      	movs	r3, #248	; 0xf8
 800ad1e:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800ad20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	371c      	adds	r7, #28
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	08010794 	.word	0x08010794
 800ad34:	08010798 	.word	0x08010798
 800ad38:	0801079c 	.word	0x0801079c

0800ad3c <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800ad3c:	b5b0      	push	{r4, r5, r7, lr}
 800ad3e:	b08e      	sub	sp, #56	; 0x38
 800ad40:	af04      	add	r7, sp, #16
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	607b      	str	r3, [r7, #4]
 800ad46:	460b      	mov	r3, r1
 800ad48:	72fb      	strb	r3, [r7, #11]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800ad54:	2300      	movs	r3, #0
 800ad56:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800ad64:	7afb      	ldrb	r3, [r7, #11]
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d002      	beq.n	800ad70 <SetPresetMode+0x34>
 800ad6a:	7afb      	ldrb	r3, [r7, #11]
 800ad6c:	2b08      	cmp	r3, #8
 800ad6e:	d103      	bne.n	800ad78 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800ad70:	2340      	movs	r3, #64	; 0x40
 800ad72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ad76:	e002      	b.n	800ad7e <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800ad78:	2320      	movs	r3, #32
 800ad7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800ad7e:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800ad82:	7ab9      	ldrb	r1, [r7, #10]
 800ad84:	7afb      	ldrb	r3, [r7, #11]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7ff ff6e 	bl	800ac68 <ComputeDevicePresetMode>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800ad92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d112      	bne.n	800adc0 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800ad9a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800ad9e:	f107 001c 	add.w	r0, r7, #28
 800ada2:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800ada6:	f107 0314 	add.w	r3, r7, #20
 800adaa:	9301      	str	r3, [sp, #4]
 800adac:	f107 0318 	add.w	r3, r7, #24
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	4603      	mov	r3, r0
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f001 f9dd 	bl	800c174 <VL53L1_get_preset_mode_timing_cfg>
 800adba:	4603      	mov	r3, r0
 800adbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800adc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d112      	bne.n	800adee <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 800adc8:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800adcc:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800adce:	69fd      	ldr	r5, [r7, #28]
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	6879      	ldr	r1, [r7, #4]
 800add6:	9102      	str	r1, [sp, #8]
 800add8:	9201      	str	r2, [sp, #4]
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	462b      	mov	r3, r5
 800adde:	4622      	mov	r2, r4
 800ade0:	4601      	mov	r1, r0
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f001 fa70 	bl	800c2c8 <VL53L1_set_preset_mode>
 800ade8:	4603      	mov	r3, r0
 800adea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800adee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d103      	bne.n	800adfe <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800adfc:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800adfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d103      	bne.n	800ae0e <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	7afa      	ldrb	r2, [r7, #11]
 800ae0a:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800ae0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3728      	adds	r7, #40	; 0x28
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bdb0      	pop	{r4, r5, r7, pc}

0800ae1a <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	460b      	mov	r3, r1
 800ae24:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ae26:	2300      	movs	r3, #0
 800ae28:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f003 fd2c 	bl	800e88c <VL53L1_low_power_auto_data_init>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 800ae38:	7bba      	ldrb	r2, [r7, #14]
 800ae3a:	78f9      	ldrb	r1, [r7, #3]
 800ae3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7ff ff7b 	bl	800ad3c <SetPresetMode>
 800ae46:	4603      	mov	r3, r0
 800ae48:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800ae4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d117      	bne.n	800ae82 <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800ae52:	78fb      	ldrb	r3, [r7, #3]
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	d005      	beq.n	800ae64 <VL53L1_SetPresetMode+0x4a>
 800ae58:	78fb      	ldrb	r3, [r7, #3]
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	d002      	beq.n	800ae64 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800ae5e:	78fb      	ldrb	r3, [r7, #3]
 800ae60:	2b08      	cmp	r3, #8
 800ae62:	d107      	bne.n	800ae74 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800ae64:	f24a 0128 	movw	r1, #41000	; 0xa028
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f891 	bl	800af90 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	73fb      	strb	r3, [r7, #15]
 800ae72:	e006      	b.n	800ae82 <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800ae74:	f248 2135 	movw	r1, #33333	; 0x8235
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f889 	bl	800af90 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ae82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d106      	bne.n	800ae98 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800ae8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fa0a 	bl	800b2a8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800ae94:	4603      	mov	r3, r0
 800ae96:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b088      	sub	sp, #32
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800aec6:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800aec8:	78fb      	ldrb	r3, [r7, #3]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d008      	beq.n	800aee0 <VL53L1_SetDistanceMode+0x3c>
 800aece:	78fb      	ldrb	r3, [r7, #3]
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d005      	beq.n	800aee0 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800aed4:	78fb      	ldrb	r3, [r7, #3]
 800aed6:	2b03      	cmp	r3, #3
 800aed8:	d002      	beq.n	800aee0 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800aeda:	f06f 0303 	mvn.w	r3, #3
 800aede:	e052      	b.n	800af86 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 800aee0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d107      	bne.n	800aef8 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800aee8:	f107 0308 	add.w	r3, r7, #8
 800aeec:	4619      	mov	r1, r3
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f001 f8e9 	bl	800c0c6 <VL53L1_get_user_zone>
 800aef4:	4603      	mov	r3, r0
 800aef6:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800aefe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10a      	bne.n	800af1c <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800af06:	f107 0314 	add.w	r3, r7, #20
 800af0a:	f107 0210 	add.w	r2, r7, #16
 800af0e:	f107 010c 	add.w	r1, r7, #12
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f001 f812 	bl	800bf3c <VL53L1_get_timeouts_us>
 800af18:	4603      	mov	r3, r0
 800af1a:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800af1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d107      	bne.n	800af34 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 800af24:	78fa      	ldrb	r2, [r7, #3]
 800af26:	7fb9      	ldrb	r1, [r7, #30]
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7ff ff06 	bl	800ad3c <SetPresetMode>
 800af30:	4603      	mov	r3, r0
 800af32:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800af34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d103      	bne.n	800af44 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	78fa      	ldrb	r2, [r7, #3]
 800af40:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800af44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10e      	bne.n	800af6a <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800af4c:	68f9      	ldr	r1, [r7, #12]
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 ffba 	bl	800becc <VL53L1_set_timeouts_us>
 800af58:	4603      	mov	r3, r0
 800af5a:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800af5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d102      	bne.n	800af6a <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800af6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d107      	bne.n	800af82 <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800af72:	f107 0308 	add.w	r3, r7, #8
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f001 f881 	bl	800c080 <VL53L1_set_user_zone>
 800af7e:	4603      	mov	r3, r0
 800af80:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800af82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3720      	adds	r7, #32
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
	...

0800af90 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b08c      	sub	sp, #48	; 0x30
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800af9a:	2300      	movs	r3, #0
 800af9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800afb4:	4b64      	ldr	r3, [pc, #400]	; (800b148 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 800afb6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	4a64      	ldr	r2, [pc, #400]	; (800b14c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d902      	bls.n	800afc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800afc0:	23fc      	movs	r3, #252	; 0xfc
 800afc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800afc6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d109      	bne.n	800afe2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800afce:	f107 031a 	add.w	r3, r7, #26
 800afd2:	461a      	mov	r2, r3
 800afd4:	2105      	movs	r1, #5
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fa8d 	bl	800b4f6 <VL53L1_GetSequenceStepEnable>
 800afdc:	4603      	mov	r3, r0
 800afde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800afe2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d109      	bne.n	800affe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800afea:	f107 0319 	add.w	r3, r7, #25
 800afee:	461a      	mov	r2, r3
 800aff0:	2106      	movs	r1, #6
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fa7f 	bl	800b4f6 <VL53L1_GetSequenceStepEnable>
 800aff8:	4603      	mov	r3, r0
 800affa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800affe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10b      	bne.n	800b01e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800b006:	f107 0314 	add.w	r3, r7, #20
 800b00a:	f107 0210 	add.w	r2, r7, #16
 800b00e:	f107 010c 	add.w	r1, r7, #12
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 ff92 	bl	800bf3c <VL53L1_get_timeouts_us>
 800b018:	4603      	mov	r3, r0
 800b01a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800b01e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b022:	2b00      	cmp	r3, #0
 800b024:	f040 8081 	bne.w	800b12a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800b02e:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800b030:	2300      	movs	r3, #0
 800b032:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800b034:	2301      	movs	r3, #1
 800b036:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800b038:	7efb      	ldrb	r3, [r7, #27]
 800b03a:	2b08      	cmp	r3, #8
 800b03c:	d026      	beq.n	800b08c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800b03e:	2b08      	cmp	r3, #8
 800b040:	dc43      	bgt.n	800b0ca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800b042:	2b03      	cmp	r3, #3
 800b044:	d00f      	beq.n	800b066 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 800b046:	2b04      	cmp	r3, #4
 800b048:	d13f      	bne.n	800b0ca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800b04a:	7ebb      	ldrb	r3, [r7, #26]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d002      	beq.n	800b056 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800b050:	7e7b      	ldrb	r3, [r7, #25]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d103      	bne.n	800b05e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 800b056:	f241 3388 	movw	r3, #5000	; 0x1388
 800b05a:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800b05c:	e038      	b.n	800b0d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800b05e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b062:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b064:	e034      	b.n	800b0d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	005b      	lsls	r3, r3, #1
 800b06a:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800b06c:	7ebb      	ldrb	r3, [r7, #26]
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d002      	beq.n	800b078 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800b072:	7e7b      	ldrb	r3, [r7, #25]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d103      	bne.n	800b080 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 800b078:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800b07c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b07e:	e002      	b.n	800b086 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800b080:	f245 4360 	movw	r3, #21600	; 0x5460
 800b084:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800b086:	2302      	movs	r3, #2
 800b088:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800b08a:	e021      	b.n	800b0d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	005b      	lsls	r3, r3, #1
 800b090:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800b092:	23f5      	movs	r3, #245	; 0xf5
 800b094:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800b096:	f107 0308 	add.w	r3, r7, #8
 800b09a:	461a      	mov	r2, r3
 800b09c:	f248 0136 	movw	r1, #32822	; 0x8036
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f001 ff75 	bl	800cf90 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	dd07      	ble.n	800b0bc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	22f5      	movs	r2, #245	; 0xf5
 800b0b0:	fb02 f303 	mul.w	r3, r2, r3
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	6a3b      	ldr	r3, [r7, #32]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800b0bc:	6a3b      	ldr	r3, [r7, #32]
 800b0be:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800b0c2:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800b0c8:	e002      	b.n	800b0d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800b0ca:	23f8      	movs	r3, #248	; 0xf8
 800b0cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d803      	bhi.n	800b0e0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800b0d8:	23fc      	movs	r3, #252	; 0xfc
 800b0da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b0de:	e003      	b.n	800b0e8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e4:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800b0e6:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800b0e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d11c      	bne.n	800b12a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	69fa      	ldr	r2, [r7, #28]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d203      	bcs.n	800b100 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800b0f8:	23fc      	movs	r3, #252	; 0xfc
 800b0fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b0fe:	e00d      	b.n	800b11c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 800b100:	697a      	ldr	r2, [r7, #20]
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	fbb2 f3f3 	udiv	r3, r2, r3
 800b108:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800b10a:	68f9      	ldr	r1, [r7, #12]
 800b10c:	693a      	ldr	r2, [r7, #16]
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fedb 	bl	800becc <VL53L1_set_timeouts_us>
 800b116:	4603      	mov	r3, r0
 800b118:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800b11c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b120:	2b00      	cmp	r3, #0
 800b122:	d102      	bne.n	800b12a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800b12a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d103      	bne.n	800b13a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b13a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3730      	adds	r7, #48	; 0x30
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	00086470 	.word	0x00086470
 800b14c:	00989680 	.word	0x00989680

0800b150 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08c      	sub	sp, #48	; 0x30
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b15a:	2300      	movs	r3, #0
 800b15c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800b160:	2300      	movs	r3, #0
 800b162:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800b170:	2300      	movs	r3, #0
 800b172:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2200      	movs	r2, #0
 800b17c:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800b17e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b182:	2b00      	cmp	r3, #0
 800b184:	d109      	bne.n	800b19a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800b186:	f107 031b 	add.w	r3, r7, #27
 800b18a:	461a      	mov	r2, r3
 800b18c:	2105      	movs	r1, #5
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f9b1 	bl	800b4f6 <VL53L1_GetSequenceStepEnable>
 800b194:	4603      	mov	r3, r0
 800b196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800b19a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d109      	bne.n	800b1b6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800b1a2:	f107 031a 	add.w	r3, r7, #26
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	2106      	movs	r1, #6
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f9a3 	bl	800b4f6 <VL53L1_GetSequenceStepEnable>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800b1b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d10b      	bne.n	800b1d6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800b1be:	f107 0310 	add.w	r3, r7, #16
 800b1c2:	f107 0214 	add.w	r2, r7, #20
 800b1c6:	f107 010c 	add.w	r1, r7, #12
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 feb6 	bl	800bf3c <VL53L1_get_timeouts_us>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800b1d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d156      	bne.n	800b28c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800b1e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 800b1e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1ec:	2b08      	cmp	r3, #8
 800b1ee:	d02a      	beq.n	800b246 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 800b1f0:	2b08      	cmp	r3, #8
 800b1f2:	dc47      	bgt.n	800b284 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 800b1f4:	2b03      	cmp	r3, #3
 800b1f6:	d012      	beq.n	800b21e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 800b1f8:	2b04      	cmp	r3, #4
 800b1fa:	d143      	bne.n	800b284 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800b1fc:	7efb      	ldrb	r3, [r7, #27]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d002      	beq.n	800b208 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800b202:	7ebb      	ldrb	r3, [r7, #26]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d105      	bne.n	800b214 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b20e:	3308      	adds	r3, #8
 800b210:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800b212:	e03c      	b.n	800b28e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b21a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b21c:	e037      	b.n	800b28e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800b21e:	7efb      	ldrb	r3, [r7, #27]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d002      	beq.n	800b22a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 800b224:	7ebb      	ldrb	r3, [r7, #26]
 800b226:	2b01      	cmp	r3, #1
 800b228:	d106      	bne.n	800b238 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800b230:	3334      	adds	r3, #52	; 0x34
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800b236:	e02a      	b.n	800b28e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800b23e:	3330      	adds	r3, #48	; 0x30
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b244:	e023      	b.n	800b28e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800b246:	23f5      	movs	r3, #245	; 0xf5
 800b248:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800b24a:	f107 0308 	add.w	r3, r7, #8
 800b24e:	461a      	mov	r2, r3
 800b250:	f248 0136 	movw	r1, #32822	; 0x8036
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f001 fe9b 	bl	800cf90 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	dd07      	ble.n	800b270 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	22f5      	movs	r2, #245	; 0xf5
 800b264:	fb02 f303 	mul.w	r3, r2, r3
 800b268:	461a      	mov	r2, r3
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	4413      	add	r3, r2
 800b26e:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800b276:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	005b      	lsls	r3, r3, #1
 800b27c:	69fa      	ldr	r2, [r7, #28]
 800b27e:	4413      	add	r3, r2
 800b280:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b282:	e004      	b.n	800b28e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800b284:	23f8      	movs	r3, #248	; 0xf8
 800b286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b28a:	e000      	b.n	800b28e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 800b28c:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800b28e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b292:	2b00      	cmp	r3, #0
 800b294:	d102      	bne.n	800b29c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b29a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b29c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3730      	adds	r7, #48	; 0x30
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	019b      	lsls	r3, r3, #6
 800b2be:	4a09      	ldr	r2, [pc, #36]	; (800b2e4 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800b2c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c4:	099b      	lsrs	r3, r3, #6
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800b2cc:	68b9      	ldr	r1, [r7, #8]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fdad 	bl	800be2e <VL53L1_set_inter_measurement_period_ms>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800b2d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	10624dd3 	.word	0x10624dd3

0800b2e8 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800b2f6:	f107 0308 	add.w	r3, r7, #8
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fdbf 	bl	800be80 <VL53L1_get_inter_measurement_period_ms>
 800b302:	4603      	mov	r3, r0
 800b304:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	019b      	lsls	r3, r3, #6
 800b30c:	4907      	ldr	r1, [pc, #28]	; (800b32c <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800b30e:	fba1 1303 	umull	r1, r3, r1, r3
 800b312:	099b      	lsrs	r3, r3, #6
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800b31e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	10624dd3 	.word	0x10624dd3

0800b330 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	460b      	mov	r3, r1
 800b33a:	607a      	str	r2, [r7, #4]
 800b33c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b33e:	2300      	movs	r3, #0
 800b340:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b342:	897b      	ldrh	r3, [r7, #10]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <SetLimitValue+0x1e>
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d009      	beq.n	800b360 <SetLimitValue+0x30>
 800b34c:	e011      	b.n	800b372 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	0b9b      	lsrs	r3, r3, #14
 800b352:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800b354:	8abb      	ldrh	r3, [r7, #20]
 800b356:	4619      	mov	r1, r3
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f001 f941 	bl	800c5e0 <VL53L1_set_lite_sigma_threshold>
		break;
 800b35e:	e00a      	b.n	800b376 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	0a5b      	lsrs	r3, r3, #9
 800b364:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800b366:	8abb      	ldrh	r3, [r7, #20]
 800b368:	4619      	mov	r1, r3
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f001 f964 	bl	800c638 <VL53L1_set_lite_min_count_rate>
		break;
 800b370:	e001      	b.n	800b376 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b372:	23fc      	movs	r3, #252	; 0xfc
 800b374:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3718      	adds	r7, #24
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b084      	sub	sp, #16
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
 800b38a:	460b      	mov	r3, r1
 800b38c:	807b      	strh	r3, [r7, #2]
 800b38e:	4613      	mov	r3, r2
 800b390:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b392:	2300      	movs	r3, #0
 800b394:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800b396:	2300      	movs	r3, #0
 800b398:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b39a:	887b      	ldrh	r3, [r7, #2]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d902      	bls.n	800b3a6 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b3a0:	23fc      	movs	r3, #252	; 0xfc
 800b3a2:	73fb      	strb	r3, [r7, #15]
 800b3a4:	e014      	b.n	800b3d0 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800b3a6:	787b      	ldrb	r3, [r7, #1]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d102      	bne.n	800b3b2 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	60bb      	str	r3, [r7, #8]
 800b3b0:	e006      	b.n	800b3c0 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b3b2:	887b      	ldrh	r3, [r7, #2]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	33e0      	adds	r3, #224	; 0xe0
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4413      	add	r3, r2
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800b3c0:	887b      	ldrh	r3, [r7, #2]
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7ff ffb2 	bl	800b330 <SetLimitValue>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800b3d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10c      	bne.n	800b3f2 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b3d8:	787b      	ldrb	r3, [r7, #1]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	bf14      	ite	ne
 800b3de:	2301      	movne	r3, #1
 800b3e0:	2300      	moveq	r3, #0
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	887b      	ldrh	r3, [r7, #2]
 800b3e6:	4611      	mov	r1, r2
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	460a      	mov	r2, r1
 800b3ee:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800b3f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800b3fe:	b480      	push	{r7}
 800b400:	b087      	sub	sp, #28
 800b402:	af00      	add	r7, sp, #0
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	460b      	mov	r3, r1
 800b408:	607a      	str	r2, [r7, #4]
 800b40a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b40c:	2300      	movs	r3, #0
 800b40e:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b410:	897b      	ldrh	r3, [r7, #10]
 800b412:	2b01      	cmp	r3, #1
 800b414:	d905      	bls.n	800b422 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b416:	23fc      	movs	r3, #252	; 0xfc
 800b418:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	701a      	strb	r2, [r3, #0]
 800b420:	e008      	b.n	800b434 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b422:	897b      	ldrh	r3, [r7, #10]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	4413      	add	r3, r2
 800b428:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800b42c:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	7dba      	ldrb	r2, [r7, #22]
 800b432:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	371c      	adds	r7, #28
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b088      	sub	sp, #32
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	460b      	mov	r3, r1
 800b44e:	607a      	str	r2, [r7, #4]
 800b450:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b452:	2300      	movs	r3, #0
 800b454:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800b456:	2300      	movs	r3, #0
 800b458:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b45a:	897b      	ldrh	r3, [r7, #10]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <VL53L1_GetLimitCheckValue+0x22>
 800b460:	2b01      	cmp	r3, #1
 800b462:	d00c      	beq.n	800b47e <VL53L1_GetLimitCheckValue+0x3a>
 800b464:	e017      	b.n	800b496 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800b466:	f107 0314 	add.w	r3, r7, #20
 800b46a:	4619      	mov	r1, r3
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f001 f8a1 	bl	800c5b4 <VL53L1_get_lite_sigma_threshold>
 800b472:	4603      	mov	r3, r0
 800b474:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800b476:	8abb      	ldrh	r3, [r7, #20]
 800b478:	039b      	lsls	r3, r3, #14
 800b47a:	61bb      	str	r3, [r7, #24]
		break;
 800b47c:	e00d      	b.n	800b49a <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800b47e:	f107 0316 	add.w	r3, r7, #22
 800b482:	4619      	mov	r1, r3
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f001 f8c1 	bl	800c60c <VL53L1_get_lite_min_count_rate>
 800b48a:	4603      	mov	r3, r0
 800b48c:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800b48e:	8afb      	ldrh	r3, [r7, #22]
 800b490:	025b      	lsls	r3, r3, #9
 800b492:	61bb      	str	r3, [r7, #24]
		break;
 800b494:	e001      	b.n	800b49a <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b496:	23fc      	movs	r3, #252	; 0xfc
 800b498:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800b49a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d123      	bne.n	800b4ea <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d110      	bne.n	800b4ca <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800b4a8:	897b      	ldrh	r3, [r7, #10]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	33e0      	adds	r3, #224	; 0xe0
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	69ba      	ldr	r2, [r7, #24]
 800b4ba:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b4bc:	897b      	ldrh	r3, [r7, #10]
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800b4c8:	e00f      	b.n	800b4ea <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	69ba      	ldr	r2, [r7, #24]
 800b4ce:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b4d0:	897b      	ldrh	r3, [r7, #10]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	33e0      	adds	r3, #224	; 0xe0
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4413      	add	r3, r2
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b4de:	897b      	ldrh	r3, [r7, #10]
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800b4ea:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3720      	adds	r7, #32
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b086      	sub	sp, #24
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	60f8      	str	r0, [r7, #12]
 800b4fe:	460b      	mov	r3, r1
 800b500:	607a      	str	r2, [r7, #4]
 800b502:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b504:	2300      	movs	r3, #0
 800b506:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800b508:	7afb      	ldrb	r3, [r7, #11]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	4619      	mov	r1, r3
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f000 fd7f 	bl	800c012 <VL53L1_get_sequence_config_bit>
 800b514:	4603      	mov	r3, r0
 800b516:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800b518:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b52c:	2300      	movs	r3, #0
 800b52e:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	789b      	ldrb	r3, [r3, #2]
 800b534:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800b536:	7dbb      	ldrb	r3, [r7, #22]
 800b538:	2b40      	cmp	r3, #64	; 0x40
 800b53a:	d002      	beq.n	800b542 <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 fa6b 	bl	800ba18 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800b548:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 800b54a:	7d7b      	ldrb	r3, [r7, #21]
 800b54c:	2b63      	cmp	r3, #99	; 0x63
 800b54e:	dc12      	bgt.n	800b576 <VL53L1_StartMeasurement+0x52>
 800b550:	2b62      	cmp	r3, #98	; 0x62
 800b552:	da0d      	bge.n	800b570 <VL53L1_StartMeasurement+0x4c>
 800b554:	2b05      	cmp	r3, #5
 800b556:	dc0e      	bgt.n	800b576 <VL53L1_StartMeasurement+0x52>
 800b558:	2b04      	cmp	r3, #4
 800b55a:	da09      	bge.n	800b570 <VL53L1_StartMeasurement+0x4c>
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	dc02      	bgt.n	800b566 <VL53L1_StartMeasurement+0x42>
 800b560:	2b00      	cmp	r3, #0
 800b562:	da05      	bge.n	800b570 <VL53L1_StartMeasurement+0x4c>
 800b564:	e007      	b.n	800b576 <VL53L1_StartMeasurement+0x52>
 800b566:	2b03      	cmp	r3, #3
 800b568:	d105      	bne.n	800b576 <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800b56a:	2300      	movs	r3, #0
 800b56c:	75fb      	strb	r3, [r7, #23]
		break;
 800b56e:	e004      	b.n	800b57a <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800b570:	23f2      	movs	r3, #242	; 0xf2
 800b572:	75fb      	strb	r3, [r7, #23]
		break;
 800b574:	e001      	b.n	800b57a <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800b576:	23fd      	movs	r3, #253	; 0xfd
 800b578:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800b57a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d11f      	bne.n	800b5c2 <VL53L1_StartMeasurement+0x9e>
 800b582:	7dbb      	ldrb	r3, [r7, #22]
 800b584:	2b40      	cmp	r3, #64	; 0x40
 800b586:	d11c      	bne.n	800b5c2 <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b588:	f107 0310 	add.w	r3, r7, #16
 800b58c:	4619      	mov	r1, r3
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7ff fdde 	bl	800b150 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800b594:	4603      	mov	r3, r0
 800b596:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	4a17      	ldr	r2, [pc, #92]	; (800b5f8 <VL53L1_StartMeasurement+0xd4>)
 800b59c:	fba2 2303 	umull	r2, r3, r2, r3
 800b5a0:	099b      	lsrs	r3, r3, #6
 800b5a2:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b5a4:	f107 030c 	add.w	r3, r7, #12
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff fe9c 	bl	800b2e8 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	1d1a      	adds	r2, r3, #4
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d901      	bls.n	800b5c2 <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800b5be:	23fc      	movs	r3, #252	; 0xfc
 800b5c0:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800b5c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d107      	bne.n	800b5da <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 800b5ca:	7dbb      	ldrb	r3, [r7, #22]
 800b5cc:	2206      	movs	r2, #6
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f001 f867 	bl	800c6a4 <VL53L1_init_and_start_range>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800b5da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d103      	bne.n	800b5ea <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2204      	movs	r2, #4
 800b5e6:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800b5ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3718      	adds	r7, #24
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	10624dd3 	.word	0x10624dd3

0800b5fc <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b604:	2300      	movs	r3, #0
 800b606:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	789b      	ldrb	r3, [r3, #2]
 800b60c:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800b60e:	7bbb      	ldrb	r3, [r7, #14]
 800b610:	4619      	mov	r1, r3
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f001 fb87 	bl	800cd26 <VL53L1_clear_interrupt_and_enable_next_range>
 800b618:	4603      	mov	r3, r0
 800b61a:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800b61c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b630:	2300      	movs	r3, #0
 800b632:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800b634:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f004 fb18 	bl	800fc6e <VL53L1_poll_for_range_completion>
 800b63e:	4603      	mov	r3, r0
 800b640:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800b642:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
	...

0800b650 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800b650:	b480      	push	{r7}
 800b652:	b08d      	sub	sp, #52	; 0x34
 800b654:	af00      	add	r7, sp, #0
 800b656:	4603      	mov	r3, r0
 800b658:	603a      	str	r2, [r7, #0]
 800b65a:	71fb      	strb	r3, [r7, #7]
 800b65c:	460b      	mov	r3, r1
 800b65e:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800b660:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800b664:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800b666:	231e      	movs	r3, #30
 800b668:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800b66a:	4b33      	ldr	r3, [pc, #204]	; (800b738 <ComputeRQL+0xe8>)
 800b66c:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800b66e:	4b33      	ldr	r3, [pc, #204]	; (800b73c <ComputeRQL+0xec>)
 800b670:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800b672:	f641 139a 	movw	r3, #6554	; 0x199a
 800b676:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800b678:	79fb      	ldrb	r3, [r7, #7]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d103      	bne.n	800b686 <ComputeRQL+0x36>
		returnvalue = 0;
 800b67e:	2300      	movs	r3, #0
 800b680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b684:	e04f      	b.n	800b726 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800b686:	79bb      	ldrb	r3, [r7, #6]
 800b688:	2b07      	cmp	r3, #7
 800b68a:	d103      	bne.n	800b694 <ComputeRQL+0x44>
		returnvalue = 50;
 800b68c:	2332      	movs	r3, #50	; 0x32
 800b68e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b692:	e048      	b.n	800b726 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b69a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	dd03      	ble.n	800b6aa <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800b6a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6a4:	041b      	lsls	r3, r3, #16
 800b6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6a8:	e007      	b.n	800b6ba <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	fb02 f303 	mul.w	r3, r2, r3
 800b6b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800b6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d020      	beq.n	800b702 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	fb02 f303 	mul.w	r3, r2, r3
 800b6cc:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800b6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d0:	085b      	lsrs	r3, r3, #1
 800b6d2:	693a      	ldr	r2, [r7, #16]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6e0:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	041b      	lsls	r3, r3, #16
 800b6e6:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d804      	bhi.n	800b6fa <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800b6f0:	69fa      	ldr	r2, [r7, #28]
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6f8:	e006      	b.n	800b708 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800b6fa:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b6fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800b700:	e002      	b.n	800b708 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800b702:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800b706:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800b708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70a:	0c1b      	lsrs	r3, r3, #16
 800b70c:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
 800b710:	2b32      	cmp	r3, #50	; 0x32
 800b712:	d905      	bls.n	800b720 <ComputeRQL+0xd0>
 800b714:	7bfb      	ldrb	r3, [r7, #15]
 800b716:	2b64      	cmp	r3, #100	; 0x64
 800b718:	bf28      	it	cs
 800b71a:	2364      	movcs	r3, #100	; 0x64
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	e000      	b.n	800b722 <ComputeRQL+0xd2>
 800b720:	2332      	movs	r3, #50	; 0x32
 800b722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800b726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3734      	adds	r7, #52	; 0x34
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	0075b333 	.word	0x0075b333
 800b73c:	0030cccd 	.word	0x0030cccd

0800b740 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	4603      	mov	r3, r0
 800b748:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800b74a:	79fb      	ldrb	r3, [r7, #7]
 800b74c:	3b04      	subs	r3, #4
 800b74e:	2b0f      	cmp	r3, #15
 800b750:	d83d      	bhi.n	800b7ce <ConvertStatusLite+0x8e>
 800b752:	a201      	add	r2, pc, #4	; (adr r2, 800b758 <ConvertStatusLite+0x18>)
 800b754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b758:	0800b7ab 	.word	0x0800b7ab
 800b75c:	0800b7a5 	.word	0x0800b7a5
 800b760:	0800b7b1 	.word	0x0800b7b1
 800b764:	0800b7b7 	.word	0x0800b7b7
 800b768:	0800b7c3 	.word	0x0800b7c3
 800b76c:	0800b7c9 	.word	0x0800b7c9
 800b770:	0800b7cf 	.word	0x0800b7cf
 800b774:	0800b7cf 	.word	0x0800b7cf
 800b778:	0800b7bd 	.word	0x0800b7bd
 800b77c:	0800b7cf 	.word	0x0800b7cf
 800b780:	0800b7cf 	.word	0x0800b7cf
 800b784:	0800b7cf 	.word	0x0800b7cf
 800b788:	0800b7cf 	.word	0x0800b7cf
 800b78c:	0800b7cf 	.word	0x0800b7cf
 800b790:	0800b799 	.word	0x0800b799
 800b794:	0800b79f 	.word	0x0800b79f
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800b798:	230a      	movs	r3, #10
 800b79a:	73fb      	strb	r3, [r7, #15]
		break;
 800b79c:	e019      	b.n	800b7d2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800b79e:	2306      	movs	r3, #6
 800b7a0:	73fb      	strb	r3, [r7, #15]
		break;
 800b7a2:	e016      	b.n	800b7d2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800b7a4:	2304      	movs	r3, #4
 800b7a6:	73fb      	strb	r3, [r7, #15]
		break;
 800b7a8:	e013      	b.n	800b7d2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800b7aa:	2302      	movs	r3, #2
 800b7ac:	73fb      	strb	r3, [r7, #15]
		break;
 800b7ae:	e010      	b.n	800b7d2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	73fb      	strb	r3, [r7, #15]
		break;
 800b7b4:	e00d      	b.n	800b7d2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800b7b6:	2307      	movs	r3, #7
 800b7b8:	73fb      	strb	r3, [r7, #15]
		break;
 800b7ba:	e00a      	b.n	800b7d2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800b7bc:	2309      	movs	r3, #9
 800b7be:	73fb      	strb	r3, [r7, #15]
		break;
 800b7c0:	e007      	b.n	800b7d2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	73fb      	strb	r3, [r7, #15]
		break;
 800b7c6:	e004      	b.n	800b7d2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	73fb      	strb	r3, [r7, #15]
		break;
 800b7cc:	e001      	b.n	800b7d2 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800b7ce:	23ff      	movs	r3, #255	; 0xff
 800b7d0:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3714      	adds	r7, #20
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08c      	sub	sp, #48	; 0x30
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	607b      	str	r3, [r7, #4]
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	72fb      	strb	r3, [r7, #11]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fe:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b806:	f003 031f 	and.w	r3, r3, #31
 800b80a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800b80e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800b812:	7afb      	ldrb	r3, [r7, #11]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff ff1a 	bl	800b650 <ComputeRQL>
 800b81c:	4603      	mov	r3, r0
 800b81e:	461a      	mov	r2, r3
 800b820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b822:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b828:	025b      	lsls	r3, r3, #9
 800b82a:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800b82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b830:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b836:	025b      	lsls	r3, r3, #9
 800b838:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800b83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b83e:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800b844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b846:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b84c:	025b      	lsls	r3, r3, #9
 800b84e:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	6a3a      	ldr	r2, [r7, #32]
 800b854:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800b85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85e:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800b860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b862:	2200      	movs	r2, #0
 800b864:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800b866:	7abb      	ldrb	r3, [r7, #10]
 800b868:	2b11      	cmp	r3, #17
 800b86a:	d009      	beq.n	800b880 <SetSimpleData+0xa0>
 800b86c:	2b11      	cmp	r3, #17
 800b86e:	dc0f      	bgt.n	800b890 <SetSimpleData+0xb0>
 800b870:	2b03      	cmp	r3, #3
 800b872:	dc02      	bgt.n	800b87a <SetSimpleData+0x9a>
 800b874:	2b00      	cmp	r3, #0
 800b876:	dc03      	bgt.n	800b880 <SetSimpleData+0xa0>
 800b878:	e00a      	b.n	800b890 <SetSimpleData+0xb0>
 800b87a:	2b0d      	cmp	r3, #13
 800b87c:	d004      	beq.n	800b888 <SetSimpleData+0xa8>
 800b87e:	e007      	b.n	800b890 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800b880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b882:	2205      	movs	r2, #5
 800b884:	76da      	strb	r2, [r3, #27]
		break;
 800b886:	e006      	b.n	800b896 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800b888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88a:	220d      	movs	r2, #13
 800b88c:	76da      	strb	r2, [r3, #27]
		break;
 800b88e:	e002      	b.n	800b896 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b892:	2200      	movs	r2, #0
 800b894:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800b896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b898:	7edb      	ldrb	r3, [r3, #27]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d108      	bne.n	800b8b0 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800b89e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7ff ff4c 	bl	800b740 <ConvertStatusLite>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b8b4:	025b      	lsls	r3, r3, #9
 800b8b6:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6a3a      	ldr	r2, [r7, #32]
 800b8bc:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b8c4:	025b      	lsls	r3, r3, #9
 800b8c6:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6a3a      	ldr	r2, [r7, #32]
 800b8cc:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800b8d0:	f107 0314 	add.w	r3, r7, #20
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f7ff fdb3 	bl	800b444 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800b8de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b8e2:	2b06      	cmp	r3, #6
 800b8e4:	bf0c      	ite	eq
 800b8e6:	2301      	moveq	r3, #1
 800b8e8:	2300      	movne	r3, #0
 800b8ea:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800b8ec:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800b8ee:	f107 0319 	add.w	r3, r7, #25
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f7ff fd81 	bl	800b3fe <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800b8fc:	7e7b      	ldrb	r3, [r7, #25]
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d104      	bne.n	800b90c <SetSimpleData+0x12c>
 800b902:	7ffb      	ldrb	r3, [r7, #31]
 800b904:	2b01      	cmp	r3, #1
 800b906:	d101      	bne.n	800b90c <SetSimpleData+0x12c>
 800b908:	2301      	movs	r3, #1
 800b90a:	e000      	b.n	800b90e <SetSimpleData+0x12e>
 800b90c:	2300      	movs	r3, #0
 800b90e:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	7fba      	ldrb	r2, [r7, #30]
 800b914:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800b918:	f107 0314 	add.w	r3, r7, #20
 800b91c:	461a      	mov	r2, r3
 800b91e:	2101      	movs	r1, #1
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f7ff fd8f 	bl	800b444 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800b926:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b92a:	2b04      	cmp	r3, #4
 800b92c:	bf0c      	ite	eq
 800b92e:	2301      	moveq	r3, #1
 800b930:	2300      	movne	r3, #0
 800b932:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800b934:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800b936:	f107 0319 	add.w	r3, r7, #25
 800b93a:	461a      	mov	r2, r3
 800b93c:	2101      	movs	r1, #1
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f7ff fd5d 	bl	800b3fe <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800b944:	7e7b      	ldrb	r3, [r7, #25]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d104      	bne.n	800b954 <SetSimpleData+0x174>
 800b94a:	7f7b      	ldrb	r3, [r7, #29]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d101      	bne.n	800b954 <SetSimpleData+0x174>
 800b950:	2301      	movs	r3, #1
 800b952:	e000      	b.n	800b956 <SetSimpleData+0x176>
 800b954:	2300      	movs	r3, #0
 800b956:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	7fba      	ldrb	r2, [r7, #30]
 800b95c:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800b960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b962:	8b1b      	ldrh	r3, [r3, #24]
 800b964:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800b966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b968:	7edb      	ldrb	r3, [r3, #27]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d110      	bne.n	800b990 <SetSimpleData+0x1b0>
 800b96e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b972:	2b00      	cmp	r3, #0
 800b974:	da0c      	bge.n	800b990 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800b976:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b97a:	4b08      	ldr	r3, [pc, #32]	; (800b99c <SetSimpleData+0x1bc>)
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	429a      	cmp	r2, r3
 800b980:	da03      	bge.n	800b98a <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800b982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b984:	220e      	movs	r2, #14
 800b986:	76da      	strb	r2, [r3, #27]
 800b988:	e002      	b.n	800b990 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800b98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98c:	2200      	movs	r2, #0
 800b98e:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800b990:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b994:	4618      	mov	r0, r3
 800b996:	3730      	adds	r7, #48	; 0x30
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	20000160 	.word	0x20000160

0800b9a0 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b0a8      	sub	sp, #160	; 0xa0
 800b9a4:	af02      	add	r7, sp, #8
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 800b9b0:	f107 0308 	add.w	r3, r7, #8
 800b9b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800b9b8:	221c      	movs	r2, #28
 800b9ba:	21ff      	movs	r1, #255	; 0xff
 800b9bc:	6838      	ldr	r0, [r7, #0]
 800b9be:	f004 fd89 	bl	80104d4 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800b9c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b9c6:	2102      	movs	r1, #2
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f001 f93c 	bl	800cc46 <VL53L1_get_device_results>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800b9d4:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d117      	bne.n	800ba0c <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800b9dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9e0:	789a      	ldrb	r2, [r3, #2]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800b9e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800b9f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9f4:	78da      	ldrb	r2, [r3, #3]
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b9fe:	2101      	movs	r1, #1
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f7ff feed 	bl	800b7e0 <SetSimpleData>
 800ba06:	4603      	mov	r3, r0
 800ba08:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba0c:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3798      	adds	r7, #152	; 0x98
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b0c6      	sub	sp, #280	; 0x118
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	1d3b      	adds	r3, r7, #4
 800ba20:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ba22:	2300      	movs	r3, #0
 800ba24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800ba2e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d108      	bne.n	800ba48 <VL53L1_LoadPatch+0x30>
		status = VL53L1_WrByte(
 800ba36:	1d3b      	adds	r3, r7, #4
 800ba38:	2200      	movs	r2, #0
 800ba3a:	2185      	movs	r1, #133	; 0x85
 800ba3c:	6818      	ldr	r0, [r3, #0]
 800ba3e:	f004 f9f1 	bl	800fe24 <VL53L1_WrByte>
 800ba42:	4603      	mov	r3, r0
 800ba44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 800ba48:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d103      	bne.n	800ba58 <VL53L1_LoadPatch+0x40>
		VL53L1_enable_powerforce(Dev);
 800ba50:	1d3b      	adds	r3, r7, #4
 800ba52:	6818      	ldr	r0, [r3, #0]
 800ba54:	f002 fce1 	bl	800e41a <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800ba58:	4b65      	ldr	r3, [pc, #404]	; (800bbf0 <VL53L1_LoadPatch+0x1d8>)
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ba60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d81b      	bhi.n	800baa0 <VL53L1_LoadPatch+0x88>
 800ba68:	a201      	add	r2, pc, #4	; (adr r2, 800ba70 <VL53L1_LoadPatch+0x58>)
 800ba6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6e:	bf00      	nop
 800ba70:	0800ba81 	.word	0x0800ba81
 800ba74:	0800ba89 	.word	0x0800ba89
 800ba78:	0800ba91 	.word	0x0800ba91
 800ba7c:	0800ba99 	.word	0x0800ba99

	switch(patch_tuning) {
	case 0:
		patch_power = 0x00;
 800ba80:	2300      	movs	r3, #0
 800ba82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800ba86:	e00e      	b.n	800baa6 <VL53L1_LoadPatch+0x8e>
	case 1:
		patch_power = 0x10;
 800ba88:	2310      	movs	r3, #16
 800ba8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800ba8e:	e00a      	b.n	800baa6 <VL53L1_LoadPatch+0x8e>
	case 2:
		patch_power = 0x20;
 800ba90:	2320      	movs	r3, #32
 800ba92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800ba96:	e006      	b.n	800baa6 <VL53L1_LoadPatch+0x8e>
	case 3:
		patch_power = 0x40;
 800ba98:	2340      	movs	r3, #64	; 0x40
 800ba9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800ba9e:	e002      	b.n	800baa6 <VL53L1_LoadPatch+0x8e>
	default:
		patch_power = 0x00;
 800baa0:	2300      	movs	r3, #0
 800baa2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800baa6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d125      	bne.n	800bafa <VL53L1_LoadPatch+0xe2>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 800baae:	f107 030c 	add.w	r3, r7, #12
 800bab2:	2229      	movs	r2, #41	; 0x29
 800bab4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800bab6:	f107 030c 	add.w	r3, r7, #12
 800baba:	22c9      	movs	r2, #201	; 0xc9
 800babc:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800babe:	f107 030c 	add.w	r3, r7, #12
 800bac2:	220e      	movs	r2, #14
 800bac4:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800bac6:	f107 030c 	add.w	r3, r7, #12
 800baca:	2240      	movs	r2, #64	; 0x40
 800bacc:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800bace:	f107 030c 	add.w	r3, r7, #12
 800bad2:	2228      	movs	r2, #40	; 0x28
 800bad4:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800bad6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bada:	b2da      	uxtb	r2, r3
 800badc:	f107 030c 	add.w	r3, r7, #12
 800bae0:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800bae2:	f107 020c 	add.w	r2, r7, #12
 800bae6:	1d38      	adds	r0, r7, #4
 800bae8:	2306      	movs	r3, #6
 800baea:	f240 4176 	movw	r1, #1142	; 0x476
 800baee:	6800      	ldr	r0, [r0, #0]
 800baf0:	f004 f92c 	bl	800fd4c <VL53L1_WriteMulti>
 800baf4:	4603      	mov	r3, r0
 800baf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 800bafa:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d123      	bne.n	800bb4a <VL53L1_LoadPatch+0x132>
		comms_buffer[0] = 0x03;
 800bb02:	f107 030c 	add.w	r3, r7, #12
 800bb06:	2203      	movs	r2, #3
 800bb08:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800bb0a:	f107 030c 	add.w	r3, r7, #12
 800bb0e:	226d      	movs	r2, #109	; 0x6d
 800bb10:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800bb12:	f107 030c 	add.w	r3, r7, #12
 800bb16:	2203      	movs	r2, #3
 800bb18:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800bb1a:	f107 030c 	add.w	r3, r7, #12
 800bb1e:	226f      	movs	r2, #111	; 0x6f
 800bb20:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800bb22:	f107 030c 	add.w	r3, r7, #12
 800bb26:	2207      	movs	r2, #7
 800bb28:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800bb2a:	f107 030c 	add.w	r3, r7, #12
 800bb2e:	2229      	movs	r2, #41	; 0x29
 800bb30:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 800bb32:	f107 020c 	add.w	r2, r7, #12
 800bb36:	1d38      	adds	r0, r7, #4
 800bb38:	2306      	movs	r3, #6
 800bb3a:	f240 4196 	movw	r1, #1174	; 0x496
 800bb3e:	6800      	ldr	r0, [r0, #0]
 800bb40:	f004 f904 	bl	800fd4c <VL53L1_WriteMulti>
 800bb44:	4603      	mov	r3, r0
 800bb46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800bb4a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d113      	bne.n	800bb7a <VL53L1_LoadPatch+0x162>
		comms_buffer[0] = 0x00;
 800bb52:	f107 030c 	add.w	r3, r7, #12
 800bb56:	2200      	movs	r2, #0
 800bb58:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800bb5a:	f107 030c 	add.w	r3, r7, #12
 800bb5e:	2207      	movs	r2, #7
 800bb60:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800bb62:	f107 020c 	add.w	r2, r7, #12
 800bb66:	1d38      	adds	r0, r7, #4
 800bb68:	2302      	movs	r3, #2
 800bb6a:	f240 4172 	movw	r1, #1138	; 0x472
 800bb6e:	6800      	ldr	r0, [r0, #0]
 800bb70:	f004 f8ec 	bl	800fd4c <VL53L1_WriteMulti>
 800bb74:	4603      	mov	r3, r0
 800bb76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 800bb7a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d113      	bne.n	800bbaa <VL53L1_LoadPatch+0x192>
		comms_buffer[0] = 0x00;
 800bb82:	f107 030c 	add.w	r3, r7, #12
 800bb86:	2200      	movs	r2, #0
 800bb88:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800bb8a:	f107 030c 	add.w	r3, r7, #12
 800bb8e:	2207      	movs	r2, #7
 800bb90:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800bb92:	f107 020c 	add.w	r2, r7, #12
 800bb96:	1d38      	adds	r0, r7, #4
 800bb98:	2302      	movs	r3, #2
 800bb9a:	f240 4174 	movw	r1, #1140	; 0x474
 800bb9e:	6800      	ldr	r0, [r0, #0]
 800bba0:	f004 f8d4 	bl	800fd4c <VL53L1_WriteMulti>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800bbaa:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d109      	bne.n	800bbc6 <VL53L1_LoadPatch+0x1ae>
		status = VL53L1_WrByte(
 800bbb2:	1d3b      	adds	r3, r7, #4
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800bbba:	6818      	ldr	r0, [r3, #0]
 800bbbc:	f004 f932 	bl	800fe24 <VL53L1_WrByte>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 800bbc6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d108      	bne.n	800bbe0 <VL53L1_LoadPatch+0x1c8>
		status = VL53L1_WrByte(
 800bbce:	1d3b      	adds	r3, r7, #4
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	2185      	movs	r1, #133	; 0x85
 800bbd4:	6818      	ldr	r0, [r3, #0]
 800bbd6:	f004 f925 	bl	800fe24 <VL53L1_WrByte>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 800bbe0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20000160 	.word	0x20000160

0800bbf4 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800bbf4:	b5b0      	push	{r4, r5, r7, lr}
 800bbf6:	b088      	sub	sp, #32
 800bbf8:	af04      	add	r7, sp, #16
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800bc00:	2300      	movs	r3, #0
 800bc02:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800bc08:	2162      	movs	r1, #98	; 0x62
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f002 f8bf 	bl	800dd8e <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	2200      	movs	r2, #0
 800bc14:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2201      	movs	r2, #1
 800bc26:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc34:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bc3c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800bc44:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	2264      	movs	r2, #100	; 0x64
 800bc4a:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800bc52:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f240 72db 	movw	r2, #2011	; 0x7db
 800bc62:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f002 f875 	bl	800dd56 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800bc6c:	78fb      	ldrb	r3, [r7, #3]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d008      	beq.n	800bc84 <VL53L1_data_init+0x90>
 800bc72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d104      	bne.n	800bc84 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f857 	bl	800bd2e <VL53L1_read_p2p_data>
 800bc80:	4603      	mov	r3, r0
 800bc82:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f001 fba4 	bl	800d3d8 <VL53L1_init_refspadchar_config_struct>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f001 fbc0 	bl	800d420 <VL53L1_init_ssc_config_struct>
 800bca0:	4603      	mov	r3, r0
 800bca2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	4610      	mov	r0, r2
 800bcb4:	f001 fbd5 	bl	800d462 <VL53L1_init_xtalk_config_struct>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f001 fc2f 	bl	800d526 <VL53L1_init_offset_cal_config_struct>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	33a4      	adds	r3, #164	; 0xa4
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f001 fc4f 	bl	800d574 <VL53L1_init_tuning_parm_storage_struct>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800bcda:	2120      	movs	r1, #32
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fcc1 	bl	800c664 <VL53L1_set_vhv_loopbound>
 800bce2:	4603      	mov	r3, r0
 800bce4:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800bce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d116      	bne.n	800bd1c <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	7858      	ldrb	r0, [r3, #1]
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	8b1c      	ldrh	r4, [r3, #24]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	689d      	ldr	r5, [r3, #8]
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	6912      	ldr	r2, [r2, #16]
 800bd02:	68b9      	ldr	r1, [r7, #8]
 800bd04:	6949      	ldr	r1, [r1, #20]
 800bd06:	9102      	str	r1, [sp, #8]
 800bd08:	9201      	str	r2, [sp, #4]
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	462b      	mov	r3, r5
 800bd0e:	4622      	mov	r2, r4
 800bd10:	4601      	mov	r1, r0
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fad8 	bl	800c2c8 <VL53L1_set_preset_mode>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f002 fdb5 	bl	800e88c <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800bd22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bdb0      	pop	{r4, r5, r7, pc}

0800bd2e <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800bd36:	2300      	movs	r3, #0
 800bd38:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800bd3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d108      	bne.n	800bd58 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f002 ff39 	bl	800ebc6 <VL53L1_get_static_nvm_managed>
 800bd54:	4603      	mov	r3, r0
 800bd56:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800bd58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d107      	bne.n	800bd70 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	3342      	adds	r3, #66	; 0x42
 800bd64:	4619      	mov	r1, r3
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f003 f86b 	bl	800ee42 <VL53L1_get_customer_nvm_managed>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800bd70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d115      	bne.n	800bda4 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f003 ff1d 	bl	800fbc0 <VL53L1_get_nvm_copy_data>
 800bd86:	4603      	mov	r3, r0
 800bd88:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800bd8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d108      	bne.n	800bda4 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	33f0      	adds	r3, #240	; 0xf0
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4610      	mov	r0, r2
 800bda0:	f002 f957 	bl	800e052 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800bda4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d109      	bne.n	800bdc0 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	21de      	movs	r1, #222	; 0xde
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f004 f892 	bl	800fee0 <VL53L1_RdWord>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bdc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdca:	d204      	bcs.n	800bdd6 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800bdd2:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800bdd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d107      	bne.n	800bdee <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	339e      	adds	r3, #158	; 0x9e
 800bde2:	4619      	mov	r1, r3
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f990 	bl	800c10a <VL53L1_get_mode_mitigation_roi>
 800bdea:	4603      	mov	r3, r0
 800bdec:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d114      	bne.n	800be22 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10f      	bne.n	800be22 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800be08:	011b      	lsls	r3, r3, #4
 800be0a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800be18:	011b      	lsls	r3, r3, #4
 800be1a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800be22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800be2e:	b480      	push	{r7}
 800be30:	b085      	sub	sp, #20
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be38:	2300      	movs	r3, #0
 800be3a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800be46:	2b00      	cmp	r3, #0
 800be48:	d101      	bne.n	800be4e <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800be4a:	23f1      	movs	r3, #241	; 0xf1
 800be4c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800be4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10c      	bne.n	800be70 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800be62:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800be70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be8a:	2300      	movs	r3, #0
 800be8c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800be9c:	23f1      	movs	r3, #241	; 0xf1
 800be9e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800bea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d109      	bne.n	800bebc <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800beb4:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800bebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af02      	add	r7, sp, #8
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800beda:	2300      	movs	r3, #0
 800bedc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800beec:	23f1      	movs	r3, #241	; 0xf1
 800beee:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800bef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d11b      	bne.n	800bf30 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 800bf1c:	9201      	str	r2, [sp, #4]
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	460b      	mov	r3, r1
 800bf22:	683a      	ldr	r2, [r7, #0]
 800bf24:	6879      	ldr	r1, [r7, #4]
 800bf26:	68b8      	ldr	r0, [r7, #8]
 800bf28:	f002 fbe2 	bl	800e6f0 <VL53L1_calc_timeout_register_values>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800bf30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3718      	adds	r7, #24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b088      	sub	sp, #32
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
 800bf48:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800bf52:	2300      	movs	r3, #0
 800bf54:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bf64:	23f1      	movs	r3, #241	; 0xf1
 800bf66:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800bf68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d14a      	bne.n	800c006 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	4610      	mov	r0, r2
 800bf80:	f002 fa5d 	bl	800e43e <VL53L1_calc_macro_period_us>
 800bf84:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800bf8c:	6979      	ldr	r1, [r7, #20]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f002 fb15 	bl	800e5be <VL53L1_calc_timeout_us>
 800bf94:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800bfa0:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800bfa2:	8a7b      	ldrh	r3, [r7, #18]
 800bfa4:	021b      	lsls	r3, r3, #8
 800bfa6:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800bfae:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800bfb0:	4413      	add	r3, r2
 800bfb2:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800bfb4:	8a7b      	ldrh	r3, [r7, #18]
 800bfb6:	6979      	ldr	r1, [r7, #20]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f002 fb3e 	bl	800e63a <VL53L1_calc_decoded_timeout_us>
 800bfbe:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800bfca:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800bfcc:	8a7b      	ldrh	r3, [r7, #18]
 800bfce:	021b      	lsls	r3, r3, #8
 800bfd0:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800bfd8:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800bfda:	4413      	add	r3, r2
 800bfdc:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800bfde:	8a7b      	ldrh	r3, [r7, #18]
 800bfe0:	6979      	ldr	r1, [r7, #20]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f002 fb29 	bl	800e63a <VL53L1_calc_decoded_timeout_us>
 800bfe8:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c006:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3720      	adds	r7, #32
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800c012:	b480      	push	{r7}
 800c014:	b087      	sub	sp, #28
 800c016:	af00      	add	r7, sp, #0
 800c018:	60f8      	str	r0, [r7, #12]
 800c01a:	460b      	mov	r3, r1
 800c01c:	607a      	str	r2, [r7, #4]
 800c01e:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c020:	2300      	movs	r3, #0
 800c022:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800c028:	2301      	movs	r3, #1
 800c02a:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800c02c:	7afb      	ldrb	r3, [r7, #11]
 800c02e:	2b07      	cmp	r3, #7
 800c030:	d81c      	bhi.n	800c06c <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800c032:	7afb      	ldrb	r3, [r7, #11]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d004      	beq.n	800c042 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800c038:	7afb      	ldrb	r3, [r7, #11]
 800c03a:	2201      	movs	r2, #1
 800c03c:	fa02 f303 	lsl.w	r3, r2, r3
 800c040:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800c048:	7dbb      	ldrb	r3, [r7, #22]
 800c04a:	4013      	ands	r3, r2
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800c052:	7afb      	ldrb	r3, [r7, #11]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00b      	beq.n	800c070 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	461a      	mov	r2, r3
 800c05e:	7afb      	ldrb	r3, [r7, #11]
 800c060:	fa42 f303 	asr.w	r3, r2, r3
 800c064:	b2da      	uxtb	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	701a      	strb	r2, [r3, #0]
 800c06a:	e001      	b.n	800c070 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c06c:	23fc      	movs	r3, #252	; 0xfc
 800c06e:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800c070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c074:	4618      	mov	r0, r3
 800c076:	371c      	adds	r7, #28
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c08a:	2300      	movs	r3, #0
 800c08c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	7858      	ldrb	r0, [r3, #1]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	7819      	ldrb	r1, [r3, #0]
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	f002 fb9e 	bl	800e7e2 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	7898      	ldrb	r0, [r3, #2]
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	78d9      	ldrb	r1, [r3, #3]
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	f002 fbd3 	bl	800e860 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800c0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b084      	sub	sp, #16
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	f002 fc8a 	bl	800e9fe <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	1c99      	adds	r1, r3, #2
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	3303      	adds	r3, #3
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	f002 fb99 	bl	800e830 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800c0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b086      	sub	sp, #24
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c114:	2300      	movs	r3, #0
 800c116:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800c11c:	2300      	movs	r3, #0
 800c11e:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800c120:	2300      	movs	r3, #0
 800c122:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800c124:	2300      	movs	r3, #0
 800c126:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800c12e:	f107 020e 	add.w	r2, r7, #14
 800c132:	f107 010d 	add.w	r1, r7, #13
 800c136:	4618      	mov	r0, r3
 800c138:	f002 fc61 	bl	800e9fe <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800c13c:	7bba      	ldrb	r2, [r7, #14]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800c142:	7b7a      	ldrb	r2, [r7, #13]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800c14e:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	091b      	lsrs	r3, r3, #4
 800c154:	b2da      	uxtb	r2, r3
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800c15a:	7bfb      	ldrb	r3, [r7, #15]
 800c15c:	f003 030f 	and.w	r3, r3, #15
 800c160:	b2da      	uxtb	r2, r3
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800c166:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3718      	adds	r7, #24
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
	...

0800c174 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800c174:	b480      	push	{r7}
 800c176:	b087      	sub	sp, #28
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	607a      	str	r2, [r7, #4]
 800c17e:	603b      	str	r3, [r7, #0]
 800c180:	460b      	mov	r3, r1
 800c182:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c184:	2300      	movs	r3, #0
 800c186:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800c18c:	7afb      	ldrb	r3, [r7, #11]
 800c18e:	3b01      	subs	r3, #1
 800c190:	2b25      	cmp	r3, #37	; 0x25
 800c192:	f200 808e 	bhi.w	800c2b2 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800c196:	a201      	add	r2, pc, #4	; (adr r2, 800c19c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800c198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19c:	0800c235 	.word	0x0800c235
 800c1a0:	0800c235 	.word	0x0800c235
 800c1a4:	0800c235 	.word	0x0800c235
 800c1a8:	0800c235 	.word	0x0800c235
 800c1ac:	0800c235 	.word	0x0800c235
 800c1b0:	0800c25f 	.word	0x0800c25f
 800c1b4:	0800c25f 	.word	0x0800c25f
 800c1b8:	0800c25f 	.word	0x0800c25f
 800c1bc:	0800c2b3 	.word	0x0800c2b3
 800c1c0:	0800c2b3 	.word	0x0800c2b3
 800c1c4:	0800c2b3 	.word	0x0800c2b3
 800c1c8:	0800c2b3 	.word	0x0800c2b3
 800c1cc:	0800c2b3 	.word	0x0800c2b3
 800c1d0:	0800c2b3 	.word	0x0800c2b3
 800c1d4:	0800c2b3 	.word	0x0800c2b3
 800c1d8:	0800c2b3 	.word	0x0800c2b3
 800c1dc:	0800c235 	.word	0x0800c235
 800c1e0:	0800c25f 	.word	0x0800c25f
 800c1e4:	0800c2b3 	.word	0x0800c2b3
 800c1e8:	0800c2b3 	.word	0x0800c2b3
 800c1ec:	0800c2b3 	.word	0x0800c2b3
 800c1f0:	0800c2b3 	.word	0x0800c2b3
 800c1f4:	0800c2b3 	.word	0x0800c2b3
 800c1f8:	0800c2b3 	.word	0x0800c2b3
 800c1fc:	0800c2b3 	.word	0x0800c2b3
 800c200:	0800c2b3 	.word	0x0800c2b3
 800c204:	0800c2b3 	.word	0x0800c2b3
 800c208:	0800c2b3 	.word	0x0800c2b3
 800c20c:	0800c2b3 	.word	0x0800c2b3
 800c210:	0800c2b3 	.word	0x0800c2b3
 800c214:	0800c2b3 	.word	0x0800c2b3
 800c218:	0800c2b3 	.word	0x0800c2b3
 800c21c:	0800c2b3 	.word	0x0800c2b3
 800c220:	0800c2b3 	.word	0x0800c2b3
 800c224:	0800c2b3 	.word	0x0800c2b3
 800c228:	0800c289 	.word	0x0800c289
 800c22c:	0800c289 	.word	0x0800c289
 800c230:	0800c289 	.word	0x0800c289
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800c24e:	6a3b      	ldr	r3, [r7, #32]
 800c250:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	601a      	str	r2, [r3, #0]
	break;
 800c25c:	e02c      	b.n	800c2b8 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800c278:	6a3b      	ldr	r3, [r7, #32]
 800c27a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800c282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c284:	601a      	str	r2, [r3, #0]
	break;
 800c286:	e017      	b.n	800c2b8 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800c2a2:	6a3b      	ldr	r3, [r7, #32]
 800c2a4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	601a      	str	r2, [r3, #0]
	break;
 800c2b0:	e002      	b.n	800c2b8 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c2b2:	23fc      	movs	r3, #252	; 0xfc
 800c2b4:	75fb      	strb	r3, [r7, #23]
		break;
 800c2b6:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800c2b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	371c      	adds	r7, #28
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b092      	sub	sp, #72	; 0x48
 800c2cc:	af04      	add	r7, sp, #16
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	607b      	str	r3, [r7, #4]
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	72fb      	strb	r3, [r7, #11]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c2f2:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800c2fa:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c302:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800c304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c306:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c30a:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30e:	33a4      	adds	r3, #164	; 0xa4
 800c310:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800c318:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	7afa      	ldrb	r2, [r7, #11]
 800c31e:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c324:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c32a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c330:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800c332:	2103      	movs	r1, #3
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f001 fd2a 	bl	800dd8e <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800c33a:	7afb      	ldrb	r3, [r7, #11]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	2b25      	cmp	r3, #37	; 0x25
 800c340:	f200 810c 	bhi.w	800c55c <VL53L1_set_preset_mode+0x294>
 800c344:	a201      	add	r2, pc, #4	; (adr r2, 800c34c <VL53L1_set_preset_mode+0x84>)
 800c346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34a:	bf00      	nop
 800c34c:	0800c3e5 	.word	0x0800c3e5
 800c350:	0800c401 	.word	0x0800c401
 800c354:	0800c41d 	.word	0x0800c41d
 800c358:	0800c439 	.word	0x0800c439
 800c35c:	0800c455 	.word	0x0800c455
 800c360:	0800c471 	.word	0x0800c471
 800c364:	0800c48d 	.word	0x0800c48d
 800c368:	0800c4a9 	.word	0x0800c4a9
 800c36c:	0800c55d 	.word	0x0800c55d
 800c370:	0800c55d 	.word	0x0800c55d
 800c374:	0800c55d 	.word	0x0800c55d
 800c378:	0800c55d 	.word	0x0800c55d
 800c37c:	0800c55d 	.word	0x0800c55d
 800c380:	0800c55d 	.word	0x0800c55d
 800c384:	0800c55d 	.word	0x0800c55d
 800c388:	0800c55d 	.word	0x0800c55d
 800c38c:	0800c4c5 	.word	0x0800c4c5
 800c390:	0800c4e1 	.word	0x0800c4e1
 800c394:	0800c55d 	.word	0x0800c55d
 800c398:	0800c55d 	.word	0x0800c55d
 800c39c:	0800c55d 	.word	0x0800c55d
 800c3a0:	0800c55d 	.word	0x0800c55d
 800c3a4:	0800c55d 	.word	0x0800c55d
 800c3a8:	0800c55d 	.word	0x0800c55d
 800c3ac:	0800c55d 	.word	0x0800c55d
 800c3b0:	0800c55d 	.word	0x0800c55d
 800c3b4:	0800c55d 	.word	0x0800c55d
 800c3b8:	0800c55d 	.word	0x0800c55d
 800c3bc:	0800c55d 	.word	0x0800c55d
 800c3c0:	0800c55d 	.word	0x0800c55d
 800c3c4:	0800c55d 	.word	0x0800c55d
 800c3c8:	0800c55d 	.word	0x0800c55d
 800c3cc:	0800c55d 	.word	0x0800c55d
 800c3d0:	0800c55d 	.word	0x0800c55d
 800c3d4:	0800c55d 	.word	0x0800c55d
 800c3d8:	0800c4fd 	.word	0x0800c4fd
 800c3dc:	0800c51d 	.word	0x0800c51d
 800c3e0:	0800c53d 	.word	0x0800c53d

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	9301      	str	r3, [sp, #4]
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	6a3b      	ldr	r3, [r7, #32]
 800c3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3f4:	f001 f94d 	bl	800d692 <VL53L1_preset_mode_standard_ranging>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c3fe:	e0b1      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	6a3b      	ldr	r3, [r7, #32]
 800c40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c40c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c40e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c410:	f001 fa5d 	bl	800d8ce <VL53L1_preset_mode_standard_ranging_short_range>
 800c414:	4603      	mov	r3, r0
 800c416:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c41a:	e0a3      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	9301      	str	r3, [sp, #4]
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c42a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c42c:	f001 fa90 	bl	800d950 <VL53L1_preset_mode_standard_ranging_long_range>
 800c430:	4603      	mov	r3, r0
 800c432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c436:	e095      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	9301      	str	r3, [sp, #4]
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	9300      	str	r3, [sp, #0]
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c448:	f001 fac3 	bl	800d9d2 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800c44c:	4603      	mov	r3, r0
 800c44e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c452:	e087      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	9301      	str	r3, [sp, #4]
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	6a3b      	ldr	r3, [r7, #32]
 800c45e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c464:	f001 fada 	bl	800da1c <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800c468:	4603      	mov	r3, r0
 800c46a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c46e:	e079      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	9301      	str	r3, [sp, #4]
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	6a3b      	ldr	r3, [r7, #32]
 800c47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c47c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c47e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c480:	f001 faf1 	bl	800da66 <VL53L1_preset_mode_timed_ranging>
 800c484:	4603      	mov	r3, r0
 800c486:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c48a:	e06b      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	9301      	str	r3, [sp, #4]
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c49a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c49c:	f001 fb1d 	bl	800dada <VL53L1_preset_mode_timed_ranging_short_range>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c4a6:	e05d      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	9301      	str	r3, [sp, #4]
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4b8:	f001 fb49 	bl	800db4e <VL53L1_preset_mode_timed_ranging_long_range>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c4c2:	e04f      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	6a3b      	ldr	r3, [r7, #32]
 800c4ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4d4:	f001 fc1d 	bl	800dd12 <VL53L1_preset_mode_olt>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c4de:	e041      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	9301      	str	r3, [sp, #4]
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	6a3b      	ldr	r3, [r7, #32]
 800c4ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4f0:	f001 fbd9 	bl	800dca6 <VL53L1_preset_mode_singleshot_ranging>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c4fa:	e033      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	9302      	str	r3, [sp, #8]
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	6a3b      	ldr	r3, [r7, #32]
 800c50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c50c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c50e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c510:	f001 fb7d 	bl	800dc0e <VL53L1_preset_mode_low_power_auto_short_ranging>
 800c514:	4603      	mov	r3, r0
 800c516:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c51a:	e023      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	9302      	str	r3, [sp, #8]
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	9301      	str	r3, [sp, #4]
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	6a3b      	ldr	r3, [r7, #32]
 800c52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c52c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c52e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c530:	f001 fb47 	bl	800dbc2 <VL53L1_preset_mode_low_power_auto_ranging>
 800c534:	4603      	mov	r3, r0
 800c536:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c53a:	e013      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	9302      	str	r3, [sp, #8]
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	9301      	str	r3, [sp, #4]
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	6a3b      	ldr	r3, [r7, #32]
 800c54a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c54c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c54e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c550:	f001 fb83 	bl	800dc5a <VL53L1_preset_mode_low_power_auto_long_ranging>
 800c554:	4603      	mov	r3, r0
 800c556:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c55a:	e003      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c55c:	23fc      	movs	r3, #252	; 0xfc
 800c55e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800c562:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800c564:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d105      	bne.n	800c578 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56e:	893a      	ldrh	r2, [r7, #8]
 800c570:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	893a      	ldrh	r2, [r7, #8]
 800c576:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800c578:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d108      	bne.n	800c592 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800c580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c584:	6879      	ldr	r1, [r7, #4]
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff fca0 	bl	800becc <VL53L1_set_timeouts_us>
 800c58c:	4603      	mov	r3, r0
 800c58e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800c592:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c596:	2b00      	cmp	r3, #0
 800c598:	d106      	bne.n	800c5a8 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800c59a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f7ff fc46 	bl	800be2e <VL53L1_set_inter_measurement_period_ms>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800c5a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3738      	adds	r7, #56	; 0x38
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c5d0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	887a      	ldrh	r2, [r7, #2]
 800c5f8:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800c5fc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c600:	4618      	mov	r0, r3
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c628:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3714      	adds	r7, #20
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	460b      	mov	r3, r1
 800c642:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c644:	2300      	movs	r3, #0
 800c646:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	887a      	ldrh	r2, [r7, #2]
 800c650:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800c654:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c658:	4618      	mov	r0, r3
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c670:	2300      	movs	r3, #0
 800c672:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c67e:	f003 0303 	and.w	r3, r3, #3
 800c682:	b2da      	uxtb	r2, r3
 800c684:	78fb      	ldrb	r3, [r7, #3]
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	4413      	add	r3, r2
 800c68c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800c694:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c698:	4618      	mov	r0, r3
 800c69a:	3714      	adds	r7, #20
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b0d0      	sub	sp, #320	; 0x140
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	1d3b      	adds	r3, r7, #4
 800c6ac:	6018      	str	r0, [r3, #0]
 800c6ae:	4608      	mov	r0, r1
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	1cfb      	adds	r3, r7, #3
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	701a      	strb	r2, [r3, #0]
 800c6b8:	1cbb      	adds	r3, r7, #2
 800c6ba:	460a      	mov	r2, r1
 800c6bc:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c6c4:	1d3b      	adds	r3, r7, #4
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800c6cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6d0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c6d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800c6d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6dc:	3342      	adds	r3, #66	; 0x42
 800c6de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800c6e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c6ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800c6ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6f2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c6f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800c6fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6fe:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800c702:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800c706:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c70a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c70e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800c712:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c716:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c71a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800c71e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c722:	332c      	adds	r3, #44	; 0x2c
 800c724:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800c728:	f107 030c 	add.w	r3, r7, #12
 800c72c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800c730:	2300      	movs	r3, #0
 800c732:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800c736:	2300      	movs	r3, #0
 800c738:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800c748:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c74c:	1cfa      	adds	r2, r7, #3
 800c74e:	7812      	ldrb	r2, [r2, #0]
 800c750:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800c752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c756:	791b      	ldrb	r3, [r3, #4]
 800c758:	b25b      	sxtb	r3, r3
 800c75a:	f003 030f 	and.w	r3, r3, #15
 800c75e:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800c760:	1cfb      	adds	r3, r7, #3
 800c762:	f993 3000 	ldrsb.w	r3, [r3]
 800c766:	4313      	orrs	r3, r2
 800c768:	b25b      	sxtb	r3, r3
 800c76a:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800c76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c770:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800c772:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c776:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800c77a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c77e:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800c782:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c786:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800c78a:	2bff      	cmp	r3, #255	; 0xff
 800c78c:	d104      	bne.n	800c798 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800c78e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c792:	2200      	movs	r2, #0
 800c794:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c798:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c79c:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d133      	bne.n	800c80c <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800c7a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7a8:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d12d      	bne.n	800c80c <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800c7b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7b4:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800c7b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7bc:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800c7c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7c4:	2220      	movs	r2, #32
 800c7c6:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800c7ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7ce:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800c7d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d10c      	bne.n	800c7f4 <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800c7da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7de:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800c7ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800c7f2:	e004      	b.n	800c7fe <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800c7f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800c7fe:	1cbb      	adds	r3, r7, #2
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	2b04      	cmp	r3, #4
 800c804:	d802      	bhi.n	800c80c <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800c806:	1cbb      	adds	r3, r7, #2
 800c808:	2205      	movs	r2, #5
 800c80a:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c80c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c810:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c814:	2b01      	cmp	r3, #1
 800c816:	d110      	bne.n	800c83a <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800c818:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c81c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c820:	2b01      	cmp	r3, #1
 800c822:	d10a      	bne.n	800c83a <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800c824:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c828:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800c82c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c830:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800c834:	1cbb      	adds	r3, r7, #2
 800c836:	2206      	movs	r2, #6
 800c838:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800c83a:	1cbb      	adds	r3, r7, #2
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	3b01      	subs	r3, #1
 800c840:	2b05      	cmp	r3, #5
 800c842:	d827      	bhi.n	800c894 <VL53L1_init_and_start_range+0x1f0>
 800c844:	a201      	add	r2, pc, #4	; (adr r2, 800c84c <VL53L1_init_and_start_range+0x1a8>)
 800c846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84a:	bf00      	nop
 800c84c:	0800c88d 	.word	0x0800c88d
 800c850:	0800c885 	.word	0x0800c885
 800c854:	0800c87d 	.word	0x0800c87d
 800c858:	0800c875 	.word	0x0800c875
 800c85c:	0800c86d 	.word	0x0800c86d
 800c860:	0800c865 	.word	0x0800c865
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800c864:	2301      	movs	r3, #1
 800c866:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c86a:	e017      	b.n	800c89c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800c86c:	230d      	movs	r3, #13
 800c86e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c872:	e013      	b.n	800c89c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800c874:	2324      	movs	r3, #36	; 0x24
 800c876:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c87a:	e00f      	b.n	800c89c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800c87c:	2344      	movs	r3, #68	; 0x44
 800c87e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c882:	e00b      	b.n	800c89c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800c884:	235a      	movs	r3, #90	; 0x5a
 800c886:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c88a:	e007      	b.n	800c89c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800c88c:	2371      	movs	r3, #113	; 0x71
 800c88e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c892:	e003      	b.n	800c89c <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800c894:	2383      	movs	r3, #131	; 0x83
 800c896:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c89a:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800c89c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c8a0:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800c8a4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800c8a8:	f107 030c 	add.w	r3, r7, #12
 800c8ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c8b6:	e00b      	b.n	800c8d0 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800c8b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c8bc:	1c5a      	adds	r2, r3, #1
 800c8be:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c8c6:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c8d0:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800c8d4:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d3ed      	bcc.n	800c8b8 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800c8dc:	1cbb      	adds	r3, r7, #2
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b05      	cmp	r3, #5
 800c8e2:	d917      	bls.n	800c914 <VL53L1_init_and_start_range+0x270>
 800c8e4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d113      	bne.n	800c914 <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c8ec:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c8f0:	f1c3 0301 	rsb	r3, r3, #1
 800c8f4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c8f8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800c8fc:	f107 020c 	add.w	r2, r7, #12
 800c900:	4413      	add	r3, r2
 800c902:	461a      	mov	r2, r3
 800c904:	210b      	movs	r1, #11
 800c906:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800c90a:	f002 f8a7 	bl	800ea5c <VL53L1_i2c_encode_static_nvm_managed>
 800c90e:	4603      	mov	r3, r0
 800c910:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800c914:	1cbb      	adds	r3, r7, #2
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	2b04      	cmp	r3, #4
 800c91a:	d917      	bls.n	800c94c <VL53L1_init_and_start_range+0x2a8>
 800c91c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c920:	2b00      	cmp	r3, #0
 800c922:	d113      	bne.n	800c94c <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c924:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c928:	f1c3 030d 	rsb	r3, r3, #13
 800c92c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c930:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800c934:	f107 020c 	add.w	r2, r7, #12
 800c938:	4413      	add	r3, r2
 800c93a:	461a      	mov	r2, r3
 800c93c:	2117      	movs	r1, #23
 800c93e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c942:	f002 f967 	bl	800ec14 <VL53L1_i2c_encode_customer_nvm_managed>
 800c946:	4603      	mov	r3, r0
 800c948:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800c94c:	1cbb      	adds	r3, r7, #2
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	2b03      	cmp	r3, #3
 800c952:	d917      	bls.n	800c984 <VL53L1_init_and_start_range+0x2e0>
 800c954:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d113      	bne.n	800c984 <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c95c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c960:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800c964:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c968:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800c96c:	f107 020c 	add.w	r2, r7, #12
 800c970:	4413      	add	r3, r2
 800c972:	461a      	mov	r2, r3
 800c974:	2120      	movs	r1, #32
 800c976:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c97a:	f002 fa89 	bl	800ee90 <VL53L1_i2c_encode_static_config>
 800c97e:	4603      	mov	r3, r0
 800c980:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800c984:	1cbb      	adds	r3, r7, #2
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d917      	bls.n	800c9bc <VL53L1_init_and_start_range+0x318>
 800c98c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c990:	2b00      	cmp	r3, #0
 800c992:	d113      	bne.n	800c9bc <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c994:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c998:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800c99c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c9a0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800c9a4:	f107 020c 	add.w	r2, r7, #12
 800c9a8:	4413      	add	r3, r2
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	2116      	movs	r1, #22
 800c9ae:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800c9b2:	f002 fb50 	bl	800f056 <VL53L1_i2c_encode_general_config>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800c9bc:	1cbb      	adds	r3, r7, #2
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d917      	bls.n	800c9f4 <VL53L1_init_and_start_range+0x350>
 800c9c4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d113      	bne.n	800c9f4 <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c9cc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c9d0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800c9d4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c9d8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800c9dc:	f107 020c 	add.w	r2, r7, #12
 800c9e0:	4413      	add	r3, r2
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	2117      	movs	r1, #23
 800c9e6:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c9ea:	f002 fbb8 	bl	800f15e <VL53L1_i2c_encode_timing_config>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800c9f4:	1cbb      	adds	r3, r7, #2
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d036      	beq.n	800ca6a <VL53L1_init_and_start_range+0x3c6>
 800c9fc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d132      	bne.n	800ca6a <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800ca04:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ca08:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800ca0c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800ca10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca14:	791b      	ldrb	r3, [r3, #4]
 800ca16:	f003 0320 	and.w	r3, r3, #32
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d017      	beq.n	800ca4e <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800ca1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ca22:	789b      	ldrb	r3, [r3, #2]
 800ca24:	f043 0301 	orr.w	r3, r3, #1
 800ca28:	b2da      	uxtb	r2, r3
 800ca2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ca2e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800ca30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ca34:	789b      	ldrb	r3, [r3, #2]
 800ca36:	f043 0301 	orr.w	r3, r3, #1
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ca40:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800ca42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ca46:	789a      	ldrb	r2, [r3, #2]
 800ca48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ca4c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ca4e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800ca52:	f107 020c 	add.w	r2, r7, #12
 800ca56:	4413      	add	r3, r2
 800ca58:	461a      	mov	r2, r3
 800ca5a:	2112      	movs	r1, #18
 800ca5c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800ca60:	f002 fbff 	bl	800f262 <VL53L1_i2c_encode_dynamic_config>
 800ca64:	4603      	mov	r3, r0
 800ca66:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800ca6a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d113      	bne.n	800ca9a <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800ca72:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ca76:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800ca7a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ca7e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800ca82:	f107 020c 	add.w	r2, r7, #12
 800ca86:	4413      	add	r3, r2
 800ca88:	461a      	mov	r2, r3
 800ca8a:	2105      	movs	r1, #5
 800ca8c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800ca90:	f002 fc6c 	bl	800f36c <VL53L1_i2c_encode_system_control>
 800ca94:	4603      	mov	r3, r0
 800ca96:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800ca9a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d10c      	bne.n	800cabc <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800caa2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800caa6:	f107 020c 	add.w	r2, r7, #12
 800caaa:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800caae:	1d38      	adds	r0, r7, #4
 800cab0:	6800      	ldr	r0, [r0, #0]
 800cab2:	f003 f94b 	bl	800fd4c <VL53L1_WriteMulti>
 800cab6:	4603      	mov	r3, r0
 800cab8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800cabc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d106      	bne.n	800cad2 <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800cac4:	1d3b      	adds	r3, r7, #4
 800cac6:	6818      	ldr	r0, [r3, #0]
 800cac8:	f001 f98a 	bl	800dde0 <VL53L1_update_ll_driver_rd_state>
 800cacc:	4603      	mov	r3, r0
 800cace:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800cad2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800cada:	1d3b      	adds	r3, r7, #4
 800cadc:	6818      	ldr	r0, [r3, #0]
 800cade:	f001 fa52 	bl	800df86 <VL53L1_update_ll_driver_cfg_state>
 800cae2:	4603      	mov	r3, r0
 800cae4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800cae8:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800caec:	4618      	mov	r0, r3
 800caee:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop

0800caf8 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b0c8      	sub	sp, #288	; 0x120
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	1d3b      	adds	r3, r7, #4
 800cb00:	6018      	str	r0, [r3, #0]
 800cb02:	460a      	mov	r2, r1
 800cb04:	1cfb      	adds	r3, r7, #3
 800cb06:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cb0e:	1d3b      	adds	r3, r7, #4
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800cb16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cb1a:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800cb1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800cb22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cb26:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800cb2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800cb2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cb32:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800cb36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800cb3a:	2388      	movs	r3, #136	; 0x88
 800cb3c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800cb40:	2300      	movs	r3, #0
 800cb42:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800cb4c:	1cfb      	adds	r3, r7, #3
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d008      	beq.n	800cb66 <VL53L1_get_measurement_results+0x6e>
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d10d      	bne.n	800cb74 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800cb58:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800cb5c:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800cb60:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800cb64:	e00a      	b.n	800cb7c <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800cb66:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800cb6a:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800cb6e:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800cb72:	e003      	b.n	800cb7c <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800cb74:	232c      	movs	r3, #44	; 0x2c
 800cb76:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800cb7a:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800cb7c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10c      	bne.n	800cb9e <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800cb84:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800cb88:	f107 0208 	add.w	r2, r7, #8
 800cb8c:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800cb90:	1d38      	adds	r0, r7, #4
 800cb92:	6800      	ldr	r0, [r0, #0]
 800cb94:	f003 f910 	bl	800fdb8 <VL53L1_ReadMulti>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800cb9e:	1cfb      	adds	r3, r7, #3
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d917      	bls.n	800cbd6 <VL53L1_get_measurement_results+0xde>
 800cba6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d113      	bne.n	800cbd6 <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800cbae:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800cbb2:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800cbb6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800cbba:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800cbbe:	f107 0208 	add.w	r2, r7, #8
 800cbc2:	4413      	add	r3, r2
 800cbc4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800cbc8:	4619      	mov	r1, r3
 800cbca:	2038      	movs	r0, #56	; 0x38
 800cbcc:	f002 fd60 	bl	800f690 <VL53L1_i2c_decode_debug_results>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800cbd6:	1cfb      	adds	r3, r7, #3
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d017      	beq.n	800cc0e <VL53L1_get_measurement_results+0x116>
 800cbde:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d113      	bne.n	800cc0e <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800cbe6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800cbea:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800cbee:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800cbf2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800cbf6:	f107 0208 	add.w	r2, r7, #8
 800cbfa:	4413      	add	r3, r2
 800cbfc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800cc00:	4619      	mov	r1, r3
 800cc02:	2021      	movs	r0, #33	; 0x21
 800cc04:	f002 fce3 	bl	800f5ce <VL53L1_i2c_decode_core_results>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800cc0e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d110      	bne.n	800cc38 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800cc16:	2300      	movs	r3, #0
 800cc18:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800cc1c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800cc20:	f107 0208 	add.w	r2, r7, #8
 800cc24:	4413      	add	r3, r2
 800cc26:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	202c      	movs	r0, #44	; 0x2c
 800cc2e:	f002 fbd8 	bl	800f3e2 <VL53L1_i2c_decode_system_results>
 800cc32:	4603      	mov	r3, r0
 800cc34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800cc38:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b088      	sub	sp, #32
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	60f8      	str	r0, [r7, #12]
 800cc4e:	460b      	mov	r3, r1
 800cc50:	607a      	str	r2, [r7, #4]
 800cc52:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cc54:	2300      	movs	r3, #0
 800cc56:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800cc62:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800cc68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d106      	bne.n	800cc7e <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800cc70:	7afb      	ldrb	r3, [r7, #11]
 800cc72:	4619      	mov	r1, r3
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f7ff ff3f 	bl	800caf8 <VL53L1_get_measurement_results>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800cc7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d10c      	bne.n	800cca0 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	f000 f85e 	bl	800cd5c <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d11f      	bne.n	800ccea <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800ccaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d10e      	bne.n	800ccd0 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d109      	bne.n	800ccd0 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f001 fe32 	bl	800e926 <VL53L1_low_power_auto_setup_manual_calibration>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800ccce:	e00c      	b.n	800ccea <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800ccd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d108      	bne.n	800ccea <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d103      	bne.n	800ccea <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	2202      	movs	r2, #2
 800cce6:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800ccfe:	2284      	movs	r2, #132	; 0x84
 800cd00:	6939      	ldr	r1, [r7, #16]
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f003 fbd8 	bl	80104b8 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800cd08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d104      	bne.n	800cd1a <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f001 f8ed 	bl	800def0 <VL53L1_check_ll_driver_rd_state>
 800cd16:	4603      	mov	r3, r0
 800cd18:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800cd1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3720      	adds	r7, #32
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b084      	sub	sp, #16
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	460b      	mov	r3, r1
 800cd30:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cd32:	2300      	movs	r3, #0
 800cd34:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800cd36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d107      	bne.n	800cd4e <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800cd3e:	78fb      	ldrb	r3, [r7, #3]
 800cd40:	2203      	movs	r2, #3
 800cd42:	4619      	mov	r1, r3
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7ff fcad 	bl	800c6a4 <VL53L1_init_and_start_range>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800cd4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
	...

0800cd5c <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b089      	sub	sp, #36	; 0x24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
 800cd68:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800cd72:	2300      	movs	r3, #0
 800cd74:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	78da      	ldrb	r2, [r3, #3]
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	3304      	adds	r3, #4
 800cd82:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800cd84:	2300      	movs	r3, #0
 800cd86:	77fb      	strb	r3, [r7, #31]
 800cd88:	e0d0      	b.n	800cf2c <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	7ffa      	ldrb	r2, [r7, #31]
 800cd8e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	2200      	movs	r2, #0
 800cd94:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	78db      	ldrb	r3, [r3, #3]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d10a      	bne.n	800cdb4 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	785b      	ldrb	r3, [r3, #1]
 800cda2:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800cda6:	2b09      	cmp	r3, #9
 800cda8:	d104      	bne.n	800cdb4 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	2213      	movs	r2, #19
 800cdae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdb2:	e007      	b.n	800cdc4 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	785b      	ldrb	r3, [r3, #1]
 800cdb8:	f003 031f 	and.w	r3, r3, #31
 800cdbc:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800cdc4:	7ffb      	ldrb	r3, [r7, #31]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d002      	beq.n	800cdd0 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d05d      	beq.n	800ce8a <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800cdce:	e0a7      	b.n	800cf20 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	789b      	ldrb	r3, [r3, #2]
 800cdd4:	2b07      	cmp	r3, #7
 800cdd6:	d104      	bne.n	800cde2 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	821a      	strh	r2, [r3, #16]
 800cde0:	e00c      	b.n	800cdfc <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	789b      	ldrb	r3, [r3, #2]
 800cde6:	2b08      	cmp	r3, #8
 800cde8:	d104      	bne.n	800cdf4 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	821a      	strh	r2, [r3, #16]
 800cdf2:	e003      	b.n	800cdfc <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	895b      	ldrh	r3, [r3, #10]
 800ce18:	015b      	lsls	r3, r3, #5
 800ce1a:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce22:	d302      	bcc.n	800ce2a <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800ce24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce28:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800ce3e:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	fb02 f303 	mul.w	r3, r2, r3
 800ce48:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce50:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	da01      	bge.n	800ce5c <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800ce58:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ce5c:	12db      	asrs	r3, r3, #11
 800ce5e:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	b21a      	sxth	r2, r3
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	621a      	str	r2, [r3, #32]

			break;
 800ce88:	e04a      	b.n	800cf20 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cea0:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	8bdb      	ldrh	r3, [r3, #30]
 800ceae:	015b      	lsls	r3, r3, #5
 800ceb0:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceb8:	d302      	bcc.n	800cec0 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800ceba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cebe:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800ced4:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	fb02 f303 	mul.w	r3, r2, r3
 800cede:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cee6:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	da01      	bge.n	800cef2 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800ceee:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800cef2:	12db      	asrs	r3, r3, #11
 800cef4:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	b21a      	sxth	r2, r3
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	621a      	str	r2, [r3, #32]

			break;
 800cf1e:	bf00      	nop
		}

		pdata++;
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	3340      	adds	r3, #64	; 0x40
 800cf24:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800cf26:	7ffb      	ldrb	r3, [r7, #31]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	77fb      	strb	r3, [r7, #31]
 800cf2c:	7ffb      	ldrb	r3, [r7, #31]
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	f67f af2b 	bls.w	800cd8a <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	2200      	movs	r2, #0
 800cf38:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	785b      	ldrb	r3, [r3, #1]
 800cf3e:	f003 031f 	and.w	r3, r3, #31
 800cf42:	2b11      	cmp	r3, #17
 800cf44:	bf8c      	ite	hi
 800cf46:	2201      	movhi	r2, #1
 800cf48:	2200      	movls	r2, #0
 800cf4a:	b2d2      	uxtb	r2, r2
 800cf4c:	2a00      	cmp	r2, #0
 800cf4e:	d116      	bne.n	800cf7e <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800cf50:	2201      	movs	r2, #1
 800cf52:	409a      	lsls	r2, r3
 800cf54:	4b0d      	ldr	r3, [pc, #52]	; (800cf8c <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800cf56:	4013      	ands	r3, r2
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	bf14      	ite	ne
 800cf5c:	2301      	movne	r3, #1
 800cf5e:	2300      	moveq	r3, #0
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00b      	beq.n	800cf7e <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	785b      	ldrb	r3, [r3, #1]
 800cf6a:	f003 031f 	and.w	r3, r3, #31
 800cf6e:	b2da      	uxtb	r2, r3
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	2200      	movs	r2, #0
 800cf78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800cf7c:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800cf7e:	bf00      	nop
 800cf80:	3724      	adds	r7, #36	; 0x24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	0002200e 	.word	0x0002200e

0800cf90 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b087      	sub	sp, #28
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	607a      	str	r2, [r7, #4]
 800cf9c:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800cfa6:	897b      	ldrh	r3, [r7, #10]
 800cfa8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800cfac:	2b38      	cmp	r3, #56	; 0x38
 800cfae:	f200 8204 	bhi.w	800d3ba <VL53L1_get_tuning_parm+0x42a>
 800cfb2:	a201      	add	r2, pc, #4	; (adr r2, 800cfb8 <VL53L1_get_tuning_parm+0x28>)
 800cfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb8:	0800d09d 	.word	0x0800d09d
 800cfbc:	0800d0ab 	.word	0x0800d0ab
 800cfc0:	0800d0b9 	.word	0x0800d0b9
 800cfc4:	0800d0c7 	.word	0x0800d0c7
 800cfc8:	0800d0d5 	.word	0x0800d0d5
 800cfcc:	0800d0e3 	.word	0x0800d0e3
 800cfd0:	0800d0f1 	.word	0x0800d0f1
 800cfd4:	0800d0ff 	.word	0x0800d0ff
 800cfd8:	0800d10d 	.word	0x0800d10d
 800cfdc:	0800d11b 	.word	0x0800d11b
 800cfe0:	0800d129 	.word	0x0800d129
 800cfe4:	0800d137 	.word	0x0800d137
 800cfe8:	0800d145 	.word	0x0800d145
 800cfec:	0800d153 	.word	0x0800d153
 800cff0:	0800d161 	.word	0x0800d161
 800cff4:	0800d16f 	.word	0x0800d16f
 800cff8:	0800d17d 	.word	0x0800d17d
 800cffc:	0800d18b 	.word	0x0800d18b
 800d000:	0800d199 	.word	0x0800d199
 800d004:	0800d1a7 	.word	0x0800d1a7
 800d008:	0800d1b5 	.word	0x0800d1b5
 800d00c:	0800d1c3 	.word	0x0800d1c3
 800d010:	0800d1d1 	.word	0x0800d1d1
 800d014:	0800d1df 	.word	0x0800d1df
 800d018:	0800d1ed 	.word	0x0800d1ed
 800d01c:	0800d1fb 	.word	0x0800d1fb
 800d020:	0800d209 	.word	0x0800d209
 800d024:	0800d217 	.word	0x0800d217
 800d028:	0800d225 	.word	0x0800d225
 800d02c:	0800d233 	.word	0x0800d233
 800d030:	0800d241 	.word	0x0800d241
 800d034:	0800d24f 	.word	0x0800d24f
 800d038:	0800d25d 	.word	0x0800d25d
 800d03c:	0800d26b 	.word	0x0800d26b
 800d040:	0800d279 	.word	0x0800d279
 800d044:	0800d287 	.word	0x0800d287
 800d048:	0800d295 	.word	0x0800d295
 800d04c:	0800d2a3 	.word	0x0800d2a3
 800d050:	0800d2b1 	.word	0x0800d2b1
 800d054:	0800d2bf 	.word	0x0800d2bf
 800d058:	0800d2cd 	.word	0x0800d2cd
 800d05c:	0800d2db 	.word	0x0800d2db
 800d060:	0800d2e9 	.word	0x0800d2e9
 800d064:	0800d2f7 	.word	0x0800d2f7
 800d068:	0800d305 	.word	0x0800d305
 800d06c:	0800d313 	.word	0x0800d313
 800d070:	0800d321 	.word	0x0800d321
 800d074:	0800d32f 	.word	0x0800d32f
 800d078:	0800d33d 	.word	0x0800d33d
 800d07c:	0800d34b 	.word	0x0800d34b
 800d080:	0800d359 	.word	0x0800d359
 800d084:	0800d367 	.word	0x0800d367
 800d088:	0800d375 	.word	0x0800d375
 800d08c:	0800d383 	.word	0x0800d383
 800d090:	0800d391 	.word	0x0800d391
 800d094:	0800d39f 	.word	0x0800d39f
 800d098:	0800d3ad 	.word	0x0800d3ad

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800d0a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	601a      	str	r2, [r3, #0]
	break;
 800d0a8:	e18e      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800d0b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	601a      	str	r2, [r3, #0]
	break;
 800d0b6:	e187      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d0be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	601a      	str	r2, [r3, #0]
	break;
 800d0c4:	e180      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800d0cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	601a      	str	r2, [r3, #0]
	break;
 800d0d2:	e179      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d0da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	601a      	str	r2, [r3, #0]
	break;
 800d0e0:	e172      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800d0e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	601a      	str	r2, [r3, #0]
	break;
 800d0ee:	e16b      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800d0f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	601a      	str	r2, [r3, #0]
	break;
 800d0fc:	e164      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d104:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	601a      	str	r2, [r3, #0]
	break;
 800d10a:	e15d      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800d112:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	601a      	str	r2, [r3, #0]
	break;
 800d118:	e156      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800d120:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	601a      	str	r2, [r3, #0]
	break;
 800d126:	e14f      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800d12e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	601a      	str	r2, [r3, #0]
	break;
 800d134:	e148      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800d13c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	601a      	str	r2, [r3, #0]
	break;
 800d142:	e141      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800d14a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	601a      	str	r2, [r3, #0]
	break;
 800d150:	e13a      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800d158:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	601a      	str	r2, [r3, #0]
	break;
 800d15e:	e133      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800d166:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	601a      	str	r2, [r3, #0]
	break;
 800d16c:	e12c      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800d174:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	601a      	str	r2, [r3, #0]
	break;
 800d17a:	e125      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800d182:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	601a      	str	r2, [r3, #0]
	break;
 800d188:	e11e      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d190:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	601a      	str	r2, [r3, #0]
	break;
 800d196:	e117      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800d19e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	601a      	str	r2, [r3, #0]
	break;
 800d1a4:	e110      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800d1ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	601a      	str	r2, [r3, #0]
	break;
 800d1b2:	e109      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800d1ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	601a      	str	r2, [r3, #0]
	break;
 800d1c0:	e102      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800d1c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	601a      	str	r2, [r3, #0]
	break;
 800d1ce:	e0fb      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800d1d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	601a      	str	r2, [r3, #0]
	break;
 800d1dc:	e0f4      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800d1e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	601a      	str	r2, [r3, #0]
	break;
 800d1ea:	e0ed      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800d1f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	601a      	str	r2, [r3, #0]
	break;
 800d1f8:	e0e6      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800d200:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	601a      	str	r2, [r3, #0]
	break;
 800d206:	e0df      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800d20e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	601a      	str	r2, [r3, #0]
	break;
 800d214:	e0d8      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800d21c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	601a      	str	r2, [r3, #0]
	break;
 800d222:	e0d1      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800d22a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	601a      	str	r2, [r3, #0]
	break;
 800d230:	e0ca      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d238:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	601a      	str	r2, [r3, #0]
	break;
 800d23e:	e0c3      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d246:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	601a      	str	r2, [r3, #0]
	break;
 800d24c:	e0bc      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800d254:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	601a      	str	r2, [r3, #0]
	break;
 800d25a:	e0b5      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d262:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	601a      	str	r2, [r3, #0]
	break;
 800d268:	e0ae      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800d270:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	601a      	str	r2, [r3, #0]
	break;
 800d276:	e0a7      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800d27e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	601a      	str	r2, [r3, #0]
	break;
 800d284:	e0a0      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800d28c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	601a      	str	r2, [r3, #0]
	break;
 800d292:	e099      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800d29a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	601a      	str	r2, [r3, #0]
	break;
 800d2a0:	e092      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800d2a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	601a      	str	r2, [r3, #0]
	break;
 800d2ae:	e08b      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d2b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	601a      	str	r2, [r3, #0]
	break;
 800d2bc:	e084      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d2c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	601a      	str	r2, [r3, #0]
	break;
 800d2ca:	e07d      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d2d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	601a      	str	r2, [r3, #0]
	break;
 800d2d8:	e076      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800d2e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	601a      	str	r2, [r3, #0]
	break;
 800d2e6:	e06f      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800d2ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	601a      	str	r2, [r3, #0]
	break;
 800d2f4:	e068      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800d2fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	601a      	str	r2, [r3, #0]
	break;
 800d302:	e061      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800d30a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	601a      	str	r2, [r3, #0]
	break;
 800d310:	e05a      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800d318:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	601a      	str	r2, [r3, #0]
	break;
 800d31e:	e053      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800d326:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	601a      	str	r2, [r3, #0]
	break;
 800d32c:	e04c      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800d334:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	601a      	str	r2, [r3, #0]
	break;
 800d33a:	e045      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d342:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	601a      	str	r2, [r3, #0]
	break;
 800d348:	e03e      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d350:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	601a      	str	r2, [r3, #0]
	break;
 800d356:	e037      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d35e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	601a      	str	r2, [r3, #0]
	break;
 800d364:	e030      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d36c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	601a      	str	r2, [r3, #0]
	break;
 800d372:	e029      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d37a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	601a      	str	r2, [r3, #0]
	break;
 800d380:	e022      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d388:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	601a      	str	r2, [r3, #0]
	break;
 800d38e:	e01b      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800d396:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	601a      	str	r2, [r3, #0]
	break;
 800d39c:	e014      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d3a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	601a      	str	r2, [r3, #0]
	break;
 800d3aa:	e00d      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d3b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	601a      	str	r2, [r3, #0]
	break;
 800d3b8:	e006      	b.n	800d3c8 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d3c0:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800d3c2:	23fc      	movs	r3, #252	; 0xfc
 800d3c4:	75fb      	strb	r3, [r7, #23]
	break;
 800d3c6:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800d3c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	371c      	adds	r7, #28
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr

0800d3d8 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b085      	sub	sp, #20
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2208      	movs	r2, #8
 800d3e8:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	220b      	movs	r2, #11
 800d3ee:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3f6:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d3fe:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800d406:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800d40e:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3714      	adds	r7, #20
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d428:	2300      	movs	r3, #0
 800d42a:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2212      	movs	r2, #18
 800d436:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	220f      	movs	r2, #15
 800d43c:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2202      	movs	r2, #2
 800d442:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800d44a:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	220c      	movs	r2, #12
 800d450:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3714      	adds	r7, #20
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr

0800d462 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b084      	sub	sp, #16
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
 800d46a:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d46c:	2300      	movs	r3, #0
 800d46e:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	895b      	ldrh	r3, [r3, #10]
 800d474:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	895b      	ldrh	r3, [r3, #10]
 800d492:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	2240      	movs	r2, #64	; 0x40
 800d4b6:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10d      	bne.n	800d4dc <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d108      	bne.n	800d4dc <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d103      	bne.n	800d4dc <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	741a      	strb	r2, [r3, #16]
 800d4da:	e002      	b.n	800d4e2 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800d4e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d114      	bne.n	800d514 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d110      	bne.n	800d514 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	6818      	ldr	r0, [r3, #0]
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	7d1b      	ldrb	r3, [r3, #20]
 800d506:	f000 ffc9 	bl	800e49c <VL53L1_calc_range_ignore_threshold>
 800d50a:	4603      	mov	r3, r0
 800d50c:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	82da      	strh	r2, [r3, #22]
 800d512:	e002      	b.n	800d51a <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	2200      	movs	r2, #0
 800d518:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d51a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800d526:	b480      	push	{r7}
 800d528:	b085      	sub	sp, #20
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d52e:	2300      	movs	r3, #0
 800d530:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d538:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d540:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d548:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d550:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2208      	movs	r2, #8
 800d556:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2228      	movs	r2, #40	; 0x28
 800d55c:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2209      	movs	r2, #9
 800d562:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d564:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d57c:	2300      	movs	r3, #0
 800d57e:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f248 0203 	movw	r2, #32771	; 0x8003
 800d586:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f248 0201 	movw	r2, #32769	; 0x8001
 800d58e:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f248 0241 	movw	r2, #32833	; 0x8041
 800d596:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	220e      	movs	r2, #14
 800d59c:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	220a      	movs	r2, #10
 800d5a2:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2206      	movs	r2, #6
 800d5a8:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	220e      	movs	r2, #14
 800d5ae:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	220a      	movs	r2, #10
 800d5b4:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2206      	movs	r2, #6
 800d5ba:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2202      	movs	r2, #2
 800d5c0:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2221      	movs	r2, #33	; 0x21
 800d5c6:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d5da:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d5e2:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d5ea:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	22c0      	movs	r2, #192	; 0xc0
 800d5f0:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	22c0      	movs	r2, #192	; 0xc0
 800d5f6:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	22c0      	movs	r2, #192	; 0xc0
 800d5fc:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2208      	movs	r2, #8
 800d602:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2210      	movs	r2, #16
 800d608:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2201      	movs	r2, #1
 800d60e:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2202      	movs	r2, #2
 800d616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2201      	movs	r2, #1
 800d61e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2202      	movs	r2, #2
 800d626:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d638:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d640:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f248 0230 	movw	r2, #32816	; 0x8030
 800d648:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d650:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d658:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d660:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f24f 6218 	movw	r2, #63000	; 0xf618
 800d668:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d670:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800d678:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d680:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800d682:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d686:	4618      	mov	r0, r3
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d692:	b480      	push	{r7}
 800d694:	b087      	sub	sp, #28
 800d696:	af00      	add	r7, sp, #0
 800d698:	60f8      	str	r0, [r7, #12]
 800d69a:	60b9      	str	r1, [r7, #8]
 800d69c:	607a      	str	r2, [r7, #4]
 800d69e:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d6aa:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2211      	movs	r2, #17
 800d6ec:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2202      	movs	r2, #2
 800d6f2:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2202      	movs	r2, #2
 800d6fe:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2208      	movs	r2, #8
 800d704:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2200      	movs	r2, #0
 800d70a:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800d70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70e:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2201      	movs	r2, #1
 800d72a:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2200      	movs	r2, #0
 800d730:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2200      	movs	r2, #0
 800d736:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2200      	movs	r2, #0
 800d73c:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	22ff      	movs	r2, #255	; 0xff
 800d742:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2200      	movs	r2, #0
 800d758:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2200      	movs	r2, #0
 800d75e:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	2200      	movs	r2, #0
 800d76a:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	2200      	movs	r2, #0
 800d770:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	2220      	movs	r2, #32
 800d776:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	220b      	movs	r2, #11
 800d77c:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800d77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d780:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	2202      	movs	r2, #2
 800d78a:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	220d      	movs	r2, #13
 800d790:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800d792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d794:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	2200      	movs	r2, #0
 800d79e:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800d7b8:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	2238      	movs	r2, #56	; 0x38
 800d7c4:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	22ff      	movs	r2, #255	; 0xff
 800d7ca:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	221a      	movs	r2, #26
 800d7dc:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2220      	movs	r2, #32
 800d7e8:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	22cc      	movs	r2, #204	; 0xcc
 800d7f4:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	220b      	movs	r2, #11
 800d7fa:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2201      	movs	r2, #1
 800d800:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	22f5      	movs	r2, #245	; 0xf5
 800d806:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2209      	movs	r2, #9
 800d80c:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d810:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800d816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d818:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2208      	movs	r2, #8
 800d822:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2278      	movs	r2, #120	; 0x78
 800d828:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	2201      	movs	r2, #1
 800d83a:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	2200      	movs	r2, #0
 800d840:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	2200      	movs	r2, #0
 800d846:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	2200      	movs	r2, #0
 800d84c:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800d84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d850:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	220b      	movs	r2, #11
 800d85c:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2209      	movs	r2, #9
 800d862:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800d864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d866:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800d86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86e:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	2201      	movs	r2, #1
 800d878:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800d87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800d884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d886:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	22c7      	movs	r2, #199	; 0xc7
 800d892:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	22ff      	movs	r2, #255	; 0xff
 800d898:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	22db      	movs	r2, #219	; 0xdb
 800d89e:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	2202      	movs	r2, #2
 800d8a4:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800d8ac:	6a3b      	ldr	r3, [r7, #32]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800d8b2:	6a3b      	ldr	r3, [r7, #32]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800d8b8:	6a3b      	ldr	r3, [r7, #32]
 800d8ba:	2221      	movs	r2, #33	; 0x21
 800d8bc:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800d8be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	371c      	adds	r7, #28
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr

0800d8ce <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b088      	sub	sp, #32
 800d8d2:	af02      	add	r7, sp, #8
 800d8d4:	60f8      	str	r0, [r7, #12]
 800d8d6:	60b9      	str	r1, [r7, #8]
 800d8d8:	607a      	str	r2, [r7, #4]
 800d8da:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	9301      	str	r3, [sp, #4]
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	9300      	str	r3, [sp, #0]
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	68b9      	ldr	r1, [r7, #8]
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f7ff fecf 	bl	800d692 <VL53L1_preset_mode_standard_ranging>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d8f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d121      	bne.n	800d944 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2207      	movs	r2, #7
 800d904:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2205      	movs	r2, #5
 800d90a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90e:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800d914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d916:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2208      	movs	r2, #8
 800d920:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2238      	movs	r2, #56	; 0x38
 800d926:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	2207      	movs	r2, #7
 800d92c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	2205      	movs	r2, #5
 800d932:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d944:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3718      	adds	r7, #24
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b088      	sub	sp, #32
 800d954:	af02      	add	r7, sp, #8
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
 800d95c:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d95e:	2300      	movs	r3, #0
 800d960:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d964:	9301      	str	r3, [sp, #4]
 800d966:	6a3b      	ldr	r3, [r7, #32]
 800d968:	9300      	str	r3, [sp, #0]
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	68b9      	ldr	r1, [r7, #8]
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f7ff fe8e 	bl	800d692 <VL53L1_preset_mode_standard_ranging>
 800d976:	4603      	mov	r3, r0
 800d978:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d97a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d121      	bne.n	800d9c6 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	220f      	movs	r2, #15
 800d986:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	220d      	movs	r2, #13
 800d98c:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800d98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d990:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800d996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d998:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2208      	movs	r2, #8
 800d9a2:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	22b8      	movs	r2, #184	; 0xb8
 800d9a8:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	220f      	movs	r2, #15
 800d9ae:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	220d      	movs	r2, #13
 800d9b4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800d9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c0:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d9c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3718      	adds	r7, #24
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b088      	sub	sp, #32
 800d9d6:	af02      	add	r7, sp, #8
 800d9d8:	60f8      	str	r0, [r7, #12]
 800d9da:	60b9      	str	r1, [r7, #8]
 800d9dc:	607a      	str	r2, [r7, #4]
 800d9de:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	9301      	str	r3, [sp, #4]
 800d9e8:	6a3b      	ldr	r3, [r7, #32]
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	68b9      	ldr	r1, [r7, #8]
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f7ff fe4d 	bl	800d692 <VL53L1_preset_mode_standard_ranging>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d9fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d105      	bne.n	800da10 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	2202      	movs	r2, #2
 800da08:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	223b      	movs	r2, #59	; 0x3b
 800da0e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800da10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da14:	4618      	mov	r0, r3
 800da16:	3718      	adds	r7, #24
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b088      	sub	sp, #32
 800da20:	af02      	add	r7, sp, #8
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
 800da28:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da2a:	2300      	movs	r3, #0
 800da2c:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da30:	9301      	str	r3, [sp, #4]
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	68b9      	ldr	r1, [r7, #8]
 800da3c:	68f8      	ldr	r0, [r7, #12]
 800da3e:	f7ff fe28 	bl	800d692 <VL53L1_preset_mode_standard_ranging>
 800da42:	4603      	mov	r3, r0
 800da44:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800da46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d105      	bne.n	800da5a <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	2202      	movs	r2, #2
 800da52:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	225b      	movs	r2, #91	; 0x5b
 800da58:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800da5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3718      	adds	r7, #24
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b088      	sub	sp, #32
 800da6a:	af02      	add	r7, sp, #8
 800da6c:	60f8      	str	r0, [r7, #12]
 800da6e:	60b9      	str	r1, [r7, #8]
 800da70:	607a      	str	r2, [r7, #4]
 800da72:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da74:	2300      	movs	r3, #0
 800da76:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	9301      	str	r3, [sp, #4]
 800da7c:	6a3b      	ldr	r3, [r7, #32]
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	68b9      	ldr	r1, [r7, #8]
 800da86:	68f8      	ldr	r0, [r7, #12]
 800da88:	f7ff fe03 	bl	800d692 <VL53L1_preset_mode_standard_ranging>
 800da8c:	4603      	mov	r3, r0
 800da8e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800da90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d11a      	bne.n	800dace <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	2200      	movs	r2, #0
 800da9c:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	22b1      	movs	r2, #177	; 0xb1
 800daa8:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	22d4      	movs	r2, #212	; 0xd4
 800dab4:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800dabc:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800dabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800dac8:	6a3b      	ldr	r3, [r7, #32]
 800daca:	2240      	movs	r2, #64	; 0x40
 800dacc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800dace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3718      	adds	r7, #24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b088      	sub	sp, #32
 800dade:	af02      	add	r7, sp, #8
 800dae0:	60f8      	str	r0, [r7, #12]
 800dae2:	60b9      	str	r1, [r7, #8]
 800dae4:	607a      	str	r2, [r7, #4]
 800dae6:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dae8:	2300      	movs	r3, #0
 800daea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	9301      	str	r3, [sp, #4]
 800daf0:	6a3b      	ldr	r3, [r7, #32]
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	68b9      	ldr	r1, [r7, #8]
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f7ff fee7 	bl	800d8ce <VL53L1_preset_mode_standard_ranging_short_range>
 800db00:	4603      	mov	r3, r0
 800db02:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800db04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d11a      	bne.n	800db42 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	2200      	movs	r2, #0
 800db10:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2201      	movs	r2, #1
 800db16:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2284      	movs	r2, #132	; 0x84
 800db1c:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2201      	movs	r2, #1
 800db22:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	22b1      	movs	r2, #177	; 0xb1
 800db28:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800db30:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800db32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db34:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800db3c:	6a3b      	ldr	r3, [r7, #32]
 800db3e:	2240      	movs	r2, #64	; 0x40
 800db40:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800db42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db46:	4618      	mov	r0, r3
 800db48:	3718      	adds	r7, #24
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b088      	sub	sp, #32
 800db52:	af02      	add	r7, sp, #8
 800db54:	60f8      	str	r0, [r7, #12]
 800db56:	60b9      	str	r1, [r7, #8]
 800db58:	607a      	str	r2, [r7, #4]
 800db5a:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800db5c:	2300      	movs	r3, #0
 800db5e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800db60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db62:	9301      	str	r3, [sp, #4]
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	68b9      	ldr	r1, [r7, #8]
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f7ff feee 	bl	800d950 <VL53L1_preset_mode_standard_ranging_long_range>
 800db74:	4603      	mov	r3, r0
 800db76:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800db78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d11a      	bne.n	800dbb6 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	2200      	movs	r2, #0
 800db84:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2297      	movs	r2, #151	; 0x97
 800db90:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2200      	movs	r2, #0
 800db96:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	22b1      	movs	r2, #177	; 0xb1
 800db9c:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800dba4:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800dba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800dbb0:	6a3b      	ldr	r3, [r7, #32]
 800dbb2:	2240      	movs	r2, #64	; 0x40
 800dbb4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800dbb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3718      	adds	r7, #24
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b088      	sub	sp, #32
 800dbc6:	af02      	add	r7, sp, #8
 800dbc8:	60f8      	str	r0, [r7, #12]
 800dbca:	60b9      	str	r1, [r7, #8]
 800dbcc:	607a      	str	r2, [r7, #4]
 800dbce:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800dbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd6:	9301      	str	r3, [sp, #4]
 800dbd8:	6a3b      	ldr	r3, [r7, #32]
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	68b9      	ldr	r1, [r7, #8]
 800dbe2:	68f8      	ldr	r0, [r7, #12]
 800dbe4:	f7ff ff3f 	bl	800da66 <VL53L1_preset_mode_timed_ranging>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800dbec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d106      	bne.n	800dc02 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800dbf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbf6:	6839      	ldr	r1, [r7, #0]
 800dbf8:	68b8      	ldr	r0, [r7, #8]
 800dbfa:	f000 fe7b 	bl	800e8f4 <VL53L1_config_low_power_auto_mode>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800dc02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3718      	adds	r7, #24
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b088      	sub	sp, #32
 800dc12:	af02      	add	r7, sp, #8
 800dc14:	60f8      	str	r0, [r7, #12]
 800dc16:	60b9      	str	r1, [r7, #8]
 800dc18:	607a      	str	r2, [r7, #4]
 800dc1a:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800dc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc22:	9301      	str	r3, [sp, #4]
 800dc24:	6a3b      	ldr	r3, [r7, #32]
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	68b9      	ldr	r1, [r7, #8]
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	f7ff ff53 	bl	800dada <VL53L1_preset_mode_timed_ranging_short_range>
 800dc34:	4603      	mov	r3, r0
 800dc36:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800dc38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d106      	bne.n	800dc4e <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800dc40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc42:	6839      	ldr	r1, [r7, #0]
 800dc44:	68b8      	ldr	r0, [r7, #8]
 800dc46:	f000 fe55 	bl	800e8f4 <VL53L1_config_low_power_auto_mode>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800dc4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3718      	adds	r7, #24
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b088      	sub	sp, #32
 800dc5e:	af02      	add	r7, sp, #8
 800dc60:	60f8      	str	r0, [r7, #12]
 800dc62:	60b9      	str	r1, [r7, #8]
 800dc64:	607a      	str	r2, [r7, #4]
 800dc66:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6e:	9301      	str	r3, [sp, #4]
 800dc70:	6a3b      	ldr	r3, [r7, #32]
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	68b9      	ldr	r1, [r7, #8]
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f7ff ff67 	bl	800db4e <VL53L1_preset_mode_timed_ranging_long_range>
 800dc80:	4603      	mov	r3, r0
 800dc82:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800dc84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d106      	bne.n	800dc9a <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800dc8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc8e:	6839      	ldr	r1, [r7, #0]
 800dc90:	68b8      	ldr	r0, [r7, #8]
 800dc92:	f000 fe2f 	bl	800e8f4 <VL53L1_config_low_power_auto_mode>
 800dc96:	4603      	mov	r3, r0
 800dc98:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800dc9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3718      	adds	r7, #24
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b088      	sub	sp, #32
 800dcaa:	af02      	add	r7, sp, #8
 800dcac:	60f8      	str	r0, [r7, #12]
 800dcae:	60b9      	str	r1, [r7, #8]
 800dcb0:	607a      	str	r2, [r7, #4]
 800dcb2:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800dcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcba:	9301      	str	r3, [sp, #4]
 800dcbc:	6a3b      	ldr	r3, [r7, #32]
 800dcbe:	9300      	str	r3, [sp, #0]
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	68b9      	ldr	r1, [r7, #8]
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f7ff fce3 	bl	800d692 <VL53L1_preset_mode_standard_ranging>
 800dccc:	4603      	mov	r3, r0
 800dcce:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800dcd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d116      	bne.n	800dd06 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	22b1      	movs	r2, #177	; 0xb1
 800dce8:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	22d4      	movs	r2, #212	; 0xd4
 800dcf4:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800dcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800dd00:	6a3b      	ldr	r3, [r7, #32]
 800dd02:	2210      	movs	r2, #16
 800dd04:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800dd06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3718      	adds	r7, #24
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b088      	sub	sp, #32
 800dd16:	af02      	add	r7, sp, #8
 800dd18:	60f8      	str	r0, [r7, #12]
 800dd1a:	60b9      	str	r1, [r7, #8]
 800dd1c:	607a      	str	r2, [r7, #4]
 800dd1e:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dd20:	2300      	movs	r3, #0
 800dd22:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd26:	9301      	str	r3, [sp, #4]
 800dd28:	6a3b      	ldr	r3, [r7, #32]
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	68b9      	ldr	r1, [r7, #8]
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	f7ff fcad 	bl	800d692 <VL53L1_preset_mode_standard_ranging>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800dd3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d102      	bne.n	800dd4a <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800dd44:	6a3b      	ldr	r3, [r7, #32]
 800dd46:	2201      	movs	r2, #1
 800dd48:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800dd4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3718      	adds	r7, #24
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800dd56:	b480      	push	{r7}
 800dd58:	b085      	sub	sp, #20
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2201      	movs	r2, #1
 800dd66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2202      	movs	r2, #2
 800dd6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	220d      	movs	r2, #13
 800dd76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f640 028e 	movw	r2, #2190	; 0x88e
 800dd80:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dd82:	bf00      	nop
 800dd84:	3714      	adds	r7, #20
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr

0800dd8e <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800dd8e:	b480      	push	{r7}
 800dd90:	b085      	sub	sp, #20
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
 800dd96:	460b      	mov	r3, r1
 800dd98:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	332c      	adds	r3, #44	; 0x2c
 800dda2:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	78fa      	ldrb	r2, [r7, #3]
 800dda8:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	2200      	movs	r2, #0
 800ddae:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	2202      	movs	r2, #2
 800ddb4:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	78fa      	ldrb	r2, [r7, #3]
 800ddc0:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	2202      	movs	r2, #2
 800ddcc:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	71da      	strb	r2, [r3, #7]

}
 800ddd4:	bf00      	nop
 800ddd6:	3714      	adds	r7, #20
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b087      	sub	sp, #28
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800dde8:	2300      	movs	r3, #0
 800ddea:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	332c      	adds	r3, #44	; 0x2c
 800ddf4:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800ddfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10c      	bne.n	800de1e <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2203      	movs	r2, #3
 800de08:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2200      	movs	r2, #0
 800de0e:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2202      	movs	r2, #2
 800de14:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2200      	movs	r2, #0
 800de1a:	71da      	strb	r2, [r3, #7]
 800de1c:	e060      	b.n	800dee0 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	795b      	ldrb	r3, [r3, #5]
 800de22:	2bff      	cmp	r3, #255	; 0xff
 800de24:	d103      	bne.n	800de2e <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2280      	movs	r2, #128	; 0x80
 800de2a:	715a      	strb	r2, [r3, #5]
 800de2c:	e005      	b.n	800de3a <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	795b      	ldrb	r3, [r3, #5]
 800de32:	3301      	adds	r3, #1
 800de34:	b2da      	uxtb	r2, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	799b      	ldrb	r3, [r3, #6]
 800de3e:	f083 0302 	eor.w	r3, r3, #2
 800de42:	b2da      	uxtb	r2, r3
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	791b      	ldrb	r3, [r3, #4]
 800de4c:	3b03      	subs	r3, #3
 800de4e:	2b05      	cmp	r3, #5
 800de50:	d839      	bhi.n	800dec6 <VL53L1_update_ll_driver_rd_state+0xe6>
 800de52:	a201      	add	r2, pc, #4	; (adr r2, 800de58 <VL53L1_update_ll_driver_rd_state+0x78>)
 800de54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de58:	0800de71 	.word	0x0800de71
 800de5c:	0800dec7 	.word	0x0800dec7
 800de60:	0800dec7 	.word	0x0800dec7
 800de64:	0800de9b 	.word	0x0800de9b
 800de68:	0800dea9 	.word	0x0800dea9
 800de6c:	0800deb1 	.word	0x0800deb1

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800de76:	f003 0302 	and.w	r3, r3, #2
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	dd03      	ble.n	800de86 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2206      	movs	r2, #6
 800de82:	711a      	strb	r2, [r3, #4]
 800de84:	e002      	b.n	800de8c <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2208      	movs	r2, #8
 800de8a:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2200      	movs	r2, #0
 800de90:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2200      	movs	r2, #0
 800de96:	71da      	strb	r2, [r3, #7]

		break;
 800de98:	e022      	b.n	800dee0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2200      	movs	r2, #0
 800de9e:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2208      	movs	r2, #8
 800dea4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800dea6:	e01b      	b.n	800dee0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2208      	movs	r2, #8
 800deac:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800deae:	e017      	b.n	800dee0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	79db      	ldrb	r3, [r3, #7]
 800deb4:	f083 0301 	eor.w	r3, r3, #1
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2208      	movs	r2, #8
 800dec2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800dec4:	e00c      	b.n	800dee0 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2203      	movs	r2, #3
 800deca:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2200      	movs	r2, #0
 800ded0:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2202      	movs	r2, #2
 800ded6:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2200      	movs	r2, #0
 800dedc:	71da      	strb	r2, [r3, #7]

		break;
 800dede:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800dee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	371c      	adds	r7, #28
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800def0:	b480      	push	{r7}
 800def2:	b089      	sub	sp, #36	; 0x24
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800def8:	2300      	movs	r3, #0
 800defa:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	332c      	adds	r3, #44	; 0x2c
 800df04:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800df06:	69bb      	ldr	r3, [r7, #24]
 800df08:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800df0c:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800df12:	2300      	movs	r3, #0
 800df14:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800df16:	2300      	movs	r3, #0
 800df18:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800df1e:	f003 031f 	and.w	r3, r3, #31
 800df22:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	78db      	ldrb	r3, [r3, #3]
 800df28:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800df2e:	111b      	asrs	r3, r3, #4
 800df30:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800df32:	f003 0302 	and.w	r3, r3, #2
 800df36:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800df3e:	f003 0320 	and.w	r3, r3, #32
 800df42:	2b00      	cmp	r3, #0
 800df44:	d017      	beq.n	800df76 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	791b      	ldrb	r3, [r3, #4]
 800df4a:	2b06      	cmp	r3, #6
 800df4c:	d105      	bne.n	800df5a <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800df4e:	7bfb      	ldrb	r3, [r7, #15]
 800df50:	2b12      	cmp	r3, #18
 800df52:	d010      	beq.n	800df76 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800df54:	23ef      	movs	r3, #239	; 0xef
 800df56:	77fb      	strb	r3, [r7, #31]
 800df58:	e00d      	b.n	800df76 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	795b      	ldrb	r3, [r3, #5]
 800df5e:	7bba      	ldrb	r2, [r7, #14]
 800df60:	429a      	cmp	r2, r3
 800df62:	d001      	beq.n	800df68 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800df64:	23ee      	movs	r3, #238	; 0xee
 800df66:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	799b      	ldrb	r3, [r3, #6]
 800df6c:	7b7a      	ldrb	r2, [r7, #13]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d001      	beq.n	800df76 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800df72:	23ed      	movs	r3, #237	; 0xed
 800df74:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800df76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3724      	adds	r7, #36	; 0x24
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800df86:	b480      	push	{r7}
 800df88:	b087      	sub	sp, #28
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800df8e:	2300      	movs	r3, #0
 800df90:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	332c      	adds	r3, #44	; 0x2c
 800df9a:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800dfa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d10c      	bne.n	800dfc4 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2203      	movs	r2, #3
 800dfae:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2202      	movs	r2, #2
 800dfba:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	70da      	strb	r2, [r3, #3]
 800dfc2:	e03e      	b.n	800e042 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	785b      	ldrb	r3, [r3, #1]
 800dfc8:	2bff      	cmp	r3, #255	; 0xff
 800dfca:	d103      	bne.n	800dfd4 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2280      	movs	r2, #128	; 0x80
 800dfd0:	705a      	strb	r2, [r3, #1]
 800dfd2:	e005      	b.n	800dfe0 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	785b      	ldrb	r3, [r3, #1]
 800dfd8:	3301      	adds	r3, #1
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	789b      	ldrb	r3, [r3, #2]
 800dfe4:	f083 0302 	eor.w	r3, r3, #2
 800dfe8:	b2da      	uxtb	r2, r3
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	2b03      	cmp	r3, #3
 800dff4:	d002      	beq.n	800dffc <VL53L1_update_ll_driver_cfg_state+0x76>
 800dff6:	2b04      	cmp	r3, #4
 800dff8:	d00e      	beq.n	800e018 <VL53L1_update_ll_driver_cfg_state+0x92>
 800dffa:	e015      	b.n	800e028 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	78db      	ldrb	r3, [r3, #3]
 800e000:	f083 0301 	eor.w	r3, r3, #1
 800e004:	b2da      	uxtb	r2, r3
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2201      	movs	r2, #1
 800e00e:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2204      	movs	r2, #4
 800e014:	701a      	strb	r2, [r3, #0]
		break;
 800e016:	e014      	b.n	800e042 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	78db      	ldrb	r3, [r3, #3]
 800e01c:	f083 0301 	eor.w	r3, r3, #1
 800e020:	b2da      	uxtb	r2, r3
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	70da      	strb	r2, [r3, #3]

		break;
 800e026:	e00c      	b.n	800e042 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2203      	movs	r2, #3
 800e02c:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2200      	movs	r2, #0
 800e032:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2202      	movs	r2, #2
 800e038:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2200      	movs	r2, #0
 800e03e:	70da      	strb	r2, [r3, #3]

		break;
 800e040:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800e042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e046:	4618      	mov	r0, r3
 800e048:	371c      	adds	r7, #28
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr

0800e052 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800e052:	b480      	push	{r7}
 800e054:	b083      	sub	sp, #12
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
 800e05a:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	7c1a      	ldrb	r2, [r3, #16]
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	3301      	adds	r3, #1
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	7c52      	ldrb	r2, [r2, #17]
 800e06c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	3302      	adds	r3, #2
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	7c92      	ldrb	r2, [r2, #18]
 800e076:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	3303      	adds	r3, #3
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	7cd2      	ldrb	r2, [r2, #19]
 800e080:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	3304      	adds	r3, #4
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	7d12      	ldrb	r2, [r2, #20]
 800e08a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	3305      	adds	r3, #5
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	7d52      	ldrb	r2, [r2, #21]
 800e094:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	3306      	adds	r3, #6
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	7d92      	ldrb	r2, [r2, #22]
 800e09e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	3307      	adds	r3, #7
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	7dd2      	ldrb	r2, [r2, #23]
 800e0a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	7e12      	ldrb	r2, [r2, #24]
 800e0b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	3309      	adds	r3, #9
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	7e52      	ldrb	r2, [r2, #25]
 800e0bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	330a      	adds	r3, #10
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	7e92      	ldrb	r2, [r2, #26]
 800e0c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	330b      	adds	r3, #11
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	7ed2      	ldrb	r2, [r2, #27]
 800e0d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	330c      	adds	r3, #12
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	7f12      	ldrb	r2, [r2, #28]
 800e0da:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	330d      	adds	r3, #13
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	7f52      	ldrb	r2, [r2, #29]
 800e0e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	330e      	adds	r3, #14
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	7f92      	ldrb	r2, [r2, #30]
 800e0ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	330f      	adds	r3, #15
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	7fd2      	ldrb	r2, [r2, #31]
 800e0f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	3310      	adds	r3, #16
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	f892 2020 	ldrb.w	r2, [r2, #32]
 800e104:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	3311      	adds	r3, #17
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800e110:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	3312      	adds	r3, #18
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800e11c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	3313      	adds	r3, #19
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800e128:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	3314      	adds	r3, #20
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800e134:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	3315      	adds	r3, #21
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800e140:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	3316      	adds	r3, #22
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800e14c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	3317      	adds	r3, #23
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800e158:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	3318      	adds	r3, #24
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800e164:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	3319      	adds	r3, #25
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800e170:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	331a      	adds	r3, #26
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800e17c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	331b      	adds	r3, #27
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800e188:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	331c      	adds	r3, #28
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800e194:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	331d      	adds	r3, #29
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800e1a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	331e      	adds	r3, #30
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800e1ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	331f      	adds	r3, #31
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800e1b8:	701a      	strb	r2, [r3, #0]
}
 800e1ba:	bf00      	nop
 800e1bc:	370c      	adds	r7, #12
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr

0800e1c6 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e1c6:	b480      	push	{r7}
 800e1c8:	b085      	sub	sp, #20
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	603a      	str	r2, [r7, #0]
 800e1d0:	80fb      	strh	r3, [r7, #6]
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800e1de:	88fb      	ldrh	r3, [r7, #6]
 800e1e0:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	81fb      	strh	r3, [r7, #14]
 800e1e6:	e00e      	b.n	800e206 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e1e8:	88ba      	ldrh	r2, [r7, #4]
 800e1ea:	89fb      	ldrh	r3, [r7, #14]
 800e1ec:	1ad3      	subs	r3, r2, r3
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	683a      	ldr	r2, [r7, #0]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	89ba      	ldrh	r2, [r7, #12]
 800e1f6:	b2d2      	uxtb	r2, r2
 800e1f8:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e1fa:	89bb      	ldrh	r3, [r7, #12]
 800e1fc:	0a1b      	lsrs	r3, r3, #8
 800e1fe:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800e200:	89fb      	ldrh	r3, [r7, #14]
 800e202:	3301      	adds	r3, #1
 800e204:	81fb      	strh	r3, [r7, #14]
 800e206:	89fa      	ldrh	r2, [r7, #14]
 800e208:	88bb      	ldrh	r3, [r7, #4]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d3ec      	bcc.n	800e1e8 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800e20e:	bf00      	nop
 800e210:	bf00      	nop
 800e212:	3714      	adds	r7, #20
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr

0800e21c <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b085      	sub	sp, #20
 800e220:	af00      	add	r7, sp, #0
 800e222:	4603      	mov	r3, r0
 800e224:	6039      	str	r1, [r7, #0]
 800e226:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800e228:	2300      	movs	r3, #0
 800e22a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800e22c:	e00a      	b.n	800e244 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800e22e:	89fb      	ldrh	r3, [r7, #14]
 800e230:	021b      	lsls	r3, r3, #8
 800e232:	b21a      	sxth	r2, r3
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	1c59      	adds	r1, r3, #1
 800e238:	6039      	str	r1, [r7, #0]
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	b21b      	sxth	r3, r3
 800e23e:	4313      	orrs	r3, r2
 800e240:	b21b      	sxth	r3, r3
 800e242:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800e244:	88fb      	ldrh	r3, [r7, #6]
 800e246:	1e5a      	subs	r2, r3, #1
 800e248:	80fa      	strh	r2, [r7, #6]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1ef      	bne.n	800e22e <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800e24e:	89fb      	ldrh	r3, [r7, #14]
}
 800e250:	4618      	mov	r0, r3
 800e252:	3714      	adds	r7, #20
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b085      	sub	sp, #20
 800e260:	af00      	add	r7, sp, #0
 800e262:	4603      	mov	r3, r0
 800e264:	603a      	str	r2, [r7, #0]
 800e266:	80fb      	strh	r3, [r7, #6]
 800e268:	460b      	mov	r3, r1
 800e26a:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800e26c:	2300      	movs	r3, #0
 800e26e:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800e270:	2300      	movs	r3, #0
 800e272:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800e274:	88fb      	ldrh	r3, [r7, #6]
 800e276:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800e278:	2300      	movs	r3, #0
 800e27a:	81fb      	strh	r3, [r7, #14]
 800e27c:	e00f      	b.n	800e29e <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e27e:	88ba      	ldrh	r2, [r7, #4]
 800e280:	89fb      	ldrh	r3, [r7, #14]
 800e282:	1ad3      	subs	r3, r2, r3
 800e284:	3b01      	subs	r3, #1
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	4413      	add	r3, r2
 800e28a:	89ba      	ldrh	r2, [r7, #12]
 800e28c:	b2d2      	uxtb	r2, r2
 800e28e:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e290:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e294:	121b      	asrs	r3, r3, #8
 800e296:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800e298:	89fb      	ldrh	r3, [r7, #14]
 800e29a:	3301      	adds	r3, #1
 800e29c:	81fb      	strh	r3, [r7, #14]
 800e29e:	89fa      	ldrh	r2, [r7, #14]
 800e2a0:	88bb      	ldrh	r3, [r7, #4]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d3eb      	bcc.n	800e27e <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800e2a6:	bf00      	nop
 800e2a8:	bf00      	nop
 800e2aa:	3714      	adds	r7, #20
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b085      	sub	sp, #20
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	6039      	str	r1, [r7, #0]
 800e2be:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	b25b      	sxtb	r3, r3
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	da0e      	bge.n	800e2ec <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800e2ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2d2:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800e2d4:	e00a      	b.n	800e2ec <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800e2d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e2da:	021b      	lsls	r3, r3, #8
 800e2dc:	b21a      	sxth	r2, r3
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	1c59      	adds	r1, r3, #1
 800e2e2:	6039      	str	r1, [r7, #0]
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	b21b      	sxth	r3, r3
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800e2ec:	88fb      	ldrh	r3, [r7, #6]
 800e2ee:	1e5a      	subs	r2, r3, #1
 800e2f0:	80fa      	strh	r2, [r7, #6]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d1ef      	bne.n	800e2d6 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800e2f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3714      	adds	r7, #20
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr

0800e306 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e306:	b480      	push	{r7}
 800e308:	b087      	sub	sp, #28
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	60f8      	str	r0, [r7, #12]
 800e30e:	460b      	mov	r3, r1
 800e310:	607a      	str	r2, [r7, #4]
 800e312:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800e314:	2300      	movs	r3, #0
 800e316:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800e318:	2300      	movs	r3, #0
 800e31a:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800e320:	2300      	movs	r3, #0
 800e322:	82fb      	strh	r3, [r7, #22]
 800e324:	e00e      	b.n	800e344 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e326:	897a      	ldrh	r2, [r7, #10]
 800e328:	8afb      	ldrh	r3, [r7, #22]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	3b01      	subs	r3, #1
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	4413      	add	r3, r2
 800e332:	693a      	ldr	r2, [r7, #16]
 800e334:	b2d2      	uxtb	r2, r2
 800e336:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	0a1b      	lsrs	r3, r3, #8
 800e33c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800e33e:	8afb      	ldrh	r3, [r7, #22]
 800e340:	3301      	adds	r3, #1
 800e342:	82fb      	strh	r3, [r7, #22]
 800e344:	8afa      	ldrh	r2, [r7, #22]
 800e346:	897b      	ldrh	r3, [r7, #10]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d3ec      	bcc.n	800e326 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800e34c:	bf00      	nop
 800e34e:	bf00      	nop
 800e350:	371c      	adds	r7, #28
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr

0800e35a <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e35a:	b480      	push	{r7}
 800e35c:	b085      	sub	sp, #20
 800e35e:	af00      	add	r7, sp, #0
 800e360:	4603      	mov	r3, r0
 800e362:	6039      	str	r1, [r7, #0]
 800e364:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800e366:	2300      	movs	r3, #0
 800e368:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800e36a:	e007      	b.n	800e37c <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	021a      	lsls	r2, r3, #8
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	1c59      	adds	r1, r3, #1
 800e374:	6039      	str	r1, [r7, #0]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	4313      	orrs	r3, r2
 800e37a:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800e37c:	88fb      	ldrh	r3, [r7, #6]
 800e37e:	1e5a      	subs	r2, r3, #1
 800e380:	80fa      	strh	r2, [r7, #6]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1f2      	bne.n	800e36c <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800e386:	68fb      	ldr	r3, [r7, #12]
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3714      	adds	r7, #20
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	6039      	str	r1, [r7, #0]
 800e39e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	b25b      	sxtb	r3, r3
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	da0b      	bge.n	800e3c6 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800e3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e3b2:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800e3b4:	e007      	b.n	800e3c6 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	021a      	lsls	r2, r3, #8
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	1c59      	adds	r1, r3, #1
 800e3be:	6039      	str	r1, [r7, #0]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800e3c6:	88fb      	ldrh	r3, [r7, #6]
 800e3c8:	1e5a      	subs	r2, r3, #1
 800e3ca:	80fa      	strh	r2, [r7, #6]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d1f2      	bne.n	800e3b6 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b084      	sub	sp, #16
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	78fa      	ldrb	r2, [r7, #3]
 800e3f6:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800e400:	461a      	mov	r2, r3
 800e402:	2183      	movs	r1, #131	; 0x83
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f001 fd0d 	bl	800fe24 <VL53L1_WrByte>
 800e40a:	4603      	mov	r3, r0
 800e40c:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800e40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e412:	4618      	mov	r0, r3
 800e414:	3710      	adds	r7, #16
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}

0800e41a <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800e41a:	b580      	push	{r7, lr}
 800e41c:	b084      	sub	sp, #16
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800e422:	2300      	movs	r3, #0
 800e424:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800e426:	2101      	movs	r1, #1
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f7ff ffd8 	bl	800e3de <VL53L1_set_powerforce_register>
 800e42e:	4603      	mov	r3, r0
 800e430:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800e432:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e436:	4618      	mov	r0, r3
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b086      	sub	sp, #24
 800e442:	af00      	add	r7, sp, #0
 800e444:	4603      	mov	r3, r0
 800e446:	460a      	mov	r2, r1
 800e448:	80fb      	strh	r3, [r7, #6]
 800e44a:	4613      	mov	r3, r2
 800e44c:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800e44e:	2300      	movs	r3, #0
 800e450:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800e452:	2300      	movs	r3, #0
 800e454:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800e456:	2300      	movs	r3, #0
 800e458:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800e45a:	88fb      	ldrh	r3, [r7, #6]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f000 faa7 	bl	800e9b0 <VL53L1_calc_pll_period_us>
 800e462:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800e464:	797b      	ldrb	r3, [r7, #5]
 800e466:	4618      	mov	r0, r3
 800e468:	f000 fab6 	bl	800e9d8 <VL53L1_decode_vcsel_period>
 800e46c:	4603      	mov	r3, r0
 800e46e:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800e470:	697a      	ldr	r2, [r7, #20]
 800e472:	4613      	mov	r3, r2
 800e474:	00db      	lsls	r3, r3, #3
 800e476:	4413      	add	r3, r2
 800e478:	021b      	lsls	r3, r3, #8
 800e47a:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	099b      	lsrs	r3, r3, #6
 800e480:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800e482:	7cfa      	ldrb	r2, [r7, #19]
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	fb02 f303 	mul.w	r3, r2, r3
 800e48a:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	099b      	lsrs	r3, r3, #6
 800e490:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800e492:	68fb      	ldr	r3, [r7, #12]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3718      	adds	r7, #24
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b089      	sub	sp, #36	; 0x24
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	4608      	mov	r0, r1
 800e4a6:	4611      	mov	r1, r2
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	817b      	strh	r3, [r7, #10]
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	813b      	strh	r3, [r7, #8]
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	011b      	lsls	r3, r3, #4
 800e4ce:	4a23      	ldr	r2, [pc, #140]	; (800e55c <VL53L1_calc_range_ignore_threshold+0xc0>)
 800e4d0:	fb82 1203 	smull	r1, r2, r2, r3
 800e4d4:	1192      	asrs	r2, r2, #6
 800e4d6:	17db      	asrs	r3, r3, #31
 800e4d8:	1ad3      	subs	r3, r2, r3
 800e4da:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800e4dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	da03      	bge.n	800e4ec <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800e4e4:	897b      	ldrh	r3, [r7, #10]
 800e4e6:	425b      	negs	r3, r3
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800e4ec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	da03      	bge.n	800e4fc <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800e4f4:	893b      	ldrh	r3, [r7, #8]
 800e4f6:	425b      	negs	r3, r3
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800e4fc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e500:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e504:	4413      	add	r3, r2
 800e506:	015b      	lsls	r3, r3, #5
 800e508:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	4a13      	ldr	r2, [pc, #76]	; (800e55c <VL53L1_calc_range_ignore_threshold+0xc0>)
 800e50e:	fb82 1203 	smull	r1, r2, r2, r3
 800e512:	1192      	asrs	r2, r2, #6
 800e514:	17db      	asrs	r3, r3, #31
 800e516:	1ad3      	subs	r3, r2, r3
 800e518:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800e51a:	697a      	ldr	r2, [r7, #20]
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	4413      	add	r3, r2
 800e520:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800e522:	79fa      	ldrb	r2, [r7, #7]
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	fb02 f303 	mul.w	r3, r2, r3
 800e52a:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	3310      	adds	r3, #16
 800e530:	2b00      	cmp	r3, #0
 800e532:	da00      	bge.n	800e536 <VL53L1_calc_range_ignore_threshold+0x9a>
 800e534:	331f      	adds	r3, #31
 800e536:	115b      	asrs	r3, r3, #5
 800e538:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e540:	db03      	blt.n	800e54a <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800e542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e546:	83fb      	strh	r3, [r7, #30]
 800e548:	e001      	b.n	800e54e <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800e54e:	8bfb      	ldrh	r3, [r7, #30]
}
 800e550:	4618      	mov	r0, r3
 800e552:	3724      	adds	r7, #36	; 0x24
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr
 800e55c:	10624dd3 	.word	0x10624dd3

0800e560 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e560:	b480      	push	{r7}
 800e562:	b085      	sub	sp, #20
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	031a      	lsls	r2, r3, #12
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	085b      	lsrs	r3, r3, #1
 800e576:	441a      	add	r2, r3
	timeout_mclks   =
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e57e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800e580:	68fb      	ldr	r3, [r7, #12]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3714      	adds	r7, #20
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr

0800e58e <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b084      	sub	sp, #16
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
 800e596:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e598:	2300      	movs	r3, #0
 800e59a:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800e59c:	2300      	movs	r3, #0
 800e59e:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800e5a0:	6839      	ldr	r1, [r7, #0]
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f7ff ffdc 	bl	800e560 <VL53L1_calc_timeout_mclks>
 800e5a8:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f000 f85e 	bl	800e66c <VL53L1_encode_timeout>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800e5b4:	897b      	ldrh	r3, [r7, #10]
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800e5be:	b4f0      	push	{r4, r5, r6, r7}
 800e5c0:	b086      	sub	sp, #24
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
 800e5c6:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 800e5cc:	f04f 0200 	mov.w	r2, #0
 800e5d0:	f04f 0300 	mov.w	r3, #0
 800e5d4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f04f 0100 	mov.w	r1, #0
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	f04f 0300 	mov.w	r3, #0
 800e5e8:	fb02 fc01 	mul.w	ip, r2, r1
 800e5ec:	fb00 f603 	mul.w	r6, r0, r3
 800e5f0:	4466      	add	r6, ip
 800e5f2:	fba0 2302 	umull	r2, r3, r0, r2
 800e5f6:	18f1      	adds	r1, r6, r3
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800e5fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800e602:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e606:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800e60a:	f143 0500 	adc.w	r5, r3, #0
 800e60e:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800e612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e616:	f04f 0200 	mov.w	r2, #0
 800e61a:	f04f 0300 	mov.w	r3, #0
 800e61e:	0b02      	lsrs	r2, r0, #12
 800e620:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e624:	0b0b      	lsrs	r3, r1, #12
 800e626:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e62e:	697b      	ldr	r3, [r7, #20]
}
 800e630:	4618      	mov	r0, r3
 800e632:	3718      	adds	r7, #24
 800e634:	46bd      	mov	sp, r7
 800e636:	bcf0      	pop	{r4, r5, r6, r7}
 800e638:	4770      	bx	lr

0800e63a <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b084      	sub	sp, #16
 800e63e:	af00      	add	r7, sp, #0
 800e640:	4603      	mov	r3, r0
 800e642:	6039      	str	r1, [r7, #0]
 800e644:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800e646:	2300      	movs	r3, #0
 800e648:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800e64a:	2300      	movs	r3, #0
 800e64c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800e64e:	88fb      	ldrh	r3, [r7, #6]
 800e650:	4618      	mov	r0, r3
 800e652:	f000 f837 	bl	800e6c4 <VL53L1_decode_timeout>
 800e656:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800e658:	6839      	ldr	r1, [r7, #0]
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f7ff ffaf 	bl	800e5be <VL53L1_calc_timeout_us>
 800e660:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e662:	68bb      	ldr	r3, [r7, #8]
}
 800e664:	4618      	mov	r0, r3
 800e666:	3710      	adds	r7, #16
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b087      	sub	sp, #28
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e674:	2300      	movs	r3, #0
 800e676:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e678:	2300      	movs	r3, #0
 800e67a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e67c:	2300      	movs	r3, #0
 800e67e:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d017      	beq.n	800e6b6 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	3b01      	subs	r3, #1
 800e68a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e68c:	e005      	b.n	800e69a <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	085b      	lsrs	r3, r3, #1
 800e692:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e694:	89fb      	ldrh	r3, [r7, #14]
 800e696:	3301      	adds	r3, #1
 800e698:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1f4      	bne.n	800e68e <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e6a4:	89fb      	ldrh	r3, [r7, #14]
 800e6a6:	021b      	lsls	r3, r3, #8
 800e6a8:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e6b2:	4413      	add	r3, r2
 800e6b4:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e6b6:	8afb      	ldrh	r3, [r7, #22]
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	371c      	adds	r7, #28
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b085      	sub	sp, #20
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e6d2:	88fb      	ldrh	r3, [r7, #6]
 800e6d4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e6d6:	88fa      	ldrh	r2, [r7, #6]
 800e6d8:	0a12      	lsrs	r2, r2, #8
 800e6da:	b292      	uxth	r2, r2
 800e6dc:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e6de:	3301      	adds	r3, #1
 800e6e0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3714      	adds	r7, #20
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b088      	sub	sp, #32
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	607a      	str	r2, [r7, #4]
 800e6fc:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e6fe:	2300      	movs	r3, #0
 800e700:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800e702:	2300      	movs	r3, #0
 800e704:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800e706:	2300      	movs	r3, #0
 800e708:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800e70a:	2300      	movs	r3, #0
 800e70c:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800e70e:	887b      	ldrh	r3, [r7, #2]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d102      	bne.n	800e71a <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800e714:	23f1      	movs	r3, #241	; 0xf1
 800e716:	77fb      	strb	r3, [r7, #31]
 800e718:	e05d      	b.n	800e7d6 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71c:	799a      	ldrb	r2, [r3, #6]
 800e71e:	887b      	ldrh	r3, [r7, #2]
 800e720:	4611      	mov	r1, r2
 800e722:	4618      	mov	r0, r3
 800e724:	f7ff fe8b 	bl	800e43e <VL53L1_calc_macro_period_us>
 800e728:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800e72a:	6979      	ldr	r1, [r7, #20]
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f7ff ff17 	bl	800e560 <VL53L1_calc_timeout_mclks>
 800e732:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	2bff      	cmp	r3, #255	; 0xff
 800e738:	d901      	bls.n	800e73e <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800e73a:	23ff      	movs	r3, #255	; 0xff
 800e73c:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800e742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e744:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e746:	6979      	ldr	r1, [r7, #20]
 800e748:	68b8      	ldr	r0, [r7, #8]
 800e74a:	f7ff ff20 	bl	800e58e <VL53L1_calc_encoded_timeout>
 800e74e:	4603      	mov	r3, r0
 800e750:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e752:	8a7b      	ldrh	r3, [r7, #18]
 800e754:	0a1b      	lsrs	r3, r3, #8
 800e756:	b29b      	uxth	r3, r3
 800e758:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800e75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75c:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e75e:	8a7b      	ldrh	r3, [r7, #18]
 800e760:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800e762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e764:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e766:	6979      	ldr	r1, [r7, #20]
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7ff ff10 	bl	800e58e <VL53L1_calc_encoded_timeout>
 800e76e:	4603      	mov	r3, r0
 800e770:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e772:	8a7b      	ldrh	r3, [r7, #18]
 800e774:	0a1b      	lsrs	r3, r3, #8
 800e776:	b29b      	uxth	r3, r3
 800e778:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800e77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e77e:	8a7b      	ldrh	r3, [r7, #18]
 800e780:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e784:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e788:	7a5a      	ldrb	r2, [r3, #9]
 800e78a:	887b      	ldrh	r3, [r7, #2]
 800e78c:	4611      	mov	r1, r2
 800e78e:	4618      	mov	r0, r3
 800e790:	f7ff fe55 	bl	800e43e <VL53L1_calc_macro_period_us>
 800e794:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800e796:	6979      	ldr	r1, [r7, #20]
 800e798:	68b8      	ldr	r0, [r7, #8]
 800e79a:	f7ff fef8 	bl	800e58e <VL53L1_calc_encoded_timeout>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e7a2:	8a7b      	ldrh	r3, [r7, #18]
 800e7a4:	0a1b      	lsrs	r3, r3, #8
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800e7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ac:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e7ae:	8a7b      	ldrh	r3, [r7, #18]
 800e7b0:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800e7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b4:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800e7b6:	6979      	ldr	r1, [r7, #20]
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7ff fee8 	bl	800e58e <VL53L1_calc_encoded_timeout>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e7c2:	8a7b      	ldrh	r3, [r7, #18]
 800e7c4:	0a1b      	lsrs	r3, r3, #8
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800e7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7cc:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e7ce:	8a7b      	ldrh	r3, [r7, #18]
 800e7d0:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800e7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d4:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800e7d6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3720      	adds	r7, #32
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800e7e2:	b480      	push	{r7}
 800e7e4:	b083      	sub	sp, #12
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	603a      	str	r2, [r7, #0]
 800e7ec:	71fb      	strb	r3, [r7, #7]
 800e7ee:	460b      	mov	r3, r1
 800e7f0:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800e7f2:	79fb      	ldrb	r3, [r7, #7]
 800e7f4:	2b07      	cmp	r3, #7
 800e7f6:	d90a      	bls.n	800e80e <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800e7f8:	79bb      	ldrb	r3, [r7, #6]
 800e7fa:	00db      	lsls	r3, r3, #3
 800e7fc:	b2da      	uxtb	r2, r3
 800e7fe:	79fb      	ldrb	r3, [r7, #7]
 800e800:	1ad3      	subs	r3, r2, r3
 800e802:	b2db      	uxtb	r3, r3
 800e804:	3b71      	subs	r3, #113	; 0x71
 800e806:	b2da      	uxtb	r2, r3
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800e80c:	e00a      	b.n	800e824 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800e80e:	79bb      	ldrb	r3, [r7, #6]
 800e810:	f1c3 030f 	rsb	r3, r3, #15
 800e814:	b2db      	uxtb	r3, r3
 800e816:	00db      	lsls	r3, r3, #3
 800e818:	b2da      	uxtb	r2, r3
 800e81a:	79fb      	ldrb	r3, [r7, #7]
 800e81c:	4413      	add	r3, r2
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	701a      	strb	r2, [r3, #0]
}
 800e824:	bf00      	nop
 800e826:	370c      	adds	r7, #12
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	4770      	bx	lr

0800e830 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800e830:	b480      	push	{r7}
 800e832:	b085      	sub	sp, #20
 800e834:	af00      	add	r7, sp, #0
 800e836:	4603      	mov	r3, r0
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	607a      	str	r2, [r7, #4]
 800e83c:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
 800e840:	091b      	lsrs	r3, r3, #4
 800e842:	b2da      	uxtb	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800e848:	7bfb      	ldrb	r3, [r7, #15]
 800e84a:	f003 030f 	and.w	r3, r3, #15
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	701a      	strb	r2, [r3, #0]

}
 800e854:	bf00      	nop
 800e856:	3714      	adds	r7, #20
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr

0800e860 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800e860:	b480      	push	{r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
 800e866:	4603      	mov	r3, r0
 800e868:	603a      	str	r2, [r7, #0]
 800e86a:	71fb      	strb	r3, [r7, #7]
 800e86c:	460b      	mov	r3, r1
 800e86e:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800e870:	79bb      	ldrb	r3, [r7, #6]
 800e872:	011b      	lsls	r3, r3, #4
 800e874:	b2da      	uxtb	r2, r3
 800e876:	79fb      	ldrb	r3, [r7, #7]
 800e878:	4413      	add	r3, r2
 800e87a:	b2da      	uxtb	r2, r3
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	701a      	strb	r2, [r3, #0]

}
 800e880:	bf00      	nop
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e894:	2300      	movs	r3, #0
 800e896:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	2203      	movs	r2, #3
 800e8a0:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800e8e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3714      	adds	r7, #20
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr

0800e8f4 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b087      	sub	sp, #28
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e900:	2300      	movs	r3, #0
 800e902:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2201      	movs	r2, #1
 800e908:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2200      	movs	r2, #0
 800e90e:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	229b      	movs	r2, #155	; 0x9b
 800e914:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	371c      	adds	r7, #28
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr

0800e926 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e926:	b480      	push	{r7}
 800e928:	b085      	sub	sp, #20
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e932:	2300      	movs	r3, #0
 800e934:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800e954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e966:	f003 0303 	and.w	r3, r3, #3
 800e96a:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800e972:	009b      	lsls	r3, r3, #2
 800e974:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e976:	4413      	add	r3, r2
 800e978:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2201      	movs	r2, #1
 800e984:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800e9a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3714      	adds	r7, #20
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e9be:	88fb      	ldrh	r3, [r7, #6]
 800e9c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e9c4:	fb92 f3f3 	sdiv	r3, r2, r3
 800e9c8:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3714      	adds	r7, #20
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	4603      	mov	r3, r0
 800e9e0:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800e9e6:	79fb      	ldrb	r3, [r7, #7]
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	005b      	lsls	r3, r3, #1
 800e9ee:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800e9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3714      	adds	r7, #20
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr

0800e9fe <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800e9fe:	b480      	push	{r7}
 800ea00:	b085      	sub	sp, #20
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	4603      	mov	r3, r0
 800ea06:	60b9      	str	r1, [r7, #8]
 800ea08:	607a      	str	r2, [r7, #4]
 800ea0a:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800ea0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	da10      	bge.n	800ea36 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800ea14:	7bfb      	ldrb	r3, [r7, #15]
 800ea16:	43db      	mvns	r3, r3
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	f003 0307 	and.w	r3, r3, #7
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	3308      	adds	r3, #8
 800ea22:	b2da      	uxtb	r2, r3
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800ea28:	7bfb      	ldrb	r3, [r7, #15]
 800ea2a:	3b80      	subs	r3, #128	; 0x80
 800ea2c:	10db      	asrs	r3, r3, #3
 800ea2e:	b2da      	uxtb	r2, r3
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800ea34:	e00c      	b.n	800ea50 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800ea36:	7bfb      	ldrb	r3, [r7, #15]
 800ea38:	f003 0307 	and.w	r3, r3, #7
 800ea3c:	b2da      	uxtb	r2, r3
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800ea42:	7bfb      	ldrb	r3, [r7, #15]
 800ea44:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ea48:	10db      	asrs	r3, r3, #3
 800ea4a:	b2da      	uxtb	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	701a      	strb	r2, [r3, #0]
}
 800ea50:	bf00      	nop
 800ea52:	3714      	adds	r7, #20
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b086      	sub	sp, #24
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	460b      	mov	r3, r1
 800ea66:	607a      	str	r2, [r7, #4]
 800ea68:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800ea6e:	897b      	ldrh	r3, [r7, #10]
 800ea70:	2b0a      	cmp	r3, #10
 800ea72:	d802      	bhi.n	800ea7a <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ea74:	f06f 0309 	mvn.w	r3, #9
 800ea78:	e047      	b.n	800eb0a <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea82:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800ea90:	f002 020f 	and.w	r2, r2, #15
 800ea94:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800ea96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800eaa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eaa4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800eaa6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800eab0:	f002 0203 	and.w	r2, r2, #3
 800eab4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800eab6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800eac0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eac4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800eac6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	88d8      	ldrh	r0, [r3, #6]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	3305      	adds	r3, #5
 800ead0:	461a      	mov	r2, r3
 800ead2:	2102      	movs	r1, #2
 800ead4:	f7ff fb77 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800eae0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800eaea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800eaf4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800eaf8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800eafa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800eb04:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800eb06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3718      	adds	r7, #24
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b086      	sub	sp, #24
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	4603      	mov	r3, r0
 800eb1a:	60b9      	str	r1, [r7, #8]
 800eb1c:	607a      	str	r2, [r7, #4]
 800eb1e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800eb20:	2300      	movs	r3, #0
 800eb22:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800eb24:	89fb      	ldrh	r3, [r7, #14]
 800eb26:	2b0a      	cmp	r3, #10
 800eb28:	d802      	bhi.n	800eb30 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800eb2a:	f06f 0309 	mvn.w	r3, #9
 800eb2e:	e046      	b.n	800ebbe <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb38:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	3301      	adds	r3, #1
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	f003 030f 	and.w	r3, r3, #15
 800eb48:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	3302      	adds	r3, #2
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb58:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	3303      	adds	r3, #3
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	f003 0303 	and.w	r3, r3, #3
 800eb68:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	3304      	adds	r3, #4
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb78:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	3305      	adds	r3, #5
 800eb82:	4619      	mov	r1, r3
 800eb84:	2002      	movs	r0, #2
 800eb86:	f7ff fb49 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	79da      	ldrb	r2, [r3, #7]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	7a1a      	ldrb	r2, [r3, #8]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	3309      	adds	r3, #9
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ebac:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	7a9a      	ldrb	r2, [r3, #10]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800ebba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3718      	adds	r7, #24
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b086      	sub	sp, #24
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
 800ebce:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ebd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d108      	bne.n	800ebee <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800ebdc:	f107 020c 	add.w	r2, r7, #12
 800ebe0:	230b      	movs	r3, #11
 800ebe2:	2101      	movs	r1, #1
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f001 f8e7 	bl	800fdb8 <VL53L1_ReadMulti>
 800ebea:	4603      	mov	r3, r0
 800ebec:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800ebee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d108      	bne.n	800ec08 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800ebf6:	f107 030c 	add.w	r3, r7, #12
 800ebfa:	683a      	ldr	r2, [r7, #0]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	200b      	movs	r0, #11
 800ec00:	f7ff ff87 	bl	800eb12 <VL53L1_i2c_decode_static_nvm_managed>
 800ec04:	4603      	mov	r3, r0
 800ec06:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ec08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3718      	adds	r7, #24
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	607a      	str	r2, [r7, #4]
 800ec20:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ec22:	2300      	movs	r3, #0
 800ec24:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800ec26:	897b      	ldrh	r3, [r7, #10]
 800ec28:	2b16      	cmp	r3, #22
 800ec2a:	d802      	bhi.n	800ec32 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ec2c:	f06f 0309 	mvn.w	r3, #9
 800ec30:	e076      	b.n	800ed20 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800ec3e:	68fa      	ldr	r2, [r7, #12]
 800ec40:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ec42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800ec4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800ec52:	68fa      	ldr	r2, [r7, #12]
 800ec54:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ec56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800ec60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800ec6a:	f002 020f 	and.w	r2, r2, #15
 800ec6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ec70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800ec76:	68fa      	ldr	r2, [r7, #12]
 800ec78:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800ec7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ec84:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ec88:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ec8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800ec94:	f002 0203 	and.w	r2, r2, #3
 800ec98:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ec9a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	8958      	ldrh	r0, [r3, #10]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	3309      	adds	r3, #9
 800eca4:	461a      	mov	r2, r3
 800eca6:	2102      	movs	r1, #2
 800eca8:	f7ff fa8d 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	330b      	adds	r3, #11
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	2102      	movs	r1, #2
 800ecba:	f7ff facf 	bl	800e25c <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	330d      	adds	r3, #13
 800ecc8:	461a      	mov	r2, r3
 800ecca:	2102      	movs	r1, #2
 800eccc:	f7ff fac6 	bl	800e25c <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	8a18      	ldrh	r0, [r3, #16]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	330f      	adds	r3, #15
 800ecd8:	461a      	mov	r2, r3
 800ecda:	2102      	movs	r1, #2
 800ecdc:	f7ff fa73 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800ece6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ecea:	b218      	sxth	r0, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	3311      	adds	r3, #17
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	2102      	movs	r1, #2
 800ecf4:	f7ff fab2 	bl	800e25c <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	3313      	adds	r3, #19
 800ed02:	461a      	mov	r2, r3
 800ed04:	2102      	movs	r1, #2
 800ed06:	f7ff faa9 	bl	800e25c <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	3315      	adds	r3, #21
 800ed14:	461a      	mov	r2, r3
 800ed16:	2102      	movs	r1, #2
 800ed18:	f7ff faa0 	bl	800e25c <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800ed1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b086      	sub	sp, #24
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	4603      	mov	r3, r0
 800ed30:	60b9      	str	r1, [r7, #8]
 800ed32:	607a      	str	r2, [r7, #4]
 800ed34:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ed36:	2300      	movs	r3, #0
 800ed38:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800ed3a:	89fb      	ldrh	r3, [r7, #14]
 800ed3c:	2b16      	cmp	r3, #22
 800ed3e:	d802      	bhi.n	800ed46 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ed40:	f06f 0309 	mvn.w	r3, #9
 800ed44:	e079      	b.n	800ee3a <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	785a      	ldrb	r2, [r3, #1]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	789a      	ldrb	r2, [r3, #2]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	78da      	ldrb	r2, [r3, #3]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	791a      	ldrb	r2, [r3, #4]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	3305      	adds	r3, #5
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	f003 030f 	and.w	r3, r3, #15
 800ed78:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	799a      	ldrb	r2, [r3, #6]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	3307      	adds	r3, #7
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed90:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	3308      	adds	r3, #8
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	f003 0303 	and.w	r3, r3, #3
 800eda0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	3309      	adds	r3, #9
 800edaa:	4619      	mov	r1, r3
 800edac:	2002      	movs	r0, #2
 800edae:	f7ff fa35 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800edb2:	4603      	mov	r3, r0
 800edb4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	330b      	adds	r3, #11
 800edbe:	4619      	mov	r1, r3
 800edc0:	2002      	movs	r0, #2
 800edc2:	f7ff fa77 	bl	800e2b4 <VL53L1_i2c_decode_int16_t>
 800edc6:	4603      	mov	r3, r0
 800edc8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	330d      	adds	r3, #13
 800edd2:	4619      	mov	r1, r3
 800edd4:	2002      	movs	r0, #2
 800edd6:	f7ff fa6d 	bl	800e2b4 <VL53L1_i2c_decode_int16_t>
 800edda:	4603      	mov	r3, r0
 800eddc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	330f      	adds	r3, #15
 800ede6:	4619      	mov	r1, r3
 800ede8:	2002      	movs	r0, #2
 800edea:	f7ff fa17 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800edee:	4603      	mov	r3, r0
 800edf0:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	3311      	adds	r3, #17
 800edfa:	4619      	mov	r1, r3
 800edfc:	2002      	movs	r0, #2
 800edfe:	f7ff fa59 	bl	800e2b4 <VL53L1_i2c_decode_int16_t>
 800ee02:	4603      	mov	r3, r0
 800ee04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee08:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	3313      	adds	r3, #19
 800ee12:	4619      	mov	r1, r3
 800ee14:	2002      	movs	r0, #2
 800ee16:	f7ff fa4d 	bl	800e2b4 <VL53L1_i2c_decode_int16_t>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	3315      	adds	r3, #21
 800ee26:	4619      	mov	r1, r3
 800ee28:	2002      	movs	r0, #2
 800ee2a:	f7ff fa43 	bl	800e2b4 <VL53L1_i2c_decode_int16_t>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800ee36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3718      	adds	r7, #24
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b088      	sub	sp, #32
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ee50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d108      	bne.n	800ee6a <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800ee58:	f107 0208 	add.w	r2, r7, #8
 800ee5c:	2317      	movs	r3, #23
 800ee5e:	210d      	movs	r1, #13
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f000 ffa9 	bl	800fdb8 <VL53L1_ReadMulti>
 800ee66:	4603      	mov	r3, r0
 800ee68:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800ee6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d108      	bne.n	800ee84 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800ee72:	f107 0308 	add.w	r3, r7, #8
 800ee76:	683a      	ldr	r2, [r7, #0]
 800ee78:	4619      	mov	r1, r3
 800ee7a:	2017      	movs	r0, #23
 800ee7c:	f7ff ff54 	bl	800ed28 <VL53L1_i2c_decode_customer_nvm_managed>
 800ee80:	4603      	mov	r3, r0
 800ee82:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ee84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3720      	adds	r7, #32
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b086      	sub	sp, #24
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	60f8      	str	r0, [r7, #12]
 800ee98:	460b      	mov	r3, r1
 800ee9a:	607a      	str	r2, [r7, #4]
 800ee9c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800eea2:	897b      	ldrh	r3, [r7, #10]
 800eea4:	2b1f      	cmp	r3, #31
 800eea6:	d802      	bhi.n	800eeae <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800eea8:	f06f 0309 	mvn.w	r3, #9
 800eeac:	e0cf      	b.n	800f04e <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	881b      	ldrh	r3, [r3, #0]
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	2102      	movs	r1, #2
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7ff f985 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800eec4:	f002 0201 	and.w	r2, r2, #1
 800eec8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800eeca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800eed4:	f002 020f 	and.w	r2, r2, #15
 800eed8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800eeda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800eee4:	f002 020f 	and.w	r2, r2, #15
 800eee8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800eeea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800eef4:	f002 021f 	and.w	r2, r2, #31
 800eef8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800eefa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ef04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ef08:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ef0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800ef14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ef18:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ef1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800ef24:	f002 0201 	and.w	r2, r2, #1
 800ef28:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ef2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800ef30:	68fa      	ldr	r2, [r7, #12]
 800ef32:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800ef34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ef3e:	f002 0201 	and.w	r2, r2, #1
 800ef42:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ef44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ef4e:	f002 0203 	and.w	r2, r2, #3
 800ef52:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ef54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800ef5e:	f002 021f 	and.w	r2, r2, #31
 800ef62:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800ef64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800ef6e:	f002 0203 	and.w	r2, r2, #3
 800ef72:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800ef74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800ef7e:	f002 0203 	and.w	r2, r2, #3
 800ef82:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800ef84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800ef8e:	f002 0207 	and.w	r2, r2, #7
 800ef92:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800ef94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800ef9e:	f002 021f 	and.w	r2, r2, #31
 800efa2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800efa4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800efae:	f002 0201 	and.w	r2, r2, #1
 800efb2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800efb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800efba:	68fa      	ldr	r2, [r7, #12]
 800efbc:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800efbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800efc4:	68fa      	ldr	r2, [r7, #12]
 800efc6:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800efc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800efd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800efd8:	68fa      	ldr	r2, [r7, #12]
 800efda:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800efdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800efe6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800efec:	68fa      	ldr	r2, [r7, #12]
 800efee:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800eff0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	8b18      	ldrh	r0, [r3, #24]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	3318      	adds	r3, #24
 800effa:	461a      	mov	r2, r3
 800effc:	2102      	movs	r1, #2
 800effe:	f7ff f8e2 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f00a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f010:	68fa      	ldr	r2, [r7, #12]
 800f012:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f014:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f01e:	f002 020f 	and.w	r2, r2, #15
 800f022:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800f024:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800f02a:	68fa      	ldr	r2, [r7, #12]
 800f02c:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800f02e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800f038:	f002 020f 	and.w	r2, r2, #15
 800f03c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800f03e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800f048:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f04a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3718      	adds	r7, #24
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f056:	b580      	push	{r7, lr}
 800f058:	b086      	sub	sp, #24
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	60f8      	str	r0, [r7, #12]
 800f05e:	460b      	mov	r3, r1
 800f060:	607a      	str	r2, [r7, #4]
 800f062:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f064:	2300      	movs	r3, #0
 800f066:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800f068:	897b      	ldrh	r3, [r7, #10]
 800f06a:	2b15      	cmp	r3, #21
 800f06c:	d802      	bhi.n	800f074 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f06e:	f06f 0309 	mvn.w	r3, #9
 800f072:	e070      	b.n	800f156 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800f080:	68fa      	ldr	r2, [r7, #12]
 800f082:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f084:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800f08a:	68fa      	ldr	r2, [r7, #12]
 800f08c:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f08e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800f098:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f09c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f09e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800f0a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f0a8:	b298      	uxth	r0, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	3304      	adds	r3, #4
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	2102      	movs	r1, #2
 800f0b2:	f7ff f888 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800f0be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f0c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f0c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800f0ca:	68fa      	ldr	r2, [r7, #12]
 800f0cc:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800f0ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f0d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800f0e2:	f002 0201 	and.w	r2, r2, #1
 800f0e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f0e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800f0f2:	f002 0207 	and.w	r2, r2, #7
 800f0f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f0f8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	8998      	ldrh	r0, [r3, #12]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	330c      	adds	r3, #12
 800f102:	461a      	mov	r2, r3
 800f104:	2102      	movs	r1, #2
 800f106:	f7ff f85e 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	89d8      	ldrh	r0, [r3, #14]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	330e      	adds	r3, #14
 800f112:	461a      	mov	r2, r3
 800f114:	2102      	movs	r1, #2
 800f116:	f7ff f856 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	8a18      	ldrh	r0, [r3, #16]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	3310      	adds	r3, #16
 800f122:	461a      	mov	r2, r3
 800f124:	2102      	movs	r1, #2
 800f126:	f7ff f84e 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800f12e:	68fa      	ldr	r2, [r7, #12]
 800f130:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f132:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f13c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800f142:	68fa      	ldr	r2, [r7, #12]
 800f144:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f146:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f150:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f156:	4618      	mov	r0, r3
 800f158:	3718      	adds	r7, #24
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b086      	sub	sp, #24
 800f162:	af00      	add	r7, sp, #0
 800f164:	60f8      	str	r0, [r7, #12]
 800f166:	460b      	mov	r3, r1
 800f168:	607a      	str	r2, [r7, #4]
 800f16a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f16c:	2300      	movs	r3, #0
 800f16e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800f170:	897b      	ldrh	r3, [r7, #10]
 800f172:	2b16      	cmp	r3, #22
 800f174:	d802      	bhi.n	800f17c <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f176:	f06f 0309 	mvn.w	r3, #9
 800f17a:	e06e      	b.n	800f25a <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	f003 030f 	and.w	r3, r3, #15
 800f184:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800f18e:	68fa      	ldr	r2, [r7, #12]
 800f190:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f192:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f19c:	f002 020f 	and.w	r2, r2, #15
 800f1a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f1a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f1ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f1b6:	f002 020f 	and.w	r2, r2, #15
 800f1ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f1bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800f1c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800f1d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f1d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f1d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f1e0:	f002 020f 	and.w	r2, r2, #15
 800f1e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f1e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f1f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800f1fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f1fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f200:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	8958      	ldrh	r0, [r3, #10]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	330a      	adds	r3, #10
 800f20a:	461a      	mov	r2, r3
 800f20c:	2102      	movs	r1, #2
 800f20e:	f7fe ffda 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	8998      	ldrh	r0, [r3, #12]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	330c      	adds	r3, #12
 800f21a:	461a      	mov	r2, r3
 800f21c:	2102      	movs	r1, #2
 800f21e:	f7fe ffd2 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800f22a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800f234:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	6918      	ldr	r0, [r3, #16]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	3312      	adds	r3, #18
 800f23e:	461a      	mov	r2, r3
 800f240:	2104      	movs	r1, #4
 800f242:	f7ff f860 	bl	800e306 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800f24e:	f002 0201 	and.w	r2, r2, #1
 800f252:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800f254:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f256:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3718      	adds	r7, #24
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f262:	b580      	push	{r7, lr}
 800f264:	b086      	sub	sp, #24
 800f266:	af00      	add	r7, sp, #0
 800f268:	60f8      	str	r0, [r7, #12]
 800f26a:	460b      	mov	r3, r1
 800f26c:	607a      	str	r2, [r7, #4]
 800f26e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f270:	2300      	movs	r3, #0
 800f272:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800f274:	897b      	ldrh	r3, [r7, #10]
 800f276:	2b11      	cmp	r3, #17
 800f278:	d802      	bhi.n	800f280 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f27a:	f06f 0309 	mvn.w	r3, #9
 800f27e:	e071      	b.n	800f364 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	f003 0303 	and.w	r3, r3, #3
 800f288:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	8858      	ldrh	r0, [r3, #2]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	3301      	adds	r3, #1
 800f296:	461a      	mov	r2, r3
 800f298:	2102      	movs	r1, #2
 800f29a:	f7fe ff94 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	8898      	ldrh	r0, [r3, #4]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	3303      	adds	r3, #3
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	2102      	movs	r1, #2
 800f2aa:	f7fe ff8c 	bl	800e1c6 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f2b6:	f002 0201 	and.w	r2, r2, #1
 800f2ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f2bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800f2c6:	f002 0207 	and.w	r2, r2, #7
 800f2ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f2cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800f2d2:	68fa      	ldr	r2, [r7, #12]
 800f2d4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f2d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800f2dc:	68fa      	ldr	r2, [r7, #12]
 800f2de:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f2e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f2ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f2ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f2f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f2fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f2fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f300:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f30a:	f002 0203 	and.w	r2, r2, #3
 800f30e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f310:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800f31a:	f002 0203 	and.w	r2, r2, #3
 800f31e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f320:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800f32a:	f002 020f 	and.w	r2, r2, #15
 800f32e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f330:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800f336:	68fa      	ldr	r2, [r7, #12]
 800f338:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800f33a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800f340:	68fa      	ldr	r2, [r7, #12]
 800f342:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800f344:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800f34e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800f358:	f002 0203 	and.w	r2, r2, #3
 800f35c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f35e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f360:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f364:	4618      	mov	r0, r3
 800f366:	3718      	adds	r7, #24
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b087      	sub	sp, #28
 800f370:	af00      	add	r7, sp, #0
 800f372:	60f8      	str	r0, [r7, #12]
 800f374:	460b      	mov	r3, r1
 800f376:	607a      	str	r2, [r7, #4]
 800f378:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f37a:	2300      	movs	r3, #0
 800f37c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800f37e:	897b      	ldrh	r3, [r7, #10]
 800f380:	2b04      	cmp	r3, #4
 800f382:	d802      	bhi.n	800f38a <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f384:	f06f 0309 	mvn.w	r3, #9
 800f388:	e025      	b.n	800f3d6 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	f003 0301 	and.w	r3, r3, #1
 800f392:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800f3a0:	f002 0201 	and.w	r2, r2, #1
 800f3a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f3a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800f3b0:	f002 0201 	and.w	r2, r2, #1
 800f3b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f3b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800f3c0:	f002 0203 	and.w	r2, r2, #3
 800f3c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f3c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800f3cc:	68fa      	ldr	r2, [r7, #12]
 800f3ce:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f3d0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f3d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	371c      	adds	r7, #28
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr

0800f3e2 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b086      	sub	sp, #24
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	60b9      	str	r1, [r7, #8]
 800f3ec:	607a      	str	r2, [r7, #4]
 800f3ee:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f3f4:	89fb      	ldrh	r3, [r7, #14]
 800f3f6:	2b2b      	cmp	r3, #43	; 0x2b
 800f3f8:	d802      	bhi.n	800f400 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f3fa:	f06f 0309 	mvn.w	r3, #9
 800f3fe:	e0e2      	b.n	800f5c6 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f408:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	785a      	ldrb	r2, [r3, #1]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	3302      	adds	r3, #2
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	f003 030f 	and.w	r3, r3, #15
 800f420:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	78da      	ldrb	r2, [r3, #3]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	3304      	adds	r3, #4
 800f432:	4619      	mov	r1, r3
 800f434:	2002      	movs	r0, #2
 800f436:	f7fe fef1 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f43a:	4603      	mov	r3, r0
 800f43c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	3306      	adds	r3, #6
 800f446:	4619      	mov	r1, r3
 800f448:	2002      	movs	r0, #2
 800f44a:	f7fe fee7 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f44e:	4603      	mov	r3, r0
 800f450:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	3308      	adds	r3, #8
 800f45a:	4619      	mov	r1, r3
 800f45c:	2002      	movs	r0, #2
 800f45e:	f7fe fedd 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f462:	4603      	mov	r3, r0
 800f464:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	330a      	adds	r3, #10
 800f46e:	4619      	mov	r1, r3
 800f470:	2002      	movs	r0, #2
 800f472:	f7fe fed3 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f476:	4603      	mov	r3, r0
 800f478:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	330c      	adds	r3, #12
 800f482:	4619      	mov	r1, r3
 800f484:	2002      	movs	r0, #2
 800f486:	f7fe fec9 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f48a:	4603      	mov	r3, r0
 800f48c:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	330e      	adds	r3, #14
 800f496:	4619      	mov	r1, r3
 800f498:	2002      	movs	r0, #2
 800f49a:	f7fe febf 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	3310      	adds	r3, #16
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	2002      	movs	r0, #2
 800f4ae:	f7fe feb5 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	3312      	adds	r3, #18
 800f4be:	4619      	mov	r1, r3
 800f4c0:	2002      	movs	r0, #2
 800f4c2:	f7fe feab 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	3314      	adds	r3, #20
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	2002      	movs	r0, #2
 800f4d6:	f7fe fea1 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	3316      	adds	r3, #22
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	2002      	movs	r0, #2
 800f4ea:	f7fe fe97 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	3318      	adds	r3, #24
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	2002      	movs	r0, #2
 800f4fe:	f7fe fe8d 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f502:	4603      	mov	r3, r0
 800f504:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	331a      	adds	r3, #26
 800f50e:	4619      	mov	r1, r3
 800f510:	2002      	movs	r0, #2
 800f512:	f7fe fe83 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f516:	4603      	mov	r3, r0
 800f518:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	331c      	adds	r3, #28
 800f522:	4619      	mov	r1, r3
 800f524:	2002      	movs	r0, #2
 800f526:	f7fe fe79 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f52a:	4603      	mov	r3, r0
 800f52c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	331e      	adds	r3, #30
 800f536:	4619      	mov	r1, r3
 800f538:	2002      	movs	r0, #2
 800f53a:	f7fe fe6f 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f53e:	4603      	mov	r3, r0
 800f540:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	3320      	adds	r3, #32
 800f54a:	4619      	mov	r1, r3
 800f54c:	2002      	movs	r0, #2
 800f54e:	f7fe fe65 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f552:	4603      	mov	r3, r0
 800f554:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	3322      	adds	r3, #34	; 0x22
 800f55e:	4619      	mov	r1, r3
 800f560:	2002      	movs	r0, #2
 800f562:	f7fe fe5b 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f566:	4603      	mov	r3, r0
 800f568:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	3324      	adds	r3, #36	; 0x24
 800f572:	4619      	mov	r1, r3
 800f574:	2002      	movs	r0, #2
 800f576:	f7fe fe51 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f57a:	4603      	mov	r3, r0
 800f57c:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	3326      	adds	r3, #38	; 0x26
 800f586:	4619      	mov	r1, r3
 800f588:	2002      	movs	r0, #2
 800f58a:	f7fe fe47 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f58e:	4603      	mov	r3, r0
 800f590:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	3328      	adds	r3, #40	; 0x28
 800f59a:	4619      	mov	r1, r3
 800f59c:	2002      	movs	r0, #2
 800f59e:	f7fe fe3d 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800f5c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3718      	adds	r7, #24
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}

0800f5ce <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800f5ce:	b580      	push	{r7, lr}
 800f5d0:	b086      	sub	sp, #24
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	60b9      	str	r1, [r7, #8]
 800f5d8:	607a      	str	r2, [r7, #4]
 800f5da:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f5e0:	89fb      	ldrh	r3, [r7, #14]
 800f5e2:	2b20      	cmp	r3, #32
 800f5e4:	d802      	bhi.n	800f5ec <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f5e6:	f06f 0309 	mvn.w	r3, #9
 800f5ea:	e04d      	b.n	800f688 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800f5ec:	68b9      	ldr	r1, [r7, #8]
 800f5ee:	2004      	movs	r0, #4
 800f5f0:	f7fe feb3 	bl	800e35a <VL53L1_i2c_decode_uint32_t>
 800f5f4:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	3304      	adds	r3, #4
 800f5fe:	4619      	mov	r1, r3
 800f600:	2004      	movs	r0, #4
 800f602:	f7fe feaa 	bl	800e35a <VL53L1_i2c_decode_uint32_t>
 800f606:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	3308      	adds	r3, #8
 800f610:	4619      	mov	r1, r3
 800f612:	2004      	movs	r0, #4
 800f614:	f7fe febe 	bl	800e394 <VL53L1_i2c_decode_int32_t>
 800f618:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	330c      	adds	r3, #12
 800f622:	4619      	mov	r1, r3
 800f624:	2004      	movs	r0, #4
 800f626:	f7fe fe98 	bl	800e35a <VL53L1_i2c_decode_uint32_t>
 800f62a:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	3310      	adds	r3, #16
 800f634:	4619      	mov	r1, r3
 800f636:	2004      	movs	r0, #4
 800f638:	f7fe fe8f 	bl	800e35a <VL53L1_i2c_decode_uint32_t>
 800f63c:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	3314      	adds	r3, #20
 800f646:	4619      	mov	r1, r3
 800f648:	2004      	movs	r0, #4
 800f64a:	f7fe fe86 	bl	800e35a <VL53L1_i2c_decode_uint32_t>
 800f64e:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	3318      	adds	r3, #24
 800f658:	4619      	mov	r1, r3
 800f65a:	2004      	movs	r0, #4
 800f65c:	f7fe fe9a 	bl	800e394 <VL53L1_i2c_decode_int32_t>
 800f660:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	331c      	adds	r3, #28
 800f66a:	4619      	mov	r1, r3
 800f66c:	2004      	movs	r0, #4
 800f66e:	f7fe fe74 	bl	800e35a <VL53L1_i2c_decode_uint32_t>
 800f672:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800f684:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3718      	adds	r7, #24
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b086      	sub	sp, #24
 800f694:	af00      	add	r7, sp, #0
 800f696:	4603      	mov	r3, r0
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
 800f69c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f6a2:	89fb      	ldrh	r3, [r7, #14]
 800f6a4:	2b37      	cmp	r3, #55	; 0x37
 800f6a6:	d802      	bhi.n	800f6ae <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f6a8:	f06f 0309 	mvn.w	r3, #9
 800f6ac:	e15e      	b.n	800f96c <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800f6ae:	68b9      	ldr	r1, [r7, #8]
 800f6b0:	2002      	movs	r0, #2
 800f6b2:	f7fe fdb3 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	3302      	adds	r3, #2
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6c8:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	3303      	adds	r3, #3
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6d8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	3304      	adds	r3, #4
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	f003 0303 	and.w	r3, r3, #3
 800f6e8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	3305      	adds	r3, #5
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	f003 0301 	and.w	r3, r3, #1
 800f6f8:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	3306      	adds	r3, #6
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f708:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	3307      	adds	r3, #7
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f718:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	3308      	adds	r3, #8
 800f722:	4619      	mov	r1, r3
 800f724:	2002      	movs	r0, #2
 800f726:	f7fe fd79 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f72a:	4603      	mov	r3, r0
 800f72c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f730:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	330a      	adds	r3, #10
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	f003 0303 	and.w	r3, r3, #3
 800f740:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	330b      	adds	r3, #11
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	f003 0303 	and.w	r3, r3, #3
 800f750:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	330c      	adds	r3, #12
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	f003 030f 	and.w	r3, r3, #15
 800f760:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	330d      	adds	r3, #13
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	f003 0307 	and.w	r3, r3, #7
 800f770:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	330e      	adds	r3, #14
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	f003 0301 	and.w	r3, r3, #1
 800f780:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	330f      	adds	r3, #15
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	f003 0303 	and.w	r3, r3, #3
 800f790:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	7c1a      	ldrb	r2, [r3, #16]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	7c5a      	ldrb	r2, [r3, #17]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	3312      	adds	r3, #18
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	2002      	movs	r0, #2
 800f7ae:	f7fe fd35 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f7b8:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	3316      	adds	r3, #22
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	2002      	movs	r0, #2
 800f7c6:	f7fe fd29 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	3318      	adds	r3, #24
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	2002      	movs	r0, #2
 800f7da:	f7fe fd1f 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	331a      	adds	r3, #26
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	f003 0301 	and.w	r3, r3, #1
 800f7f0:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	331b      	adds	r3, #27
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	f003 0307 	and.w	r3, r3, #7
 800f800:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	7f1a      	ldrb	r2, [r3, #28]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	7f5a      	ldrb	r2, [r3, #29]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	331e      	adds	r3, #30
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f820:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	331f      	adds	r3, #31
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f830:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	3320      	adds	r3, #32
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	f003 0303 	and.w	r3, r3, #3
 800f840:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	3321      	adds	r3, #33	; 0x21
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	f003 030f 	and.w	r3, r3, #15
 800f850:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	3325      	adds	r3, #37	; 0x25
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	f003 0301 	and.w	r3, r3, #1
 800f884:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	3326      	adds	r3, #38	; 0x26
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	f003 0303 	and.w	r3, r3, #3
 800f896:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	3327      	adds	r3, #39	; 0x27
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	f003 031f 	and.w	r3, r3, #31
 800f8a8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	3328      	adds	r3, #40	; 0x28
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	f003 031f 	and.w	r3, r3, #31
 800f8ba:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	3329      	adds	r3, #41	; 0x29
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	f003 031f 	and.w	r3, r3, #31
 800f8cc:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	332a      	adds	r3, #42	; 0x2a
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	f003 0301 	and.w	r3, r3, #1
 800f8de:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	332b      	adds	r3, #43	; 0x2b
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	f003 0301 	and.w	r3, r3, #1
 800f8f0:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	332c      	adds	r3, #44	; 0x2c
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	f003 0303 	and.w	r3, r3, #3
 800f902:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	332d      	adds	r3, #45	; 0x2d
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f914:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	332e      	adds	r3, #46	; 0x2e
 800f920:	4619      	mov	r1, r3
 800f922:	2004      	movs	r0, #4
 800f924:	f7fe fd19 	bl	800e35a <VL53L1_i2c_decode_uint32_t>
 800f928:	4603      	mov	r3, r0
 800f92a:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	3332      	adds	r3, #50	; 0x32
 800f936:	4619      	mov	r1, r3
 800f938:	2004      	movs	r0, #4
 800f93a:	f7fe fd0e 	bl	800e35a <VL53L1_i2c_decode_uint32_t>
 800f93e:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	3336      	adds	r3, #54	; 0x36
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	f003 0301 	and.w	r3, r3, #1
 800f94e:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	3337      	adds	r3, #55	; 0x37
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	f003 0301 	and.w	r3, r3, #1
 800f960:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800f968:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3718      	adds	r7, #24
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b086      	sub	sp, #24
 800f978:	af00      	add	r7, sp, #0
 800f97a:	4603      	mov	r3, r0
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
 800f980:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f982:	2300      	movs	r3, #0
 800f984:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800f986:	89fb      	ldrh	r3, [r7, #14]
 800f988:	2b30      	cmp	r3, #48	; 0x30
 800f98a:	d802      	bhi.n	800f992 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f98c:	f06f 0309 	mvn.w	r3, #9
 800f990:	e112      	b.n	800fbb8 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	785a      	ldrb	r2, [r3, #1]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	789a      	ldrb	r2, [r3, #2]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	3303      	adds	r3, #3
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	2002      	movs	r0, #2
 800f9b2:	f7fe fc33 	bl	800e21c <VL53L1_i2c_decode_uint16_t>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	3305      	adds	r3, #5
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9c8:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	3306      	adds	r3, #6
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	f003 0307 	and.w	r3, r3, #7
 800f9d8:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	3307      	adds	r3, #7
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	f003 0307 	and.w	r3, r3, #7
 800f9e8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	3308      	adds	r3, #8
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f9f8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	3309      	adds	r3, #9
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa08:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	330a      	adds	r3, #10
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	f003 0301 	and.w	r3, r3, #1
 800fa18:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	330b      	adds	r3, #11
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa28:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	330c      	adds	r3, #12
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	f003 0301 	and.w	r3, r3, #1
 800fa38:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	330d      	adds	r3, #13
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa48:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	330e      	adds	r3, #14
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa58:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	7bda      	ldrb	r2, [r3, #15]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	7c1a      	ldrb	r2, [r3, #16]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	7c5a      	ldrb	r2, [r3, #17]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	7c9a      	ldrb	r2, [r3, #18]
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	7cda      	ldrb	r2, [r3, #19]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	7d1a      	ldrb	r2, [r3, #20]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	7d5a      	ldrb	r2, [r3, #21]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	7d9a      	ldrb	r2, [r3, #22]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	7dda      	ldrb	r2, [r3, #23]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	7e1a      	ldrb	r2, [r3, #24]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	7e5a      	ldrb	r2, [r3, #25]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	7e9a      	ldrb	r2, [r3, #26]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	7eda      	ldrb	r2, [r3, #27]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	7f1a      	ldrb	r2, [r3, #28]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	7f5a      	ldrb	r2, [r3, #29]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	7f9a      	ldrb	r2, [r3, #30]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	7fda      	ldrb	r2, [r3, #31]
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	f893 2020 	ldrb.w	r2, [r3, #32]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800fbb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3718      	adds	r7, #24
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b090      	sub	sp, #64	; 0x40
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800fbd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d10a      	bne.n	800fbee <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800fbd8:	f107 020c 	add.w	r2, r7, #12
 800fbdc:	2331      	movs	r3, #49	; 0x31
 800fbde:	f240 110f 	movw	r1, #271	; 0x10f
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f000 f8e8 	bl	800fdb8 <VL53L1_ReadMulti>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800fbee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d109      	bne.n	800fc0a <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800fbf6:	f107 030c 	add.w	r3, r7, #12
 800fbfa:	683a      	ldr	r2, [r7, #0]
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	2031      	movs	r0, #49	; 0x31
 800fc00:	f7ff feb8 	bl	800f974 <VL53L1_i2c_decode_nvm_copy_data>
 800fc04:	4603      	mov	r3, r0
 800fc06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800fc0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3740      	adds	r7, #64	; 0x40
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}

0800fc16 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800fc16:	b580      	push	{r7, lr}
 800fc18:	b086      	sub	sp, #24
 800fc1a:	af02      	add	r7, sp, #8
 800fc1c:	6078      	str	r0, [r7, #4]
 800fc1e:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800fc20:	2300      	movs	r3, #0
 800fc22:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800fc24:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 f9b9 	bl	800ffa0 <VL53L1_WaitUs>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800fc32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d10b      	bne.n	800fc52 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	9301      	str	r3, [sp, #4]
 800fc3e:	2301      	movs	r3, #1
 800fc40:	9300      	str	r3, [sp, #0]
 800fc42:	2301      	movs	r3, #1
 800fc44:	22e5      	movs	r2, #229	; 0xe5
 800fc46:	6839      	ldr	r1, [r7, #0]
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f000 f9bf 	bl	800ffcc <VL53L1_WaitValueMaskEx>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800fc52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d103      	bne.n	800fc62 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800fc5a:	2103      	movs	r1, #3
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f7fe f896 	bl	800dd8e <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800fc62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3710      	adds	r7, #16
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}

0800fc6e <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	b088      	sub	sp, #32
 800fc72:	af02      	add	r7, sp, #8
 800fc74:	6078      	str	r0, [r7, #4]
 800fc76:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800fc80:	2300      	movs	r3, #0
 800fc82:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 800fc84:	2300      	movs	r3, #0
 800fc86:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800fc8e:	f003 0310 	and.w	r3, r3, #16
 800fc92:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800fc94:	7bfb      	ldrb	r3, [r7, #15]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d102      	bne.n	800fca0 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	75fb      	strb	r3, [r7, #23]
 800fc9e:	e001      	b.n	800fca4 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 800fca0:	2300      	movs	r3, #0
 800fca2:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 800fca4:	7dfb      	ldrb	r3, [r7, #23]
 800fca6:	2201      	movs	r2, #1
 800fca8:	9201      	str	r2, [sp, #4]
 800fcaa:	2201      	movs	r2, #1
 800fcac:	9200      	str	r2, [sp, #0]
 800fcae:	2231      	movs	r2, #49	; 0x31
 800fcb0:	6839      	ldr	r1, [r7, #0]
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 f98a 	bl	800ffcc <VL53L1_WaitValueMaskEx>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800fcbc:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3718      	adds	r7, #24
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b088      	sub	sp, #32
 800fccc:	af02      	add	r7, sp, #8
 800fcce:	60f8      	str	r0, [r7, #12]
 800fcd0:	60b9      	str	r1, [r7, #8]
 800fcd2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	330a      	adds	r3, #10
 800fcd8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800fce6:	b299      	uxth	r1, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	9300      	str	r3, [sp, #0]
 800fcf0:	4613      	mov	r3, r2
 800fcf2:	68ba      	ldr	r2, [r7, #8]
 800fcf4:	f7f5 f9b0 	bl	8005058 <HAL_I2C_Master_Transmit>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fcfc:	693b      	ldr	r3, [r7, #16]
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3718      	adds	r7, #24
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}

0800fd06 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fd06:	b580      	push	{r7, lr}
 800fd08:	b088      	sub	sp, #32
 800fd0a:	af02      	add	r7, sp, #8
 800fd0c:	60f8      	str	r0, [r7, #12]
 800fd0e:	60b9      	str	r1, [r7, #8]
 800fd10:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	330a      	adds	r3, #10
 800fd16:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800fd24:	f043 0301 	orr.w	r3, r3, #1
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	b299      	uxth	r1, r3
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	b29a      	uxth	r2, r3
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	9300      	str	r3, [sp, #0]
 800fd34:	4613      	mov	r3, r2
 800fd36:	68ba      	ldr	r2, [r7, #8]
 800fd38:	f7f5 fa8c 	bl	8005254 <HAL_I2C_Master_Receive>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fd40:	693b      	ldr	r3, [r7, #16]
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3718      	adds	r7, #24
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
	...

0800fd4c <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b086      	sub	sp, #24
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	607a      	str	r2, [r7, #4]
 800fd56:	603b      	str	r3, [r7, #0]
 800fd58:	460b      	mov	r3, r1
 800fd5a:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	2bff      	cmp	r3, #255	; 0xff
 800fd64:	d902      	bls.n	800fd6c <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800fd66:	f06f 0303 	mvn.w	r3, #3
 800fd6a:	e01d      	b.n	800fda8 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800fd6c:	897b      	ldrh	r3, [r7, #10]
 800fd6e:	0a1b      	lsrs	r3, r3, #8
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	b2da      	uxtb	r2, r3
 800fd74:	4b0e      	ldr	r3, [pc, #56]	; (800fdb0 <VL53L1_WriteMulti+0x64>)
 800fd76:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fd78:	897b      	ldrh	r3, [r7, #10]
 800fd7a:	b2da      	uxtb	r2, r3
 800fd7c:	4b0c      	ldr	r3, [pc, #48]	; (800fdb0 <VL53L1_WriteMulti+0x64>)
 800fd7e:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800fd80:	683a      	ldr	r2, [r7, #0]
 800fd82:	6879      	ldr	r1, [r7, #4]
 800fd84:	480b      	ldr	r0, [pc, #44]	; (800fdb4 <VL53L1_WriteMulti+0x68>)
 800fd86:	f000 fb97 	bl	80104b8 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	3302      	adds	r3, #2
 800fd8e:	461a      	mov	r2, r3
 800fd90:	4907      	ldr	r1, [pc, #28]	; (800fdb0 <VL53L1_WriteMulti+0x64>)
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f7ff ff98 	bl	800fcc8 <_I2CWrite>
 800fd98:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d001      	beq.n	800fda4 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fda0:	23f3      	movs	r3, #243	; 0xf3
 800fda2:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800fda4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3718      	adds	r7, #24
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	200006c4 	.word	0x200006c4
 800fdb4:	200006c6 	.word	0x200006c6

0800fdb8 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b086      	sub	sp, #24
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	607a      	str	r2, [r7, #4]
 800fdc2:	603b      	str	r3, [r7, #0]
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fdcc:	897b      	ldrh	r3, [r7, #10]
 800fdce:	0a1b      	lsrs	r3, r3, #8
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	b2da      	uxtb	r2, r3
 800fdd4:	4b12      	ldr	r3, [pc, #72]	; (800fe20 <VL53L1_ReadMulti+0x68>)
 800fdd6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fdd8:	897b      	ldrh	r3, [r7, #10]
 800fdda:	b2da      	uxtb	r2, r3
 800fddc:	4b10      	ldr	r3, [pc, #64]	; (800fe20 <VL53L1_ReadMulti+0x68>)
 800fdde:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fde0:	2202      	movs	r2, #2
 800fde2:	490f      	ldr	r1, [pc, #60]	; (800fe20 <VL53L1_ReadMulti+0x68>)
 800fde4:	68f8      	ldr	r0, [r7, #12]
 800fde6:	f7ff ff6f 	bl	800fcc8 <_I2CWrite>
 800fdea:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d002      	beq.n	800fdf8 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fdf2:	23f3      	movs	r3, #243	; 0xf3
 800fdf4:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fdf6:	e00c      	b.n	800fe12 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800fdf8:	683a      	ldr	r2, [r7, #0]
 800fdfa:	6879      	ldr	r1, [r7, #4]
 800fdfc:	68f8      	ldr	r0, [r7, #12]
 800fdfe:	f7ff ff82 	bl	800fd06 <_I2CRead>
 800fe02:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d002      	beq.n	800fe10 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fe0a:	23f3      	movs	r3, #243	; 0xf3
 800fe0c:	75fb      	strb	r3, [r7, #23]
 800fe0e:	e000      	b.n	800fe12 <VL53L1_ReadMulti+0x5a>
    }
done:
 800fe10:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800fe12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3718      	adds	r7, #24
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	200006c4 	.word	0x200006c4

0800fe24 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	807b      	strh	r3, [r7, #2]
 800fe30:	4613      	mov	r3, r2
 800fe32:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fe34:	2300      	movs	r3, #0
 800fe36:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fe38:	887b      	ldrh	r3, [r7, #2]
 800fe3a:	0a1b      	lsrs	r3, r3, #8
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	b2da      	uxtb	r2, r3
 800fe40:	4b0c      	ldr	r3, [pc, #48]	; (800fe74 <VL53L1_WrByte+0x50>)
 800fe42:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fe44:	887b      	ldrh	r3, [r7, #2]
 800fe46:	b2da      	uxtb	r2, r3
 800fe48:	4b0a      	ldr	r3, [pc, #40]	; (800fe74 <VL53L1_WrByte+0x50>)
 800fe4a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800fe4c:	4a09      	ldr	r2, [pc, #36]	; (800fe74 <VL53L1_WrByte+0x50>)
 800fe4e:	787b      	ldrb	r3, [r7, #1]
 800fe50:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800fe52:	2203      	movs	r2, #3
 800fe54:	4907      	ldr	r1, [pc, #28]	; (800fe74 <VL53L1_WrByte+0x50>)
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f7ff ff36 	bl	800fcc8 <_I2CWrite>
 800fe5c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d001      	beq.n	800fe68 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fe64:	23f3      	movs	r3, #243	; 0xf3
 800fe66:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800fe68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3710      	adds	r7, #16
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	200006c4 	.word	0x200006c4

0800fe78 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b086      	sub	sp, #24
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	460b      	mov	r3, r1
 800fe82:	607a      	str	r2, [r7, #4]
 800fe84:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fe86:	2300      	movs	r3, #0
 800fe88:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800fe8a:	897b      	ldrh	r3, [r7, #10]
 800fe8c:	0a1b      	lsrs	r3, r3, #8
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	b2da      	uxtb	r2, r3
 800fe92:	4b12      	ldr	r3, [pc, #72]	; (800fedc <VL53L1_RdByte+0x64>)
 800fe94:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fe96:	897b      	ldrh	r3, [r7, #10]
 800fe98:	b2da      	uxtb	r2, r3
 800fe9a:	4b10      	ldr	r3, [pc, #64]	; (800fedc <VL53L1_RdByte+0x64>)
 800fe9c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fe9e:	2202      	movs	r2, #2
 800fea0:	490e      	ldr	r1, [pc, #56]	; (800fedc <VL53L1_RdByte+0x64>)
 800fea2:	68f8      	ldr	r0, [r7, #12]
 800fea4:	f7ff ff10 	bl	800fcc8 <_I2CWrite>
 800fea8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d002      	beq.n	800feb6 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800feb0:	23f3      	movs	r3, #243	; 0xf3
 800feb2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800feb4:	e00c      	b.n	800fed0 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800feb6:	2201      	movs	r2, #1
 800feb8:	6879      	ldr	r1, [r7, #4]
 800feba:	68f8      	ldr	r0, [r7, #12]
 800febc:	f7ff ff23 	bl	800fd06 <_I2CRead>
 800fec0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d002      	beq.n	800fece <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fec8:	23f3      	movs	r3, #243	; 0xf3
 800feca:	75fb      	strb	r3, [r7, #23]
 800fecc:	e000      	b.n	800fed0 <VL53L1_RdByte+0x58>
    }
done:
 800fece:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800fed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3718      	adds	r7, #24
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	200006c4 	.word	0x200006c4

0800fee0 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b086      	sub	sp, #24
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	460b      	mov	r3, r1
 800feea:	607a      	str	r2, [r7, #4]
 800feec:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800feee:	2300      	movs	r3, #0
 800fef0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fef2:	897b      	ldrh	r3, [r7, #10]
 800fef4:	0a1b      	lsrs	r3, r3, #8
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	b2da      	uxtb	r2, r3
 800fefa:	4b18      	ldr	r3, [pc, #96]	; (800ff5c <VL53L1_RdWord+0x7c>)
 800fefc:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fefe:	897b      	ldrh	r3, [r7, #10]
 800ff00:	b2da      	uxtb	r2, r3
 800ff02:	4b16      	ldr	r3, [pc, #88]	; (800ff5c <VL53L1_RdWord+0x7c>)
 800ff04:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ff06:	2202      	movs	r2, #2
 800ff08:	4914      	ldr	r1, [pc, #80]	; (800ff5c <VL53L1_RdWord+0x7c>)
 800ff0a:	68f8      	ldr	r0, [r7, #12]
 800ff0c:	f7ff fedc 	bl	800fcc8 <_I2CWrite>
 800ff10:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d002      	beq.n	800ff1e <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ff18:	23f3      	movs	r3, #243	; 0xf3
 800ff1a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ff1c:	e017      	b.n	800ff4e <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ff1e:	2202      	movs	r2, #2
 800ff20:	490e      	ldr	r1, [pc, #56]	; (800ff5c <VL53L1_RdWord+0x7c>)
 800ff22:	68f8      	ldr	r0, [r7, #12]
 800ff24:	f7ff feef 	bl	800fd06 <_I2CRead>
 800ff28:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d002      	beq.n	800ff36 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ff30:	23f3      	movs	r3, #243	; 0xf3
 800ff32:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ff34:	e00b      	b.n	800ff4e <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ff36:	4b09      	ldr	r3, [pc, #36]	; (800ff5c <VL53L1_RdWord+0x7c>)
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	021b      	lsls	r3, r3, #8
 800ff3e:	b29a      	uxth	r2, r3
 800ff40:	4b06      	ldr	r3, [pc, #24]	; (800ff5c <VL53L1_RdWord+0x7c>)
 800ff42:	785b      	ldrb	r3, [r3, #1]
 800ff44:	b29b      	uxth	r3, r3
 800ff46:	4413      	add	r3, r2
 800ff48:	b29a      	uxth	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800ff4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3718      	adds	r7, #24
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	bf00      	nop
 800ff5c:	200006c4 	.word	0x200006c4

0800ff60 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b085      	sub	sp, #20
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800ff72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3714      	adds	r7, #20
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr

0800ff82 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b082      	sub	sp, #8
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
 800ff8a:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7f3 fcda 	bl	8003948 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800ff94:	2300      	movs	r3, #0
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
	...

0800ffa0 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	4a06      	ldr	r2, [pc, #24]	; (800ffc8 <VL53L1_WaitUs+0x28>)
 800ffae:	fb82 1203 	smull	r1, r2, r2, r3
 800ffb2:	1192      	asrs	r2, r2, #6
 800ffb4:	17db      	asrs	r3, r3, #31
 800ffb6:	1ad3      	subs	r3, r2, r3
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7f3 fcc5 	bl	8003948 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800ffbe:	2300      	movs	r3, #0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	10624dd3 	.word	0x10624dd3

0800ffcc <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800ffcc:	b590      	push	{r4, r7, lr}
 800ffce:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	f107 040c 	add.w	r4, r7, #12
 800ffd8:	6020      	str	r0, [r4, #0]
 800ffda:	f107 0008 	add.w	r0, r7, #8
 800ffde:	6001      	str	r1, [r0, #0]
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	1dbb      	adds	r3, r7, #6
 800ffe4:	801a      	strh	r2, [r3, #0]
 800ffe6:	1d7b      	adds	r3, r7, #5
 800ffe8:	460a      	mov	r2, r1
 800ffea:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800ffec:	2300      	movs	r3, #0
 800ffee:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800fff2:	2300      	movs	r3, #0
 800fff4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800fff8:	2300      	movs	r3, #0
 800fffa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800fffe:	2300      	movs	r3, #0
 8010000:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8010004:	2300      	movs	r3, #0
 8010006:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 801000a:	2300      	movs	r3, #0
 801000c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8010010:	f107 0310 	add.w	r3, r7, #16
 8010014:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010018:	4935      	ldr	r1, [pc, #212]	; (80100f0 <VL53L1_WaitValueMaskEx+0x124>)
 801001a:	4618      	mov	r0, r3
 801001c:	f000 fa62 	bl	80104e4 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 8010020:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010024:	4618      	mov	r0, r3
 8010026:	f7ff ff9b 	bl	800ff60 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 801002a:	e03f      	b.n	80100ac <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 801002c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8010030:	2b00      	cmp	r3, #0
 8010032:	d10b      	bne.n	801004c <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 8010034:	f207 2213 	addw	r2, r7, #531	; 0x213
 8010038:	1dbb      	adds	r3, r7, #6
 801003a:	8819      	ldrh	r1, [r3, #0]
 801003c:	f107 030c 	add.w	r3, r7, #12
 8010040:	6818      	ldr	r0, [r3, #0]
 8010042:	f7ff ff19 	bl	800fe78 <VL53L1_RdByte>
 8010046:	4603      	mov	r3, r0
 8010048:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 801004c:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8010050:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8010054:	4013      	ands	r3, r2
 8010056:	b2db      	uxtb	r3, r3
 8010058:	1d7a      	adds	r2, r7, #5
 801005a:	7812      	ldrb	r2, [r2, #0]
 801005c:	429a      	cmp	r2, r3
 801005e:	d102      	bne.n	8010066 <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 8010060:	2301      	movs	r3, #1
 8010062:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8010066:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 801006a:	2b00      	cmp	r3, #0
 801006c:	d112      	bne.n	8010094 <VL53L1_WaitValueMaskEx+0xc8>
 801006e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8010072:	2b00      	cmp	r3, #0
 8010074:	d10e      	bne.n	8010094 <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 8010076:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00a      	beq.n	8010094 <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 801007e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8010082:	f107 030c 	add.w	r3, r7, #12
 8010086:	4611      	mov	r1, r2
 8010088:	6818      	ldr	r0, [r3, #0]
 801008a:	f7ff ff7a 	bl	800ff82 <VL53L1_WaitMs>
 801008e:	4603      	mov	r3, r0
 8010090:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 8010094:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8010098:	4618      	mov	r0, r3
 801009a:	f7ff ff61 	bl	800ff60 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 801009e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80100a2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 80100ac:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d10a      	bne.n	80100ca <VL53L1_WaitValueMaskEx+0xfe>
 80100b4:	f107 0308 	add.w	r3, r7, #8
 80100b8:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d203      	bcs.n	80100ca <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 80100c2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d0b0      	beq.n	801002c <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 80100ca:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d106      	bne.n	80100e0 <VL53L1_WaitValueMaskEx+0x114>
 80100d2:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d102      	bne.n	80100e0 <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 80100da:	23f9      	movs	r3, #249	; 0xf9
 80100dc:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 80100e0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd90      	pop	{r4, r7, pc}
 80100ee:	bf00      	nop
 80100f0:	080107a0 	.word	0x080107a0

080100f4 <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b0a4      	sub	sp, #144	; 0x90
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	4603      	mov	r3, r0
 80100fc:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80100fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010102:	2200      	movs	r2, #0
 8010104:	601a      	str	r2, [r3, #0]
 8010106:	605a      	str	r2, [r3, #4]
 8010108:	609a      	str	r2, [r3, #8]
 801010a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 801010c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010110:	2200      	movs	r2, #0
 8010112:	601a      	str	r2, [r3, #0]
 8010114:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8010116:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801011a:	2200      	movs	r2, #0
 801011c:	601a      	str	r2, [r3, #0]
 801011e:	605a      	str	r2, [r3, #4]
 8010120:	609a      	str	r2, [r3, #8]
 8010122:	60da      	str	r2, [r3, #12]
 8010124:	611a      	str	r2, [r3, #16]
 8010126:	615a      	str	r2, [r3, #20]
 8010128:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 801012a:	2300      	movs	r3, #0
 801012c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 8010130:	2300      	movs	r3, #0
 8010132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 8010136:	2300      	movs	r3, #0
 8010138:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 801013c:	2301      	movs	r3, #1
 801013e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8010142:	2300      	movs	r3, #0
 8010144:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8010148:	e009      	b.n	801015e <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 801014a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801014e:	005b      	lsls	r3, r3, #1
 8010150:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8010154:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8010158:	3301      	adds	r3, #1
 801015a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 801015e:	79fa      	ldrb	r2, [r7, #7]
 8010160:	494d      	ldr	r1, [pc, #308]	; (8010298 <DC_MOTOR_Init+0x1a4>)
 8010162:	4613      	mov	r3, r2
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	4413      	add	r3, r2
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	440b      	add	r3, r1
 801016c:	3310      	adds	r3, #16
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 8010174:	429a      	cmp	r2, r3
 8010176:	d3e8      	bcc.n	801014a <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 8010178:	79fa      	ldrb	r2, [r7, #7]
 801017a:	4947      	ldr	r1, [pc, #284]	; (8010298 <DC_MOTOR_Init+0x1a4>)
 801017c:	4613      	mov	r3, r2
 801017e:	009b      	lsls	r3, r3, #2
 8010180:	4413      	add	r3, r2
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	440b      	add	r3, r1
 8010186:	3308      	adds	r3, #8
 8010188:	881b      	ldrh	r3, [r3, #0]
 801018a:	461a      	mov	r2, r3
 801018c:	4b43      	ldr	r3, [pc, #268]	; (801029c <DC_MOTOR_Init+0x1a8>)
 801018e:	fb03 f302 	mul.w	r3, r3, r2
 8010192:	4618      	mov	r0, r3
 8010194:	79fa      	ldrb	r2, [r7, #7]
 8010196:	4940      	ldr	r1, [pc, #256]	; (8010298 <DC_MOTOR_Init+0x1a4>)
 8010198:	4613      	mov	r3, r2
 801019a:	009b      	lsls	r3, r3, #2
 801019c:	4413      	add	r3, r2
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	440b      	add	r3, r1
 80101a2:	330c      	adds	r3, #12
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80101aa:	fb02 f303 	mul.w	r3, r2, r3
 80101ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80101b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 80101b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80101ba:	3b01      	subs	r3, #1
 80101bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 80101c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101c4:	3b02      	subs	r3, #2
 80101c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 80101ca:	79fa      	ldrb	r2, [r7, #7]
 80101cc:	4932      	ldr	r1, [pc, #200]	; (8010298 <DC_MOTOR_Init+0x1a4>)
 80101ce:	4613      	mov	r3, r2
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	4413      	add	r3, r2
 80101d4:	009b      	lsls	r3, r3, #2
 80101d6:	440b      	add	r3, r1
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 80101dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80101e0:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80101e2:	2360      	movs	r3, #96	; 0x60
 80101e4:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 80101e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101ea:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80101ec:	2300      	movs	r3, #0
 80101ee:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80101f0:	2380      	movs	r3, #128	; 0x80
 80101f2:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 80101f4:	f107 0308 	add.w	r3, r7, #8
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7f7 fb89 	bl	8007910 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80101fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010202:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8010204:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8010208:	f107 0308 	add.w	r3, r7, #8
 801020c:	4611      	mov	r1, r2
 801020e:	4618      	mov	r0, r3
 8010210:	f7f8 fc34 	bl	8008a7c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8010214:	f107 0308 	add.w	r3, r7, #8
 8010218:	4618      	mov	r0, r3
 801021a:	f7f7 fd2f 	bl	8007c7c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801021e:	2300      	movs	r3, #0
 8010220:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010222:	2300      	movs	r3, #0
 8010224:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8010226:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801022a:	f107 0308 	add.w	r3, r7, #8
 801022e:	4611      	mov	r1, r2
 8010230:	4618      	mov	r0, r3
 8010232:	f7f9 fbc3 	bl	80099bc <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010236:	2360      	movs	r3, #96	; 0x60
 8010238:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 801023a:	2300      	movs	r3, #0
 801023c:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801023e:	2300      	movs	r3, #0
 8010240:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010242:	2300      	movs	r3, #0
 8010244:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8010246:	79fa      	ldrb	r2, [r7, #7]
 8010248:	4913      	ldr	r1, [pc, #76]	; (8010298 <DC_MOTOR_Init+0x1a4>)
 801024a:	4613      	mov	r3, r2
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	4413      	add	r3, r2
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	440b      	add	r3, r1
 8010254:	3304      	adds	r3, #4
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801025c:	f107 0308 	add.w	r3, r7, #8
 8010260:	4618      	mov	r0, r3
 8010262:	f7f8 fa33 	bl	80086cc <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 8010266:	f107 0308 	add.w	r3, r7, #8
 801026a:	4618      	mov	r0, r3
 801026c:	f7f3 f8e8 	bl	8003440 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8010270:	79fa      	ldrb	r2, [r7, #7]
 8010272:	4909      	ldr	r1, [pc, #36]	; (8010298 <DC_MOTOR_Init+0x1a4>)
 8010274:	4613      	mov	r3, r2
 8010276:	009b      	lsls	r3, r3, #2
 8010278:	4413      	add	r3, r2
 801027a:	009b      	lsls	r3, r3, #2
 801027c:	440b      	add	r3, r1
 801027e:	3304      	adds	r3, #4
 8010280:	681a      	ldr	r2, [r3, #0]
 8010282:	f107 0308 	add.w	r3, r7, #8
 8010286:	4611      	mov	r1, r2
 8010288:	4618      	mov	r0, r3
 801028a:	f7f7 fde7 	bl	8007e5c <HAL_TIM_PWM_Start>
}
 801028e:	bf00      	nop
 8010290:	3790      	adds	r7, #144	; 0x90
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	080107e4 	.word	0x080107e4
 801029c:	000f4240 	.word	0x000f4240

080102a0 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	4603      	mov	r3, r0
 80102a8:	460a      	mov	r2, r1
 80102aa:	71fb      	strb	r3, [r7, #7]
 80102ac:	4613      	mov	r3, r2
 80102ae:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80102b0:	79fa      	ldrb	r2, [r7, #7]
 80102b2:	4928      	ldr	r1, [pc, #160]	; (8010354 <DC_MOTOR_Start+0xb4>)
 80102b4:	4613      	mov	r3, r2
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	4413      	add	r3, r2
 80102ba:	009b      	lsls	r3, r3, #2
 80102bc:	440b      	add	r3, r1
 80102be:	3304      	adds	r3, #4
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d10a      	bne.n	80102dc <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 80102c6:	79fa      	ldrb	r2, [r7, #7]
 80102c8:	4922      	ldr	r1, [pc, #136]	; (8010354 <DC_MOTOR_Start+0xb4>)
 80102ca:	4613      	mov	r3, r2
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	4413      	add	r3, r2
 80102d0:	009b      	lsls	r3, r3, #2
 80102d2:	440b      	add	r3, r1
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	88ba      	ldrh	r2, [r7, #4]
 80102d8:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 80102da:	e035      	b.n	8010348 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80102dc:	79fa      	ldrb	r2, [r7, #7]
 80102de:	491d      	ldr	r1, [pc, #116]	; (8010354 <DC_MOTOR_Start+0xb4>)
 80102e0:	4613      	mov	r3, r2
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	4413      	add	r3, r2
 80102e6:	009b      	lsls	r3, r3, #2
 80102e8:	440b      	add	r3, r1
 80102ea:	3304      	adds	r3, #4
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b04      	cmp	r3, #4
 80102f0:	d10a      	bne.n	8010308 <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 80102f2:	79fa      	ldrb	r2, [r7, #7]
 80102f4:	4917      	ldr	r1, [pc, #92]	; (8010354 <DC_MOTOR_Start+0xb4>)
 80102f6:	4613      	mov	r3, r2
 80102f8:	009b      	lsls	r3, r3, #2
 80102fa:	4413      	add	r3, r2
 80102fc:	009b      	lsls	r3, r3, #2
 80102fe:	440b      	add	r3, r1
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	88ba      	ldrh	r2, [r7, #4]
 8010304:	639a      	str	r2, [r3, #56]	; 0x38
}
 8010306:	e01f      	b.n	8010348 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8010308:	79fa      	ldrb	r2, [r7, #7]
 801030a:	4912      	ldr	r1, [pc, #72]	; (8010354 <DC_MOTOR_Start+0xb4>)
 801030c:	4613      	mov	r3, r2
 801030e:	009b      	lsls	r3, r3, #2
 8010310:	4413      	add	r3, r2
 8010312:	009b      	lsls	r3, r3, #2
 8010314:	440b      	add	r3, r1
 8010316:	3304      	adds	r3, #4
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	2b08      	cmp	r3, #8
 801031c:	d10a      	bne.n	8010334 <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 801031e:	79fa      	ldrb	r2, [r7, #7]
 8010320:	490c      	ldr	r1, [pc, #48]	; (8010354 <DC_MOTOR_Start+0xb4>)
 8010322:	4613      	mov	r3, r2
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	4413      	add	r3, r2
 8010328:	009b      	lsls	r3, r3, #2
 801032a:	440b      	add	r3, r1
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	88ba      	ldrh	r2, [r7, #4]
 8010330:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8010332:	e009      	b.n	8010348 <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8010334:	79fa      	ldrb	r2, [r7, #7]
 8010336:	4907      	ldr	r1, [pc, #28]	; (8010354 <DC_MOTOR_Start+0xb4>)
 8010338:	4613      	mov	r3, r2
 801033a:	009b      	lsls	r3, r3, #2
 801033c:	4413      	add	r3, r2
 801033e:	009b      	lsls	r3, r3, #2
 8010340:	440b      	add	r3, r1
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	88ba      	ldrh	r2, [r7, #4]
 8010346:	641a      	str	r2, [r3, #64]	; 0x40
}
 8010348:	bf00      	nop
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr
 8010354:	080107e4 	.word	0x080107e4

08010358 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	4603      	mov	r3, r0
 8010360:	460a      	mov	r2, r1
 8010362:	71fb      	strb	r3, [r7, #7]
 8010364:	4613      	mov	r3, r2
 8010366:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8010368:	79fa      	ldrb	r2, [r7, #7]
 801036a:	4928      	ldr	r1, [pc, #160]	; (801040c <DC_MOTOR_Set_Speed+0xb4>)
 801036c:	4613      	mov	r3, r2
 801036e:	009b      	lsls	r3, r3, #2
 8010370:	4413      	add	r3, r2
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	440b      	add	r3, r1
 8010376:	3304      	adds	r3, #4
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d10a      	bne.n	8010394 <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 801037e:	79fa      	ldrb	r2, [r7, #7]
 8010380:	4922      	ldr	r1, [pc, #136]	; (801040c <DC_MOTOR_Set_Speed+0xb4>)
 8010382:	4613      	mov	r3, r2
 8010384:	009b      	lsls	r3, r3, #2
 8010386:	4413      	add	r3, r2
 8010388:	009b      	lsls	r3, r3, #2
 801038a:	440b      	add	r3, r1
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	88ba      	ldrh	r2, [r7, #4]
 8010390:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8010392:	e035      	b.n	8010400 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8010394:	79fa      	ldrb	r2, [r7, #7]
 8010396:	491d      	ldr	r1, [pc, #116]	; (801040c <DC_MOTOR_Set_Speed+0xb4>)
 8010398:	4613      	mov	r3, r2
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	4413      	add	r3, r2
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	440b      	add	r3, r1
 80103a2:	3304      	adds	r3, #4
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	2b04      	cmp	r3, #4
 80103a8:	d10a      	bne.n	80103c0 <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 80103aa:	79fa      	ldrb	r2, [r7, #7]
 80103ac:	4917      	ldr	r1, [pc, #92]	; (801040c <DC_MOTOR_Set_Speed+0xb4>)
 80103ae:	4613      	mov	r3, r2
 80103b0:	009b      	lsls	r3, r3, #2
 80103b2:	4413      	add	r3, r2
 80103b4:	009b      	lsls	r3, r3, #2
 80103b6:	440b      	add	r3, r1
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	88ba      	ldrh	r2, [r7, #4]
 80103bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80103be:	e01f      	b.n	8010400 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 80103c0:	79fa      	ldrb	r2, [r7, #7]
 80103c2:	4912      	ldr	r1, [pc, #72]	; (801040c <DC_MOTOR_Set_Speed+0xb4>)
 80103c4:	4613      	mov	r3, r2
 80103c6:	009b      	lsls	r3, r3, #2
 80103c8:	4413      	add	r3, r2
 80103ca:	009b      	lsls	r3, r3, #2
 80103cc:	440b      	add	r3, r1
 80103ce:	3304      	adds	r3, #4
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	2b08      	cmp	r3, #8
 80103d4:	d10a      	bne.n	80103ec <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 80103d6:	79fa      	ldrb	r2, [r7, #7]
 80103d8:	490c      	ldr	r1, [pc, #48]	; (801040c <DC_MOTOR_Set_Speed+0xb4>)
 80103da:	4613      	mov	r3, r2
 80103dc:	009b      	lsls	r3, r3, #2
 80103de:	4413      	add	r3, r2
 80103e0:	009b      	lsls	r3, r3, #2
 80103e2:	440b      	add	r3, r1
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	88ba      	ldrh	r2, [r7, #4]
 80103e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80103ea:	e009      	b.n	8010400 <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 80103ec:	79fa      	ldrb	r2, [r7, #7]
 80103ee:	4907      	ldr	r1, [pc, #28]	; (801040c <DC_MOTOR_Set_Speed+0xb4>)
 80103f0:	4613      	mov	r3, r2
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	4413      	add	r3, r2
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	440b      	add	r3, r1
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	88ba      	ldrh	r2, [r7, #4]
 80103fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8010400:	bf00      	nop
 8010402:	370c      	adds	r7, #12
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr
 801040c:	080107e4 	.word	0x080107e4

08010410 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8010410:	b480      	push	{r7}
 8010412:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8010414:	4b14      	ldr	r3, [pc, #80]	; (8010468 <DWT_Delay_Init+0x58>)
 8010416:	68db      	ldr	r3, [r3, #12]
 8010418:	4a13      	ldr	r2, [pc, #76]	; (8010468 <DWT_Delay_Init+0x58>)
 801041a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801041e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8010420:	4b11      	ldr	r3, [pc, #68]	; (8010468 <DWT_Delay_Init+0x58>)
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	4a10      	ldr	r2, [pc, #64]	; (8010468 <DWT_Delay_Init+0x58>)
 8010426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801042a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 801042c:	4b0f      	ldr	r3, [pc, #60]	; (801046c <DWT_Delay_Init+0x5c>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4a0e      	ldr	r2, [pc, #56]	; (801046c <DWT_Delay_Init+0x5c>)
 8010432:	f023 0301 	bic.w	r3, r3, #1
 8010436:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8010438:	4b0c      	ldr	r3, [pc, #48]	; (801046c <DWT_Delay_Init+0x5c>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4a0b      	ldr	r2, [pc, #44]	; (801046c <DWT_Delay_Init+0x5c>)
 801043e:	f043 0301 	orr.w	r3, r3, #1
 8010442:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8010444:	4b09      	ldr	r3, [pc, #36]	; (801046c <DWT_Delay_Init+0x5c>)
 8010446:	2200      	movs	r2, #0
 8010448:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 801044a:	bf00      	nop
    __ASM volatile ("NOP");
 801044c:	bf00      	nop
    __ASM volatile ("NOP");
 801044e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8010450:	4b06      	ldr	r3, [pc, #24]	; (801046c <DWT_Delay_Init+0x5c>)
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d001      	beq.n	801045c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8010458:	2300      	movs	r3, #0
 801045a:	e000      	b.n	801045e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 801045c:	2301      	movs	r3, #1
    }
}
 801045e:	4618      	mov	r0, r3
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr
 8010468:	e000edf0 	.word	0xe000edf0
 801046c:	e0001000 	.word	0xe0001000

08010470 <__libc_init_array>:
 8010470:	b570      	push	{r4, r5, r6, lr}
 8010472:	4d0d      	ldr	r5, [pc, #52]	; (80104a8 <__libc_init_array+0x38>)
 8010474:	4c0d      	ldr	r4, [pc, #52]	; (80104ac <__libc_init_array+0x3c>)
 8010476:	1b64      	subs	r4, r4, r5
 8010478:	10a4      	asrs	r4, r4, #2
 801047a:	2600      	movs	r6, #0
 801047c:	42a6      	cmp	r6, r4
 801047e:	d109      	bne.n	8010494 <__libc_init_array+0x24>
 8010480:	4d0b      	ldr	r5, [pc, #44]	; (80104b0 <__libc_init_array+0x40>)
 8010482:	4c0c      	ldr	r4, [pc, #48]	; (80104b4 <__libc_init_array+0x44>)
 8010484:	f000 f842 	bl	801050c <_init>
 8010488:	1b64      	subs	r4, r4, r5
 801048a:	10a4      	asrs	r4, r4, #2
 801048c:	2600      	movs	r6, #0
 801048e:	42a6      	cmp	r6, r4
 8010490:	d105      	bne.n	801049e <__libc_init_array+0x2e>
 8010492:	bd70      	pop	{r4, r5, r6, pc}
 8010494:	f855 3b04 	ldr.w	r3, [r5], #4
 8010498:	4798      	blx	r3
 801049a:	3601      	adds	r6, #1
 801049c:	e7ee      	b.n	801047c <__libc_init_array+0xc>
 801049e:	f855 3b04 	ldr.w	r3, [r5], #4
 80104a2:	4798      	blx	r3
 80104a4:	3601      	adds	r6, #1
 80104a6:	e7f2      	b.n	801048e <__libc_init_array+0x1e>
 80104a8:	08010814 	.word	0x08010814
 80104ac:	08010814 	.word	0x08010814
 80104b0:	08010814 	.word	0x08010814
 80104b4:	08010818 	.word	0x08010818

080104b8 <memcpy>:
 80104b8:	440a      	add	r2, r1
 80104ba:	4291      	cmp	r1, r2
 80104bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80104c0:	d100      	bne.n	80104c4 <memcpy+0xc>
 80104c2:	4770      	bx	lr
 80104c4:	b510      	push	{r4, lr}
 80104c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104ce:	4291      	cmp	r1, r2
 80104d0:	d1f9      	bne.n	80104c6 <memcpy+0xe>
 80104d2:	bd10      	pop	{r4, pc}

080104d4 <memset>:
 80104d4:	4402      	add	r2, r0
 80104d6:	4603      	mov	r3, r0
 80104d8:	4293      	cmp	r3, r2
 80104da:	d100      	bne.n	80104de <memset+0xa>
 80104dc:	4770      	bx	lr
 80104de:	f803 1b01 	strb.w	r1, [r3], #1
 80104e2:	e7f9      	b.n	80104d8 <memset+0x4>

080104e4 <strncpy>:
 80104e4:	b510      	push	{r4, lr}
 80104e6:	3901      	subs	r1, #1
 80104e8:	4603      	mov	r3, r0
 80104ea:	b132      	cbz	r2, 80104fa <strncpy+0x16>
 80104ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80104f0:	f803 4b01 	strb.w	r4, [r3], #1
 80104f4:	3a01      	subs	r2, #1
 80104f6:	2c00      	cmp	r4, #0
 80104f8:	d1f7      	bne.n	80104ea <strncpy+0x6>
 80104fa:	441a      	add	r2, r3
 80104fc:	2100      	movs	r1, #0
 80104fe:	4293      	cmp	r3, r2
 8010500:	d100      	bne.n	8010504 <strncpy+0x20>
 8010502:	bd10      	pop	{r4, pc}
 8010504:	f803 1b01 	strb.w	r1, [r3], #1
 8010508:	e7f9      	b.n	80104fe <strncpy+0x1a>
	...

0801050c <_init>:
 801050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801050e:	bf00      	nop
 8010510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010512:	bc08      	pop	{r3}
 8010514:	469e      	mov	lr, r3
 8010516:	4770      	bx	lr

08010518 <_fini>:
 8010518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801051a:	bf00      	nop
 801051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801051e:	bc08      	pop	{r3}
 8010520:	469e      	mov	lr, r3
 8010522:	4770      	bx	lr
